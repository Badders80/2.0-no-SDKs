{
  "version": 3,
  "sources": ["../../ox/core/Hex.ts", "../../@noble/curves/src/abstract/utils.ts", "../../ox/core/version.ts", "../../ox/core/internal/errors.ts", "../../ox/core/Errors.ts", "../../ox/core/Json.ts", "../../ox/core/internal/bytes.ts", "../../ox/core/internal/hex.ts", "../../ox/core/Bytes.ts", "../../ox/core/PublicKey.ts", "../../ox/core/Signature.ts", "../../ox/core/Solidity.ts", "../../ox/core/WebAuthnP256.ts", "../../ox/core/Base64.ts", "../../ox/node_modules/@noble/hashes/src/crypto.ts", "../../ox/node_modules/@noble/hashes/src/utils.ts", "../../ox/node_modules/@noble/hashes/src/_md.ts", "../../ox/node_modules/@noble/hashes/src/legacy.ts", "../../ox/node_modules/@noble/hashes/src/_u64.ts", "../../ox/node_modules/@noble/hashes/src/sha3.ts", "../../ox/node_modules/@noble/hashes/src/sha2.ts", "../../ox/node_modules/@noble/hashes/src/sha256.ts", "../../ox/core/Hash.ts", "../../@noble/curves/src/p256.ts", "../../@noble/curves/src/nist.ts", "../../ox/core/P256.ts", "../../ox/core/internal/webauthn.ts", "../../ox/core/WebCryptoP256.ts", "../../ox/core/internal/lru.ts", "../../ox/core/Caches.ts", "../../ox/core/Address.ts", "../../ox/core/internal/abiItem.ts", "../../ox/core/AbiItem.ts", "../../ox/core/internal/cursor.ts", "../../ox/core/AbiParameters.ts", "../../ox/core/AbiError.ts", "../../ox/core/internal/base58.ts", "../../ox/node_modules/@noble/hashes/src/_blake.ts", "../../ox/node_modules/@noble/hashes/src/blake2.ts", "../../ox/node_modules/@noble/hashes/src/blake3.ts", "../../ox/core/Blobs.ts", "../../@noble/curves/src/bls12-381.ts", "../../@noble/curves/src/abstract/bls.ts", "../../@noble/curves/src/abstract/tower.ts", "../../@adraffy/ens-normalize/dist/index.mjs", "../../ox/node_modules/@scure/bip32/index.ts", "../../ox/node_modules/@noble/hashes/src/hmac.ts", "../../ox/core/Secp256k1.ts", "../../ox/node_modules/@scure/bip39/esm/index.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/czech.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/english.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/french.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/italian.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/japanese.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/korean.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/portuguese.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/simplified-chinese.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/spanish.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/traditional-chinese.js", "../../ox/core/Provider.ts", "../../ox/core/RpcResponse.ts", "../../viem/account-abstraction/errors/bundler.ts", "../../viem/account-abstraction/errors/userOperation.ts", "../../viem/account-abstraction/utils/errors/getBundlerError.ts", "../../viem/account-abstraction/utils/errors/getUserOperationError.ts", "../../viem/account-abstraction/utils/formatters/userOperationGas.ts", "../../viem/account-abstraction/utils/formatters/userOperationRequest.ts", "../../viem/account-abstraction/actions/paymaster/getPaymasterData.ts", "../../viem/account-abstraction/actions/paymaster/getPaymasterStubData.ts", "../../viem/account-abstraction/actions/bundler/prepareUserOperation.ts", "../../viem/account-abstraction/actions/bundler/estimateUserOperationGas.ts", "../../viem/account-abstraction/actions/bundler/getSupportedEntryPoints.ts", "../../viem/account-abstraction/utils/formatters/userOperation.ts", "../../viem/account-abstraction/actions/bundler/getUserOperation.ts", "../../viem/account-abstraction/utils/formatters/userOperationReceipt.ts", "../../viem/account-abstraction/actions/bundler/getUserOperationReceipt.ts", "../../viem/account-abstraction/actions/bundler/sendUserOperation.ts", "../../viem/account-abstraction/actions/bundler/waitForUserOperationReceipt.ts", "../../viem/account-abstraction/clients/decorators/bundler.ts", "../../viem/account-abstraction/clients/createBundlerClient.ts", "../../viem/node_modules/ox/core/Base64.ts", "../../viem/node_modules/@noble/curves/src/nist.ts", "../../viem/node_modules/@noble/curves/src/p256.ts", "../../viem/node_modules/ox/core/WebAuthnP256.ts", "../../viem/account-abstraction/constants/abis.ts", "../../viem/account-abstraction/utils/userOperation/getInitCode.ts", "../../viem/account-abstraction/utils/userOperation/toPackedUserOperation.ts", "../../viem/account-abstraction/utils/userOperation/getUserOperationTypedData.ts", "../../viem/account-abstraction/utils/userOperation/getUserOperationHash.ts", "../../viem/account-abstraction/accounts/toSmartAccount.ts", "../../viem/account-abstraction/constants/address.ts", "../../viem/experimental/erc7821/constants.ts", "../../viem/node_modules/ox/core/AbiError.ts", "../../viem/experimental/erc7821/actions/supportsExecutionMode.ts"],
  "sourcesContent": ["import { equalBytes } from '@noble/curves/abstract/utils'\r\nimport * as Bytes from './Bytes.js'\r\nimport * as Errors from './Errors.js'\r\nimport * as Json from './Json.js'\r\nimport * as internal_bytes from './internal/bytes.js'\r\nimport * as internal from './internal/hex.js'\r\n\r\nconst encoder = /*#__PURE__*/ new TextEncoder()\r\n\r\nconst hexes = /*#__PURE__*/ Array.from({ length: 256 }, (_v, i) =>\r\n  i.toString(16).padStart(2, '0'),\r\n)\r\n\r\n/** Root type for a Hex string. */\r\nexport type Hex = `0x${string}`\r\n\r\n/**\r\n * Asserts if the given value is {@link ox#Hex.Hex}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.assert('abc')\r\n * // @error: InvalidHexValueTypeError:\r\n * // @error: Value `\"abc\"` of type `string` is an invalid hex type.\r\n * // @error: Hex types must be represented as `\"0x\\${string}\"`.\r\n * ```\r\n *\r\n * @param value - The value to assert.\r\n * @param options - Options.\r\n */\r\nexport function assert(\r\n  value: unknown,\r\n  options: assert.Options = {},\r\n): asserts value is Hex {\r\n  const { strict = false } = options\r\n  if (!value) throw new InvalidHexTypeError(value)\r\n  if (typeof value !== 'string') throw new InvalidHexTypeError(value)\r\n  if (strict) {\r\n    if (!/^0x[0-9a-fA-F]*$/.test(value)) throw new InvalidHexValueError(value)\r\n  }\r\n  if (!value.startsWith('0x')) throw new InvalidHexValueError(value)\r\n}\r\n\r\nexport declare namespace assert {\r\n  type Options = {\r\n    /** Checks if the {@link ox#Hex.Hex} value contains invalid hexadecimal characters. @default false */\r\n    strict?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | InvalidHexTypeError\r\n    | InvalidHexValueError\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Concatenates two or more {@link ox#Hex.Hex}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.concat('0x123', '0x456')\r\n * // @log: '0x123456'\r\n * ```\r\n *\r\n * @param values - The {@link ox#Hex.Hex} values to concatenate.\r\n * @returns The concatenated {@link ox#Hex.Hex} value.\r\n */\r\nexport function concat(...values: readonly Hex[]): Hex {\r\n  return `0x${(values as Hex[]).reduce((acc, x) => acc + x.replace('0x', ''), '')}`\r\n}\r\n\r\nexport declare namespace concat {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Instantiates a {@link ox#Hex.Hex} value from a hex string or {@link ox#Bytes.Bytes} value.\r\n *\r\n * :::tip\r\n *\r\n * To instantiate from a **Boolean**, **String**, or **Number**, use one of the following:\r\n *\r\n * - `Hex.fromBoolean`\r\n *\r\n * - `Hex.fromString`\r\n *\r\n * - `Hex.fromNumber`\r\n *\r\n * :::\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes, Hex } from 'ox'\r\n *\r\n * Hex.from('0x48656c6c6f20576f726c6421')\r\n * // @log: '0x48656c6c6f20576f726c6421'\r\n *\r\n * Hex.from(Bytes.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\r\n * // @log: '0x48656c6c6f20576f726c6421'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Bytes.Bytes} value to encode.\r\n * @returns The encoded {@link ox#Hex.Hex} value.\r\n */\r\nexport function from(value: Hex | Bytes.Bytes | readonly number[]): Hex {\r\n  if (value instanceof Uint8Array) return fromBytes(value)\r\n  if (Array.isArray(value)) return fromBytes(new Uint8Array(value))\r\n  return value as never\r\n}\r\n\r\nexport declare namespace from {\r\n  type Options = {\r\n    /** The size (in bytes) of the output hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType = fromBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a boolean into a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.fromBoolean(true)\r\n * // @log: '0x1'\r\n *\r\n * Hex.fromBoolean(false)\r\n * // @log: '0x0'\r\n *\r\n * Hex.fromBoolean(true, { size: 32 })\r\n * // @log: '0x0000000000000000000000000000000000000000000000000000000000000001'\r\n * ```\r\n *\r\n * @param value - The boolean value to encode.\r\n * @param options - Options.\r\n * @returns The encoded {@link ox#Hex.Hex} value.\r\n */\r\nexport function fromBoolean(\r\n  value: boolean,\r\n  options: fromBoolean.Options = {},\r\n): Hex {\r\n  const hex: Hex = `0x${Number(value)}`\r\n  if (typeof options.size === 'number') {\r\n    internal.assertSize(hex, options.size)\r\n    return padLeft(hex, options.size)\r\n  }\r\n  return hex\r\n}\r\n\r\nexport declare namespace fromBoolean {\r\n  type Options = {\r\n    /** The size (in bytes) of the output hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal.assertSize.ErrorType\r\n    | padLeft.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a {@link ox#Bytes.Bytes} value into a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes, Hex } from 'ox'\r\n *\r\n * Hex.fromBytes(Bytes.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\r\n * // @log: '0x48656c6c6f20576f726c6421'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Bytes.Bytes} value to encode.\r\n * @param options - Options.\r\n * @returns The encoded {@link ox#Hex.Hex} value.\r\n */\r\nexport function fromBytes(\r\n  value: Bytes.Bytes,\r\n  options: fromBytes.Options = {},\r\n): Hex {\r\n  let string = ''\r\n  for (let i = 0; i < value.length; i++) string += hexes[value[i]!]\r\n  const hex = `0x${string}` as const\r\n\r\n  if (typeof options.size === 'number') {\r\n    internal.assertSize(hex, options.size)\r\n    return padRight(hex, options.size)\r\n  }\r\n  return hex\r\n}\r\n\r\nexport declare namespace fromBytes {\r\n  type Options = {\r\n    /** The size (in bytes) of the output hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal.assertSize.ErrorType\r\n    | padRight.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a number or bigint into a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.fromNumber(420)\r\n * // @log: '0x1a4'\r\n *\r\n * Hex.fromNumber(420, { size: 32 })\r\n * // @log: '0x00000000000000000000000000000000000000000000000000000000000001a4'\r\n * ```\r\n *\r\n * @param value - The number or bigint value to encode.\r\n * @param options - Options.\r\n * @returns The encoded {@link ox#Hex.Hex} value.\r\n */\r\nexport function fromNumber(\r\n  value: number | bigint,\r\n  options: fromNumber.Options = {},\r\n): Hex {\r\n  const { signed, size } = options\r\n\r\n  const value_ = BigInt(value)\r\n\r\n  let maxValue: bigint | number | undefined\r\n  if (size) {\r\n    if (signed) maxValue = (1n << (BigInt(size) * 8n - 1n)) - 1n\r\n    else maxValue = 2n ** (BigInt(size) * 8n) - 1n\r\n  } else if (typeof value === 'number') {\r\n    maxValue = BigInt(Number.MAX_SAFE_INTEGER)\r\n  }\r\n\r\n  const minValue = typeof maxValue === 'bigint' && signed ? -maxValue - 1n : 0\r\n\r\n  if ((maxValue && value_ > maxValue) || value_ < minValue) {\r\n    const suffix = typeof value === 'bigint' ? 'n' : ''\r\n    throw new IntegerOutOfRangeError({\r\n      max: maxValue ? `${maxValue}${suffix}` : undefined,\r\n      min: `${minValue}${suffix}`,\r\n      signed,\r\n      size,\r\n      value: `${value}${suffix}`,\r\n    })\r\n  }\r\n\r\n  const stringValue = (\r\n    signed && value_ < 0 ? (1n << BigInt(size * 8)) + BigInt(value_) : value_\r\n  ).toString(16)\r\n\r\n  const hex = `0x${stringValue}` as Hex\r\n  if (size) return padLeft(hex, size) as Hex\r\n  return hex\r\n}\r\n\r\nexport declare namespace fromNumber {\r\n  type Options =\r\n    | {\r\n        /** Whether or not the number of a signed representation. */\r\n        signed?: boolean | undefined\r\n        /** The size (in bytes) of the output hex value. */\r\n        size: number\r\n      }\r\n    | {\r\n        signed?: undefined\r\n        /** The size (in bytes) of the output hex value. */\r\n        size?: number | undefined\r\n      }\r\n\r\n  type ErrorType =\r\n    | IntegerOutOfRangeError\r\n    | padLeft.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a string into a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n * Hex.fromString('Hello World!')\r\n * // '0x48656c6c6f20576f726c6421'\r\n *\r\n * Hex.fromString('Hello World!', { size: 32 })\r\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\r\n * ```\r\n *\r\n * @param value - The string value to encode.\r\n * @param options - Options.\r\n * @returns The encoded {@link ox#Hex.Hex} value.\r\n */\r\nexport function fromString(\r\n  value: string,\r\n  options: fromString.Options = {},\r\n): Hex {\r\n  return fromBytes(encoder.encode(value), options)\r\n}\r\n\r\nexport declare namespace fromString {\r\n  type Options = {\r\n    /** The size (in bytes) of the output hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType = fromBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Checks if two {@link ox#Hex.Hex} values are equal.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.isEqual('0xdeadbeef', '0xdeadbeef')\r\n * // @log: true\r\n *\r\n * Hex.isEqual('0xda', '0xba')\r\n * // @log: false\r\n * ```\r\n *\r\n * @param hexA - The first {@link ox#Hex.Hex} value.\r\n * @param hexB - The second {@link ox#Hex.Hex} value.\r\n * @returns `true` if the two {@link ox#Hex.Hex} values are equal, `false` otherwise.\r\n */\r\nexport function isEqual(hexA: Hex, hexB: Hex) {\r\n  return equalBytes(Bytes.fromHex(hexA), Bytes.fromHex(hexB))\r\n}\r\n\r\nexport declare namespace isEqual {\r\n  type ErrorType = Bytes.fromHex.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Pads a {@link ox#Hex.Hex} value to the left with zero bytes until it reaches the given `size` (default: 32 bytes).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.padLeft('0x1234', 4)\r\n * // @log: '0x00001234'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Hex.Hex} value to pad.\r\n * @param size - The size (in bytes) of the output hex value.\r\n * @returns The padded {@link ox#Hex.Hex} value.\r\n */\r\nexport function padLeft(\r\n  value: Hex,\r\n  size?: number | undefined,\r\n): padLeft.ReturnType {\r\n  return internal.pad(value, { dir: 'left', size })\r\n}\r\n\r\nexport declare namespace padLeft {\r\n  type ReturnType = Hex\r\n  type ErrorType = internal.pad.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Pads a {@link ox#Hex.Hex} value to the right with zero bytes until it reaches the given `size` (default: 32 bytes).\r\n *\r\n * @example\r\n * ```ts\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.padRight('0x1234', 4)\r\n * // @log: '0x12340000'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Hex.Hex} value to pad.\r\n * @param size - The size (in bytes) of the output hex value.\r\n * @returns The padded {@link ox#Hex.Hex} value.\r\n */\r\nexport function padRight(\r\n  value: Hex,\r\n  size?: number | undefined,\r\n): padRight.ReturnType {\r\n  return internal.pad(value, { dir: 'right', size })\r\n}\r\n\r\nexport declare namespace padRight {\r\n  type ReturnType = Hex\r\n  type ErrorType = internal.pad.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Generates a random {@link ox#Hex.Hex} value of the specified length.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * const hex = Hex.random(32)\r\n * // @log: '0x...'\r\n * ```\r\n *\r\n * @returns Random {@link ox#Hex.Hex} value.\r\n */\r\nexport function random(length: number): Hex {\r\n  return fromBytes(Bytes.random(length))\r\n}\r\n\r\nexport declare namespace random {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Returns a section of a {@link ox#Bytes.Bytes} value given a start/end bytes offset.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.slice('0x0123456789', 1, 4)\r\n * // @log: '0x234567'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Hex.Hex} value to slice.\r\n * @param start - The start offset (in bytes).\r\n * @param end - The end offset (in bytes).\r\n * @param options - Options.\r\n * @returns The sliced {@link ox#Hex.Hex} value.\r\n */\r\nexport function slice(\r\n  value: Hex,\r\n  start?: number | undefined,\r\n  end?: number | undefined,\r\n  options: slice.Options = {},\r\n): Hex {\r\n  const { strict } = options\r\n  internal.assertStartOffset(value, start)\r\n  const value_ = `0x${value\r\n    .replace('0x', '')\r\n    .slice((start ?? 0) * 2, (end ?? value.length) * 2)}` as const\r\n  if (strict) internal.assertEndOffset(value_, start, end)\r\n  return value_\r\n}\r\n\r\nexport declare namespace slice {\r\n  type Options = {\r\n    /** Asserts that the sliced value is the same size as the given start/end offsets. */\r\n    strict?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal.assertStartOffset.ErrorType\r\n    | internal.assertEndOffset.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Retrieves the size of a {@link ox#Hex.Hex} value (in bytes).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.size('0xdeadbeef')\r\n * // @log: 4\r\n * ```\r\n *\r\n * @param value - The {@link ox#Hex.Hex} value to get the size of.\r\n * @returns The size of the {@link ox#Hex.Hex} value (in bytes).\r\n */\r\nexport function size(value: Hex): number {\r\n  return Math.ceil((value.length - 2) / 2)\r\n}\r\n\r\nexport declare namespace size {\r\n  export type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Trims leading zeros from a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.trimLeft('0x00000000deadbeef')\r\n * // @log: '0xdeadbeef'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Hex.Hex} value to trim.\r\n * @returns The trimmed {@link ox#Hex.Hex} value.\r\n */\r\nexport function trimLeft(value: Hex): trimLeft.ReturnType {\r\n  return internal.trim(value, { dir: 'left' })\r\n}\r\n\r\nexport declare namespace trimLeft {\r\n  type ReturnType = Hex\r\n\r\n  type ErrorType = internal.trim.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Trims trailing zeros from a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.trimRight('0xdeadbeef00000000')\r\n * // @log: '0xdeadbeef'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Hex.Hex} value to trim.\r\n * @returns The trimmed {@link ox#Hex.Hex} value.\r\n */\r\nexport function trimRight(value: Hex): trimRight.ReturnType {\r\n  return internal.trim(value, { dir: 'right' })\r\n}\r\n\r\nexport declare namespace trimRight {\r\n  type ReturnType = Hex\r\n\r\n  type ErrorType = internal.trim.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Hex.Hex} value into a BigInt.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.toBigInt('0x1a4')\r\n * // @log: 420n\r\n *\r\n * Hex.toBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\r\n * // @log: 420n\r\n * ```\r\n *\r\n * @param hex - The {@link ox#Hex.Hex} value to decode.\r\n * @param options - Options.\r\n * @returns The decoded BigInt.\r\n */\r\nexport function toBigInt(hex: Hex, options: toBigInt.Options = {}): bigint {\r\n  const { signed } = options\r\n\r\n  if (options.size) internal.assertSize(hex, options.size)\r\n\r\n  const value = BigInt(hex)\r\n  if (!signed) return value\r\n\r\n  const size = (hex.length - 2) / 2\r\n\r\n  const max_unsigned = (1n << (BigInt(size) * 8n)) - 1n\r\n  const max_signed = max_unsigned >> 1n\r\n\r\n  if (value <= max_signed) return value\r\n  return value - max_unsigned - 1n\r\n}\r\n\r\nexport declare namespace toBigInt {\r\n  type Options = {\r\n    /** Whether or not the number of a signed representation. */\r\n    signed?: boolean | undefined\r\n    /** Size (in bytes) of the hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType = internal.assertSize.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Hex.Hex} value into a boolean.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.toBoolean('0x01')\r\n * // @log: true\r\n *\r\n * Hex.toBoolean('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\r\n * // @log: true\r\n * ```\r\n *\r\n * @param hex - The {@link ox#Hex.Hex} value to decode.\r\n * @param options - Options.\r\n * @returns The decoded boolean.\r\n */\r\nexport function toBoolean(hex: Hex, options: toBoolean.Options = {}): boolean {\r\n  if (options.size) internal.assertSize(hex, options.size)\r\n  const hex_ = trimLeft(hex)\r\n  if (hex_ === '0x') return false\r\n  if (hex_ === '0x1') return true\r\n  throw new InvalidHexBooleanError(hex)\r\n}\r\n\r\nexport declare namespace toBoolean {\r\n  type Options = {\r\n    /** Size (in bytes) of the hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal.assertSize.ErrorType\r\n    | trimLeft.ErrorType\r\n    | InvalidHexBooleanError\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Hex.Hex} value into a {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * const data = Hex.toBytes('0x48656c6c6f20776f726c6421')\r\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\r\n * ```\r\n *\r\n * @param hex - The {@link ox#Hex.Hex} value to decode.\r\n * @param options - Options.\r\n * @returns The decoded {@link ox#Bytes.Bytes}.\r\n */\r\nexport function toBytes(hex: Hex, options: toBytes.Options = {}): Bytes.Bytes {\r\n  return Bytes.fromHex(hex, options)\r\n}\r\n\r\nexport declare namespace toBytes {\r\n  type Options = {\r\n    /** Size (in bytes) of the hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType = Bytes.fromHex.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Hex.Hex} value into a number.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.toNumber('0x1a4')\r\n * // @log: 420\r\n *\r\n * Hex.toNumber('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\r\n * // @log: 420\r\n * ```\r\n *\r\n * @param hex - The {@link ox#Hex.Hex} value to decode.\r\n * @param options - Options.\r\n * @returns The decoded number.\r\n */\r\nexport function toNumber(hex: Hex, options: toNumber.Options = {}): number {\r\n  const { signed, size } = options\r\n  if (!signed && !size) return Number(hex)\r\n  return Number(toBigInt(hex, options))\r\n}\r\n\r\nexport declare namespace toNumber {\r\n  type Options = toBigInt.Options\r\n\r\n  type ErrorType = toBigInt.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Hex.Hex} value into a string.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.toString('0x48656c6c6f20576f726c6421')\r\n * // @log: 'Hello world!'\r\n *\r\n * Hex.toString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\r\n *  size: 32,\r\n * })\r\n * // @log: 'Hello world'\r\n * ```\r\n *\r\n * @param hex - The {@link ox#Hex.Hex} value to decode.\r\n * @param options - Options.\r\n * @returns The decoded string.\r\n */\r\nexport function toString(hex: Hex, options: toString.Options = {}): string {\r\n  const { size } = options\r\n\r\n  let bytes = Bytes.fromHex(hex)\r\n  if (size) {\r\n    internal_bytes.assertSize(bytes, size)\r\n    bytes = Bytes.trimRight(bytes)\r\n  }\r\n  return new TextDecoder().decode(bytes)\r\n}\r\n\r\nexport declare namespace toString {\r\n  type Options = {\r\n    /** Size (in bytes) of the hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal_bytes.assertSize.ErrorType\r\n    | Bytes.fromHex.ErrorType\r\n    | Bytes.trimRight.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Checks if the given value is {@link ox#Hex.Hex}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes, Hex } from 'ox'\r\n *\r\n * Hex.validate('0xdeadbeef')\r\n * // @log: true\r\n *\r\n * Hex.validate(Bytes.from([1, 2, 3]))\r\n * // @log: false\r\n * ```\r\n *\r\n * @param value - The value to check.\r\n * @param options - Options.\r\n * @returns `true` if the value is a {@link ox#Hex.Hex}, `false` otherwise.\r\n */\r\nexport function validate(\r\n  value: unknown,\r\n  options: validate.Options = {},\r\n): value is Hex {\r\n  const { strict = false } = options\r\n  try {\r\n    assert(value, { strict })\r\n    return true\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nexport declare namespace validate {\r\n  type Options = {\r\n    /** Checks if the {@link ox#Hex.Hex} value contains invalid hexadecimal characters. @default false */\r\n    strict?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Thrown when the provided integer is out of range, and cannot be represented as a hex value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.fromNumber(420182738912731283712937129)\r\n * // @error: Hex.IntegerOutOfRangeError: Number \\`4.2018273891273126e+26\\` is not in safe unsigned integer range (`0` to `9007199254740991`)\r\n * ```\r\n */\r\nexport class IntegerOutOfRangeError extends Errors.BaseError {\r\n  override readonly name = 'Hex.IntegerOutOfRangeError'\r\n\r\n  constructor({\r\n    max,\r\n    min,\r\n    signed,\r\n    size,\r\n    value,\r\n  }: {\r\n    max?: string | undefined\r\n    min: string\r\n    signed?: boolean | undefined\r\n    size?: number | undefined\r\n    value: string\r\n  }) {\r\n    super(\r\n      `Number \\`${value}\\` is not in safe${\r\n        size ? ` ${size * 8}-bit` : ''\r\n      }${signed ? ' signed' : ' unsigned'} integer range ${max ? `(\\`${min}\\` to \\`${max}\\`)` : `(above \\`${min}\\`)`}`,\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when the provided hex value cannot be represented as a boolean.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.toBoolean('0xa')\r\n * // @error: Hex.InvalidHexBooleanError: Hex value `\"0xa\"` is not a valid boolean.\r\n * // @error: The hex value must be `\"0x0\"` (false) or `\"0x1\"` (true).\r\n * ```\r\n */\r\nexport class InvalidHexBooleanError extends Errors.BaseError {\r\n  override readonly name = 'Hex.InvalidHexBooleanError'\r\n\r\n  constructor(hex: Hex) {\r\n    super(`Hex value \\`\"${hex}\"\\` is not a valid boolean.`, {\r\n      metaMessages: [\r\n        'The hex value must be `\"0x0\"` (false) or `\"0x1\"` (true).',\r\n      ],\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when the provided value is not a valid hex type.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.assert(1)\r\n * // @error: Hex.InvalidHexTypeError: Value `1` of type `number` is an invalid hex type.\r\n * ```\r\n */\r\nexport class InvalidHexTypeError extends Errors.BaseError {\r\n  override readonly name = 'Hex.InvalidHexTypeError'\r\n\r\n  constructor(value: unknown) {\r\n    super(\r\n      `Value \\`${typeof value === 'object' ? Json.stringify(value) : value}\\` of type \\`${typeof value}\\` is an invalid hex type.`,\r\n      {\r\n        metaMessages: ['Hex types must be represented as `\"0x${string}\"`.'],\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when the provided hex value is invalid.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.assert('0x0123456789abcdefg')\r\n * // @error: Hex.InvalidHexValueError: Value `0x0123456789abcdefg` is an invalid hex value.\r\n * // @error: Hex values must start with `\"0x\"` and contain only hexadecimal characters (0-9, a-f, A-F).\r\n * ```\r\n */\r\nexport class InvalidHexValueError extends Errors.BaseError {\r\n  override readonly name = 'Hex.InvalidHexValueError'\r\n\r\n  constructor(value: unknown) {\r\n    super(`Value \\`${value}\\` is an invalid hex value.`, {\r\n      metaMessages: [\r\n        'Hex values must start with `\"0x\"` and contain only hexadecimal characters (0-9, a-f, A-F).',\r\n      ],\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when the provided hex value is an odd length.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.fromHex('0xabcde')\r\n * // @error: Hex.InvalidLengthError: Hex value `\"0xabcde\"` is an odd length (5 nibbles).\r\n * ```\r\n */\r\nexport class InvalidLengthError extends Errors.BaseError {\r\n  override readonly name = 'Hex.InvalidLengthError'\r\n\r\n  constructor(value: Hex) {\r\n    super(\r\n      `Hex value \\`\"${value}\"\\` is an odd length (${value.length - 2} nibbles).`,\r\n      {\r\n        metaMessages: ['It must be an even length.'],\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when the size of the value exceeds the expected max size.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.fromString('Hello World!', { size: 8 })\r\n * // @error: Hex.SizeOverflowError: Size cannot exceed `8` bytes. Given size: `12` bytes.\r\n * ```\r\n */\r\nexport class SizeOverflowError extends Errors.BaseError {\r\n  override readonly name = 'Hex.SizeOverflowError'\r\n\r\n  constructor({ givenSize, maxSize }: { givenSize: number; maxSize: number }) {\r\n    super(\r\n      `Size cannot exceed \\`${maxSize}\\` bytes. Given size: \\`${givenSize}\\` bytes.`,\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when the slice offset exceeds the bounds of the value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.slice('0x0123456789', 6)\r\n * // @error: Hex.SliceOffsetOutOfBoundsError: Slice starting at offset `6` is out-of-bounds (size: `5`).\r\n * ```\r\n */\r\nexport class SliceOffsetOutOfBoundsError extends Errors.BaseError {\r\n  override readonly name = 'Hex.SliceOffsetOutOfBoundsError'\r\n\r\n  constructor({\r\n    offset,\r\n    position,\r\n    size,\r\n  }: { offset: number; position: 'start' | 'end'; size: number }) {\r\n    super(\r\n      `Slice ${\r\n        position === 'start' ? 'starting' : 'ending'\r\n      } at offset \\`${offset}\\` is out-of-bounds (size: \\`${size}\\`).`,\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when the size of the value exceeds the pad size.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.padLeft('0x1a4e12a45a21323123aaa87a897a897a898a6567a578a867a98778a667a85a875a87a6a787a65a675a6a9', 32)\r\n * // @error: Hex.SizeExceedsPaddingSizeError: Hex size (`43`) exceeds padding size (`32`).\r\n * ```\r\n */\r\nexport class SizeExceedsPaddingSizeError extends Errors.BaseError {\r\n  override readonly name = 'Hex.SizeExceedsPaddingSizeError'\r\n\r\n  constructor({\r\n    size,\r\n    targetSize,\r\n    type,\r\n  }: {\r\n    size: number\r\n    targetSize: number\r\n    type: 'Hex' | 'Bytes'\r\n  }) {\r\n    super(\r\n      `${type.charAt(0).toUpperCase()}${type\r\n        .slice(1)\r\n        .toLowerCase()} size (\\`${size}\\`) exceeds padding size (\\`${targetSize}\\`).`,\r\n    )\r\n  }\r\n}\r\n", "/**\r\n * @module\r\n */\r\nexport * from '../utils.ts';\r\n\r\n// TODO\r\n// @deprecated use `@noble/curves/utils.js`\r\n", "/** @internal */\r\nexport const version = '0.1.1'\r\n", "import { version } from '../version.js'\r\n\r\n/** @internal */\r\nexport function getUrl(url: string) {\r\n  return url\r\n}\r\n\r\n/** @internal */\r\nexport function getVersion() {\r\n  return version\r\n}\r\n\r\n/** @internal */\r\nexport function prettyPrint(args: unknown) {\r\n  if (!args) return ''\r\n  const entries = Object.entries(args)\r\n    .map(([key, value]) => {\r\n      if (value === undefined || value === false) return null\r\n      return [key, value]\r\n    })\r\n    .filter(Boolean) as [string, string][]\r\n  const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0)\r\n  return entries\r\n    .map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`)\r\n    .join('\\n')\r\n}\r\n", "import { getVersion } from './internal/errors.js'\r\n\r\nexport type GlobalErrorType<name extends string = 'Error'> = Error & {\r\n  name: name\r\n}\r\n\r\n/**\r\n * Base error class inherited by all errors thrown by ox.\r\n *\r\n * @example\r\n * ```ts\r\n * import { Errors } from 'ox'\r\n * throw new Errors.BaseError('An error occurred')\r\n * ```\r\n */\r\nexport class BaseError<\r\n  cause extends Error | undefined = undefined,\r\n> extends Error {\r\n  details: string\r\n  docs?: string | undefined\r\n  docsPath?: string | undefined\r\n  shortMessage: string\r\n\r\n  override cause: cause\r\n  override name = 'BaseError'\r\n\r\n  version = `ox@${getVersion()}`\r\n\r\n  constructor(shortMessage: string, options: BaseError.Options<cause> = {}) {\r\n    const details = (() => {\r\n      if (options.cause instanceof BaseError) {\r\n        if (options.cause.details) return options.cause.details\r\n        if (options.cause.shortMessage) return options.cause.shortMessage\r\n      }\r\n      if (options.cause?.message) return options.cause.message\r\n      return options.details!\r\n    })()\r\n    const docsPath = (() => {\r\n      if (options.cause instanceof BaseError)\r\n        return options.cause.docsPath || options.docsPath\r\n      return options.docsPath\r\n    })()\r\n\r\n    const docsBaseUrl = 'https://oxlib.sh'\r\n    const docs = `${docsBaseUrl}${docsPath ?? ''}`\r\n\r\n    const message = [\r\n      shortMessage || 'An error occurred.',\r\n      ...(options.metaMessages ? ['', ...options.metaMessages] : []),\r\n      ...(details || docsPath\r\n        ? [\r\n            '',\r\n            details ? `Details: ${details}` : undefined,\r\n            docsPath ? `See: ${docs}` : undefined,\r\n          ]\r\n        : []),\r\n    ]\r\n      .filter((x) => typeof x === 'string')\r\n      .join('\\n')\r\n\r\n    super(message, options.cause ? { cause: options.cause } : undefined)\r\n\r\n    this.cause = options.cause as any\r\n    this.details = details\r\n    this.docs = docs\r\n    this.docsPath = docsPath\r\n    this.shortMessage = shortMessage\r\n  }\r\n\r\n  walk(): Error\r\n  walk(fn: (err: unknown) => boolean): Error | null\r\n  walk(fn?: any): any {\r\n    return walk(this, fn)\r\n  }\r\n}\r\n\r\nexport declare namespace BaseError {\r\n  type Options<cause extends Error | undefined = Error | undefined> = {\r\n    cause?: cause | undefined\r\n    details?: string | undefined\r\n    docsPath?: string | undefined\r\n    metaMessages?: (string | undefined)[] | undefined\r\n  }\r\n}\r\n\r\n/** @internal */\r\nfunction walk(\r\n  err: unknown,\r\n  fn?: ((err: unknown) => boolean) | undefined,\r\n): unknown {\r\n  if (fn?.(err)) return err\r\n  if (err && typeof err === 'object' && 'cause' in err && err.cause)\r\n    return walk(err.cause, fn)\r\n  return fn ? null : err\r\n}\r\n", "import type * as Errors from './Errors.js'\r\n\r\nconst bigIntSuffix = '#__bigint'\r\n\r\n/**\r\n * Parses a JSON string, with support for `bigint`.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Json } from 'ox'\r\n *\r\n * const json = Json.parse('{\"foo\":\"bar\",\"baz\":\"69420694206942069420694206942069420694206942069420#__bigint\"}')\r\n * // @log: {\r\n * // @log:   foo: 'bar',\r\n * // @log:   baz: 69420694206942069420694206942069420694206942069420n\r\n * // @log: }\r\n * ```\r\n *\r\n * @param string - The value to parse.\r\n * @param reviver - A function that transforms the results.\r\n * @returns The parsed value.\r\n */\r\nexport function parse(\r\n  string: string,\r\n  reviver?: ((this: any, key: string, value: any) => any) | undefined,\r\n) {\r\n  return JSON.parse(string, (key, value_) => {\r\n    const value = value_\r\n    if (typeof value === 'string' && value.endsWith(bigIntSuffix))\r\n      return BigInt(value.slice(0, -bigIntSuffix.length))\r\n    return typeof reviver === 'function' ? reviver(key, value) : value\r\n  })\r\n}\r\n\r\nexport declare namespace parse {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Stringifies a value to its JSON representation, with support for `bigint`.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Json } from 'ox'\r\n *\r\n * const json = Json.stringify({\r\n *   foo: 'bar',\r\n *   baz: 69420694206942069420694206942069420694206942069420n,\r\n * })\r\n * // @log: '{\"foo\":\"bar\",\"baz\":\"69420694206942069420694206942069420694206942069420#__bigint\"}'\r\n * ```\r\n *\r\n * @param value - The value to stringify.\r\n * @param replacer - A function that transforms the results. It is passed the key and value of the property, and must return the value to be used in the JSON string. If this function returns `undefined`, the property is not included in the resulting JSON string.\r\n * @param space - A string or number that determines the indentation of the JSON string. If it is a number, it indicates the number of spaces to use as indentation; if it is a string (e.g. `'\\t'`), it uses the string as the indentation character.\r\n * @returns The JSON string.\r\n */\r\nexport function stringify(\r\n  value: any,\r\n  replacer?: ((this: any, key: string, value: any) => any) | null | undefined,\r\n  space?: string | number | undefined,\r\n) {\r\n  return JSON.stringify(\r\n    value,\r\n    (key, value) => {\r\n      if (typeof replacer === 'function') return replacer(key, value)\r\n      if (typeof value === 'bigint') return value.toString() + bigIntSuffix\r\n      return value\r\n    },\r\n    space,\r\n  )\r\n}\r\n\r\nexport declare namespace stringify {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n", "import * as Bytes from '../Bytes.js'\r\nimport type * as Errors from '../Errors.js'\r\n\r\n/** @internal */\r\nexport function assertSize(bytes: Bytes.Bytes, size_: number): void {\r\n  if (Bytes.size(bytes) > size_)\r\n    throw new Bytes.SizeOverflowError({\r\n      givenSize: Bytes.size(bytes),\r\n      maxSize: size_,\r\n    })\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace assertSize {\r\n  type ErrorType =\r\n    | Bytes.size.ErrorType\r\n    | Bytes.SizeOverflowError\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function assertStartOffset(\r\n  value: Bytes.Bytes,\r\n  start?: number | undefined,\r\n) {\r\n  if (typeof start === 'number' && start > 0 && start > Bytes.size(value) - 1)\r\n    throw new Bytes.SliceOffsetOutOfBoundsError({\r\n      offset: start,\r\n      position: 'start',\r\n      size: Bytes.size(value),\r\n    })\r\n}\r\n\r\nexport declare namespace assertStartOffset {\r\n  export type ErrorType =\r\n    | Bytes.SliceOffsetOutOfBoundsError\r\n    | Bytes.size.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function assertEndOffset(\r\n  value: Bytes.Bytes,\r\n  start?: number | undefined,\r\n  end?: number | undefined,\r\n) {\r\n  if (\r\n    typeof start === 'number' &&\r\n    typeof end === 'number' &&\r\n    Bytes.size(value) !== end - start\r\n  ) {\r\n    throw new Bytes.SliceOffsetOutOfBoundsError({\r\n      offset: end,\r\n      position: 'end',\r\n      size: Bytes.size(value),\r\n    })\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace assertEndOffset {\r\n  type ErrorType =\r\n    | Bytes.SliceOffsetOutOfBoundsError\r\n    | Bytes.size.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport const charCodeMap = {\r\n  zero: 48,\r\n  nine: 57,\r\n  A: 65,\r\n  F: 70,\r\n  a: 97,\r\n  f: 102,\r\n} as const\r\n\r\n/** @internal */\r\nexport function charCodeToBase16(char: number) {\r\n  if (char >= charCodeMap.zero && char <= charCodeMap.nine)\r\n    return char - charCodeMap.zero\r\n  if (char >= charCodeMap.A && char <= charCodeMap.F)\r\n    return char - (charCodeMap.A - 10)\r\n  if (char >= charCodeMap.a && char <= charCodeMap.f)\r\n    return char - (charCodeMap.a - 10)\r\n  return undefined\r\n}\r\n\r\n/** @internal */\r\nexport function pad(bytes: Bytes.Bytes, options: pad.Options = {}) {\r\n  const { dir, size = 32 } = options\r\n  if (size === 0) return bytes\r\n  if (bytes.length > size)\r\n    throw new Bytes.SizeExceedsPaddingSizeError({\r\n      size: bytes.length,\r\n      targetSize: size,\r\n      type: 'Bytes',\r\n    })\r\n  const paddedBytes = new Uint8Array(size)\r\n  for (let i = 0; i < size; i++) {\r\n    const padEnd = dir === 'right'\r\n    paddedBytes[padEnd ? i : size - i - 1] =\r\n      bytes[padEnd ? i : bytes.length - i - 1]!\r\n  }\r\n  return paddedBytes\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace pad {\r\n  type Options = {\r\n    dir?: 'left' | 'right' | undefined\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ReturnType = Bytes.Bytes\r\n\r\n  type ErrorType = Bytes.SizeExceedsPaddingSizeError | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function trim(\r\n  value: Bytes.Bytes,\r\n  options: trim.Options = {},\r\n): trim.ReturnType {\r\n  const { dir = 'left' } = options\r\n\r\n  let data = value\r\n\r\n  let sliceLength = 0\r\n  for (let i = 0; i < data.length - 1; i++) {\r\n    if (data[dir === 'left' ? i : data.length - i - 1]!.toString() === '0')\r\n      sliceLength++\r\n    else break\r\n  }\r\n  data =\r\n    dir === 'left'\r\n      ? data.slice(sliceLength)\r\n      : data.slice(0, data.length - sliceLength)\r\n\r\n  return data as trim.ReturnType\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace trim {\r\n  type Options = {\r\n    dir?: 'left' | 'right' | undefined\r\n  }\r\n\r\n  type ReturnType = Bytes.Bytes\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n", "import type * as Errors from '../Errors.js'\r\nimport * as Hex from '../Hex.js'\r\n\r\n/** @internal */\r\nexport function assertSize(hex: Hex.Hex, size_: number): void {\r\n  if (Hex.size(hex) > size_)\r\n    throw new Hex.SizeOverflowError({\r\n      givenSize: Hex.size(hex),\r\n      maxSize: size_,\r\n    })\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace assertSize {\r\n  type ErrorType =\r\n    | Hex.size.ErrorType\r\n    | Hex.SizeOverflowError\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function assertStartOffset(value: Hex.Hex, start?: number | undefined) {\r\n  if (typeof start === 'number' && start > 0 && start > Hex.size(value) - 1)\r\n    throw new Hex.SliceOffsetOutOfBoundsError({\r\n      offset: start,\r\n      position: 'start',\r\n      size: Hex.size(value),\r\n    })\r\n}\r\n\r\nexport declare namespace assertStartOffset {\r\n  type ErrorType =\r\n    | Hex.SliceOffsetOutOfBoundsError\r\n    | Hex.size.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function assertEndOffset(\r\n  value: Hex.Hex,\r\n  start?: number | undefined,\r\n  end?: number | undefined,\r\n) {\r\n  if (\r\n    typeof start === 'number' &&\r\n    typeof end === 'number' &&\r\n    Hex.size(value) !== end - start\r\n  ) {\r\n    throw new Hex.SliceOffsetOutOfBoundsError({\r\n      offset: end,\r\n      position: 'end',\r\n      size: Hex.size(value),\r\n    })\r\n  }\r\n}\r\n\r\nexport declare namespace assertEndOffset {\r\n  type ErrorType =\r\n    | Hex.SliceOffsetOutOfBoundsError\r\n    | Hex.size.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function pad(hex_: Hex.Hex, options: pad.Options = {}) {\r\n  const { dir, size = 32 } = options\r\n\r\n  if (size === 0) return hex_\r\n\r\n  const hex = hex_.replace('0x', '')\r\n  if (hex.length > size * 2)\r\n    throw new Hex.SizeExceedsPaddingSizeError({\r\n      size: Math.ceil(hex.length / 2),\r\n      targetSize: size,\r\n      type: 'Hex',\r\n    })\r\n\r\n  return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](size * 2, '0')}` as Hex.Hex\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace pad {\r\n  type Options = {\r\n    dir?: 'left' | 'right' | undefined\r\n    size?: number | undefined\r\n  }\r\n  type ErrorType = Hex.SizeExceedsPaddingSizeError | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function trim(\r\n  value: Hex.Hex,\r\n  options: trim.Options = {},\r\n): trim.ReturnType {\r\n  const { dir = 'left' } = options\r\n\r\n  let data = value.replace('0x', '')\r\n\r\n  let sliceLength = 0\r\n  for (let i = 0; i < data.length - 1; i++) {\r\n    if (data[dir === 'left' ? i : data.length - i - 1]!.toString() === '0')\r\n      sliceLength++\r\n    else break\r\n  }\r\n  data =\r\n    dir === 'left'\r\n      ? data.slice(sliceLength)\r\n      : data.slice(0, data.length - sliceLength)\r\n\r\n  if (data === '0') return '0x'\r\n  if (dir === 'right' && data.length % 2 === 1) return `0x${data}0`\r\n  return `0x${data}` as trim.ReturnType\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace trim {\r\n  type Options = {\r\n    dir?: 'left' | 'right' | undefined\r\n  }\r\n\r\n  type ReturnType = Hex.Hex\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n", "import { equalBytes } from '@noble/curves/abstract/utils'\r\nimport * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\nimport * as Json from './Json.js'\r\nimport * as internal from './internal/bytes.js'\r\nimport * as internal_hex from './internal/hex.js'\r\n\r\nconst decoder = /*#__PURE__*/ new TextDecoder()\r\nconst encoder = /*#__PURE__*/ new TextEncoder()\r\n\r\n/** Root type for a Bytes array. */\r\nexport type Bytes = Uint8Array\r\n\r\n/**\r\n * Asserts if the given value is {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.assert('abc')\r\n * // @error: Bytes.InvalidBytesTypeError:\r\n * // @error: Value `\"abc\"` of type `string` is an invalid Bytes value.\r\n * // @error: Bytes values must be of type `Uint8Array`.\r\n * ```\r\n *\r\n * @param value - Value to assert.\r\n */\r\nexport function assert(value: unknown): asserts value is Bytes {\r\n  if (value instanceof Uint8Array) return\r\n  if (!value) throw new InvalidBytesTypeError(value)\r\n  if (typeof value !== 'object') throw new InvalidBytesTypeError(value)\r\n  if (!('BYTES_PER_ELEMENT' in value)) throw new InvalidBytesTypeError(value)\r\n  if (value.BYTES_PER_ELEMENT !== 1 || value.constructor.name !== 'Uint8Array')\r\n    throw new InvalidBytesTypeError(value)\r\n}\r\n\r\nexport declare namespace assert {\r\n  type ErrorType = InvalidBytesTypeError | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Concatenates two or more {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const bytes = Bytes.concat(\r\n *   Bytes.from([1]),\r\n *   Bytes.from([69]),\r\n *   Bytes.from([420, 69]),\r\n * )\r\n * // @log: Uint8Array [ 1, 69, 420, 69 ]\r\n * ```\r\n *\r\n * @param values - Values to concatenate.\r\n * @returns Concatenated {@link ox#Bytes.Bytes}.\r\n */\r\nexport function concat(...values: readonly Bytes[]): Bytes {\r\n  let length = 0\r\n  for (const arr of values) {\r\n    length += arr.length\r\n  }\r\n  const result = new Uint8Array(length)\r\n  for (let i = 0, index = 0; i < values.length; i++) {\r\n    const arr = values[i]\r\n    result.set(arr!, index)\r\n    index += arr!.length\r\n  }\r\n  return result\r\n}\r\n\r\nexport declare namespace concat {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Instantiates a {@link ox#Bytes.Bytes} value from a `Uint8Array`, a hex string, or an array of unsigned 8-bit integers.\r\n *\r\n * :::tip\r\n *\r\n * To instantiate from a **Boolean**, **String**, or **Number**, use one of the following:\r\n *\r\n * - `Bytes.fromBoolean`\r\n *\r\n * - `Bytes.fromString`\r\n *\r\n * - `Bytes.fromNumber`\r\n *\r\n * :::\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.from([255, 124, 5, 4])\r\n * // @log: Uint8Array([255, 124, 5, 4])\r\n *\r\n * const data = Bytes.from('0xdeadbeef')\r\n * // @log: Uint8Array([222, 173, 190, 239])\r\n * ```\r\n *\r\n * @param value - Value to convert.\r\n * @returns A {@link ox#Bytes.Bytes} instance.\r\n */\r\nexport function from(value: Hex.Hex | Bytes | readonly number[]): Bytes {\r\n  if (value instanceof Uint8Array) return value\r\n  if (typeof value === 'string') return fromHex(value)\r\n  return fromArray(value)\r\n}\r\n\r\nexport declare namespace from {\r\n  type ErrorType =\r\n    | fromHex.ErrorType\r\n    | fromArray.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts an array of unsigned 8-bit integers into {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromArray([255, 124, 5, 4])\r\n * // @log: Uint8Array([255, 124, 5, 4])\r\n * ```\r\n *\r\n * @param value - Value to convert.\r\n * @returns A {@link ox#Bytes.Bytes} instance.\r\n */\r\nexport function fromArray(value: readonly number[] | Uint8Array): Bytes {\r\n  return value instanceof Uint8Array ? value : new Uint8Array(value)\r\n}\r\n\r\nexport declare namespace fromArray {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a boolean value into {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromBoolean(true)\r\n * // @log: Uint8Array([1])\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromBoolean(true, { size: 32 })\r\n * // @log: Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\r\n * ```\r\n *\r\n * @param value - Boolean value to encode.\r\n * @param options - Encoding options.\r\n * @returns Encoded {@link ox#Bytes.Bytes}.\r\n */\r\nexport function fromBoolean(value: boolean, options: fromBoolean.Options = {}) {\r\n  const { size } = options\r\n  const bytes = new Uint8Array(1)\r\n  bytes[0] = Number(value)\r\n  if (typeof size === 'number') {\r\n    internal.assertSize(bytes, size)\r\n    return padLeft(bytes, size)\r\n  }\r\n  return bytes\r\n}\r\n\r\nexport declare namespace fromBoolean {\r\n  type Options = {\r\n    /** Size of the output bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal.assertSize.ErrorType\r\n    | padLeft.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a {@link ox#Hex.Hex} value into {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromHex('0x48656c6c6f20776f726c6421')\r\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromHex('0x48656c6c6f20776f726c6421', { size: 32 })\r\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\r\n * ```\r\n *\r\n * @param value - {@link ox#Hex.Hex} value to encode.\r\n * @param options - Encoding options.\r\n * @returns Encoded {@link ox#Bytes.Bytes}.\r\n */\r\nexport function fromHex(value: Hex.Hex, options: fromHex.Options = {}): Bytes {\r\n  const { size } = options\r\n\r\n  let hex = value\r\n  if (size) {\r\n    internal_hex.assertSize(value, size)\r\n    hex = Hex.padRight(value, size)\r\n  }\r\n\r\n  let hexString = hex.slice(2) as string\r\n  if (hexString.length % 2) hexString = `0${hexString}`\r\n\r\n  const length = hexString.length / 2\r\n  const bytes = new Uint8Array(length)\r\n  for (let index = 0, j = 0; index < length; index++) {\r\n    const nibbleLeft = internal.charCodeToBase16(hexString.charCodeAt(j++))\r\n    const nibbleRight = internal.charCodeToBase16(hexString.charCodeAt(j++))\r\n    if (nibbleLeft === undefined || nibbleRight === undefined) {\r\n      throw new Errors.BaseError(\r\n        `Invalid byte sequence (\"${hexString[j - 2]}${hexString[j - 1]}\" in \"${hexString}\").`,\r\n      )\r\n    }\r\n    bytes[index] = nibbleLeft * 16 + nibbleRight\r\n  }\r\n  return bytes\r\n}\r\n\r\nexport declare namespace fromHex {\r\n  type Options = {\r\n    /** Size of the output bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal_hex.assertSize.ErrorType\r\n    | Hex.padRight.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a number value into {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromNumber(420)\r\n * // @log: Uint8Array([1, 164])\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromNumber(420, { size: 4 })\r\n * // @log: Uint8Array([0, 0, 1, 164])\r\n * ```\r\n *\r\n * @param value - Number value to encode.\r\n * @param options - Encoding options.\r\n * @returns Encoded {@link ox#Bytes.Bytes}.\r\n */\r\nexport function fromNumber(\r\n  value: bigint | number,\r\n  options?: fromNumber.Options | undefined,\r\n) {\r\n  const hex = Hex.fromNumber(value, options)\r\n  return fromHex(hex)\r\n}\r\n\r\nexport declare namespace fromNumber {\r\n  export type Options = Hex.fromNumber.Options\r\n\r\n  export type ErrorType =\r\n    | Hex.fromNumber.ErrorType\r\n    | fromHex.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a string into {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromString('Hello world!')\r\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromString('Hello world!', { size: 32 })\r\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\r\n * ```\r\n *\r\n * @param value - String to encode.\r\n * @param options - Encoding options.\r\n * @returns Encoded {@link ox#Bytes.Bytes}.\r\n */\r\nexport function fromString(\r\n  value: string,\r\n  options: fromString.Options = {},\r\n): Bytes {\r\n  const { size } = options\r\n\r\n  const bytes = encoder.encode(value)\r\n  if (typeof size === 'number') {\r\n    internal.assertSize(bytes, size)\r\n    return padRight(bytes, size)\r\n  }\r\n  return bytes\r\n}\r\n\r\nexport declare namespace fromString {\r\n  type Options = {\r\n    /** Size of the output bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal.assertSize.ErrorType\r\n    | padRight.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Checks if two {@link ox#Bytes.Bytes} values are equal.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.isEqual(Bytes.from([1]), Bytes.from([1]))\r\n * // @log: true\r\n *\r\n * Bytes.isEqual(Bytes.from([1]), Bytes.from([2]))\r\n * // @log: false\r\n * ```\r\n *\r\n * @param bytesA - First {@link ox#Bytes.Bytes} value.\r\n * @param bytesB - Second {@link ox#Bytes.Bytes} value.\r\n * @returns `true` if the two values are equal, otherwise `false`.\r\n */\r\nexport function isEqual(bytesA: Bytes, bytesB: Bytes) {\r\n  return equalBytes(bytesA, bytesB)\r\n}\r\n\r\nexport declare namespace isEqual {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Pads a {@link ox#Bytes.Bytes} value to the left with zero bytes until it reaches the given `size` (default: 32 bytes).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.padLeft(Bytes.from([1]), 4)\r\n * // @log: Uint8Array([0, 0, 0, 1])\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} value to pad.\r\n * @param size - Size to pad the {@link ox#Bytes.Bytes} value to.\r\n * @returns Padded {@link ox#Bytes.Bytes} value.\r\n */\r\nexport function padLeft(\r\n  value: Bytes,\r\n  size?: number | undefined,\r\n): padLeft.ReturnType {\r\n  return internal.pad(value, { dir: 'left', size })\r\n}\r\n\r\nexport declare namespace padLeft {\r\n  type ReturnType = internal.pad.ReturnType\r\n  type ErrorType = internal.pad.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Pads a {@link ox#Bytes.Bytes} value to the right with zero bytes until it reaches the given `size` (default: 32 bytes).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.padRight(Bytes.from([1]), 4)\r\n * // @log: Uint8Array([1, 0, 0, 0])\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} value to pad.\r\n * @param size - Size to pad the {@link ox#Bytes.Bytes} value to.\r\n * @returns Padded {@link ox#Bytes.Bytes} value.\r\n */\r\nexport function padRight(\r\n  value: Bytes,\r\n  size?: number | undefined,\r\n): padRight.ReturnType {\r\n  return internal.pad(value, { dir: 'right', size })\r\n}\r\n\r\nexport declare namespace padRight {\r\n  type ReturnType = internal.pad.ReturnType\r\n  type ErrorType = internal.pad.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Generates random {@link ox#Bytes.Bytes} of the specified length.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const bytes = Bytes.random(32)\r\n * // @log: Uint8Array([... x32])\r\n * ```\r\n *\r\n * @param length - Length of the random {@link ox#Bytes.Bytes} to generate.\r\n * @returns Random {@link ox#Bytes.Bytes} of the specified length.\r\n */\r\nexport function random(length: number): Bytes {\r\n  return crypto.getRandomValues(new Uint8Array(length))\r\n}\r\n\r\nexport declare namespace random {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Retrieves the size of a {@link ox#Bytes.Bytes} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.size(Bytes.from([1, 2, 3, 4]))\r\n * // @log: 4\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} value.\r\n * @returns Size of the {@link ox#Bytes.Bytes} value.\r\n */\r\nexport function size(value: Bytes): number {\r\n  return value.length\r\n}\r\n\r\nexport declare namespace size {\r\n  export type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Returns a section of a {@link ox#Bytes.Bytes} value given a start/end bytes offset.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.slice(\r\n *   Bytes.from([1, 2, 3, 4, 5, 6, 7, 8, 9]),\r\n *   1,\r\n *   4,\r\n * )\r\n * // @log: Uint8Array([2, 3, 4])\r\n * ```\r\n *\r\n * @param value - The {@link ox#Bytes.Bytes} value.\r\n * @param start - Start offset.\r\n * @param end - End offset.\r\n * @param options - Slice options.\r\n * @returns Sliced {@link ox#Bytes.Bytes} value.\r\n */\r\nexport function slice(\r\n  value: Bytes,\r\n  start?: number | undefined,\r\n  end?: number | undefined,\r\n  options: slice.Options = {},\r\n): Bytes {\r\n  const { strict } = options\r\n  internal.assertStartOffset(value, start)\r\n  const value_ = value.slice(start, end)\r\n  if (strict) internal.assertEndOffset(value_, start, end)\r\n  return value_\r\n}\r\n\r\nexport declare namespace slice {\r\n  type Options = {\r\n    /** Asserts that the sliced value is the same size as the given start/end offsets. */\r\n    strict?: boolean | undefined\r\n  }\r\n\r\n  export type ErrorType =\r\n    | internal.assertStartOffset.ErrorType\r\n    | internal.assertEndOffset.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Bytes.Bytes} into a bigint.\r\n *\r\n * @example\r\n * ```ts\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.toBigInt(Bytes.from([1, 164]))\r\n * // @log: 420n\r\n * ```\r\n *\r\n * @param bytes - The {@link ox#Bytes.Bytes} to decode.\r\n * @param options - Decoding options.\r\n * @returns Decoded bigint.\r\n */\r\nexport function toBigInt(bytes: Bytes, options: toBigInt.Options = {}): bigint {\r\n  const { size } = options\r\n  if (typeof size !== 'undefined') internal.assertSize(bytes, size)\r\n  const hex = Hex.fromBytes(bytes, options)\r\n  return Hex.toBigInt(hex, options)\r\n}\r\n\r\nexport declare namespace toBigInt {\r\n  type Options = {\r\n    /** Whether or not the number of a signed representation. */\r\n    signed?: boolean | undefined\r\n    /** Size of the bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | Hex.fromBytes.ErrorType\r\n    | Hex.toBigInt.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Bytes.Bytes} into a boolean.\r\n *\r\n * @example\r\n * ```ts\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.toBoolean(Bytes.from([1]))\r\n * // @log: true\r\n * ```\r\n *\r\n * @param bytes - The {@link ox#Bytes.Bytes} to decode.\r\n * @param options - Decoding options.\r\n * @returns Decoded boolean.\r\n */\r\nexport function toBoolean(\r\n  bytes: Bytes,\r\n  options: toBoolean.Options = {},\r\n): boolean {\r\n  const { size } = options\r\n  let bytes_ = bytes\r\n  if (typeof size !== 'undefined') {\r\n    internal.assertSize(bytes_, size)\r\n    bytes_ = trimLeft(bytes_)\r\n  }\r\n  if (bytes_.length > 1 || bytes_[0]! > 1)\r\n    throw new InvalidBytesBooleanError(bytes_)\r\n  return Boolean(bytes_[0])\r\n}\r\n\r\nexport declare namespace toBoolean {\r\n  type Options = {\r\n    /** Size of the bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal.assertSize.ErrorType\r\n    | trimLeft.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a {@link ox#Bytes.Bytes} value into a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.toHex(Bytes.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\r\n * // '0x48656c6c6f20576f726c6421'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Bytes.Bytes} to decode.\r\n * @param options - Options.\r\n * @returns Decoded {@link ox#Hex.Hex} value.\r\n */\r\nexport function toHex(value: Bytes, options: toHex.Options = {}): Hex.Hex {\r\n  return Hex.fromBytes(value, options)\r\n}\r\n\r\nexport declare namespace toHex {\r\n  type Options = {\r\n    /** Size of the bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType = Hex.fromBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Bytes.Bytes} into a number.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.toNumber(Bytes.from([1, 164]))\r\n * // @log: 420\r\n * ```\r\n */\r\nexport function toNumber(bytes: Bytes, options: toNumber.Options = {}): number {\r\n  const { size } = options\r\n  if (typeof size !== 'undefined') internal.assertSize(bytes, size)\r\n  const hex = Hex.fromBytes(bytes, options)\r\n  return Hex.toNumber(hex, options)\r\n}\r\n\r\nexport declare namespace toNumber {\r\n  type Options = {\r\n    /** Whether or not the number of a signed representation. */\r\n    signed?: boolean | undefined\r\n    /** Size of the bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | Hex.fromBytes.ErrorType\r\n    | Hex.toNumber.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Bytes.Bytes} into a string.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.toString(Bytes.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\r\n * // @log: 'Hello world'\r\n * ```\r\n *\r\n * @param bytes - The {@link ox#Bytes.Bytes} to decode.\r\n * @param options - Options.\r\n * @returns Decoded string.\r\n */\r\nexport function toString(bytes: Bytes, options: toString.Options = {}): string {\r\n  const { size } = options\r\n\r\n  let bytes_ = bytes\r\n  if (typeof size !== 'undefined') {\r\n    internal.assertSize(bytes_, size)\r\n    bytes_ = trimRight(bytes_)\r\n  }\r\n  return decoder.decode(bytes_)\r\n}\r\n\r\nexport declare namespace toString {\r\n  export type Options = {\r\n    /** Size of the bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  export type ErrorType =\r\n    | internal.assertSize.ErrorType\r\n    | trimRight.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Trims leading zeros from a {@link ox#Bytes.Bytes} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.trimLeft(Bytes.from([0, 0, 0, 0, 1, 2, 3]))\r\n * // @log: Uint8Array([1, 2, 3])\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} value.\r\n * @returns Trimmed {@link ox#Bytes.Bytes} value.\r\n */\r\nexport function trimLeft(value: Bytes): Bytes {\r\n  return internal.trim(value, { dir: 'left' })\r\n}\r\n\r\nexport declare namespace trimLeft {\r\n  type ErrorType = internal.trim.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Trims trailing zeros from a {@link ox#Bytes.Bytes} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.trimRight(Bytes.from([1, 2, 3, 0, 0, 0, 0]))\r\n * // @log: Uint8Array([1, 2, 3])\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} value.\r\n * @returns Trimmed {@link ox#Bytes.Bytes} value.\r\n */\r\nexport function trimRight(value: Bytes): Bytes {\r\n  return internal.trim(value, { dir: 'right' })\r\n}\r\n\r\nexport declare namespace trimRight {\r\n  export type ErrorType = internal.trim.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Checks if the given value is {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.validate('0x')\r\n * // @log: false\r\n *\r\n * Bytes.validate(Bytes.from([1, 2, 3]))\r\n * // @log: true\r\n * ```\r\n *\r\n * @param value - Value to check.\r\n * @returns `true` if the value is {@link ox#Bytes.Bytes}, otherwise `false`.\r\n */\r\nexport function validate(value: unknown): value is Bytes {\r\n  try {\r\n    assert(value)\r\n    return true\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nexport declare namespace validate {\r\n  export type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Thrown when the bytes value cannot be represented as a boolean.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.toBoolean(Bytes.from([5]))\r\n * // @error: Bytes.InvalidBytesBooleanError: Bytes value `[5]` is not a valid boolean.\r\n * // @error: The bytes array must contain a single byte of either a `0` or `1` value.\r\n * ```\r\n */\r\nexport class InvalidBytesBooleanError extends Errors.BaseError {\r\n  override readonly name = 'Bytes.InvalidBytesBooleanError'\r\n\r\n  constructor(bytes: Bytes) {\r\n    super(`Bytes value \\`${bytes}\\` is not a valid boolean.`, {\r\n      metaMessages: [\r\n        'The bytes array must contain a single byte of either a `0` or `1` value.',\r\n      ],\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when a value cannot be converted to bytes.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.from('foo')\r\n * // @error: Bytes.InvalidBytesTypeError: Value `foo` of type `string` is an invalid Bytes value.\r\n * ```\r\n */\r\nexport class InvalidBytesTypeError extends Errors.BaseError {\r\n  override readonly name = 'Bytes.InvalidBytesTypeError'\r\n\r\n  constructor(value: unknown) {\r\n    super(\r\n      `Value \\`${typeof value === 'object' ? Json.stringify(value) : value}\\` of type \\`${typeof value}\\` is an invalid Bytes value.`,\r\n      {\r\n        metaMessages: ['Bytes values must be of type `Bytes`.'],\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when a size exceeds the maximum allowed size.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.fromString('Hello World!', { size: 8 })\r\n * // @error: Bytes.SizeOverflowError: Size cannot exceed `8` bytes. Given size: `12` bytes.\r\n * ```\r\n */\r\nexport class SizeOverflowError extends Errors.BaseError {\r\n  override readonly name = 'Bytes.SizeOverflowError'\r\n\r\n  constructor({ givenSize, maxSize }: { givenSize: number; maxSize: number }) {\r\n    super(\r\n      `Size cannot exceed \\`${maxSize}\\` bytes. Given size: \\`${givenSize}\\` bytes.`,\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when a slice offset is out-of-bounds.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.slice(Bytes.from([1, 2, 3]), 4)\r\n * // @error: Bytes.SliceOffsetOutOfBoundsError: Slice starting at offset `4` is out-of-bounds (size: `3`).\r\n * ```\r\n */\r\nexport class SliceOffsetOutOfBoundsError extends Errors.BaseError {\r\n  override readonly name = 'Bytes.SliceOffsetOutOfBoundsError'\r\n\r\n  constructor({\r\n    offset,\r\n    position,\r\n    size,\r\n  }: { offset: number; position: 'start' | 'end'; size: number }) {\r\n    super(\r\n      `Slice ${\r\n        position === 'start' ? 'starting' : 'ending'\r\n      } at offset \\`${offset}\\` is out-of-bounds (size: \\`${size}\\`).`,\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when a the padding size exceeds the maximum allowed size.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.padLeft(Bytes.fromString('Hello World!'), 8)\r\n * // @error: [Bytes.SizeExceedsPaddingSizeError: Bytes size (`12`) exceeds padding size (`8`).\r\n * ```\r\n */\r\nexport class SizeExceedsPaddingSizeError extends Errors.BaseError {\r\n  override readonly name = 'Bytes.SizeExceedsPaddingSizeError'\r\n\r\n  constructor({\r\n    size,\r\n    targetSize,\r\n    type,\r\n  }: {\r\n    size: number\r\n    targetSize: number\r\n    type: 'Hex' | 'Bytes'\r\n  }) {\r\n    super(\r\n      `${type.charAt(0).toUpperCase()}${type\r\n        .slice(1)\r\n        .toLowerCase()} size (\\`${size}\\`) exceeds padding size (\\`${targetSize}\\`).`,\r\n    )\r\n  }\r\n}\r\n", "import * as Bytes from './Bytes.js'\r\nimport * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\nimport * as Json from './Json.js'\r\nimport type { Compute, ExactPartial } from './internal/types.js'\r\n\r\n/** Root type for an ECDSA Public Key. */\r\nexport type PublicKey<\r\n  compressed extends boolean = false,\r\n  bigintType = bigint,\r\n  numberType = number,\r\n> = Compute<\r\n  compressed extends true\r\n    ? {\r\n        prefix: numberType\r\n        x: bigintType\r\n        y?: undefined\r\n      }\r\n    : {\r\n        prefix: numberType\r\n        x: bigintType\r\n        y: bigintType\r\n      }\r\n>\r\n\r\n/**\r\n * Asserts that a {@link ox#PublicKey.PublicKey} is valid.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { PublicKey } from 'ox'\r\n *\r\n * PublicKey.assert({\r\n *   prefix: 4,\r\n *   y: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n * })\r\n * // @error: PublicKey.InvalidError: Value \\`{\"y\":\"1\"}\\` is not a valid public key.\r\n * // @error: Public key must contain:\r\n * // @error: - an `x` and `prefix` value (compressed)\r\n * // @error: - an `x`, `y`, and `prefix` value (uncompressed)\r\n * ```\r\n *\r\n * @param publicKey - The public key object to assert.\r\n */\r\nexport function assert(\r\n  publicKey: ExactPartial<PublicKey>,\r\n  options: assert.Options = {},\r\n): asserts publicKey is PublicKey {\r\n  const { compressed } = options\r\n  const { prefix, x, y } = publicKey\r\n\r\n  // Uncompressed\r\n  if (\r\n    compressed === false ||\r\n    (typeof x === 'bigint' && typeof y === 'bigint')\r\n  ) {\r\n    if (prefix !== 4)\r\n      throw new InvalidPrefixError({\r\n        prefix,\r\n        cause: new InvalidUncompressedPrefixError(),\r\n      })\r\n    return\r\n  }\r\n\r\n  // Compressed\r\n  if (\r\n    compressed === true ||\r\n    (typeof x === 'bigint' && typeof y === 'undefined')\r\n  ) {\r\n    if (prefix !== 3 && prefix !== 2)\r\n      throw new InvalidPrefixError({\r\n        prefix,\r\n        cause: new InvalidCompressedPrefixError(),\r\n      })\r\n    return\r\n  }\r\n\r\n  // Unknown/invalid\r\n  throw new InvalidError({ publicKey })\r\n}\r\n\r\nexport declare namespace assert {\r\n  type Options = {\r\n    /** Whether or not the public key should be compressed. */\r\n    compressed?: boolean\r\n  }\r\n\r\n  type ErrorType = InvalidError | InvalidPrefixError | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Compresses a {@link ox#PublicKey.PublicKey}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { PublicKey } from 'ox'\r\n *\r\n * const publicKey = PublicKey.from({\r\n *   prefix: 4,\r\n *   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\r\n *   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\r\n * })\r\n *\r\n * const compressed = PublicKey.compress(publicKey) // [!code focus]\r\n * // @log: {\r\n * // @log:   prefix: 3,\r\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\r\n * // @log: }\r\n * ```\r\n *\r\n * @param publicKey - The public key to compress.\r\n * @returns The compressed public key.\r\n */\r\nexport function compress(publicKey: PublicKey<false>): PublicKey<true> {\r\n  const { x, y } = publicKey\r\n  return {\r\n    prefix: y % 2n === 0n ? 2 : 3,\r\n    x,\r\n  }\r\n}\r\n\r\nexport declare namespace compress {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Instantiates a typed {@link ox#PublicKey.PublicKey} object from a {@link ox#PublicKey.PublicKey}, {@link ox#Bytes.Bytes}, or {@link ox#Hex.Hex}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { PublicKey } from 'ox'\r\n *\r\n * const publicKey = PublicKey.from({\r\n *   prefix: 4,\r\n *   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\r\n *   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\r\n * })\r\n * // @log: {\r\n * // @log:   prefix: 4,\r\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\r\n * // @log:   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\r\n * // @log: }\r\n * ```\r\n *\r\n * @example\r\n * ### From Serialized\r\n *\r\n * ```ts twoslash\r\n * import { PublicKey } from 'ox'\r\n *\r\n * const publicKey = PublicKey.from('0x048318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5')\r\n * // @log: {\r\n * // @log:   prefix: 4,\r\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\r\n * // @log:   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\r\n * // @log: }\r\n * ```\r\n *\r\n * @param value - The public key value to instantiate.\r\n * @returns The instantiated {@link ox#PublicKey.PublicKey}.\r\n */\r\nexport function from<\r\n  const publicKey extends\r\n    | CompressedPublicKey\r\n    | UncompressedPublicKey\r\n    | Hex.Hex\r\n    | Bytes.Bytes,\r\n>(value: from.Value<publicKey>): from.ReturnType<publicKey> {\r\n  const publicKey = (() => {\r\n    if (Hex.validate(value)) return fromHex(value)\r\n    if (Bytes.validate(value)) return fromBytes(value)\r\n\r\n    const { prefix, x, y } = value\r\n    if (typeof x === 'bigint' && typeof y === 'bigint')\r\n      return { prefix: prefix ?? 0x04, x, y }\r\n    return { prefix, x }\r\n  })()\r\n\r\n  assert(publicKey)\r\n\r\n  return publicKey as never\r\n}\r\n\r\n/** @internal */\r\ntype CompressedPublicKey = PublicKey<true>\r\n\r\n/** @internal */\r\ntype UncompressedPublicKey = Omit<PublicKey<false>, 'prefix'> & {\r\n  prefix?: PublicKey['prefix'] | undefined\r\n}\r\n\r\nexport declare namespace from {\r\n  type Value<\r\n    publicKey extends\r\n      | CompressedPublicKey\r\n      | UncompressedPublicKey\r\n      | Hex.Hex\r\n      | Bytes.Bytes = PublicKey,\r\n  > = publicKey | CompressedPublicKey | UncompressedPublicKey\r\n\r\n  type ReturnType<\r\n    publicKey extends\r\n      | CompressedPublicKey\r\n      | UncompressedPublicKey\r\n      | Hex.Hex\r\n      | Bytes.Bytes = PublicKey,\r\n  > = publicKey extends CompressedPublicKey | UncompressedPublicKey\r\n    ? publicKey extends UncompressedPublicKey\r\n      ? Compute<publicKey & { readonly prefix: 0x04 }>\r\n      : publicKey\r\n    : PublicKey\r\n\r\n  type ErrorType = assert.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Deserializes a {@link ox#PublicKey.PublicKey} from a {@link ox#Bytes.Bytes} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { PublicKey } from 'ox'\r\n *\r\n * const publicKey = PublicKey.fromBytes(new Uint8Array([128, 3, 131, ...]))\r\n * // @log: {\r\n * // @log:   prefix: 4,\r\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\r\n * // @log:   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\r\n * // @log: }\r\n * ```\r\n *\r\n * @param publicKey - The serialized public key.\r\n * @returns The deserialized public key.\r\n */\r\nexport function fromBytes(publicKey: Bytes.Bytes): PublicKey {\r\n  return fromHex(Hex.fromBytes(publicKey))\r\n}\r\n\r\nexport declare namespace fromBytes {\r\n  type ErrorType =\r\n    | fromHex.ErrorType\r\n    | Hex.fromBytes.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Deserializes a {@link ox#PublicKey.PublicKey} from a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { PublicKey } from 'ox'\r\n *\r\n * const publicKey = PublicKey.fromHex('0x8318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5')\r\n * // @log: {\r\n * // @log:   prefix: 4,\r\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\r\n * // @log:   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\r\n * // @log: }\r\n * ```\r\n *\r\n * @example\r\n * ### Deserializing a Compressed Public Key\r\n *\r\n * ```ts twoslash\r\n * import { PublicKey } from 'ox'\r\n *\r\n * const publicKey = PublicKey.fromHex('0x038318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed75')\r\n * // @log: {\r\n * // @log:   prefix: 3,\r\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\r\n * // @log: }\r\n * ```\r\n *\r\n * @param publicKey - The serialized public key.\r\n * @returns The deserialized public key.\r\n */\r\nexport function fromHex(publicKey: Hex.Hex): PublicKey {\r\n  if (\r\n    publicKey.length !== 132 &&\r\n    publicKey.length !== 130 &&\r\n    publicKey.length !== 68\r\n  )\r\n    throw new InvalidSerializedSizeError({ publicKey })\r\n\r\n  if (publicKey.length === 130) {\r\n    const x = BigInt(Hex.slice(publicKey, 0, 32))\r\n    const y = BigInt(Hex.slice(publicKey, 32, 64))\r\n    return {\r\n      prefix: 4,\r\n      x,\r\n      y,\r\n    } as never\r\n  }\r\n\r\n  if (publicKey.length === 132) {\r\n    const prefix = Number(Hex.slice(publicKey, 0, 1))\r\n    const x = BigInt(Hex.slice(publicKey, 1, 33))\r\n    const y = BigInt(Hex.slice(publicKey, 33, 65))\r\n    return {\r\n      prefix,\r\n      x,\r\n      y,\r\n    } as never\r\n  }\r\n\r\n  const prefix = Number(Hex.slice(publicKey, 0, 1))\r\n  const x = BigInt(Hex.slice(publicKey, 1, 33))\r\n  return {\r\n    prefix,\r\n    x,\r\n  } as never\r\n}\r\n\r\nexport declare namespace fromHex {\r\n  type ErrorType = Hex.slice.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Serializes a {@link ox#PublicKey.PublicKey} to {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { PublicKey } from 'ox'\r\n *\r\n * const publicKey = PublicKey.from({\r\n *   prefix: 4,\r\n *   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\r\n *   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\r\n * })\r\n *\r\n * const bytes = PublicKey.toBytes(publicKey) // [!code focus]\r\n * // @log: Uint8Array [128, 3, 131, ...]\r\n * ```\r\n *\r\n * @param publicKey - The public key to serialize.\r\n * @returns The serialized public key.\r\n */\r\nexport function toBytes(\r\n  publicKey: PublicKey<boolean>,\r\n  options: toBytes.Options = {},\r\n): Bytes.Bytes {\r\n  return Bytes.fromHex(toHex(publicKey, options))\r\n}\r\n\r\nexport declare namespace toBytes {\r\n  type Options = {\r\n    /**\r\n     * Whether to include the prefix in the serialized public key.\r\n     * @default true\r\n     */\r\n    includePrefix?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | Hex.fromNumber.ErrorType\r\n    | Bytes.fromHex.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Serializes a {@link ox#PublicKey.PublicKey} to {@link ox#Hex.Hex}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { PublicKey } from 'ox'\r\n *\r\n * const publicKey = PublicKey.from({\r\n *   prefix: 4,\r\n *   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\r\n *   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\r\n * })\r\n *\r\n * const hex = PublicKey.toHex(publicKey) // [!code focus]\r\n * // @log: '0x048318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5'\r\n * ```\r\n *\r\n * @param publicKey - The public key to serialize.\r\n * @returns The serialized public key.\r\n */\r\nexport function toHex(\r\n  publicKey: PublicKey<boolean>,\r\n  options: toHex.Options = {},\r\n): Hex.Hex {\r\n  assert(publicKey)\r\n\r\n  const { prefix, x, y } = publicKey\r\n  const { includePrefix = true } = options\r\n\r\n  const publicKey_ = Hex.concat(\r\n    includePrefix ? Hex.fromNumber(prefix, { size: 1 }) : '0x',\r\n    Hex.fromNumber(x, { size: 32 }),\r\n    // If the public key is not compressed, add the y coordinate.\r\n    typeof y === 'bigint' ? Hex.fromNumber(y, { size: 32 }) : '0x',\r\n  )\r\n\r\n  return publicKey_\r\n}\r\n\r\nexport declare namespace toHex {\r\n  type Options = {\r\n    /**\r\n     * Whether to include the prefix in the serialized public key.\r\n     * @default true\r\n     */\r\n    includePrefix?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType = Hex.fromNumber.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Validates a {@link ox#PublicKey.PublicKey}. Returns `true` if valid, `false` otherwise.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { PublicKey } from 'ox'\r\n *\r\n * const valid = PublicKey.validate({\r\n *   prefix: 4,\r\n *   y: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n * })\r\n * // @log: false\r\n * ```\r\n *\r\n * @param publicKey - The public key object to assert.\r\n */\r\nexport function validate(\r\n  publicKey: ExactPartial<PublicKey>,\r\n  options: validate.Options = {},\r\n): boolean {\r\n  try {\r\n    assert(publicKey, options)\r\n    return true\r\n  } catch (error) {\r\n    return false\r\n  }\r\n}\r\n\r\nexport declare namespace validate {\r\n  type Options = {\r\n    /** Whether or not the public key should be compressed. */\r\n    compressed?: boolean\r\n  }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Thrown when a public key is invalid.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { PublicKey } from 'ox'\r\n *\r\n * PublicKey.assert({ y: 1n })\r\n * // @error: PublicKey.InvalidError: Value `{\"y\":1n}` is not a valid public key.\r\n * // @error: Public key must contain:\r\n * // @error: - an `x` and `prefix` value (compressed)\r\n * // @error: - an `x`, `y`, and `prefix` value (uncompressed)\r\n * ```\r\n */\r\nexport class InvalidError extends Errors.BaseError {\r\n  override readonly name = 'PublicKey.InvalidError'\r\n\r\n  constructor({ publicKey }: { publicKey: unknown }) {\r\n    super(`Value \\`${Json.stringify(publicKey)}\\` is not a valid public key.`, {\r\n      metaMessages: [\r\n        'Public key must contain:',\r\n        '- an `x` and `prefix` value (compressed)',\r\n        '- an `x`, `y`, and `prefix` value (uncompressed)',\r\n      ],\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when a public key has an invalid prefix. */\r\nexport class InvalidPrefixError<\r\n  cause extends InvalidCompressedPrefixError | InvalidUncompressedPrefixError =\r\n    | InvalidCompressedPrefixError\r\n    | InvalidUncompressedPrefixError,\r\n> extends Errors.BaseError<cause> {\r\n  override readonly name = 'PublicKey.InvalidPrefixError'\r\n\r\n  constructor({ prefix, cause }: { prefix: number | undefined; cause: cause }) {\r\n    super(`Prefix \"${prefix}\" is invalid.`, {\r\n      cause,\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when the public key has an invalid prefix for a compressed public key. */\r\nexport class InvalidCompressedPrefixError extends Errors.BaseError {\r\n  override readonly name = 'PublicKey.InvalidCompressedPrefixError'\r\n\r\n  constructor() {\r\n    super('Prefix must be 2 or 3 for compressed public keys.')\r\n  }\r\n}\r\n\r\n/** Thrown when the public key has an invalid prefix for an uncompressed public key. */\r\nexport class InvalidUncompressedPrefixError extends Errors.BaseError {\r\n  override readonly name = 'PublicKey.InvalidUncompressedPrefixError'\r\n\r\n  constructor() {\r\n    super('Prefix must be 4 for uncompressed public keys.')\r\n  }\r\n}\r\n\r\n/** Thrown when the public key has an invalid serialized size. */\r\nexport class InvalidSerializedSizeError extends Errors.BaseError {\r\n  override readonly name = 'PublicKey.InvalidSerializedSizeError'\r\n\r\n  constructor({ publicKey }: { publicKey: Hex.Hex | Bytes.Bytes }) {\r\n    super(`Value \\`${publicKey}\\` is an invalid public key size.`, {\r\n      metaMessages: [\r\n        'Expected: 33 bytes (compressed + prefix), 64 bytes (uncompressed) or 65 bytes (uncompressed + prefix).',\r\n        `Received ${Hex.size(Hex.from(publicKey))} bytes.`,\r\n      ],\r\n    })\r\n  }\r\n}\r\n", "import { secp256k1 } from '@noble/curves/secp256k1'\r\nimport * as Bytes from './Bytes.js'\r\nimport * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\nimport * as Json from './Json.js'\r\nimport * as Solidity from './Solidity.js'\r\nimport type { Compute, ExactPartial, OneOf } from './internal/types.js'\r\n\r\n/** Root type for an ECDSA signature. */\r\nexport type Signature<\r\n  recovered extends boolean = true,\r\n  bigintType = bigint,\r\n  numberType = number,\r\n> = Compute<\r\n  recovered extends true\r\n    ? {\r\n        r: bigintType\r\n        s: bigintType\r\n        yParity: numberType\r\n      }\r\n    : {\r\n        r: bigintType\r\n        s: bigintType\r\n        yParity?: numberType | undefined\r\n      }\r\n>\r\n\r\n/** RPC-formatted ECDSA signature. */\r\nexport type Rpc<recovered extends boolean = true> = Signature<\r\n  recovered,\r\n  Hex.Hex,\r\n  Hex.Hex\r\n>\r\n\r\n/** (Legacy) ECDSA signature. */\r\nexport type Legacy<bigintType = bigint, numberType = number> = {\r\n  r: bigintType\r\n  s: bigintType\r\n  v: numberType\r\n}\r\n\r\n/** RPC-formatted (Legacy) ECDSA signature. */\r\nexport type LegacyRpc = Legacy<Hex.Hex, Hex.Hex>\r\n\r\nexport type Tuple = readonly [yParity: Hex.Hex, r: Hex.Hex, s: Hex.Hex]\r\n\r\n/**\r\n * Asserts that a Signature is valid.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * Signature.assert({\r\n *   r: -49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\r\n *   yParity: 1,\r\n * })\r\n * // @error: InvalidSignatureRError:\r\n * // @error: Value `-549...n` is an invalid r value.\r\n * // @error: r must be a positive integer less than 2^256.\r\n * ```\r\n *\r\n * @param signature - The signature object to assert.\r\n */\r\nexport function assert(\r\n  signature: ExactPartial<Signature>,\r\n  options: assert.Options = {},\r\n): asserts signature is Signature {\r\n  const { recovered } = options\r\n  if (typeof signature.r === 'undefined')\r\n    throw new MissingPropertiesError({ signature })\r\n  if (typeof signature.s === 'undefined')\r\n    throw new MissingPropertiesError({ signature })\r\n  if (recovered && typeof signature.yParity === 'undefined')\r\n    throw new MissingPropertiesError({ signature })\r\n  if (signature.r < 0n || signature.r > Solidity.maxUint256)\r\n    throw new InvalidRError({ value: signature.r })\r\n  if (signature.s < 0n || signature.s > Solidity.maxUint256)\r\n    throw new InvalidSError({ value: signature.s })\r\n  if (\r\n    typeof signature.yParity === 'number' &&\r\n    signature.yParity !== 0 &&\r\n    signature.yParity !== 1\r\n  )\r\n    throw new InvalidYParityError({ value: signature.yParity })\r\n}\r\n\r\nexport declare namespace assert {\r\n  type Options = {\r\n    /** Whether or not the signature should be recovered (contain `yParity`). */\r\n    recovered?: boolean\r\n  }\r\n\r\n  type ErrorType =\r\n    | MissingPropertiesError\r\n    | InvalidRError\r\n    | InvalidSError\r\n    | InvalidYParityError\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Deserializes a {@link ox#Bytes.Bytes} signature into a structured {@link ox#Signature.Signature}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Signature } from 'ox'\r\n *\r\n * Signature.fromBytes(new Uint8Array([128, 3, 131, ...]))\r\n * // @log: { r: 5231...n, s: 3522...n, yParity: 0 }\r\n * ```\r\n *\r\n * @param signature - The serialized signature.\r\n * @returns The deserialized {@link ox#Signature.Signature}.\r\n */\r\nexport function fromBytes(signature: Bytes.Bytes): Signature {\r\n  return fromHex(Hex.fromBytes(signature))\r\n}\r\n\r\nexport declare namespace fromBytes {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Deserializes a {@link ox#Hex.Hex} signature into a structured {@link ox#Signature.Signature}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * Signature.fromHex('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\r\n * // @log: { r: 5231...n, s: 3522...n, yParity: 0 }\r\n * ```\r\n *\r\n * @param serialized - The serialized signature.\r\n * @returns The deserialized {@link ox#Signature.Signature}.\r\n */\r\nexport function fromHex(signature: Hex.Hex): Signature {\r\n  if (signature.length !== 130 && signature.length !== 132)\r\n    throw new InvalidSerializedSizeError({ signature })\r\n\r\n  const r = BigInt(Hex.slice(signature, 0, 32))\r\n  const s = BigInt(Hex.slice(signature, 32, 64))\r\n\r\n  const yParity = (() => {\r\n    const yParity = Number(`0x${signature.slice(130)}`)\r\n    if (Number.isNaN(yParity)) return undefined\r\n    try {\r\n      return vToYParity(yParity)\r\n    } catch {\r\n      throw new InvalidYParityError({ value: yParity })\r\n    }\r\n  })()\r\n\r\n  if (typeof yParity === 'undefined')\r\n    return {\r\n      r,\r\n      s,\r\n    } as never\r\n  return {\r\n    r,\r\n    s,\r\n    yParity,\r\n  } as never\r\n}\r\n\r\nexport declare namespace fromHex {\r\n  type ErrorType =\r\n    | Hex.from.ErrorType\r\n    | InvalidSerializedSizeError\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Extracts a {@link ox#Signature.Signature} from an arbitrary object that may include signature properties.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Signature } from 'ox'\r\n *\r\n * Signature.extract({\r\n *   baz: 'barry',\r\n *   foo: 'bar',\r\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\r\n *   yParity: 1,\r\n *   zebra: 'stripes',\r\n * })\r\n * // @log: {\r\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\r\n * // @log:   yParity: 1\r\n * // @log: }\r\n * ```\r\n *\r\n * @param value - The arbitrary object to extract the signature from.\r\n * @returns The extracted {@link ox#Signature.Signature}.\r\n */\r\nexport function extract(value: extract.Value): Signature | undefined {\r\n  if (typeof value.r === 'undefined') return undefined\r\n  if (typeof value.s === 'undefined') return undefined\r\n  return from(value as any)\r\n}\r\n\r\nexport declare namespace extract {\r\n  type Value = {\r\n    r?: bigint | Hex.Hex | undefined\r\n    s?: bigint | Hex.Hex | undefined\r\n    yParity?: number | Hex.Hex | undefined\r\n    v?: number | Hex.Hex | undefined\r\n  }\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Instantiates a typed {@link ox#Signature.Signature} object from a {@link ox#Signature.Signature}, {@link ox#Signature.Legacy}, {@link ox#Bytes.Bytes}, or {@link ox#Hex.Hex}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * Signature.from({\r\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\r\n *   yParity: 1,\r\n * })\r\n * // @log: {\r\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\r\n * // @log:   yParity: 1\r\n * // @log: }\r\n * ```\r\n *\r\n * @example\r\n * ### From Serialized\r\n *\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * Signature.from('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db801')\r\n * // @log: {\r\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\r\n * // @log:   yParity: 1,\r\n * // @log: }\r\n * ```\r\n *\r\n * @example\r\n * ### From Legacy\r\n *\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * Signature.from({\r\n *   r: 47323457007453657207889730243826965761922296599680473886588287015755652701072n,\r\n *   s: 57228803202727131502949358313456071280488184270258293674242124340113824882788n,\r\n *   v: 27,\r\n * })\r\n * // @log: {\r\n * // @log:   r: 47323457007453657207889730243826965761922296599680473886588287015755652701072n,\r\n * // @log:   s: 57228803202727131502949358313456071280488184270258293674242124340113824882788n,\r\n * // @log:   yParity: 0\r\n * // @log: }\r\n * ```\r\n *\r\n * @param signature - The signature value to instantiate.\r\n * @returns The instantiated {@link ox#Signature.Signature}.\r\n */\r\nexport function from<\r\n  const signature extends\r\n    | OneOf<Signature<boolean> | Rpc<boolean> | Legacy | LegacyRpc>\r\n    | Hex.Hex\r\n    | Bytes.Bytes,\r\n>(\r\n  signature:\r\n    | signature\r\n    | OneOf<Signature<boolean> | Rpc<boolean> | Legacy | LegacyRpc>\r\n    | Hex.Hex\r\n    | Bytes.Bytes,\r\n): from.ReturnType<signature> {\r\n  const signature_ = (() => {\r\n    if (typeof signature === 'string') return fromHex(signature)\r\n    if (signature instanceof Uint8Array) return fromBytes(signature)\r\n    if (typeof signature.r === 'string') return fromRpc(signature)\r\n    if (signature.v) return fromLegacy(signature)\r\n    return {\r\n      r: signature.r,\r\n      s: signature.s,\r\n      ...(typeof signature.yParity !== 'undefined'\r\n        ? { yParity: signature.yParity }\r\n        : {}),\r\n    }\r\n  })()\r\n  assert(signature_)\r\n  return signature_ as never\r\n}\r\n\r\nexport declare namespace from {\r\n  type ReturnType<\r\n    signature extends\r\n      | OneOf<Signature<boolean> | Rpc<boolean> | Legacy | LegacyRpc>\r\n      | Hex.Hex\r\n      | Bytes.Bytes,\r\n  > = signature extends Signature<boolean> & { v?: undefined }\r\n    ? signature\r\n    : Signature\r\n\r\n  type ErrorType =\r\n    | assert.ErrorType\r\n    | fromBytes.ErrorType\r\n    | fromHex.ErrorType\r\n    | vToYParity.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a DER-encoded signature to a {@link ox#Signature.Signature}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Signature } from 'ox'\r\n *\r\n * const signature = Signature.fromDerBytes(new Uint8Array([132, 51, 23, ...]))\r\n * // @log: {\r\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\r\n * // @log: }\r\n * ```\r\n *\r\n * @param signature - The DER-encoded signature to convert.\r\n * @returns The {@link ox#Signature.Signature}.\r\n */\r\nexport function fromDerBytes(signature: Bytes.Bytes): Signature<false> {\r\n  return fromDerHex(Hex.fromBytes(signature))\r\n}\r\n\r\nexport declare namespace fromDerBytes {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a DER-encoded signature to a {@link ox#Signature.Signature}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * const signature = Signature.fromDerHex('0x304402206e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf02204a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8')\r\n * // @log: {\r\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\r\n * // @log: }\r\n * ```\r\n *\r\n * @param signature - The DER-encoded signature to convert.\r\n * @returns The {@link ox#Signature.Signature}.\r\n */\r\nexport function fromDerHex(signature: Hex.Hex): Signature<false> {\r\n  const { r, s } = secp256k1.Signature.fromDER(Hex.from(signature).slice(2))\r\n  return { r, s }\r\n}\r\n\r\nexport declare namespace fromDerHex {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a {@link ox#Signature.Legacy} into a {@link ox#Signature.Signature}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * const legacy = Signature.fromLegacy({ r: 1n, s: 2n, v: 28 })\r\n * // @log: { r: 1n, s: 2n, yParity: 1 }\r\n * ```\r\n *\r\n * @param signature - The {@link ox#Signature.Legacy} to convert.\r\n * @returns The converted {@link ox#Signature.Signature}.\r\n */\r\nexport function fromLegacy(signature: Legacy): Signature {\r\n  return {\r\n    r: signature.r,\r\n    s: signature.s,\r\n    yParity: vToYParity(signature.v),\r\n  }\r\n}\r\n\r\nexport declare namespace fromLegacy {\r\n  type ErrorType = vToYParity.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a {@link ox#Signature.Rpc} into a {@link ox#Signature.Signature}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * const signature = Signature.fromRpc({\r\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\r\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\r\n *   yParity: '0x0',\r\n * })\r\n * ```\r\n *\r\n * @param signature - The {@link ox#Signature.Rpc} to convert.\r\n * @returns The converted {@link ox#Signature.Signature}.\r\n */\r\nexport function fromRpc(signature: {\r\n  r: Hex.Hex\r\n  s: Hex.Hex\r\n  yParity?: Hex.Hex | undefined\r\n  v?: Hex.Hex | undefined\r\n}): Signature {\r\n  const yParity = (() => {\r\n    const v = signature.v ? Number(signature.v) : undefined\r\n    let yParity = signature.yParity ? Number(signature.yParity) : undefined\r\n    if (typeof v === 'number' && typeof yParity !== 'number')\r\n      yParity = vToYParity(v)\r\n    if (typeof yParity !== 'number')\r\n      throw new InvalidYParityError({ value: signature.yParity })\r\n    return yParity\r\n  })()\r\n\r\n  return {\r\n    r: BigInt(signature.r),\r\n    s: BigInt(signature.s),\r\n    yParity,\r\n  }\r\n}\r\n\r\nexport declare namespace fromRpc {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a {@link ox#Signature.Tuple} to a {@link ox#Signature.Signature}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * const signature = Signature.fromTuple(['0x01', '0x7b', '0x1c8'])\r\n * // @log: {\r\n * // @log:   r: 123n,\r\n * // @log:   s: 456n,\r\n * // @log:   yParity: 1,\r\n * // @log: }\r\n * ```\r\n *\r\n * @param tuple - The {@link ox#Signature.Tuple} to convert.\r\n * @returns The {@link ox#Signature.Signature}.\r\n */\r\nexport function fromTuple(tuple: Tuple): Signature {\r\n  const [yParity, r, s] = tuple\r\n  return from({\r\n    r: r === '0x' ? 0n : BigInt(r),\r\n    s: s === '0x' ? 0n : BigInt(s),\r\n    yParity: yParity === '0x' ? 0 : Number(yParity),\r\n  })\r\n}\r\n\r\nexport declare namespace fromTuple {\r\n  type ErrorType = from.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Serializes a {@link ox#Signature.Signature} to {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * const signature = Signature.toBytes({\r\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\r\n *   yParity: 1\r\n * })\r\n * // @log: Uint8Array [102, 16, 10, ...]\r\n * ```\r\n *\r\n * @param signature - The signature to serialize.\r\n * @returns The serialized signature.\r\n */\r\nexport function toBytes(signature: Signature<boolean>): Bytes.Bytes {\r\n  return Bytes.fromHex(toHex(signature))\r\n}\r\n\r\nexport declare namespace toBytes {\r\n  type ErrorType =\r\n    | toHex.ErrorType\r\n    | Bytes.fromHex.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Serializes a {@link ox#Signature.Signature} to {@link ox#Hex.Hex}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * const signature = Signature.toHex({\r\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\r\n *   yParity: 1\r\n * })\r\n * // @log: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c'\r\n * ```\r\n *\r\n * @param signature - The signature to serialize.\r\n * @returns The serialized signature.\r\n */\r\nexport function toHex(signature: Signature<boolean>): Hex.Hex {\r\n  assert(signature)\r\n\r\n  const r = signature.r\r\n  const s = signature.s\r\n\r\n  const signature_ = Hex.concat(\r\n    Hex.fromNumber(r, { size: 32 }),\r\n    Hex.fromNumber(s, { size: 32 }),\r\n    // If the signature is recovered, add the recovery byte to the signature.\r\n    typeof signature.yParity === 'number'\r\n      ? Hex.fromNumber(yParityToV(signature.yParity), { size: 1 })\r\n      : '0x',\r\n  )\r\n\r\n  return signature_\r\n}\r\n\r\nexport declare namespace toHex {\r\n  type ErrorType =\r\n    | Hex.concat.ErrorType\r\n    | Hex.fromNumber.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a {@link ox#Signature.Signature} to DER-encoded format.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * const signature = Signature.from({\r\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\r\n * })\r\n *\r\n * const signature_der = Signature.toDerBytes(signature)\r\n * // @log: Uint8Array [132, 51, 23, ...]\r\n * ```\r\n *\r\n * @param signature - The signature to convert.\r\n * @returns The DER-encoded signature.\r\n */\r\nexport function toDerBytes(signature: Signature<boolean>): Bytes.Bytes {\r\n  const sig = new secp256k1.Signature(signature.r, signature.s)\r\n  return sig.toDERRawBytes()\r\n}\r\n\r\nexport declare namespace toDerBytes {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a {@link ox#Signature.Signature} to DER-encoded format.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * const signature = Signature.from({\r\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\r\n * })\r\n *\r\n * const signature_der = Signature.toDerHex(signature)\r\n * // @log: '0x304402206e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf02204a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8'\r\n * ```\r\n *\r\n * @param signature - The signature to convert.\r\n * @returns The DER-encoded signature.\r\n */\r\nexport function toDerHex(signature: Signature<boolean>): Hex.Hex {\r\n  const sig = new secp256k1.Signature(signature.r, signature.s)\r\n  return `0x${sig.toDERHex()}`\r\n}\r\n\r\nexport declare namespace toDerHex {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a {@link ox#Signature.Signature} into a {@link ox#Signature.Legacy}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * const legacy = Signature.toLegacy({ r: 1n, s: 2n, yParity: 1 })\r\n * // @log: { r: 1n, s: 2n, v: 28 }\r\n * ```\r\n *\r\n * @param signature - The {@link ox#Signature.Signature} to convert.\r\n * @returns The converted {@link ox#Signature.Legacy}.\r\n */\r\nexport function toLegacy(signature: Signature): Legacy {\r\n  return {\r\n    r: signature.r,\r\n    s: signature.s,\r\n    v: yParityToV(signature.yParity),\r\n  }\r\n}\r\n\r\nexport declare namespace toLegacy {\r\n  type ErrorType = yParityToV.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a {@link ox#Signature.Signature} into a {@link ox#Signature.Rpc}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * const signature = Signature.toRpc({\r\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\r\n *   yParity: 1\r\n * })\r\n * ```\r\n *\r\n * @param signature - The {@link ox#Signature.Signature} to convert.\r\n * @returns The converted {@link ox#Signature.Rpc}.\r\n */\r\nexport function toRpc(signature: Signature): Rpc {\r\n  const { r, s, yParity } = signature\r\n  return {\r\n    r: Hex.fromNumber(r, { size: 32 }),\r\n    s: Hex.fromNumber(s, { size: 32 }),\r\n    yParity: yParity === 0 ? '0x0' : '0x1',\r\n  }\r\n}\r\n\r\nexport declare namespace toRpc {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a {@link ox#Signature.Signature} to a serialized {@link ox#Signature.Tuple} to be used for signatures in Transaction Envelopes, EIP-7702 Authorization Lists, etc.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * const signatureTuple = Signature.toTuple({\r\n *   r: 123n,\r\n *   s: 456n,\r\n *   yParity: 1,\r\n * })\r\n * // @log: [yParity: '0x01', r: '0x7b', s: '0x1c8']\r\n * ```\r\n *\r\n * @param signature - The {@link ox#Signature.Signature} to convert.\r\n * @returns The {@link ox#Signature.Tuple}.\r\n */\r\nexport function toTuple(signature: Signature): Tuple {\r\n  const { r, s, yParity } = signature\r\n\r\n  return [\r\n    yParity ? '0x01' : '0x',\r\n    r === 0n ? '0x' : Hex.trimLeft(Hex.fromNumber(r!)),\r\n    s === 0n ? '0x' : Hex.trimLeft(Hex.fromNumber(s!)),\r\n  ] as const\r\n}\r\n\r\nexport declare namespace toTuple {\r\n  type ErrorType =\r\n    | Hex.trimLeft.ErrorType\r\n    | Hex.fromNumber.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Validates a Signature. Returns `true` if the signature is valid, `false` otherwise.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * const valid = Signature.validate({\r\n *   r: -49782753348462494199823712700004552394425719014458918871452329774910450607807n,\r\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\r\n *   yParity: 1,\r\n * })\r\n * // @log: false\r\n * ```\r\n *\r\n * @param signature - The signature object to assert.\r\n */\r\nexport function validate(\r\n  signature: ExactPartial<Signature>,\r\n  options: validate.Options = {},\r\n): boolean {\r\n  try {\r\n    assert(signature, options)\r\n    return true\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nexport declare namespace validate {\r\n  type Options = {\r\n    /** Whether or not the signature should be recovered (contain `yParity`). */\r\n    recovered?: boolean\r\n  }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a ECDSA `v` value to a `yParity` value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * const yParity = Signature.vToYParity(28)\r\n * // @log: 1\r\n * ```\r\n *\r\n * @param v - The ECDSA `v` value to convert.\r\n * @returns The `yParity` value.\r\n */\r\nexport function vToYParity(v: number): Signature['yParity'] {\r\n  if (v === 0 || v === 27) return 0\r\n  if (v === 1 || v === 28) return 1\r\n  if (v >= 35) return v % 2 === 0 ? 1 : 0\r\n  throw new InvalidVError({ value: v })\r\n}\r\n\r\nexport declare namespace vToYParity {\r\n  type ErrorType = InvalidVError | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a ECDSA `v` value to a `yParity` value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Signature } from 'ox'\r\n *\r\n * const v = Signature.yParityToV(1)\r\n * // @log: 28\r\n * ```\r\n *\r\n * @param yParity - The ECDSA `yParity` value to convert.\r\n * @returns The `v` value.\r\n */\r\nexport function yParityToV(yParity: number): number {\r\n  if (yParity === 0) return 27\r\n  if (yParity === 1) return 28\r\n  throw new InvalidYParityError({ value: yParity })\r\n}\r\n\r\nexport declare namespace yParityToV {\r\n  type ErrorType = InvalidVError | Errors.GlobalErrorType\r\n}\r\n\r\n/** Thrown when the serialized signature is of an invalid size. */\r\nexport class InvalidSerializedSizeError extends Errors.BaseError {\r\n  override readonly name = 'Signature.InvalidSerializedSizeError'\r\n\r\n  constructor({ signature }: { signature: Hex.Hex | Bytes.Bytes }) {\r\n    super(`Value \\`${signature}\\` is an invalid signature size.`, {\r\n      metaMessages: [\r\n        'Expected: 64 bytes or 65 bytes.',\r\n        `Received ${Hex.size(Hex.from(signature))} bytes.`,\r\n      ],\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when the signature is missing either an `r`, `s`, or `yParity` property. */\r\nexport class MissingPropertiesError extends Errors.BaseError {\r\n  override readonly name = 'Signature.MissingPropertiesError'\r\n\r\n  constructor({ signature }: { signature: unknown }) {\r\n    super(\r\n      `Signature \\`${Json.stringify(signature)}\\` is missing either an \\`r\\`, \\`s\\`, or \\`yParity\\` property.`,\r\n    )\r\n  }\r\n}\r\n\r\n/** Thrown when the signature has an invalid `r` value. */\r\nexport class InvalidRError extends Errors.BaseError {\r\n  override readonly name = 'Signature.InvalidRError'\r\n\r\n  constructor({ value }: { value: unknown }) {\r\n    super(\r\n      `Value \\`${value}\\` is an invalid r value. r must be a positive integer less than 2^256.`,\r\n    )\r\n  }\r\n}\r\n\r\n/** Thrown when the signature has an invalid `s` value. */\r\nexport class InvalidSError extends Errors.BaseError {\r\n  override readonly name = 'Signature.InvalidSError'\r\n\r\n  constructor({ value }: { value: unknown }) {\r\n    super(\r\n      `Value \\`${value}\\` is an invalid s value. s must be a positive integer less than 2^256.`,\r\n    )\r\n  }\r\n}\r\n\r\n/** Thrown when the signature has an invalid `yParity` value. */\r\nexport class InvalidYParityError extends Errors.BaseError {\r\n  override readonly name = 'Signature.InvalidYParityError'\r\n\r\n  constructor({ value }: { value: unknown }) {\r\n    super(\r\n      `Value \\`${value}\\` is an invalid y-parity value. Y-parity must be 0 or 1.`,\r\n    )\r\n  }\r\n}\r\n\r\n/** Thrown when the signature has an invalid `v` value. */\r\nexport class InvalidVError extends Errors.BaseError {\r\n  override readonly name = 'Signature.InvalidVError'\r\n\r\n  constructor({ value }: { value: number }) {\r\n    super(`Value \\`${value}\\` is an invalid v value. v must be 27, 28 or >=35.`)\r\n  }\r\n}\r\n", "export const arrayRegex = /^(.*)\\[([0-9]*)\\]$/\r\n\r\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\r\n// https://regexr.com/6va55\r\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/\r\n\r\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\r\n// https://regexr.com/6v8hp\r\nexport const integerRegex =\r\n  /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/\r\n\r\nexport const maxInt8 = 2n ** (8n - 1n) - 1n\r\nexport const maxInt16 = 2n ** (16n - 1n) - 1n\r\nexport const maxInt24 = 2n ** (24n - 1n) - 1n\r\nexport const maxInt32 = 2n ** (32n - 1n) - 1n\r\nexport const maxInt40 = 2n ** (40n - 1n) - 1n\r\nexport const maxInt48 = 2n ** (48n - 1n) - 1n\r\nexport const maxInt56 = 2n ** (56n - 1n) - 1n\r\nexport const maxInt64 = 2n ** (64n - 1n) - 1n\r\nexport const maxInt72 = 2n ** (72n - 1n) - 1n\r\nexport const maxInt80 = 2n ** (80n - 1n) - 1n\r\nexport const maxInt88 = 2n ** (88n - 1n) - 1n\r\nexport const maxInt96 = 2n ** (96n - 1n) - 1n\r\nexport const maxInt104 = 2n ** (104n - 1n) - 1n\r\nexport const maxInt112 = 2n ** (112n - 1n) - 1n\r\nexport const maxInt120 = 2n ** (120n - 1n) - 1n\r\nexport const maxInt128 = 2n ** (128n - 1n) - 1n\r\nexport const maxInt136 = 2n ** (136n - 1n) - 1n\r\nexport const maxInt144 = 2n ** (144n - 1n) - 1n\r\nexport const maxInt152 = 2n ** (152n - 1n) - 1n\r\nexport const maxInt160 = 2n ** (160n - 1n) - 1n\r\nexport const maxInt168 = 2n ** (168n - 1n) - 1n\r\nexport const maxInt176 = 2n ** (176n - 1n) - 1n\r\nexport const maxInt184 = 2n ** (184n - 1n) - 1n\r\nexport const maxInt192 = 2n ** (192n - 1n) - 1n\r\nexport const maxInt200 = 2n ** (200n - 1n) - 1n\r\nexport const maxInt208 = 2n ** (208n - 1n) - 1n\r\nexport const maxInt216 = 2n ** (216n - 1n) - 1n\r\nexport const maxInt224 = 2n ** (224n - 1n) - 1n\r\nexport const maxInt232 = 2n ** (232n - 1n) - 1n\r\nexport const maxInt240 = 2n ** (240n - 1n) - 1n\r\nexport const maxInt248 = 2n ** (248n - 1n) - 1n\r\nexport const maxInt256 = 2n ** (256n - 1n) - 1n\r\n\r\nexport const minInt8 = -(2n ** (8n - 1n))\r\nexport const minInt16 = -(2n ** (16n - 1n))\r\nexport const minInt24 = -(2n ** (24n - 1n))\r\nexport const minInt32 = -(2n ** (32n - 1n))\r\nexport const minInt40 = -(2n ** (40n - 1n))\r\nexport const minInt48 = -(2n ** (48n - 1n))\r\nexport const minInt56 = -(2n ** (56n - 1n))\r\nexport const minInt64 = -(2n ** (64n - 1n))\r\nexport const minInt72 = -(2n ** (72n - 1n))\r\nexport const minInt80 = -(2n ** (80n - 1n))\r\nexport const minInt88 = -(2n ** (88n - 1n))\r\nexport const minInt96 = -(2n ** (96n - 1n))\r\nexport const minInt104 = -(2n ** (104n - 1n))\r\nexport const minInt112 = -(2n ** (112n - 1n))\r\nexport const minInt120 = -(2n ** (120n - 1n))\r\nexport const minInt128 = -(2n ** (128n - 1n))\r\nexport const minInt136 = -(2n ** (136n - 1n))\r\nexport const minInt144 = -(2n ** (144n - 1n))\r\nexport const minInt152 = -(2n ** (152n - 1n))\r\nexport const minInt160 = -(2n ** (160n - 1n))\r\nexport const minInt168 = -(2n ** (168n - 1n))\r\nexport const minInt176 = -(2n ** (176n - 1n))\r\nexport const minInt184 = -(2n ** (184n - 1n))\r\nexport const minInt192 = -(2n ** (192n - 1n))\r\nexport const minInt200 = -(2n ** (200n - 1n))\r\nexport const minInt208 = -(2n ** (208n - 1n))\r\nexport const minInt216 = -(2n ** (216n - 1n))\r\nexport const minInt224 = -(2n ** (224n - 1n))\r\nexport const minInt232 = -(2n ** (232n - 1n))\r\nexport const minInt240 = -(2n ** (240n - 1n))\r\nexport const minInt248 = -(2n ** (248n - 1n))\r\nexport const minInt256 = -(2n ** (256n - 1n))\r\n\r\nexport const maxUint8 = 2n ** 8n - 1n\r\nexport const maxUint16 = 2n ** 16n - 1n\r\nexport const maxUint24 = 2n ** 24n - 1n\r\nexport const maxUint32 = 2n ** 32n - 1n\r\nexport const maxUint40 = 2n ** 40n - 1n\r\nexport const maxUint48 = 2n ** 48n - 1n\r\nexport const maxUint56 = 2n ** 56n - 1n\r\nexport const maxUint64 = 2n ** 64n - 1n\r\nexport const maxUint72 = 2n ** 72n - 1n\r\nexport const maxUint80 = 2n ** 80n - 1n\r\nexport const maxUint88 = 2n ** 88n - 1n\r\nexport const maxUint96 = 2n ** 96n - 1n\r\nexport const maxUint104 = 2n ** 104n - 1n\r\nexport const maxUint112 = 2n ** 112n - 1n\r\nexport const maxUint120 = 2n ** 120n - 1n\r\nexport const maxUint128 = 2n ** 128n - 1n\r\nexport const maxUint136 = 2n ** 136n - 1n\r\nexport const maxUint144 = 2n ** 144n - 1n\r\nexport const maxUint152 = 2n ** 152n - 1n\r\nexport const maxUint160 = 2n ** 160n - 1n\r\nexport const maxUint168 = 2n ** 168n - 1n\r\nexport const maxUint176 = 2n ** 176n - 1n\r\nexport const maxUint184 = 2n ** 184n - 1n\r\nexport const maxUint192 = 2n ** 192n - 1n\r\nexport const maxUint200 = 2n ** 200n - 1n\r\nexport const maxUint208 = 2n ** 208n - 1n\r\nexport const maxUint216 = 2n ** 216n - 1n\r\nexport const maxUint224 = 2n ** 224n - 1n\r\nexport const maxUint232 = 2n ** 232n - 1n\r\nexport const maxUint240 = 2n ** 240n - 1n\r\nexport const maxUint248 = 2n ** 248n - 1n\r\nexport const maxUint256 = 2n ** 256n - 1n\r\n", "import * as Base64 from './Base64.js'\r\nimport * as Bytes from './Bytes.js'\r\nimport * as Errors from './Errors.js'\r\nimport * as Hash from './Hash.js'\r\nimport * as Hex from './Hex.js'\r\nimport * as P256 from './P256.js'\r\nimport type * as PublicKey from './PublicKey.js'\r\nimport type * as Signature from './Signature.js'\r\nimport type { Compute, OneOf } from './internal/types.js'\r\nimport * as internal from './internal/webauthn.js'\r\n\r\n/** A WebAuthn-flavored P256 credential. */\r\nexport type P256Credential = {\r\n  id: string\r\n  publicKey: PublicKey.PublicKey\r\n  raw: internal.PublicKeyCredential\r\n}\r\n\r\n/** Metadata for a WebAuthn P256 signature. */\r\nexport type SignMetadata = Compute<{\r\n  authenticatorData: Hex.Hex\r\n  challengeIndex: number\r\n  clientDataJSON: string\r\n  typeIndex: number\r\n  userVerificationRequired: boolean\r\n}>\r\n\r\nexport const createChallenge = Uint8Array.from([\r\n  105, 171, 180, 181, 160, 222, 75, 198, 42, 42, 32, 31, 141, 37, 186, 233,\r\n])\r\n\r\n/**\r\n * Creates a new WebAuthn P256 Credential, which can be stored and later used for signing.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256 } from 'ox'\r\n *\r\n * const credential = await WebAuthnP256.createCredential({ name: 'Example' }) // [!code focus]\r\n * // @log: {\r\n * // @log:   id: 'oZ48...',\r\n * // @log:   publicKey: { x: 51421...5123n, y: 12345...6789n },\r\n * // @log:   raw: PublicKeyCredential {},\r\n * // @log: }\r\n *\r\n * const { metadata, signature } = await WebAuthnP256.sign({\r\n *   credentialId: credential.id,\r\n *   challenge: '0xdeadbeef',\r\n * })\r\n * ```\r\n *\r\n * @param options - Credential creation options.\r\n * @returns A WebAuthn P256 credential.\r\n */\r\nexport async function createCredential(\r\n  options: createCredential.Options,\r\n): Promise<P256Credential> {\r\n  const {\r\n    createFn = window.navigator.credentials.create.bind(\r\n      window.navigator.credentials,\r\n    ),\r\n    ...rest\r\n  } = options\r\n  const creationOptions = getCredentialCreationOptions(rest)\r\n  try {\r\n    const credential = (await createFn(\r\n      creationOptions,\r\n    )) as internal.PublicKeyCredential\r\n    if (!credential) throw new CredentialCreationFailedError()\r\n\r\n    const response = credential.response as AuthenticatorAttestationResponse\r\n    const publicKey = await internal.parseCredentialPublicKey(response)\r\n\r\n    return {\r\n      id: credential.id,\r\n      publicKey,\r\n      raw: credential,\r\n    }\r\n  } catch (error) {\r\n    throw new CredentialCreationFailedError({\r\n      cause: error as Error,\r\n    })\r\n  }\r\n}\r\n\r\nexport declare namespace createCredential {\r\n  type Options = getCredentialCreationOptions.Options & {\r\n    /**\r\n     * Credential creation function. Useful for environments that do not support\r\n     * the WebAuthn API natively (i.e. React Native or testing environments).\r\n     *\r\n     * @default window.navigator.credentials.create\r\n     */\r\n    createFn?:\r\n      | ((\r\n          options?: internal.CredentialCreationOptions | undefined,\r\n        ) => Promise<internal.Credential | null>)\r\n      | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | getCredentialCreationOptions.ErrorType\r\n    | internal.parseCredentialPublicKey.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Gets the authenticator data which contains information about the\r\n * processing of an authenticator request (ie. from `WebAuthnP256.sign`).\r\n *\r\n * :::warning\r\n *\r\n * This function is mainly for testing purposes or for manually constructing\r\n * autenticator data. In most cases you will not need this function.\r\n * `authenticatorData` is typically returned as part of the\r\n * {@link ox#WebAuthnP256.(sign:function)} response (ie. an authenticator response).\r\n *\r\n * :::\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256 } from 'ox'\r\n *\r\n * const authenticatorData = WebAuthnP256.getAuthenticatorData({\r\n *   rpId: 'example.com',\r\n *   signCount: 420,\r\n * })\r\n * // @log: \"0xa379a6f6eeafb9a55e378c118034e2751e682fab9f2d30ab13d2125586ce194705000001a4\"\r\n * ```\r\n *\r\n * @param options - Options to construct the authenticator data.\r\n * @returns The authenticator data.\r\n */\r\nexport function getAuthenticatorData(\r\n  options: getAuthenticatorData.Options = {},\r\n): Hex.Hex {\r\n  const { flag = 5, rpId = window.location.hostname, signCount = 0 } = options\r\n  const rpIdHash = Hash.sha256(Hex.fromString(rpId))\r\n  const flag_bytes = Hex.fromNumber(flag, { size: 1 })\r\n  const signCount_bytes = Hex.fromNumber(signCount, { size: 4 })\r\n  return Hex.concat(rpIdHash, flag_bytes, signCount_bytes)\r\n}\r\n\r\nexport declare namespace getAuthenticatorData {\r\n  type Options = {\r\n    /** A bitfield that indicates various attributes that were asserted by the authenticator. [Read more](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Authenticator_data#flags) */\r\n    flag?: number | undefined\r\n    /** The [Relying Party ID](https://w3c.github.io/webauthn/#relying-party-identifier) that the credential is scoped to. */\r\n    rpId?: internal.PublicKeyCredentialRequestOptions['rpId'] | undefined\r\n    /** A signature counter, if supported by the authenticator (set to 0 otherwise). */\r\n    signCount?: number | undefined\r\n  }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Constructs the Client Data in stringified JSON format which represents client data that\r\n * was passed to `credentials.get()` in {@link ox#WebAuthnP256.(sign:function)}.\r\n *\r\n * :::warning\r\n *\r\n * This function is mainly for testing purposes or for manually constructing\r\n * client data. In most cases you will not need this function.\r\n * `clientDataJSON` is typically returned as part of the\r\n * {@link ox#WebAuthnP256.(sign:function)} response (ie. an authenticator response).\r\n *\r\n * :::\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256 } from 'ox'\r\n *\r\n * const clientDataJSON = WebAuthnP256.getClientDataJSON({\r\n *   challenge: '0xdeadbeef',\r\n *   origin: 'https://example.com',\r\n * })\r\n * // @log: \"{\"type\":\"webauthn.get\",\"challenge\":\"3q2-7w\",\"origin\":\"https://example.com\",\"crossOrigin\":false}\"\r\n * ```\r\n *\r\n * @param options - Options to construct the client data.\r\n * @returns The client data.\r\n */\r\nexport function getClientDataJSON(options: getClientDataJSON.Options): string {\r\n  const {\r\n    challenge,\r\n    crossOrigin = false,\r\n    extraClientData,\r\n    origin = window.location.origin,\r\n  } = options\r\n\r\n  return JSON.stringify({\r\n    type: 'webauthn.get',\r\n    challenge: Base64.fromHex(challenge, { url: true, pad: false }),\r\n    origin,\r\n    crossOrigin,\r\n    ...extraClientData,\r\n  })\r\n}\r\n\r\nexport declare namespace getClientDataJSON {\r\n  type Options = {\r\n    /** The challenge to sign. */\r\n    challenge: Hex.Hex\r\n    /** If set to `true`, it means that the calling context is an `<iframe>` that is not same origin with its ancestor frames. */\r\n    crossOrigin?: boolean | undefined\r\n    /** Additional client data to include in the client data JSON. */\r\n    extraClientData?: Record<string, unknown> | undefined\r\n    /** The fully qualified origin of the relying party which has been given by the client/browser to the authenticator. */\r\n    origin?: string | undefined\r\n  }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Returns the creation options for a P256 WebAuthn Credential to be used with\r\n * the Web Authentication API.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256 } from 'ox'\r\n *\r\n * const options = WebAuthnP256.getCredentialCreationOptions({ name: 'Example' })\r\n *\r\n * const credential = await window.navigator.credentials.create(options)\r\n * ```\r\n *\r\n * @param options - Options.\r\n * @returns The credential creation options.\r\n */\r\nexport function getCredentialCreationOptions(\r\n  options: getCredentialCreationOptions.Options,\r\n): internal.CredentialCreationOptions {\r\n  const {\r\n    attestation = 'none',\r\n    authenticatorSelection = {\r\n      residentKey: 'preferred',\r\n      requireResidentKey: false,\r\n      userVerification: 'required',\r\n    },\r\n    challenge = createChallenge,\r\n    excludeCredentialIds,\r\n    name: name_,\r\n    rp = {\r\n      id: window.location.hostname,\r\n      name: window.document.title,\r\n    },\r\n    user,\r\n    extensions,\r\n  } = options\r\n  const name = (user?.name ?? name_)!\r\n  return {\r\n    publicKey: {\r\n      attestation,\r\n      authenticatorSelection,\r\n      challenge,\r\n      ...(excludeCredentialIds\r\n        ? {\r\n            excludeCredentials: excludeCredentialIds?.map((id) => ({\r\n              id: Base64.toBytes(id),\r\n              type: 'public-key',\r\n            })),\r\n          }\r\n        : {}),\r\n      pubKeyCredParams: [\r\n        {\r\n          type: 'public-key',\r\n          alg: -7, // p256\r\n        },\r\n      ],\r\n      rp,\r\n      user: {\r\n        id: user?.id ?? Hash.keccak256(Bytes.fromString(name), { as: 'Bytes' }),\r\n        name,\r\n        displayName: user?.displayName ?? name,\r\n      },\r\n      extensions,\r\n    },\r\n  } as internal.CredentialCreationOptions\r\n}\r\n\r\nexport declare namespace getCredentialCreationOptions {\r\n  type Options = {\r\n    /**\r\n     * A string specifying the relying party's preference for how the attestation statement\r\n     * (i.e., provision of verifiable evidence of the authenticity of the authenticator and its data)\r\n     * is conveyed during credential creation.\r\n     */\r\n    attestation?:\r\n      | internal.PublicKeyCredentialCreationOptions['attestation']\r\n      | undefined\r\n    /**\r\n     * An object whose properties are criteria used to filter out the potential authenticators\r\n     * for the credential creation operation.\r\n     */\r\n    authenticatorSelection?:\r\n      | internal.PublicKeyCredentialCreationOptions['authenticatorSelection']\r\n      | undefined\r\n    /**\r\n     * An `ArrayBuffer`, `TypedArray`, or `DataView` used as a cryptographic challenge.\r\n     */\r\n    challenge?:\r\n      | internal.PublicKeyCredentialCreationOptions['challenge']\r\n      | undefined\r\n    /**\r\n     * List of credential IDs to exclude from the creation. This property can be used\r\n     * to prevent creation of a credential if it already exists.\r\n     */\r\n    excludeCredentialIds?: readonly string[] | undefined\r\n    /**\r\n     * List of Web Authentication API credentials to use during creation or authentication.\r\n     */\r\n    extensions?:\r\n      | internal.PublicKeyCredentialCreationOptions['extensions']\r\n      | undefined\r\n    /**\r\n     * An object describing the relying party that requested the credential creation\r\n     */\r\n    rp?:\r\n      | {\r\n          id: string\r\n          name: string\r\n        }\r\n      | undefined\r\n    /**\r\n     * A numerical hint, in milliseconds, which indicates the time the calling web app is willing to wait for the creation operation to complete.\r\n     */\r\n    timeout?: internal.PublicKeyCredentialCreationOptions['timeout'] | undefined\r\n  } & OneOf<\r\n    | {\r\n        /** Name for the credential (user.name). */\r\n        name: string\r\n      }\r\n    | {\r\n        /**\r\n         * An object describing the user account for which the credential is generated.\r\n         */\r\n        user: {\r\n          displayName?: string\r\n          id?: BufferSource\r\n          name: string\r\n        }\r\n      }\r\n  >\r\n\r\n  type ErrorType =\r\n    | Base64.toBytes.ErrorType\r\n    | Hash.keccak256.ErrorType\r\n    | Bytes.fromString.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Returns the request options to sign a challenge with the Web Authentication API.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256 } from 'ox'\r\n *\r\n * const options = WebAuthnP256.getCredentialRequestOptions({\r\n *   challenge: '0xdeadbeef',\r\n * })\r\n *\r\n * const credential = await window.navigator.credentials.get(options)\r\n * ```\r\n *\r\n * @param options - Options.\r\n * @returns The credential request options.\r\n */\r\nexport function getCredentialRequestOptions(\r\n  options: getCredentialRequestOptions.Options,\r\n): internal.CredentialRequestOptions {\r\n  const {\r\n    credentialId,\r\n    challenge,\r\n    rpId = window.location.hostname,\r\n    userVerification = 'required',\r\n  } = options\r\n  return {\r\n    publicKey: {\r\n      ...(credentialId\r\n        ? {\r\n            allowCredentials: [\r\n              {\r\n                id: Base64.toBytes(credentialId),\r\n                type: 'public-key',\r\n              },\r\n            ],\r\n          }\r\n        : {}),\r\n      challenge: Bytes.fromHex(challenge),\r\n      rpId,\r\n      userVerification,\r\n    },\r\n  }\r\n}\r\n\r\nexport declare namespace getCredentialRequestOptions {\r\n  type Options = {\r\n    /** The credential ID to use. */\r\n    credentialId?: string | undefined\r\n    /** The challenge to sign. */\r\n    challenge: Hex.Hex\r\n    /** The relying party identifier to use. */\r\n    rpId?: internal.PublicKeyCredentialRequestOptions['rpId'] | undefined\r\n    /** The user verification requirement. */\r\n    userVerification?:\r\n      | internal.PublicKeyCredentialRequestOptions['userVerification']\r\n      | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | Bytes.fromHex.ErrorType\r\n    | Base64.toBytes.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Constructs the final digest that was signed and computed by the authenticator. This payload includes\r\n * the cryptographic `challenge`, as well as authenticator metadata (`authenticatorData` + `clientDataJSON`).\r\n * This value can be also used with raw P256 verification (such as {@link ox#P256.(verify:function)} or\r\n * {@link ox#WebCryptoP256.(verify:function)}).\r\n *\r\n * :::warning\r\n *\r\n * This function is mainly for testing purposes or for manually constructing\r\n * signing payloads. In most cases you will not need this function and\r\n * instead use {@link ox#WebAuthnP256.(sign:function)}.\r\n *\r\n * :::\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256, WebCryptoP256 } from 'ox'\r\n *\r\n * const { metadata, payload } = WebAuthnP256.getSignPayload({ // [!code focus]\r\n *   challenge: '0xdeadbeef', // [!code focus]\r\n * }) // [!code focus]\r\n * // @log: {\r\n * // @log:   metadata: {\r\n * // @log:     authenticatorData: \"0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000\",\r\n * // @log:     challengeIndex: 23,\r\n * // @log:     clientDataJSON: \"{\"type\":\"webauthn.get\",\"challenge\":\"9jEFijuhEWrM4SOW-tChJbUEHEP44VcjcJ-Bqo1fTM8\",\"origin\":\"http://localhost:5173\",\"crossOrigin\":false}\",\r\n * // @log:     typeIndex: 1,\r\n * // @log:     userVerificationRequired: true,\r\n * // @log:   },\r\n * // @log:   payload: \"0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d9763050000000045086dcb06a5f234db625bcdc94e657f86b76b6fd3eb9c30543eabc1e577a4b0\",\r\n * // @log: }\r\n *\r\n * const { publicKey, privateKey } = await WebCryptoP256.createKeyPair()\r\n *\r\n * const signature = await WebCryptoP256.sign({\r\n *   payload,\r\n *   privateKey,\r\n * })\r\n * ```\r\n *\r\n * @param options - Options to construct the signing payload.\r\n * @returns The signing payload.\r\n */\r\nexport function getSignPayload(\r\n  options: getSignPayload.Options,\r\n): getSignPayload.ReturnType {\r\n  const {\r\n    challenge,\r\n    crossOrigin,\r\n    extraClientData,\r\n    flag,\r\n    origin,\r\n    rpId,\r\n    signCount,\r\n    userVerification = 'required',\r\n  } = options\r\n\r\n  const authenticatorData = getAuthenticatorData({\r\n    flag,\r\n    rpId,\r\n    signCount,\r\n  })\r\n  const clientDataJSON = getClientDataJSON({\r\n    challenge,\r\n    crossOrigin,\r\n    extraClientData,\r\n    origin,\r\n  })\r\n  const clientDataJSONHash = Hash.sha256(Hex.fromString(clientDataJSON))\r\n\r\n  const challengeIndex = clientDataJSON.indexOf('\"challenge\"')\r\n  const typeIndex = clientDataJSON.indexOf('\"type\"')\r\n\r\n  const metadata = {\r\n    authenticatorData,\r\n    clientDataJSON,\r\n    challengeIndex,\r\n    typeIndex,\r\n    userVerificationRequired: userVerification === 'required',\r\n  }\r\n\r\n  const payload = Hex.concat(authenticatorData, clientDataJSONHash)\r\n\r\n  return { metadata, payload }\r\n}\r\n\r\nexport declare namespace getSignPayload {\r\n  type Options = {\r\n    /** The challenge to sign. */\r\n    challenge: Hex.Hex\r\n    /** If set to `true`, it means that the calling context is an `<iframe>` that is not same origin with its ancestor frames. */\r\n    crossOrigin?: boolean | undefined\r\n    /** Additional client data to include in the client data JSON. */\r\n    extraClientData?: Record<string, unknown> | undefined\r\n    /** If set to `true`, the payload will be hashed before being returned. */\r\n    hash?: boolean | undefined\r\n    /** A bitfield that indicates various attributes that were asserted by the authenticator. [Read more](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Authenticator_data#flags) */\r\n    flag?: number | undefined\r\n    /** The fully qualified origin of the relying party which has been given by the client/browser to the authenticator. */\r\n    origin?: string | undefined\r\n    /** The [Relying Party ID](https://w3c.github.io/webauthn/#relying-party-identifier) that the credential is scoped to. */\r\n    rpId?: internal.PublicKeyCredentialRequestOptions['rpId'] | undefined\r\n    /** A signature counter, if supported by the authenticator (set to 0 otherwise). */\r\n    signCount?: number | undefined\r\n    /** The user verification requirement that the authenticator will enforce. */\r\n    userVerification?:\r\n      | internal.PublicKeyCredentialRequestOptions['userVerification']\r\n      | undefined\r\n  }\r\n\r\n  type ReturnType = {\r\n    metadata: SignMetadata\r\n    payload: Hex.Hex\r\n  }\r\n\r\n  type ErrorType =\r\n    | Hash.sha256.ErrorType\r\n    | Hex.concat.ErrorType\r\n    | Hex.fromString.ErrorType\r\n    | getAuthenticatorData.ErrorType\r\n    | getClientDataJSON.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Signs a challenge using a stored WebAuthn P256 Credential. If no Credential is provided,\r\n * a prompt will be displayed for the user to select an existing Credential\r\n * that was previously registered.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256 } from 'ox'\r\n *\r\n * const credential = await WebAuthnP256.createCredential({\r\n *   name: 'Example',\r\n * })\r\n *\r\n * const { metadata, signature } = await WebAuthnP256.sign({ // [!code focus]\r\n *   credentialId: credential.id, // [!code focus]\r\n *   challenge: '0xdeadbeef', // [!code focus]\r\n * }) // [!code focus]\r\n * // @log: {\r\n * // @log:   metadata: {\r\n * // @log:     authenticatorData: '0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000',\r\n * // @log:     clientDataJSON: '{\"type\":\"webauthn.get\",\"challenge\":\"9jEFijuhEWrM4SOW-tChJbUEHEP44VcjcJ-Bqo1fTM8\",\"origin\":\"http://localhost:5173\",\"crossOrigin\":false}',\r\n * // @log:     challengeIndex: 23,\r\n * // @log:     typeIndex: 1,\r\n * // @log:     userVerificationRequired: true,\r\n * // @log:   },\r\n * // @log:   signature: { r: 51231...4215n, s: 12345...6789n },\r\n * // @log: }\r\n * ```\r\n *\r\n * @param options - Options.\r\n * @returns The signature.\r\n */\r\nexport async function sign(options: sign.Options): Promise<sign.ReturnType> {\r\n  const {\r\n    getFn = window.navigator.credentials.get.bind(window.navigator.credentials),\r\n    ...rest\r\n  } = options\r\n  const requestOptions = getCredentialRequestOptions(rest)\r\n  try {\r\n    const credential = (await getFn(\r\n      requestOptions,\r\n    )) as internal.PublicKeyCredential\r\n    if (!credential) throw new CredentialRequestFailedError()\r\n    const response = credential.response as AuthenticatorAssertionResponse\r\n\r\n    const clientDataJSON = String.fromCharCode(\r\n      ...new Uint8Array(response.clientDataJSON),\r\n    )\r\n    const challengeIndex = clientDataJSON.indexOf('\"challenge\"')\r\n    const typeIndex = clientDataJSON.indexOf('\"type\"')\r\n\r\n    const signature = internal.parseAsn1Signature(\r\n      new Uint8Array(response.signature),\r\n    )\r\n\r\n    return {\r\n      metadata: {\r\n        authenticatorData: Hex.fromBytes(\r\n          new Uint8Array(response.authenticatorData),\r\n        ),\r\n        clientDataJSON,\r\n        challengeIndex,\r\n        typeIndex,\r\n        userVerificationRequired:\r\n          requestOptions.publicKey!.userVerification === 'required',\r\n      },\r\n      signature,\r\n      raw: credential,\r\n    }\r\n  } catch (error) {\r\n    throw new CredentialRequestFailedError({\r\n      cause: error as Error,\r\n    })\r\n  }\r\n}\r\n\r\nexport declare namespace sign {\r\n  type Options = getCredentialRequestOptions.Options & {\r\n    /**\r\n     * Credential request function. Useful for environments that do not support\r\n     * the WebAuthn API natively (i.e. React Native or testing environments).\r\n     *\r\n     * @default window.navigator.credentials.get\r\n     */\r\n    getFn?:\r\n      | ((\r\n          options?: internal.CredentialRequestOptions | undefined,\r\n        ) => Promise<internal.Credential | null>)\r\n      | undefined\r\n  }\r\n\r\n  type ReturnType = {\r\n    metadata: SignMetadata\r\n    raw: internal.PublicKeyCredential\r\n    signature: Signature.Signature<false>\r\n  }\r\n\r\n  type ErrorType =\r\n    | Hex.fromBytes.ErrorType\r\n    | getCredentialRequestOptions.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Verifies a signature using the Credential's public key and the challenge which was signed.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256 } from 'ox'\r\n *\r\n * const credential = await WebAuthnP256.createCredential({\r\n *   name: 'Example',\r\n * })\r\n *\r\n * const { metadata, signature } = await WebAuthnP256.sign({\r\n *   credentialId: credential.id,\r\n *   challenge: '0xdeadbeef',\r\n * })\r\n *\r\n * const result = await WebAuthnP256.verify({ // [!code focus]\r\n *   metadata, // [!code focus]\r\n *   challenge: '0xdeadbeef', // [!code focus]\r\n *   publicKey: credential.publicKey, // [!code focus]\r\n *   signature, // [!code focus]\r\n * }) // [!code focus]\r\n * // @log: true\r\n * ```\r\n *\r\n * @param options - Options.\r\n * @returns Whether the signature is valid.\r\n */\r\nexport function verify(options: verify.Options): boolean {\r\n  const { challenge, hash = true, metadata, publicKey, signature } = options\r\n  const {\r\n    authenticatorData,\r\n    challengeIndex,\r\n    clientDataJSON,\r\n    typeIndex,\r\n    userVerificationRequired,\r\n  } = metadata\r\n\r\n  const authenticatorDataBytes = Bytes.fromHex(authenticatorData)\r\n\r\n  // Check length of `authenticatorData`.\r\n  if (authenticatorDataBytes.length < 37) return false\r\n\r\n  const flag = authenticatorDataBytes[32]!\r\n\r\n  // Verify that the UP bit of the flags in authData is set.\r\n  if ((flag & 0x01) !== 0x01) return false\r\n\r\n  // If user verification was determined to be required, verify that\r\n  // the UV bit of the flags in authData is set. Otherwise, ignore the\r\n  // value of the UV flag.\r\n  if (userVerificationRequired && (flag & 0x04) !== 0x04) return false\r\n\r\n  // If the BE bit of the flags in authData is not set, verify that\r\n  // the BS bit is not set.\r\n  if ((flag & 0x08) !== 0x08 && (flag & 0x10) === 0x10) return false\r\n\r\n  // Check that response is for an authentication assertion\r\n  const type = '\"type\":\"webauthn.get\"'\r\n  if (type !== clientDataJSON.slice(Number(typeIndex), type.length + 1))\r\n    return false\r\n\r\n  // Check that hash is in the clientDataJSON.\r\n  const match = clientDataJSON\r\n    .slice(Number(challengeIndex))\r\n    .match(/^\"challenge\":\"(.*?)\"/)\r\n  if (!match) return false\r\n\r\n  // Validate the challenge in the clientDataJSON.\r\n  const [_, challenge_extracted] = match\r\n  if (Hex.fromBytes(Base64.toBytes(challenge_extracted!)) !== challenge)\r\n    return false\r\n\r\n  const clientDataJSONHash = Hash.sha256(Bytes.fromString(clientDataJSON), {\r\n    as: 'Bytes',\r\n  })\r\n  const payload = Bytes.concat(authenticatorDataBytes, clientDataJSONHash)\r\n\r\n  return P256.verify({\r\n    hash,\r\n    payload,\r\n    publicKey,\r\n    signature,\r\n  })\r\n}\r\n\r\nexport declare namespace verify {\r\n  type Options = {\r\n    /** The challenge to verify. */\r\n    challenge: Hex.Hex\r\n    /** If set to `true`, the payload will be hashed (sha256) before being verified. */\r\n    hash?: boolean | undefined\r\n    /** The public key to verify the signature with. */\r\n    publicKey: PublicKey.PublicKey\r\n    /** The signature to verify. */\r\n    signature: Signature.Signature<false>\r\n    /** The metadata to verify the signature with. */\r\n    metadata: SignMetadata\r\n  }\r\n\r\n  type ErrorType =\r\n    | Base64.toBytes.ErrorType\r\n    | Bytes.concat.ErrorType\r\n    | Bytes.fromHex.ErrorType\r\n    | P256.verify.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** Thrown when a WebAuthn P256 credential creation fails. */\r\nexport class CredentialCreationFailedError extends Errors.BaseError<Error> {\r\n  override readonly name = 'WebAuthnP256.CredentialCreationFailedError'\r\n\r\n  constructor({ cause }: { cause?: Error | undefined } = {}) {\r\n    super('Failed to create credential.', {\r\n      cause,\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when a WebAuthn P256 credential request fails. */\r\nexport class CredentialRequestFailedError extends Errors.BaseError<Error> {\r\n  override readonly name = 'WebAuthnP256.CredentialRequestFailedError'\r\n\r\n  constructor({ cause }: { cause?: Error | undefined } = {}) {\r\n    super('Failed to request credential.', {\r\n      cause,\r\n    })\r\n  }\r\n}\r\n", "import * as Bytes from './Bytes.js'\r\nimport type * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\n\r\nconst encoder = /*#__PURE__*/ new TextEncoder()\r\nconst decoder = /*#__PURE__*/ new TextDecoder()\r\n\r\nconst integerToCharacter = /*#__PURE__*/ Object.fromEntries(\r\n  Array.from(\r\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\r\n  ).map((a, i) => [i, a.charCodeAt(0)]),\r\n)\r\n\r\nconst characterToInteger = /*#__PURE__*/ {\r\n  ...Object.fromEntries(\r\n    Array.from(\r\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\r\n    ).map((a, i) => [a.charCodeAt(0), i]),\r\n  ),\r\n  ['='.charCodeAt(0)]: 0,\r\n  ['-'.charCodeAt(0)]: 62,\r\n  ['_'.charCodeAt(0)]: 63,\r\n} as Record<number, number>\r\n\r\n/**\r\n * Encodes a {@link ox#Bytes.Bytes} to a Base64-encoded string (with optional padding and/or URL-safe characters).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Base64, Bytes } from 'ox'\r\n *\r\n * const value = Base64.fromBytes(Bytes.fromString('hello world'))\r\n * // @log: 'aGVsbG8gd29ybGQ='\r\n * ```\r\n *\r\n * @example\r\n * ### No Padding\r\n *\r\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\r\n *\r\n * ```ts twoslash\r\n * import { Base64, Bytes } from 'ox'\r\n *\r\n * const value = Base64.fromBytes(Bytes.fromString('hello world'), { pad: false })\r\n * // @log: 'aGVsbG8gd29ybGQ'\r\n * ```\r\n *\r\n * ### URL-safe Encoding\r\n *\r\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\r\n *\r\n * ```ts twoslash\r\n * import { Base64, Bytes } from 'ox'\r\n *\r\n * const value = Base64.fromBytes(Bytes.fromString('hello wod'), { url: true })\r\n * // @log: 'aGVsbG8gd29_77-9ZA=='\r\n * ```\r\n *\r\n * @param value - The byte array to encode.\r\n * @param options - Encoding options.\r\n * @returns The Base64 encoded string.\r\n */\r\nexport function fromBytes(value: Bytes.Bytes, options: fromBytes.Options = {}) {\r\n  const { pad = true, url = false } = options\r\n\r\n  const encoded = new Uint8Array(Math.ceil(value.length / 3) * 4)\r\n\r\n  for (let i = 0, j = 0; j < value.length; i += 4, j += 3) {\r\n    const y = (value[j]! << 16) + (value[j + 1]! << 8) + (value[j + 2]! | 0)\r\n    encoded[i] = integerToCharacter[y >> 18]!\r\n    encoded[i + 1] = integerToCharacter[(y >> 12) & 0x3f]!\r\n    encoded[i + 2] = integerToCharacter[(y >> 6) & 0x3f]!\r\n    encoded[i + 3] = integerToCharacter[y & 0x3f]!\r\n  }\r\n\r\n  const k = value.length % 3\r\n  const end = Math.floor(value.length / 3) * 4 + (k && k + 1)\r\n  let base64 = decoder.decode(new Uint8Array(encoded.buffer, 0, end))\r\n  if (pad && k === 1) base64 += '=='\r\n  if (pad && k === 2) base64 += '='\r\n  if (url) base64 = base64.replaceAll('+', '-').replaceAll('/', '_')\r\n  return base64\r\n}\r\n\r\nexport declare namespace fromBytes {\r\n  type Options = {\r\n    /**\r\n     * Whether to [pad](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) the Base64 encoded string.\r\n     *\r\n     * @default true\r\n     */\r\n    pad?: boolean | undefined\r\n    /**\r\n     * Whether to Base64 encode with [URL safe characters](https://datatracker.ietf.org/doc/html/rfc4648#section-5).\r\n     *\r\n     * @default false\r\n     */\r\n    url?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a {@link ox#Hex.Hex} to a Base64-encoded string (with optional padding and/or URL-safe characters).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Base64, Hex } from 'ox'\r\n *\r\n * const value = Base64.fromHex(Hex.fromString('hello world'))\r\n * // @log: 'aGVsbG8gd29ybGQ='\r\n * ```\r\n *\r\n * @example\r\n * ### No Padding\r\n *\r\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\r\n *\r\n * ```ts twoslash\r\n * import { Base64, Hex } from 'ox'\r\n *\r\n * const value = Base64.fromHex(Hex.fromString('hello world'), { pad: false })\r\n * // @log: 'aGVsbG8gd29ybGQ'\r\n * ```\r\n *\r\n * ### URL-safe Encoding\r\n *\r\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\r\n *\r\n * ```ts twoslash\r\n * import { Base64, Hex } from 'ox'\r\n *\r\n * const value = Base64.fromHex(Hex.fromString('hello wod'), { url: true })\r\n * // @log: 'aGVsbG8gd29_77-9ZA=='\r\n * ```\r\n *\r\n * @param value - The hex value to encode.\r\n * @param options - Encoding options.\r\n * @returns The Base64 encoded string.\r\n */\r\nexport function fromHex(value: Hex.Hex, options: fromHex.Options = {}) {\r\n  return fromBytes(Bytes.fromHex(value), options)\r\n}\r\n\r\nexport declare namespace fromHex {\r\n  type Options = {\r\n    /**\r\n     * Whether to [pad](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) the Base64 encoded string.\r\n     *\r\n     * @default true\r\n     */\r\n    pad?: boolean | undefined\r\n    /**\r\n     * Whether to Base64 encode with [URL safe characters](https://datatracker.ietf.org/doc/html/rfc4648#section-5).\r\n     *\r\n     * @default false\r\n     */\r\n    url?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType = fromBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a string to a Base64-encoded string (with optional padding and/or URL-safe characters).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Base64 } from 'ox'\r\n *\r\n * const value = Base64.fromString('hello world')\r\n * // @log: 'aGVsbG8gd29ybGQ='\r\n * ```\r\n *\r\n * @example\r\n * ### No Padding\r\n *\r\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\r\n *\r\n * ```ts twoslash\r\n * import { Base64 } from 'ox'\r\n *\r\n * const value = Base64.fromString('hello world', { pad: false })\r\n * // @log: 'aGVsbG8gd29ybGQ'\r\n * ```\r\n *\r\n * ### URL-safe Encoding\r\n *\r\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\r\n *\r\n * ```ts twoslash\r\n * import { Base64 } from 'ox'\r\n *\r\n * const value = Base64.fromString('hello wod', { url: true })\r\n * // @log: 'aGVsbG8gd29_77-9ZA=='\r\n * ```\r\n *\r\n * @param value - The string to encode.\r\n * @param options - Encoding options.\r\n * @returns The Base64 encoded string.\r\n */\r\nexport function fromString(value: string, options: fromString.Options = {}) {\r\n  return fromBytes(Bytes.fromString(value), options)\r\n}\r\n\r\nexport declare namespace fromString {\r\n  type Options = {\r\n    /**\r\n     * Whether to [pad](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) the Base64 encoded string.\r\n     *\r\n     * @default true\r\n     */\r\n    pad?: boolean | undefined\r\n    /**\r\n     * Whether to Base64 encode with [URL safe characters](https://datatracker.ietf.org/doc/html/rfc4648#section-5).\r\n     *\r\n     * @default false\r\n     */\r\n    url?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType = fromBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Base64, Bytes } from 'ox'\r\n *\r\n * const value = Base64.toBytes('aGVsbG8gd29ybGQ=')\r\n * // @log: Uint8Array([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100])\r\n * ```\r\n *\r\n * @param value - The string, hex value, or byte array to encode.\r\n * @returns The Base64 decoded {@link ox#Bytes.Bytes}.\r\n */\r\nexport function toBytes(value: string): Bytes.Bytes {\r\n  const base64 = value.replace(/=+$/, '')\r\n\r\n  const size = base64.length\r\n\r\n  const decoded = new Uint8Array(size + 3)\r\n  encoder.encodeInto(base64 + '===', decoded)\r\n\r\n  for (let i = 0, j = 0; i < base64.length; i += 4, j += 3) {\r\n    const x =\r\n      (characterToInteger[decoded[i]!]! << 18) +\r\n      (characterToInteger[decoded[i + 1]!]! << 12) +\r\n      (characterToInteger[decoded[i + 2]!]! << 6) +\r\n      characterToInteger[decoded[i + 3]!]!\r\n    decoded[j] = x >> 16\r\n    decoded[j + 1] = (x >> 8) & 0xff\r\n    decoded[j + 2] = x & 0xff\r\n  }\r\n\r\n  const decodedSize = (size >> 2) * 3 + (size % 4 && (size % 4) - 1)\r\n  return new Uint8Array(decoded.buffer, 0, decodedSize)\r\n}\r\n\r\nexport declare namespace toBytes {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to {@link ox#Hex.Hex}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Base64, Hex } from 'ox'\r\n *\r\n * const value = Base64.toHex('aGVsbG8gd29ybGQ=')\r\n * // @log: 0x68656c6c6f20776f726c64\r\n * ```\r\n *\r\n * @param value - The string, hex value, or byte array to encode.\r\n * @returns The Base64 decoded {@link ox#Hex.Hex}.\r\n */\r\nexport function toHex(value: string): Hex.Hex {\r\n  return Hex.fromBytes(toBytes(value))\r\n}\r\n\r\nexport declare namespace toHex {\r\n  type ErrorType = toBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to a string.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Base64 } from 'ox'\r\n *\r\n * const value = Base64.toString('aGVsbG8gd29ybGQ=')\r\n * // @log: 'hello world'\r\n * ```\r\n *\r\n * @param value - The string, hex value, or byte array to encode.\r\n * @returns The Base64 decoded string.\r\n */\r\nexport function toString(value: string): string {\r\n  return Bytes.toString(toBytes(value))\r\n}\r\n\r\nexport declare namespace toString {\r\n  type ErrorType = toBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n", "/**\r\n * Internal webcrypto alias.\r\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n * See utils.ts for details.\r\n * @module\r\n */\r\ndeclare const globalThis: Record<string, any> | undefined;\r\nexport const crypto: any =\r\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\r\n", "/**\r\n * Utilities for hex, bytes, CSPRNG.\r\n * @module\r\n */\r\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n\r\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// node.js versions earlier than v19 don't declare it in global scope.\r\n// For node.js, package.json#exports field mapping rewrites import\r\n// from `crypto` to `cryptoNode`, which imports native module.\r\n// Makes the utils un-importable in browsers without a bundler.\r\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\r\nimport { crypto } from '@noble/hashes/crypto';\r\n\r\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\r\nexport function isBytes(a: unknown): a is Uint8Array {\r\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\r\n}\r\n\r\n/** Asserts something is positive integer. */\r\nexport function anumber(n: number): void {\r\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\r\n}\r\n\r\n/** Asserts something is Uint8Array. */\r\nexport function abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\r\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\r\n  if (lengths.length > 0 && !lengths.includes(b.length))\r\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\r\n}\r\n\r\n/** Asserts something is hash */\r\nexport function ahash(h: IHash): void {\r\n  if (typeof h !== 'function' || typeof h.create !== 'function')\r\n    throw new Error('Hash should be wrapped by utils.createHasher');\r\n  anumber(h.outputLen);\r\n  anumber(h.blockLen);\r\n}\r\n\r\n/** Asserts a hash instance has not been destroyed / finished */\r\nexport function aexists(instance: any, checkFinished = true): void {\r\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\r\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\r\n}\r\n\r\n/** Asserts output is properly-sized byte array */\r\nexport function aoutput(out: any, instance: any): void {\r\n  abytes(out);\r\n  const min = instance.outputLen;\r\n  if (out.length < min) {\r\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\r\n  }\r\n}\r\n\r\n/** Generic type encompassing 8/16/32-byte arrays - but not 64-byte. */\r\n// prettier-ignore\r\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\r\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\r\n\r\n/** Cast u8 / u16 / u32 to u8. */\r\nexport function u8(arr: TypedArray): Uint8Array {\r\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\r\n}\r\n\r\n/** Cast u8 / u16 / u32 to u32. */\r\nexport function u32(arr: TypedArray): Uint32Array {\r\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\r\n}\r\n\r\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\r\nexport function clean(...arrays: TypedArray[]): void {\r\n  for (let i = 0; i < arrays.length; i++) {\r\n    arrays[i].fill(0);\r\n  }\r\n}\r\n\r\n/** Create DataView of an array for easy byte-level manipulation. */\r\nexport function createView(arr: TypedArray): DataView {\r\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\r\n}\r\n\r\n/** The rotate right (circular right shift) operation for uint32 */\r\nexport function rotr(word: number, shift: number): number {\r\n  return (word << (32 - shift)) | (word >>> shift);\r\n}\r\n\r\n/** The rotate left (circular left shift) operation for uint32 */\r\nexport function rotl(word: number, shift: number): number {\r\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\r\n}\r\n\r\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\r\nexport const isLE: boolean = /* @__PURE__ */ (() =>\r\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\r\n\r\n/** The byte swap operation for uint32 */\r\nexport function byteSwap(word: number): number {\r\n  return (\r\n    ((word << 24) & 0xff000000) |\r\n    ((word << 8) & 0xff0000) |\r\n    ((word >>> 8) & 0xff00) |\r\n    ((word >>> 24) & 0xff)\r\n  );\r\n}\r\n/** Conditionally byte swap if on a big-endian platform */\r\nexport const swap8IfBE: (n: number) => number = isLE\r\n  ? (n: number) => n\r\n  : (n: number) => byteSwap(n);\r\n\r\n/** @deprecated */\r\nexport const byteSwapIfBE: typeof swap8IfBE = swap8IfBE;\r\n/** In place byte swap for Uint32Array */\r\nexport function byteSwap32(arr: Uint32Array): Uint32Array {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i] = byteSwap(arr[i]);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport const swap32IfBE: (u: Uint32Array) => Uint32Array = isLE\r\n  ? (u: Uint32Array) => u\r\n  : byteSwap32;\r\n\r\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\r\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\r\n  // @ts-ignore\r\n  typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\r\n\r\n// Array where index 0xf0 (240) is mapped to string 'f0'\r\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\r\n  i.toString(16).padStart(2, '0')\r\n);\r\n\r\n/**\r\n * Convert byte array to hex string. Uses built-in function, when available.\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes: Uint8Array): string {\r\n  abytes(bytes);\r\n  // @ts-ignore\r\n  if (hasHexBuiltin) return bytes.toHex();\r\n  // pre-caching improves the speed 6x\r\n  let hex = '';\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    hex += hexes[bytes[i]];\r\n  }\r\n  return hex;\r\n}\r\n\r\n// We use optimized technique to convert hex string to byte array\r\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\r\nfunction asciiToBase16(ch: number): number | undefined {\r\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\r\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\r\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\r\n  return;\r\n}\r\n\r\n/**\r\n * Convert hex string to byte array. Uses built-in function, when available.\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex: string): Uint8Array {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  // @ts-ignore\r\n  if (hasHexBuiltin) return Uint8Array.fromHex(hex);\r\n  const hl = hex.length;\r\n  const al = hl / 2;\r\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\r\n  const array = new Uint8Array(al);\r\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\r\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\r\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\r\n    if (n1 === undefined || n2 === undefined) {\r\n      const char = hex[hi] + hex[hi + 1];\r\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\r\n    }\r\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * There is no setImmediate in browser and setTimeout is slow.\r\n * Call of async fn will return Promise, which will be fullfiled only on\r\n * next scheduler queue processing step and this is exactly what we need.\r\n */\r\nexport const nextTick = async (): Promise<void> => {};\r\n\r\n/** Returns control to thread each 'tick' ms to avoid blocking. */\r\nexport async function asyncLoop(\r\n  iters: number,\r\n  tick: number,\r\n  cb: (i: number) => void\r\n): Promise<void> {\r\n  let ts = Date.now();\r\n  for (let i = 0; i < iters; i++) {\r\n    cb(i);\r\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\r\n    const diff = Date.now() - ts;\r\n    if (diff >= 0 && diff < tick) continue;\r\n    await nextTick();\r\n    ts += diff;\r\n  }\r\n}\r\n\r\n// Global symbols, but ts doesn't see them: https://github.com/microsoft/TypeScript/issues/31535\r\ndeclare const TextEncoder: any;\r\ndeclare const TextDecoder: any;\r\n\r\n/**\r\n * Converts string to bytes using UTF8 encoding.\r\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str: string): Uint8Array {\r\n  if (typeof str !== 'string') throw new Error('string expected');\r\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n\r\n/**\r\n * Converts bytes to string using UTF8 encoding.\r\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\r\n */\r\nexport function bytesToUtf8(bytes: Uint8Array): string {\r\n  return new TextDecoder().decode(bytes);\r\n}\r\n\r\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\r\nexport type Input = string | Uint8Array;\r\n/**\r\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\r\n * Warning: when Uint8Array is passed, it would NOT get copied.\r\n * Keep in mind for future mutable operations.\r\n */\r\nexport function toBytes(data: Input): Uint8Array {\r\n  if (typeof data === 'string') data = utf8ToBytes(data);\r\n  abytes(data);\r\n  return data;\r\n}\r\n\r\n/** KDFs can accept string or Uint8Array for user convenience. */\r\nexport type KDFInput = string | Uint8Array;\r\n/**\r\n * Helper for KDFs: consumes uint8array or string.\r\n * When string is passed, does utf8 decoding, using TextDecoder.\r\n */\r\nexport function kdfInputToBytes(data: KDFInput): Uint8Array {\r\n  if (typeof data === 'string') data = utf8ToBytes(data);\r\n  abytes(data);\r\n  return data;\r\n}\r\n\r\n/** Copies several Uint8Arrays into one. */\r\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\r\n  let sum = 0;\r\n  for (let i = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    abytes(a);\r\n    sum += a.length;\r\n  }\r\n  const res = new Uint8Array(sum);\r\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    res.set(a, pad);\r\n    pad += a.length;\r\n  }\r\n  return res;\r\n}\r\n\r\ntype EmptyObj = {};\r\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\r\n  defaults: T1,\r\n  opts?: T2\r\n): T1 & T2 {\r\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\r\n    throw new Error('options should be object or undefined');\r\n  const merged = Object.assign(defaults, opts);\r\n  return merged as T1 & T2;\r\n}\r\n\r\n/** Hash interface. */\r\nexport type IHash = {\r\n  (data: Uint8Array): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create: any;\r\n};\r\n\r\n/** For runtime check if class implements interface */\r\nexport abstract class Hash<T extends Hash<T>> {\r\n  abstract blockLen: number; // Bytes per block\r\n  abstract outputLen: number; // Bytes in output\r\n  abstract update(buf: Input): this;\r\n  // Writes digest into buf\r\n  abstract digestInto(buf: Uint8Array): void;\r\n  abstract digest(): Uint8Array;\r\n  /**\r\n   * Resets internal state. Makes Hash instance unusable.\r\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\r\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\r\n   */\r\n  abstract destroy(): void;\r\n  /**\r\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\r\n   * when no options are passed.\r\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\r\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\r\n   * There are no guarantees for clean-up because it's impossible in JS.\r\n   */\r\n  abstract _cloneInto(to?: T): T;\r\n  // Safe version that clones internal state\r\n  abstract clone(): T;\r\n}\r\n\r\n/**\r\n * XOF: streaming API to read digest in chunks.\r\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\r\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\r\n * destroy state, next call can require more bytes.\r\n */\r\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\r\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\r\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\r\n};\r\n\r\n/** Hash function */\r\nexport type CHash = ReturnType<typeof createHasher>;\r\n/** Hash function with output */\r\nexport type CHashO = ReturnType<typeof createOptHasher>;\r\n/** XOF with output */\r\nexport type CHashXO = ReturnType<typeof createXOFer>;\r\n\r\n/** Wraps hash function, creating an interface on top of it */\r\nexport function createHasher<T extends Hash<T>>(\r\n  hashCons: () => Hash<T>\r\n): {\r\n  (msg: Input): Uint8Array;\r\n  outputLen: number;\r\n  blockLen: number;\r\n  create(): Hash<T>;\r\n} {\r\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\r\n  const tmp = hashCons();\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = () => hashCons();\r\n  return hashC;\r\n}\r\n\r\nexport function createOptHasher<H extends Hash<H>, T extends Object>(\r\n  hashCons: (opts?: T) => Hash<H>\r\n): {\r\n  (msg: Input, opts?: T): Uint8Array;\r\n  outputLen: number;\r\n  blockLen: number;\r\n  create(opts?: T): Hash<H>;\r\n} {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts?: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\nexport function createXOFer<H extends HashXOF<H>, T extends Object>(\r\n  hashCons: (opts?: T) => HashXOF<H>\r\n): {\r\n  (msg: Input, opts?: T): Uint8Array;\r\n  outputLen: number;\r\n  blockLen: number;\r\n  create(opts?: T): HashXOF<H>;\r\n} {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts?: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\nexport const wrapConstructor: typeof createHasher = createHasher;\r\nexport const wrapConstructorWithOpts: typeof createOptHasher = createOptHasher;\r\nexport const wrapXOFConstructorWithOpts: typeof createXOFer = createXOFer;\r\n\r\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\r\nexport function randomBytes(bytesLength = 32): Uint8Array {\r\n  if (crypto && typeof crypto.getRandomValues === 'function') {\r\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\r\n  }\r\n  // Legacy Node.js compatibility\r\n  if (crypto && typeof crypto.randomBytes === 'function') {\r\n    return Uint8Array.from(crypto.randomBytes(bytesLength));\r\n  }\r\n  throw new Error('crypto.getRandomValues must be defined');\r\n}\r\n", "/**\r\n * Internal Merkle-Damgard hash utils.\r\n * @module\r\n */\r\nimport { type Input, Hash, abytes, aexists, aoutput, clean, createView, toBytes } from './utils.ts';\r\n\r\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\r\nexport function setBigUint64(\r\n  view: DataView,\r\n  byteOffset: number,\r\n  value: bigint,\r\n  isLE: boolean\r\n): void {\r\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\r\n  const _32n = BigInt(32);\r\n  const _u32_max = BigInt(0xffffffff);\r\n  const wh = Number((value >> _32n) & _u32_max);\r\n  const wl = Number(value & _u32_max);\r\n  const h = isLE ? 4 : 0;\r\n  const l = isLE ? 0 : 4;\r\n  view.setUint32(byteOffset + h, wh, isLE);\r\n  view.setUint32(byteOffset + l, wl, isLE);\r\n}\r\n\r\n/** Choice: a ? b : c */\r\nexport function Chi(a: number, b: number, c: number): number {\r\n  return (a & b) ^ (~a & c);\r\n}\r\n\r\n/** Majority function, true if any two inputs is true. */\r\nexport function Maj(a: number, b: number, c: number): number {\r\n  return (a & b) ^ (a & c) ^ (b & c);\r\n}\r\n\r\n/**\r\n * Merkle-Damgard hash construction base class.\r\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\r\n */\r\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\r\n  protected abstract process(buf: DataView, offset: number): void;\r\n  protected abstract get(): number[];\r\n  protected abstract set(...args: number[]): void;\r\n  abstract destroy(): void;\r\n  protected abstract roundClean(): void;\r\n\r\n  readonly blockLen: number;\r\n  readonly outputLen: number;\r\n  readonly padOffset: number;\r\n  readonly isLE: boolean;\r\n\r\n  // For partial updates less than block size\r\n  protected buffer: Uint8Array;\r\n  protected view: DataView;\r\n  protected finished = false;\r\n  protected length = 0;\r\n  protected pos = 0;\r\n  protected destroyed = false;\r\n\r\n  constructor(blockLen: number, outputLen: number, padOffset: number, isLE: boolean) {\r\n    super();\r\n    this.blockLen = blockLen;\r\n    this.outputLen = outputLen;\r\n    this.padOffset = padOffset;\r\n    this.isLE = isLE;\r\n    this.buffer = new Uint8Array(blockLen);\r\n    this.view = createView(this.buffer);\r\n  }\r\n  update(data: Input): this {\r\n    aexists(this);\r\n    data = toBytes(data);\r\n    abytes(data);\r\n    const { view, buffer, blockLen } = this;\r\n    const len = data.length;\r\n    for (let pos = 0; pos < len; ) {\r\n      const take = Math.min(blockLen - this.pos, len - pos);\r\n      // Fast path: we have at least one block in input, cast it to view and process\r\n      if (take === blockLen) {\r\n        const dataView = createView(data);\r\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\r\n        continue;\r\n      }\r\n      buffer.set(data.subarray(pos, pos + take), this.pos);\r\n      this.pos += take;\r\n      pos += take;\r\n      if (this.pos === blockLen) {\r\n        this.process(view, 0);\r\n        this.pos = 0;\r\n      }\r\n    }\r\n    this.length += data.length;\r\n    this.roundClean();\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array): void {\r\n    aexists(this);\r\n    aoutput(out, this);\r\n    this.finished = true;\r\n    // Padding\r\n    // We can avoid allocation of buffer for padding completely if it\r\n    // was previously not allocated here. But it won't change performance.\r\n    const { buffer, view, blockLen, isLE } = this;\r\n    let { pos } = this;\r\n    // append the bit '1' to the message\r\n    buffer[pos++] = 0b10000000;\r\n    clean(this.buffer.subarray(pos));\r\n    // we have less than padOffset left in buffer, so we cannot put length in\r\n    // current block, need process it and pad again\r\n    if (this.padOffset > blockLen - pos) {\r\n      this.process(view, 0);\r\n      pos = 0;\r\n    }\r\n    // Pad until full block byte with zeros\r\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\r\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\r\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\r\n    // So we just write lowest 64 bits of that value.\r\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\r\n    this.process(view, 0);\r\n    const oview = createView(out);\r\n    const len = this.outputLen;\r\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\r\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\r\n    const outLen = len / 4;\r\n    const state = this.get();\r\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\r\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\r\n  }\r\n  digest(): Uint8Array {\r\n    const { buffer, outputLen } = this;\r\n    this.digestInto(buffer);\r\n    const res = buffer.slice(0, outputLen);\r\n    this.destroy();\r\n    return res;\r\n  }\r\n  _cloneInto(to?: T): T {\r\n    to ||= new (this.constructor as any)() as T;\r\n    to.set(...this.get());\r\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\r\n    to.destroyed = destroyed;\r\n    to.finished = finished;\r\n    to.length = length;\r\n    to.pos = pos;\r\n    if (length % blockLen) to.buffer.set(buffer);\r\n    return to;\r\n  }\r\n  clone(): T {\r\n    return this._cloneInto();\r\n  }\r\n}\r\n\r\n/**\r\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\r\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\r\n */\r\n\r\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\r\nexport const SHA256_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\r\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\r\n]);\r\n\r\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\r\nexport const SHA224_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\r\n  0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\r\n]);\r\n\r\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\r\nexport const SHA384_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\r\n  0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\r\n  0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\r\n]);\r\n\r\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\r\nexport const SHA512_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\r\n  0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\r\n  0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\r\n]);\r\n", "/**\r\n\r\nSHA1 (RFC 3174), MD5 (RFC 1321) and RIPEMD160 (RFC 2286) legacy, weak hash functions.\r\nDon't use them in a new protocol. What \"weak\" means:\r\n\r\n- Collisions can be made with 2^18 effort in MD5, 2^60 in SHA1, 2^80 in RIPEMD160.\r\n- No practical pre-image attacks (only theoretical, 2^123.4)\r\n- HMAC seems kinda ok: https://datatracker.ietf.org/doc/html/rfc6151\r\n * @module\r\n */\r\nimport { Chi, HashMD, Maj } from './_md.ts';\r\nimport { type CHash, clean, createHasher, rotl } from './utils.ts';\r\n\r\n/** Initial SHA1 state */\r\nconst SHA1_IV = /* @__PURE__ */ Uint32Array.from([\r\n  0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\r\n]);\r\n\r\n// Reusable temporary buffer\r\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\r\n\r\n/** SHA1 legacy hash class. */\r\nexport class SHA1 extends HashMD<SHA1> {\r\n  private A = SHA1_IV[0] | 0;\r\n  private B = SHA1_IV[1] | 0;\r\n  private C = SHA1_IV[2] | 0;\r\n  private D = SHA1_IV[3] | 0;\r\n  private E = SHA1_IV[4] | 0;\r\n\r\n  constructor() {\r\n    super(64, 20, 8, false);\r\n  }\r\n  protected get(): [number, number, number, number, number] {\r\n    const { A, B, C, D, E } = this;\r\n    return [A, B, C, D, E];\r\n  }\r\n  protected set(A: number, B: number, C: number, D: number, E: number): void {\r\n    this.A = A | 0;\r\n    this.B = B | 0;\r\n    this.C = C | 0;\r\n    this.D = D | 0;\r\n    this.E = E | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    for (let i = 0; i < 16; i++, offset += 4) SHA1_W[i] = view.getUint32(offset, false);\r\n    for (let i = 16; i < 80; i++)\r\n      SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\r\n    // Compression function main loop, 80 rounds\r\n    let { A, B, C, D, E } = this;\r\n    for (let i = 0; i < 80; i++) {\r\n      let F, K;\r\n      if (i < 20) {\r\n        F = Chi(B, C, D);\r\n        K = 0x5a827999;\r\n      } else if (i < 40) {\r\n        F = B ^ C ^ D;\r\n        K = 0x6ed9eba1;\r\n      } else if (i < 60) {\r\n        F = Maj(B, C, D);\r\n        K = 0x8f1bbcdc;\r\n      } else {\r\n        F = B ^ C ^ D;\r\n        K = 0xca62c1d6;\r\n      }\r\n      const T = (rotl(A, 5) + F + E + K + SHA1_W[i]) | 0;\r\n      E = D;\r\n      D = C;\r\n      C = rotl(B, 30);\r\n      B = A;\r\n      A = T;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    A = (A + this.A) | 0;\r\n    B = (B + this.B) | 0;\r\n    C = (C + this.C) | 0;\r\n    D = (D + this.D) | 0;\r\n    E = (E + this.E) | 0;\r\n    this.set(A, B, C, D, E);\r\n  }\r\n  protected roundClean(): void {\r\n    clean(SHA1_W);\r\n  }\r\n  destroy(): void {\r\n    this.set(0, 0, 0, 0, 0);\r\n    clean(this.buffer);\r\n  }\r\n}\r\n\r\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */\r\nexport const sha1: CHash = /* @__PURE__ */ createHasher(() => new SHA1());\r\n\r\n/** Per-round constants */\r\nconst p32 = /* @__PURE__ */ Math.pow(2, 32);\r\nconst K = /* @__PURE__ */ Array.from({ length: 64 }, (_, i) =>\r\n  Math.floor(p32 * Math.abs(Math.sin(i + 1)))\r\n);\r\n\r\n/** md5 initial state: same as sha1, but 4 u32 instead of 5. */\r\nconst MD5_IV = /* @__PURE__ */ SHA1_IV.slice(0, 4);\r\n\r\n// Reusable temporary buffer\r\nconst MD5_W = /* @__PURE__ */ new Uint32Array(16);\r\n/** MD5 legacy hash class. */\r\nexport class MD5 extends HashMD<MD5> {\r\n  private A = MD5_IV[0] | 0;\r\n  private B = MD5_IV[1] | 0;\r\n  private C = MD5_IV[2] | 0;\r\n  private D = MD5_IV[3] | 0;\r\n\r\n  constructor() {\r\n    super(64, 16, 8, true);\r\n  }\r\n  protected get(): [number, number, number, number] {\r\n    const { A, B, C, D } = this;\r\n    return [A, B, C, D];\r\n  }\r\n  protected set(A: number, B: number, C: number, D: number): void {\r\n    this.A = A | 0;\r\n    this.B = B | 0;\r\n    this.C = C | 0;\r\n    this.D = D | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    for (let i = 0; i < 16; i++, offset += 4) MD5_W[i] = view.getUint32(offset, true);\r\n    // Compression function main loop, 64 rounds\r\n    let { A, B, C, D } = this;\r\n    for (let i = 0; i < 64; i++) {\r\n      let F, g, s;\r\n      if (i < 16) {\r\n        F = Chi(B, C, D);\r\n        g = i;\r\n        s = [7, 12, 17, 22];\r\n      } else if (i < 32) {\r\n        F = Chi(D, B, C);\r\n        g = (5 * i + 1) % 16;\r\n        s = [5, 9, 14, 20];\r\n      } else if (i < 48) {\r\n        F = B ^ C ^ D;\r\n        g = (3 * i + 5) % 16;\r\n        s = [4, 11, 16, 23];\r\n      } else {\r\n        F = C ^ (B | ~D);\r\n        g = (7 * i) % 16;\r\n        s = [6, 10, 15, 21];\r\n      }\r\n      F = F + A + K[i] + MD5_W[g];\r\n      A = D;\r\n      D = C;\r\n      C = B;\r\n      B = B + rotl(F, s[i % 4]);\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    A = (A + this.A) | 0;\r\n    B = (B + this.B) | 0;\r\n    C = (C + this.C) | 0;\r\n    D = (D + this.D) | 0;\r\n    this.set(A, B, C, D);\r\n  }\r\n  protected roundClean(): void {\r\n    clean(MD5_W);\r\n  }\r\n  destroy(): void {\r\n    this.set(0, 0, 0, 0);\r\n    clean(this.buffer);\r\n  }\r\n}\r\n\r\n/**\r\n * MD5 (RFC 1321) legacy hash function. It was cryptographically broken.\r\n * MD5 architecture is similar to SHA1, with some differences:\r\n * - Reduced output length: 16 bytes (128 bit) instead of 20\r\n * - 64 rounds, instead of 80\r\n * - Little-endian: could be faster, but will require more code\r\n * - Non-linear index selection: huge speed-up for unroll\r\n * - Per round constants: more memory accesses, additional speed-up for unroll\r\n */\r\nexport const md5: CHash = /* @__PURE__ */ createHasher(() => new MD5());\r\n\r\n// RIPEMD-160\r\n\r\nconst Rho160 = /* @__PURE__ */ Uint8Array.from([\r\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\r\n]);\r\nconst Id160 = /* @__PURE__ */ (() => Uint8Array.from(new Array(16).fill(0).map((_, i) => i)))();\r\nconst Pi160 = /* @__PURE__ */ (() => Id160.map((i) => (9 * i + 5) % 16))();\r\nconst idxLR = /* @__PURE__ */ (() => {\r\n  const L = [Id160];\r\n  const R = [Pi160];\r\n  const res = [L, R];\r\n  for (let i = 0; i < 4; i++) for (let j of res) j.push(j[i].map((k) => Rho160[k]));\r\n  return res;\r\n})();\r\nconst idxL = /* @__PURE__ */ (() => idxLR[0])();\r\nconst idxR = /* @__PURE__ */ (() => idxLR[1])();\r\n// const [idxL, idxR] = idxLR;\r\n\r\nconst shifts160 = /* @__PURE__ */ [\r\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\r\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\r\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\r\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\r\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\r\n].map((i) => Uint8Array.from(i));\r\nconst shiftsL160 = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts160[i][j]));\r\nconst shiftsR160 = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts160[i][j]));\r\nconst Kl160 = /* @__PURE__ */ Uint32Array.from([\r\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\r\n]);\r\nconst Kr160 = /* @__PURE__ */ Uint32Array.from([\r\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\r\n]);\r\n// It's called f() in spec.\r\nfunction ripemd_f(group: number, x: number, y: number, z: number): number {\r\n  if (group === 0) return x ^ y ^ z;\r\n  if (group === 1) return (x & y) | (~x & z);\r\n  if (group === 2) return (x | ~y) ^ z;\r\n  if (group === 3) return (x & z) | (y & ~z);\r\n  return x ^ (y | ~z);\r\n}\r\n// Reusable temporary buffer\r\nconst BUF_160 = /* @__PURE__ */ new Uint32Array(16);\r\nexport class RIPEMD160 extends HashMD<RIPEMD160> {\r\n  private h0 = 0x67452301 | 0;\r\n  private h1 = 0xefcdab89 | 0;\r\n  private h2 = 0x98badcfe | 0;\r\n  private h3 = 0x10325476 | 0;\r\n  private h4 = 0xc3d2e1f0 | 0;\r\n\r\n  constructor() {\r\n    super(64, 20, 8, true);\r\n  }\r\n  protected get(): [number, number, number, number, number] {\r\n    const { h0, h1, h2, h3, h4 } = this;\r\n    return [h0, h1, h2, h3, h4];\r\n  }\r\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number): void {\r\n    this.h0 = h0 | 0;\r\n    this.h1 = h1 | 0;\r\n    this.h2 = h2 | 0;\r\n    this.h3 = h3 | 0;\r\n    this.h4 = h4 | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    for (let i = 0; i < 16; i++, offset += 4) BUF_160[i] = view.getUint32(offset, true);\r\n    // prettier-ignore\r\n    let al = this.h0 | 0, ar = al,\r\n        bl = this.h1 | 0, br = bl,\r\n        cl = this.h2 | 0, cr = cl,\r\n        dl = this.h3 | 0, dr = dl,\r\n        el = this.h4 | 0, er = el;\r\n\r\n    // Instead of iterating 0 to 80, we split it into 5 groups\r\n    // And use the groups in constants, functions, etc. Much simpler\r\n    for (let group = 0; group < 5; group++) {\r\n      const rGroup = 4 - group;\r\n      const hbl = Kl160[group], hbr = Kr160[group]; // prettier-ignore\r\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\r\n      const sl = shiftsL160[group], sr = shiftsR160[group]; // prettier-ignore\r\n      for (let i = 0; i < 16; i++) {\r\n        const tl = (rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el) | 0;\r\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\r\n      }\r\n      // 2 loops are 10% faster\r\n      for (let i = 0; i < 16; i++) {\r\n        const tr = (rotl(ar + ripemd_f(rGroup, br, cr, dr) + BUF_160[rr[i]] + hbr, sr[i]) + er) | 0;\r\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\r\n      }\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    this.set(\r\n      (this.h1 + cl + dr) | 0,\r\n      (this.h2 + dl + er) | 0,\r\n      (this.h3 + el + ar) | 0,\r\n      (this.h4 + al + br) | 0,\r\n      (this.h0 + bl + cr) | 0\r\n    );\r\n  }\r\n  protected roundClean(): void {\r\n    clean(BUF_160);\r\n  }\r\n  destroy(): void {\r\n    this.destroyed = true;\r\n    clean(this.buffer);\r\n    this.set(0, 0, 0, 0, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * RIPEMD-160 - a legacy hash function from 1990s.\r\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\r\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\r\n */\r\nexport const ripemd160: CHash = /* @__PURE__ */ createHasher(() => new RIPEMD160());\r\n", "/**\r\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\r\n * @todo re-check https://issues.chromium.org/issues/42212588\r\n * @module\r\n */\r\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\r\nconst _32n = /* @__PURE__ */ BigInt(32);\r\n\r\nfunction fromBig(\r\n  n: bigint,\r\n  le = false\r\n): {\r\n  h: number;\r\n  l: number;\r\n} {\r\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\r\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\r\n}\r\n\r\nfunction split(lst: bigint[], le = false): Uint32Array[] {\r\n  const len = lst.length;\r\n  let Ah = new Uint32Array(len);\r\n  let Al = new Uint32Array(len);\r\n  for (let i = 0; i < len; i++) {\r\n    const { h, l } = fromBig(lst[i], le);\r\n    [Ah[i], Al[i]] = [h, l];\r\n  }\r\n  return [Ah, Al];\r\n}\r\n\r\nconst toBig = (h: number, l: number): bigint => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\r\n// for Shift in [0, 32)\r\nconst shrSH = (h: number, _l: number, s: number): number => h >>> s;\r\nconst shrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\r\n// Right rotate for Shift in [1, 32)\r\nconst rotrSH = (h: number, l: number, s: number): number => (h >>> s) | (l << (32 - s));\r\nconst rotrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\r\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\r\nconst rotrBH = (h: number, l: number, s: number): number => (h << (64 - s)) | (l >>> (s - 32));\r\nconst rotrBL = (h: number, l: number, s: number): number => (h >>> (s - 32)) | (l << (64 - s));\r\n// Right rotate for shift===32 (just swaps l&h)\r\nconst rotr32H = (_h: number, l: number): number => l;\r\nconst rotr32L = (h: number, _l: number): number => h;\r\n// Left rotate for Shift in [1, 32)\r\nconst rotlSH = (h: number, l: number, s: number): number => (h << s) | (l >>> (32 - s));\r\nconst rotlSL = (h: number, l: number, s: number): number => (l << s) | (h >>> (32 - s));\r\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\r\nconst rotlBH = (h: number, l: number, s: number): number => (l << (s - 32)) | (h >>> (64 - s));\r\nconst rotlBL = (h: number, l: number, s: number): number => (h << (s - 32)) | (l >>> (64 - s));\r\n\r\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\r\n// simple take carry out of low bit sum by shift, we need to use division.\r\nfunction add(\r\n  Ah: number,\r\n  Al: number,\r\n  Bh: number,\r\n  Bl: number\r\n): {\r\n  h: number;\r\n  l: number;\r\n} {\r\n  const l = (Al >>> 0) + (Bl >>> 0);\r\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\r\n}\r\n// Addition with more than 2 elements\r\nconst add3L = (Al: number, Bl: number, Cl: number): number => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\r\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number): number =>\r\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\r\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number): number =>\r\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\r\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number): number =>\r\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\r\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number): number =>\r\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\r\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number): number =>\r\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\r\n\r\n// prettier-ignore\r\nexport {\r\n  add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig\r\n};\r\n// prettier-ignore\r\nconst u64: { fromBig: typeof fromBig; split: typeof split; toBig: (h: number, l: number) => bigint; shrSH: (h: number, _l: number, s: number) => number; shrSL: (h: number, l: number, s: number) => number; rotrSH: (h: number, l: number, s: number) => number; rotrSL: (h: number, l: number, s: number) => number; rotrBH: (h: number, l: number, s: number) => number; rotrBL: (h: number, l: number, s: number) => number; rotr32H: (_h: number, l: number) => number; rotr32L: (h: number, _l: number) => number; rotlSH: (h: number, l: number, s: number) => number; rotlSL: (h: number, l: number, s: number) => number; rotlBH: (h: number, l: number, s: number) => number; rotlBL: (h: number, l: number, s: number) => number; add: typeof add; add3L: (Al: number, Bl: number, Cl: number) => number; add3H: (low: number, Ah: number, Bh: number, Ch: number) => number; add4L: (Al: number, Bl: number, Cl: number, Dl: number) => number; add4H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number) => number; add5H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) => number; add5L: (Al: number, Bl: number, Cl: number, Dl: number, El: number) => number; } = {\r\n  fromBig, split, toBig,\r\n  shrSH, shrSL,\r\n  rotrSH, rotrSL, rotrBH, rotrBL,\r\n  rotr32H, rotr32L,\r\n  rotlSH, rotlSL, rotlBH, rotlBL,\r\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\r\n};\r\nexport default u64;\r\n", "/**\r\n * SHA3 (keccak) hash function, based on a new \"Sponge function\" design.\r\n * Different from older hashes, the internal state is bigger than output size.\r\n *\r\n * Check out [FIPS-202](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf),\r\n * [Website](https://keccak.team/keccak.html),\r\n * [the differences between SHA-3 and Keccak](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub).\r\n *\r\n * Check out `sha3-addons` module for cSHAKE, k12, and others.\r\n * @module\r\n */\r\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.ts';\r\n// prettier-ignore\r\nimport {\r\n  abytes, aexists, anumber, aoutput,\r\n  clean, createHasher, createXOFer, Hash,\r\n  swap32IfBE,\r\n  toBytes, u32,\r\n  type CHash, type CHashXO, type HashXOF, type Input\r\n} from './utils.ts';\r\n\r\n// No __PURE__ annotations in sha3 header:\r\n// EVERYTHING is in fact used on every export.\r\n// Various per round constants calculations\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\nconst _2n = BigInt(2);\r\nconst _7n = BigInt(7);\r\nconst _256n = BigInt(256);\r\nconst _0x71n = BigInt(0x71);\r\nconst SHA3_PI: number[] = [];\r\nconst SHA3_ROTL: number[] = [];\r\nconst _SHA3_IOTA: bigint[] = [];\r\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\r\n  // Pi\r\n  [x, y] = [y, (2 * x + 3 * y) % 5];\r\n  SHA3_PI.push(2 * (5 * y + x));\r\n  // Rotational\r\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\r\n  // Iota\r\n  let t = _0n;\r\n  for (let j = 0; j < 7; j++) {\r\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\r\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\r\n  }\r\n  _SHA3_IOTA.push(t);\r\n}\r\nconst IOTAS = split(_SHA3_IOTA, true);\r\nconst SHA3_IOTA_H = IOTAS[0];\r\nconst SHA3_IOTA_L = IOTAS[1];\r\n\r\n// Left rotation (without 0, 32, 64)\r\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\r\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\r\n\r\n/** `keccakf1600` internal function, additionally allows to adjust round count. */\r\nexport function keccakP(s: Uint32Array, rounds: number = 24): void {\r\n  const B = new Uint32Array(5 * 2);\r\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\r\n  for (let round = 24 - rounds; round < 24; round++) {\r\n    // Theta θ\r\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\r\n    for (let x = 0; x < 10; x += 2) {\r\n      const idx1 = (x + 8) % 10;\r\n      const idx0 = (x + 2) % 10;\r\n      const B0 = B[idx0];\r\n      const B1 = B[idx0 + 1];\r\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\r\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\r\n      for (let y = 0; y < 50; y += 10) {\r\n        s[x + y] ^= Th;\r\n        s[x + y + 1] ^= Tl;\r\n      }\r\n    }\r\n    // Rho (ρ) and Pi (π)\r\n    let curH = s[2];\r\n    let curL = s[3];\r\n    for (let t = 0; t < 24; t++) {\r\n      const shift = SHA3_ROTL[t];\r\n      const Th = rotlH(curH, curL, shift);\r\n      const Tl = rotlL(curH, curL, shift);\r\n      const PI = SHA3_PI[t];\r\n      curH = s[PI];\r\n      curL = s[PI + 1];\r\n      s[PI] = Th;\r\n      s[PI + 1] = Tl;\r\n    }\r\n    // Chi (χ)\r\n    for (let y = 0; y < 50; y += 10) {\r\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\r\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\r\n    }\r\n    // Iota (ι)\r\n    s[0] ^= SHA3_IOTA_H[round];\r\n    s[1] ^= SHA3_IOTA_L[round];\r\n  }\r\n  clean(B);\r\n}\r\n\r\n/** Keccak sponge function. */\r\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\r\n  protected state: Uint8Array;\r\n  protected pos = 0;\r\n  protected posOut = 0;\r\n  protected finished = false;\r\n  protected state32: Uint32Array;\r\n  protected destroyed = false;\r\n\r\n  public blockLen: number;\r\n  public suffix: number;\r\n  public outputLen: number;\r\n  protected enableXOF = false;\r\n  protected rounds: number;\r\n\r\n  // NOTE: we accept arguments in bytes instead of bits here.\r\n  constructor(\r\n    blockLen: number,\r\n    suffix: number,\r\n    outputLen: number,\r\n    enableXOF = false,\r\n    rounds: number = 24\r\n  ) {\r\n    super();\r\n    this.blockLen = blockLen;\r\n    this.suffix = suffix;\r\n    this.outputLen = outputLen;\r\n    this.enableXOF = enableXOF;\r\n    this.rounds = rounds;\r\n    // Can be passed from user as dkLen\r\n    anumber(outputLen);\r\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\r\n    // 0 < blockLen < 200\r\n    if (!(0 < blockLen && blockLen < 200))\r\n      throw new Error('only keccak-f1600 function is supported');\r\n    this.state = new Uint8Array(200);\r\n    this.state32 = u32(this.state);\r\n  }\r\n  clone(): Keccak {\r\n    return this._cloneInto();\r\n  }\r\n  protected keccak(): void {\r\n    swap32IfBE(this.state32);\r\n    keccakP(this.state32, this.rounds);\r\n    swap32IfBE(this.state32);\r\n    this.posOut = 0;\r\n    this.pos = 0;\r\n  }\r\n  update(data: Input): this {\r\n    aexists(this);\r\n    data = toBytes(data);\r\n    abytes(data);\r\n    const { blockLen, state } = this;\r\n    const len = data.length;\r\n    for (let pos = 0; pos < len; ) {\r\n      const take = Math.min(blockLen - this.pos, len - pos);\r\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\r\n      if (this.pos === blockLen) this.keccak();\r\n    }\r\n    return this;\r\n  }\r\n  protected finish(): void {\r\n    if (this.finished) return;\r\n    this.finished = true;\r\n    const { state, suffix, pos, blockLen } = this;\r\n    // Do the padding\r\n    state[pos] ^= suffix;\r\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\r\n    state[blockLen - 1] ^= 0x80;\r\n    this.keccak();\r\n  }\r\n  protected writeInto(out: Uint8Array): Uint8Array {\r\n    aexists(this, false);\r\n    abytes(out);\r\n    this.finish();\r\n    const bufferOut = this.state;\r\n    const { blockLen } = this;\r\n    for (let pos = 0, len = out.length; pos < len; ) {\r\n      if (this.posOut >= blockLen) this.keccak();\r\n      const take = Math.min(blockLen - this.posOut, len - pos);\r\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\r\n      this.posOut += take;\r\n      pos += take;\r\n    }\r\n    return out;\r\n  }\r\n  xofInto(out: Uint8Array): Uint8Array {\r\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\r\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\r\n    return this.writeInto(out);\r\n  }\r\n  xof(bytes: number): Uint8Array {\r\n    anumber(bytes);\r\n    return this.xofInto(new Uint8Array(bytes));\r\n  }\r\n  digestInto(out: Uint8Array): Uint8Array {\r\n    aoutput(out, this);\r\n    if (this.finished) throw new Error('digest() was already called');\r\n    this.writeInto(out);\r\n    this.destroy();\r\n    return out;\r\n  }\r\n  digest(): Uint8Array {\r\n    return this.digestInto(new Uint8Array(this.outputLen));\r\n  }\r\n  destroy(): void {\r\n    this.destroyed = true;\r\n    clean(this.state);\r\n  }\r\n  _cloneInto(to?: Keccak): Keccak {\r\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\r\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\r\n    to.state32.set(this.state32);\r\n    to.pos = this.pos;\r\n    to.posOut = this.posOut;\r\n    to.finished = this.finished;\r\n    to.rounds = rounds;\r\n    // Suffix can change in cSHAKE\r\n    to.suffix = suffix;\r\n    to.outputLen = outputLen;\r\n    to.enableXOF = enableXOF;\r\n    to.destroyed = this.destroyed;\r\n    return to;\r\n  }\r\n}\r\n\r\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\r\n  createHasher(() => new Keccak(blockLen, suffix, outputLen));\r\n\r\n/** SHA3-224 hash function. */\r\nexport const sha3_224: CHash = /* @__PURE__ */ (() => gen(0x06, 144, 224 / 8))();\r\n/** SHA3-256 hash function. Different from keccak-256. */\r\nexport const sha3_256: CHash = /* @__PURE__ */ (() => gen(0x06, 136, 256 / 8))();\r\n/** SHA3-384 hash function. */\r\nexport const sha3_384: CHash = /* @__PURE__ */ (() => gen(0x06, 104, 384 / 8))();\r\n/** SHA3-512 hash function. */\r\nexport const sha3_512: CHash = /* @__PURE__ */ (() => gen(0x06, 72, 512 / 8))();\r\n\r\n/** keccak-224 hash function. */\r\nexport const keccak_224: CHash = /* @__PURE__ */ (() => gen(0x01, 144, 224 / 8))();\r\n/** keccak-256 hash function. Different from SHA3-256. */\r\nexport const keccak_256: CHash = /* @__PURE__ */ (() => gen(0x01, 136, 256 / 8))();\r\n/** keccak-384 hash function. */\r\nexport const keccak_384: CHash = /* @__PURE__ */ (() => gen(0x01, 104, 384 / 8))();\r\n/** keccak-512 hash function. */\r\nexport const keccak_512: CHash = /* @__PURE__ */ (() => gen(0x01, 72, 512 / 8))();\r\n\r\nexport type ShakeOpts = { dkLen?: number };\r\n\r\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\r\n  createXOFer<HashXOF<Keccak>, ShakeOpts>(\r\n    (opts: ShakeOpts = {}) =>\r\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\r\n  );\r\n\r\n/** SHAKE128 XOF with 128-bit security. */\r\nexport const shake128: CHashXO = /* @__PURE__ */ (() => genShake(0x1f, 168, 128 / 8))();\r\n/** SHAKE256 XOF with 256-bit security. */\r\nexport const shake256: CHashXO = /* @__PURE__ */ (() => genShake(0x1f, 136, 256 / 8))();\r\n", "/**\r\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\r\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\r\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\r\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\r\n * @module\r\n */\r\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from './_md.ts';\r\nimport * as u64 from './_u64.ts';\r\nimport { type CHash, clean, createHasher, rotr } from './utils.ts';\r\n\r\n/**\r\n * Round constants:\r\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\r\n */\r\n// prettier-ignore\r\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\r\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n]);\r\n\r\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\r\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\r\nexport class SHA256 extends HashMD<SHA256> {\r\n  // We cannot use array here since array allows indexing by variable\r\n  // which means optimizer/compiler cannot use registers.\r\n  protected A: number = SHA256_IV[0] | 0;\r\n  protected B: number = SHA256_IV[1] | 0;\r\n  protected C: number = SHA256_IV[2] | 0;\r\n  protected D: number = SHA256_IV[3] | 0;\r\n  protected E: number = SHA256_IV[4] | 0;\r\n  protected F: number = SHA256_IV[5] | 0;\r\n  protected G: number = SHA256_IV[6] | 0;\r\n  protected H: number = SHA256_IV[7] | 0;\r\n\r\n  constructor(outputLen: number = 32) {\r\n    super(64, outputLen, 8, false);\r\n  }\r\n  protected get(): [number, number, number, number, number, number, number, number] {\r\n    const { A, B, C, D, E, F, G, H } = this;\r\n    return [A, B, C, D, E, F, G, H];\r\n  }\r\n  // prettier-ignore\r\n  protected set(\r\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\r\n  ): void {\r\n    this.A = A | 0;\r\n    this.B = B | 0;\r\n    this.C = C | 0;\r\n    this.D = D | 0;\r\n    this.E = E | 0;\r\n    this.F = F | 0;\r\n    this.G = G | 0;\r\n    this.H = H | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\r\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\r\n    for (let i = 16; i < 64; i++) {\r\n      const W15 = SHA256_W[i - 15];\r\n      const W2 = SHA256_W[i - 2];\r\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\r\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\r\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\r\n    }\r\n    // Compression function main loop, 64 rounds\r\n    let { A, B, C, D, E, F, G, H } = this;\r\n    for (let i = 0; i < 64; i++) {\r\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\r\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\r\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\r\n      H = G;\r\n      G = F;\r\n      F = E;\r\n      E = (D + T1) | 0;\r\n      D = C;\r\n      C = B;\r\n      B = A;\r\n      A = (T1 + T2) | 0;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    A = (A + this.A) | 0;\r\n    B = (B + this.B) | 0;\r\n    C = (C + this.C) | 0;\r\n    D = (D + this.D) | 0;\r\n    E = (E + this.E) | 0;\r\n    F = (F + this.F) | 0;\r\n    G = (G + this.G) | 0;\r\n    H = (H + this.H) | 0;\r\n    this.set(A, B, C, D, E, F, G, H);\r\n  }\r\n  protected roundClean(): void {\r\n    clean(SHA256_W);\r\n  }\r\n  destroy(): void {\r\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\r\n    clean(this.buffer);\r\n  }\r\n}\r\n\r\nexport class SHA224 extends SHA256 {\r\n  protected A: number = SHA224_IV[0] | 0;\r\n  protected B: number = SHA224_IV[1] | 0;\r\n  protected C: number = SHA224_IV[2] | 0;\r\n  protected D: number = SHA224_IV[3] | 0;\r\n  protected E: number = SHA224_IV[4] | 0;\r\n  protected F: number = SHA224_IV[5] | 0;\r\n  protected G: number = SHA224_IV[6] | 0;\r\n  protected H: number = SHA224_IV[7] | 0;\r\n  constructor() {\r\n    super(28);\r\n  }\r\n}\r\n\r\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\r\n\r\n// Round contants\r\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\r\n// prettier-ignore\r\nconst K512 = /* @__PURE__ */ (() => u64.split([\r\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\r\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\r\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\r\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\r\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\r\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\r\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\r\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\r\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\r\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\r\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\r\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\r\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\r\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\r\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\r\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\r\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\r\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\r\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\r\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\r\n].map(n => BigInt(n))))();\r\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\r\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\r\n\r\n// Reusable temporary buffers\r\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\r\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\r\n\r\nexport class SHA512 extends HashMD<SHA512> {\r\n  // We cannot use array here since array allows indexing by variable\r\n  // which means optimizer/compiler cannot use registers.\r\n  // h -- high 32 bits, l -- low 32 bits\r\n  protected Ah: number = SHA512_IV[0] | 0;\r\n  protected Al: number = SHA512_IV[1] | 0;\r\n  protected Bh: number = SHA512_IV[2] | 0;\r\n  protected Bl: number = SHA512_IV[3] | 0;\r\n  protected Ch: number = SHA512_IV[4] | 0;\r\n  protected Cl: number = SHA512_IV[5] | 0;\r\n  protected Dh: number = SHA512_IV[6] | 0;\r\n  protected Dl: number = SHA512_IV[7] | 0;\r\n  protected Eh: number = SHA512_IV[8] | 0;\r\n  protected El: number = SHA512_IV[9] | 0;\r\n  protected Fh: number = SHA512_IV[10] | 0;\r\n  protected Fl: number = SHA512_IV[11] | 0;\r\n  protected Gh: number = SHA512_IV[12] | 0;\r\n  protected Gl: number = SHA512_IV[13] | 0;\r\n  protected Hh: number = SHA512_IV[14] | 0;\r\n  protected Hl: number = SHA512_IV[15] | 0;\r\n\r\n  constructor(outputLen: number = 64) {\r\n    super(128, outputLen, 16, false);\r\n  }\r\n  // prettier-ignore\r\n  protected get(): [\r\n    number, number, number, number, number, number, number, number,\r\n    number, number, number, number, number, number, number, number\r\n  ] {\r\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\r\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\r\n  }\r\n  // prettier-ignore\r\n  protected set(\r\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\r\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\r\n  ): void {\r\n    this.Ah = Ah | 0;\r\n    this.Al = Al | 0;\r\n    this.Bh = Bh | 0;\r\n    this.Bl = Bl | 0;\r\n    this.Ch = Ch | 0;\r\n    this.Cl = Cl | 0;\r\n    this.Dh = Dh | 0;\r\n    this.Dl = Dl | 0;\r\n    this.Eh = Eh | 0;\r\n    this.El = El | 0;\r\n    this.Fh = Fh | 0;\r\n    this.Fl = Fl | 0;\r\n    this.Gh = Gh | 0;\r\n    this.Gl = Gl | 0;\r\n    this.Hh = Hh | 0;\r\n    this.Hl = Hl | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\r\n    for (let i = 0; i < 16; i++, offset += 4) {\r\n      SHA512_W_H[i] = view.getUint32(offset);\r\n      SHA512_W_L[i] = view.getUint32((offset += 4));\r\n    }\r\n    for (let i = 16; i < 80; i++) {\r\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\r\n      const W15h = SHA512_W_H[i - 15] | 0;\r\n      const W15l = SHA512_W_L[i - 15] | 0;\r\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\r\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\r\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\r\n      const W2h = SHA512_W_H[i - 2] | 0;\r\n      const W2l = SHA512_W_L[i - 2] | 0;\r\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\r\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\r\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\r\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\r\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\r\n      SHA512_W_H[i] = SUMh | 0;\r\n      SHA512_W_L[i] = SUMl | 0;\r\n    }\r\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\r\n    // Compression function main loop, 80 rounds\r\n    for (let i = 0; i < 80; i++) {\r\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\r\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\r\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\r\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\r\n      const CHIl = (El & Fl) ^ (~El & Gl);\r\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\r\n      // prettier-ignore\r\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\r\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\r\n      const T1l = T1ll | 0;\r\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\r\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\r\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\r\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\r\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\r\n      Hh = Gh | 0;\r\n      Hl = Gl | 0;\r\n      Gh = Fh | 0;\r\n      Gl = Fl | 0;\r\n      Fh = Eh | 0;\r\n      Fl = El | 0;\r\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\r\n      Dh = Ch | 0;\r\n      Dl = Cl | 0;\r\n      Ch = Bh | 0;\r\n      Cl = Bl | 0;\r\n      Bh = Ah | 0;\r\n      Bl = Al | 0;\r\n      const All = u64.add3L(T1l, sigma0l, MAJl);\r\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\r\n      Al = All | 0;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\r\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\r\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\r\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\r\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\r\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\r\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\r\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\r\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\r\n  }\r\n  protected roundClean(): void {\r\n    clean(SHA512_W_H, SHA512_W_L);\r\n  }\r\n  destroy(): void {\r\n    clean(this.buffer);\r\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n  }\r\n}\r\n\r\nexport class SHA384 extends SHA512 {\r\n  protected Ah: number = SHA384_IV[0] | 0;\r\n  protected Al: number = SHA384_IV[1] | 0;\r\n  protected Bh: number = SHA384_IV[2] | 0;\r\n  protected Bl: number = SHA384_IV[3] | 0;\r\n  protected Ch: number = SHA384_IV[4] | 0;\r\n  protected Cl: number = SHA384_IV[5] | 0;\r\n  protected Dh: number = SHA384_IV[6] | 0;\r\n  protected Dl: number = SHA384_IV[7] | 0;\r\n  protected Eh: number = SHA384_IV[8] | 0;\r\n  protected El: number = SHA384_IV[9] | 0;\r\n  protected Fh: number = SHA384_IV[10] | 0;\r\n  protected Fl: number = SHA384_IV[11] | 0;\r\n  protected Gh: number = SHA384_IV[12] | 0;\r\n  protected Gl: number = SHA384_IV[13] | 0;\r\n  protected Hh: number = SHA384_IV[14] | 0;\r\n  protected Hl: number = SHA384_IV[15] | 0;\r\n\r\n  constructor() {\r\n    super(48);\r\n  }\r\n}\r\n\r\n/**\r\n * Truncated SHA512/256 and SHA512/224.\r\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\r\n * Then t hashes string to produce result IV.\r\n * See `test/misc/sha2-gen-iv.js`.\r\n */\r\n\r\n/** SHA512/224 IV */\r\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\r\n  0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\r\n  0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\r\n]);\r\n\r\n/** SHA512/256 IV */\r\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\r\n  0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\r\n  0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\r\n]);\r\n\r\nexport class SHA512_224 extends SHA512 {\r\n  protected Ah: number = T224_IV[0] | 0;\r\n  protected Al: number = T224_IV[1] | 0;\r\n  protected Bh: number = T224_IV[2] | 0;\r\n  protected Bl: number = T224_IV[3] | 0;\r\n  protected Ch: number = T224_IV[4] | 0;\r\n  protected Cl: number = T224_IV[5] | 0;\r\n  protected Dh: number = T224_IV[6] | 0;\r\n  protected Dl: number = T224_IV[7] | 0;\r\n  protected Eh: number = T224_IV[8] | 0;\r\n  protected El: number = T224_IV[9] | 0;\r\n  protected Fh: number = T224_IV[10] | 0;\r\n  protected Fl: number = T224_IV[11] | 0;\r\n  protected Gh: number = T224_IV[12] | 0;\r\n  protected Gl: number = T224_IV[13] | 0;\r\n  protected Hh: number = T224_IV[14] | 0;\r\n  protected Hl: number = T224_IV[15] | 0;\r\n\r\n  constructor() {\r\n    super(28);\r\n  }\r\n}\r\n\r\nexport class SHA512_256 extends SHA512 {\r\n  protected Ah: number = T256_IV[0] | 0;\r\n  protected Al: number = T256_IV[1] | 0;\r\n  protected Bh: number = T256_IV[2] | 0;\r\n  protected Bl: number = T256_IV[3] | 0;\r\n  protected Ch: number = T256_IV[4] | 0;\r\n  protected Cl: number = T256_IV[5] | 0;\r\n  protected Dh: number = T256_IV[6] | 0;\r\n  protected Dl: number = T256_IV[7] | 0;\r\n  protected Eh: number = T256_IV[8] | 0;\r\n  protected El: number = T256_IV[9] | 0;\r\n  protected Fh: number = T256_IV[10] | 0;\r\n  protected Fl: number = T256_IV[11] | 0;\r\n  protected Gh: number = T256_IV[12] | 0;\r\n  protected Gl: number = T256_IV[13] | 0;\r\n  protected Hh: number = T256_IV[14] | 0;\r\n  protected Hl: number = T256_IV[15] | 0;\r\n\r\n  constructor() {\r\n    super(32);\r\n  }\r\n}\r\n\r\n/**\r\n * SHA2-256 hash function from RFC 4634.\r\n *\r\n * It is the fastest JS hash, even faster than Blake3.\r\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\r\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\r\n */\r\nexport const sha256: CHash = /* @__PURE__ */ createHasher(() => new SHA256());\r\n/** SHA2-224 hash function from RFC 4634 */\r\nexport const sha224: CHash = /* @__PURE__ */ createHasher(() => new SHA224());\r\n\r\n/** SHA2-512 hash function from RFC 4634. */\r\nexport const sha512: CHash = /* @__PURE__ */ createHasher(() => new SHA512());\r\n/** SHA2-384 hash function from RFC 4634. */\r\nexport const sha384: CHash = /* @__PURE__ */ createHasher(() => new SHA384());\r\n\r\n/**\r\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\r\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\r\n */\r\nexport const sha512_256: CHash = /* @__PURE__ */ createHasher(() => new SHA512_256());\r\n/**\r\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\r\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\r\n */\r\nexport const sha512_224: CHash = /* @__PURE__ */ createHasher(() => new SHA512_224());\r\n", "/**\r\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\r\n *\r\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\r\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\r\n *\r\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\r\n * @module\r\n * @deprecated\r\n */\r\nimport {\r\n  SHA224 as SHA224n,\r\n  sha224 as sha224n,\r\n  SHA256 as SHA256n,\r\n  sha256 as sha256n,\r\n} from './sha2.ts';\r\n/** @deprecated Use import from `noble/hashes/sha2` module */\r\nexport const SHA256: typeof SHA256n = SHA256n;\r\n/** @deprecated Use import from `noble/hashes/sha2` module */\r\nexport const sha256: typeof sha256n = sha256n;\r\n/** @deprecated Use import from `noble/hashes/sha2` module */\r\nexport const SHA224: typeof SHA224n = SHA224n;\r\n/** @deprecated Use import from `noble/hashes/sha2` module */\r\nexport const sha224: typeof sha224n = sha224n;\r\n", "import { ripemd160 as noble_ripemd160 } from '@noble/hashes/ripemd160'\r\nimport { keccak_256 as noble_keccak256 } from '@noble/hashes/sha3'\r\nimport { sha256 as noble_sha256 } from '@noble/hashes/sha256'\r\nimport * as Bytes from './Bytes.js'\r\nimport type * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\n\r\n/**\r\n * Calculates the [Keccak256](https://en.wikipedia.org/wiki/SHA-3) hash of a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\r\n *\r\n * This function is a re-export of `keccak_256` from [`@noble/hashes`](https://github.com/paulmillr/noble-hashes), an audited & minimal JS hashing library.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hash } from 'ox'\r\n *\r\n * Hash.keccak256('0xdeadbeef')\r\n * // @log: '0xd4fd4e189132273036449fc9e11198c739161b4c0116a9a2dccdfa1c492006f1'\r\n * ```\r\n *\r\n * @example\r\n * ### Calculate Hash of a String\r\n *\r\n * ```ts twoslash\r\n * import { Hash, Hex } from 'ox'\r\n *\r\n * Hash.keccak256(Hex.fromString('hello world'))\r\n * // @log: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0'\r\n * ```\r\n *\r\n * @example\r\n * ### Configure Return Type\r\n *\r\n * ```ts twoslash\r\n * import { Hash } from 'ox'\r\n *\r\n * Hash.keccak256('0xdeadbeef', { as: 'Bytes' })\r\n * // @log: Uint8Array [...]\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\r\n * @param options - Options.\r\n * @returns Keccak256 hash.\r\n */\r\nexport function keccak256<\r\n  value extends Hex.Hex | Bytes.Bytes,\r\n  as extends 'Hex' | 'Bytes' =\r\n    | (value extends Hex.Hex ? 'Hex' : never)\r\n    | (value extends Bytes.Bytes ? 'Bytes' : never),\r\n>(\r\n  value: value | Hex.Hex | Bytes.Bytes,\r\n  options: keccak256.Options<as> = {},\r\n): keccak256.ReturnType<as> {\r\n  const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options\r\n  const bytes = noble_keccak256(Bytes.from(value))\r\n  if (as === 'Bytes') return bytes as never\r\n  return Hex.fromBytes(bytes) as never\r\n}\r\n\r\nexport declare namespace keccak256 {\r\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> = {\r\n    /** The return type. @default 'Hex' */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\r\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\r\n    | (as extends 'Hex' ? Hex.Hex : never)\r\n\r\n  type ErrorType =\r\n    | Bytes.from.ErrorType\r\n    | Hex.fromBytes.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Calculates the [Ripemd160](https://en.wikipedia.org/wiki/RIPEMD) hash of a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\r\n *\r\n * This function is a re-export of `ripemd160` from [`@noble/hashes`](https://github.com/paulmillr/noble-hashes), an audited & minimal JS hashing library.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hash } from 'ox'\r\n *\r\n * Hash.ripemd160('0xdeadbeef')\r\n * // '0x226821c2f5423e11fe9af68bd285c249db2e4b5a'\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\r\n * @param options - Options.\r\n * @returns Ripemd160 hash.\r\n */\r\nexport function ripemd160<\r\n  value extends Hex.Hex | Bytes.Bytes,\r\n  as extends 'Hex' | 'Bytes' =\r\n    | (value extends Hex.Hex ? 'Hex' : never)\r\n    | (value extends Bytes.Bytes ? 'Bytes' : never),\r\n>(\r\n  value: value | Hex.Hex | Bytes.Bytes,\r\n  options: ripemd160.Options<as> = {},\r\n): ripemd160.ReturnType<as> {\r\n  const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options\r\n  const bytes = noble_ripemd160(Bytes.from(value))\r\n  if (as === 'Bytes') return bytes as never\r\n  return Hex.fromBytes(bytes) as never\r\n}\r\n\r\nexport declare namespace ripemd160 {\r\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> = {\r\n    /** The return type. @default 'Hex' */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\r\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\r\n    | (as extends 'Hex' ? Hex.Hex : never)\r\n\r\n  type ErrorType =\r\n    | Bytes.from.ErrorType\r\n    | Hex.fromBytes.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Calculates the [Sha256](https://en.wikipedia.org/wiki/SHA-256) hash of a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\r\n *\r\n * This function is a re-export of `sha256` from [`@noble/hashes`](https://github.com/paulmillr/noble-hashes), an audited & minimal JS hashing library.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hash } from 'ox'\r\n *\r\n * Hash.sha256('0xdeadbeef')\r\n * // '0x5f78c33274e43fa9de5659265c1d917e25c03722dcb0b8d27db8d5feaa813953'\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\r\n * @param options - Options.\r\n * @returns Sha256 hash.\r\n */\r\nexport function sha256<\r\n  value extends Hex.Hex | Bytes.Bytes,\r\n  as extends 'Hex' | 'Bytes' =\r\n    | (value extends Hex.Hex ? 'Hex' : never)\r\n    | (value extends Bytes.Bytes ? 'Bytes' : never),\r\n>(\r\n  value: value | Hex.Hex | Bytes.Bytes,\r\n  options: sha256.Options<as> = {},\r\n): sha256.ReturnType<as> {\r\n  const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options\r\n  const bytes = noble_sha256(Bytes.from(value))\r\n  if (as === 'Bytes') return bytes as never\r\n  return Hex.fromBytes(bytes) as never\r\n}\r\n\r\nexport declare namespace sha256 {\r\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\r\n    /** The return type. @default 'Hex' */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex'> =\r\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\r\n    | (as extends 'Hex' ? Hex.Hex : never)\r\n\r\n  type ErrorType =\r\n    | Bytes.from.ErrorType\r\n    | Hex.fromBytes.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Checks if a string is a valid hash value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hash } from 'ox'\r\n *\r\n * Hash.validate('0x')\r\n * // @log: false\r\n *\r\n * Hash.validate('0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0')\r\n * // @log: true\r\n * ```\r\n *\r\n * @param value - Value to check.\r\n * @returns Whether the value is a valid hash.\r\n */\r\nexport function validate(value: string): value is Hex.Hex {\r\n  return Hex.validate(value) && Hex.size(value) === 32\r\n}\r\n\r\nexport declare namespace validate {\r\n  type ErrorType =\r\n    | Hex.validate.ErrorType\r\n    | Hex.size.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n", "/**\r\n * NIST secp256r1 aka p256.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { type H2CMethod } from './abstract/hash-to-curve.ts';\r\nimport { p256_hasher, p256 as p256n } from './nist.ts';\r\n/** @deprecated use `import { p256 } from '@noble/curves/nist.js';` */\r\nexport const p256: typeof p256n = p256n;\r\n/** @deprecated use `import { p256 } from '@noble/curves/nist.js';` */\r\nexport const secp256r1: typeof p256n = p256n;\r\n/** @deprecated use `import { p256_hasher } from '@noble/curves/nist.js';` */\r\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() => p256_hasher.hashToCurve)();\r\n/** @deprecated use `import { p256_hasher } from '@noble/curves/nist.js';` */\r\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() => p256_hasher.encodeToCurve)();\r\n", "/**\r\n * Internal module for NIST P256, P384, P521 curves.\r\n * Do not use for now.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { sha256, sha384, sha512 } from '@noble/hashes/sha2.js';\r\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\r\nimport { createHasher, type H2CHasher } from './abstract/hash-to-curve.ts';\r\nimport { Field } from './abstract/modular.ts';\r\nimport {\r\n  mapToCurveSimpleSWU,\r\n  type WeierstrassOpts,\r\n  type WeierstrassPointCons,\r\n} from './abstract/weierstrass.ts';\r\n\r\n// p = 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n - 1n\r\n// a = Fp256.create(BigInt('-3'));\r\nconst p256_CURVE: WeierstrassOpts<bigint> = {\r\n  p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\r\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\r\n  h: BigInt(1),\r\n  a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\r\n  b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\r\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\r\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\r\n};\r\n\r\n// p = 2n**384n - 2n**128n - 2n**96n + 2n**32n - 1n\r\nconst p384_CURVE: WeierstrassOpts<bigint> = {\r\n  p: BigInt(\r\n    '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff'\r\n  ),\r\n  n: BigInt(\r\n    '0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973'\r\n  ),\r\n  h: BigInt(1),\r\n  a: BigInt(\r\n    '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc'\r\n  ),\r\n  b: BigInt(\r\n    '0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef'\r\n  ),\r\n  Gx: BigInt(\r\n    '0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7'\r\n  ),\r\n  Gy: BigInt(\r\n    '0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f'\r\n  ),\r\n};\r\n\r\n// p = 2n**521n - 1n\r\nconst p521_CURVE: WeierstrassOpts<bigint> = {\r\n  p: BigInt(\r\n    '0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\r\n  ),\r\n  n: BigInt(\r\n    '0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409'\r\n  ),\r\n  h: BigInt(1),\r\n  a: BigInt(\r\n    '0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc'\r\n  ),\r\n  b: BigInt(\r\n    '0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00'\r\n  ),\r\n  Gx: BigInt(\r\n    '0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66'\r\n  ),\r\n  Gy: BigInt(\r\n    '0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650'\r\n  ),\r\n};\r\n\r\nconst Fp256 = Field(p256_CURVE.p);\r\nconst Fp384 = Field(p384_CURVE.p);\r\nconst Fp521 = Field(p521_CURVE.p);\r\ntype SwuOpts = {\r\n  A: bigint;\r\n  B: bigint;\r\n  Z: bigint;\r\n};\r\nfunction createSWU(Point: WeierstrassPointCons<bigint>, opts: SwuOpts) {\r\n  const map = mapToCurveSimpleSWU(Point.Fp, opts);\r\n  return (scalars: bigint[]) => map(scalars[0]);\r\n}\r\n\r\n/** NIST P256 (aka secp256r1, prime256v1) curve, ECDSA and ECDH methods. */\r\nexport const p256: CurveFnWithCreate = createCurve(\r\n  { ...p256_CURVE, Fp: Fp256, lowS: false },\r\n  sha256\r\n);\r\n/** Hashing / encoding to p256 points / field. RFC 9380 methods. */\r\nexport const p256_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() => {\r\n  return createHasher(\r\n    p256.Point,\r\n    createSWU(p256.Point, {\r\n      A: p256_CURVE.a,\r\n      B: p256_CURVE.b,\r\n      Z: p256.Point.Fp.create(BigInt('-10')),\r\n    }),\r\n    {\r\n      DST: 'P256_XMD:SHA-256_SSWU_RO_',\r\n      encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\r\n      p: p256_CURVE.p,\r\n      m: 1,\r\n      k: 128,\r\n      expand: 'xmd',\r\n      hash: sha256,\r\n    }\r\n  );\r\n})();\r\n\r\n// export const p256_oprf: OPRF = createORPF({\r\n//   name: 'P256-SHA256',\r\n//   Point: p256.Point,\r\n//   hash: sha256,\r\n//   hashToGroup: p256_hasher.hashToCurve,\r\n//   hashToScalar: p256_hasher.hashToScalar,\r\n// });\r\n\r\n/** NIST P384 (aka secp384r1) curve, ECDSA and ECDH methods. */\r\nexport const p384: CurveFnWithCreate = createCurve(\r\n  { ...p384_CURVE, Fp: Fp384, lowS: false },\r\n  sha384\r\n);\r\n/** Hashing / encoding to p384 points / field. RFC 9380 methods. */\r\nexport const p384_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() => {\r\n  return createHasher(\r\n    p384.Point,\r\n    createSWU(p384.Point, {\r\n      A: p384_CURVE.a,\r\n      B: p384_CURVE.b,\r\n      Z: p384.Point.Fp.create(BigInt('-12')),\r\n    }),\r\n    {\r\n      DST: 'P384_XMD:SHA-384_SSWU_RO_',\r\n      encodeDST: 'P384_XMD:SHA-384_SSWU_NU_',\r\n      p: p384_CURVE.p,\r\n      m: 1,\r\n      k: 192,\r\n      expand: 'xmd',\r\n      hash: sha384,\r\n    }\r\n  );\r\n})();\r\n\r\n// export const p384_oprf: OPRF = createORPF({\r\n//   name: 'P384-SHA384',\r\n//   Point: p384.Point,\r\n//   hash: sha384,\r\n//   hashToGroup: p384_hasher.hashToCurve,\r\n//   hashToScalar: p384_hasher.hashToScalar,\r\n// });\r\n\r\n// const Fn521 = Field(p521_CURVE.n, { allowedScalarLengths: [65, 66] });\r\n/** NIST P521 (aka secp521r1) curve, ECDSA and ECDH methods. */\r\nexport const p521: CurveFnWithCreate = createCurve(\r\n  { ...p521_CURVE, Fp: Fp521, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] },\r\n  sha512\r\n);\r\n\r\n/** Hashing / encoding to p521 points / field. RFC 9380 methods. */\r\nexport const p521_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() => {\r\n  return createHasher(\r\n    p521.Point,\r\n    createSWU(p521.Point, {\r\n      A: p521_CURVE.a,\r\n      B: p521_CURVE.b,\r\n      Z: p521.Point.Fp.create(BigInt('-4')),\r\n    }),\r\n    {\r\n      DST: 'P521_XMD:SHA-512_SSWU_RO_',\r\n      encodeDST: 'P521_XMD:SHA-512_SSWU_NU_',\r\n      p: p521_CURVE.p,\r\n      m: 1,\r\n      k: 256,\r\n      expand: 'xmd',\r\n      hash: sha512,\r\n    }\r\n  );\r\n})();\r\n\r\n// export const p521_oprf: OPRF = createORPF({\r\n//   name: 'P521-SHA512',\r\n//   Point: p521.Point,\r\n//   hash: sha512,\r\n//   hashToGroup: p521_hasher.hashToCurve,\r\n//   hashToScalar: p521_hasher.hashToScalar, // produces L=98 just like in RFC\r\n// });\r\n", "import { secp256r1 } from '@noble/curves/p256'\r\nimport * as Bytes from './Bytes.js'\r\nimport type * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\nimport * as PublicKey from './PublicKey.js'\r\nimport type * as Signature from './Signature.js'\r\nimport * as Entropy from './internal/entropy.js'\r\n\r\n/** Re-export of noble/curves P256 utilities. */\r\nexport const noble = secp256r1\r\n\r\n/**\r\n * Computes the P256 ECDSA public key from a provided private key.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { P256 } from 'ox'\r\n *\r\n * const publicKey = P256.getPublicKey({ privateKey: '0x...' })\r\n * ```\r\n *\r\n * @param options - The options to compute the public key.\r\n * @returns The computed public key.\r\n */\r\nexport function getPublicKey(\r\n  options: getPublicKey.Options,\r\n): PublicKey.PublicKey {\r\n  const { privateKey } = options\r\n  const point = secp256r1.ProjectivePoint.fromPrivateKey(\r\n    typeof privateKey === 'string'\r\n      ? privateKey.slice(2)\r\n      : Hex.fromBytes(privateKey).slice(2),\r\n  )\r\n  return PublicKey.from(point)\r\n}\r\n\r\nexport declare namespace getPublicKey {\r\n  type Options = {\r\n    /**\r\n     * Private key to compute the public key from.\r\n     */\r\n    privateKey: Hex.Hex | Bytes.Bytes\r\n  }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Generates a random P256 ECDSA private key.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { P256 } from 'ox'\r\n *\r\n * const privateKey = P256.randomPrivateKey()\r\n * ```\r\n *\r\n * @param options - The options to generate the private key.\r\n * @returns The generated private key.\r\n */\r\nexport function randomPrivateKey<as extends 'Hex' | 'Bytes' = 'Hex'>(\r\n  options: randomPrivateKey.Options<as> = {},\r\n): randomPrivateKey.ReturnType<as> {\r\n  const { as = 'Hex' } = options\r\n  const bytes = secp256r1.utils.randomPrivateKey()\r\n  if (as === 'Hex') return Hex.fromBytes(bytes) as never\r\n  return bytes as never\r\n}\r\n\r\nexport declare namespace randomPrivateKey {\r\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\r\n    /**\r\n     * Format of the returned private key.\r\n     * @default 'Hex'\r\n     */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes'> =\r\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\r\n    | (as extends 'Hex' ? Hex.Hex : never)\r\n\r\n  type ErrorType = Hex.fromBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Recovers the signing public key from the signed payload and signature.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { P256 } from 'ox'\r\n *\r\n * const signature = P256.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\r\n *\r\n * const publicKey = P256.recoverPublicKey({ // [!code focus]\r\n *   payload: '0xdeadbeef', // [!code focus]\r\n *   signature, // [!code focus]\r\n * }) // [!code focus]\r\n * ```\r\n *\r\n * @param options - The recovery options.\r\n * @returns The recovered public key.\r\n */\r\nexport function recoverPublicKey(\r\n  options: recoverPublicKey.Options,\r\n): PublicKey.PublicKey {\r\n  const { payload, signature } = options\r\n  const { r, s, yParity } = signature\r\n  const signature_ = new secp256r1.Signature(\r\n    BigInt(r),\r\n    BigInt(s),\r\n  ).addRecoveryBit(yParity)\r\n  const payload_ =\r\n    payload instanceof Uint8Array ? Hex.fromBytes(payload) : payload\r\n  const point = signature_.recoverPublicKey(payload_.substring(2))\r\n  return PublicKey.from(point)\r\n}\r\n\r\nexport declare namespace recoverPublicKey {\r\n  type Options = {\r\n    /** Payload that was signed. */\r\n    payload: Hex.Hex | Bytes.Bytes\r\n    /** Signature of the payload. */\r\n    signature: Signature.Signature\r\n  }\r\n\r\n  type ErrorType =\r\n    | PublicKey.from.ErrorType\r\n    | Hex.fromBytes.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Signs the payload with the provided private key and returns a P256 signature.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { P256 } from 'ox'\r\n *\r\n * const signature = P256.sign({ // [!code focus]\r\n *   payload: '0xdeadbeef', // [!code focus]\r\n *   privateKey: '0x...' // [!code focus]\r\n * }) // [!code focus]\r\n * ```\r\n *\r\n * @param options - The signing options.\r\n * @returns The ECDSA {@link ox#Signature.Signature}.\r\n */\r\nexport function sign(options: sign.Options): Signature.Signature {\r\n  const {\r\n    extraEntropy = Entropy.extraEntropy,\r\n    hash,\r\n    payload,\r\n    privateKey,\r\n  } = options\r\n  const { r, s, recovery } = secp256r1.sign(\r\n    payload instanceof Uint8Array ? payload : Bytes.fromHex(payload),\r\n    privateKey instanceof Uint8Array ? privateKey : Bytes.fromHex(privateKey),\r\n    {\r\n      extraEntropy:\r\n        typeof extraEntropy === 'boolean'\r\n          ? extraEntropy\r\n          : Hex.from(extraEntropy).slice(2),\r\n      lowS: true,\r\n      ...(hash ? { prehash: true } : {}),\r\n    },\r\n  )\r\n  return {\r\n    r,\r\n    s,\r\n    yParity: recovery,\r\n  }\r\n}\r\n\r\nexport declare namespace sign {\r\n  type Options = {\r\n    /**\r\n     * Extra entropy to add to the signing process. Setting to `false` will disable it.\r\n     * @default true\r\n     */\r\n    extraEntropy?: boolean | Hex.Hex | Bytes.Bytes | undefined\r\n    /**\r\n     * If set to `true`, the payload will be hashed (sha256) before being signed.\r\n     */\r\n    hash?: boolean | undefined\r\n    /**\r\n     * Payload to sign.\r\n     */\r\n    payload: Hex.Hex | Bytes.Bytes\r\n    /**\r\n     * ECDSA private key.\r\n     */\r\n    privateKey: Hex.Hex | Bytes.Bytes\r\n  }\r\n\r\n  type ErrorType = Bytes.fromHex.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Verifies a payload was signed by the provided public key.\r\n *\r\n * @example\r\n *\r\n * ```ts twoslash\r\n * import { P256 } from 'ox'\r\n *\r\n * const privateKey = P256.randomPrivateKey()\r\n * const publicKey = P256.getPublicKey({ privateKey })\r\n * const signature = P256.sign({ payload: '0xdeadbeef', privateKey })\r\n *\r\n * const verified = P256.verify({ // [!code focus]\r\n *   publicKey, // [!code focus]\r\n *   payload: '0xdeadbeef', // [!code focus]\r\n *   signature, // [!code focus]\r\n * }) // [!code focus]\r\n * ```\r\n *\r\n * @param options - The verification options.\r\n * @returns Whether the payload was signed by the provided public key.\r\n */\r\nexport function verify(options: verify.Options): boolean {\r\n  const { hash, payload, publicKey, signature } = options\r\n  return secp256r1.verify(\r\n    signature,\r\n    payload instanceof Uint8Array ? payload : Bytes.fromHex(payload),\r\n    PublicKey.toHex(publicKey).substring(2),\r\n    ...(hash ? [{ prehash: true, lowS: true }] : []),\r\n  )\r\n}\r\n\r\nexport declare namespace verify {\r\n  type Options = {\r\n    /** If set to `true`, the payload will be hashed (sha256) before being verified. */\r\n    hash?: boolean | undefined\r\n    /** Payload that was signed. */\r\n    payload: Hex.Hex | Bytes.Bytes\r\n    /** Public key that signed the payload. */\r\n    publicKey: PublicKey.PublicKey<boolean>\r\n    /** Signature of the payload. */\r\n    signature: Signature.Signature<boolean>\r\n  }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n", "import { p256 } from '@noble/curves/p256'\r\nimport type * as Errors from '../Errors.js'\r\nimport * as Hex from '../Hex.js'\r\nimport * as PublicKey from '../PublicKey.js'\r\nimport { CredentialCreationFailedError } from '../WebAuthnP256.js'\r\n\r\n/** @internal */\r\nexport type AttestationConveyancePreference =\r\n  | 'direct'\r\n  | 'enterprise'\r\n  | 'indirect'\r\n  | 'none'\r\n\r\n/** @internal */\r\nexport type AuthenticatorAttachment = 'cross-platform' | 'platform'\r\n\r\n/** @internal */\r\nexport type AuthenticatorTransport =\r\n  | 'ble'\r\n  | 'hybrid'\r\n  | 'internal'\r\n  | 'nfc'\r\n  | 'usb'\r\n\r\n/** @internal */\r\nexport type COSEAlgorithmIdentifier = number\r\n\r\n/** @internal */\r\nexport type CredentialMediationRequirement =\r\n  | 'conditional'\r\n  | 'optional'\r\n  | 'required'\r\n  | 'silent'\r\n\r\n/** @internal */\r\nexport type PublicKeyCredentialType = 'public-key'\r\n\r\n/** @internal */\r\nexport type ResidentKeyRequirement = 'discouraged' | 'preferred' | 'required'\r\n\r\n/** @internal */\r\nexport type UserVerificationRequirement =\r\n  | 'discouraged'\r\n  | 'preferred'\r\n  | 'required'\r\n\r\n/** @internal */\r\nexport type LargeBlobSupport = {\r\n  support: 'required' | 'preferred'\r\n}\r\n\r\n/** @internal */\r\nexport type BufferSource = ArrayBufferView | ArrayBuffer\r\n\r\n/** @internal */\r\nexport type PrfExtension = Record<'eval', Record<'first', Uint8Array>>\r\n\r\n/** @internal */\r\nexport interface AuthenticationExtensionsClientInputs {\r\n  appid?: string\r\n  credProps?: boolean\r\n  hmacCreateSecret?: boolean\r\n  minPinLength?: boolean\r\n  prf?: PrfExtension\r\n  largeBlob?: LargeBlobSupport\r\n}\r\n\r\n/** @internal */\r\nexport interface AuthenticatorSelectionCriteria {\r\n  authenticatorAttachment?: AuthenticatorAttachment\r\n  requireResidentKey?: boolean\r\n  residentKey?: ResidentKeyRequirement\r\n  userVerification?: UserVerificationRequirement\r\n}\r\n\r\n/** @internal */\r\nexport interface Credential {\r\n  readonly id: string\r\n  readonly type: string\r\n}\r\n\r\n/** @internal */\r\nexport interface CredentialCreationOptions {\r\n  publicKey?: PublicKeyCredentialCreationOptions\r\n  signal?: AbortSignal\r\n}\r\n\r\n/** @internal */\r\nexport interface CredentialRequestOptions {\r\n  mediation?: CredentialMediationRequirement\r\n  publicKey?: PublicKeyCredentialRequestOptions\r\n  signal?: AbortSignal\r\n}\r\n\r\n/** @internal */\r\nexport interface PublicKeyCredential extends Credential {\r\n  readonly authenticatorAttachment: string | null\r\n  readonly rawId: ArrayBuffer\r\n  readonly response: AuthenticatorResponse\r\n  getClientExtensionResults(): AuthenticationExtensionsClientOutputs\r\n}\r\n\r\n/** @internal */\r\nexport interface PublicKeyCredentialCreationOptions {\r\n  attestation?: AttestationConveyancePreference\r\n  authenticatorSelection?: AuthenticatorSelectionCriteria\r\n  challenge: BufferSource\r\n  excludeCredentials?: PublicKeyCredentialDescriptor[]\r\n  extensions?: AuthenticationExtensionsClientInputs\r\n  pubKeyCredParams: PublicKeyCredentialParameters[]\r\n  rp: PublicKeyCredentialRpEntity\r\n  timeout?: number\r\n  user: PublicKeyCredentialUserEntity\r\n}\r\n\r\n/** @internal */\r\nexport interface PublicKeyCredentialDescriptor {\r\n  id: BufferSource\r\n  transports?: AuthenticatorTransport[]\r\n  type: PublicKeyCredentialType\r\n}\r\n\r\n/** @internal */\r\nexport interface PublicKeyCredentialEntity {\r\n  name: string\r\n}\r\n\r\n/** @internal */\r\nexport interface PublicKeyCredentialParameters {\r\n  alg: COSEAlgorithmIdentifier\r\n  type: PublicKeyCredentialType\r\n}\r\n\r\n/** @internal */\r\nexport interface PublicKeyCredentialRequestOptions {\r\n  allowCredentials?: PublicKeyCredentialDescriptor[]\r\n  challenge: BufferSource\r\n  extensions?: AuthenticationExtensionsClientInputs\r\n  rpId?: string\r\n  timeout?: number\r\n  userVerification?: UserVerificationRequirement\r\n}\r\n\r\n/** @internal */\r\nexport interface PublicKeyCredentialRpEntity extends PublicKeyCredentialEntity {\r\n  id?: string\r\n}\r\n\r\n/** @internal */\r\nexport interface PublicKeyCredentialUserEntity\r\n  extends PublicKeyCredentialEntity {\r\n  displayName: string\r\n  id: BufferSource\r\n}\r\n\r\n/**\r\n * Parses an ASN.1 signature into a r and s value.\r\n *\r\n * @internal\r\n */\r\nexport function parseAsn1Signature(bytes: Uint8Array) {\r\n  const r_start = bytes[4] === 0 ? 5 : 4\r\n  const r_end = r_start + 32\r\n  const s_start = bytes[r_end + 2] === 0 ? r_end + 3 : r_end + 2\r\n\r\n  const r = BigInt(Hex.fromBytes(bytes.slice(r_start, r_end)))\r\n  const s = BigInt(Hex.fromBytes(bytes.slice(s_start)))\r\n\r\n  return {\r\n    r,\r\n    s: s > p256.CURVE.n / 2n ? p256.CURVE.n - s : s,\r\n  }\r\n}\r\n\r\n/**\r\n * Parses a public key into x and y coordinates from the public key\r\n * defined on the credential.\r\n *\r\n * @internal\r\n */\r\nexport async function parseCredentialPublicKey(\r\n  response: AuthenticatorAttestationResponse,\r\n): Promise<PublicKey.PublicKey> {\r\n  try {\r\n    const publicKeyBuffer = response.getPublicKey()\r\n    if (!publicKeyBuffer) throw new CredentialCreationFailedError()\r\n\r\n    // Converting `publicKeyBuffer` throws when credential is created by 1Password Firefox Add-on\r\n    const publicKeyBytes = new Uint8Array(publicKeyBuffer)\r\n    const cryptoKey = await crypto.subtle.importKey(\r\n      'spki',\r\n      new Uint8Array(publicKeyBytes),\r\n      {\r\n        name: 'ECDSA',\r\n        namedCurve: 'P-256',\r\n        hash: 'SHA-256',\r\n      },\r\n      true,\r\n      ['verify'],\r\n    )\r\n    const publicKey = new Uint8Array(\r\n      await crypto.subtle.exportKey('raw', cryptoKey),\r\n    )\r\n    return PublicKey.from(publicKey)\r\n  } catch (error) {\r\n    // Fallback for 1Password Firefox Add-on restricts access to certain credential properties\r\n    // so we need to use `attestationObject` to extract the public key.\r\n    // https://github.com/passwordless-id/webauthn/issues/50#issuecomment-2072902094\r\n    if ((error as Error).message !== 'Permission denied to access object')\r\n      throw error\r\n\r\n    const data = new Uint8Array(response.attestationObject)\r\n    const coordinateLength = 0x20\r\n    const cborPrefix = 0x58\r\n\r\n    const findStart = (key: number) => {\r\n      const coordinate = new Uint8Array([key, cborPrefix, coordinateLength])\r\n      for (let i = 0; i < data.length - coordinate.length; i++)\r\n        if (coordinate.every((byte, j) => data[i + j] === byte))\r\n          return i + coordinate.length\r\n      throw new CredentialCreationFailedError()\r\n    }\r\n\r\n    const xStart = findStart(0x21)\r\n    const yStart = findStart(0x22)\r\n\r\n    return PublicKey.from(\r\n      new Uint8Array([\r\n        0x04,\r\n        ...data.slice(xStart, xStart + coordinateLength),\r\n        ...data.slice(yStart, yStart + coordinateLength),\r\n      ]),\r\n    )\r\n  }\r\n}\r\n\r\nexport declare namespace parseCredentialPublicKey {\r\n  type ErrorType = CredentialCreationFailedError | Errors.GlobalErrorType\r\n}\r\n", "import { p256 } from '@noble/curves/p256'\r\nimport * as Bytes from './Bytes.js'\r\nimport type * as Errors from './Errors.js'\r\nimport type * as Hex from './Hex.js'\r\nimport * as PublicKey from './PublicKey.js'\r\nimport type * as Signature from './Signature.js'\r\nimport type { Compute } from './internal/types.js'\r\n\r\n/**\r\n * Generates an ECDSA P256 key pair that includes:\r\n *\r\n * - a `privateKey` of type [`CryptoKey`](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey)\r\n *\r\n * - a `publicKey` of type {@link ox#Hex.Hex} or {@link ox#Bytes.Bytes}\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebCryptoP256 } from 'ox'\r\n *\r\n * const { publicKey, privateKey } = await WebCryptoP256.createKeyPair()\r\n * // @log: {\r\n * // @log:   privateKey: CryptoKey {},\r\n * // @log:   publicKey: {\r\n * // @log:     x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\r\n * // @log:     y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\r\n * // @log:     prefix: 4,\r\n * // @log:   },\r\n * // @log: }\r\n * ```\r\n *\r\n * @param options - Options for creating the key pair.\r\n * @returns The key pair.\r\n */\r\nexport async function createKeyPair(\r\n  options: createKeyPair.Options = {},\r\n): Promise<createKeyPair.ReturnType> {\r\n  const { extractable = false } = options\r\n  const keypair = await globalThis.crypto.subtle.generateKey(\r\n    {\r\n      name: 'ECDSA',\r\n      namedCurve: 'P-256',\r\n    },\r\n    extractable,\r\n    ['sign', 'verify'],\r\n  )\r\n  const publicKey_raw = await globalThis.crypto.subtle.exportKey(\r\n    'raw',\r\n    keypair.publicKey,\r\n  )\r\n  const publicKey = PublicKey.from(new Uint8Array(publicKey_raw))\r\n  return {\r\n    privateKey: keypair.privateKey,\r\n    publicKey,\r\n  }\r\n}\r\n\r\nexport declare namespace createKeyPair {\r\n  type Options = {\r\n    /** A boolean value indicating whether it will be possible to export the private key using `globalThis.crypto.subtle.exportKey()`. */\r\n    extractable?: boolean | undefined\r\n  }\r\n\r\n  type ReturnType = Compute<{\r\n    privateKey: CryptoKey\r\n    publicKey: PublicKey.PublicKey\r\n  }>\r\n\r\n  type ErrorType = PublicKey.from.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Signs a payload with the provided `CryptoKey` private key and returns a P256 signature.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebCryptoP256 } from 'ox'\r\n *\r\n * const { privateKey } = await WebCryptoP256.createKeyPair()\r\n *\r\n * const signature = await WebCryptoP256.sign({ // [!code focus]\r\n *   payload: '0xdeadbeef', // [!code focus]\r\n *   privateKey, // [!code focus]\r\n * }) // [!code focus]\r\n * // @log: {\r\n * // @log:   r: 151231...4423n,\r\n * // @log:   s: 516123...5512n,\r\n * // @log: }\r\n * ```\r\n *\r\n * @param options - Options for signing the payload.\r\n * @returns The P256 ECDSA {@link ox#Signature.Signature}.\r\n */\r\nexport async function sign(\r\n  options: sign.Options,\r\n): Promise<Signature.Signature<false>> {\r\n  const { payload, privateKey } = options\r\n  const signature = await globalThis.crypto.subtle.sign(\r\n    {\r\n      name: 'ECDSA',\r\n      hash: 'SHA-256',\r\n    },\r\n    privateKey,\r\n    Bytes.from(payload),\r\n  )\r\n  const signature_bytes = Bytes.fromArray(new Uint8Array(signature))\r\n  const r = Bytes.toBigInt(Bytes.slice(signature_bytes, 0, 32))\r\n  let s = Bytes.toBigInt(Bytes.slice(signature_bytes, 32, 64))\r\n  if (s > p256.CURVE.n / 2n) s = p256.CURVE.n - s\r\n  return { r, s }\r\n}\r\n\r\nexport declare namespace sign {\r\n  type Options = {\r\n    /** Payload to sign. */\r\n    payload: Hex.Hex | Bytes.Bytes\r\n    /** ECDSA private key. */\r\n    privateKey: CryptoKey\r\n  }\r\n\r\n  type ErrorType = Bytes.fromArray.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Verifies a payload was signed by the provided public key.\r\n *\r\n * @example\r\n *\r\n * ```ts twoslash\r\n * import { WebCryptoP256 } from 'ox'\r\n *\r\n * const { privateKey, publicKey } = await WebCryptoP256.createKeyPair()\r\n * const signature = await WebCryptoP256.sign({ payload: '0xdeadbeef', privateKey })\r\n *\r\n * const verified = await WebCryptoP256.verify({ // [!code focus]\r\n *   payload: '0xdeadbeef', // [!code focus]\r\n *   publicKey, // [!code focus]\r\n *   signature, // [!code focus]\r\n * }) // [!code focus]\r\n * // @log: true\r\n * ```\r\n *\r\n * @param options - The verification options.\r\n * @returns Whether the payload was signed by the provided public key.\r\n */\r\nexport async function verify(options: verify.Options): Promise<boolean> {\r\n  const { payload, signature } = options\r\n\r\n  const publicKey = await globalThis.crypto.subtle.importKey(\r\n    'raw',\r\n    PublicKey.toBytes(options.publicKey),\r\n    { name: 'ECDSA', namedCurve: 'P-256' },\r\n    true,\r\n    ['verify'],\r\n  )\r\n\r\n  return await globalThis.crypto.subtle.verify(\r\n    {\r\n      name: 'ECDSA',\r\n      hash: 'SHA-256',\r\n    },\r\n    publicKey,\r\n    Bytes.concat(Bytes.fromNumber(signature.r), Bytes.fromNumber(signature.s)),\r\n    Bytes.from(payload),\r\n  )\r\n}\r\n\r\nexport declare namespace verify {\r\n  type Options = {\r\n    /** Public key that signed the payload. */\r\n    publicKey: PublicKey.PublicKey<boolean>\r\n    /** Signature of the payload. */\r\n    signature: Signature.Signature<false>\r\n    /** Payload that was signed. */\r\n    payload: Hex.Hex | Bytes.Bytes\r\n  }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n", "/**\r\n * @internal\r\n *\r\n * Map with a LRU (Least recently used) policy.\r\n * @see https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\r\n */\r\nexport class LruMap<value = unknown> extends Map<string, value> {\r\n  maxSize: number\r\n\r\n  constructor(size: number) {\r\n    super()\r\n    this.maxSize = size\r\n  }\r\n\r\n  override get(key: string) {\r\n    const value = super.get(key)\r\n\r\n    if (super.has(key) && value !== undefined) {\r\n      this.delete(key)\r\n      super.set(key, value)\r\n    }\r\n\r\n    return value\r\n  }\r\n\r\n  override set(key: string, value: value) {\r\n    super.set(key, value)\r\n    if (this.maxSize && this.size > this.maxSize) {\r\n      const firstKey = this.keys().next().value\r\n      if (firstKey) this.delete(firstKey)\r\n    }\r\n    return this\r\n  }\r\n}\r\n", "import type * as Address from './Address.js'\r\nimport { LruMap } from './internal/lru.js'\r\n\r\nconst caches = {\r\n  checksum: /*#__PURE__*/ new LruMap<Address.Address>(8192),\r\n}\r\n\r\nexport const checksum = caches.checksum\r\n\r\n/**\r\n * Clears all global caches.\r\n *\r\n * @example\r\n * ```ts\r\n * import { Caches } from 'ox'\r\n * Caches.clear()\r\n * ```\r\n */\r\nexport function clear() {\r\n  for (const cache of Object.values(caches)) cache.clear()\r\n}\r\n", "import type { Address as abitype_Address } from 'abitype'\r\nimport * as Bytes from './Bytes.js'\r\nimport * as Caches from './Caches.js'\r\nimport * as Errors from './Errors.js'\r\nimport * as Hash from './Hash.js'\r\nimport * as PublicKey from './PublicKey.js'\r\n\r\nconst addressRegex = /*#__PURE__*/ /^0x[a-fA-F0-9]{40}$/\r\n\r\n/** Root type for Address. */\r\nexport type Address = abitype_Address\r\n\r\n/**\r\n * Asserts that the given value is a valid {@link ox#Address.Address}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.assert('0xA0Cf798816D4b9b9866b5330EEa46a18382f251e')\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.assert('0xdeadbeef')\r\n * // @error: InvalidAddressError: Address \"0xdeadbeef\" is invalid.\r\n * ```\r\n *\r\n * @param value - Value to assert if it is a valid address.\r\n * @param options - Assertion options.\r\n */\r\nexport function assert(\r\n  value: string,\r\n  options: assert.Options = {},\r\n): asserts value is Address {\r\n  const { strict = true } = options\r\n\r\n  if (!addressRegex.test(value))\r\n    throw new InvalidAddressError({\r\n      address: value,\r\n      cause: new InvalidInputError(),\r\n    })\r\n\r\n  if (strict) {\r\n    if (value.toLowerCase() === value) return\r\n    if (checksum(value as Address) !== value)\r\n      throw new InvalidAddressError({\r\n        address: value,\r\n        cause: new InvalidChecksumError(),\r\n      })\r\n  }\r\n}\r\n\r\nexport declare namespace assert {\r\n  type Options = {\r\n    /**\r\n     * Enables strict mode. Whether or not to compare the address against its checksum.\r\n     *\r\n     * @default true\r\n     */\r\n    strict?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType = InvalidAddressError | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Computes the checksum address for the given {@link ox#Address.Address}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.checksum('0xa0cf798816d4b9b9866b5330eea46a18382f251e')\r\n * // @log: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'\r\n * ```\r\n *\r\n * @param address - The address to compute the checksum for.\r\n * @returns The checksummed address.\r\n */\r\nexport function checksum(address: string): Address {\r\n  if (Caches.checksum.has(address)) return Caches.checksum.get(address)!\r\n\r\n  assert(address, { strict: false })\r\n\r\n  const hexAddress = address.substring(2).toLowerCase()\r\n  const hash = Hash.keccak256(Bytes.fromString(hexAddress), { as: 'Bytes' })\r\n\r\n  const characters = hexAddress.split('')\r\n  for (let i = 0; i < 40; i += 2) {\r\n    if (hash[i >> 1]! >> 4 >= 8 && characters[i]) {\r\n      characters[i] = characters[i]!.toUpperCase()\r\n    }\r\n    if ((hash[i >> 1]! & 0x0f) >= 8 && characters[i + 1]) {\r\n      characters[i + 1] = characters[i + 1]!.toUpperCase()\r\n    }\r\n  }\r\n\r\n  const result = `0x${characters.join('')}` as const\r\n  Caches.checksum.set(address, result)\r\n  return result\r\n}\r\n\r\nexport declare namespace checksum {\r\n  type ErrorType =\r\n    | assert.ErrorType\r\n    | Hash.keccak256.ErrorType\r\n    | Bytes.fromString.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a stringified address to a typed (checksummed) {@link ox#Address.Address}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.from('0xa0cf798816d4b9b9866b5330eea46a18382f251e')\r\n * // @log: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.from('0xa0cf798816d4b9b9866b5330eea46a18382f251e', {\r\n *   checksum: false\r\n * })\r\n * // @log: '0xa0cf798816d4b9b9866b5330eea46a18382f251e'\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.from('hello')\r\n * // @error: InvalidAddressError: Address \"0xa\" is invalid.\r\n * ```\r\n *\r\n * @param address - An address string to convert to a typed Address.\r\n * @param options - Conversion options.\r\n * @returns The typed Address.\r\n */\r\nexport function from(address: string, options: from.Options = {}): Address {\r\n  const { checksum: checksumVal = false } = options\r\n  assert(address)\r\n  if (checksumVal) return checksum(address)\r\n  return address as Address\r\n}\r\n\r\nexport declare namespace from {\r\n  type Options = {\r\n    /**\r\n     * Whether to checksum the address.\r\n     *\r\n     * @default false\r\n     */\r\n    checksum?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | assert.ErrorType\r\n    | checksum.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts an ECDSA public key to an {@link ox#Address.Address}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address, PublicKey } from 'ox'\r\n *\r\n * const publicKey = PublicKey.from(\r\n *   '0x048318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5',\r\n * )\r\n * const address = Address.fromPublicKey(publicKey)\r\n * // @log: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\r\n * ```\r\n *\r\n * @param publicKey - The ECDSA public key to convert to an {@link ox#Address.Address}.\r\n * @param options - Conversion options.\r\n * @returns The {@link ox#Address.Address} corresponding to the public key.\r\n */\r\nexport function fromPublicKey(\r\n  publicKey: PublicKey.PublicKey,\r\n  options: fromPublicKey.Options = {},\r\n): Address {\r\n  const address = Hash.keccak256(\r\n    `0x${PublicKey.toHex(publicKey).slice(4)}`,\r\n  ).substring(26)\r\n  return from(`0x${address}`, options)\r\n}\r\n\r\nexport declare namespace fromPublicKey {\r\n  type Options = {\r\n    /**\r\n     * Whether to checksum the address.\r\n     *\r\n     * @default false\r\n     */\r\n    checksum?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | Hash.keccak256.ErrorType\r\n    | PublicKey.toHex.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Checks if two {@link ox#Address.Address} are equal.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.isEqual(\r\n *   '0xa0cf798816d4b9b9866b5330eea46a18382f251e',\r\n *   '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'\r\n * )\r\n * // @log: true\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.isEqual(\r\n *   '0xa0cf798816d4b9b9866b5330eea46a18382f251e',\r\n *   '0xA0Cf798816D4b9b9866b5330EEa46a18382f251f'\r\n * )\r\n * // @log: false\r\n * ```\r\n *\r\n * @param addressA - The first address to compare.\r\n * @param addressB - The second address to compare.\r\n * @returns Whether the addresses are equal.\r\n */\r\nexport function isEqual(addressA: Address, addressB: Address): boolean {\r\n  assert(addressA, { strict: false })\r\n  assert(addressB, { strict: false })\r\n  return addressA.toLowerCase() === addressB.toLowerCase()\r\n}\r\n\r\nexport declare namespace isEqual {\r\n  type ErrorType = assert.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Checks if the given address is a valid {@link ox#Address.Address}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.validate('0xA0Cf798816D4b9b9866b5330EEa46a18382f251e')\r\n * // @log: true\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.validate('0xdeadbeef')\r\n * // @log: false\r\n * ```\r\n *\r\n * @param address - Value to check if it is a valid address.\r\n * @param options - Check options.\r\n * @returns Whether the address is a valid address.\r\n */\r\nexport function validate(\r\n  address: string,\r\n  options: validate.Options = {},\r\n): address is Address {\r\n  const { strict = true } = options ?? {}\r\n  try {\r\n    assert(address, { strict })\r\n    return true\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nexport declare namespace validate {\r\n  type Options = {\r\n    /**\r\n     * Enables strict mode. Whether or not to compare the address against its checksum.\r\n     *\r\n     * @default true\r\n     */\r\n    strict?: boolean | undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when an address is invalid.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.from('0x123')\r\n * // @error: Address.InvalidAddressError: Address `0x123` is invalid.\r\n * ```\r\n */\r\nexport class InvalidAddressError<\r\n  cause extends InvalidInputError | InvalidChecksumError =\r\n    | InvalidInputError\r\n    | InvalidChecksumError,\r\n> extends Errors.BaseError<cause> {\r\n  override readonly name = 'Address.InvalidAddressError'\r\n\r\n  constructor({ address, cause }: { address: string; cause: cause }) {\r\n    super(`Address \"${address}\" is invalid.`, {\r\n      cause,\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when an address is not a 20 byte (40 hexadecimal character) value. */\r\nexport class InvalidInputError extends Errors.BaseError {\r\n  override readonly name = 'Address.InvalidInputError'\r\n\r\n  constructor() {\r\n    super('Address is not a 20 byte (40 hexadecimal character) value.')\r\n  }\r\n}\r\n\r\n/** Thrown when an address does not match its checksum counterpart. */\r\nexport class InvalidChecksumError extends Errors.BaseError {\r\n  override readonly name = 'Address.InvalidChecksumError'\r\n\r\n  constructor() {\r\n    super('Address does not match its checksum counterpart.')\r\n  }\r\n}\r\n", "import type * as abitype from 'abitype'\r\nimport type * as Abi from '../Abi.js'\r\nimport type * as AbiItem from '../AbiItem.js'\r\nimport type * as AbiParameters from '../AbiParameters.js'\r\nimport * as Address from '../Address.js'\r\nimport * as Errors from '../Errors.js'\r\nimport type {\r\n  Compute,\r\n  IsNever,\r\n  IsUnion,\r\n  TypeErrorMessage,\r\n  UnionToTuple,\r\n} from './types.js'\r\n\r\n/** @internal */\r\nexport type ExtractArgs<\r\n  abi extends Abi.Abi | readonly unknown[] = Abi.Abi,\r\n  name extends AbiItem.Name<abi> = AbiItem.Name<abi>,\r\n> = abitype.AbiParametersToPrimitiveTypes<\r\n  AbiItem.FromAbi<abi extends Abi.Abi ? abi : Abi.Abi, name>['inputs'],\r\n  'inputs'\r\n> extends infer args\r\n  ? [args] extends [never]\r\n    ? readonly unknown[]\r\n    : args\r\n  : readonly unknown[]\r\n\r\n/** @internal */\r\nexport type ExtractForArgs<\r\n  abi extends Abi.Abi,\r\n  name extends AbiItem.Name<abi>,\r\n  args extends ExtractArgs<abi, name>,\r\n> = IsUnion<name> extends true\r\n  ? {\r\n      [key in keyof abi]: abi[key] extends { name: name } ? abi[key] : never\r\n    }[number]\r\n  : AbiItem.FromAbi<abi, name> extends infer abiItem extends AbiItem.AbiItem & {\r\n        inputs: readonly abitype.AbiParameter[]\r\n      }\r\n    ? IsUnion<abiItem> extends true // narrow overloads using `args` by converting to tuple and filtering out overloads that don't match\r\n      ? UnionToTuple<abiItem> extends infer abiItems extends\r\n          readonly (AbiItem.AbiItem & {\r\n            inputs: readonly abitype.AbiParameter[]\r\n          })[]\r\n        ? IsNever<TupleToUnion<abiItems, abi, name, args>> extends true\r\n          ? Compute<\r\n              abiItems[0] & {\r\n                readonly overloads: UnionToTuple<\r\n                  Exclude<abiItems[number], abiItems[0]>\r\n                >\r\n              }\r\n            >\r\n          : TupleToUnion<abiItems, abi, name, args> // convert back to union (removes `never` tuple entries: `['foo', never, 'bar'][number]` => `'foo' | 'bar'`)\r\n        : never\r\n      : abiItem\r\n    : never\r\n\r\n/** @internal */\r\nexport type TupleToUnion<\r\n  abiItems extends readonly {\r\n    inputs: readonly abitype.AbiParameter[]\r\n  }[],\r\n  abi extends Abi.Abi,\r\n  name extends AbiItem.Name<abi>,\r\n  args extends ExtractArgs<abi, name>,\r\n> = {\r\n  [k in keyof abiItems]: (\r\n    readonly [] extends args\r\n      ? readonly [] // fallback to `readonly []` if `args` has no value (e.g. `args` property not provided)\r\n      : args\r\n  ) extends abitype.AbiParametersToPrimitiveTypes<\r\n    abiItems[k]['inputs'],\r\n    'inputs'\r\n  >\r\n    ? abiItems[k]\r\n    : never\r\n}[number]\r\n\r\n/** @internal */\r\nexport type ErrorSignature<\r\n  name extends string = string,\r\n  parameters extends string = string,\r\n> = `error ${name}(${parameters})`\r\n\r\n/** @internal */\r\nexport type IsErrorSignature<signature extends string> =\r\n  signature extends ErrorSignature<infer name> ? IsName<name> : false\r\n\r\n/** @internal */\r\nexport type EventSignature<\r\n  name extends string = string,\r\n  parameters extends string = string,\r\n> = `event ${name}(${parameters})`\r\n\r\n/** @internal */\r\nexport type IsEventSignature<signature extends string> =\r\n  signature extends EventSignature<infer name> ? IsName<name> : false\r\n\r\n/** @internal */\r\nexport type FunctionSignature<\r\n  name extends string = string,\r\n  tail extends string = string,\r\n> = `function ${name}(${tail}`\r\nexport type IsFunctionSignature<signature> =\r\n  signature extends FunctionSignature<infer name>\r\n    ? IsName<name> extends true\r\n      ? signature extends ValidFunctionSignatures\r\n        ? true\r\n        : // Check that `Parameters` is not absorbing other types (e.g. `returns`)\r\n          signature extends `function ${string}(${infer parameters})`\r\n          ? parameters extends InvalidFunctionParameters\r\n            ? false\r\n            : true\r\n          : false\r\n      : false\r\n    : false\r\n/** @internal */\r\nexport type Scope = 'public' | 'external' // `internal` or `private` functions wouldn't make it to ABI so can ignore\r\n\r\n/** @internal */\r\nexport type Returns = `returns (${string})` | `returns(${string})`\r\n\r\n// Almost all valid function signatures, except `function ${string}(${infer parameters})` since `parameters` can absorb returns\r\n/** @internal */\r\nexport type ValidFunctionSignatures =\r\n  | `function ${string}()`\r\n  // basic\r\n  | `function ${string}() ${Returns}`\r\n  | `function ${string}() ${abitype.AbiStateMutability}`\r\n  | `function ${string}() ${Scope}`\r\n  // combinations\r\n  | `function ${string}() ${abitype.AbiStateMutability} ${Returns}`\r\n  | `function ${string}() ${Scope} ${Returns}`\r\n  | `function ${string}() ${Scope} ${abitype.AbiStateMutability}`\r\n  | `function ${string}() ${Scope} ${abitype.AbiStateMutability} ${Returns}`\r\n  // Parameters\r\n  | `function ${string}(${string}) ${Returns}`\r\n  | `function ${string}(${string}) ${abitype.AbiStateMutability}`\r\n  | `function ${string}(${string}) ${Scope}`\r\n  | `function ${string}(${string}) ${abitype.AbiStateMutability} ${Returns}`\r\n  | `function ${string}(${string}) ${Scope} ${Returns}`\r\n  | `function ${string}(${string}) ${Scope} ${abitype.AbiStateMutability}`\r\n  | `function ${string}(${string}) ${Scope} ${abitype.AbiStateMutability} ${Returns}`\r\n\r\n/** @internal */\r\nexport type StructSignature<\r\n  name extends string = string,\r\n  properties extends string = string,\r\n> = `struct ${name} {${properties}}`\r\n\r\n/** @internal */\r\nexport type IsStructSignature<signature extends string> =\r\n  signature extends StructSignature<infer name> ? IsName<name> : false\r\n\r\n/** @internal */\r\nexport type ConstructorSignature<tail extends string = string> =\r\n  `constructor(${tail}`\r\n\r\n/** @internal */\r\nexport type IsConstructorSignature<signature> =\r\n  signature extends ConstructorSignature\r\n    ? signature extends ValidConstructorSignatures\r\n      ? true\r\n      : false\r\n    : false\r\n\r\n/** @internal */\r\nexport type ValidConstructorSignatures =\r\n  | `constructor(${string})`\r\n  | `constructor(${string}) payable`\r\n\r\n/** @internal */\r\nexport type FallbackSignature<abiStateMutability extends '' | ' payable' = ''> =\r\n  `fallback() external${abiStateMutability}`\r\n\r\n/** @internal */\r\nexport type ReceiveSignature = 'receive() external payable'\r\n\r\n// TODO: Maybe use this for signature validation one day\r\n// https://twitter.com/devanshj__/status/1610423724708343808\r\n/** @internal */\r\nexport type IsSignature<type extends string> =\r\n  | (IsErrorSignature<type> extends true ? true : never)\r\n  | (IsEventSignature<type> extends true ? true : never)\r\n  | (IsFunctionSignature<type> extends true ? true : never)\r\n  | (IsStructSignature<type> extends true ? true : never)\r\n  | (IsConstructorSignature<type> extends true ? true : never)\r\n  | (type extends FallbackSignature ? true : never)\r\n  | (type extends ReceiveSignature ? true : never) extends infer condition\r\n  ? [condition] extends [never]\r\n    ? false\r\n    : true\r\n  : false\r\n\r\n/** @internal */\r\nexport type Signature<\r\n  string1 extends string,\r\n  string2 extends string | unknown = unknown,\r\n> = IsSignature<string1> extends true\r\n  ? string1\r\n  : string extends string1 // if exactly `string` (not narrowed), then pass through as valid\r\n    ? string1\r\n    : TypeErrorMessage<`Signature \"${string1}\" is invalid${string2 extends string\r\n        ? ` at position ${string2}`\r\n        : ''}.`>\r\n\r\n/** @internal */\r\nexport type Signatures<signatures extends readonly string[]> = {\r\n  [key in keyof signatures]: Signature<signatures[key], key>\r\n}\r\n\r\n/** @internal */\r\nexport type IsName<name extends string> = name extends ''\r\n  ? false\r\n  : ValidateName<name> extends name\r\n    ? true\r\n    : false\r\n\r\n/** @internal */\r\nexport type ValidateName<\r\n  name extends string,\r\n  checkCharacters extends boolean = false,\r\n> = name extends `${string}${' '}${string}`\r\n  ? TypeErrorMessage<`Identifier \"${name}\" cannot contain whitespace.`>\r\n  : IsSolidityKeyword<name> extends true\r\n    ? TypeErrorMessage<`\"${name}\" is a protected Solidity keyword.`>\r\n    : name extends `${number}`\r\n      ? TypeErrorMessage<`Identifier \"${name}\" cannot be a number string.`>\r\n      : name extends `${number}${string}`\r\n        ? TypeErrorMessage<`Identifier \"${name}\" cannot start with a number.`>\r\n        : checkCharacters extends true\r\n          ? IsValidCharacter<name> extends true\r\n            ? name\r\n            : TypeErrorMessage<`\"${name}\" contains invalid character.`>\r\n          : name\r\n\r\n/** @internal */\r\nexport type IsSolidityKeyword<type extends string> =\r\n  type extends SolidityKeywords ? true : false\r\n\r\n/** @internal */\r\nexport type SolidityKeywords =\r\n  | 'after'\r\n  | 'alias'\r\n  | 'anonymous'\r\n  | 'apply'\r\n  | 'auto'\r\n  | 'byte'\r\n  | 'calldata'\r\n  | 'case'\r\n  | 'catch'\r\n  | 'constant'\r\n  | 'copyof'\r\n  | 'default'\r\n  | 'defined'\r\n  | 'error'\r\n  | 'event'\r\n  | 'external'\r\n  | 'false'\r\n  | 'final'\r\n  | 'function'\r\n  | 'immutable'\r\n  | 'implements'\r\n  | 'in'\r\n  | 'indexed'\r\n  | 'inline'\r\n  | 'internal'\r\n  | 'let'\r\n  | 'mapping'\r\n  | 'match'\r\n  | 'memory'\r\n  | 'mutable'\r\n  | 'null'\r\n  | 'of'\r\n  | 'override'\r\n  | 'partial'\r\n  | 'private'\r\n  | 'promise'\r\n  | 'public'\r\n  | 'pure'\r\n  | 'reference'\r\n  | 'relocatable'\r\n  | 'return'\r\n  | 'returns'\r\n  | 'sizeof'\r\n  | 'static'\r\n  | 'storage'\r\n  | 'struct'\r\n  | 'super'\r\n  | 'supports'\r\n  | 'switch'\r\n  | 'this'\r\n  | 'true'\r\n  | 'try'\r\n  | 'typedef'\r\n  | 'typeof'\r\n  | 'var'\r\n  | 'view'\r\n  | 'virtual'\r\n  | `address${`[${string}]` | ''}`\r\n  | `bool${`[${string}]` | ''}`\r\n  | `string${`[${string}]` | ''}`\r\n  | `tuple${`[${string}]` | ''}`\r\n  | `bytes${number | ''}${`[${string}]` | ''}`\r\n  | `${'u' | ''}int${number | ''}${`[${string}]` | ''}`\r\n\r\n/** @internal */\r\nexport type IsValidCharacter<character extends string> =\r\n  character extends `${ValidCharacters}${infer tail}`\r\n    ? tail extends ''\r\n      ? true\r\n      : IsValidCharacter<tail>\r\n    : false\r\n\r\n// biome-ignore format: no formatting\r\n/** @internal */\r\nexport type ValidCharacters =\r\n  // uppercase letters\r\n  | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'\r\n  // lowercase letters\r\n  | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'\r\n  // numbers\r\n  | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'\r\n  // special characters\r\n  | '_' | '$'\r\n\r\n// Template string inference can absorb `returns`:\r\n// type Result = `function foo(string) return s (uint256)` extends `function ${string}(${infer Parameters})` ? Parameters : never\r\n// //   ^? type Result = \"string ) return s (uint256\"\r\n// So we need to validate against `returns` keyword with all combinations of whitespace\r\n/** @internal */\r\nexport type InvalidFunctionParameters =\r\n  | `${string}${MangledReturns} (${string}`\r\n  | `${string}) ${MangledReturns}${string}`\r\n  | `${string})${string}${MangledReturns}${string}(${string}`\r\n\r\n// r_e_t_u_r_n_s\r\n/** @internal */\r\nexport type MangledReturns =\r\n  // Single\r\n  | `r${string}eturns`\r\n  | `re${string}turns`\r\n  | `ret${string}urns`\r\n  | `retu${string}rns`\r\n  | `retur${string}ns`\r\n  | `return${string}s`\r\n  // Double\r\n  // `r_e*`\r\n  | `r${string}e${string}turns`\r\n  | `r${string}et${string}urns`\r\n  | `r${string}etu${string}rns`\r\n  | `r${string}etur${string}ns`\r\n  | `r${string}eturn${string}s`\r\n  // `re_t*`\r\n  | `re${string}t${string}urns`\r\n  | `re${string}tu${string}rns`\r\n  | `re${string}tur${string}ns`\r\n  | `re${string}turn${string}s`\r\n  // `ret_u*`\r\n  | `ret${string}u${string}rns`\r\n  | `ret${string}ur${string}ns`\r\n  | `ret${string}urn${string}s`\r\n  // `retu_r*`\r\n  | `retu${string}r${string}ns`\r\n  | `retu${string}rn${string}s`\r\n  // `retur_n*`\r\n  | `retur${string}n${string}s`\r\n  // Triple\r\n  // `r_e_t*`\r\n  | `r${string}e${string}t${string}urns`\r\n  | `r${string}e${string}tu${string}rns`\r\n  | `r${string}e${string}tur${string}ns`\r\n  | `r${string}e${string}turn${string}s`\r\n  // `re_t_u*`\r\n  | `re${string}t${string}u${string}rns`\r\n  | `re${string}t${string}ur${string}ns`\r\n  | `re${string}t${string}urn${string}s`\r\n  // `ret_u_r*`\r\n  | `ret${string}u${string}r${string}ns`\r\n  | `ret${string}u${string}rn${string}s`\r\n  // `retu_r_n*`\r\n  | `retu${string}r${string}n${string}s`\r\n  // Quadruple\r\n  // `r_e_t_u*`\r\n  | `r${string}e${string}t${string}u${string}rns`\r\n  | `r${string}e${string}t${string}ur${string}ns`\r\n  | `r${string}e${string}t${string}urn${string}s`\r\n  // `re_t_u_r*`\r\n  | `re${string}t${string}u${string}r${string}ns`\r\n  | `re${string}t${string}u${string}rn${string}s`\r\n  // `ret_u_r_n*`\r\n  | `ret${string}u${string}r${string}n${string}s`\r\n  // Quintuple\r\n  // `r_e_t_u_r*`\r\n  | `r${string}e${string}t${string}u${string}r${string}ns`\r\n  | `r${string}e${string}t${string}u${string}rn${string}s`\r\n  // `re_t_u_r_n*`\r\n  | `re${string}t${string}u${string}r${string}n${string}s`\r\n  // Sextuple\r\n  // `r_e_t_u_r_n_s`\r\n  | `r${string}e${string}t${string}u${string}r${string}n${string}s`\r\n\r\n/** @internal */\r\nexport type Widen<type> =\r\n  | ([unknown] extends [type] ? unknown : never)\r\n  | (type extends Function ? type : never)\r\n  | (type extends abitype.ResolvedRegister['bigIntType'] ? bigint : never)\r\n  | (type extends boolean ? boolean : never)\r\n  | (type extends abitype.ResolvedRegister['intType'] ? number : never)\r\n  | (type extends string\r\n      ? type extends abitype.ResolvedRegister['addressType']\r\n        ? abitype.ResolvedRegister['addressType']\r\n        : type extends abitype.ResolvedRegister['bytesType']['inputs']\r\n          ? abitype.ResolvedRegister['bytesType']\r\n          : string\r\n      : never)\r\n  | (type extends readonly [] ? readonly [] : never)\r\n  | (type extends Record<string, unknown>\r\n      ? { [K in keyof type]: Widen<type[K]> }\r\n      : never)\r\n  | (type extends { length: number }\r\n      ? {\r\n          [K in keyof type]: Widen<type[K]>\r\n        } extends infer Val extends readonly unknown[]\r\n        ? readonly [...Val]\r\n        : never\r\n      : never)\r\n\r\n/** @internal */\r\nexport function normalizeSignature(signature: string): string {\r\n  let active = true\r\n  let current = ''\r\n  let level = 0\r\n  let result = ''\r\n  let valid = false\r\n\r\n  for (let i = 0; i < signature.length; i++) {\r\n    const char = signature[i]!\r\n\r\n    // If the character is a separator, we want to reactivate.\r\n    if (['(', ')', ','].includes(char)) active = true\r\n\r\n    // If the character is a \"level\" token, we want to increment/decrement.\r\n    if (char === '(') level++\r\n    if (char === ')') level--\r\n\r\n    // If we aren't active, we don't want to mutate the result.\r\n    if (!active) continue\r\n\r\n    // If level === 0, we are at the definition level.\r\n    if (level === 0) {\r\n      if (char === ' ' && ['event', 'function', 'error', ''].includes(result))\r\n        result = ''\r\n      else {\r\n        result += char\r\n\r\n        // If we are at the end of the definition, we must be finished.\r\n        if (char === ')') {\r\n          valid = true\r\n          break\r\n        }\r\n      }\r\n\r\n      continue\r\n    }\r\n\r\n    // Ignore spaces\r\n    if (char === ' ') {\r\n      // If the previous character is a separator, and the current section isn't empty, we want to deactivate.\r\n      if (signature[i - 1] !== ',' && current !== ',' && current !== ',(') {\r\n        current = ''\r\n        active = false\r\n      }\r\n      continue\r\n    }\r\n\r\n    result += char\r\n    current += char\r\n  }\r\n\r\n  if (!valid) throw new Errors.BaseError('Unable to normalize signature.')\r\n\r\n  return result\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace normalizeSignature {\r\n  export type ErrorType = Errors.BaseError | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function isArgOfType(\r\n  arg: unknown,\r\n  abiParameter: AbiParameters.Parameter,\r\n): boolean {\r\n  const argType = typeof arg\r\n  const abiParameterType = abiParameter.type\r\n  switch (abiParameterType) {\r\n    case 'address':\r\n      return Address.validate(arg as Address.Address, { strict: false })\r\n    case 'bool':\r\n      return argType === 'boolean'\r\n    case 'function':\r\n      return argType === 'string'\r\n    case 'string':\r\n      return argType === 'string'\r\n    default: {\r\n      if (abiParameterType === 'tuple' && 'components' in abiParameter)\r\n        return Object.values(abiParameter.components).every(\r\n          (component, index) => {\r\n            return isArgOfType(\r\n              Object.values(arg as unknown[] | Record<string, unknown>)[index],\r\n              component as AbiParameters.Parameter,\r\n            )\r\n          },\r\n        )\r\n\r\n      // `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\r\n      // https://regexr.com/6v8hp\r\n      if (\r\n        /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(\r\n          abiParameterType,\r\n        )\r\n      )\r\n        return argType === 'number' || argType === 'bigint'\r\n\r\n      // `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\r\n      // https://regexr.com/6va55\r\n      if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))\r\n        return argType === 'string' || arg instanceof Uint8Array\r\n\r\n      // fixed-length (`<type>[M]`) and dynamic (`<type>[]`) arrays\r\n      // https://regexr.com/6va6i\r\n      if (/[a-z]+[1-9]{0,3}(\\[[0-9]{0,}\\])+$/.test(abiParameterType)) {\r\n        return (\r\n          Array.isArray(arg) &&\r\n          arg.every((x: unknown) =>\r\n            isArgOfType(x, {\r\n              ...abiParameter,\r\n              // Pop off `[]` or `[M]` from end of type\r\n              type: abiParameterType.replace(/(\\[[0-9]{0,}\\])$/, ''),\r\n            } as AbiParameters.Parameter),\r\n          )\r\n        )\r\n      }\r\n\r\n      return false\r\n    }\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport function getAmbiguousTypes(\r\n  sourceParameters: readonly AbiParameters.Parameter[],\r\n  targetParameters: readonly AbiParameters.Parameter[],\r\n  args: ExtractArgs,\r\n): AbiParameters.Parameter['type'][] | undefined {\r\n  for (const parameterIndex in sourceParameters) {\r\n    const sourceParameter = sourceParameters[parameterIndex]!\r\n    const targetParameter = targetParameters[parameterIndex]!\r\n\r\n    if (\r\n      sourceParameter.type === 'tuple' &&\r\n      targetParameter.type === 'tuple' &&\r\n      'components' in sourceParameter &&\r\n      'components' in targetParameter\r\n    )\r\n      return getAmbiguousTypes(\r\n        sourceParameter.components,\r\n        targetParameter.components,\r\n        (args as any)[parameterIndex],\r\n      )\r\n\r\n    const types = [sourceParameter.type, targetParameter.type]\r\n\r\n    const ambiguous = (() => {\r\n      if (types.includes('address') && types.includes('bytes20')) return true\r\n      if (types.includes('address') && types.includes('string'))\r\n        return Address.validate(args[parameterIndex] as Address.Address, {\r\n          strict: false,\r\n        })\r\n      if (types.includes('address') && types.includes('bytes'))\r\n        return Address.validate(args[parameterIndex] as Address.Address, {\r\n          strict: false,\r\n        })\r\n      return false\r\n    })()\r\n\r\n    if (ambiguous) return types\r\n  }\r\n\r\n  return\r\n}\r\n", "import * as abitype from 'abitype'\r\nimport type * as Abi from './Abi.js'\r\nimport * as Errors from './Errors.js'\r\nimport * as Hash from './Hash.js'\r\nimport * as Hex from './Hex.js'\r\nimport * as internal from './internal/abiItem.js'\r\nimport type { UnionCompute } from './internal/types.js'\r\n\r\n/** Root type for an item on an {@link ox#Abi.Abi}. */\r\nexport type AbiItem = Abi.Abi[number]\r\n\r\n/**\r\n * Extracts an {@link ox#AbiItem.AbiItem} item from an {@link ox#Abi.Abi}, given a name.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Abi, AbiItem } from 'ox'\r\n *\r\n * const abi = Abi.from([\r\n *   'error Foo(string)',\r\n *   'function foo(string)',\r\n *   'event Bar(uint256)',\r\n * ])\r\n *\r\n * type Foo = AbiItem.FromAbi<typeof abi, 'Foo'>\r\n * //   ^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n */\r\nexport type FromAbi<\r\n  abi extends Abi.Abi,\r\n  name extends ExtractNames<abi>,\r\n> = Extract<abi[number], { name: name }>\r\n\r\n/**\r\n * Extracts the names of all {@link ox#AbiItem.AbiItem} items in an {@link ox#Abi.Abi}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Abi, AbiItem } from 'ox'\r\n *\r\n * const abi = Abi.from([\r\n *   'error Foo(string)',\r\n *   'function foo(string)',\r\n *   'event Bar(uint256)',\r\n * ])\r\n *\r\n * type names = AbiItem.Name<typeof abi>\r\n * //   ^?\r\n *\r\n * ```\r\n */\r\nexport type Name<abi extends Abi.Abi | readonly unknown[] = Abi.Abi> =\r\n  abi extends Abi.Abi ? ExtractNames<abi> : string\r\n\r\nexport type ExtractNames<abi extends Abi.Abi> = Extract<\r\n  abi[number],\r\n  { name: string }\r\n>['name']\r\n\r\n/**\r\n * Formats an {@link ox#AbiItem.AbiItem} into a **Human Readable ABI Item**.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiItem } from 'ox'\r\n *\r\n * const formatted = AbiItem.format({\r\n *   type: 'function',\r\n *   name: 'approve',\r\n *   stateMutability: 'nonpayable',\r\n *   inputs: [\r\n *     {\r\n *       name: 'spender',\r\n *       type: 'address',\r\n *     },\r\n *     {\r\n *       name: 'amount',\r\n *       type: 'uint256',\r\n *     },\r\n *   ],\r\n *   outputs: [{ type: 'bool' }],\r\n * })\r\n *\r\n * formatted\r\n * //    ^?\r\n *\r\n *\r\n * ```\r\n *\r\n * @param abiItem - The ABI Item to format.\r\n * @returns The formatted ABI Item  .\r\n */\r\nexport function format<const abiItem extends AbiItem>(\r\n  abiItem: abiItem | AbiItem,\r\n): abitype.FormatAbiItem<abiItem> {\r\n  return abitype.formatAbiItem(abiItem) as never\r\n}\r\n\r\nexport declare namespace format {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Parses an arbitrary **JSON ABI Item** or **Human Readable ABI Item** into a typed {@link ox#AbiItem.AbiItem}.\r\n *\r\n * @example\r\n * ### JSON ABIs\r\n *\r\n * ```ts twoslash\r\n * import { AbiItem } from 'ox'\r\n *\r\n * const abiItem = AbiItem.from({\r\n *   type: 'function',\r\n *   name: 'approve',\r\n *   stateMutability: 'nonpayable',\r\n *   inputs: [\r\n *     {\r\n *       name: 'spender',\r\n *       type: 'address',\r\n *     },\r\n *     {\r\n *       name: 'amount',\r\n *       type: 'uint256',\r\n *     },\r\n *   ],\r\n *   outputs: [{ type: 'bool' }],\r\n * })\r\n *\r\n * abiItem\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * @example\r\n * ### Human Readable ABIs\r\n *\r\n * A Human Readable ABI can be parsed into a typed ABI object:\r\n *\r\n * ```ts twoslash\r\n * import { AbiItem } from 'ox'\r\n *\r\n * const abiItem = AbiItem.from(\r\n *   'function approve(address spender, uint256 amount) returns (bool)' // [!code hl]\r\n * )\r\n *\r\n * abiItem\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * @example\r\n * It is possible to specify `struct`s along with your definitions:\r\n *\r\n * ```ts twoslash\r\n * import { AbiItem } from 'ox'\r\n *\r\n * const abiItem = AbiItem.from([\r\n *   'struct Foo { address spender; uint256 amount; }', // [!code hl]\r\n *   'function approve(Foo foo) returns (bool)',\r\n * ])\r\n *\r\n * abiItem\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n *\r\n *\r\n * @param abiItem - The ABI Item to parse.\r\n * @returns The typed ABI Item.\r\n */\r\nexport function from<\r\n  const abiItem extends AbiItem | string | readonly string[],\r\n>(\r\n  abiItem: (abiItem | AbiItem | string | readonly string[]) &\r\n    (\r\n      | (abiItem extends string ? internal.Signature<abiItem> : never)\r\n      | (abiItem extends readonly string[]\r\n          ? internal.Signatures<abiItem>\r\n          : never)\r\n      | AbiItem\r\n    ),\r\n  options: from.Options = {},\r\n): from.ReturnType<abiItem> {\r\n  const { prepare = true } = options\r\n  const item = (() => {\r\n    if (Array.isArray(abiItem)) return abitype.parseAbiItem(abiItem)\r\n    if (typeof abiItem === 'string')\r\n      return abitype.parseAbiItem(abiItem as never)\r\n    return abiItem\r\n  })() as AbiItem\r\n  return {\r\n    ...item,\r\n    ...(prepare ? { hash: getSignatureHash(item) } : {}),\r\n  } as never\r\n}\r\n\r\nexport declare namespace from {\r\n  type Options = {\r\n    /**\r\n     * Whether or not to prepare the extracted item (optimization for encoding performance).\r\n     * When `true`, the `hash` property is computed and included in the returned value.\r\n     *\r\n     * @default true\r\n     */\r\n    prepare?: boolean | undefined\r\n  }\r\n\r\n  type ReturnType<abiItem extends AbiItem | string | readonly string[]> =\r\n    abiItem extends string\r\n      ? abitype.ParseAbiItem<abiItem>\r\n      : abiItem extends readonly string[]\r\n        ? abitype.ParseAbiItem<abiItem>\r\n        : abiItem\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Extracts an {@link ox#AbiItem.AbiItem} from an {@link ox#Abi.Abi} given a name and optional arguments.\r\n *\r\n * @example\r\n * ABI Items can be extracted by their name using the `name` option:\r\n *\r\n * ```ts twoslash\r\n * import { Abi, AbiItem } from 'ox'\r\n *\r\n * const abi = Abi.from([\r\n *   'function foo()',\r\n *   'event Transfer(address owner, address to, uint256 tokenId)',\r\n *   'function bar(string a) returns (uint256 x)',\r\n * ])\r\n *\r\n * const item = AbiItem.fromAbi(abi, 'Transfer') // [!code focus]\r\n * //    ^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * @example\r\n * ### Extracting by Selector\r\n *\r\n * ABI Items can be extract by their selector when {@link ox#Hex.Hex} is provided to `name`.\r\n *\r\n * ```ts twoslash\r\n * import { Abi, AbiItem } from 'ox'\r\n *\r\n * const abi = Abi.from([\r\n *   'function foo()',\r\n *   'event Transfer(address owner, address to, uint256 tokenId)',\r\n *   'function bar(string a) returns (uint256 x)',\r\n * ])\r\n * const item = AbiItem.fromAbi(abi, '0x095ea7b3') // [!code focus]\r\n * //    ^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * :::note\r\n *\r\n * Extracting via a hex selector is useful when extracting an ABI Item from an `eth_call` RPC response,\r\n * a Transaction `input`, or from Event Log `topics`.\r\n *\r\n * :::\r\n *\r\n * @param abi - The ABI to extract from.\r\n * @param name - The name (or selector) of the ABI item to extract.\r\n * @param options - Extraction options.\r\n * @returns The ABI item.\r\n */\r\nexport function fromAbi<\r\n  const abi extends Abi.Abi | readonly unknown[],\r\n  name extends Name<abi>,\r\n  const args extends internal.ExtractArgs<abi, name> | undefined = undefined,\r\n  //\r\n  allNames = Name<abi>,\r\n>(\r\n  abi: abi | Abi.Abi | readonly unknown[],\r\n  name: Hex.Hex | (name extends allNames ? name : never),\r\n  options?: fromAbi.Options<abi, name, args>,\r\n): fromAbi.ReturnType<abi, name, args> {\r\n  const { args = [], prepare = true } = (options ??\r\n    {}) as unknown as fromAbi.Options\r\n\r\n  const isSelector = Hex.validate(name, { strict: false })\r\n  const abiItems = (abi as Abi.Abi).filter((abiItem) => {\r\n    if (isSelector) {\r\n      if (abiItem.type === 'function' || abiItem.type === 'error')\r\n        return getSelector(abiItem) === Hex.slice(name, 0, 4)\r\n      if (abiItem.type === 'event') return getSignatureHash(abiItem) === name\r\n      return false\r\n    }\r\n    return 'name' in abiItem && abiItem.name === name\r\n  })\r\n\r\n  if (abiItems.length === 0) throw new NotFoundError({ name: name as string })\r\n  if (abiItems.length === 1)\r\n    return {\r\n      ...abiItems[0],\r\n      ...(prepare ? { hash: getSignatureHash(abiItems[0]!) } : {}),\r\n    } as never\r\n\r\n  let matchedAbiItem: AbiItem | undefined = undefined\r\n  for (const abiItem of abiItems) {\r\n    if (!('inputs' in abiItem)) continue\r\n    if (!args || args.length === 0) {\r\n      if (!abiItem.inputs || abiItem.inputs.length === 0)\r\n        return {\r\n          ...abiItem,\r\n          ...(prepare ? { hash: getSignatureHash(abiItem) } : {}),\r\n        } as never\r\n      continue\r\n    }\r\n    if (!abiItem.inputs) continue\r\n    if (abiItem.inputs.length === 0) continue\r\n    if (abiItem.inputs.length !== args.length) continue\r\n    const matched = args.every((arg, index) => {\r\n      const abiParameter = 'inputs' in abiItem && abiItem.inputs![index]\r\n      if (!abiParameter) return false\r\n      return internal.isArgOfType(arg, abiParameter)\r\n    })\r\n    if (matched) {\r\n      // Check for ambiguity against already matched parameters (e.g. `address` vs `bytes20`).\r\n      if (\r\n        matchedAbiItem &&\r\n        'inputs' in matchedAbiItem &&\r\n        matchedAbiItem.inputs\r\n      ) {\r\n        const ambiguousTypes = internal.getAmbiguousTypes(\r\n          abiItem.inputs,\r\n          matchedAbiItem.inputs,\r\n          args as readonly unknown[],\r\n        )\r\n        if (ambiguousTypes)\r\n          throw new AmbiguityError(\r\n            {\r\n              abiItem,\r\n              type: ambiguousTypes[0]!,\r\n            },\r\n            {\r\n              abiItem: matchedAbiItem,\r\n              type: ambiguousTypes[1]!,\r\n            },\r\n          )\r\n      }\r\n\r\n      matchedAbiItem = abiItem\r\n    }\r\n  }\r\n\r\n  const abiItem = (() => {\r\n    if (matchedAbiItem) return matchedAbiItem\r\n    const [abiItem, ...overloads] = abiItems\r\n    return { ...abiItem!, overloads }\r\n  })()\r\n\r\n  if (!abiItem) throw new NotFoundError({ name: name as string })\r\n  return {\r\n    ...abiItem,\r\n    ...(prepare ? { hash: getSignatureHash(abiItem) } : {}),\r\n  } as never\r\n}\r\n\r\nexport declare namespace fromAbi {\r\n  type Options<\r\n    abi extends Abi.Abi | readonly unknown[] = Abi.Abi,\r\n    name extends Name<abi> = Name<abi>,\r\n    args extends\r\n      | internal.ExtractArgs<abi, name>\r\n      | undefined = internal.ExtractArgs<abi, name>,\r\n    ///\r\n    allArgs = internal.ExtractArgs<abi, name>,\r\n  > = {\r\n    /**\r\n     * Whether or not to prepare the extracted item (optimization for encoding performance).\r\n     * When `true`, the `hash` property is computed and included in the returned value.\r\n     *\r\n     * @default true\r\n     */\r\n    prepare?: boolean | undefined\r\n  } & UnionCompute<\r\n    readonly [] extends allArgs\r\n      ? {\r\n          args?:\r\n            | allArgs // show all options\r\n            // infer value, widen inferred value of `args` conditionally to match `allArgs`\r\n            | (abi extends Abi.Abi\r\n                ? args extends allArgs\r\n                  ? internal.Widen<args>\r\n                  : never\r\n                : never)\r\n            | undefined\r\n        }\r\n      : {\r\n          args?:\r\n            | allArgs // show all options\r\n            | (internal.Widen<args> & (args extends allArgs ? unknown : never)) // infer value, widen inferred value of `args` match `allArgs` (e.g. avoid union `args: readonly [123n] | readonly [bigint]`)\r\n            | undefined\r\n        }\r\n  >\r\n\r\n  type ReturnType<\r\n    abi extends Abi.Abi | readonly unknown[] = Abi.Abi,\r\n    name extends Name<abi> = Name<abi>,\r\n    args extends\r\n      | internal.ExtractArgs<abi, name>\r\n      | undefined = internal.ExtractArgs<abi, name>,\r\n    fallback = AbiItem,\r\n  > = abi extends Abi.Abi\r\n    ? Abi.Abi extends abi\r\n      ? fallback\r\n      : internal.ExtractForArgs<\r\n          abi,\r\n          name,\r\n          args extends internal.ExtractArgs<abi, name>\r\n            ? args\r\n            : internal.ExtractArgs<abi, name>\r\n        >\r\n    : fallback\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Computes the [4-byte selector](https://solidity-by-example.org/function-selector/) for an {@link ox#AbiItem.AbiItem}.\r\n *\r\n * Useful for computing function selectors for calldata.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiItem } from 'ox'\r\n *\r\n * const selector = AbiItem.getSelector('function ownerOf(uint256 tokenId)')\r\n * // @log: '0x6352211e'\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiItem } from 'ox'\r\n *\r\n * const selector = AbiItem.getSelector({\r\n *   inputs: [{ type: 'uint256' }],\r\n *   name: 'ownerOf',\r\n *   outputs: [],\r\n *   stateMutability: 'view',\r\n *   type: 'function'\r\n * })\r\n * // @log: '0x6352211e'\r\n * ```\r\n *\r\n * @param abiItem - The ABI item to compute the selector for. Can be a signature or an ABI item for an error, event, function, etc.\r\n * @returns The first 4 bytes of the {@link ox#Hash.(keccak256:function)} hash of the function signature.\r\n */\r\nexport function getSelector(abiItem: string | AbiItem): Hex.Hex {\r\n  return Hex.slice(getSignatureHash(abiItem), 0, 4)\r\n}\r\n\r\nexport declare namespace getSelector {\r\n  type ErrorType =\r\n    | getSignatureHash.ErrorType\r\n    | Hex.slice.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Computes the stringified signature for a given {@link ox#AbiItem.AbiItem}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiItem } from 'ox'\r\n *\r\n * const signature = AbiItem.getSignature('function ownerOf(uint256 tokenId)')\r\n * // @log: 'ownerOf(uint256)'\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiItem } from 'ox'\r\n *\r\n * const signature = AbiItem.getSignature({\r\n *   name: 'ownerOf',\r\n *   type: 'function',\r\n *   inputs: [{ name: 'tokenId', type: 'uint256' }],\r\n *   outputs: [],\r\n *   stateMutability: 'view',\r\n * })\r\n * // @log: 'ownerOf(uint256)'\r\n * ```\r\n *\r\n * @param abiItem - The ABI Item to compute the signature for.\r\n * @returns The stringified signature of the ABI Item.\r\n */\r\nexport function getSignature(abiItem: string | AbiItem): string {\r\n  const signature = (() => {\r\n    if (typeof abiItem === 'string') return abiItem\r\n    return abitype.formatAbiItem(abiItem)\r\n  })()\r\n  return internal.normalizeSignature(signature)\r\n}\r\n\r\nexport declare namespace getSignature {\r\n  type ErrorType =\r\n    | internal.normalizeSignature.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Computes the signature hash for an {@link ox#AbiItem.AbiItem}.\r\n *\r\n * Useful for computing Event Topic values.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiItem } from 'ox'\r\n *\r\n * const hash = AbiItem.getSignatureHash('event Transfer(address indexed from, address indexed to, uint256 amount)')\r\n * // @log: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiItem } from 'ox'\r\n *\r\n * const hash = AbiItem.getSignatureHash({\r\n *   name: 'Transfer',\r\n *   type: 'event',\r\n *   inputs: [\r\n *     { name: 'from', type: 'address', indexed: true },\r\n *     { name: 'to', type: 'address', indexed: true },\r\n *     { name: 'amount', type: 'uint256', indexed: false },\r\n *   ],\r\n * })\r\n * // @log: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\r\n * ```\r\n *\r\n * @param abiItem - The ABI Item to compute the signature hash for.\r\n * @returns The {@link ox#Hash.(keccak256:function)} hash of the ABI item's signature.\r\n */\r\nexport function getSignatureHash(abiItem: string | AbiItem): Hex.Hex {\r\n  if (typeof abiItem !== 'string' && 'hash' in abiItem && abiItem.hash)\r\n    return abiItem.hash as Hex.Hex\r\n  return Hash.keccak256(Hex.fromString(getSignature(abiItem)))\r\n}\r\n\r\nexport declare namespace getSignatureHash {\r\n  type ErrorType =\r\n    | getSignature.ErrorType\r\n    | Hash.keccak256.ErrorType\r\n    | Hex.fromString.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Throws when ambiguous types are found on overloaded ABI items.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Abi, AbiFunction } from 'ox'\r\n *\r\n * const foo = Abi.from(['function foo(address)', 'function foo(bytes20)'])\r\n * AbiFunction.fromAbi(foo, 'foo', {\r\n *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\r\n * })\r\n * // @error: AbiItem.AmbiguityError: Found ambiguous types in overloaded ABI Items.\r\n * // @error: `bytes20` in `foo(bytes20)`, and\r\n * // @error: `address` in `foo(address)`\r\n * // @error: These types encode differently and cannot be distinguished at runtime.\r\n * // @error: Remove one of the ambiguous items in the ABI.\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Remove one of the ambiguous types from the ABI.\r\n *\r\n * ```ts twoslash\r\n * import { Abi, AbiFunction } from 'ox'\r\n *\r\n * const foo = Abi.from([\r\n *   'function foo(address)',\r\n *   'function foo(bytes20)' // [!code --]\r\n * ])\r\n * AbiFunction.fromAbi(foo, 'foo', {\r\n *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\r\n * })\r\n * // @error: AbiItem.AmbiguityError: Found ambiguous types in overloaded ABI Items.\r\n * // @error: `bytes20` in `foo(bytes20)`, and\r\n * // @error: `address` in `foo(address)`\r\n * // @error: These types encode differently and cannot be distinguished at runtime.\r\n * // @error: Remove one of the ambiguous items in the ABI.\r\n * ```\r\n */\r\nexport class AmbiguityError extends Errors.BaseError {\r\n  override readonly name = 'AbiItem.AmbiguityError'\r\n  constructor(\r\n    x: { abiItem: Abi.Abi[number]; type: string },\r\n    y: { abiItem: Abi.Abi[number]; type: string },\r\n  ) {\r\n    super('Found ambiguous types in overloaded ABI Items.', {\r\n      metaMessages: [\r\n        // TODO: abitype to add support for signature-formatted ABI items.\r\n        `\\`${x.type}\\` in \\`${internal.normalizeSignature(abitype.formatAbiItem(x.abiItem))}\\`, and`,\r\n        `\\`${y.type}\\` in \\`${internal.normalizeSignature(abitype.formatAbiItem(y.abiItem))}\\``,\r\n        '',\r\n        'These types encode differently and cannot be distinguished at runtime.',\r\n        'Remove one of the ambiguous items in the ABI.',\r\n      ],\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Throws when an ABI item is not found in the ABI.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Abi, AbiFunction } from 'ox'\r\n *\r\n * const foo = Abi.from([\r\n *   'function foo(address)',\r\n *   'function bar(uint)'\r\n * ])\r\n * AbiFunction.fromAbi(foo, 'baz')\r\n * // @error: AbiItem.NotFoundError: ABI function with name \"baz\" not found.\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Ensure the ABI item exists on the ABI.\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Abi, AbiFunction } from 'ox'\r\n *\r\n * const foo = Abi.from([\r\n *   'function foo(address)',\r\n *   'function bar(uint)',\r\n *   'function baz(bool)' // [!code ++]\r\n * ])\r\n * AbiFunction.fromAbi(foo, 'baz')\r\n * ```\r\n */\r\nexport class NotFoundError extends Errors.BaseError {\r\n  override readonly name = 'AbiItem.NotFoundError'\r\n  constructor({\r\n    name,\r\n    data,\r\n    type = 'item',\r\n  }: {\r\n    name?: string | undefined\r\n    data?: Hex.Hex | undefined\r\n    type?: string | undefined\r\n  }) {\r\n    const selector = (() => {\r\n      if (name) return ` with name \"${name}\"`\r\n      if (data) return ` with data \"${data}\"`\r\n      return ''\r\n    })()\r\n    super(`ABI ${type}${selector} not found.`)\r\n  }\r\n}\r\n\r\n/**\r\n * Throws when the selector size is invalid.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Abi, AbiFunction } from 'ox'\r\n *\r\n * const foo = Abi.from([\r\n *   'function foo(address)',\r\n *   'function bar(uint)'\r\n * ])\r\n * AbiFunction.fromAbi(foo, '0xaaa')\r\n * // @error: AbiItem.InvalidSelectorSizeError: Selector size is invalid. Expected 4 bytes. Received 2 bytes (\"0xaaa\").\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Ensure the selector size is 4 bytes.\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Abi, AbiFunction } from 'ox'\r\n *\r\n * const foo = Abi.from([\r\n *   'function foo(address)',\r\n *   'function bar(uint)'\r\n * ])\r\n * AbiFunction.fromAbi(foo, '0x7af82b1a')\r\n * ```\r\n */\r\nexport class InvalidSelectorSizeError extends Errors.BaseError {\r\n  override readonly name = 'AbiItem.InvalidSelectorSizeError'\r\n  constructor({ data }: { data: Hex.Hex }) {\r\n    super(\r\n      `Selector size is invalid. Expected 4 bytes. Received ${Hex.size(data)} bytes (\"${data}\").`,\r\n    )\r\n  }\r\n}\r\n", "import type { Bytes } from '../Bytes.js'\r\nimport * as Errors from '../Errors.js'\r\n\r\n/** @internal */\r\nexport type Cursor = {\r\n  bytes: Bytes\r\n  dataView: DataView\r\n  position: number\r\n  positionReadCount: Map<number, number>\r\n  recursiveReadCount: number\r\n  recursiveReadLimit: number\r\n  remaining: number\r\n  assertReadLimit(position?: number): void\r\n  assertPosition(position: number): void\r\n  decrementPosition(offset: number): void\r\n  getReadCount(position?: number): number\r\n  incrementPosition(offset: number): void\r\n  inspectByte(position?: number): Bytes[number]\r\n  inspectBytes(length: number, position?: number): Bytes\r\n  inspectUint8(position?: number): number\r\n  inspectUint16(position?: number): number\r\n  inspectUint24(position?: number): number\r\n  inspectUint32(position?: number): number\r\n  pushByte(byte: Bytes[number]): void\r\n  pushBytes(bytes: Bytes): void\r\n  pushUint8(value: number): void\r\n  pushUint16(value: number): void\r\n  pushUint24(value: number): void\r\n  pushUint32(value: number): void\r\n  readByte(): Bytes[number]\r\n  readBytes(length: number, size?: number): Bytes\r\n  readUint8(): number\r\n  readUint16(): number\r\n  readUint24(): number\r\n  readUint32(): number\r\n  setPosition(position: number): () => void\r\n  _touch(): void\r\n}\r\n\r\nconst staticCursor: Cursor = /*#__PURE__*/ {\r\n  bytes: new Uint8Array(),\r\n  dataView: new DataView(new ArrayBuffer(0)),\r\n  position: 0,\r\n  positionReadCount: new Map(),\r\n  recursiveReadCount: 0,\r\n  recursiveReadLimit: Number.POSITIVE_INFINITY,\r\n  assertReadLimit() {\r\n    if (this.recursiveReadCount >= this.recursiveReadLimit)\r\n      throw new RecursiveReadLimitExceededError({\r\n        count: this.recursiveReadCount + 1,\r\n        limit: this.recursiveReadLimit,\r\n      })\r\n  },\r\n  assertPosition(position) {\r\n    if (position < 0 || position > this.bytes.length - 1)\r\n      throw new PositionOutOfBoundsError({\r\n        length: this.bytes.length,\r\n        position,\r\n      })\r\n  },\r\n  decrementPosition(offset) {\r\n    if (offset < 0) throw new NegativeOffsetError({ offset })\r\n    const position = this.position - offset\r\n    this.assertPosition(position)\r\n    this.position = position\r\n  },\r\n  getReadCount(position) {\r\n    return this.positionReadCount.get(position || this.position) || 0\r\n  },\r\n  incrementPosition(offset) {\r\n    if (offset < 0) throw new NegativeOffsetError({ offset })\r\n    const position = this.position + offset\r\n    this.assertPosition(position)\r\n    this.position = position\r\n  },\r\n  inspectByte(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position)\r\n    return this.bytes[position]!\r\n  },\r\n  inspectBytes(length, position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position + length - 1)\r\n    return this.bytes.subarray(position, position + length)\r\n  },\r\n  inspectUint8(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position)\r\n    return this.bytes[position]!\r\n  },\r\n  inspectUint16(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position + 1)\r\n    return this.dataView.getUint16(position)\r\n  },\r\n  inspectUint24(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position + 2)\r\n    return (\r\n      (this.dataView.getUint16(position) << 8) +\r\n      this.dataView.getUint8(position + 2)\r\n    )\r\n  },\r\n  inspectUint32(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position + 3)\r\n    return this.dataView.getUint32(position)\r\n  },\r\n  pushByte(byte: Bytes[number]) {\r\n    this.assertPosition(this.position)\r\n    this.bytes[this.position] = byte\r\n    this.position++\r\n  },\r\n  pushBytes(bytes: Bytes) {\r\n    this.assertPosition(this.position + bytes.length - 1)\r\n    this.bytes.set(bytes, this.position)\r\n    this.position += bytes.length\r\n  },\r\n  pushUint8(value: number) {\r\n    this.assertPosition(this.position)\r\n    this.bytes[this.position] = value\r\n    this.position++\r\n  },\r\n  pushUint16(value: number) {\r\n    this.assertPosition(this.position + 1)\r\n    this.dataView.setUint16(this.position, value)\r\n    this.position += 2\r\n  },\r\n  pushUint24(value: number) {\r\n    this.assertPosition(this.position + 2)\r\n    this.dataView.setUint16(this.position, value >> 8)\r\n    this.dataView.setUint8(this.position + 2, value & ~4294967040)\r\n    this.position += 3\r\n  },\r\n  pushUint32(value: number) {\r\n    this.assertPosition(this.position + 3)\r\n    this.dataView.setUint32(this.position, value)\r\n    this.position += 4\r\n  },\r\n  readByte() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectByte()\r\n    this.position++\r\n    return value\r\n  },\r\n  readBytes(length, size) {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectBytes(length)\r\n    this.position += size ?? length\r\n    return value\r\n  },\r\n  readUint8() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectUint8()\r\n    this.position += 1\r\n    return value\r\n  },\r\n  readUint16() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectUint16()\r\n    this.position += 2\r\n    return value\r\n  },\r\n  readUint24() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectUint24()\r\n    this.position += 3\r\n    return value\r\n  },\r\n  readUint32() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectUint32()\r\n    this.position += 4\r\n    return value\r\n  },\r\n  get remaining() {\r\n    return this.bytes.length - this.position\r\n  },\r\n  setPosition(position) {\r\n    const oldPosition = this.position\r\n    this.assertPosition(position)\r\n    this.position = position\r\n    return () => (this.position = oldPosition)\r\n  },\r\n  _touch() {\r\n    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY) return\r\n    const count = this.getReadCount()\r\n    this.positionReadCount.set(this.position, count + 1)\r\n    if (count > 0) this.recursiveReadCount++\r\n  },\r\n}\r\n\r\n/** @internal */\r\nexport function create(\r\n  bytes: Bytes,\r\n  { recursiveReadLimit = 8_192 }: create.Config = {},\r\n): Cursor {\r\n  const cursor: Cursor = Object.create(staticCursor)\r\n  cursor.bytes = bytes\r\n  cursor.dataView = new DataView(\r\n    bytes.buffer,\r\n    bytes.byteOffset,\r\n    bytes.byteLength,\r\n  )\r\n  cursor.positionReadCount = new Map()\r\n  cursor.recursiveReadLimit = recursiveReadLimit\r\n  return cursor\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace create {\r\n  type Config = { recursiveReadLimit?: number | undefined }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport class NegativeOffsetError extends Errors.BaseError {\r\n  override readonly name = 'Cursor.NegativeOffsetError'\r\n\r\n  constructor({ offset }: { offset: number }) {\r\n    super(`Offset \\`${offset}\\` cannot be negative.`)\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class PositionOutOfBoundsError extends Errors.BaseError {\r\n  override readonly name = 'Cursor.PositionOutOfBoundsError'\r\n\r\n  constructor({ length, position }: { length: number; position: number }) {\r\n    super(\r\n      `Position \\`${position}\\` is out of bounds (\\`0 < position < ${length}\\`).`,\r\n    )\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class RecursiveReadLimitExceededError extends Errors.BaseError {\r\n  override readonly name = 'Cursor.RecursiveReadLimitExceededError'\r\n\r\n  constructor({ count, limit }: { count: number; limit: number }) {\r\n    super(\r\n      `Recursive read limit of \\`${limit}\\` exceeded (recursive read count: \\`${count}\\`).`,\r\n    )\r\n  }\r\n}\r\n", "import * as abitype from 'abitype'\r\nimport * as Address from './Address.js'\r\nimport * as Bytes from './Bytes.js'\r\nimport * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\nimport * as Solidity from './Solidity.js'\r\nimport * as internal from './internal/abiParameters.js'\r\nimport * as Cursor from './internal/cursor.js'\r\n\r\n/** Root type for ABI parameters. */\r\nexport type AbiParameters = readonly abitype.AbiParameter[]\r\n\r\n/** A parameter on an {@link ox#AbiParameters.AbiParameters}. */\r\nexport type Parameter = abitype.AbiParameter\r\n\r\n/** A packed ABI type. */\r\nexport type PackedAbiType =\r\n  | abitype.SolidityAddress\r\n  | abitype.SolidityBool\r\n  | abitype.SolidityBytes\r\n  | abitype.SolidityInt\r\n  | abitype.SolidityString\r\n  | abitype.SolidityArrayWithoutTuple\r\n\r\n/**\r\n * Decodes ABI-encoded data into its respective primitive values based on ABI Parameters.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const data = AbiParameters.decode(\r\n *   AbiParameters.from(['string', 'uint', 'bool']),\r\n *   '0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000',\r\n * )\r\n * // @log: ['wagmi', 420n, true]\r\n * ```\r\n *\r\n * @example\r\n * ### JSON Parameters\r\n *\r\n * You can pass **JSON ABI** Parameters:\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const data = AbiParameters.decode(\r\n *   [\r\n *     { name: 'x', type: 'string' },\r\n *     { name: 'y', type: 'uint' },\r\n *     { name: 'z', type: 'bool' },\r\n *   ],\r\n *   '0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000',\r\n * )\r\n * // @log: ['wagmi', 420n, true]\r\n * ```\r\n *\r\n * @param parameters - The set of ABI parameters to decode, in the shape of the `inputs` or `outputs` attribute of an ABI Item. These parameters must include valid [ABI types](https://docs.soliditylang.org/en/latest/types.html).\r\n * @param data - ABI encoded data.\r\n * @param options - Decoding options.\r\n * @returns Array of decoded values.\r\n */\r\nexport function decode<\r\n  const parameters extends AbiParameters,\r\n  as extends 'Object' | 'Array' = 'Array',\r\n>(\r\n  parameters: parameters,\r\n  data: Bytes.Bytes | Hex.Hex,\r\n  options?: decode.Options<as>,\r\n): decode.ReturnType<parameters, as>\r\n\r\n// eslint-disable-next-line jsdoc/require-jsdoc\r\nexport function decode(\r\n  parameters: AbiParameters,\r\n  data: Bytes.Bytes | Hex.Hex,\r\n  options: {\r\n    as?: 'Array' | 'Object' | undefined\r\n    checksumAddress?: boolean | undefined\r\n  } = {},\r\n): readonly unknown[] | Record<string, unknown> {\r\n  const { as = 'Array', checksumAddress = false } = options\r\n\r\n  const bytes = typeof data === 'string' ? Bytes.fromHex(data) : data\r\n  const cursor = Cursor.create(bytes)\r\n\r\n  if (Bytes.size(bytes) === 0 && parameters.length > 0)\r\n    throw new ZeroDataError()\r\n  if (Bytes.size(bytes) && Bytes.size(bytes) < 32)\r\n    throw new DataSizeTooSmallError({\r\n      data: typeof data === 'string' ? data : Hex.fromBytes(data),\r\n      parameters: parameters as readonly Parameter[],\r\n      size: Bytes.size(bytes),\r\n    })\r\n\r\n  let consumed = 0\r\n  const values: any = as === 'Array' ? [] : {}\r\n  for (let i = 0; i < parameters.length; ++i) {\r\n    const param = parameters[i] as Parameter\r\n    cursor.setPosition(consumed)\r\n    const [data, consumed_] = internal.decodeParameter(cursor, param, {\r\n      checksumAddress,\r\n      staticPosition: 0,\r\n    })\r\n    consumed += consumed_\r\n    if (as === 'Array') values.push(data)\r\n    else values[param.name ?? i] = data\r\n  }\r\n  return values\r\n}\r\n\r\nexport declare namespace decode {\r\n  type Options<as extends 'Object' | 'Array'> = {\r\n    /**\r\n     * Whether the decoded values should be returned as an `Object` or `Array`.\r\n     *\r\n     * @default \"Array\"\r\n     */\r\n    as?: as | 'Object' | 'Array' | undefined\r\n    /**\r\n     * Whether decoded addresses should be checksummed.\r\n     *\r\n     * @default false\r\n     */\r\n    checksumAddress?: boolean | undefined\r\n  }\r\n\r\n  type ReturnType<\r\n    parameters extends AbiParameters = AbiParameters,\r\n    as extends 'Object' | 'Array' = 'Array',\r\n  > = parameters extends readonly []\r\n    ? as extends 'Object'\r\n      ? {}\r\n      : []\r\n    : as extends 'Object'\r\n      ? internal.ToObject<parameters>\r\n      : internal.ToPrimitiveTypes<parameters>\r\n\r\n  type ErrorType =\r\n    | Bytes.fromHex.ErrorType\r\n    | internal.decodeParameter.ErrorType\r\n    | ZeroDataError\r\n    | DataSizeTooSmallError\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes primitive values into ABI encoded data as per the [Application Binary Interface (ABI) Specification](https://docs.soliditylang.org/en/latest/abi-spec).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const data = AbiParameters.encode(\r\n *   AbiParameters.from(['string', 'uint', 'bool']),\r\n *   ['wagmi', 420n, true],\r\n * )\r\n * ```\r\n *\r\n * @example\r\n * ### JSON Parameters\r\n *\r\n * Specify **JSON ABI** Parameters as schema:\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const data = AbiParameters.encode(\r\n *   [\r\n *     { type: 'string', name: 'name' },\r\n *     { type: 'uint', name: 'age' },\r\n *     { type: 'bool', name: 'isOwner' },\r\n *   ],\r\n *   ['wagmi', 420n, true],\r\n * )\r\n * ```\r\n *\r\n * @param parameters - The set of ABI parameters to encode, in the shape of the `inputs` or `outputs` attribute of an ABI Item. These parameters must include valid [ABI types](https://docs.soliditylang.org/en/latest/types.html).\r\n * @param values - The set of primitive values that correspond to the ABI types defined in `parameters`.\r\n * @returns ABI encoded data.\r\n */\r\nexport function encode<\r\n  const parameters extends AbiParameters | readonly unknown[],\r\n>(\r\n  parameters: parameters,\r\n  values: parameters extends AbiParameters\r\n    ? internal.ToPrimitiveTypes<parameters>\r\n    : never,\r\n  options?: encode.Options,\r\n): Hex.Hex {\r\n  const { checksumAddress = false } = options ?? {}\r\n\r\n  if (parameters.length !== values.length)\r\n    throw new LengthMismatchError({\r\n      expectedLength: parameters.length as number,\r\n      givenLength: values.length as any,\r\n    })\r\n  // Prepare the parameters to determine dynamic types to encode.\r\n  const preparedParameters = internal.prepareParameters({\r\n    checksumAddress,\r\n    parameters: parameters as readonly Parameter[],\r\n    values: values as any,\r\n  })\r\n  const data = internal.encode(preparedParameters)\r\n  if (data.length === 0) return '0x'\r\n  return data\r\n}\r\n\r\nexport declare namespace encode {\r\n  type ErrorType =\r\n    | LengthMismatchError\r\n    | internal.encode.ErrorType\r\n    | internal.prepareParameters.ErrorType\r\n    | Errors.GlobalErrorType\r\n\r\n  type Options = {\r\n    /**\r\n     * Whether addresses should be checked against their checksum.\r\n     *\r\n     * @default false\r\n     */\r\n    checksumAddress?: boolean | undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Encodes an array of primitive values to a [packed ABI encoding](https://docs.soliditylang.org/en/latest/abi-spec.html#non-standard-packed-mode).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const encoded = AbiParameters.encodePacked(\r\n *   ['address', 'string'],\r\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 'hello world'],\r\n * )\r\n * // @log: '0xd8da6bf26964af9d7eed9e03e53415d37aa9604568656c6c6f20776f726c64'\r\n * ```\r\n *\r\n * @param types - Set of ABI types to pack encode.\r\n * @param values - The set of primitive values that correspond to the ABI types defined in `types`.\r\n * @returns The encoded packed data.\r\n */\r\nexport function encodePacked<\r\n  const packedAbiTypes extends readonly PackedAbiType[] | readonly unknown[],\r\n>(types: packedAbiTypes, values: encodePacked.Values<packedAbiTypes>): Hex.Hex {\r\n  if (types.length !== values.length)\r\n    throw new LengthMismatchError({\r\n      expectedLength: types.length as number,\r\n      givenLength: values.length as number,\r\n    })\r\n\r\n  const data: Hex.Hex[] = []\r\n  for (let i = 0; i < (types as unknown[]).length; i++) {\r\n    const type = types[i]\r\n    const value = values[i]\r\n    data.push(encodePacked.encode(type, value))\r\n  }\r\n  return Hex.concat(...data)\r\n}\r\n\r\nexport namespace encodePacked {\r\n  export type ErrorType =\r\n    | Hex.concat.ErrorType\r\n    | LengthMismatchError\r\n    | Errors.GlobalErrorType\r\n\r\n  export type Values<\r\n    packedAbiTypes extends readonly PackedAbiType[] | readonly unknown[],\r\n  > = {\r\n    [key in keyof packedAbiTypes]: packedAbiTypes[key] extends abitype.AbiType\r\n      ? abitype.AbiParameterToPrimitiveType<{ type: packedAbiTypes[key] }>\r\n      : unknown\r\n  }\r\n\r\n  // eslint-disable-next-line jsdoc/require-jsdoc\r\n  export function encode<const packedAbiType extends PackedAbiType | unknown>(\r\n    type: packedAbiType,\r\n    value: Values<[packedAbiType]>[0],\r\n    isArray = false,\r\n  ): Hex.Hex {\r\n    if (type === 'address') {\r\n      const address = value as Address.Address\r\n      Address.assert(address)\r\n      return Hex.padLeft(\r\n        address.toLowerCase() as Hex.Hex,\r\n        isArray ? 32 : 0,\r\n      ) as Address.Address\r\n    }\r\n    if (type === 'string') return Hex.fromString(value as string)\r\n    if (type === 'bytes') return value as Hex.Hex\r\n    if (type === 'bool')\r\n      return Hex.padLeft(Hex.fromBoolean(value as boolean), isArray ? 32 : 1)\r\n\r\n    const intMatch = (type as string).match(Solidity.integerRegex)\r\n    if (intMatch) {\r\n      const [_type, baseType, bits = '256'] = intMatch\r\n      const size = Number.parseInt(bits) / 8\r\n      return Hex.fromNumber(value as number, {\r\n        size: isArray ? 32 : size,\r\n        signed: baseType === 'int',\r\n      })\r\n    }\r\n\r\n    const bytesMatch = (type as string).match(Solidity.bytesRegex)\r\n    if (bytesMatch) {\r\n      const [_type, size] = bytesMatch\r\n      if (Number.parseInt(size!) !== ((value as Hex.Hex).length - 2) / 2)\r\n        throw new BytesSizeMismatchError({\r\n          expectedSize: Number.parseInt(size!),\r\n          value: value as Hex.Hex,\r\n        })\r\n      return Hex.padRight(value as Hex.Hex, isArray ? 32 : 0) as Hex.Hex\r\n    }\r\n\r\n    const arrayMatch = (type as string).match(Solidity.arrayRegex)\r\n    if (arrayMatch && Array.isArray(value)) {\r\n      const [_type, childType] = arrayMatch\r\n      const data: Hex.Hex[] = []\r\n      for (let i = 0; i < value.length; i++) {\r\n        data.push(encode(childType, value[i], true))\r\n      }\r\n      if (data.length === 0) return '0x'\r\n      return Hex.concat(...data)\r\n    }\r\n\r\n    throw new InvalidTypeError(type as string)\r\n  }\r\n}\r\n\r\n/**\r\n * Formats {@link ox#AbiParameters.AbiParameters} into **Human Readable ABI Parameters**.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const formatted = AbiParameters.format([\r\n *   {\r\n *     name: 'spender',\r\n *     type: 'address',\r\n *   },\r\n *   {\r\n *     name: 'amount',\r\n *     type: 'uint256',\r\n *   },\r\n * ])\r\n *\r\n * formatted\r\n * //    ^?\r\n *\r\n *\r\n * ```\r\n *\r\n * @param parameters - The ABI Parameters to format.\r\n * @returns The formatted ABI Parameters  .\r\n */\r\nexport function format<\r\n  const parameters extends readonly [\r\n    Parameter | abitype.AbiEventParameter,\r\n    ...(readonly (Parameter | abitype.AbiEventParameter)[]),\r\n  ],\r\n>(\r\n  parameters:\r\n    | parameters\r\n    | readonly [\r\n        Parameter | abitype.AbiEventParameter,\r\n        ...(readonly (Parameter | abitype.AbiEventParameter)[]),\r\n      ],\r\n): abitype.FormatAbiParameters<parameters> {\r\n  return abitype.formatAbiParameters(parameters)\r\n}\r\n\r\nexport declare namespace format {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Parses arbitrary **JSON ABI Parameters** or **Human Readable ABI Parameters** into typed {@link ox#AbiParameters.AbiParameters}.\r\n *\r\n * @example\r\n * ### JSON Parameters\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const parameters = AbiParameters.from([\r\n *   {\r\n *     name: 'spender',\r\n *     type: 'address',\r\n *   },\r\n *   {\r\n *     name: 'amount',\r\n *     type: 'uint256',\r\n *   },\r\n * ])\r\n *\r\n * parameters\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * @example\r\n * ### Human Readable Parameters\r\n *\r\n * Human Readable ABI Parameters can be parsed into a typed {@link ox#AbiParameters.AbiParameters}:\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const parameters = AbiParameters.from('address spender, uint256 amount')\r\n *\r\n * parameters\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * @example\r\n * It is possible to specify `struct`s along with your definitions:\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const parameters = AbiParameters.from([\r\n *   'struct Foo { address spender; uint256 amount; }', // [!code hl]\r\n *   'Foo foo, address bar',\r\n * ])\r\n *\r\n * parameters\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n *\r\n *\r\n * @param parameters - The ABI Parameters to parse.\r\n * @returns The typed ABI Parameters.\r\n */\r\nexport function from<\r\n  const parameters extends AbiParameters | string | readonly string[],\r\n>(\r\n  parameters: parameters | AbiParameters | string | readonly string[],\r\n): from.ReturnType<parameters> {\r\n  if (Array.isArray(parameters) && typeof parameters[0] === 'string')\r\n    return abitype.parseAbiParameters(parameters) as never\r\n  if (typeof parameters === 'string')\r\n    return abitype.parseAbiParameters(parameters) as never\r\n  return parameters as never\r\n}\r\n\r\nexport declare namespace from {\r\n  type ReturnType<\r\n    parameters extends AbiParameters | string | readonly string[],\r\n  > = parameters extends string\r\n    ? abitype.ParseAbiParameters<parameters>\r\n    : parameters extends readonly string[]\r\n      ? abitype.ParseAbiParameters<parameters>\r\n      : parameters\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Throws when the data size is too small for the given parameters.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * AbiParameters.decode([{ type: 'uint256' }], '0x010f')\r\n * //                                             ↑ ❌ 2 bytes\r\n * // @error: AbiParameters.DataSizeTooSmallError: Data size of 2 bytes is too small for given parameters.\r\n * // @error: Params: (uint256)\r\n * // @error: Data:   0x010f (2 bytes)\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Pass a valid data size.\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * AbiParameters.decode([{ type: 'uint256' }], '0x00000000000000000000000000000000000000000000000000000000000010f')\r\n * //                                             ↑ ✅ 32 bytes\r\n * ```\r\n */\r\nexport class DataSizeTooSmallError extends Errors.BaseError {\r\n  override readonly name = 'AbiParameters.DataSizeTooSmallError'\r\n  constructor({\r\n    data,\r\n    parameters,\r\n    size,\r\n  }: { data: Hex.Hex; parameters: readonly Parameter[]; size: number }) {\r\n    super(`Data size of ${size} bytes is too small for given parameters.`, {\r\n      metaMessages: [\r\n        `Params: (${abitype.formatAbiParameters(parameters as readonly [Parameter])})`,\r\n        `Data:   ${data} (${size} bytes)`,\r\n      ],\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Throws when zero data is provided, but data is expected.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * AbiParameters.decode([{ type: 'uint256' }], '0x')\r\n * //                                           ↑ ❌ zero data\r\n * // @error: AbiParameters.DataSizeTooSmallError: Data size of 2 bytes is too small for given parameters.\r\n * // @error: Params: (uint256)\r\n * // @error: Data:   0x010f (2 bytes)\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Pass valid data.\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * AbiParameters.decode([{ type: 'uint256' }], '0x00000000000000000000000000000000000000000000000000000000000010f')\r\n * //                                             ↑ ✅ 32 bytes\r\n * ```\r\n */\r\nexport class ZeroDataError extends Errors.BaseError {\r\n  override readonly name = 'AbiParameters.ZeroDataError'\r\n  constructor() {\r\n    super('Cannot decode zero data (\"0x\") with ABI parameters.')\r\n  }\r\n}\r\n\r\n/**\r\n * The length of the array value does not match the length specified in the corresponding ABI parameter.\r\n *\r\n * ### Example\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { AbiParameters } from 'ox'\r\n * // ---cut---\r\n * AbiParameters.encode(AbiParameters.from('uint256[3]'), [[69n, 420n]])\r\n * //                                               ↑ expected: 3  ↑ ❌ length: 2\r\n * // @error: AbiParameters.ArrayLengthMismatchError: ABI encoding array length mismatch\r\n * // @error: for type `uint256[3]`. Expected: `3`. Given: `2`.\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Pass an array of the correct length.\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n * // ---cut---\r\n * AbiParameters.encode(AbiParameters.from(['uint256[3]']), [[69n, 420n, 69n]])\r\n * //                                                         ↑ ✅ length: 3\r\n * ```\r\n */\r\nexport class ArrayLengthMismatchError extends Errors.BaseError {\r\n  override readonly name = 'AbiParameters.ArrayLengthMismatchError'\r\n  constructor({\r\n    expectedLength,\r\n    givenLength,\r\n    type,\r\n  }: { expectedLength: number; givenLength: number; type: string }) {\r\n    super(\r\n      `Array length mismatch for type \\`${type}\\`. Expected: \\`${expectedLength}\\`. Given: \\`${givenLength}\\`.`,\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * The size of the bytes value does not match the size specified in the corresponding ABI parameter.\r\n *\r\n * ### Example\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { AbiParameters } from 'ox'\r\n * // ---cut---\r\n * AbiParameters.encode(AbiParameters.from('bytes8'), [['0xdeadbeefdeadbeefdeadbeef']])\r\n * //                                            ↑ expected: 8 bytes  ↑ ❌ size: 12 bytes\r\n * // @error: BytesSizeMismatchError: Size of bytes \"0xdeadbeefdeadbeefdeadbeef\"\r\n * // @error: (bytes12) does not match expected size (bytes8).\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Pass a bytes value of the correct size.\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n * // ---cut---\r\n * AbiParameters.encode(AbiParameters.from(['bytes8']), ['0xdeadbeefdeadbeef'])\r\n * //                                                       ↑ ✅ size: 8 bytes\r\n * ```\r\n */\r\nexport class BytesSizeMismatchError extends Errors.BaseError {\r\n  override readonly name = 'AbiParameters.BytesSizeMismatchError'\r\n  constructor({\r\n    expectedSize,\r\n    value,\r\n  }: { expectedSize: number; value: Hex.Hex }) {\r\n    super(\r\n      `Size of bytes \"${value}\" (bytes${Hex.size(\r\n        value,\r\n      )}) does not match expected size (bytes${expectedSize}).`,\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * The length of the values to encode does not match the length of the ABI parameters.\r\n *\r\n * ### Example\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { AbiParameters } from 'ox'\r\n * // ---cut---\r\n * AbiParameters.encode(AbiParameters.from(['string', 'uint256']), ['hello'])\r\n * // @error: LengthMismatchError: ABI encoding params/values length mismatch.\r\n * // @error: Expected length (params): 2\r\n * // @error: Given length (values): 1\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Pass the correct number of values to encode.\r\n *\r\n * ### Solution\r\n *\r\n * Pass a [valid ABI type](https://docs.soliditylang.org/en/develop/abi-spec.html#types).\r\n */\r\nexport class LengthMismatchError extends Errors.BaseError {\r\n  override readonly name = 'AbiParameters.LengthMismatchError'\r\n  constructor({\r\n    expectedLength,\r\n    givenLength,\r\n  }: { expectedLength: number; givenLength: number }) {\r\n    super(\r\n      [\r\n        'ABI encoding parameters/values length mismatch.',\r\n        `Expected length (parameters): ${expectedLength}`,\r\n        `Given length (values): ${givenLength}`,\r\n      ].join('\\n'),\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * The value provided is not a valid array as specified in the corresponding ABI parameter.\r\n *\r\n * ### Example\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { AbiParameters } from 'ox'\r\n * // ---cut---\r\n * AbiParameters.encode(AbiParameters.from(['uint256[3]']), [69])\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Pass an array value.\r\n */\r\nexport class InvalidArrayError extends Errors.BaseError {\r\n  override readonly name = 'AbiParameters.InvalidArrayError'\r\n  constructor(value: unknown) {\r\n    super(`Value \\`${value}\\` is not a valid array.`)\r\n  }\r\n}\r\n\r\n/**\r\n * Throws when the ABI parameter type is invalid.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * AbiParameters.decode([{ type: 'lol' }], '0x00000000000000000000000000000000000000000000000000000000000010f')\r\n * //                             ↑ ❌ invalid type\r\n * // @error: AbiParameters.InvalidTypeError: Type `lol` is not a valid ABI Type.\r\n * ```\r\n */\r\nexport class InvalidTypeError extends Errors.BaseError {\r\n  override readonly name = 'AbiParameters.InvalidTypeError'\r\n  constructor(type: string) {\r\n    super(`Type \\`${type}\\` is not a valid ABI Type.`)\r\n  }\r\n}\r\n", "import * as abitype from 'abitype'\r\nimport type * as Abi from './Abi.js'\r\nimport * as AbiItem from './AbiItem.js'\r\nimport * as AbiParameters from './AbiParameters.js'\r\nimport type * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\nimport type * as internal from './internal/abiError.js'\r\nimport type * as AbiItem_internal from './internal/abiItem.js'\r\nimport type { IsNarrowable, IsNever } from './internal/types.js'\r\n\r\n/** Root type for an {@link ox#AbiItem.AbiItem} with an `error` type. */\r\nexport type AbiError = abitype.AbiError & {\r\n  hash?: Hex.Hex | undefined\r\n  overloads?: readonly AbiError[] | undefined\r\n}\r\n\r\n/** @internal */\r\nexport function decode<\r\n  const abiError extends AbiError,\r\n  as extends 'Object' | 'Array' = 'Array',\r\n>(\r\n  abiError: abiError,\r\n  data: Hex.Hex,\r\n  options?: decode.Options<as> | undefined,\r\n): decode.ReturnType<abiError, as>\r\n/**\r\n * ABI-decodes the provided error input (`inputs`).\r\n *\r\n * :::tip\r\n *\r\n * This function is typically used to decode contract function reverts (e.g. a JSON-RPC error response).\r\n *\r\n * See the [End-to-end Example](#end-to-end).\r\n *\r\n * :::\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const error = AbiError.from('error InvalidSignature(uint r, uint s, uint8 yParity)')\r\n *\r\n * const value = AbiError.decode(error, '0xecde634900000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001')\r\n * // @log: [420n, 69n, 1]\r\n * ```\r\n *\r\n * @example\r\n * You can extract an ABI Error from a JSON ABI with {@link ox#AbiError.(fromAbi:function)}:\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Abi, AbiError } from 'ox'\r\n *\r\n * const abi = Abi.from([...]) // [!code hl]\r\n * const error = AbiError.fromAbi(abi, 'InvalidSignature') // [!code hl]\r\n *\r\n * const value = AbiError.decode(error, '0xecde634900000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001')\r\n * // @log: [420n, 69n, 1]\r\n * ```\r\n *\r\n * @example\r\n * You can pass the error `data` to the `name` property of {@link ox#AbiError.(fromAbi:function)} to extract and infer the error by its 4-byte selector:\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Abi, AbiError } from 'ox'\r\n *\r\n * const data = '0xecde634900000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001'\r\n *\r\n * const abi = Abi.from([...])\r\n * const error = AbiError.fromAbi(abi, data) // [!code hl]\r\n *\r\n * const value = AbiError.decode(error, data)\r\n * // @log: [420n, 69n, 1]\r\n * ```\r\n *\r\n * @example\r\n * ### End-to-end\r\n *\r\n * Below is an end-to-end example of using `AbiError.decode` to decode the revert error of an `approve` contract call on the [Wagmi Mint Example contract](https://etherscan.io/address/0xfba3912ca04dd458c843e2ee08967fc04f3579c2).\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import 'ox/window'\r\n * import { Abi, AbiError, AbiFunction } from 'ox'\r\n *\r\n * // 1. Extract the Function from the Contract's ABI.\r\n * const abi = Abi.from([\r\n *   // ...\r\n *   {\r\n *     inputs: [\r\n *       { name: 'to', type: 'address' },\r\n *       { name: 'tokenId', type: 'uint256' },\r\n *     ],\r\n *     name: 'approve',\r\n *     outputs: [],\r\n *     stateMutability: 'nonpayable',\r\n *     type: 'function',\r\n *   },\r\n *   // ...\r\n * ])\r\n * const approve = AbiFunction.fromAbi(abi, 'approve')\r\n *\r\n * // 2. Encode the Function Input.\r\n * const data = AbiFunction.encodeData(\r\n *   approve,\r\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n]\r\n * )\r\n *\r\n * try {\r\n *   // 3. Attempt to perform the the Contract Call.\r\n *   await window.ethereum!.request({\r\n *     method: 'eth_call',\r\n *     params: [\r\n *       {\r\n *         data,\r\n *         to: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\r\n *       },\r\n *     ],\r\n *   })\r\n * } catch (e) { // [!code focus]\r\n *   // 4. Extract and decode the Error. // [!code focus]\r\n *   const error = AbiError.fromAbi(abi, e.data) // [!code focus]\r\n *   const value = AbiError.decode(error, e.data) // [!code focus]\r\n *   console.error(`${error.name}(${value})`) // [!code focus]\r\n * // @error:   Error(ERC721: approve caller is not owner nor approved for all)\r\n * } // [!code focus]\r\n * ```\r\n *\r\n * :::note\r\n *\r\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\r\n * type of JSON-RPC interface.\r\n *\r\n * :::\r\n *\r\n * @param abiError - The ABI Error to decode.\r\n * @param data - The error data.\r\n * @param options - Decoding options.\r\n * @returns The decoded error.\r\n */\r\nexport function decode(\r\n  abiError: AbiError,\r\n  data: Hex.Hex,\r\n  options?: decode.Options | undefined,\r\n): unknown | readonly unknown[] | undefined\r\n/** @internal */\r\nexport function decode(\r\n  abiError: AbiError,\r\n  data: Hex.Hex,\r\n  options: decode.Options = {},\r\n): decode.ReturnType {\r\n  if (Hex.size(data) < 4) throw new AbiItem.InvalidSelectorSizeError({ data })\r\n  if (abiError.inputs.length === 0) return undefined\r\n\r\n  const values = AbiParameters.decode(\r\n    abiError.inputs,\r\n    Hex.slice(data, 4),\r\n    options,\r\n  )\r\n  if (values && Object.keys(values).length === 1) {\r\n    if (Array.isArray(values)) return values[0]\r\n    return Object.values(values)[0]\r\n  }\r\n  return values\r\n}\r\n\r\nexport declare namespace decode {\r\n  type Options<as extends 'Object' | 'Array' = 'Array'> = {\r\n    /**\r\n     * Whether the decoded values should be returned as an `Object` or `Array`.\r\n     *\r\n     * @default \"Array\"\r\n     */\r\n    as?: as | 'Array' | 'Object' | undefined\r\n  }\r\n\r\n  type ReturnType<\r\n    abiError extends AbiError = AbiError,\r\n    as extends 'Object' | 'Array' = 'Array',\r\n  > = IsNarrowable<abiError, AbiError> extends true\r\n    ? abiError['inputs'] extends readonly []\r\n      ? undefined\r\n      : abiError['inputs'] extends readonly [\r\n            infer type extends abitype.AbiParameter,\r\n          ]\r\n        ? abitype.AbiParameterToPrimitiveType<type>\r\n        : AbiParameters.decode.ReturnType<\r\n              abiError['inputs'],\r\n              as\r\n            > extends infer types\r\n          ? types extends readonly []\r\n            ? undefined\r\n            : types extends readonly [infer type]\r\n              ? type\r\n              : types\r\n          : never\r\n    : unknown | readonly unknown[] | undefined\r\n\r\n  type ErrorType =\r\n    | AbiParameters.decode.ErrorType\r\n    | Hex.size.ErrorType\r\n    | typeof AbiItem.InvalidSelectorSizeError\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * ABI-encodes the provided error input (`inputs`), prefixed with the 4 byte error selector.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const error = AbiError.from(\r\n *   'error InvalidSignature(uint r, uint s, uint8 yParity)'\r\n * )\r\n *\r\n * const data = AbiError.encode( // [!code focus]\r\n *   error, // [!code focus]\r\n *   [1n, 2n, 0] // [!code focus]\r\n * ) // [!code focus]\r\n * // @log: '0x095ea7b3000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000000000000000000010f2c'\r\n * ```\r\n *\r\n * @example\r\n * You can extract an ABI Error from a JSON ABI with {@link ox#AbiError.(fromAbi:function)}:\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Abi, AbiError } from 'ox'\r\n *\r\n * const abi = Abi.from([ // [!code hl]\r\n *   // ... // [!code hl]\r\n *   { // [!code hl]\r\n *     name: 'InvalidSignature', // [!code hl]\r\n *     type: 'error', // [!code hl]\r\n *     inputs: [ // [!code hl]\r\n *       { name: 'r', type: 'uint256' }, // [!code hl]\r\n *       { name: 's', type: 'uint256' }, // [!code hl]\r\n *       { name: 'yParity', type: 'uint8' }, // [!code hl]\r\n *     ], // [!code hl]\r\n *   }, // [!code hl]\r\n *   // ... // [!code hl]\r\n * ]) // [!code hl]\r\n * const error = AbiError.fromAbi(abi, 'InvalidSignature') // [!code hl]\r\n *\r\n * const data = AbiError.encode(\r\n *   error,\r\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n]\r\n * )\r\n * // @log: '0x095ea7b3000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000000000000000000010f2c'\r\n * ```\r\n *\r\n * @param abiError - ABI Error to encode\r\n * @param args - Error arguments\r\n * @returns ABI-encoded error name and arguments\r\n */\r\nexport function encode<const abiError extends AbiError>(\r\n  abiError: abiError,\r\n  ...args: encode.Args<abiError>\r\n): encode.ReturnType {\r\n  const selector = getSelector(abiError)\r\n\r\n  const data =\r\n    args.length > 0\r\n      ? AbiParameters.encode(abiError.inputs, (args as any)[0])\r\n      : undefined\r\n\r\n  return data ? Hex.concat(selector, data) : selector\r\n}\r\n\r\nexport declare namespace encode {\r\n  type Args<abiError extends AbiError = AbiError> = IsNarrowable<\r\n    abiError,\r\n    AbiError\r\n  > extends true\r\n    ? abitype.AbiParametersToPrimitiveTypes<\r\n        abiError['inputs']\r\n      > extends readonly []\r\n      ? []\r\n      : [abitype.AbiParametersToPrimitiveTypes<abiError['inputs']>]\r\n    : readonly unknown[]\r\n\r\n  type ReturnType = Hex.Hex\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Formats an {@link ox#AbiError.AbiError} into a **Human Readable ABI Error**.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const formatted = AbiError.format({\r\n *   type: 'error',\r\n *   name: 'Example',\r\n *   inputs: [\r\n *     {\r\n *       name: 'spender',\r\n *       type: 'address',\r\n *     },\r\n *     {\r\n *       name: 'amount',\r\n *       type: 'uint256',\r\n *     },\r\n *   ],\r\n * })\r\n *\r\n * formatted\r\n * //    ^?\r\n *\r\n *\r\n * ```\r\n *\r\n * @param abiError - The ABI Error to format.\r\n * @returns The formatted ABI Error.\r\n */\r\nexport function format<const abiError extends AbiError>(\r\n  abiError: abiError | AbiError,\r\n): abitype.FormatAbiItem<abiError> {\r\n  return abitype.formatAbiItem(abiError) as never\r\n}\r\n\r\nexport declare namespace format {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Parses an arbitrary **JSON ABI Error** or **Human Readable ABI Error** into a typed {@link ox#AbiError.AbiError}.\r\n *\r\n * @example\r\n * ### JSON ABIs\r\n *\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const badSignatureVError = AbiError.from({\r\n *   inputs: [{ name: 'v', type: 'uint8' }],\r\n *   name: 'BadSignatureV',\r\n *   type: 'error',\r\n * })\r\n *\r\n * badSignatureVError\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * @example\r\n * ### Human Readable ABIs\r\n *\r\n * A Human Readable ABI can be parsed into a typed ABI object:\r\n *\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const badSignatureVError = AbiError.from(\r\n *   'error BadSignatureV(uint8 v)' // [!code hl]\r\n * )\r\n *\r\n * badSignatureVError\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * @example\r\n * It is possible to specify `struct`s along with your definitions:\r\n *\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const badSignatureVError = AbiError.from([\r\n *   'struct Signature { uint8 v; }', // [!code hl]\r\n *   'error BadSignatureV(Signature signature)',\r\n * ])\r\n *\r\n * badSignatureVError\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n *\r\n *\r\n * @param abiError - The ABI Error to parse.\r\n * @returns Typed ABI Error.\r\n */\r\nexport function from<\r\n  const abiError extends AbiError | string | readonly string[],\r\n>(\r\n  abiError: (abiError | AbiError | string | readonly string[]) &\r\n    (\r\n      | (abiError extends string ? internal.Signature<abiError> : never)\r\n      | (abiError extends readonly string[]\r\n          ? internal.Signatures<abiError>\r\n          : never)\r\n      | AbiError\r\n    ),\r\n  options: from.Options = {},\r\n): from.ReturnType<abiError> {\r\n  return AbiItem.from(abiError as AbiError, options) as never\r\n}\r\n\r\nexport declare namespace from {\r\n  type Options = {\r\n    /**\r\n     * Whether or not to prepare the extracted function (optimization for encoding performance).\r\n     * When `true`, the `hash` property is computed and included in the returned value.\r\n     *\r\n     * @default true\r\n     */\r\n    prepare?: boolean | undefined\r\n  }\r\n\r\n  type ReturnType<abiError extends AbiError | string | readonly string[]> =\r\n    AbiItem.from.ReturnType<abiError>\r\n\r\n  type ErrorType = AbiItem.from.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Extracts an {@link ox#AbiError.AbiError} from an {@link ox#Abi.Abi} given a name and optional arguments.\r\n *\r\n * @example\r\n * ### Extracting by Name\r\n *\r\n * ABI Errors can be extracted by their name using the `name` option:\r\n *\r\n * ```ts twoslash\r\n * import { Abi, AbiError } from 'ox'\r\n *\r\n * const abi = Abi.from([\r\n *   'function foo()',\r\n *   'error BadSignatureV(uint8 v)',\r\n *   'function bar(string a) returns (uint256 x)',\r\n * ])\r\n *\r\n * const item = AbiError.fromAbi(abi, 'BadSignatureV') // [!code focus]\r\n * //    ^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * @example\r\n * ### Extracting by Selector\r\n *\r\n * ABI Errors can be extract by their selector when {@link ox#Hex.Hex} is provided to `name`.\r\n *\r\n * ```ts twoslash\r\n * import { Abi, AbiError } from 'ox'\r\n *\r\n * const abi = Abi.from([\r\n *   'function foo()',\r\n *   'error BadSignatureV(uint8 v)',\r\n *   'function bar(string a) returns (uint256 x)',\r\n * ])\r\n * const item = AbiError.fromAbi(abi, '0x095ea7b3') // [!code focus]\r\n * //    ^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * :::note\r\n *\r\n * Extracting via a hex selector is useful when extracting an ABI Error from JSON-RPC error data.\r\n *\r\n * :::\r\n *\r\n * @param abi - The ABI to extract from.\r\n * @param name - The name (or selector) of the ABI item to extract.\r\n * @param options - Extraction options.\r\n * @returns The ABI item.\r\n */\r\nexport function fromAbi<\r\n  const abi extends Abi.Abi | readonly unknown[],\r\n  name extends Name<abi>,\r\n  const args extends\r\n    | AbiItem_internal.ExtractArgs<abi, name>\r\n    | undefined = undefined,\r\n  //\r\n  allNames = Name<abi>,\r\n>(\r\n  abi: abi | Abi.Abi | readonly unknown[],\r\n  name: Hex.Hex | (name extends allNames ? name : never),\r\n  options?: AbiItem.fromAbi.Options<\r\n    abi,\r\n    name,\r\n    args,\r\n    AbiItem_internal.ExtractArgs<abi, name>\r\n  >,\r\n): fromAbi.ReturnType<abi, name, args> {\r\n  if (name === 'Error') return solidityError as never\r\n  if (name === 'Panic') return solidityPanic as never\r\n  if (Hex.validate(name, { strict: false })) {\r\n    const selector = Hex.slice(name, 0, 4)\r\n    if (selector === solidityErrorSelector) return solidityError as never\r\n    if (selector === solidityPanicSelector) return solidityPanic as never\r\n  }\r\n\r\n  const item = AbiItem.fromAbi(abi, name, options as any)\r\n  if (item.type !== 'error')\r\n    throw new AbiItem.NotFoundError({ name, type: 'error' })\r\n  return item as never\r\n}\r\n\r\nexport declare namespace fromAbi {\r\n  type ReturnType<\r\n    abi extends Abi.Abi | readonly unknown[] = Abi.Abi,\r\n    name extends Name<abi> = Name<abi>,\r\n    args extends\r\n      | AbiItem_internal.ExtractArgs<abi, name>\r\n      | undefined = AbiItem_internal.ExtractArgs<abi, name>,\r\n  > = IsNarrowable<name, Name<abi>> extends true\r\n    ?\r\n        | (name extends 'Error' ? typeof solidityError : never)\r\n        | (name extends 'Panic'\r\n            ? typeof solidityPanic\r\n            : never) extends infer result\r\n      ? IsNever<result> extends true\r\n        ? AbiItem.fromAbi.ReturnType<abi, name, args, AbiError>\r\n        : result\r\n      : never\r\n    :\r\n        | AbiItem.fromAbi.ReturnType<abi, name, args, AbiError>\r\n        | typeof solidityError\r\n        | typeof solidityPanic\r\n\r\n  type ErrorType = AbiItem.fromAbi.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Computes the [4-byte selector](https://solidity-by-example.org/function-selector/) for an {@link ox#AbiError.AbiError}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const selector = AbiError.getSelector('error BadSignatureV(uint8 v)')\r\n * // @log: '0x6352211e'\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const selector = AbiError.getSelector({\r\n *   inputs: [{ name: 'v', type: 'uint8' }],\r\n *   name: 'BadSignatureV',\r\n *   type: 'error'\r\n * })\r\n * // @log: '0x6352211e'\r\n * ```\r\n *\r\n * @param abiItem - The ABI item to compute the selector for.\r\n * @returns The first 4 bytes of the {@link ox#Hash.(keccak256:function)} hash of the error signature.\r\n */\r\nexport function getSelector(abiItem: string | AbiError): Hex.Hex {\r\n  return AbiItem.getSelector(abiItem)\r\n}\r\n\r\nexport declare namespace getSelector {\r\n  type ErrorType = AbiItem.getSelector.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n// https://docs.soliditylang.org/en/v0.8.16/control-structures.html#panic-via-assert-and-error-via-require\r\nexport const panicReasons = {\r\n  1: 'An `assert` condition failed.',\r\n  17: 'Arithmetic operation resulted in underflow or overflow.',\r\n  18: 'Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).',\r\n  33: 'Attempted to convert to an invalid type.',\r\n  34: 'Attempted to access a storage byte array that is incorrectly encoded.',\r\n  49: 'Performed `.pop()` on an empty array',\r\n  50: 'Array index is out of bounds.',\r\n  65: 'Allocated too much memory or created an array which is too large.',\r\n  81: 'Attempted to call a zero-initialized variable of internal function type.',\r\n} as Record<number, string>\r\n\r\nexport const solidityError = /*#__PURE__*/ from({\r\n  inputs: [\r\n    {\r\n      name: 'message',\r\n      type: 'string',\r\n    },\r\n  ],\r\n  name: 'Error',\r\n  type: 'error',\r\n})\r\n\r\nexport const solidityErrorSelector = '0x08c379a0'\r\n\r\nexport const solidityPanic = /*#__PURE__*/ from({\r\n  inputs: [\r\n    {\r\n      name: 'reason',\r\n      type: 'uint8',\r\n    },\r\n  ],\r\n  name: 'Panic',\r\n  type: 'error',\r\n})\r\n\r\nexport const solidityPanicSelector = '0x4e487b71'\r\n\r\n/**\r\n * Extracts an {@link ox#AbiError.AbiError} item from an {@link ox#Abi.Abi}, given a name.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Abi, AbiError } from 'ox'\r\n *\r\n * const abi = Abi.from([\r\n *   'error Foo(string)',\r\n *   'error Bar(uint256)',\r\n * ])\r\n *\r\n * type Foo = AbiError.FromAbi<typeof abi, 'Foo'>\r\n * //   ^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n */\r\nexport type FromAbi<\r\n  abi extends Abi.Abi,\r\n  name extends ExtractNames<abi>,\r\n> = abitype.ExtractAbiError<abi, name>\r\n\r\n/**\r\n * Extracts the names of all {@link ox#AbiError.AbiError} items in an {@link ox#Abi.Abi}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Abi, AbiError } from 'ox'\r\n *\r\n * const abi = Abi.from([\r\n *   'error Foo(string)',\r\n *   'error Bar(uint256)',\r\n * ])\r\n *\r\n * type names = AbiError.Name<typeof abi>\r\n * //   ^?\r\n * ```\r\n */\r\nexport type Name<abi extends Abi.Abi | readonly unknown[] = Abi.Abi> =\r\n  abi extends Abi.Abi ? ExtractNames<abi> : string\r\n\r\nexport type ExtractNames<abi extends Abi.Abi> =\r\n  | abitype.ExtractAbiErrorNames<abi>\r\n  | 'Panic'\r\n  | 'Error'\r\n", "import * as Bytes from '../Bytes.js'\r\nimport type * as Errors from '../Errors.js'\r\nimport * as Hex from '../Hex.js'\r\n\r\n/** @internal */\r\nexport const integerToAlphabet =\r\n  '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\r\n\r\n/** @internal */\r\nexport const alphabetToInteger = /* __PURE__ */ Object.freeze<\r\n  Record<string, bigint>\r\n>({\r\n  1: 0n,\r\n  2: 1n,\r\n  3: 2n,\r\n  4: 3n,\r\n  5: 4n,\r\n  6: 5n,\r\n  7: 6n,\r\n  8: 7n,\r\n  9: 8n,\r\n  A: 9n,\r\n  B: 10n,\r\n  C: 11n,\r\n  D: 12n,\r\n  E: 13n,\r\n  F: 14n,\r\n  G: 15n,\r\n  H: 16n,\r\n  J: 17n,\r\n  K: 18n,\r\n  L: 19n,\r\n  M: 20n,\r\n  N: 21n,\r\n  P: 22n,\r\n  Q: 23n,\r\n  R: 24n,\r\n  S: 25n,\r\n  T: 26n,\r\n  U: 27n,\r\n  V: 28n,\r\n  W: 29n,\r\n  X: 30n,\r\n  Y: 31n,\r\n  Z: 32n,\r\n  a: 33n,\r\n  b: 34n,\r\n  c: 35n,\r\n  d: 36n,\r\n  e: 37n,\r\n  f: 38n,\r\n  g: 39n,\r\n  h: 40n,\r\n  i: 41n,\r\n  j: 42n,\r\n  k: 43n,\r\n  m: 44n,\r\n  n: 45n,\r\n  o: 46n,\r\n  p: 47n,\r\n  q: 48n,\r\n  r: 49n,\r\n  s: 50n,\r\n  t: 51n,\r\n  u: 52n,\r\n  v: 53n,\r\n  w: 54n,\r\n  x: 55n,\r\n  y: 56n,\r\n  z: 57n,\r\n})\r\n\r\n/** @internal */\r\nexport function from(value: Hex.Hex | Bytes.Bytes) {\r\n  let bytes = Bytes.from(value)\r\n\r\n  let integer = (() => {\r\n    let hex = value\r\n    if (value instanceof Uint8Array) hex = Hex.fromBytes(bytes)\r\n    return BigInt(hex as string)\r\n  })()\r\n\r\n  let result = ''\r\n  while (integer > 0n) {\r\n    const remainder = Number(integer % 58n)\r\n    integer = integer / 58n\r\n    result = integerToAlphabet[remainder] + result\r\n  }\r\n\r\n  while (bytes.length > 1 && bytes[0] === 0) {\r\n    result = '1' + result\r\n    bytes = bytes.slice(1)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace from {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\n", "/**\r\n * Internal helpers for blake hash.\r\n * @module\r\n */\r\nimport { rotr } from './utils.ts';\r\n\r\n/**\r\n * Internal blake variable.\r\n * For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].\r\n */\r\n// prettier-ignore\r\nexport const BSIGMA: Uint8Array = /* @__PURE__ */ Uint8Array.from([\r\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\r\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\r\n  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\r\n  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\r\n  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\r\n  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\r\n  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\r\n  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\r\n  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\r\n  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,\r\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\r\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\r\n  // Blake1, unused in others\r\n  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\r\n  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\r\n  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\r\n  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\r\n]);\r\n\r\n// prettier-ignore\r\nexport type Num4 = { a: number; b: number; c: number; d: number; };\r\n\r\n// Mixing function G splitted in two halfs\r\nexport function G1s(a: number, b: number, c: number, d: number, x: number): Num4 {\r\n  a = (a + b + x) | 0;\r\n  d = rotr(d ^ a, 16);\r\n  c = (c + d) | 0;\r\n  b = rotr(b ^ c, 12);\r\n  return { a, b, c, d };\r\n}\r\n\r\nexport function G2s(a: number, b: number, c: number, d: number, x: number): Num4 {\r\n  a = (a + b + x) | 0;\r\n  d = rotr(d ^ a, 8);\r\n  c = (c + d) | 0;\r\n  b = rotr(b ^ c, 7);\r\n  return { a, b, c, d };\r\n}\r\n", "/**\r\n * blake2b (64-bit) & blake2s (8 to 32-bit) hash functions.\r\n * b could have been faster, but there is no fast u64 in js, so s is 1.5x faster.\r\n * @module\r\n */\r\nimport { BSIGMA, G1s, G2s } from './_blake.ts';\r\nimport { SHA256_IV } from './_md.ts';\r\nimport * as u64 from './_u64.ts';\r\n// prettier-ignore\r\nimport {\r\n  abytes, aexists, anumber, aoutput,\r\n  clean, createOptHasher, Hash, swap32IfBE, swap8IfBE, toBytes, u32,\r\n  type CHashO, type Input\r\n} from './utils.ts';\r\n\r\n/** Blake hash options. dkLen is output length. key is used in MAC mode. salt is used in KDF mode. */\r\nexport type Blake2Opts = {\r\n  dkLen?: number;\r\n  key?: Input;\r\n  salt?: Input;\r\n  personalization?: Input;\r\n};\r\n\r\n// Same as SHA512_IV, but swapped endianness: LE instead of BE. iv[1] is iv[0], etc.\r\nconst B2B_IV = /* @__PURE__ */ Uint32Array.from([\r\n  0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a,\r\n  0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19,\r\n]);\r\n// Temporary buffer\r\nconst BBUF = /* @__PURE__ */ new Uint32Array(32);\r\n\r\n// Mixing function G splitted in two halfs\r\nfunction G1b(a: number, b: number, c: number, d: number, msg: Uint32Array, x: number) {\r\n  // NOTE: V is LE here\r\n  const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore\r\n  let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1]; // prettier-ignore\r\n  let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1]; // prettier-ignore\r\n  let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1]; // prettier-ignore\r\n  let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1]; // prettier-ignore\r\n  // v[a] = (v[a] + v[b] + x) | 0;\r\n  let ll = u64.add3L(Al, Bl, Xl);\r\n  Ah = u64.add3H(ll, Ah, Bh, Xh);\r\n  Al = ll | 0;\r\n  // v[d] = rotr(v[d] ^ v[a], 32)\r\n  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });\r\n  ({ Dh, Dl } = { Dh: u64.rotr32H(Dh, Dl), Dl: u64.rotr32L(Dh, Dl) });\r\n  // v[c] = (v[c] + v[d]) | 0;\r\n  ({ h: Ch, l: Cl } = u64.add(Ch, Cl, Dh, Dl));\r\n  // v[b] = rotr(v[b] ^ v[c], 24)\r\n  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });\r\n  ({ Bh, Bl } = { Bh: u64.rotrSH(Bh, Bl, 24), Bl: u64.rotrSL(Bh, Bl, 24) });\r\n  (BBUF[2 * a] = Al), (BBUF[2 * a + 1] = Ah);\r\n  (BBUF[2 * b] = Bl), (BBUF[2 * b + 1] = Bh);\r\n  (BBUF[2 * c] = Cl), (BBUF[2 * c + 1] = Ch);\r\n  (BBUF[2 * d] = Dl), (BBUF[2 * d + 1] = Dh);\r\n}\r\n\r\nfunction G2b(a: number, b: number, c: number, d: number, msg: Uint32Array, x: number) {\r\n  // NOTE: V is LE here\r\n  const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore\r\n  let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1]; // prettier-ignore\r\n  let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1]; // prettier-ignore\r\n  let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1]; // prettier-ignore\r\n  let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1]; // prettier-ignore\r\n  // v[a] = (v[a] + v[b] + x) | 0;\r\n  let ll = u64.add3L(Al, Bl, Xl);\r\n  Ah = u64.add3H(ll, Ah, Bh, Xh);\r\n  Al = ll | 0;\r\n  // v[d] = rotr(v[d] ^ v[a], 16)\r\n  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });\r\n  ({ Dh, Dl } = { Dh: u64.rotrSH(Dh, Dl, 16), Dl: u64.rotrSL(Dh, Dl, 16) });\r\n  // v[c] = (v[c] + v[d]) | 0;\r\n  ({ h: Ch, l: Cl } = u64.add(Ch, Cl, Dh, Dl));\r\n  // v[b] = rotr(v[b] ^ v[c], 63)\r\n  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });\r\n  ({ Bh, Bl } = { Bh: u64.rotrBH(Bh, Bl, 63), Bl: u64.rotrBL(Bh, Bl, 63) });\r\n  (BBUF[2 * a] = Al), (BBUF[2 * a + 1] = Ah);\r\n  (BBUF[2 * b] = Bl), (BBUF[2 * b + 1] = Bh);\r\n  (BBUF[2 * c] = Cl), (BBUF[2 * c + 1] = Ch);\r\n  (BBUF[2 * d] = Dl), (BBUF[2 * d + 1] = Dh);\r\n}\r\n\r\nfunction checkBlake2Opts(\r\n  outputLen: number,\r\n  opts: Blake2Opts | undefined = {},\r\n  keyLen: number,\r\n  saltLen: number,\r\n  persLen: number\r\n) {\r\n  anumber(keyLen);\r\n  if (outputLen < 0 || outputLen > keyLen) throw new Error('outputLen bigger than keyLen');\r\n  const { key, salt, personalization } = opts;\r\n  if (key !== undefined && (key.length < 1 || key.length > keyLen))\r\n    throw new Error('key length must be undefined or 1..' + keyLen);\r\n  if (salt !== undefined && salt.length !== saltLen)\r\n    throw new Error('salt must be undefined or ' + saltLen);\r\n  if (personalization !== undefined && personalization.length !== persLen)\r\n    throw new Error('personalization must be undefined or ' + persLen);\r\n}\r\n\r\n/** Class, from which others are subclassed. */\r\nexport abstract class BLAKE2<T extends BLAKE2<T>> extends Hash<T> {\r\n  protected abstract compress(msg: Uint32Array, offset: number, isLast: boolean): void;\r\n  protected abstract get(): number[];\r\n  protected abstract set(...args: number[]): void;\r\n  abstract destroy(): void;\r\n  protected buffer: Uint8Array;\r\n  protected buffer32: Uint32Array;\r\n  protected finished = false;\r\n  protected destroyed = false;\r\n  protected length: number = 0;\r\n  protected pos: number = 0;\r\n  readonly blockLen: number;\r\n  readonly outputLen: number;\r\n\r\n  constructor(blockLen: number, outputLen: number) {\r\n    super();\r\n    anumber(blockLen);\r\n    anumber(outputLen);\r\n    this.blockLen = blockLen;\r\n    this.outputLen = outputLen;\r\n    this.buffer = new Uint8Array(blockLen);\r\n    this.buffer32 = u32(this.buffer);\r\n  }\r\n  update(data: Input): this {\r\n    aexists(this);\r\n    data = toBytes(data);\r\n    abytes(data);\r\n    // Main difference with other hashes: there is flag for last block,\r\n    // so we cannot process current block before we know that there\r\n    // is the next one. This significantly complicates logic and reduces ability\r\n    // to do zero-copy processing\r\n    const { blockLen, buffer, buffer32 } = this;\r\n    const len = data.length;\r\n    const offset = data.byteOffset;\r\n    const buf = data.buffer;\r\n    for (let pos = 0; pos < len; ) {\r\n      // If buffer is full and we still have input (don't process last block, same as blake2s)\r\n      if (this.pos === blockLen) {\r\n        swap32IfBE(buffer32);\r\n        this.compress(buffer32, 0, false);\r\n        swap32IfBE(buffer32);\r\n        this.pos = 0;\r\n      }\r\n      const take = Math.min(blockLen - this.pos, len - pos);\r\n      const dataOffset = offset + pos;\r\n      // full block && aligned to 4 bytes && not last in input\r\n      if (take === blockLen && !(dataOffset % 4) && pos + take < len) {\r\n        const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));\r\n        swap32IfBE(data32);\r\n        for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {\r\n          this.length += blockLen;\r\n          this.compress(data32, pos32, false);\r\n        }\r\n        swap32IfBE(data32);\r\n        continue;\r\n      }\r\n      buffer.set(data.subarray(pos, pos + take), this.pos);\r\n      this.pos += take;\r\n      this.length += take;\r\n      pos += take;\r\n    }\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array): void {\r\n    aexists(this);\r\n    aoutput(out, this);\r\n    const { pos, buffer32 } = this;\r\n    this.finished = true;\r\n    // Padding\r\n    clean(this.buffer.subarray(pos));\r\n    swap32IfBE(buffer32);\r\n    this.compress(buffer32, 0, true);\r\n    swap32IfBE(buffer32);\r\n    const out32 = u32(out);\r\n    this.get().forEach((v, i) => (out32[i] = swap8IfBE(v)));\r\n  }\r\n  digest(): Uint8Array {\r\n    const { buffer, outputLen } = this;\r\n    this.digestInto(buffer);\r\n    const res = buffer.slice(0, outputLen);\r\n    this.destroy();\r\n    return res;\r\n  }\r\n  _cloneInto(to?: T): T {\r\n    const { buffer, length, finished, destroyed, outputLen, pos } = this;\r\n    to ||= new (this.constructor as any)({ dkLen: outputLen }) as T;\r\n    to.set(...this.get());\r\n    to.buffer.set(buffer);\r\n    to.destroyed = destroyed;\r\n    to.finished = finished;\r\n    to.length = length;\r\n    to.pos = pos;\r\n    // @ts-ignore\r\n    to.outputLen = outputLen;\r\n    return to;\r\n  }\r\n  clone(): T {\r\n    return this._cloneInto();\r\n  }\r\n}\r\n\r\nexport class BLAKE2b extends BLAKE2<BLAKE2b> {\r\n  // Same as SHA-512, but LE\r\n  private v0l = B2B_IV[0] | 0;\r\n  private v0h = B2B_IV[1] | 0;\r\n  private v1l = B2B_IV[2] | 0;\r\n  private v1h = B2B_IV[3] | 0;\r\n  private v2l = B2B_IV[4] | 0;\r\n  private v2h = B2B_IV[5] | 0;\r\n  private v3l = B2B_IV[6] | 0;\r\n  private v3h = B2B_IV[7] | 0;\r\n  private v4l = B2B_IV[8] | 0;\r\n  private v4h = B2B_IV[9] | 0;\r\n  private v5l = B2B_IV[10] | 0;\r\n  private v5h = B2B_IV[11] | 0;\r\n  private v6l = B2B_IV[12] | 0;\r\n  private v6h = B2B_IV[13] | 0;\r\n  private v7l = B2B_IV[14] | 0;\r\n  private v7h = B2B_IV[15] | 0;\r\n\r\n  constructor(opts: Blake2Opts = {}) {\r\n    const olen = opts.dkLen === undefined ? 64 : opts.dkLen;\r\n    super(128, olen);\r\n    checkBlake2Opts(olen, opts, 64, 16, 16);\r\n    let { key, personalization, salt } = opts;\r\n    let keyLength = 0;\r\n    if (key !== undefined) {\r\n      key = toBytes(key);\r\n      keyLength = key.length;\r\n    }\r\n    this.v0l ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);\r\n    if (salt !== undefined) {\r\n      salt = toBytes(salt);\r\n      const slt = u32(salt);\r\n      this.v4l ^= swap8IfBE(slt[0]);\r\n      this.v4h ^= swap8IfBE(slt[1]);\r\n      this.v5l ^= swap8IfBE(slt[2]);\r\n      this.v5h ^= swap8IfBE(slt[3]);\r\n    }\r\n    if (personalization !== undefined) {\r\n      personalization = toBytes(personalization);\r\n      const pers = u32(personalization);\r\n      this.v6l ^= swap8IfBE(pers[0]);\r\n      this.v6h ^= swap8IfBE(pers[1]);\r\n      this.v7l ^= swap8IfBE(pers[2]);\r\n      this.v7h ^= swap8IfBE(pers[3]);\r\n    }\r\n    if (key !== undefined) {\r\n      // Pad to blockLen and update\r\n      const tmp = new Uint8Array(this.blockLen);\r\n      tmp.set(key);\r\n      this.update(tmp);\r\n    }\r\n  }\r\n  // prettier-ignore\r\n  protected get(): [\r\n    number, number, number, number, number, number, number, number,\r\n    number, number, number, number, number, number, number, number\r\n  ] {\r\n    let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;\r\n    return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];\r\n  }\r\n  // prettier-ignore\r\n  protected set(\r\n    v0l: number, v0h: number, v1l: number, v1h: number,\r\n    v2l: number, v2h: number, v3l: number, v3h: number,\r\n    v4l: number, v4h: number, v5l: number, v5h: number,\r\n    v6l: number, v6h: number, v7l: number, v7h: number\r\n  ): void {\r\n    this.v0l = v0l | 0;\r\n    this.v0h = v0h | 0;\r\n    this.v1l = v1l | 0;\r\n    this.v1h = v1h | 0;\r\n    this.v2l = v2l | 0;\r\n    this.v2h = v2h | 0;\r\n    this.v3l = v3l | 0;\r\n    this.v3h = v3h | 0;\r\n    this.v4l = v4l | 0;\r\n    this.v4h = v4h | 0;\r\n    this.v5l = v5l | 0;\r\n    this.v5h = v5h | 0;\r\n    this.v6l = v6l | 0;\r\n    this.v6h = v6h | 0;\r\n    this.v7l = v7l | 0;\r\n    this.v7h = v7h | 0;\r\n  }\r\n  protected compress(msg: Uint32Array, offset: number, isLast: boolean): void {\r\n    this.get().forEach((v, i) => (BBUF[i] = v)); // First half from state.\r\n    BBUF.set(B2B_IV, 16); // Second half from IV.\r\n    let { h, l } = u64.fromBig(BigInt(this.length));\r\n    BBUF[24] = B2B_IV[8] ^ l; // Low word of the offset.\r\n    BBUF[25] = B2B_IV[9] ^ h; // High word.\r\n    // Invert all bits for last block\r\n    if (isLast) {\r\n      BBUF[28] = ~BBUF[28];\r\n      BBUF[29] = ~BBUF[29];\r\n    }\r\n    let j = 0;\r\n    const s = BSIGMA;\r\n    for (let i = 0; i < 12; i++) {\r\n      G1b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\r\n      G2b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\r\n      G1b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\r\n      G2b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\r\n      G1b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\r\n      G2b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\r\n      G1b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\r\n      G2b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\r\n\r\n      G1b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\r\n      G2b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\r\n      G1b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\r\n      G2b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\r\n      G1b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\r\n      G2b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\r\n      G1b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\r\n      G2b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\r\n    }\r\n    this.v0l ^= BBUF[0] ^ BBUF[16];\r\n    this.v0h ^= BBUF[1] ^ BBUF[17];\r\n    this.v1l ^= BBUF[2] ^ BBUF[18];\r\n    this.v1h ^= BBUF[3] ^ BBUF[19];\r\n    this.v2l ^= BBUF[4] ^ BBUF[20];\r\n    this.v2h ^= BBUF[5] ^ BBUF[21];\r\n    this.v3l ^= BBUF[6] ^ BBUF[22];\r\n    this.v3h ^= BBUF[7] ^ BBUF[23];\r\n    this.v4l ^= BBUF[8] ^ BBUF[24];\r\n    this.v4h ^= BBUF[9] ^ BBUF[25];\r\n    this.v5l ^= BBUF[10] ^ BBUF[26];\r\n    this.v5h ^= BBUF[11] ^ BBUF[27];\r\n    this.v6l ^= BBUF[12] ^ BBUF[28];\r\n    this.v6h ^= BBUF[13] ^ BBUF[29];\r\n    this.v7l ^= BBUF[14] ^ BBUF[30];\r\n    this.v7h ^= BBUF[15] ^ BBUF[31];\r\n    clean(BBUF);\r\n  }\r\n  destroy(): void {\r\n    this.destroyed = true;\r\n    clean(this.buffer32);\r\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * Blake2b hash function. 64-bit. 1.5x slower than blake2s in JS.\r\n * @param msg - message that would be hashed\r\n * @param opts - dkLen output length, key for MAC mode, salt, personalization\r\n */\r\nexport const blake2b: CHashO = /* @__PURE__ */ createOptHasher<BLAKE2b, Blake2Opts>(\r\n  (opts) => new BLAKE2b(opts)\r\n);\r\n\r\n// =================\r\n// Blake2S\r\n// =================\r\n\r\n// prettier-ignore\r\nexport type Num16 = {\r\n  v0: number; v1: number; v2: number; v3: number;\r\n  v4: number; v5: number; v6: number; v7: number;\r\n  v8: number; v9: number; v10: number; v11: number;\r\n  v12: number; v13: number; v14: number; v15: number;\r\n};\r\n\r\n// prettier-ignore\r\nexport function compress(s: Uint8Array, offset: number, msg: Uint32Array, rounds: number,\r\n  v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number,\r\n  v8: number, v9: number, v10: number, v11: number, v12: number, v13: number, v14: number, v15: number,\r\n): Num16 {\r\n  let j = 0;\r\n  for (let i = 0; i < rounds; i++) {\r\n    ({ a: v0, b: v4, c: v8, d: v12 } = G1s(v0, v4, v8, v12, msg[offset + s[j++]]));\r\n    ({ a: v0, b: v4, c: v8, d: v12 } = G2s(v0, v4, v8, v12, msg[offset + s[j++]]));\r\n    ({ a: v1, b: v5, c: v9, d: v13 } = G1s(v1, v5, v9, v13, msg[offset + s[j++]]));\r\n    ({ a: v1, b: v5, c: v9, d: v13 } = G2s(v1, v5, v9, v13, msg[offset + s[j++]]));\r\n    ({ a: v2, b: v6, c: v10, d: v14 } = G1s(v2, v6, v10, v14, msg[offset + s[j++]]));\r\n    ({ a: v2, b: v6, c: v10, d: v14 } = G2s(v2, v6, v10, v14, msg[offset + s[j++]]));\r\n    ({ a: v3, b: v7, c: v11, d: v15 } = G1s(v3, v7, v11, v15, msg[offset + s[j++]]));\r\n    ({ a: v3, b: v7, c: v11, d: v15 } = G2s(v3, v7, v11, v15, msg[offset + s[j++]]));\r\n\r\n    ({ a: v0, b: v5, c: v10, d: v15 } = G1s(v0, v5, v10, v15, msg[offset + s[j++]]));\r\n    ({ a: v0, b: v5, c: v10, d: v15 } = G2s(v0, v5, v10, v15, msg[offset + s[j++]]));\r\n    ({ a: v1, b: v6, c: v11, d: v12 } = G1s(v1, v6, v11, v12, msg[offset + s[j++]]));\r\n    ({ a: v1, b: v6, c: v11, d: v12 } = G2s(v1, v6, v11, v12, msg[offset + s[j++]]));\r\n    ({ a: v2, b: v7, c: v8, d: v13 } = G1s(v2, v7, v8, v13, msg[offset + s[j++]]));\r\n    ({ a: v2, b: v7, c: v8, d: v13 } = G2s(v2, v7, v8, v13, msg[offset + s[j++]]));\r\n    ({ a: v3, b: v4, c: v9, d: v14 } = G1s(v3, v4, v9, v14, msg[offset + s[j++]]));\r\n    ({ a: v3, b: v4, c: v9, d: v14 } = G2s(v3, v4, v9, v14, msg[offset + s[j++]]));\r\n  }\r\n  return { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 };\r\n}\r\n\r\nconst B2S_IV = SHA256_IV;\r\nexport class BLAKE2s extends BLAKE2<BLAKE2s> {\r\n  // Internal state, same as SHA-256\r\n  private v0 = B2S_IV[0] | 0;\r\n  private v1 = B2S_IV[1] | 0;\r\n  private v2 = B2S_IV[2] | 0;\r\n  private v3 = B2S_IV[3] | 0;\r\n  private v4 = B2S_IV[4] | 0;\r\n  private v5 = B2S_IV[5] | 0;\r\n  private v6 = B2S_IV[6] | 0;\r\n  private v7 = B2S_IV[7] | 0;\r\n\r\n  constructor(opts: Blake2Opts = {}) {\r\n    const olen = opts.dkLen === undefined ? 32 : opts.dkLen;\r\n    super(64, olen);\r\n    checkBlake2Opts(olen, opts, 32, 8, 8);\r\n    let { key, personalization, salt } = opts;\r\n    let keyLength = 0;\r\n    if (key !== undefined) {\r\n      key = toBytes(key);\r\n      keyLength = key.length;\r\n    }\r\n    this.v0 ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);\r\n    if (salt !== undefined) {\r\n      salt = toBytes(salt);\r\n      const slt = u32(salt as Uint8Array);\r\n      this.v4 ^= swap8IfBE(slt[0]);\r\n      this.v5 ^= swap8IfBE(slt[1]);\r\n    }\r\n    if (personalization !== undefined) {\r\n      personalization = toBytes(personalization);\r\n      const pers = u32(personalization as Uint8Array);\r\n      this.v6 ^= swap8IfBE(pers[0]);\r\n      this.v7 ^= swap8IfBE(pers[1]);\r\n    }\r\n    if (key !== undefined) {\r\n      // Pad to blockLen and update\r\n      abytes(key);\r\n      const tmp = new Uint8Array(this.blockLen);\r\n      tmp.set(key);\r\n      this.update(tmp);\r\n    }\r\n  }\r\n  protected get(): [number, number, number, number, number, number, number, number] {\r\n    const { v0, v1, v2, v3, v4, v5, v6, v7 } = this;\r\n    return [v0, v1, v2, v3, v4, v5, v6, v7];\r\n  }\r\n  // prettier-ignore\r\n  protected set(\r\n    v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number\r\n  ): void {\r\n    this.v0 = v0 | 0;\r\n    this.v1 = v1 | 0;\r\n    this.v2 = v2 | 0;\r\n    this.v3 = v3 | 0;\r\n    this.v4 = v4 | 0;\r\n    this.v5 = v5 | 0;\r\n    this.v6 = v6 | 0;\r\n    this.v7 = v7 | 0;\r\n  }\r\n  protected compress(msg: Uint32Array, offset: number, isLast: boolean): void {\r\n    const { h, l } = u64.fromBig(BigInt(this.length));\r\n    // prettier-ignore\r\n    const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } =\r\n      compress(\r\n        BSIGMA, offset, msg, 10,\r\n        this.v0, this.v1, this.v2, this.v3, this.v4, this.v5, this.v6, this.v7,\r\n        B2S_IV[0], B2S_IV[1], B2S_IV[2], B2S_IV[3], l ^ B2S_IV[4], h ^ B2S_IV[5], isLast ? ~B2S_IV[6] : B2S_IV[6], B2S_IV[7]\r\n      );\r\n    this.v0 ^= v0 ^ v8;\r\n    this.v1 ^= v1 ^ v9;\r\n    this.v2 ^= v2 ^ v10;\r\n    this.v3 ^= v3 ^ v11;\r\n    this.v4 ^= v4 ^ v12;\r\n    this.v5 ^= v5 ^ v13;\r\n    this.v6 ^= v6 ^ v14;\r\n    this.v7 ^= v7 ^ v15;\r\n  }\r\n  destroy(): void {\r\n    this.destroyed = true;\r\n    clean(this.buffer32);\r\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * Blake2s hash function. Focuses on 8-bit to 32-bit platforms. 1.5x faster than blake2b in JS.\r\n * @param msg - message that would be hashed\r\n * @param opts - dkLen output length, key for MAC mode, salt, personalization\r\n */\r\nexport const blake2s: CHashO = /* @__PURE__ */ createOptHasher<BLAKE2s, Blake2Opts>(\r\n  (opts) => new BLAKE2s(opts)\r\n);\r\n", "/**\r\n * Blake3 fast hash is Blake2 with reduced security (round count). Can also be used as MAC & KDF.\r\n *\r\n * It is advertised as \"the fastest cryptographic hash\". However, it isn't true in JS.\r\n * Why is this so slow? While it should be 6x faster than blake2b, perf diff is only 20%:\r\n *\r\n * * There is only 30% reduction in number of rounds from blake2s\r\n * * Speed-up comes from tree structure, which is parallelized using SIMD & threading.\r\n *   These features are not present in JS, so we only get overhead from trees.\r\n * * Parallelization only happens on 1024-byte chunks: there is no benefit for small inputs.\r\n * * It is still possible to make it faster using: a) loop unrolling b) web workers c) wasm\r\n * @module\r\n */\r\nimport { SHA256_IV } from './_md.ts';\r\nimport { fromBig } from './_u64.ts';\r\nimport { BLAKE2, compress } from './blake2.ts';\r\n// prettier-ignore\r\nimport {\r\n  abytes, aexists, anumber, aoutput,\r\n  clean, createXOFer, swap32IfBE, toBytes, u32, u8,\r\n  type CHashXO, type HashXOF, type Input\r\n} from './utils.ts';\r\n\r\n// Flag bitset\r\nconst B3_Flags = {\r\n  CHUNK_START: 0b1,\r\n  CHUNK_END: 0b10,\r\n  PARENT: 0b100,\r\n  ROOT: 0b1000,\r\n  KEYED_HASH: 0b10000,\r\n  DERIVE_KEY_CONTEXT: 0b100000,\r\n  DERIVE_KEY_MATERIAL: 0b1000000,\r\n} as const;\r\n\r\nconst B3_IV = SHA256_IV.slice();\r\n\r\nconst B3_SIGMA: Uint8Array = /* @__PURE__ */ (() => {\r\n  const Id = Array.from({ length: 16 }, (_, i) => i);\r\n  const permute = (arr: number[]) =>\r\n    [2, 6, 3, 10, 7, 0, 4, 13, 1, 11, 12, 5, 9, 14, 15, 8].map((i) => arr[i]);\r\n  const res: number[] = [];\r\n  for (let i = 0, v = Id; i < 7; i++, v = permute(v)) res.push(...v);\r\n  return Uint8Array.from(res);\r\n})();\r\n\r\n/**\r\n * Ensure to use EITHER `key` OR `context`, not both.\r\n *\r\n * * `key`: 32-byte MAC key.\r\n * * `context`: string for KDF. Should be hardcoded, globally unique, and application - specific.\r\n *   A good default format for the context string is \"[application] [commit timestamp] [purpose]\".\r\n */\r\nexport type Blake3Opts = { dkLen?: number; key?: Input; context?: Input };\r\n\r\n/** Blake3 hash. Can be used as MAC and KDF. */\r\nexport class BLAKE3 extends BLAKE2<BLAKE3> implements HashXOF<BLAKE3> {\r\n  private chunkPos = 0; // Position of current block in chunk\r\n  private chunksDone = 0; // How many chunks we already have\r\n  private flags = 0 | 0;\r\n  private IV: Uint32Array;\r\n  private state: Uint32Array;\r\n  private stack: Uint32Array[] = [];\r\n  // Output\r\n  private posOut = 0;\r\n  private bufferOut32 = new Uint32Array(16);\r\n  private bufferOut: Uint8Array;\r\n  private chunkOut = 0; // index of output chunk\r\n  private enableXOF = true;\r\n\r\n  constructor(opts: Blake3Opts = {}, flags = 0) {\r\n    super(64, opts.dkLen === undefined ? 32 : opts.dkLen);\r\n    const { key, context } = opts;\r\n    const hasContext = context !== undefined;\r\n    if (key !== undefined) {\r\n      if (hasContext) throw new Error('Only \"key\" or \"context\" can be specified at same time');\r\n      const k = toBytes(key).slice();\r\n      abytes(k, 32);\r\n      this.IV = u32(k);\r\n      swap32IfBE(this.IV);\r\n      this.flags = flags | B3_Flags.KEYED_HASH;\r\n    } else if (hasContext) {\r\n      const ctx = toBytes(context);\r\n      const contextKey = new BLAKE3({ dkLen: 32 }, B3_Flags.DERIVE_KEY_CONTEXT)\r\n        .update(ctx)\r\n        .digest();\r\n      this.IV = u32(contextKey);\r\n      swap32IfBE(this.IV);\r\n      this.flags = flags | B3_Flags.DERIVE_KEY_MATERIAL;\r\n    } else {\r\n      this.IV = B3_IV.slice();\r\n      this.flags = flags;\r\n    }\r\n    this.state = this.IV.slice();\r\n    this.bufferOut = u8(this.bufferOut32);\r\n  }\r\n  // Unused\r\n  protected get(): [] {\r\n    return [];\r\n  }\r\n  protected set(): void {}\r\n  private b2Compress(counter: number, flags: number, buf: Uint32Array, bufPos: number = 0) {\r\n    const { state: s, pos } = this;\r\n    const { h, l } = fromBig(BigInt(counter), true);\r\n    // prettier-ignore\r\n    const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } =\r\n      compress(\r\n        B3_SIGMA, bufPos, buf, 7,\r\n        s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7],\r\n        B3_IV[0], B3_IV[1], B3_IV[2], B3_IV[3], h, l, pos, flags\r\n      );\r\n    s[0] = v0 ^ v8;\r\n    s[1] = v1 ^ v9;\r\n    s[2] = v2 ^ v10;\r\n    s[3] = v3 ^ v11;\r\n    s[4] = v4 ^ v12;\r\n    s[5] = v5 ^ v13;\r\n    s[6] = v6 ^ v14;\r\n    s[7] = v7 ^ v15;\r\n  }\r\n  protected compress(buf: Uint32Array, bufPos: number = 0, isLast: boolean = false): void {\r\n    // Compress last block\r\n    let flags = this.flags;\r\n    if (!this.chunkPos) flags |= B3_Flags.CHUNK_START;\r\n    if (this.chunkPos === 15 || isLast) flags |= B3_Flags.CHUNK_END;\r\n    if (!isLast) this.pos = this.blockLen;\r\n    this.b2Compress(this.chunksDone, flags, buf, bufPos);\r\n    this.chunkPos += 1;\r\n    // If current block is last in chunk (16 blocks), then compress chunks\r\n    if (this.chunkPos === 16 || isLast) {\r\n      let chunk = this.state;\r\n      this.state = this.IV.slice();\r\n      // If not the last one, compress only when there are trailing zeros in chunk counter\r\n      // chunks used as binary tree where current stack is path. Zero means current leaf is finished and can be compressed.\r\n      // 1 (001) - leaf not finished (just push current chunk to stack)\r\n      // 2 (010) - leaf finished at depth=1 (merge with last elm on stack and push back)\r\n      // 3 (011) - last leaf not finished\r\n      // 4 (100) - leafs finished at depth=1 and depth=2\r\n      for (let last, chunks = this.chunksDone + 1; isLast || !(chunks & 1); chunks >>= 1) {\r\n        if (!(last = this.stack.pop())) break;\r\n        this.buffer32.set(last, 0);\r\n        this.buffer32.set(chunk, 8);\r\n        this.pos = this.blockLen;\r\n        this.b2Compress(0, this.flags | B3_Flags.PARENT, this.buffer32, 0);\r\n        chunk = this.state;\r\n        this.state = this.IV.slice();\r\n      }\r\n      this.chunksDone++;\r\n      this.chunkPos = 0;\r\n      this.stack.push(chunk);\r\n    }\r\n    this.pos = 0;\r\n  }\r\n  _cloneInto(to?: BLAKE3): BLAKE3 {\r\n    to = super._cloneInto(to) as BLAKE3;\r\n    const { IV, flags, state, chunkPos, posOut, chunkOut, stack, chunksDone } = this;\r\n    to.state.set(state.slice());\r\n    to.stack = stack.map((i) => Uint32Array.from(i));\r\n    to.IV.set(IV);\r\n    to.flags = flags;\r\n    to.chunkPos = chunkPos;\r\n    to.chunksDone = chunksDone;\r\n    to.posOut = posOut;\r\n    to.chunkOut = chunkOut;\r\n    to.enableXOF = this.enableXOF;\r\n    to.bufferOut32.set(this.bufferOut32);\r\n    return to;\r\n  }\r\n  destroy(): void {\r\n    this.destroyed = true;\r\n    clean(this.state, this.buffer32, this.IV, this.bufferOut32);\r\n    clean(...this.stack);\r\n  }\r\n  // Same as b2Compress, but doesn't modify state and returns 16 u32 array (instead of 8)\r\n  private b2CompressOut() {\r\n    const { state: s, pos, flags, buffer32, bufferOut32: out32 } = this;\r\n    const { h, l } = fromBig(BigInt(this.chunkOut++));\r\n    swap32IfBE(buffer32);\r\n    // prettier-ignore\r\n    const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } =\r\n      compress(\r\n        B3_SIGMA, 0, buffer32, 7,\r\n        s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7],\r\n        B3_IV[0], B3_IV[1], B3_IV[2], B3_IV[3], l, h, pos, flags\r\n      );\r\n    out32[0] = v0 ^ v8;\r\n    out32[1] = v1 ^ v9;\r\n    out32[2] = v2 ^ v10;\r\n    out32[3] = v3 ^ v11;\r\n    out32[4] = v4 ^ v12;\r\n    out32[5] = v5 ^ v13;\r\n    out32[6] = v6 ^ v14;\r\n    out32[7] = v7 ^ v15;\r\n    out32[8] = s[0] ^ v8;\r\n    out32[9] = s[1] ^ v9;\r\n    out32[10] = s[2] ^ v10;\r\n    out32[11] = s[3] ^ v11;\r\n    out32[12] = s[4] ^ v12;\r\n    out32[13] = s[5] ^ v13;\r\n    out32[14] = s[6] ^ v14;\r\n    out32[15] = s[7] ^ v15;\r\n    swap32IfBE(buffer32);\r\n    swap32IfBE(out32);\r\n    this.posOut = 0;\r\n  }\r\n  protected finish(): void {\r\n    if (this.finished) return;\r\n    this.finished = true;\r\n    // Padding\r\n    clean(this.buffer.subarray(this.pos));\r\n    // Process last chunk\r\n    let flags = this.flags | B3_Flags.ROOT;\r\n    if (this.stack.length) {\r\n      flags |= B3_Flags.PARENT;\r\n      swap32IfBE(this.buffer32);\r\n      this.compress(this.buffer32, 0, true);\r\n      swap32IfBE(this.buffer32);\r\n      this.chunksDone = 0;\r\n      this.pos = this.blockLen;\r\n    } else {\r\n      flags |= (!this.chunkPos ? B3_Flags.CHUNK_START : 0) | B3_Flags.CHUNK_END;\r\n    }\r\n    this.flags = flags;\r\n    this.b2CompressOut();\r\n  }\r\n  private writeInto(out: Uint8Array) {\r\n    aexists(this, false);\r\n    abytes(out);\r\n    this.finish();\r\n    const { blockLen, bufferOut } = this;\r\n    for (let pos = 0, len = out.length; pos < len; ) {\r\n      if (this.posOut >= blockLen) this.b2CompressOut();\r\n      const take = Math.min(blockLen - this.posOut, len - pos);\r\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\r\n      this.posOut += take;\r\n      pos += take;\r\n    }\r\n    return out;\r\n  }\r\n  xofInto(out: Uint8Array): Uint8Array {\r\n    if (!this.enableXOF) throw new Error('XOF is not possible after digest call');\r\n    return this.writeInto(out);\r\n  }\r\n  xof(bytes: number): Uint8Array {\r\n    anumber(bytes);\r\n    return this.xofInto(new Uint8Array(bytes));\r\n  }\r\n  digestInto(out: Uint8Array): Uint8Array {\r\n    aoutput(out, this);\r\n    if (this.finished) throw new Error('digest() was already called');\r\n    this.enableXOF = false;\r\n    this.writeInto(out);\r\n    this.destroy();\r\n    return out;\r\n  }\r\n  digest(): Uint8Array {\r\n    return this.digestInto(new Uint8Array(this.outputLen));\r\n  }\r\n}\r\n\r\n/**\r\n * BLAKE3 hash function. Can be used as MAC and KDF.\r\n * @param msg - message that would be hashed\r\n * @param opts - `dkLen` for output length, `key` for MAC mode, `context` for KDF mode\r\n * @example\r\n * const data = new Uint8Array(32);\r\n * const hash = blake3(data);\r\n * const mac = blake3(data, { key: new Uint8Array(32) });\r\n * const kdf = blake3(data, { context: 'application name' });\r\n */\r\nexport const blake3: CHashXO = /* @__PURE__ */ createXOFer<BLAKE3, Blake3Opts>(\r\n  (opts) => new BLAKE3(opts)\r\n);\r\n", "import * as Bytes from './Bytes.js'\r\nimport * as Errors from './Errors.js'\r\nimport * as Hash from './Hash.js'\r\nimport * as Hex from './Hex.js'\r\nimport * as Kzg from './Kzg.js'\r\nimport * as Cursor from './internal/cursor.js'\r\nimport type { Compute, Mutable, OneOf, UnionCompute } from './internal/types.js'\r\n\r\n/** Blob limit per transaction. */\r\nconst blobsPerTransaction = 6\r\n\r\n/** The number of bytes in a BLS scalar field element. */\r\nexport const bytesPerFieldElement = 32\r\n\r\n/** The number of field elements in a blob. */\r\nexport const fieldElementsPerBlob = 4096\r\n\r\n/** The number of bytes in a blob. */\r\nexport const bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob\r\n\r\n/** Blob bytes limit per transaction. */\r\nexport const maxBytesPerTransaction =\r\n  bytesPerBlob * blobsPerTransaction -\r\n  // terminator byte (0x80).\r\n  1 -\r\n  // zero byte (0x00) appended to each field element.\r\n  1 * fieldElementsPerBlob * blobsPerTransaction\r\n\r\n/** Root type for a Blob. */\r\nexport type Blob<type extends Hex.Hex | Bytes.Bytes = Hex.Hex | Bytes.Bytes> =\r\n  type\r\n\r\n/** A list of {@link ox#Blobs.Blob}. */\r\nexport type Blobs<type extends Hex.Hex | Bytes.Bytes = Hex.Hex | Bytes.Bytes> =\r\n  readonly Blob<type>[]\r\n\r\n/** Type for a Blob Sidecar that contains a blob, as well as its KZG commitment and proof. */\r\nexport type BlobSidecar<\r\n  type extends Hex.Hex | Bytes.Bytes = Hex.Hex | Bytes.Bytes,\r\n> = Compute<{\r\n  /** The blob associated with the transaction. */\r\n  blob: type\r\n  /** The KZG commitment corresponding to this blob. */\r\n  commitment: type\r\n  /** The KZG proof corresponding to this blob and commitment. */\r\n  proof: type\r\n}>\r\n\r\n/**\r\n * Transform a list of Commitments to Blob Versioned Hashes.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'viem'\r\n * import { kzg } from './kzg'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const commitments = Blobs.toCommitments(blobs, { kzg })\r\n * const versionedHashes = Blobs.commitmentsToVersionedHashes(commitments) // [!code focus]\r\n * // @log: ['0x...', '0x...']\r\n * ```\r\n *\r\n * @example\r\n * ### Configuring Return Type\r\n *\r\n * It is possible to configure the return type for the Versioned Hashes with the `as` option.\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'viem'\r\n * import { kzg } from './kzg'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const commitments = Blobs.toCommitments(blobs, { kzg })\r\n * const versionedHashes = Blobs.commitmentsToVersionedHashes(commitments, {\r\n *   as: 'Bytes', // [!code focus]\r\n * })\r\n * // @log: [Uint8Array [ ... ], Uint8Array [ ... ]]\r\n * ```\r\n *\r\n * @example\r\n * ### Versioning Hashes\r\n *\r\n * It is possible to configure the version for the Versioned Hashes with the `version` option.\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'viem'\r\n * import { kzg } from './kzg'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const commitments = Blobs.toCommitments(blobs, { kzg })\r\n * const versionedHashes = Blobs.commitmentsToVersionedHashes(commitments, {\r\n *   version: 2, // [!code focus]\r\n * })\r\n * ```\r\n *\r\n * @param commitments - A list of commitments.\r\n * @param options - Options.\r\n * @returns A list of Blob Versioned Hashes.\r\n */\r\nexport function commitmentsToVersionedHashes<\r\n  const commitments extends readonly Bytes.Bytes[] | readonly Hex.Hex[],\r\n  as extends 'Hex' | 'Bytes' =\r\n    | (commitments extends readonly Hex.Hex[] ? 'Hex' : never)\r\n    | (commitments extends readonly Bytes.Bytes[] ? 'Bytes' : never),\r\n>(\r\n  commitments: commitments | readonly Bytes.Bytes[] | readonly Hex.Hex[],\r\n  options: commitmentsToVersionedHashes.Options<as> = {},\r\n): commitmentsToVersionedHashes.ReturnType<as> {\r\n  const { version } = options\r\n\r\n  const as =\r\n    options.as ?? (typeof commitments[0] === 'string' ? 'Hex' : 'Bytes')\r\n\r\n  const hashes: Uint8Array[] | Hex.Hex[] = []\r\n  for (const commitment of commitments) {\r\n    hashes.push(\r\n      commitmentToVersionedHash(commitment, {\r\n        as,\r\n        version,\r\n      }) as never,\r\n    )\r\n  }\r\n  return hashes as never\r\n}\r\n\r\nexport declare namespace commitmentsToVersionedHashes {\r\n  type Options<as extends 'Hex' | 'Bytes' | undefined = undefined> = {\r\n    /** Return type. */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n    /** Version to tag onto the hashes. */\r\n    version?: number | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\r\n    | (as extends 'Bytes' ? readonly Bytes.Bytes[] : never)\r\n    | (as extends 'Hex' ? readonly Hex.Hex[] : never)\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Transform a Commitment to its Blob Versioned Hash.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'ox'\r\n * import { kzg } from './kzg'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const [commitment] = Blobs.toCommitments(blobs, { kzg })\r\n * const versionedHash = Blobs.commitmentToVersionedHash(commitment) // [!code focus]\r\n * ```\r\n *\r\n * @example\r\n * ### Configuring Return Type\r\n *\r\n * It is possible to configure the return type for the Versioned Hash with the `as` option.\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'viem'\r\n * import { kzg } from './kzg'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const [commitment] = Blobs.toCommitments(blobs, { kzg })\r\n * const versionedHashes = Blobs.commitmentToVersionedHash(commitment, {\r\n *   as: 'Bytes', // [!code focus]\r\n * })\r\n * // @log: [Uint8Array [ ... ], Uint8Array [ ... ]]\r\n * ```\r\n *\r\n * @example\r\n * ### Versioning Hashes\r\n *\r\n * It is possible to configure the version for the Versioned Hash with the `version` option.\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'viem'\r\n * import { kzg } from './kzg'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const [commitment] = Blobs.toCommitments(blobs, { kzg })\r\n * const versionedHashes = Blobs.commitmentToVersionedHash(commitment, {\r\n *   version: 2, // [!code focus]\r\n * })\r\n * ```\r\n *\r\n * @param commitment - The commitment.\r\n * @param options - Options.\r\n * @returns The Blob Versioned Hash.\r\n */\r\nexport function commitmentToVersionedHash<\r\n  const commitment extends Hex.Hex | Bytes.Bytes,\r\n  as extends 'Hex' | 'Bytes' =\r\n    | (commitment extends Hex.Hex ? 'Hex' : never)\r\n    | (commitment extends Bytes.Bytes ? 'Bytes' : never),\r\n>(\r\n  commitment: commitment | Hex.Hex | Bytes.Bytes,\r\n  options: commitmentToVersionedHash.Options<as> = {},\r\n): commitmentToVersionedHash.ReturnType<as> {\r\n  const { version = 1 } = options\r\n  const as = options.as ?? (typeof commitment === 'string' ? 'Hex' : 'Bytes')\r\n\r\n  const versionedHash = Hash.sha256(commitment, { as: 'Bytes' })\r\n  versionedHash.set([version], 0)\r\n  return (\r\n    as === 'Bytes' ? versionedHash : Hex.fromBytes(versionedHash)\r\n  ) as commitmentToVersionedHash.ReturnType<as>\r\n}\r\n\r\nexport declare namespace commitmentToVersionedHash {\r\n  type Options<as extends 'Hex' | 'Bytes' | undefined = undefined> = {\r\n    /** Return type. */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n    /** Version to tag onto the hash. */\r\n    version?: number | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\r\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\r\n    | (as extends 'Hex' ? Hex.Hex : never)\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Transforms arbitrary data to {@link ox#Blobs.Blobs}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Blobs } from 'ox'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * ```\r\n *\r\n * @example\r\n * ### Creating Blobs from a String\r\n *\r\n * An example of creating Blobs from a string using  {@link ox#Hex.(from:function)}:\r\n *\r\n * ```ts twoslash\r\n * import { Blobs, Hex } from 'ox'\r\n *\r\n * const blobs = Blobs.from(Hex.fromString('Hello world!'))\r\n * ```\r\n *\r\n * @example\r\n * ### Configuring Return Type\r\n *\r\n * It is possible to configure the return type for the Blobs with the `as` option.\r\n *\r\n * ```ts twoslash\r\n * import { Blobs } from 'ox'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef', { as: 'Bytes' })\r\n * //    ^?\r\n *\r\n *\r\n * ```\r\n *\r\n * @param data - The data to convert to {@link ox#Blobs.Blobs}.\r\n * @param options - Options.\r\n * @returns The {@link ox#Blobs.Blobs}.\r\n */\r\nexport function from<\r\n  const data extends Hex.Hex | Bytes.Bytes,\r\n  as extends 'Hex' | 'Bytes' =\r\n    | (data extends Hex.Hex ? 'Hex' : never)\r\n    | (data extends Bytes.Bytes ? 'Bytes' : never),\r\n>(\r\n  data: data | Hex.Hex | Bytes.Bytes,\r\n  options: from.Options<as> = {},\r\n): from.ReturnType<as> {\r\n  const as = options.as ?? (typeof data === 'string' ? 'Hex' : 'Bytes')\r\n  const data_ = (\r\n    typeof data === 'string' ? Bytes.fromHex(data) : data\r\n  ) as Bytes.Bytes\r\n\r\n  const size_ = Bytes.size(data_)\r\n  if (!size_) throw new EmptyBlobError()\r\n  if (size_ > maxBytesPerTransaction)\r\n    throw new BlobSizeTooLargeError({\r\n      maxSize: maxBytesPerTransaction,\r\n      size: size_,\r\n    })\r\n\r\n  const blobs = []\r\n\r\n  let active = true\r\n  let position = 0\r\n  while (active) {\r\n    const blob = Cursor.create(new Uint8Array(bytesPerBlob))\r\n\r\n    let size = 0\r\n    while (size < fieldElementsPerBlob) {\r\n      const bytes = data_.slice(position, position + (bytesPerFieldElement - 1))\r\n\r\n      // Push a zero byte so the field element doesn't overflow the BLS modulus.\r\n      blob.pushByte(0x00)\r\n\r\n      // Push the current segment of data bytes.\r\n      blob.pushBytes(bytes)\r\n\r\n      // If we detect that the current segment of data bytes is less than 31 bytes,\r\n      // we can stop processing and push a terminator byte to indicate the end of the blob.\r\n      if (bytes.length < 31) {\r\n        blob.pushByte(0x80)\r\n        active = false\r\n        break\r\n      }\r\n\r\n      size++\r\n      position += 31\r\n    }\r\n\r\n    blobs.push(blob)\r\n  }\r\n\r\n  return (\r\n    as === 'Bytes'\r\n      ? blobs.map((x) => x.bytes)\r\n      : blobs.map((x) => Hex.fromBytes(x.bytes))\r\n  ) as never\r\n}\r\n\r\nexport declare namespace from {\r\n  type Options<as extends 'Hex' | 'Bytes' | undefined = undefined> = {\r\n    /** Return type. */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\r\n    | (as extends 'Bytes' ? readonly Bytes.Bytes[] : never)\r\n    | (as extends 'Hex' ? readonly Hex.Hex[] : never)\r\n\r\n  type ErrorType =\r\n    | BlobSizeTooLargeError\r\n    | EmptyBlobError\r\n    | Bytes.fromHex.ErrorType\r\n    | Hex.fromBytes.ErrorType\r\n    | Cursor.create.ErrorType\r\n    | Bytes.size.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Transforms a list of {@link ox#Blobs.BlobSidecars} to their Blob Versioned Hashes.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'ox'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\r\n * const versionedHashes = Blobs.sidecarsToVersionedHashes(sidecars) // [!code focus]\r\n * ```\r\n *\r\n * @example\r\n * ### Configuring Return Type\r\n *\r\n * It is possible to configure the return type for the Versioned Hashes with the `as` option.\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'viem'\r\n * import { kzg } from './kzg'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\r\n * const versionedHashes = Blobs.sidecarsToVersionedHashes(sidecars, {\r\n *   as: 'Bytes', // [!code focus]\r\n * })\r\n * // @log: [Uint8Array [ ... ], Uint8Array [ ... ]]\r\n * ```\r\n *\r\n * @example\r\n * ### Versioning Hashes\r\n *\r\n * It is possible to configure the version for the Versioned Hashes with the `version` option.\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'viem'\r\n * import { kzg } from './kzg'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\r\n * const versionedHashes = Blobs.sidecarsToVersionedHashes(sidecars, {\r\n *   version: 2, // [!code focus]\r\n * })\r\n * ```\r\n *\r\n * @param sidecars - The {@link ox#Blobs.BlobSidecars} to transform to Blob Versioned Hashes.\r\n * @param options - Options.\r\n * @returns The versioned hashes.\r\n */\r\nexport function sidecarsToVersionedHashes<\r\n  const sidecars extends BlobSidecars,\r\n  as extends 'Hex' | 'Bytes' =\r\n    | (sidecars extends BlobSidecars<Hex.Hex> ? 'Hex' : never)\r\n    | (sidecars extends BlobSidecars<Bytes.Bytes> ? 'Bytes' : never),\r\n>(\r\n  sidecars: sidecars | BlobSidecars,\r\n  options: sidecarsToVersionedHashes.Options<as> = {},\r\n): sidecarsToVersionedHashes.ReturnType<as> {\r\n  const { version } = options\r\n\r\n  const as =\r\n    options.as ?? (typeof sidecars[0]!.blob === 'string' ? 'Hex' : 'Bytes')\r\n\r\n  const hashes: Uint8Array[] | Hex.Hex[] = []\r\n  for (const { commitment } of sidecars) {\r\n    hashes.push(\r\n      commitmentToVersionedHash(commitment, {\r\n        as,\r\n        version,\r\n      }) as any,\r\n    )\r\n  }\r\n  return hashes as any\r\n}\r\n\r\nexport declare namespace sidecarsToVersionedHashes {\r\n  type Options<as extends 'Hex' | 'Bytes' | undefined = undefined> = {\r\n    /** Return type. */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n    /** Version to tag onto the hashes. */\r\n    version?: number | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\r\n    | (as extends 'Bytes' ? readonly Bytes.Bytes[] : never)\r\n    | (as extends 'Hex' ? readonly Hex.Hex[] : never)\r\n\r\n  type ErrorType = commitmentToVersionedHash.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Transforms Ox-shaped {@link ox#Blobs.Blobs} into the originating data.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Blobs, Hex } from 'ox'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const data = Blobs.to(blobs) // [!code focus]\r\n * // @log: '0xdeadbeef'\r\n * ```\r\n *\r\n * @example\r\n * ### Configuring Return Type\r\n *\r\n * It is possible to configure the return type with second argument.\r\n *\r\n * ```ts twoslash\r\n * import { Blobs } from 'ox'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const data = Blobs.to(blobs, 'Bytes')\r\n * // @log: Uint8Array [ 13, 174, 190, 239 ]\r\n * ```\r\n *\r\n * @param blobs - The {@link ox#Blobs.Blobs} to transform.\r\n * @param to - The type to transform to.\r\n * @returns The originating data.\r\n */\r\nexport function to<\r\n  const blobs extends Blobs<Hex.Hex> | Blobs<Bytes.Bytes>,\r\n  to extends 'Hex' | 'Bytes' =\r\n    | (blobs extends Blobs<Hex.Hex> ? 'Hex' : never)\r\n    | (blobs extends Blobs<Bytes.Bytes> ? 'Bytes' : never),\r\n>(\r\n  blobs: blobs | Blobs<Hex.Hex> | Blobs<Bytes.Bytes>,\r\n  to?: to | 'Hex' | 'Bytes' | undefined,\r\n): to.ReturnType<to> {\r\n  const to_ = to ?? (typeof blobs[0] === 'string' ? 'Hex' : 'Bytes')\r\n  const blobs_ = (\r\n    typeof blobs[0] === 'string'\r\n      ? blobs.map((x) => Bytes.fromHex(x as Hex.Hex))\r\n      : blobs\r\n  ) as Bytes.Bytes[]\r\n\r\n  const length = blobs_.reduce((length, blob) => length + blob.length, 0)\r\n  const data = Cursor.create(new Uint8Array(length))\r\n  let active = true\r\n\r\n  for (const blob of blobs_) {\r\n    const cursor = Cursor.create(blob)\r\n    while (active && cursor.position < blob.length) {\r\n      // First byte will be a zero 0x00 byte – we can skip.\r\n      cursor.incrementPosition(1)\r\n\r\n      let consume = 31\r\n      if (blob.length - cursor.position < 31)\r\n        consume = blob.length - cursor.position\r\n\r\n      for (const _ in Array.from({ length: consume })) {\r\n        const byte = cursor.readByte()\r\n        const isTerminator =\r\n          byte === 0x80 && !cursor.inspectBytes(cursor.remaining).includes(0x80)\r\n        if (isTerminator) {\r\n          active = false\r\n          break\r\n        }\r\n        data.pushByte(byte)\r\n      }\r\n    }\r\n  }\r\n\r\n  const trimmedData = data.bytes.slice(0, data.position)\r\n  return (to_ === 'Hex' ? Hex.fromBytes(trimmedData) : trimmedData) as never\r\n}\r\n\r\nexport declare namespace to {\r\n  type ReturnType<to extends 'Hex' | 'Bytes' = 'Hex'> =\r\n    | (to extends 'Bytes' ? Bytes.Bytes : never)\r\n    | (to extends 'Hex' ? Hex.Hex : never)\r\n\r\n  type ErrorType =\r\n    | Hex.fromBytes.ErrorType\r\n    | Bytes.fromHex.ErrorType\r\n    | Cursor.create.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Transforms Ox-shaped {@link ox#Blobs.Blobs} into the originating data.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Blobs, Hex } from 'ox'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const data = Blobs.toHex(blobs) // [!code focus]\r\n * // @log: '0xdeadbeef'\r\n * ```\r\n */\r\nexport function toHex(\r\n  blobs: Blobs<Hex.Hex> | Blobs<Bytes.Bytes>,\r\n): toHex.ReturnType {\r\n  return to(blobs, 'Hex')\r\n}\r\n\r\nexport declare namespace toHex {\r\n  type ReturnType = to.ReturnType<'Hex'>\r\n  type ErrorType = to.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Transforms Ox-shaped {@link ox#Blobs.Blobs} into the originating data.\r\n *\r\n * @example\r\n * ```ts\r\n * import { Blobs, Hex } from 'ox'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const data = Blobs.toBytes(blobs) // [!code focus]\r\n * // @log: Uint8Array [ 13, 174, 190, 239 ]\r\n * ```\r\n */\r\nexport function toBytes(\r\n  blobs: Blobs<Hex.Hex> | Blobs<Bytes.Bytes>,\r\n): toBytes.ReturnType {\r\n  return to(blobs, 'Bytes')\r\n}\r\n\r\n/**\r\n * Compute commitments from a list of {@link ox#Blobs.Blobs}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'ox'\r\n * import { kzg } from './kzg'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const commitments = Blobs.toCommitments(blobs, { kzg }) // [!code focus]\r\n * ```\r\n *\r\n * @example\r\n * ### Configuring Return Type\r\n *\r\n * It is possible to configure the return type with the `as` option.\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'ox'\r\n * import { kzg } from './kzg'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const commitments = Blobs.toCommitments(blobs, {\r\n *   as: 'Bytes', // [!code focus]\r\n *   kzg,\r\n * })\r\n * // @log: [Uint8Array [ ... ], Uint8Array [ ... ]]\r\n * ```\r\n *\r\n * @param blobs - The {@link ox#Blobs.Blobs} to transform to commitments.\r\n * @param options - Options.\r\n * @returns The commitments.\r\n */\r\nexport function toCommitments<\r\n  const blobs extends Blobs<Bytes.Bytes> | Blobs<Hex.Hex>,\r\n  as extends 'Hex' | 'Bytes' =\r\n    | (blobs extends Blobs<Hex.Hex> ? 'Hex' : never)\r\n    | (blobs extends Blobs<Bytes.Bytes> ? 'Bytes' : never),\r\n>(\r\n  blobs: blobs | Blobs<Bytes.Bytes> | Blobs<Hex.Hex>,\r\n  options: toCommitments.Options<as>,\r\n): toCommitments.ReturnType<as> {\r\n  const { kzg } = options\r\n\r\n  const as = options.as ?? (typeof blobs[0] === 'string' ? 'Hex' : 'Bytes')\r\n  const blobs_ = (\r\n    typeof blobs[0] === 'string'\r\n      ? blobs.map((x) => Bytes.fromHex(x as any))\r\n      : blobs\r\n  ) as Bytes.Bytes[]\r\n\r\n  const commitments: Bytes.Bytes[] = []\r\n  for (const blob of blobs_)\r\n    commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)))\r\n\r\n  return (\r\n    as === 'Bytes' ? commitments : commitments.map((x) => Hex.fromBytes(x))\r\n  ) as never\r\n}\r\n\r\nexport declare namespace toCommitments {\r\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\r\n    /** KZG implementation. */\r\n    kzg: Pick<Kzg.Kzg, 'blobToKzgCommitment'>\r\n    /** Return type. */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex'> = Compute<\r\n    | (as extends 'Bytes' ? readonly Bytes.Bytes[] : never)\r\n    | (as extends 'Hex' ? readonly Hex.Hex[] : never)\r\n  >\r\n\r\n  type ErrorType =\r\n    | Bytes.fromHex.ErrorType\r\n    | Hex.fromBytes.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\nexport declare namespace toBytes {\r\n  type ReturnType = to.ReturnType<'Bytes'>\r\n  type ErrorType = to.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Compute the proofs for a list of {@link ox#Blobs.Blobs} and their commitments.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'viem'\r\n * import { kzg } from './kzg'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const commitments = Blobs.toCommitments(blobs, { kzg })\r\n * const proofs = Blobs.toProofs(blobs, { commitments, kzg }) // [!code focus]\r\n * ```\r\n *\r\n * @param blobs - The {@link ox#Blobs.Blobs} to compute proofs for.\r\n * @param options - Options.\r\n * @returns The Blob proofs.\r\n */\r\nexport function toProofs<\r\n  const blobs extends readonly Bytes.Bytes[] | readonly Hex.Hex[],\r\n  const commitments extends readonly Bytes.Bytes[] | readonly Hex.Hex[],\r\n  as extends 'Hex' | 'Bytes' =\r\n    | (blobs extends readonly Hex.Hex[] ? 'Hex' : never)\r\n    | (blobs extends readonly Bytes.Bytes[] ? 'Bytes' : never),\r\n>(\r\n  blobs: blobs | Blobs<Bytes.Bytes> | Blobs<Hex.Hex>,\r\n  options: toProofs.Options<blobs, commitments, as>,\r\n): toProofs.ReturnType<as> {\r\n  const { kzg } = options\r\n\r\n  const as = options.as ?? (typeof blobs[0] === 'string' ? 'Hex' : 'Bytes')\r\n\r\n  const blobs_ = (\r\n    typeof blobs[0] === 'string'\r\n      ? blobs.map((x) => Bytes.fromHex(x as any))\r\n      : blobs\r\n  ) as Bytes.Bytes[]\r\n  const commitments = (\r\n    typeof options.commitments[0] === 'string'\r\n      ? options.commitments.map((x) => Bytes.fromHex(x as any))\r\n      : options.commitments\r\n  ) as Bytes.Bytes[]\r\n\r\n  const proofs: Bytes.Bytes[] = []\r\n  for (let i = 0; i < blobs_.length; i++) {\r\n    const blob = blobs_[i]!\r\n    const commitment = commitments[i]!\r\n    proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)))\r\n  }\r\n\r\n  return (\r\n    as === 'Bytes' ? proofs : proofs.map((x) => Hex.fromBytes(x))\r\n  ) as never\r\n}\r\n\r\nexport declare namespace toProofs {\r\n  type Options<\r\n    blobs extends Blobs<Bytes.Bytes> | Blobs<Hex.Hex> =\r\n      | Blobs<Bytes.Bytes>\r\n      | Blobs<Hex.Hex>,\r\n    commitments extends readonly Bytes.Bytes[] | readonly Hex.Hex[] =\r\n      | readonly Bytes.Bytes[]\r\n      | readonly Hex.Hex[],\r\n    as extends 'Hex' | 'Bytes' =\r\n      | (blobs extends Blobs<Hex.Hex> ? 'Hex' : never)\r\n      | (blobs extends Blobs<Bytes.Bytes> ? 'Bytes' : never),\r\n  > = {\r\n    /** Commitments for the blobs. */\r\n    commitments: (commitments | readonly Bytes.Bytes[] | readonly Hex.Hex[]) &\r\n      (commitments extends blobs\r\n        ? {}\r\n        : `commitments must be the same type as blobs`)\r\n    /** KZG implementation. */\r\n    kzg: Pick<Kzg.Kzg, 'computeBlobKzgProof'>\r\n    /** Return type. */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\r\n    | (as extends 'Bytes' ? readonly Bytes.Bytes[] : never)\r\n    | (as extends 'Hex' ? readonly Hex.Hex[] : never)\r\n\r\n  type ErrorType =\r\n    | Hex.fromBytes.ErrorType\r\n    | Bytes.fromHex.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Transforms {@link ox#Blobs.Blobs} into a {@link ox#Blobs.BlobSidecars} array.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'ox'\r\n * import { kzg } from './kzg'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const sidecars = Blobs.toSidecars(blobs, { kzg }) // [!code focus]\r\n * ```\r\n *\r\n * @example\r\n * You can also provide your own commitments and proofs if you do not want `toSidecars`\r\n * to compute them.\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'ox'\r\n * import { kzg } from './kzg'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const commitments = Blobs.toCommitments(blobs, { kzg })\r\n * const proofs = Blobs.toProofs(blobs, { commitments, kzg })\r\n *\r\n * const sidecars = Blobs.toSidecars(blobs, { commitments, kzg, proofs }) // [!code focus]\r\n * ```\r\n *\r\n * @param blobs - The {@link ox#Blobs.Blobs} to transform into {@link ox#Blobs.BlobSidecars}.\r\n * @param options - Options.\r\n * @returns The {@link ox#Blobs.BlobSidecars}.\r\n */\r\nexport function toSidecars<\r\n  const blobs extends Blobs<Hex.Hex> | Blobs<Bytes.Bytes>,\r\n>(\r\n  blobs: blobs,\r\n  options: toSidecars.Options<blobs>,\r\n): toSidecars.ReturnType<blobs> {\r\n  const { kzg } = options\r\n\r\n  const commitments = options.commitments ?? toCommitments(blobs, { kzg: kzg! })\r\n  const proofs =\r\n    options.proofs ??\r\n    toProofs(blobs, { commitments: commitments as any, kzg: kzg! })\r\n\r\n  const sidecars: Mutable<BlobSidecars> = []\r\n  for (let i = 0; i < blobs.length; i++)\r\n    sidecars.push({\r\n      blob: blobs[i]!,\r\n      commitment: commitments[i]!,\r\n      proof: proofs[i]!,\r\n    })\r\n\r\n  return sidecars as never\r\n}\r\n\r\nexport declare namespace toSidecars {\r\n  type Options<\r\n    blobs extends Blobs<Hex.Hex> | Blobs<Bytes.Bytes> =\r\n      | Blobs<Hex.Hex>\r\n      | Blobs<Bytes.Bytes>,\r\n  > = {\r\n    kzg?: Kzg.Kzg | undefined\r\n  } & OneOf<\r\n    | {}\r\n    | {\r\n        /** Commitment for each blob. */\r\n        commitments: blobs | readonly Hex.Hex[] | readonly Bytes.Bytes[]\r\n        /** Proof for each blob. */\r\n        proofs: blobs | readonly Hex.Hex[] | readonly Bytes.Bytes[]\r\n      }\r\n  >\r\n\r\n  type ReturnType<blobs extends Blobs<Hex.Hex> | Blobs<Bytes.Bytes>> =\r\n    UnionCompute<\r\n      | (blobs extends Blobs<Hex.Hex> ? BlobSidecars<Hex.Hex> : never)\r\n      | (blobs extends Blobs<Bytes.Bytes> ? BlobSidecars<Bytes.Bytes> : never)\r\n    >\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Compute Blob Versioned Hashes from a list of {@link ox#Blobs.Blobs}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Blobs } from 'ox'\r\n * import { kzg } from './kzg'\r\n *\r\n * const blobs = Blobs.from('0xdeadbeef')\r\n * const versionedHashes = Blobs.toVersionedHashes(blobs, { kzg }) // [!code focus]\r\n * ```\r\n *\r\n * @param blobs - The {@link ox#Blobs.Blobs} to transform into Blob Versioned Hashes.\r\n * @param options - Options.\r\n * @returns The Blob Versioned Hashes.\r\n */\r\nexport function toVersionedHashes<\r\n  const blobs extends Blobs<Bytes.Bytes> | Blobs<Hex.Hex>,\r\n  as extends 'Hex' | 'Bytes' =\r\n    | (blobs extends Blobs<Hex.Hex> ? 'Hex' : never)\r\n    | (blobs extends Blobs<Bytes.Bytes> ? 'Bytes' : never),\r\n>(\r\n  blobs: blobs | Blobs<Bytes.Bytes> | Blobs<Hex.Hex>,\r\n  options: toVersionedHashes.Options<as>,\r\n): toVersionedHashes.ReturnType<as> {\r\n  const commitments = toCommitments(blobs, options)\r\n  return commitmentsToVersionedHashes(commitments, options)\r\n}\r\n\r\nexport declare namespace toVersionedHashes {\r\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\r\n    /** KZG implementation. */\r\n    kzg: Pick<Kzg.Kzg, 'blobToKzgCommitment'>\r\n    /** Return type. */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex'> = Compute<\r\n    | (as extends 'Bytes' ? readonly Bytes.Bytes[] : never)\r\n    | (as extends 'Hex' ? readonly Hex.Hex[] : never)\r\n  >\r\n\r\n  type ErrorType =\r\n    | toCommitments.ErrorType\r\n    | commitmentsToVersionedHashes.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** A list of {@link ox#Blobs.BlobSidecar}. */\r\nexport type BlobSidecars<\r\n  type extends Hex.Hex | Bytes.Bytes = Hex.Hex | Bytes.Bytes,\r\n> = readonly Compute<BlobSidecar<type>>[]\r\n\r\n/** Thrown when the blob size is too large. */\r\nexport class BlobSizeTooLargeError extends Errors.BaseError {\r\n  override readonly name = 'Blobs.BlobSizeTooLargeError'\r\n  constructor({ maxSize, size }: { maxSize: number; size: number }) {\r\n    super('Blob size is too large.', {\r\n      metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size} bytes`],\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when the blob is empty. */\r\nexport class EmptyBlobError extends Errors.BaseError {\r\n  override readonly name = 'Blobs.EmptyBlobError'\r\n  constructor() {\r\n    super('Blob data must not be empty.')\r\n  }\r\n}\r\n\r\n/** Thrown when the blob versioned hashes are empty. */\r\nexport class EmptyBlobVersionedHashesError extends Errors.BaseError {\r\n  override readonly name = 'Blobs.EmptyBlobVersionedHashesError'\r\n  constructor() {\r\n    super('Blob versioned hashes must not be empty.')\r\n  }\r\n}\r\n\r\n/** Thrown when the blob versioned hash size is invalid. */\r\nexport class InvalidVersionedHashSizeError extends Errors.BaseError {\r\n  override readonly name = 'Blobs.InvalidVersionedHashSizeError'\r\n  constructor({\r\n    hash,\r\n    size,\r\n  }: {\r\n    hash: Hex.Hex\r\n    size: number\r\n  }) {\r\n    super(`Versioned hash \"${hash}\" size is invalid.`, {\r\n      metaMessages: ['Expected: 32', `Received: ${size}`],\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when the blob versioned hash version is invalid. */\r\nexport class InvalidVersionedHashVersionError extends Errors.BaseError {\r\n  override readonly name = 'Blobs.InvalidVersionedHashVersionError'\r\n  constructor({\r\n    hash,\r\n    version,\r\n  }: {\r\n    hash: Hex.Hex\r\n    version: number\r\n  }) {\r\n    super(`Versioned hash \"${hash}\" version is invalid.`, {\r\n      metaMessages: [\r\n        `Expected: ${Kzg.versionedHashVersion}`,\r\n        `Received: ${version}`,\r\n      ],\r\n    })\r\n  }\r\n}\r\n", "/**\r\n * bls12-381 is pairing-friendly Barreto-Lynn-Scott elliptic curve construction allowing to:\r\n\r\n* Construct zk-SNARKs at the ~120-bit security, as per [Barbulescu-Duquesne 2017](https://hal.science/hal-01534101/file/main.pdf)\r\n* Efficiently verify N aggregate signatures with 1 pairing and N ec additions:\r\nthe Boneh-Lynn-Shacham signature scheme is orders of magnitude more efficient than Schnorr\r\n\r\nBLS can mean 2 different things:\r\n\r\n* Barreto-Lynn-Scott: BLS12, a Pairing Friendly Elliptic Curve\r\n* Boneh-Lynn-Shacham: A Signature Scheme.\r\n\r\n### Summary\r\n\r\n1. BLS Relies on expensive bilinear pairing\r\n2. Secret Keys: 32 bytes\r\n3. Public Keys: 48 OR 96 bytes - big-endian x coordinate of point on G1 OR G2 curve\r\n4. Signatures: 96 OR 48 bytes - big-endian x coordinate of point on G2 OR G1 curve\r\n5. The 12 stands for the Embedding degree.\r\n\r\nModes of operation:\r\n\r\n* Long signatures:  48-byte keys + 96-byte sigs (G1 keys + G2 sigs).\r\n* Short signatures: 96-byte keys + 48-byte sigs (G2 keys + G1 sigs).\r\n\r\n### Formulas\r\n\r\n- `P = pk x G` - public keys\r\n- `S = pk x H(m)` - signing, uses hash-to-curve on m\r\n- `e(P, H(m)) == e(G, S)` - verification using pairings\r\n- `e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))` - signature aggregation\r\n\r\n### Curves\r\n\r\nG1 is ordinary elliptic curve. G2 is extension field curve, think \"over complex numbers\".\r\n\r\n- G1: y² = x³ + 4\r\n- G2: y² = x³ + 4(u + 1) where u = √−1; r-order subgroup of E'(Fp²), M-type twist\r\n\r\n### Towers\r\n\r\nPairing G1 + G2 produces element in Fp₁₂, 12-degree polynomial.\r\nFp₁₂ is usually implemented using tower of lower-degree polynomials for speed.\r\n\r\n- Fp₁₂ = Fp₆² => Fp₂³\r\n- Fp(u) / (u² - β) where β = -1\r\n- Fp₂(v) / (v³ - ξ) where ξ = u + 1\r\n- Fp₆(w) / (w² - γ) where γ = v\r\n- Fp²[u] = Fp/u²+1\r\n- Fp⁶[v] = Fp²/v³-1-u\r\n- Fp¹²[w] = Fp⁶/w²-v\r\n\r\n### Params\r\n\r\n* Embedding degree (k): 12\r\n* Seed is sometimes named x or t\r\n* t = -15132376222941642752\r\n* p = (t-1)² * (t⁴-t²+1)/3 + t\r\n* r = t⁴-t²+1\r\n* Ate loop size: X\r\n\r\nTo verify curve parameters, see\r\n[pairing-friendly-curves spec](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11).\r\nBasic math is done over finite fields over p.\r\nMore complicated math is done over polynominal extension fields.\r\n\r\n### Compatibility and notes\r\n1. It is compatible with Algorand, Chia, Dfinity, Ethereum, Filecoin, ZEC.\r\nFilecoin uses little endian byte arrays for secret keys - make sure to reverse byte order.\r\n2. Make sure to correctly select mode: \"long signature\" or \"short signature\".\r\n3. Compatible with specs:\r\n   RFC 9380,\r\n   [cfrg-pairing-friendly-curves-11](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11),\r\n   [cfrg-bls-signature-05](https://datatracker.ietf.org/doc/draft-irtf-cfrg-bls-signature/).\r\n\r\n *\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { sha256 } from '@noble/hashes/sha2.js';\r\nimport { bls, type CurveFn } from './abstract/bls.ts';\r\nimport { Field, type IField } from './abstract/modular.ts';\r\nimport {\r\n  abytes,\r\n  bitGet,\r\n  bitLen,\r\n  bytesToHex,\r\n  bytesToNumberBE,\r\n  concatBytes,\r\n  ensureBytes,\r\n  numberToBytesBE,\r\n  type Hex,\r\n} from './utils.ts';\r\n// Types\r\nimport { isogenyMap } from './abstract/hash-to-curve.ts';\r\nimport type { BigintTuple, Fp, Fp12, Fp2, Fp6 } from './abstract/tower.ts';\r\nimport { psiFrobenius, tower12 } from './abstract/tower.ts';\r\nimport {\r\n  mapToCurveSimpleSWU,\r\n  type AffinePoint,\r\n  type WeierstrassOpts,\r\n  type WeierstrassPoint,\r\n  type WeierstrassPointCons,\r\n} from './abstract/weierstrass.ts';\r\n\r\n// Be friendly to bad ECMAScript parsers by not using bigint literals\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\r\n\r\n// To verify math:\r\n// https://tools.ietf.org/html/draft-irtf-cfrg-pairing-friendly-curves-11\r\n\r\n// The BLS parameter x (seed) for BLS12-381. NOTE: it is negative!\r\n// x = -2^63 - 2^62 - 2^60 - 2^57 - 2^48 - 2^16\r\nconst BLS_X = BigInt('0xd201000000010000');\r\n// t = x (called differently in different places)\r\n// const t = -BLS_X;\r\nconst BLS_X_LEN = bitLen(BLS_X);\r\n\r\n// a=0, b=4\r\n// P is characteristic of field Fp, in which curve calculations are done.\r\n// p = (t-1)² * (t⁴-t²+1)/3 + t\r\n// bls12_381_Fp = (t-1n)**2n * (t**4n - t**2n + 1n) / 3n + t\r\n// r*h is curve order, amount of points on curve,\r\n// where r is order of prime subgroup and h is cofactor.\r\n// r = t⁴-t²+1\r\n// r = (t**4n - t**2n + 1n)\r\n// cofactor h of G1: (t - 1)²/3\r\n// cofactorG1 = (t-1n)**2n/3n\r\n// x = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507\r\n// y = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569\r\nconst bls12_381_CURVE_G1: WeierstrassOpts<bigint> = {\r\n  p: BigInt(\r\n    '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'\r\n  ),\r\n  n: BigInt('0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001'),\r\n  h: BigInt('0x396c8c005555e1568c00aaab0000aaab'),\r\n  a: _0n,\r\n  b: _4n,\r\n  Gx: BigInt(\r\n    '0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb'\r\n  ),\r\n  Gy: BigInt(\r\n    '0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1'\r\n  ),\r\n};\r\n\r\n// CURVE FIELDS\r\nexport const bls12_381_Fr: IField<bigint> = Field(bls12_381_CURVE_G1.n, { modOnDecode: true });\r\nconst { Fp, Fp2, Fp6, Fp4Square, Fp12 } = tower12({\r\n  // Order of Fp\r\n  ORDER: bls12_381_CURVE_G1.p,\r\n  // Finite extension field over irreducible polynominal.\r\n  // Fp(u) / (u² - β) where β = -1\r\n  FP2_NONRESIDUE: [_1n, _1n],\r\n  Fp2mulByB: ({ c0, c1 }) => {\r\n    const t0 = Fp.mul(c0, _4n); // 4 * c0\r\n    const t1 = Fp.mul(c1, _4n); // 4 * c1\r\n    // (T0-T1) + (T0+T1)*i\r\n    return { c0: Fp.sub(t0, t1), c1: Fp.add(t0, t1) };\r\n  },\r\n  // Fp12\r\n  // A cyclotomic group is a subgroup of Fp^n defined by\r\n  //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\r\n  // The result of any pairing is in a cyclotomic subgroup\r\n  // https://eprint.iacr.org/2009/565.pdf\r\n  Fp12cyclotomicSquare: ({ c0, c1 }): Fp12 => {\r\n    const { c0: c0c0, c1: c0c1, c2: c0c2 } = c0;\r\n    const { c0: c1c0, c1: c1c1, c2: c1c2 } = c1;\r\n    const { first: t3, second: t4 } = Fp4Square(c0c0, c1c1);\r\n    const { first: t5, second: t6 } = Fp4Square(c1c0, c0c2);\r\n    const { first: t7, second: t8 } = Fp4Square(c0c1, c1c2);\r\n    const t9 = Fp2.mulByNonresidue(t8); // T8 * (u + 1)\r\n    return {\r\n      c0: Fp6.create({\r\n        c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n), t3), // 2 * (T3 - c0c0)  + T3\r\n        c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n), t5), // 2 * (T5 - c0c1)  + T5\r\n        c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n), t7),\r\n      }), // 2 * (T7 - c0c2)  + T7\r\n      c1: Fp6.create({\r\n        c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n), t9), // 2 * (T9 + c1c0) + T9\r\n        c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n), t4), // 2 * (T4 + c1c1) + T4\r\n        c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n), t6),\r\n      }),\r\n    }; // 2 * (T6 + c1c2) + T6\r\n  },\r\n  Fp12cyclotomicExp(num, n) {\r\n    let z = Fp12.ONE;\r\n    for (let i = BLS_X_LEN - 1; i >= 0; i--) {\r\n      z = Fp12._cyclotomicSquare(z);\r\n      if (bitGet(n, i)) z = Fp12.mul(z, num);\r\n    }\r\n    return z;\r\n  },\r\n  // https://eprint.iacr.org/2010/354.pdf\r\n  // https://eprint.iacr.org/2009/565.pdf\r\n  Fp12finalExponentiate: (num) => {\r\n    const x = BLS_X;\r\n    // this^(q⁶) / this\r\n    const t0 = Fp12.div(Fp12.frobeniusMap(num, 6), num);\r\n    // t0^(q²) * t0\r\n    const t1 = Fp12.mul(Fp12.frobeniusMap(t0, 2), t0);\r\n    const t2 = Fp12.conjugate(Fp12._cyclotomicExp(t1, x));\r\n    const t3 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicSquare(t1)), t2);\r\n    const t4 = Fp12.conjugate(Fp12._cyclotomicExp(t3, x));\r\n    const t5 = Fp12.conjugate(Fp12._cyclotomicExp(t4, x));\r\n    const t6 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicExp(t5, x)), Fp12._cyclotomicSquare(t2));\r\n    const t7 = Fp12.conjugate(Fp12._cyclotomicExp(t6, x));\r\n    const t2_t5_pow_q2 = Fp12.frobeniusMap(Fp12.mul(t2, t5), 2);\r\n    const t4_t1_pow_q3 = Fp12.frobeniusMap(Fp12.mul(t4, t1), 3);\r\n    const t6_t1c_pow_q1 = Fp12.frobeniusMap(Fp12.mul(t6, Fp12.conjugate(t1)), 1);\r\n    const t7_t3c_t1 = Fp12.mul(Fp12.mul(t7, Fp12.conjugate(t3)), t1);\r\n    // (t2 * t5)^(q²) * (t4 * t1)^(q³) * (t6 * t1.conj)^(q^1) * t7 * t3.conj * t1\r\n    return Fp12.mul(Fp12.mul(Fp12.mul(t2_t5_pow_q2, t4_t1_pow_q3), t6_t1c_pow_q1), t7_t3c_t1);\r\n  },\r\n});\r\n\r\n// GLV endomorphism Ψ(P), for fast cofactor clearing\r\nconst { G2psi, G2psi2 } = psiFrobenius(Fp, Fp2, Fp2.div(Fp2.ONE, Fp2.NONRESIDUE)); // 1/(u+1)\r\n\r\n/**\r\n * Default hash_to_field / hash-to-curve for BLS.\r\n * m: 1 for G1, 2 for G2\r\n * k: target security level in bits\r\n * hash: any function, e.g. BBS+ uses BLAKE2: see [github](https://github.com/hyperledger/aries-framework-go/issues/2247).\r\n * Parameter values come from [section 8.8.2 of RFC 9380](https://www.rfc-editor.org/rfc/rfc9380#section-8.8.2).\r\n */\r\nconst htfDefaults = Object.freeze({\r\n  DST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\r\n  encodeDST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\r\n  p: Fp.ORDER,\r\n  m: 2,\r\n  k: 128,\r\n  expand: 'xmd',\r\n  hash: sha256,\r\n});\r\n\r\n// a=0, b=4\r\n// cofactor h of G2\r\n// (t^8 - 4t^7 + 5t^6 - 4t^4 + 6t^3 - 4t^2 - 4t + 13)/9\r\n// cofactorG2 = (t**8n - 4n*t**7n + 5n*t**6n - 4n*t**4n + 6n*t**3n - 4n*t**2n - 4n*t+13n)/9n\r\n// x = 3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758*u + 352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160\r\n// y = 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582*u + 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905\r\nconst bls12_381_CURVE_G2 = {\r\n  p: Fp2.ORDER,\r\n  n: bls12_381_CURVE_G1.n,\r\n  h: BigInt(\r\n    '0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5'\r\n  ),\r\n  a: Fp2.ZERO,\r\n  b: Fp2.fromBigTuple([_4n, _4n]),\r\n  Gx: Fp2.fromBigTuple([\r\n    BigInt(\r\n      '0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8'\r\n    ),\r\n    BigInt(\r\n      '0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e'\r\n    ),\r\n  ]),\r\n  Gy: Fp2.fromBigTuple([\r\n    BigInt(\r\n      '0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801'\r\n    ),\r\n    BigInt(\r\n      '0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be'\r\n    ),\r\n  ]),\r\n};\r\n\r\n// Encoding utils\r\n// Compressed point of infinity\r\n// Set compressed & point-at-infinity bits\r\nconst COMPZERO = setMask(Fp.toBytes(_0n), { infinity: true, compressed: true });\r\n\r\nfunction parseMask(bytes: Uint8Array) {\r\n  // Copy, so we can remove mask data. It will be removed also later, when Fp.create will call modulo.\r\n  bytes = bytes.slice();\r\n  const mask = bytes[0] & 0b1110_0000;\r\n  const compressed = !!((mask >> 7) & 1); // compression bit (0b1000_0000)\r\n  const infinity = !!((mask >> 6) & 1); // point at infinity bit (0b0100_0000)\r\n  const sort = !!((mask >> 5) & 1); // sort bit (0b0010_0000)\r\n  bytes[0] &= 0b0001_1111; // clear mask (zero first 3 bits)\r\n  return { compressed, infinity, sort, value: bytes };\r\n}\r\n\r\nfunction setMask(\r\n  bytes: Uint8Array,\r\n  mask: { compressed?: boolean; infinity?: boolean; sort?: boolean }\r\n) {\r\n  if (bytes[0] & 0b1110_0000) throw new Error('setMask: non-empty mask');\r\n  if (mask.compressed) bytes[0] |= 0b1000_0000;\r\n  if (mask.infinity) bytes[0] |= 0b0100_0000;\r\n  if (mask.sort) bytes[0] |= 0b0010_0000;\r\n  return bytes;\r\n}\r\n\r\nfunction pointG1ToBytes(\r\n  _c: WeierstrassPointCons<Fp>,\r\n  point: WeierstrassPoint<Fp>,\r\n  isComp: boolean\r\n) {\r\n  const { BYTES: L, ORDER: P } = Fp;\r\n  const is0 = point.is0();\r\n  const { x, y } = point.toAffine();\r\n  if (isComp) {\r\n    if (is0) return COMPZERO.slice();\r\n    const sort = Boolean((y * _2n) / P);\r\n    return setMask(numberToBytesBE(x, L), { compressed: true, sort });\r\n  } else {\r\n    if (is0) {\r\n      return concatBytes(Uint8Array.of(0x40), new Uint8Array(2 * L - 1));\r\n    } else {\r\n      return concatBytes(numberToBytesBE(x, L), numberToBytesBE(y, L));\r\n    }\r\n  }\r\n}\r\n\r\nfunction signatureG1ToBytes(point: WeierstrassPoint<Fp>) {\r\n  point.assertValidity();\r\n  const { BYTES: L, ORDER: P } = Fp;\r\n  const { x, y } = point.toAffine();\r\n  if (point.is0()) return COMPZERO.slice();\r\n  const sort = Boolean((y * _2n) / P);\r\n  return setMask(numberToBytesBE(x, L), { compressed: true, sort });\r\n}\r\n\r\nfunction pointG1FromBytes(bytes: Uint8Array): AffinePoint<Fp> {\r\n  const { compressed, infinity, sort, value } = parseMask(bytes);\r\n  const { BYTES: L, ORDER: P } = Fp;\r\n  if (value.length === 48 && compressed) {\r\n    const compressedValue = bytesToNumberBE(value);\r\n    // Zero\r\n    const x = Fp.create(compressedValue & Fp.MASK);\r\n    if (infinity) {\r\n      if (x !== _0n) throw new Error('invalid G1 point: non-empty, at infinity, with compression');\r\n      return { x: _0n, y: _0n };\r\n    }\r\n    const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381_CURVE_G1.b)); // y² = x³ + b\r\n    let y = Fp.sqrt(right);\r\n    if (!y) throw new Error('invalid G1 point: compressed point');\r\n    if ((y * _2n) / P !== BigInt(sort)) y = Fp.neg(y);\r\n    return { x: Fp.create(x), y: Fp.create(y) };\r\n  } else if (value.length === 96 && !compressed) {\r\n    // Check if the infinity flag is set\r\n    const x = bytesToNumberBE(value.subarray(0, L));\r\n    const y = bytesToNumberBE(value.subarray(L));\r\n    if (infinity) {\r\n      if (x !== _0n || y !== _0n) throw new Error('G1: non-empty point at infinity');\r\n      return bls12_381.G1.Point.ZERO.toAffine();\r\n    }\r\n    return { x: Fp.create(x), y: Fp.create(y) };\r\n  } else {\r\n    throw new Error('invalid G1 point: expected 48/96 bytes');\r\n  }\r\n}\r\n\r\nfunction signatureG1FromBytes(hex: Hex): WeierstrassPoint<Fp> {\r\n  const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex, 48));\r\n  const P = Fp.ORDER;\r\n  const Point = bls12_381.G1.Point;\r\n  const compressedValue = bytesToNumberBE(value);\r\n  // Zero\r\n  if (infinity) return Point.ZERO;\r\n  const x = Fp.create(compressedValue & Fp.MASK);\r\n  const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381_CURVE_G1.b)); // y² = x³ + b\r\n  let y = Fp.sqrt(right);\r\n  if (!y) throw new Error('invalid G1 point: compressed');\r\n  const aflag = BigInt(sort);\r\n  if ((y * _2n) / P !== aflag) y = Fp.neg(y);\r\n  const point = Point.fromAffine({ x, y });\r\n  point.assertValidity();\r\n  return point;\r\n}\r\n\r\nfunction pointG2ToBytes(\r\n  _c: WeierstrassPointCons<Fp2>,\r\n  point: WeierstrassPoint<Fp2>,\r\n  isComp: boolean\r\n) {\r\n  const { BYTES: L, ORDER: P } = Fp;\r\n  const is0 = point.is0();\r\n  const { x, y } = point.toAffine();\r\n  if (isComp) {\r\n    if (is0) return concatBytes(COMPZERO, numberToBytesBE(_0n, L));\r\n    const flag = Boolean(y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P);\r\n    return concatBytes(\r\n      setMask(numberToBytesBE(x.c1, L), { compressed: true, sort: flag }),\r\n      numberToBytesBE(x.c0, L)\r\n    );\r\n  } else {\r\n    if (is0) return concatBytes(Uint8Array.of(0x40), new Uint8Array(4 * L - 1));\r\n    const { re: x0, im: x1 } = Fp2.reim(x);\r\n    const { re: y0, im: y1 } = Fp2.reim(y);\r\n    return concatBytes(\r\n      numberToBytesBE(x1, L),\r\n      numberToBytesBE(x0, L),\r\n      numberToBytesBE(y1, L),\r\n      numberToBytesBE(y0, L)\r\n    );\r\n  }\r\n}\r\n\r\nfunction signatureG2ToBytes(point: WeierstrassPoint<Fp2>) {\r\n  point.assertValidity();\r\n  const { BYTES: L } = Fp;\r\n  if (point.is0()) return concatBytes(COMPZERO, numberToBytesBE(_0n, L));\r\n  const { x, y } = point.toAffine();\r\n  const { re: x0, im: x1 } = Fp2.reim(x);\r\n  const { re: y0, im: y1 } = Fp2.reim(y);\r\n  const tmp = y1 > _0n ? y1 * _2n : y0 * _2n;\r\n  const sort = Boolean((tmp / Fp.ORDER) & _1n);\r\n  const z2 = x0;\r\n  return concatBytes(\r\n    setMask(numberToBytesBE(x1, L), { sort, compressed: true }),\r\n    numberToBytesBE(z2, L)\r\n  );\r\n}\r\n\r\nfunction pointG2FromBytes(bytes: Uint8Array): AffinePoint<Fp2> {\r\n  const { BYTES: L, ORDER: P } = Fp;\r\n  const { compressed, infinity, sort, value } = parseMask(bytes);\r\n  if (\r\n    (!compressed && !infinity && sort) || // 00100000\r\n    (!compressed && infinity && sort) || // 01100000\r\n    (sort && infinity && compressed) // 11100000\r\n  ) {\r\n    throw new Error('invalid encoding flag: ' + (bytes[0] & 0b1110_0000));\r\n  }\r\n  const slc = (b: Uint8Array, from: number, to?: number) => bytesToNumberBE(b.slice(from, to));\r\n  if (value.length === 96 && compressed) {\r\n    if (infinity) {\r\n      // check that all bytes are 0\r\n      if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\r\n        throw new Error('invalid G2 point: compressed');\r\n      }\r\n      return { x: Fp2.ZERO, y: Fp2.ZERO };\r\n    }\r\n    const x_1 = slc(value, 0, L);\r\n    const x_0 = slc(value, L, 2 * L);\r\n    const x = Fp2.create({ c0: Fp.create(x_0), c1: Fp.create(x_1) });\r\n    const right = Fp2.add(Fp2.pow(x, _3n), bls12_381_CURVE_G2.b); // y² = x³ + 4 * (u+1) = x³ + b\r\n    let y = Fp2.sqrt(right);\r\n    const Y_bit = y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P ? _1n : _0n;\r\n    y = sort && Y_bit > 0 ? y : Fp2.neg(y);\r\n    return { x, y };\r\n  } else if (value.length === 192 && !compressed) {\r\n    if (infinity) {\r\n      if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\r\n        throw new Error('invalid G2 point: uncompressed');\r\n      }\r\n      return { x: Fp2.ZERO, y: Fp2.ZERO };\r\n    }\r\n    const x1 = slc(value, 0 * L, 1 * L);\r\n    const x0 = slc(value, 1 * L, 2 * L);\r\n    const y1 = slc(value, 2 * L, 3 * L);\r\n    const y0 = slc(value, 3 * L, 4 * L);\r\n    return { x: Fp2.fromBigTuple([x0, x1]), y: Fp2.fromBigTuple([y0, y1]) };\r\n  } else {\r\n    throw new Error('invalid G2 point: expected 96/192 bytes');\r\n  }\r\n}\r\n\r\nfunction signatureG2FromBytes(hex: Hex) {\r\n  const { ORDER: P } = Fp;\r\n  // TODO: Optimize, it's very slow because of sqrt.\r\n  const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex));\r\n  const Point = bls12_381.G2.Point;\r\n  const half = value.length / 2;\r\n  if (half !== 48 && half !== 96)\r\n    throw new Error('invalid compressed signature length, expected 96/192 bytes');\r\n  const z1 = bytesToNumberBE(value.slice(0, half));\r\n  const z2 = bytesToNumberBE(value.slice(half));\r\n  // Indicates the infinity point\r\n  if (infinity) return Point.ZERO;\r\n  const x1 = Fp.create(z1 & Fp.MASK);\r\n  const x2 = Fp.create(z2);\r\n  const x = Fp2.create({ c0: x2, c1: x1 });\r\n  const y2 = Fp2.add(Fp2.pow(x, _3n), bls12_381_CURVE_G2.b); // y² = x³ + 4\r\n  // The slow part\r\n  let y = Fp2.sqrt(y2);\r\n  if (!y) throw new Error('Failed to find a square root');\r\n\r\n  // Choose the y whose leftmost bit of the imaginary part is equal to the a_flag1\r\n  // If y1 happens to be zero, then use the bit of y0\r\n  const { re: y0, im: y1 } = Fp2.reim(y);\r\n  const aflag1 = BigInt(sort);\r\n  const isGreater = y1 > _0n && (y1 * _2n) / P !== aflag1;\r\n  const is0 = y1 === _0n && (y0 * _2n) / P !== aflag1;\r\n  if (isGreater || is0) y = Fp2.neg(y);\r\n  const point = Point.fromAffine({ x, y });\r\n  point.assertValidity();\r\n  return point;\r\n}\r\n\r\n/**\r\n * bls12-381 pairing-friendly curve.\r\n * @example\r\n * import { bls12_381 as bls } from '@noble/curves/bls12-381';\r\n * // G1 keys, G2 signatures\r\n * const privateKey = '67d53f170b908cabb9eb326c3c337762d59289a8fec79f7bc9254b584b73265c';\r\n * const message = '64726e3da8';\r\n * const publicKey = bls.getPublicKey(privateKey);\r\n * const signature = bls.sign(message, privateKey);\r\n * const isValid = bls.verify(signature, message, publicKey);\r\n */\r\nexport const bls12_381: CurveFn = bls({\r\n  // Fields\r\n  fields: {\r\n    Fp,\r\n    Fp2,\r\n    Fp6,\r\n    Fp12,\r\n    Fr: bls12_381_Fr,\r\n  },\r\n  // G1: y² = x³ + 4\r\n  G1: {\r\n    ...bls12_381_CURVE_G1,\r\n    Fp,\r\n    htfDefaults: { ...htfDefaults, m: 1, DST: 'BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_' },\r\n    wrapPrivateKey: true,\r\n    allowInfinityPoint: true,\r\n    // Checks is the point resides in prime-order subgroup.\r\n    // point.isTorsionFree() should return true for valid points\r\n    // It returns false for shitty points.\r\n    // https://eprint.iacr.org/2021/1130.pdf\r\n    isTorsionFree: (c, point): boolean => {\r\n      // GLV endomorphism ψ(P)\r\n      const beta = BigInt(\r\n        '0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\r\n      );\r\n      const phi = new c(Fp.mul(point.X, beta), point.Y, point.Z);\r\n      // TODO: unroll\r\n      const xP = point.multiplyUnsafe(BLS_X).negate(); // [x]P\r\n      const u2P = xP.multiplyUnsafe(BLS_X); // [u2]P\r\n      return u2P.equals(phi);\r\n    },\r\n    // Clear cofactor of G1\r\n    // https://eprint.iacr.org/2019/403\r\n    clearCofactor: (_c, point) => {\r\n      // return this.multiplyUnsafe(CURVE.h);\r\n      return point.multiplyUnsafe(BLS_X).add(point); // x*P + P\r\n    },\r\n    mapToCurve: mapToG1,\r\n    fromBytes: pointG1FromBytes,\r\n    toBytes: pointG1ToBytes,\r\n    ShortSignature: {\r\n      fromBytes(bytes: Uint8Array) {\r\n        abytes(bytes);\r\n        return signatureG1FromBytes(bytes);\r\n      },\r\n      fromHex(hex: Hex): WeierstrassPoint<Fp> {\r\n        return signatureG1FromBytes(hex);\r\n      },\r\n      toBytes(point: WeierstrassPoint<Fp>) {\r\n        return signatureG1ToBytes(point);\r\n      },\r\n      toRawBytes(point: WeierstrassPoint<Fp>) {\r\n        return signatureG1ToBytes(point);\r\n      },\r\n      toHex(point: WeierstrassPoint<Fp>) {\r\n        return bytesToHex(signatureG1ToBytes(point));\r\n      },\r\n    },\r\n  },\r\n  G2: {\r\n    ...bls12_381_CURVE_G2,\r\n    Fp: Fp2,\r\n    // https://datatracker.ietf.org/doc/html/rfc9380#name-clearing-the-cofactor\r\n    // https://datatracker.ietf.org/doc/html/rfc9380#name-cofactor-clearing-for-bls12\r\n    hEff: BigInt(\r\n      '0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551'\r\n    ),\r\n    htfDefaults: { ...htfDefaults },\r\n    wrapPrivateKey: true,\r\n    allowInfinityPoint: true,\r\n    mapToCurve: mapToG2,\r\n    // Checks is the point resides in prime-order subgroup.\r\n    // point.isTorsionFree() should return true for valid points\r\n    // It returns false for shitty points.\r\n    // https://eprint.iacr.org/2021/1130.pdf\r\n    // Older version: https://eprint.iacr.org/2019/814.pdf\r\n    isTorsionFree: (c, P): boolean => {\r\n      return P.multiplyUnsafe(BLS_X).negate().equals(G2psi(c, P)); // ψ(P) == [u](P)\r\n    },\r\n    // Maps the point into the prime-order subgroup G2.\r\n    // clear_cofactor_bls12381_g2 from RFC 9380.\r\n    // https://eprint.iacr.org/2017/419.pdf\r\n    // prettier-ignore\r\n    clearCofactor: (c, P) => {\r\n      const x = BLS_X;\r\n      let t1 = P.multiplyUnsafe(x).negate();  // [-x]P\r\n      let t2 = G2psi(c, P);                   // Ψ(P)\r\n      let t3 = P.double();                    // 2P\r\n      t3 = G2psi2(c, t3);                     // Ψ²(2P)\r\n      t3 = t3.subtract(t2);                   // Ψ²(2P) - Ψ(P)\r\n      t2 = t1.add(t2);                        // [-x]P + Ψ(P)\r\n      t2 = t2.multiplyUnsafe(x).negate();     // [x²]P - [x]Ψ(P)\r\n      t3 = t3.add(t2);                        // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P)\r\n      t3 = t3.subtract(t1);                   // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P\r\n      const Q = t3.subtract(P);               // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P - 1P\r\n      return Q;                               // [x²-x-1]P + [x-1]Ψ(P) + Ψ²(2P)\r\n    },\r\n    fromBytes: pointG2FromBytes,\r\n    toBytes: pointG2ToBytes,\r\n    Signature: {\r\n      fromBytes(bytes: Uint8Array): WeierstrassPoint<Fp2> {\r\n        abytes(bytes);\r\n        return signatureG2FromBytes(bytes);\r\n      },\r\n      fromHex(hex: Hex): WeierstrassPoint<Fp2> {\r\n        return signatureG2FromBytes(hex);\r\n      },\r\n      toBytes(point: WeierstrassPoint<Fp2>) {\r\n        return signatureG2ToBytes(point);\r\n      },\r\n      toRawBytes(point: WeierstrassPoint<Fp2>) {\r\n        return signatureG2ToBytes(point);\r\n      },\r\n      toHex(point: WeierstrassPoint<Fp2>) {\r\n        return bytesToHex(signatureG2ToBytes(point));\r\n      },\r\n    },\r\n  },\r\n  params: {\r\n    ateLoopSize: BLS_X, // The BLS parameter x for BLS12-381\r\n    r: bls12_381_CURVE_G1.n, // order; z⁴ − z² + 1; CURVE.n from other curves\r\n    xNegative: true,\r\n    twistType: 'multiplicative',\r\n  },\r\n  htfDefaults,\r\n  hash: sha256,\r\n});\r\n\r\n// 3-isogeny map from E' to E https://www.rfc-editor.org/rfc/rfc9380#appendix-E.3\r\nconst isogenyMapG2 = isogenyMap(\r\n  Fp2,\r\n  [\r\n    // xNum\r\n    [\r\n      [\r\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\r\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\r\n      ],\r\n      [\r\n        '0x0',\r\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a',\r\n      ],\r\n      [\r\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e',\r\n        '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d',\r\n      ],\r\n      [\r\n        '0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1',\r\n        '0x0',\r\n      ],\r\n    ],\r\n    // xDen\r\n    [\r\n      [\r\n        '0x0',\r\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63',\r\n      ],\r\n      [\r\n        '0xc',\r\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f',\r\n      ],\r\n      ['0x1', '0x0'], // LAST 1\r\n    ],\r\n    // yNum\r\n    [\r\n      [\r\n        '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\r\n        '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\r\n      ],\r\n      [\r\n        '0x0',\r\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be',\r\n      ],\r\n      [\r\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c',\r\n        '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f',\r\n      ],\r\n      [\r\n        '0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10',\r\n        '0x0',\r\n      ],\r\n    ],\r\n    // yDen\r\n    [\r\n      [\r\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\r\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\r\n      ],\r\n      [\r\n        '0x0',\r\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3',\r\n      ],\r\n      [\r\n        '0x12',\r\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99',\r\n      ],\r\n      ['0x1', '0x0'], // LAST 1\r\n    ],\r\n  ].map((i) => i.map((pair) => Fp2.fromBigTuple(pair.map(BigInt) as BigintTuple))) as [\r\n    Fp2[],\r\n    Fp2[],\r\n    Fp2[],\r\n    Fp2[],\r\n  ]\r\n);\r\n// 11-isogeny map from E' to E\r\nconst isogenyMapG1 = isogenyMap(\r\n  Fp,\r\n  [\r\n    // xNum\r\n    [\r\n      '0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7',\r\n      '0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb',\r\n      '0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0',\r\n      '0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861',\r\n      '0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9',\r\n      '0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983',\r\n      '0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84',\r\n      '0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e',\r\n      '0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317',\r\n      '0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e',\r\n      '0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b',\r\n      '0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229',\r\n    ],\r\n    // xDen\r\n    [\r\n      '0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c',\r\n      '0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff',\r\n      '0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19',\r\n      '0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8',\r\n      '0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e',\r\n      '0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5',\r\n      '0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a',\r\n      '0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e',\r\n      '0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641',\r\n      '0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a',\r\n      '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n    ],\r\n    // yNum\r\n    [\r\n      '0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33',\r\n      '0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696',\r\n      '0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6',\r\n      '0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb',\r\n      '0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb',\r\n      '0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0',\r\n      '0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2',\r\n      '0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29',\r\n      '0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587',\r\n      '0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30',\r\n      '0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132',\r\n      '0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e',\r\n      '0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8',\r\n      '0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133',\r\n      '0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b',\r\n      '0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604',\r\n    ],\r\n    // yDen\r\n    [\r\n      '0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1',\r\n      '0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d',\r\n      '0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2',\r\n      '0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416',\r\n      '0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d',\r\n      '0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac',\r\n      '0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c',\r\n      '0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9',\r\n      '0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a',\r\n      '0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55',\r\n      '0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8',\r\n      '0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092',\r\n      '0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc',\r\n      '0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7',\r\n      '0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f',\r\n      '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n    ],\r\n  ].map((i) => i.map((j) => BigInt(j))) as [Fp[], Fp[], Fp[], Fp[]]\r\n);\r\n\r\n// Optimized SWU Map - Fp to G1\r\nconst G1_SWU = mapToCurveSimpleSWU(Fp, {\r\n  A: Fp.create(\r\n    BigInt(\r\n      '0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d'\r\n    )\r\n  ),\r\n  B: Fp.create(\r\n    BigInt(\r\n      '0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0'\r\n    )\r\n  ),\r\n  Z: Fp.create(BigInt(11)),\r\n});\r\n// SWU Map - Fp2 to G2': y² = x³ + 240i * x + 1012 + 1012i\r\nconst G2_SWU = mapToCurveSimpleSWU(Fp2, {\r\n  A: Fp2.create({ c0: Fp.create(_0n), c1: Fp.create(BigInt(240)) }), // A' = 240 * I\r\n  B: Fp2.create({ c0: Fp.create(BigInt(1012)), c1: Fp.create(BigInt(1012)) }), // B' = 1012 * (1 + I)\r\n  Z: Fp2.create({ c0: Fp.create(BigInt(-2)), c1: Fp.create(BigInt(-1)) }), // Z: -(2 + I)\r\n});\r\n\r\nfunction mapToG1(scalars: bigint[]) {\r\n  const { x, y } = G1_SWU(Fp.create(scalars[0]));\r\n  return isogenyMapG1(x, y);\r\n}\r\nfunction mapToG2(scalars: bigint[]) {\r\n  const { x, y } = G2_SWU(Fp2.fromBigTuple(scalars as BigintTuple));\r\n  return isogenyMapG2(x, y);\r\n}\r\n", "/**\r\n * BLS != BLS.\r\n * The file implements BLS (Boneh-Lynn-Shacham) signatures.\r\n * Used in both BLS (Barreto-Lynn-Scott) and BN (Barreto-Naehrig)\r\n * families of pairing-friendly curves.\r\n * Consists of two curves: G1 and G2:\r\n * - G1 is a subgroup of (x, y) E(Fq) over y² = x³ + 4.\r\n * - G2 is a subgroup of ((x₁, x₂+i), (y₁, y₂+i)) E(Fq²) over y² = x³ + 4(1 + i) where i is √-1\r\n * - Gt, created by bilinear (ate) pairing e(G1, G2), consists of p-th roots of unity in\r\n *   Fq^k where k is embedding degree. Only degree 12 is currently supported, 24 is not.\r\n * Pairing is used to aggregate and verify signatures.\r\n * There are two modes of operation:\r\n * - Long signatures:  X-byte keys + 2X-byte sigs (G1 keys + G2 sigs).\r\n * - Short signatures: 2X-byte keys + X-byte sigs (G2 keys + G1 sigs).\r\n * @module\r\n **/\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport {\r\n  abytes,\r\n  ensureBytes,\r\n  memoized,\r\n  randomBytes,\r\n  type CHash,\r\n  type Hex,\r\n  type PrivKey,\r\n} from '../utils.ts';\r\nimport { normalizeZ } from './curve.ts';\r\nimport {\r\n  createHasher,\r\n  type H2CHasher,\r\n  type H2CHashOpts,\r\n  type H2COpts,\r\n  type H2CPointConstructor,\r\n  type htfBasicOpts,\r\n  type MapToCurve,\r\n} from './hash-to-curve.ts';\r\nimport { getMinHashLength, mapHashToField, type IField } from './modular.ts';\r\nimport type { Fp12, Fp12Bls, Fp2, Fp2Bls, Fp6Bls } from './tower.ts';\r\nimport {\r\n  _normFnElement,\r\n  weierstrassPoints,\r\n  type CurvePointsRes,\r\n  type CurvePointsType,\r\n  type WeierstrassPoint,\r\n  type WeierstrassPointCons,\r\n} from './weierstrass.ts';\r\n\r\ntype Fp = bigint; // Can be different field?\r\n\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\r\n\r\nexport type TwistType = 'multiplicative' | 'divisive';\r\n\r\nexport type ShortSignatureCoder<Fp> = {\r\n  fromBytes(bytes: Uint8Array): WeierstrassPoint<Fp>;\r\n  fromHex(hex: Hex): WeierstrassPoint<Fp>;\r\n  toBytes(point: WeierstrassPoint<Fp>): Uint8Array;\r\n  /** @deprecated use `toBytes` */\r\n  toRawBytes(point: WeierstrassPoint<Fp>): Uint8Array;\r\n  toHex(point: WeierstrassPoint<Fp>): string;\r\n};\r\n\r\nexport type SignatureCoder<Fp> = {\r\n  fromBytes(bytes: Uint8Array): WeierstrassPoint<Fp>;\r\n  fromHex(hex: Hex): WeierstrassPoint<Fp>;\r\n  toBytes(point: WeierstrassPoint<Fp>): Uint8Array;\r\n  /** @deprecated use `toBytes` */\r\n  toRawBytes(point: WeierstrassPoint<Fp>): Uint8Array;\r\n  toHex(point: WeierstrassPoint<Fp>): string;\r\n};\r\n\r\nexport type BlsFields = {\r\n  Fp: IField<Fp>;\r\n  Fr: IField<bigint>;\r\n  Fp2: Fp2Bls;\r\n  Fp6: Fp6Bls;\r\n  Fp12: Fp12Bls;\r\n};\r\n\r\nexport type PostPrecomputePointAddFn = (\r\n  Rx: Fp2,\r\n  Ry: Fp2,\r\n  Rz: Fp2,\r\n  Qx: Fp2,\r\n  Qy: Fp2\r\n) => { Rx: Fp2; Ry: Fp2; Rz: Fp2 };\r\nexport type PostPrecomputeFn = (\r\n  Rx: Fp2,\r\n  Ry: Fp2,\r\n  Rz: Fp2,\r\n  Qx: Fp2,\r\n  Qy: Fp2,\r\n  pointAdd: PostPrecomputePointAddFn\r\n) => void;\r\nexport type BlsPairing = {\r\n  Fp12: Fp12Bls;\r\n  calcPairingPrecomputes: (p: WeierstrassPoint<Fp2>) => Precompute;\r\n  millerLoopBatch: (pairs: [Precompute, Fp, Fp][]) => Fp12;\r\n  pairing: (P: WeierstrassPoint<Fp>, Q: WeierstrassPoint<Fp2>, withFinalExponent?: boolean) => Fp12;\r\n  pairingBatch: (\r\n    pairs: { g1: WeierstrassPoint<Fp>; g2: WeierstrassPoint<Fp2> }[],\r\n    withFinalExponent?: boolean\r\n  ) => Fp12;\r\n};\r\n// TODO: replace CurveType with this? It doesn't contain r however and has postPrecompute\r\nexport type BlsPairingParams = {\r\n  // NOTE: MSB is always ignored and used as marker for length,\r\n  // otherwise leading zeros will be lost.\r\n  // Can be different from 'X' (seed) param!\r\n  ateLoopSize: bigint;\r\n  xNegative: boolean;\r\n  twistType: TwistType; // BLS12-381: Multiplicative, BN254: Divisive\r\n  // This is super ugly hack for untwist point in BN254 after miller loop\r\n  postPrecompute?: PostPrecomputeFn;\r\n};\r\nexport type CurveType = {\r\n  G1: CurvePointsType<Fp> & {\r\n    ShortSignature: SignatureCoder<Fp>;\r\n    mapToCurve: MapToCurve<Fp>;\r\n    htfDefaults: H2COpts;\r\n  };\r\n  G2: CurvePointsType<Fp2> & {\r\n    Signature: SignatureCoder<Fp2>;\r\n    mapToCurve: MapToCurve<Fp2>;\r\n    htfDefaults: H2COpts;\r\n  };\r\n  fields: BlsFields;\r\n  params: {\r\n    // NOTE: MSB is always ignored and used as marker for length,\r\n    // otherwise leading zeros will be lost.\r\n    // Can be different from 'X' (seed) param!\r\n    ateLoopSize: BlsPairingParams['ateLoopSize'];\r\n    xNegative: BlsPairingParams['xNegative'];\r\n    r: bigint; // TODO: remove\r\n    twistType: BlsPairingParams['twistType']; // BLS12-381: Multiplicative, BN254: Divisive\r\n  };\r\n  htfDefaults: H2COpts;\r\n  hash: CHash; // Because we need outputLen for DRBG\r\n  randomBytes?: (bytesLength?: number) => Uint8Array;\r\n  // This is super ugly hack for untwist point in BN254 after miller loop\r\n  postPrecompute?: PostPrecomputeFn;\r\n};\r\n\r\ntype PrecomputeSingle = [Fp2, Fp2, Fp2][];\r\ntype Precompute = PrecomputeSingle[];\r\n\r\n/**\r\n * BLS consists of two curves: G1 and G2:\r\n * - G1 is a subgroup of (x, y) E(Fq) over y² = x³ + 4.\r\n * - G2 is a subgroup of ((x₁, x₂+i), (y₁, y₂+i)) E(Fq²) over y² = x³ + 4(1 + i) where i is √-1\r\n */\r\nexport interface BLSCurvePair {\r\n  longSignatures: BLSSigs<bigint, Fp2>;\r\n  shortSignatures: BLSSigs<Fp2, bigint>;\r\n  millerLoopBatch: BlsPairing['millerLoopBatch'];\r\n  pairing: BlsPairing['pairing'];\r\n  pairingBatch: BlsPairing['pairingBatch'];\r\n  G1: { Point: WeierstrassPointCons<bigint> } & H2CHasher<Fp>;\r\n  G2: { Point: WeierstrassPointCons<Fp2> } & H2CHasher<Fp2>;\r\n  fields: {\r\n    Fp: IField<Fp>;\r\n    Fp2: Fp2Bls;\r\n    Fp6: Fp6Bls;\r\n    Fp12: Fp12Bls;\r\n    Fr: IField<bigint>;\r\n  };\r\n  utils: {\r\n    randomSecretKey: () => Uint8Array;\r\n    /** @deprecated use randomSecretKey */\r\n    randomPrivateKey: () => Uint8Array;\r\n    calcPairingPrecomputes: BlsPairing['calcPairingPrecomputes'];\r\n  };\r\n}\r\n\r\nexport type CurveFn = BLSCurvePair & {\r\n  /** @deprecated use `longSignatures.getPublicKey` */\r\n  getPublicKey: (secretKey: PrivKey) => Uint8Array;\r\n  /** @deprecated use `shortSignatures.getPublicKey` */\r\n  getPublicKeyForShortSignatures: (secretKey: PrivKey) => Uint8Array;\r\n  /** @deprecated use `longSignatures.sign` */\r\n  sign: {\r\n    (message: Hex, secretKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\r\n    (\r\n      message: WeierstrassPoint<Fp2>,\r\n      secretKey: PrivKey,\r\n      htfOpts?: htfBasicOpts\r\n    ): WeierstrassPoint<Fp2>;\r\n  };\r\n  /** @deprecated use `shortSignatures.sign` */\r\n  signShortSignature: {\r\n    (message: Hex, secretKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\r\n    (\r\n      message: WeierstrassPoint<Fp>,\r\n      secretKey: PrivKey,\r\n      htfOpts?: htfBasicOpts\r\n    ): WeierstrassPoint<Fp>;\r\n  };\r\n  /** @deprecated use `longSignatures.verify` */\r\n  verify: (\r\n    signature: Hex | WeierstrassPoint<Fp2>,\r\n    message: Hex | WeierstrassPoint<Fp2>,\r\n    publicKey: Hex | WeierstrassPoint<Fp>,\r\n    htfOpts?: htfBasicOpts\r\n  ) => boolean;\r\n  /** @deprecated use `shortSignatures.verify` */\r\n  verifyShortSignature: (\r\n    signature: Hex | WeierstrassPoint<Fp>,\r\n    message: Hex | WeierstrassPoint<Fp>,\r\n    publicKey: Hex | WeierstrassPoint<Fp2>,\r\n    htfOpts?: htfBasicOpts\r\n  ) => boolean;\r\n  verifyBatch: (\r\n    signature: Hex | WeierstrassPoint<Fp2>,\r\n    messages: (Hex | WeierstrassPoint<Fp2>)[],\r\n    publicKeys: (Hex | WeierstrassPoint<Fp>)[],\r\n    htfOpts?: htfBasicOpts\r\n  ) => boolean;\r\n  /** @deprecated use `longSignatures.aggregatePublicKeys` */\r\n  aggregatePublicKeys: {\r\n    (publicKeys: Hex[]): Uint8Array;\r\n    (publicKeys: WeierstrassPoint<Fp>[]): WeierstrassPoint<Fp>;\r\n  };\r\n  /** @deprecated use `longSignatures.aggregateSignatures` */\r\n  aggregateSignatures: {\r\n    (signatures: Hex[]): Uint8Array;\r\n    (signatures: WeierstrassPoint<Fp2>[]): WeierstrassPoint<Fp2>;\r\n  };\r\n  /** @deprecated use `shortSignatures.aggregateSignatures` */\r\n  aggregateShortSignatures: {\r\n    (signatures: Hex[]): Uint8Array;\r\n    (signatures: WeierstrassPoint<Fp>[]): WeierstrassPoint<Fp>;\r\n  };\r\n  G1: CurvePointsRes<Fp> & H2CHasher<Fp>;\r\n  G2: CurvePointsRes<Fp2> & H2CHasher<Fp2>;\r\n  /** @deprecated use `longSignatures.Signature` */\r\n  Signature: SignatureCoder<Fp2>;\r\n  /** @deprecated use `shortSignatures.Signature` */\r\n  ShortSignature: ShortSignatureCoder<Fp>;\r\n  params: {\r\n    ateLoopSize: bigint;\r\n    r: bigint;\r\n    twistType: TwistType;\r\n    /** @deprecated */\r\n    G1b: bigint;\r\n    /** @deprecated */\r\n    G2b: Fp2;\r\n  };\r\n};\r\n\r\ntype BLSInput = Hex | Uint8Array;\r\nexport interface BLSSigs<P, S> {\r\n  getPublicKey(secretKey: PrivKey): WeierstrassPoint<P>;\r\n  sign(hashedMessage: WeierstrassPoint<S>, secretKey: PrivKey): WeierstrassPoint<S>;\r\n  verify(\r\n    signature: WeierstrassPoint<S> | BLSInput,\r\n    message: WeierstrassPoint<S>,\r\n    publicKey: WeierstrassPoint<P> | BLSInput\r\n  ): boolean;\r\n  verifyBatch: (\r\n    signature: WeierstrassPoint<S> | BLSInput,\r\n    messages: WeierstrassPoint<S>[],\r\n    publicKeys: (WeierstrassPoint<P> | BLSInput)[]\r\n  ) => boolean;\r\n  aggregatePublicKeys(publicKeys: (WeierstrassPoint<P> | BLSInput)[]): WeierstrassPoint<P>;\r\n  aggregateSignatures(signatures: (WeierstrassPoint<S> | BLSInput)[]): WeierstrassPoint<S>;\r\n  hash(message: Uint8Array, DST?: string | Uint8Array, hashOpts?: H2CHashOpts): WeierstrassPoint<S>;\r\n  Signature: SignatureCoder<S>;\r\n}\r\n\r\n// Not used with BLS12-381 (no sequential `11` in X). Useful for other curves.\r\nfunction NAfDecomposition(a: bigint) {\r\n  const res = [];\r\n  // a>1 because of marker bit\r\n  for (; a > _1n; a >>= _1n) {\r\n    if ((a & _1n) === _0n) res.unshift(0);\r\n    else if ((a & _3n) === _3n) {\r\n      res.unshift(-1);\r\n      a += _1n;\r\n    } else res.unshift(1);\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction aNonEmpty(arr: any[]) {\r\n  if (!Array.isArray(arr) || arr.length === 0) throw new Error('expected non-empty array');\r\n}\r\n\r\n// This should be enough for bn254, no need to export full stuff?\r\nfunction createBlsPairing(\r\n  fields: BlsFields,\r\n  G1: WeierstrassPointCons<Fp>,\r\n  G2: WeierstrassPointCons<Fp2>,\r\n  params: BlsPairingParams\r\n): BlsPairing {\r\n  const { Fp2, Fp12 } = fields;\r\n  const { twistType, ateLoopSize, xNegative, postPrecompute } = params;\r\n  type G1 = typeof G1.BASE;\r\n  type G2 = typeof G2.BASE;\r\n  // Applies sparse multiplication as line function\r\n  let lineFunction: (c0: Fp2, c1: Fp2, c2: Fp2, f: Fp12, Px: Fp, Py: Fp) => Fp12;\r\n  if (twistType === 'multiplicative') {\r\n    lineFunction = (c0: Fp2, c1: Fp2, c2: Fp2, f: Fp12, Px: Fp, Py: Fp) =>\r\n      Fp12.mul014(f, c0, Fp2.mul(c1, Px), Fp2.mul(c2, Py));\r\n  } else if (twistType === 'divisive') {\r\n    // NOTE: it should be [c0, c1, c2], but we use different order here to reduce complexity of\r\n    // precompute calculations.\r\n    lineFunction = (c0: Fp2, c1: Fp2, c2: Fp2, f: Fp12, Px: Fp, Py: Fp) =>\r\n      Fp12.mul034(f, Fp2.mul(c2, Py), Fp2.mul(c1, Px), c0);\r\n  } else throw new Error('bls: unknown twist type');\r\n\r\n  const Fp2div2 = Fp2.div(Fp2.ONE, Fp2.mul(Fp2.ONE, _2n));\r\n  function pointDouble(ell: PrecomputeSingle, Rx: Fp2, Ry: Fp2, Rz: Fp2) {\r\n    const t0 = Fp2.sqr(Ry); // Ry²\r\n    const t1 = Fp2.sqr(Rz); // Rz²\r\n    const t2 = Fp2.mulByB(Fp2.mul(t1, _3n)); // 3 * T1 * B\r\n    const t3 = Fp2.mul(t2, _3n); // 3 * T2\r\n    const t4 = Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(Ry, Rz)), t1), t0); // (Ry + Rz)² - T1 - T0\r\n    const c0 = Fp2.sub(t2, t0); // T2 - T0 (i)\r\n    const c1 = Fp2.mul(Fp2.sqr(Rx), _3n); // 3 * Rx²\r\n    const c2 = Fp2.neg(t4); // -T4 (-h)\r\n\r\n    ell.push([c0, c1, c2]);\r\n\r\n    Rx = Fp2.mul(Fp2.mul(Fp2.mul(Fp2.sub(t0, t3), Rx), Ry), Fp2div2); // ((T0 - T3) * Rx * Ry) / 2\r\n    Ry = Fp2.sub(Fp2.sqr(Fp2.mul(Fp2.add(t0, t3), Fp2div2)), Fp2.mul(Fp2.sqr(t2), _3n)); // ((T0 + T3) / 2)² - 3 * T2²\r\n    Rz = Fp2.mul(t0, t4); // T0 * T4\r\n    return { Rx, Ry, Rz };\r\n  }\r\n  function pointAdd(ell: PrecomputeSingle, Rx: Fp2, Ry: Fp2, Rz: Fp2, Qx: Fp2, Qy: Fp2) {\r\n    // Addition\r\n    const t0 = Fp2.sub(Ry, Fp2.mul(Qy, Rz)); // Ry - Qy * Rz\r\n    const t1 = Fp2.sub(Rx, Fp2.mul(Qx, Rz)); // Rx - Qx * Rz\r\n    const c0 = Fp2.sub(Fp2.mul(t0, Qx), Fp2.mul(t1, Qy)); // T0 * Qx - T1 * Qy == Ry * Qx  - Rx * Qy\r\n    const c1 = Fp2.neg(t0); // -T0 == Qy * Rz - Ry\r\n    const c2 = t1; // == Rx - Qx * Rz\r\n\r\n    ell.push([c0, c1, c2]);\r\n\r\n    const t2 = Fp2.sqr(t1); // T1²\r\n    const t3 = Fp2.mul(t2, t1); // T2 * T1\r\n    const t4 = Fp2.mul(t2, Rx); // T2 * Rx\r\n    const t5 = Fp2.add(Fp2.sub(t3, Fp2.mul(t4, _2n)), Fp2.mul(Fp2.sqr(t0), Rz)); // T3 - 2 * T4 + T0² * Rz\r\n    Rx = Fp2.mul(t1, t5); // T1 * T5\r\n    Ry = Fp2.sub(Fp2.mul(Fp2.sub(t4, t5), t0), Fp2.mul(t3, Ry)); // (T4 - T5) * T0 - T3 * Ry\r\n    Rz = Fp2.mul(Rz, t3); // Rz * T3\r\n    return { Rx, Ry, Rz };\r\n  }\r\n\r\n  // Pre-compute coefficients for sparse multiplication\r\n  // Point addition and point double calculations is reused for coefficients\r\n  // pointAdd happens only if bit set, so wNAF is reasonable. Unfortunately we cannot combine\r\n  // add + double in windowed precomputes here, otherwise it would be single op (since X is static)\r\n  const ATE_NAF = NAfDecomposition(ateLoopSize);\r\n\r\n  const calcPairingPrecomputes = memoized((point: G2) => {\r\n    const p = point;\r\n    const { x, y } = p.toAffine();\r\n    // prettier-ignore\r\n    const Qx = x, Qy = y, negQy = Fp2.neg(y);\r\n    // prettier-ignore\r\n    let Rx = Qx, Ry = Qy, Rz = Fp2.ONE;\r\n    const ell: Precompute = [];\r\n    for (const bit of ATE_NAF) {\r\n      const cur: PrecomputeSingle = [];\r\n      ({ Rx, Ry, Rz } = pointDouble(cur, Rx, Ry, Rz));\r\n      if (bit) ({ Rx, Ry, Rz } = pointAdd(cur, Rx, Ry, Rz, Qx, bit === -1 ? negQy : Qy));\r\n      ell.push(cur);\r\n    }\r\n    if (postPrecompute) {\r\n      const last = ell[ell.length - 1];\r\n      postPrecompute(Rx, Ry, Rz, Qx, Qy, pointAdd.bind(null, last));\r\n    }\r\n    return ell;\r\n  });\r\n\r\n  // Main pairing logic is here. Computes product of miller loops + final exponentiate\r\n  // Applies calculated precomputes\r\n  type MillerInput = [Precompute, Fp, Fp][];\r\n  function millerLoopBatch(pairs: MillerInput, withFinalExponent: boolean = false) {\r\n    let f12 = Fp12.ONE;\r\n    if (pairs.length) {\r\n      const ellLen = pairs[0][0].length;\r\n      for (let i = 0; i < ellLen; i++) {\r\n        f12 = Fp12.sqr(f12); // This allows us to do sqr only one time for all pairings\r\n        // NOTE: we apply multiple pairings in parallel here\r\n        for (const [ell, Px, Py] of pairs) {\r\n          for (const [c0, c1, c2] of ell[i]) f12 = lineFunction(c0, c1, c2, f12, Px, Py);\r\n        }\r\n      }\r\n    }\r\n    if (xNegative) f12 = Fp12.conjugate(f12);\r\n    return withFinalExponent ? Fp12.finalExponentiate(f12) : f12;\r\n  }\r\n  type PairingInput = { g1: G1; g2: G2 };\r\n  // Calculates product of multiple pairings\r\n  // This up to x2 faster than just `map(({g1, g2})=>pairing({g1,g2}))`\r\n  function pairingBatch(pairs: PairingInput[], withFinalExponent: boolean = true) {\r\n    const res: MillerInput = [];\r\n    // Cache precomputed toAffine for all points\r\n    normalizeZ(\r\n      G1,\r\n      pairs.map(({ g1 }) => g1)\r\n    );\r\n    normalizeZ(\r\n      G2,\r\n      pairs.map(({ g2 }) => g2)\r\n    );\r\n    for (const { g1, g2 } of pairs) {\r\n      if (g1.is0() || g2.is0()) throw new Error('pairing is not available for ZERO point');\r\n      // This uses toAffine inside\r\n      g1.assertValidity();\r\n      g2.assertValidity();\r\n      const Qa = g1.toAffine();\r\n      res.push([calcPairingPrecomputes(g2), Qa.x, Qa.y]);\r\n    }\r\n    return millerLoopBatch(res, withFinalExponent);\r\n  }\r\n  // Calculates bilinear pairing\r\n  function pairing(Q: G1, P: G2, withFinalExponent: boolean = true): Fp12 {\r\n    return pairingBatch([{ g1: Q, g2: P }], withFinalExponent);\r\n  }\r\n  return {\r\n    Fp12, // NOTE: we re-export Fp12 here because pairing results are Fp12!\r\n    millerLoopBatch,\r\n    pairing,\r\n    pairingBatch,\r\n    calcPairingPrecomputes,\r\n  };\r\n}\r\n\r\nfunction createBlsSig<P, S>(\r\n  blsPairing: BlsPairing,\r\n  PubCurve: CurvePointsRes<P> & H2CHasher<P>,\r\n  SigCurve: CurvePointsRes<S> & H2CHasher<S>,\r\n  SignatureCoder: SignatureCoder<S>,\r\n  isSigG1: boolean\r\n): BLSSigs<P, S> {\r\n  const { Fp12, pairingBatch } = blsPairing;\r\n  type PubPoint = WeierstrassPoint<P>;\r\n  type SigPoint = WeierstrassPoint<S>;\r\n  function normPub(point: PubPoint | BLSInput): PubPoint {\r\n    return point instanceof PubCurve.Point ? (point as PubPoint) : PubCurve.Point.fromHex(point);\r\n  }\r\n  function normSig(point: SigPoint | BLSInput): SigPoint {\r\n    return point instanceof SigCurve.Point ? (point as SigPoint) : SigCurve.Point.fromHex(point);\r\n  }\r\n  function amsg(m: unknown): SigPoint {\r\n    if (!(m instanceof SigCurve.Point))\r\n      throw new Error(`expected valid message hashed to ${!isSigG1 ? 'G2' : 'G1'} curve`);\r\n    return m as SigPoint;\r\n  }\r\n\r\n  type G1 = CurvePointsRes<Fp>['Point']['BASE'];\r\n  type G2 = CurvePointsRes<Fp2>['Point']['BASE'];\r\n  type PairingInput = { g1: G1; g2: G2 };\r\n  // What matters here is what point pairing API accepts as G1 or G2, not actual size or names\r\n  const pair: (a: PubPoint, b: SigPoint) => PairingInput = !isSigG1\r\n    ? (a: PubPoint, b: SigPoint) => ({ g1: a, g2: b }) as PairingInput\r\n    : (a: PubPoint, b: SigPoint) => ({ g1: b, g2: a }) as PairingInput;\r\n  return {\r\n    // P = pk x G\r\n    getPublicKey(secretKey: PrivKey): PubPoint {\r\n      // TODO: replace with\r\n      // const sec = PubCurve.Point.Fn.fromBytes(secretKey);\r\n      const sec = _normFnElement(PubCurve.Point.Fn, secretKey);\r\n      return PubCurve.Point.BASE.multiply(sec);\r\n    },\r\n    // S = pk x H(m)\r\n    sign(message: SigPoint, secretKey: PrivKey, unusedArg?: any): SigPoint {\r\n      if (unusedArg != null) throw new Error('sign() expects 2 arguments');\r\n      // TODO: replace with\r\n      // PubCurve.Point.Fn.fromBytes(secretKey)\r\n      const sec = _normFnElement(PubCurve.Point.Fn, secretKey);\r\n      amsg(message).assertValidity();\r\n      return message.multiply(sec);\r\n    },\r\n    // Checks if pairing of public key & hash is equal to pairing of generator & signature.\r\n    // e(P, H(m)) == e(G, S)\r\n    // e(S, G) == e(H(m), P)\r\n    verify(\r\n      signature: SigPoint | BLSInput,\r\n      message: SigPoint,\r\n      publicKey: PubPoint | BLSInput,\r\n      unusedArg?: any\r\n    ): boolean {\r\n      if (unusedArg != null) throw new Error('verify() expects 3 arguments');\r\n      signature = normSig(signature);\r\n      publicKey = normPub(publicKey);\r\n      const P = publicKey.negate();\r\n      const G = PubCurve.Point.BASE;\r\n      const Hm = amsg(message);\r\n      const S = signature;\r\n      // This code was changed in 1.9.x:\r\n      // Before it was G.negate() in G2, now it's always pubKey.negate\r\n      // e(P, -Q)===e(-P, Q)==e(P, Q)^-1. Negate can be done anywhere (as long it is done once per pair).\r\n      // We just moving sign, but since pairing is multiplicative, we doing X * X^-1 = 1\r\n      const exp = pairingBatch([pair(P, Hm), pair(G, S)]);\r\n      return Fp12.eql(exp, Fp12.ONE);\r\n    },\r\n    // https://ethresear.ch/t/fast-verification-of-multiple-bls-signatures/5407\r\n    // e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))\r\n    // TODO: maybe `{message: G2Hex, publicKey: G1Hex}[]` instead?\r\n    verifyBatch(\r\n      signature: SigPoint | BLSInput,\r\n      messages: SigPoint[],\r\n      publicKeys: (PubPoint | BLSInput)[]\r\n    ): boolean {\r\n      aNonEmpty(messages);\r\n      if (publicKeys.length !== messages.length)\r\n        throw new Error('amount of public keys and messages should be equal');\r\n      const sig = normSig(signature);\r\n      const nMessages = messages;\r\n      const nPublicKeys = publicKeys.map(normPub);\r\n      // NOTE: this works only for exact same object\r\n      const messagePubKeyMap = new Map<SigPoint, PubPoint[]>();\r\n      for (let i = 0; i < nPublicKeys.length; i++) {\r\n        const pub = nPublicKeys[i];\r\n        const msg = nMessages[i];\r\n        let keys = messagePubKeyMap.get(msg);\r\n        if (keys === undefined) {\r\n          keys = [];\r\n          messagePubKeyMap.set(msg, keys);\r\n        }\r\n        keys.push(pub);\r\n      }\r\n      const paired = [];\r\n      const G = PubCurve.Point.BASE;\r\n      try {\r\n        for (const [msg, keys] of messagePubKeyMap) {\r\n          const groupPublicKey = keys.reduce((acc, msg) => acc.add(msg));\r\n          paired.push(pair(groupPublicKey, msg));\r\n        }\r\n        paired.push(pair(G.negate(), sig));\r\n        return Fp12.eql(pairingBatch(paired), Fp12.ONE);\r\n      } catch {\r\n        return false;\r\n      }\r\n    },\r\n    // Adds a bunch of public key points together.\r\n    // pk1 + pk2 + pk3 = pkA\r\n    aggregatePublicKeys(publicKeys: (PubPoint | BLSInput)[]): PubPoint {\r\n      aNonEmpty(publicKeys);\r\n      publicKeys = publicKeys.map((pub) => normPub(pub));\r\n      const agg = (publicKeys as PubPoint[]).reduce((sum, p) => sum.add(p), PubCurve.Point.ZERO);\r\n      agg.assertValidity();\r\n      return agg;\r\n    },\r\n\r\n    // Adds a bunch of signature points together.\r\n    // pk1 + pk2 + pk3 = pkA\r\n    aggregateSignatures(signatures: (SigPoint | BLSInput)[]): SigPoint {\r\n      aNonEmpty(signatures);\r\n      signatures = signatures.map((sig) => normSig(sig));\r\n      const agg = (signatures as SigPoint[]).reduce((sum, s) => sum.add(s), SigCurve.Point.ZERO);\r\n      agg.assertValidity();\r\n      return agg;\r\n    },\r\n\r\n    hash(messageBytes: Uint8Array, DST?: string | Uint8Array): SigPoint {\r\n      abytes(messageBytes);\r\n      const opts = DST ? { DST } : undefined;\r\n      return SigCurve.hashToCurve(messageBytes, opts) as SigPoint;\r\n    },\r\n    Signature: SignatureCoder,\r\n  };\r\n}\r\n\r\n// G1_Point: ProjConstructor<bigint>, G2_Point: ProjConstructor<Fp2>,\r\nexport function bls(CURVE: CurveType): CurveFn {\r\n  // Fields are specific for curve, so for now we'll need to pass them with opts\r\n  const { Fp, Fr, Fp2, Fp6, Fp12 } = CURVE.fields;\r\n  // Point on G1 curve: (x, y)\r\n  const G1_ = weierstrassPoints(CURVE.G1);\r\n  const G1 = Object.assign(\r\n    G1_,\r\n    createHasher(G1_.Point, CURVE.G1.mapToCurve, {\r\n      ...CURVE.htfDefaults,\r\n      ...CURVE.G1.htfDefaults,\r\n    })\r\n  );\r\n  // Point on G2 curve (complex numbers): (x₁, x₂+i), (y₁, y₂+i)\r\n  const G2_ = weierstrassPoints(CURVE.G2);\r\n  const G2 = Object.assign(\r\n    G2_,\r\n    createHasher(G2_.Point as H2CPointConstructor<Fp2>, CURVE.G2.mapToCurve, {\r\n      ...CURVE.htfDefaults,\r\n      ...CURVE.G2.htfDefaults,\r\n    })\r\n  );\r\n  type G1 = typeof G1.Point.BASE;\r\n  type G2 = typeof G2.Point.BASE;\r\n\r\n  const pairingRes = createBlsPairing(CURVE.fields, G1.Point, G2.Point, {\r\n    ...CURVE.params,\r\n    postPrecompute: CURVE.postPrecompute,\r\n  });\r\n\r\n  const { millerLoopBatch, pairing, pairingBatch, calcPairingPrecomputes } = pairingRes;\r\n  const longSignatures = createBlsSig(pairingRes, G1, G2, CURVE.G2.Signature, false);\r\n  const shortSignatures = createBlsSig(pairingRes, G2, G1, CURVE.G1.ShortSignature, true);\r\n\r\n  const rand = CURVE.randomBytes || randomBytes;\r\n  const randomSecretKey = (): Uint8Array => {\r\n    const length = getMinHashLength(Fr.ORDER);\r\n    return mapHashToField(rand(length), Fr.ORDER);\r\n  };\r\n  const utils = {\r\n    randomSecretKey,\r\n    randomPrivateKey: randomSecretKey,\r\n    calcPairingPrecomputes,\r\n  };\r\n\r\n  // LEGACY code\r\n  type G1Hex = Hex | G1;\r\n  type G2Hex = Hex | G2;\r\n\r\n  const { ShortSignature } = CURVE.G1;\r\n  const { Signature } = CURVE.G2;\r\n\r\n  function normP1Hash(point: G1Hex, htfOpts?: htfBasicOpts): G1 {\r\n    return point instanceof G1.Point\r\n      ? point\r\n      : shortSignatures.hash(ensureBytes('point', point), htfOpts?.DST);\r\n  }\r\n  function normP2Hash(point: G2Hex, htfOpts?: htfBasicOpts): G2 {\r\n    return point instanceof G2.Point\r\n      ? point\r\n      : longSignatures.hash(ensureBytes('point', point), htfOpts?.DST);\r\n  }\r\n\r\n  function getPublicKey(privateKey: PrivKey): Uint8Array {\r\n    return longSignatures.getPublicKey(privateKey).toBytes(true);\r\n  }\r\n  function getPublicKeyForShortSignatures(privateKey: PrivKey): Uint8Array {\r\n    return shortSignatures.getPublicKey(privateKey).toBytes(true);\r\n  }\r\n  function sign(message: Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\r\n  function sign(message: G2, privateKey: PrivKey, htfOpts?: htfBasicOpts): G2;\r\n  function sign(message: G2Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array | G2 {\r\n    const Hm = normP2Hash(message, htfOpts);\r\n    const S = longSignatures.sign(Hm, privateKey);\r\n    return message instanceof G2.Point ? S : Signature.toBytes(S);\r\n  }\r\n  function signShortSignature(\r\n    message: Hex,\r\n    privateKey: PrivKey,\r\n    htfOpts?: htfBasicOpts\r\n  ): Uint8Array;\r\n  function signShortSignature(message: G1, privateKey: PrivKey, htfOpts?: htfBasicOpts): G1;\r\n  function signShortSignature(\r\n    message: G1Hex,\r\n    privateKey: PrivKey,\r\n    htfOpts?: htfBasicOpts\r\n  ): Uint8Array | G1 {\r\n    const Hm = normP1Hash(message, htfOpts);\r\n    const S = shortSignatures.sign(Hm, privateKey);\r\n    return message instanceof G1.Point ? S : ShortSignature.toBytes(S);\r\n  }\r\n  function verify(\r\n    signature: G2Hex,\r\n    message: G2Hex,\r\n    publicKey: G1Hex,\r\n    htfOpts?: htfBasicOpts\r\n  ): boolean {\r\n    const Hm = normP2Hash(message, htfOpts);\r\n    return longSignatures.verify(signature, Hm, publicKey);\r\n  }\r\n  function verifyShortSignature(\r\n    signature: G1Hex,\r\n    message: G1Hex,\r\n    publicKey: G2Hex,\r\n    htfOpts?: htfBasicOpts\r\n  ): boolean {\r\n    const Hm = normP1Hash(message, htfOpts);\r\n    return shortSignatures.verify(signature, Hm, publicKey);\r\n  }\r\n  function aggregatePublicKeys(publicKeys: Hex[]): Uint8Array;\r\n  function aggregatePublicKeys(publicKeys: G1[]): G1;\r\n  function aggregatePublicKeys(publicKeys: G1Hex[]): Uint8Array | G1 {\r\n    const agg = longSignatures.aggregatePublicKeys(publicKeys);\r\n    return publicKeys[0] instanceof G1.Point ? agg : agg.toBytes(true);\r\n  }\r\n  function aggregateSignatures(signatures: Hex[]): Uint8Array;\r\n  function aggregateSignatures(signatures: G2[]): G2;\r\n  function aggregateSignatures(signatures: G2Hex[]): Uint8Array | G2 {\r\n    const agg = longSignatures.aggregateSignatures(signatures);\r\n    return signatures[0] instanceof G2.Point ? agg : Signature.toBytes(agg);\r\n  }\r\n  function aggregateShortSignatures(signatures: Hex[]): Uint8Array;\r\n  function aggregateShortSignatures(signatures: G1[]): G1;\r\n  function aggregateShortSignatures(signatures: G1Hex[]): Uint8Array | G1 {\r\n    const agg = shortSignatures.aggregateSignatures(signatures);\r\n    return signatures[0] instanceof G1.Point ? agg : ShortSignature.toBytes(agg);\r\n  }\r\n  function verifyBatch(\r\n    signature: G2Hex,\r\n    messages: G2Hex[],\r\n    publicKeys: G1Hex[],\r\n    htfOpts?: htfBasicOpts\r\n  ): boolean {\r\n    const Hm = messages.map((m) => normP2Hash(m, htfOpts));\r\n    return longSignatures.verifyBatch(signature, Hm, publicKeys);\r\n  }\r\n\r\n  G1.Point.BASE.precompute(4);\r\n\r\n  return {\r\n    longSignatures,\r\n    shortSignatures,\r\n    millerLoopBatch,\r\n    pairing,\r\n    pairingBatch,\r\n    verifyBatch,\r\n    fields: {\r\n      Fr,\r\n      Fp,\r\n      Fp2,\r\n      Fp6,\r\n      Fp12,\r\n    },\r\n    params: {\r\n      ateLoopSize: CURVE.params.ateLoopSize,\r\n      twistType: CURVE.params.twistType,\r\n      // deprecated\r\n      r: CURVE.params.r,\r\n      G1b: CURVE.G1.b,\r\n      G2b: CURVE.G2.b,\r\n    },\r\n    utils,\r\n\r\n    // deprecated\r\n    getPublicKey,\r\n    getPublicKeyForShortSignatures,\r\n    sign,\r\n    signShortSignature,\r\n    verify,\r\n    verifyShortSignature,\r\n    aggregatePublicKeys,\r\n    aggregateSignatures,\r\n    aggregateShortSignatures,\r\n    G1,\r\n    G2,\r\n    Signature,\r\n    ShortSignature,\r\n  };\r\n}\r\n", "/**\r\n * Towered extension fields.\r\n * Rather than implementing a massive 12th-degree extension directly, it is more efficient\r\n * to build it up from smaller extensions: a tower of extensions.\r\n *\r\n * For BLS12-381, the Fp12 field is implemented as a quadratic (degree two) extension,\r\n * on top of a cubic (degree three) extension, on top of a quadratic extension of Fp.\r\n *\r\n * For more info: \"Pairings for beginners\" by Costello, section 7.3.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { bitLen, bitMask, concatBytes, notImplemented } from '../utils.ts';\r\nimport * as mod from './modular.ts';\r\nimport type { WeierstrassPoint, WeierstrassPointCons } from './weierstrass.ts';\r\n\r\n// Be friendly to bad ECMAScript parsers by not using bigint literals\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\r\n\r\n// Fp₂ over complex plane\r\nexport type BigintTuple = [bigint, bigint];\r\nexport type Fp = bigint;\r\n// Finite extension field over irreducible polynominal.\r\n// Fp(u) / (u² - β) where β = -1\r\nexport type Fp2 = { c0: bigint; c1: bigint };\r\nexport type BigintSix = [bigint, bigint, bigint, bigint, bigint, bigint];\r\nexport type Fp6 = { c0: Fp2; c1: Fp2; c2: Fp2 };\r\nexport type Fp12 = { c0: Fp6; c1: Fp6 }; // Fp₁₂ = Fp₆² => Fp₂³, Fp₆(w) / (w² - γ) where γ = v\r\n// prettier-ignore\r\nexport type BigintTwelve = [\r\n  bigint, bigint, bigint, bigint, bigint, bigint,\r\n  bigint, bigint, bigint, bigint, bigint, bigint\r\n];\r\n\r\nexport type Fp2Bls = mod.IField<Fp2> & {\r\n  frobeniusMap(num: Fp2, power: number): Fp2;\r\n  fromBigTuple(num: [bigint, bigint]): Fp2;\r\n  mulByB: (num: Fp2) => Fp2;\r\n  mulByNonresidue: (num: Fp2) => Fp2;\r\n  reim: (num: Fp2) => { re: Fp; im: Fp };\r\n  NONRESIDUE: Fp2;\r\n};\r\n\r\nexport type Fp6Bls = mod.IField<Fp6> & {\r\n  frobeniusMap(num: Fp6, power: number): Fp6;\r\n  fromBigSix: (tuple: BigintSix) => Fp6;\r\n  mul1(num: Fp6, b1: Fp2): Fp6;\r\n  mul01(num: Fp6, b0: Fp2, b1: Fp2): Fp6;\r\n  mulByFp2(lhs: Fp6, rhs: Fp2): Fp6;\r\n  mulByNonresidue: (num: Fp6) => Fp6;\r\n};\r\n\r\nexport type Fp12Bls = mod.IField<Fp12> & {\r\n  frobeniusMap(num: Fp12, power: number): Fp12;\r\n  fromBigTwelve: (t: BigintTwelve) => Fp12;\r\n  mul014(num: Fp12, o0: Fp2, o1: Fp2, o4: Fp2): Fp12;\r\n  mul034(num: Fp12, o0: Fp2, o3: Fp2, o4: Fp2): Fp12;\r\n  mulByFp2(lhs: Fp12, rhs: Fp2): Fp12;\r\n  conjugate(num: Fp12): Fp12;\r\n  finalExponentiate(num: Fp12): Fp12;\r\n  _cyclotomicSquare(num: Fp12): Fp12;\r\n  _cyclotomicExp(num: Fp12, n: bigint): Fp12;\r\n};\r\n\r\nfunction calcFrobeniusCoefficients<T>(\r\n  Fp: mod.IField<T>,\r\n  nonResidue: T,\r\n  modulus: bigint,\r\n  degree: number,\r\n  num: number = 1,\r\n  divisor?: number\r\n) {\r\n  const _divisor = BigInt(divisor === undefined ? degree : divisor);\r\n  const towerModulus: any = modulus ** BigInt(degree);\r\n  const res: T[][] = [];\r\n  for (let i = 0; i < num; i++) {\r\n    const a = BigInt(i + 1);\r\n    const powers: T[] = [];\r\n    for (let j = 0, qPower = _1n; j < degree; j++) {\r\n      const power = ((a * qPower - a) / _divisor) % towerModulus;\r\n      powers.push(Fp.pow(nonResidue, power));\r\n      qPower *= modulus;\r\n    }\r\n    res.push(powers);\r\n  }\r\n  return res;\r\n}\r\n\r\n// This works same at least for bls12-381, bn254 and bls12-377\r\nexport function psiFrobenius(\r\n  Fp: mod.IField<Fp>,\r\n  Fp2: Fp2Bls,\r\n  base: Fp2\r\n): {\r\n  psi: (x: Fp2, y: Fp2) => [Fp2, Fp2];\r\n  psi2: (x: Fp2, y: Fp2) => [Fp2, Fp2];\r\n  G2psi: (c: WeierstrassPointCons<Fp2>, P: WeierstrassPoint<Fp2>) => WeierstrassPoint<Fp2>;\r\n  G2psi2: (c: WeierstrassPointCons<Fp2>, P: WeierstrassPoint<Fp2>) => WeierstrassPoint<Fp2>;\r\n  PSI_X: Fp2;\r\n  PSI_Y: Fp2;\r\n  PSI2_X: Fp2;\r\n  PSI2_Y: Fp2;\r\n} {\r\n  // GLV endomorphism Ψ(P)\r\n  const PSI_X = Fp2.pow(base, (Fp.ORDER - _1n) / _3n); // u^((p-1)/3)\r\n  const PSI_Y = Fp2.pow(base, (Fp.ORDER - _1n) / _2n); // u^((p-1)/2)\r\n  function psi(x: Fp2, y: Fp2): [Fp2, Fp2] {\r\n    // This x10 faster than previous version in bls12-381\r\n    const x2 = Fp2.mul(Fp2.frobeniusMap(x, 1), PSI_X);\r\n    const y2 = Fp2.mul(Fp2.frobeniusMap(y, 1), PSI_Y);\r\n    return [x2, y2];\r\n  }\r\n  // Ψ²(P) endomorphism (psi2(x) = psi(psi(x)))\r\n  const PSI2_X = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _3n); // u^((p^2 - 1)/3)\r\n  // This equals -1, which causes y to be Fp2.neg(y).\r\n  // But not sure if there are case when this is not true?\r\n  const PSI2_Y = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _2n); // u^((p^2 - 1)/3)\r\n  if (!Fp2.eql(PSI2_Y, Fp2.neg(Fp2.ONE))) throw new Error('psiFrobenius: PSI2_Y!==-1');\r\n  function psi2(x: Fp2, y: Fp2): [Fp2, Fp2] {\r\n    return [Fp2.mul(x, PSI2_X), Fp2.neg(y)];\r\n  }\r\n  // Map points\r\n  const mapAffine =\r\n    <T>(fn: (x: T, y: T) => [T, T]) =>\r\n    (c: WeierstrassPointCons<T>, P: WeierstrassPoint<T>) => {\r\n      const affine = P.toAffine();\r\n      const p = fn(affine.x, affine.y);\r\n      return c.fromAffine({ x: p[0], y: p[1] });\r\n    };\r\n  const G2psi = mapAffine(psi);\r\n  const G2psi2 = mapAffine(psi2);\r\n  return { psi, psi2, G2psi, G2psi2, PSI_X, PSI_Y, PSI2_X, PSI2_Y };\r\n}\r\n\r\nexport type Tower12Opts = {\r\n  ORDER: bigint;\r\n  NONRESIDUE?: Fp;\r\n  // Fp2\r\n  FP2_NONRESIDUE: BigintTuple;\r\n  Fp2sqrt?: (num: Fp2) => Fp2;\r\n  Fp2mulByB: (num: Fp2) => Fp2;\r\n  // Fp12\r\n  Fp12cyclotomicSquare: (num: Fp12) => Fp12;\r\n  Fp12cyclotomicExp: (num: Fp12, n: bigint) => Fp12;\r\n  Fp12finalExponentiate: (num: Fp12) => Fp12;\r\n};\r\n\r\nexport function tower12(opts: Tower12Opts): {\r\n  Fp: Readonly<mod.IField<bigint> & Required<Pick<mod.IField<bigint>, 'isOdd'>>>;\r\n  Fp2: Fp2Bls;\r\n  Fp6: Fp6Bls;\r\n  Fp12: Fp12Bls;\r\n  Fp4Square: (a: Fp2, b: Fp2) => { first: Fp2; second: Fp2 };\r\n} {\r\n  const { ORDER } = opts;\r\n  // Fp\r\n  const Fp = mod.Field(ORDER);\r\n  const FpNONRESIDUE = Fp.create(opts.NONRESIDUE || BigInt(-1));\r\n  const Fpdiv2 = Fp.div(Fp.ONE, _2n); // 1/2\r\n\r\n  // Fp2\r\n  const FP2_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp, FpNONRESIDUE, Fp.ORDER, 2)[0];\r\n  const Fp2Add = ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => ({\r\n    c0: Fp.add(c0, r0),\r\n    c1: Fp.add(c1, r1),\r\n  });\r\n  const Fp2Subtract = ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => ({\r\n    c0: Fp.sub(c0, r0),\r\n    c1: Fp.sub(c1, r1),\r\n  });\r\n  const Fp2Multiply = ({ c0, c1 }: Fp2, rhs: Fp2) => {\r\n    if (typeof rhs === 'bigint') return { c0: Fp.mul(c0, rhs), c1: Fp.mul(c1, rhs) };\r\n    // (a+bi)(c+di) = (ac−bd) + (ad+bc)i\r\n    const { c0: r0, c1: r1 } = rhs;\r\n    let t1 = Fp.mul(c0, r0); // c0 * o0\r\n    let t2 = Fp.mul(c1, r1); // c1 * o1\r\n    // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\r\n    const o0 = Fp.sub(t1, t2);\r\n    const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\r\n    return { c0: o0, c1: o1 };\r\n  };\r\n  const Fp2Square = ({ c0, c1 }: Fp2) => {\r\n    const a = Fp.add(c0, c1);\r\n    const b = Fp.sub(c0, c1);\r\n    const c = Fp.add(c0, c0);\r\n    return { c0: Fp.mul(a, b), c1: Fp.mul(c, c1) };\r\n  };\r\n  const Fp2fromBigTuple = (tuple: BigintTuple | bigint[]) => {\r\n    if (tuple.length !== 2) throw new Error('invalid tuple');\r\n    const fps = tuple.map((n) => Fp.create(n)) as [Fp, Fp];\r\n    return { c0: fps[0], c1: fps[1] };\r\n  };\r\n\r\n  function isValidC(num: bigint, ORDER: bigint) {\r\n    return typeof num === 'bigint' && _0n <= num && num < ORDER;\r\n  }\r\n\r\n  const FP2_ORDER = ORDER * ORDER;\r\n  const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);\r\n  const Fp2: Fp2Bls = {\r\n    ORDER: FP2_ORDER,\r\n    isLE: Fp.isLE,\r\n    NONRESIDUE: Fp2Nonresidue,\r\n    BITS: bitLen(FP2_ORDER),\r\n    BYTES: Math.ceil(bitLen(FP2_ORDER) / 8),\r\n    MASK: bitMask(bitLen(FP2_ORDER)),\r\n    ZERO: { c0: Fp.ZERO, c1: Fp.ZERO },\r\n    ONE: { c0: Fp.ONE, c1: Fp.ZERO },\r\n    create: (num) => num,\r\n    isValid: ({ c0, c1 }) => isValidC(c0, FP2_ORDER) && isValidC(c1, FP2_ORDER),\r\n    is0: ({ c0, c1 }) => Fp.is0(c0) && Fp.is0(c1),\r\n    isValidNot0: (num) => !Fp2.is0(num) && Fp2.isValid(num),\r\n    eql: ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => Fp.eql(c0, r0) && Fp.eql(c1, r1),\r\n    neg: ({ c0, c1 }) => ({ c0: Fp.neg(c0), c1: Fp.neg(c1) }),\r\n    pow: (num, power) => mod.FpPow(Fp2, num, power),\r\n    invertBatch: (nums) => mod.FpInvertBatch(Fp2, nums),\r\n    // Normalized\r\n    add: Fp2Add,\r\n    sub: Fp2Subtract,\r\n    mul: Fp2Multiply,\r\n    sqr: Fp2Square,\r\n    // NonNormalized stuff\r\n    addN: Fp2Add,\r\n    subN: Fp2Subtract,\r\n    mulN: Fp2Multiply,\r\n    sqrN: Fp2Square,\r\n    // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\r\n    div: (lhs, rhs) =>\r\n      Fp2.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp2.inv(rhs)),\r\n    inv: ({ c0: a, c1: b }) => {\r\n      // We wish to find the multiplicative inverse of a nonzero\r\n      // element a + bu in Fp2. We leverage an identity\r\n      //\r\n      // (a + bu)(a - bu) = a² + b²\r\n      //\r\n      // which holds because u² = -1. This can be rewritten as\r\n      //\r\n      // (a + bu)(a - bu)/(a² + b²) = 1\r\n      //\r\n      // because a² + b² = 0 has no nonzero solutions for (a, b).\r\n      // This gives that (a - bu)/(a² + b²) is the inverse\r\n      // of (a + bu). Importantly, this can be computing using\r\n      // only a single inversion in Fp.\r\n      const factor = Fp.inv(Fp.create(a * a + b * b));\r\n      return { c0: Fp.mul(factor, Fp.create(a)), c1: Fp.mul(factor, Fp.create(-b)) };\r\n    },\r\n    sqrt: (num) => {\r\n      if (opts.Fp2sqrt) return opts.Fp2sqrt(num);\r\n      // This is generic for all quadratic extensions (Fp2)\r\n      const { c0, c1 } = num;\r\n      if (Fp.is0(c1)) {\r\n        // if c0 is quadratic residue\r\n        if (mod.FpLegendre(Fp, c0) === 1) return Fp2.create({ c0: Fp.sqrt(c0), c1: Fp.ZERO });\r\n        else return Fp2.create({ c0: Fp.ZERO, c1: Fp.sqrt(Fp.div(c0, FpNONRESIDUE)) });\r\n      }\r\n      const a = Fp.sqrt(Fp.sub(Fp.sqr(c0), Fp.mul(Fp.sqr(c1), FpNONRESIDUE)));\r\n      let d = Fp.mul(Fp.add(a, c0), Fpdiv2);\r\n      const legendre = mod.FpLegendre(Fp, d);\r\n      // -1, Quadratic non residue\r\n      if (legendre === -1) d = Fp.sub(d, a);\r\n      const a0 = Fp.sqrt(d);\r\n      const candidateSqrt = Fp2.create({ c0: a0, c1: Fp.div(Fp.mul(c1, Fpdiv2), a0) });\r\n      if (!Fp2.eql(Fp2.sqr(candidateSqrt), num)) throw new Error('Cannot find square root');\r\n      // Normalize root: at this point candidateSqrt ** 2 = num, but also -candidateSqrt ** 2 = num\r\n      const x1 = candidateSqrt;\r\n      const x2 = Fp2.neg(x1);\r\n      const { re: re1, im: im1 } = Fp2.reim(x1);\r\n      const { re: re2, im: im2 } = Fp2.reim(x2);\r\n      if (im1 > im2 || (im1 === im2 && re1 > re2)) return x1;\r\n      return x2;\r\n    },\r\n    // Same as sgn0_m_eq_2 in RFC 9380\r\n    isOdd: (x: Fp2) => {\r\n      const { re: x0, im: x1 } = Fp2.reim(x);\r\n      const sign_0 = x0 % _2n;\r\n      const zero_0 = x0 === _0n;\r\n      const sign_1 = x1 % _2n;\r\n      return BigInt(sign_0 || (zero_0 && sign_1)) == _1n;\r\n    },\r\n    // Bytes util\r\n    fromBytes(b: Uint8Array): Fp2 {\r\n      if (b.length !== Fp2.BYTES) throw new Error('fromBytes invalid length=' + b.length);\r\n      return { c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)), c1: Fp.fromBytes(b.subarray(Fp.BYTES)) };\r\n    },\r\n    toBytes: ({ c0, c1 }) => concatBytes(Fp.toBytes(c0), Fp.toBytes(c1)),\r\n    cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\r\n      c0: Fp.cmov(c0, r0, c),\r\n      c1: Fp.cmov(c1, r1, c),\r\n    }),\r\n    reim: ({ c0, c1 }) => ({ re: c0, im: c1 }),\r\n    // multiply by u + 1\r\n    mulByNonresidue: ({ c0, c1 }) => Fp2.mul({ c0, c1 }, Fp2Nonresidue),\r\n    mulByB: opts.Fp2mulByB,\r\n    fromBigTuple: Fp2fromBigTuple,\r\n    frobeniusMap: ({ c0, c1 }, power: number): Fp2 => ({\r\n      c0,\r\n      c1: Fp.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2]),\r\n    }),\r\n  };\r\n  // Fp6\r\n  const Fp6Add = ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) => ({\r\n    c0: Fp2.add(c0, r0),\r\n    c1: Fp2.add(c1, r1),\r\n    c2: Fp2.add(c2, r2),\r\n  });\r\n  const Fp6Subtract = ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) => ({\r\n    c0: Fp2.sub(c0, r0),\r\n    c1: Fp2.sub(c1, r1),\r\n    c2: Fp2.sub(c2, r2),\r\n  });\r\n  const Fp6Multiply = ({ c0, c1, c2 }: Fp6, rhs: Fp6 | bigint) => {\r\n    if (typeof rhs === 'bigint') {\r\n      return {\r\n        c0: Fp2.mul(c0, rhs),\r\n        c1: Fp2.mul(c1, rhs),\r\n        c2: Fp2.mul(c2, rhs),\r\n      };\r\n    }\r\n    const { c0: r0, c1: r1, c2: r2 } = rhs;\r\n    const t0 = Fp2.mul(c0, r0); // c0 * o0\r\n    const t1 = Fp2.mul(c1, r1); // c1 * o1\r\n    const t2 = Fp2.mul(c2, r2); // c2 * o2\r\n    return {\r\n      // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\r\n      c0: Fp2.add(\r\n        t0,\r\n        Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))\r\n      ),\r\n      // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\r\n      c1: Fp2.add(\r\n        Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)),\r\n        Fp2.mulByNonresidue(t2)\r\n      ),\r\n      // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\r\n      c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2)),\r\n    };\r\n  };\r\n  const Fp6Square = ({ c0, c1, c2 }: Fp6) => {\r\n    let t0 = Fp2.sqr(c0); // c0²\r\n    let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\r\n    let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\r\n    let t4 = Fp2.sqr(c2); // c2²\r\n    return {\r\n      c0: Fp2.add(Fp2.mulByNonresidue(t3), t0), // T3 * (u + 1) + T0\r\n      c1: Fp2.add(Fp2.mulByNonresidue(t4), t1), // T4 * (u + 1) + T1\r\n      // T1 + (c0 - c1 + c2)² + T3 - T0 - T4\r\n      c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4),\r\n    };\r\n  };\r\n  const [FP6_FROBENIUS_COEFFICIENTS_1, FP6_FROBENIUS_COEFFICIENTS_2] = calcFrobeniusCoefficients(\r\n    Fp2,\r\n    Fp2Nonresidue,\r\n    Fp.ORDER,\r\n    6,\r\n    2,\r\n    3\r\n  );\r\n\r\n  const Fp6: Fp6Bls = {\r\n    ORDER: Fp2.ORDER, // TODO: unused, but need to verify\r\n    isLE: Fp2.isLE,\r\n    BITS: 3 * Fp2.BITS,\r\n    BYTES: 3 * Fp2.BYTES,\r\n    MASK: bitMask(3 * Fp2.BITS),\r\n    ZERO: { c0: Fp2.ZERO, c1: Fp2.ZERO, c2: Fp2.ZERO },\r\n    ONE: { c0: Fp2.ONE, c1: Fp2.ZERO, c2: Fp2.ZERO },\r\n    create: (num) => num,\r\n    isValid: ({ c0, c1, c2 }) => Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2),\r\n    is0: ({ c0, c1, c2 }) => Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2),\r\n    isValidNot0: (num) => !Fp6.is0(num) && Fp6.isValid(num),\r\n    neg: ({ c0, c1, c2 }) => ({ c0: Fp2.neg(c0), c1: Fp2.neg(c1), c2: Fp2.neg(c2) }),\r\n    eql: ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) =>\r\n      Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2),\r\n    sqrt: notImplemented,\r\n    // Do we need division by bigint at all? Should be done via order:\r\n    div: (lhs, rhs) =>\r\n      Fp6.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp6.inv(rhs)),\r\n    pow: (num, power) => mod.FpPow(Fp6, num, power),\r\n    invertBatch: (nums) => mod.FpInvertBatch(Fp6, nums),\r\n    // Normalized\r\n    add: Fp6Add,\r\n    sub: Fp6Subtract,\r\n    mul: Fp6Multiply,\r\n    sqr: Fp6Square,\r\n    // NonNormalized stuff\r\n    addN: Fp6Add,\r\n    subN: Fp6Subtract,\r\n    mulN: Fp6Multiply,\r\n    sqrN: Fp6Square,\r\n\r\n    inv: ({ c0, c1, c2 }) => {\r\n      let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0² - c2 * c1 * (u + 1)\r\n      let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2² * (u + 1) - c0 * c1\r\n      let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1² - c0 * c2\r\n      // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\r\n      let t4 = Fp2.inv(\r\n        Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0))\r\n      );\r\n      return { c0: Fp2.mul(t4, t0), c1: Fp2.mul(t4, t1), c2: Fp2.mul(t4, t2) };\r\n    },\r\n    // Bytes utils\r\n    fromBytes: (b: Uint8Array): Fp6 => {\r\n      if (b.length !== Fp6.BYTES) throw new Error('fromBytes invalid length=' + b.length);\r\n      return {\r\n        c0: Fp2.fromBytes(b.subarray(0, Fp2.BYTES)),\r\n        c1: Fp2.fromBytes(b.subarray(Fp2.BYTES, 2 * Fp2.BYTES)),\r\n        c2: Fp2.fromBytes(b.subarray(2 * Fp2.BYTES)),\r\n      };\r\n    },\r\n    toBytes: ({ c0, c1, c2 }): Uint8Array =>\r\n      concatBytes(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2)),\r\n    cmov: ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6, c) => ({\r\n      c0: Fp2.cmov(c0, r0, c),\r\n      c1: Fp2.cmov(c1, r1, c),\r\n      c2: Fp2.cmov(c2, r2, c),\r\n    }),\r\n    fromBigSix: (t: BigintSix): Fp6 => {\r\n      if (!Array.isArray(t) || t.length !== 6) throw new Error('invalid Fp6 usage');\r\n      return {\r\n        c0: Fp2.fromBigTuple(t.slice(0, 2) as BigintTuple),\r\n        c1: Fp2.fromBigTuple(t.slice(2, 4) as BigintTuple),\r\n        c2: Fp2.fromBigTuple(t.slice(4, 6) as BigintTuple),\r\n      };\r\n    },\r\n    frobeniusMap: ({ c0, c1, c2 }, power: number) => ({\r\n      c0: Fp2.frobeniusMap(c0, power),\r\n      c1: Fp2.mul(Fp2.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),\r\n      c2: Fp2.mul(Fp2.frobeniusMap(c2, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6]),\r\n    }),\r\n    mulByFp2: ({ c0, c1, c2 }, rhs: Fp2): Fp6 => ({\r\n      c0: Fp2.mul(c0, rhs),\r\n      c1: Fp2.mul(c1, rhs),\r\n      c2: Fp2.mul(c2, rhs),\r\n    }),\r\n    mulByNonresidue: ({ c0, c1, c2 }) => ({ c0: Fp2.mulByNonresidue(c2), c1: c0, c2: c1 }),\r\n    // Sparse multiplication\r\n    mul1: ({ c0, c1, c2 }, b1: Fp2): Fp6 => ({\r\n      c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\r\n      c1: Fp2.mul(c0, b1),\r\n      c2: Fp2.mul(c1, b1),\r\n    }),\r\n    // Sparse multiplication\r\n    mul01({ c0, c1, c2 }, b0: Fp2, b1: Fp2): Fp6 {\r\n      let t0 = Fp2.mul(c0, b0); // c0 * b0\r\n      let t1 = Fp2.mul(c1, b1); // c1 * b1\r\n      return {\r\n        // ((c1 + c2) * b1 - T1) * (u + 1) + T0\r\n        c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\r\n        // (b0 + b1) * (c0 + c1) - T0 - T1\r\n        c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\r\n        // (c0 + c2) * b0 - T0 + T1\r\n        c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1),\r\n      };\r\n    },\r\n  };\r\n\r\n  // Fp12\r\n  const FP12_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(\r\n    Fp2,\r\n    Fp2Nonresidue,\r\n    Fp.ORDER,\r\n    12,\r\n    1,\r\n    6\r\n  )[0];\r\n\r\n  const Fp12Add = ({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) => ({\r\n    c0: Fp6.add(c0, r0),\r\n    c1: Fp6.add(c1, r1),\r\n  });\r\n  const Fp12Subtract = ({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) => ({\r\n    c0: Fp6.sub(c0, r0),\r\n    c1: Fp6.sub(c1, r1),\r\n  });\r\n  const Fp12Multiply = ({ c0, c1 }: Fp12, rhs: Fp12 | bigint) => {\r\n    if (typeof rhs === 'bigint') return { c0: Fp6.mul(c0, rhs), c1: Fp6.mul(c1, rhs) };\r\n    let { c0: r0, c1: r1 } = rhs;\r\n    let t1 = Fp6.mul(c0, r0); // c0 * r0\r\n    let t2 = Fp6.mul(c1, r1); // c1 * r1\r\n    return {\r\n      c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)), // T1 + T2 * v\r\n      // (c0 + c1) * (r0 + r1) - (T1 + T2)\r\n      c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2)),\r\n    };\r\n  };\r\n  const Fp12Square = ({ c0, c1 }: Fp12) => {\r\n    let ab = Fp6.mul(c0, c1); // c0 * c1\r\n    return {\r\n      // (c1 * v + c0) * (c0 + c1) - AB - AB * v\r\n      c0: Fp6.sub(\r\n        Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab),\r\n        Fp6.mulByNonresidue(ab)\r\n      ),\r\n      c1: Fp6.add(ab, ab),\r\n    }; // AB + AB\r\n  };\r\n  function Fp4Square(a: Fp2, b: Fp2): { first: Fp2; second: Fp2 } {\r\n    const a2 = Fp2.sqr(a);\r\n    const b2 = Fp2.sqr(b);\r\n    return {\r\n      first: Fp2.add(Fp2.mulByNonresidue(b2), a2), // b² * Nonresidue + a²\r\n      second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2), // (a + b)² - a² - b²\r\n    };\r\n  }\r\n\r\n  const Fp12: Fp12Bls = {\r\n    ORDER: Fp2.ORDER, // TODO: unused, but need to verify\r\n    isLE: Fp6.isLE,\r\n    BITS: 2 * Fp6.BITS,\r\n    BYTES: 2 * Fp6.BYTES,\r\n    MASK: bitMask(2 * Fp6.BITS),\r\n    ZERO: { c0: Fp6.ZERO, c1: Fp6.ZERO },\r\n    ONE: { c0: Fp6.ONE, c1: Fp6.ZERO },\r\n    create: (num) => num,\r\n    isValid: ({ c0, c1 }) => Fp6.isValid(c0) && Fp6.isValid(c1),\r\n    is0: ({ c0, c1 }) => Fp6.is0(c0) && Fp6.is0(c1),\r\n    isValidNot0: (num) => !Fp12.is0(num) && Fp12.isValid(num),\r\n    neg: ({ c0, c1 }) => ({ c0: Fp6.neg(c0), c1: Fp6.neg(c1) }),\r\n    eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp6.eql(c0, r0) && Fp6.eql(c1, r1),\r\n    sqrt: notImplemented,\r\n    inv: ({ c0, c1 }) => {\r\n      let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0² - c1² * v)\r\n      return { c0: Fp6.mul(c0, t), c1: Fp6.neg(Fp6.mul(c1, t)) }; // ((C0 * T) * T) + (-C1 * T) * w\r\n    },\r\n    div: (lhs, rhs) =>\r\n      Fp12.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp12.inv(rhs)),\r\n    pow: (num, power) => mod.FpPow(Fp12, num, power),\r\n    invertBatch: (nums) => mod.FpInvertBatch(Fp12, nums),\r\n    // Normalized\r\n    add: Fp12Add,\r\n    sub: Fp12Subtract,\r\n    mul: Fp12Multiply,\r\n    sqr: Fp12Square,\r\n    // NonNormalized stuff\r\n    addN: Fp12Add,\r\n    subN: Fp12Subtract,\r\n    mulN: Fp12Multiply,\r\n    sqrN: Fp12Square,\r\n\r\n    // Bytes utils\r\n    fromBytes: (b: Uint8Array): Fp12 => {\r\n      if (b.length !== Fp12.BYTES) throw new Error('fromBytes invalid length=' + b.length);\r\n      return {\r\n        c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\r\n        c1: Fp6.fromBytes(b.subarray(Fp6.BYTES)),\r\n      };\r\n    },\r\n    toBytes: ({ c0, c1 }): Uint8Array => concatBytes(Fp6.toBytes(c0), Fp6.toBytes(c1)),\r\n    cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\r\n      c0: Fp6.cmov(c0, r0, c),\r\n      c1: Fp6.cmov(c1, r1, c),\r\n    }),\r\n    // Utils\r\n    // toString() {\r\n    //   return '' + 'Fp12(' + this.c0 + this.c1 + '* w');\r\n    // },\r\n    // fromTuple(c: [Fp6, Fp6]) {\r\n    //   return new Fp12(...c);\r\n    // }\r\n    fromBigTwelve: (t: BigintTwelve): Fp12 => ({\r\n      c0: Fp6.fromBigSix(t.slice(0, 6) as BigintSix),\r\n      c1: Fp6.fromBigSix(t.slice(6, 12) as BigintSix),\r\n    }),\r\n    // Raises to q**i -th power\r\n    frobeniusMap(lhs, power: number) {\r\n      const { c0, c1, c2 } = Fp6.frobeniusMap(lhs.c1, power);\r\n      const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];\r\n      return {\r\n        c0: Fp6.frobeniusMap(lhs.c0, power),\r\n        c1: Fp6.create({\r\n          c0: Fp2.mul(c0, coeff),\r\n          c1: Fp2.mul(c1, coeff),\r\n          c2: Fp2.mul(c2, coeff),\r\n        }),\r\n      };\r\n    },\r\n    mulByFp2: ({ c0, c1 }, rhs: Fp2): Fp12 => ({\r\n      c0: Fp6.mulByFp2(c0, rhs),\r\n      c1: Fp6.mulByFp2(c1, rhs),\r\n    }),\r\n    conjugate: ({ c0, c1 }): Fp12 => ({ c0, c1: Fp6.neg(c1) }),\r\n    // Sparse multiplication\r\n    mul014: ({ c0, c1 }, o0: Fp2, o1: Fp2, o4: Fp2) => {\r\n      let t0 = Fp6.mul01(c0, o0, o1);\r\n      let t1 = Fp6.mul1(c1, o4);\r\n      return {\r\n        c0: Fp6.add(Fp6.mulByNonresidue(t1), t0), // T1 * v + T0\r\n        // (c1 + c0) * [o0, o1+o4] - T0 - T1\r\n        c1: Fp6.sub(Fp6.sub(Fp6.mul01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1),\r\n      };\r\n    },\r\n    mul034: ({ c0, c1 }, o0: Fp2, o3: Fp2, o4: Fp2) => {\r\n      const a = Fp6.create({\r\n        c0: Fp2.mul(c0.c0, o0),\r\n        c1: Fp2.mul(c0.c1, o0),\r\n        c2: Fp2.mul(c0.c2, o0),\r\n      });\r\n      const b = Fp6.mul01(c1, o3, o4);\r\n      const e = Fp6.mul01(Fp6.add(c0, c1), Fp2.add(o0, o3), o4);\r\n      return {\r\n        c0: Fp6.add(Fp6.mulByNonresidue(b), a),\r\n        c1: Fp6.sub(e, Fp6.add(a, b)),\r\n      };\r\n    },\r\n\r\n    // A cyclotomic group is a subgroup of Fp^n defined by\r\n    //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\r\n    // The result of any pairing is in a cyclotomic subgroup\r\n    // https://eprint.iacr.org/2009/565.pdf\r\n    _cyclotomicSquare: opts.Fp12cyclotomicSquare,\r\n    _cyclotomicExp: opts.Fp12cyclotomicExp,\r\n    // https://eprint.iacr.org/2010/354.pdf\r\n    // https://eprint.iacr.org/2009/565.pdf\r\n    finalExponentiate: opts.Fp12finalExponentiate,\r\n  };\r\n\r\n  return { Fp, Fp2, Fp6, Fp12, Fp4Square };\r\n}\r\n", "// created 2024-09-13T06:42:45.675Z\r\n// compressed base64-encoded blob for include-ens data\r\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\r\n// see: https://github.com/adraffy/ens-normalize.js#security\r\n// SHA-256: 0ca3917bee1eee342d64c631cb1dbaac37b167d848887d59f6d68328dc99ac09\r\nvar COMPRESSED$1 = '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';\r\nconst FENCED = new Map([[8217,\"apostrophe\"],[8260,\"fraction slash\"],[12539,\"middle dot\"]]);\r\nconst NSM_MAX = 4;\r\n\r\nfunction decode_arithmetic(bytes) {\r\n\tlet pos = 0;\r\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\r\n\t\r\n\t// decode the frequency table\r\n\tlet symbol_count = u16();\r\n\tlet total = 1;\r\n\tlet acc = [0, 1]; // first symbol has frequency 1\r\n\tfor (let i = 1; i < symbol_count; i++) {\r\n\t\tacc.push(total += u16());\r\n\t}\r\n\r\n\t// skip the sized-payload that the last 3 symbols index into\r\n\tlet skip = u16();\r\n\tlet pos_payload = pos;\r\n\tpos += skip;\r\n\r\n\tlet read_width = 0;\r\n\tlet read_buffer = 0; \r\n\tfunction read_bit() {\r\n\t\tif (read_width == 0) {\r\n\t\t\t// this will read beyond end of buffer\r\n\t\t\t// but (undefined|0) => zero pad\r\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\r\n\t\t\tread_width = 8;\r\n\t\t}\r\n\t\treturn (read_buffer >> --read_width) & 1;\r\n\t}\r\n\r\n\tconst N = 31;\r\n\tconst FULL = 2**N;\r\n\tconst HALF = FULL >>> 1;\r\n\tconst QRTR = HALF >> 1;\r\n\tconst MASK = FULL - 1;\r\n\r\n\t// fill register\r\n\tlet register = 0;\r\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\r\n\r\n\tlet symbols = [];\r\n\tlet low = 0;\r\n\tlet range = FULL; // treat like a float\r\n\twhile (true) {\r\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\r\n\t\tlet start = 0;\r\n\t\tlet end = symbol_count;\r\n\t\twhile (end - start > 1) { // binary search\r\n\t\t\tlet mid = (start + end) >>> 1;\r\n\t\t\tif (value < acc[mid]) {\r\n\t\t\t\tend = mid;\r\n\t\t\t} else {\r\n\t\t\t\tstart = mid;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (start == 0) break; // first symbol is end mark\r\n\t\tsymbols.push(start);\r\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\r\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1;\r\n\t\twhile (((a ^ b) & HALF) == 0) {\r\n\t\t\tregister = (register << 1) & MASK | read_bit();\r\n\t\t\ta = (a << 1) & MASK;\r\n\t\t\tb = (b << 1) & MASK | 1;\r\n\t\t}\r\n\t\twhile (a & ~b & QRTR) {\r\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\r\n\t\t\ta = (a << 1) ^ HALF;\r\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\r\n\t\t}\r\n\t\tlow = a;\r\n\t\trange = 1 + b - a;\r\n\t}\r\n\tlet offset = symbol_count - 4;\r\n\treturn symbols.map(x => { // index into payload\r\n\t\tswitch (x - offset) {\r\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 1: return offset + bytes[pos_payload++];\r\n\t\t\tdefault: return x - 1;\r\n\t\t}\r\n\t});\r\n}\t\r\n\r\n// returns an iterator which returns the next symbol\r\nfunction read_payload(v) {\r\n\tlet pos = 0;\r\n\treturn () => v[pos++];\r\n}\r\nfunction read_compressed_payload(s) {\r\n\treturn read_payload(decode_arithmetic(unsafe_atob(s)));\r\n}\r\n\r\n// unsafe in the sense:\r\n// expected well-formed Base64 w/o padding \r\n// 20220922: added for https://github.com/adraffy/ens-normalize.js/issues/4\r\nfunction unsafe_atob(s) {\r\n\tlet lookup = [];\r\n\t[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'].forEach((c, i) => lookup[c.charCodeAt(0)] = i);\r\n\tlet n = s.length;\r\n\tlet ret = new Uint8Array((6 * n) >> 3);\r\n\tfor (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {\r\n\t\tcarry = (carry << 6) | lookup[s.charCodeAt(i)];\r\n\t\twidth += 6;\r\n\t\tif (width >= 8) {\r\n\t\t\tret[pos++] = (carry >> (width -= 8));\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\r\nfunction signed(i) { \r\n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\r\n}\r\n\r\nfunction read_deltas(n, next) {\r\n\tlet v = Array(n);\r\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\r\n\treturn v;\r\n}\r\n\r\n// [123][5] => [0 3] [1 1] [0 0]\r\nfunction read_sorted(next, prev = 0) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet x = next();\r\n\t\tlet n = next();\r\n\t\tif (!n) break;\r\n\t\tprev += x;\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tret.push(prev + i);\r\n\t\t}\r\n\t\tprev += n + 1;\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction read_sorted_arrays(next) {\r\n\treturn read_array_while(() => { \r\n\t\tlet v = read_sorted(next);\r\n\t\tif (v.length) return v;\r\n\t});\r\n}\r\n\r\n// returns map of x => ys\r\nfunction read_mapped(next) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet w = next();\r\n\t\tif (w == 0) break;\r\n\t\tret.push(read_linear_table(w, next));\r\n\t}\r\n\twhile (true) {\r\n\t\tlet w = next() - 1;\r\n\t\tif (w < 0) break;\r\n\t\tret.push(read_replacement_table(w, next));\r\n\t}\r\n\treturn ret.flat();\r\n}\r\n\r\n// read until next is falsy\r\n// return array of read values\r\nfunction read_array_while(next) {\r\n\tlet v = [];\r\n\twhile (true) {\r\n\t\tlet x = next(v.length);\r\n\t\tif (!x) break;\r\n\t\tv.push(x);\r\n\t}\r\n\treturn v;\r\n}\r\n\r\n// read w columns of length n\r\n// return as n rows of length w\r\nfunction read_transposed(n, w, next) {\r\n\tlet m = Array(n).fill().map(() => []);\r\n\tfor (let i = 0; i < w; i++) {\r\n\t\tread_deltas(n, next).forEach((x, j) => m[j].push(x));\r\n\t}\r\n\treturn m;\r\n}\r\n \r\n// returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]\r\n// where dx/dy = steps, n = run size, w = length of y\r\nfunction read_linear_table(w, next) {\r\n\tlet dx = 1 + next();\r\n\tlet dy = next();\r\n\tlet vN = read_array_while(next);\r\n\tlet m = read_transposed(vN.length, 1+w, next);\r\n\treturn m.flatMap((v, i) => {\r\n\t\tlet [x, ...ys] = v;\r\n\t\treturn Array(vN[i]).fill().map((_, j) => {\r\n\t\t\tlet j_dy = j * dy;\r\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\r\n\t\t});\r\n\t});\r\n}\r\n\r\n// return [[x, ys...], ...]\r\n// where w = length of y\r\nfunction read_replacement_table(w, next) { \r\n\tlet n = 1 + next();\r\n\tlet m = read_transposed(n, 1+w, next);\r\n\treturn m.map(v => [v[0], v.slice(1)]);\r\n}\r\n\r\n\r\nfunction read_trie(next) {\r\n\tlet ret = [];\r\n\tlet sorted = read_sorted(next); \r\n\texpand(decode([]), []);\r\n\treturn ret; // not sorted\r\n\tfunction decode(Q) { // characters that lead into this node\r\n\t\tlet S = next(); // state: valid, save, check\r\n\t\tlet B = read_array_while(() => { // buckets leading to new nodes\r\n\t\t\tlet cps = read_sorted(next).map(i => sorted[i]);\r\n\t\t\tif (cps.length) return decode(cps);\r\n\t\t});\r\n\t\treturn {S, B, Q};\r\n\t}\r\n\tfunction expand({S, B}, cps, saved) {\r\n\t\tif (S & 4 && saved === cps[cps.length-1]) return;\r\n\t\tif (S & 2) saved = cps[cps.length-1];\r\n\t\tif (S & 1) ret.push(cps); \r\n\t\tfor (let br of B) {\r\n\t\t\tfor (let cp of br.Q) {\r\n\t\t\t\texpand(br, [...cps, cp], saved);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction hex_cp(cp) {\r\n\treturn cp.toString(16).toUpperCase().padStart(2, '0');\r\n}\r\n\r\nfunction quote_cp(cp) {\r\n\treturn `{${hex_cp(cp)}}`; // raffy convention: like \"\\u{X}\" w/o the \"\\u\"\r\n}\r\n\r\n/*\r\nexport function explode_cp(s) {\r\n\treturn [...s].map(c => c.codePointAt(0));\r\n}\r\n*/\r\nfunction explode_cp(s) { // this is about 2x faster\r\n\tlet cps = [];\r\n\tfor (let pos = 0, len = s.length; pos < len; ) {\r\n\t\tlet cp = s.codePointAt(pos);\r\n\t\tpos += cp < 0x10000 ? 1 : 2;\r\n\t\tcps.push(cp);\r\n\t}\r\n\treturn cps;\r\n}\r\n\r\nfunction str_from_cps(cps) {\r\n\tconst chunk = 4096;\r\n\tlet len = cps.length;\r\n\tif (len < chunk) return String.fromCodePoint(...cps);\r\n\tlet buf = [];\r\n\tfor (let i = 0; i < len; ) {\r\n\t\tbuf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));\r\n\t}\r\n\treturn buf.join('');\r\n}\r\n\r\nfunction compare_arrays(a, b) {\r\n\tlet n = a.length;\r\n\tlet c = n - b.length;\r\n\tfor (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];\r\n\treturn c;\r\n}\r\n\r\nfunction array_replace(v, a, b) {\r\n\tlet prev = 0;\r\n\twhile (true) {\r\n\t\tlet next = v.indexOf(a, prev);\r\n\t\tif (next < 0) break;\r\n\t\tv[next] = b; \r\n\t\tprev = next + 1;\r\n\t}\r\n}\r\n\r\n// created 2024-09-13T06:42:45.675Z\r\n// compressed base64-encoded blob for include-nf data\r\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\r\n// see: https://github.com/adraffy/ens-normalize.js#security\r\n// SHA-256: a79d5f9b1879a7b416aa659f4a3d788f80a8cf5f0ab955a456592c02f556a28c\r\nvar COMPRESSED = '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';\r\n\r\n// https://unicode.org/reports/tr15/\r\n// for reference implementation\r\n// see: /derive/nf.js\r\n\r\n\r\n// algorithmic hangul\r\n// https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)\r\nconst S0 = 0xAC00;\r\nconst L0 = 0x1100;\r\nconst V0 = 0x1161;\r\nconst T0 = 0x11A7;\r\nconst L_COUNT = 19;\r\nconst V_COUNT = 21;\r\nconst T_COUNT = 28;\r\nconst N_COUNT = V_COUNT * T_COUNT;\r\nconst S_COUNT = L_COUNT * N_COUNT;\r\nconst S1 = S0 + S_COUNT;\r\nconst L1 = L0 + L_COUNT;\r\nconst V1 = V0 + V_COUNT;\r\nconst T1 = T0 + T_COUNT;\r\n\r\nfunction unpack_cc(packed) {\r\n\treturn (packed >> 24) & 0xFF;\r\n}\r\nfunction unpack_cp(packed) {\r\n\treturn packed & 0xFFFFFF;\r\n}\r\n\r\nlet SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;\r\n\r\n// export function nf_deinit() {\r\n// \tif (!SHIFTED_RANK) return;\r\n// \tSHIFTED_RANK = EXCLUSIONS = DECOMP = RECOMP = undefined;\r\n// }\r\n\r\nfunction init$1() {\r\n\t//console.time('nf');\r\n\tlet r = read_compressed_payload(COMPRESSED);\r\n\tSHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map(x => [x, (i+1) << 24]))); // pre-shifted\r\n\tEXCLUSIONS = new Set(read_sorted(r));\r\n\tDECOMP = new Map();\r\n\tRECOMP = new Map();\r\n\tfor (let [cp, cps] of read_mapped(r)) {\r\n\t\tif (!EXCLUSIONS.has(cp) && cps.length == 2) {\r\n\t\t\tlet [a, b] = cps;\r\n\t\t\tlet bucket = RECOMP.get(a);\r\n\t\t\tif (!bucket) {\r\n\t\t\t\tbucket = new Map();\r\n\t\t\t\tRECOMP.set(a, bucket);\r\n\t\t\t}\r\n\t\t\tbucket.set(b, cp);\r\n\t\t}\r\n\t\tDECOMP.set(cp, cps.reverse()); // stored reversed\r\n\t}\r\n\t//console.timeEnd('nf');\r\n\t// 20230905: 11ms\r\n}\r\n\r\nfunction is_hangul(cp) {\r\n\treturn cp >= S0 && cp < S1;\r\n}\r\n\r\nfunction compose_pair(a, b) {\r\n\tif (a >= L0 && a < L1 && b >= V0 && b < V1) {\r\n\t\treturn S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;\r\n\t} else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {\r\n\t\treturn a + (b - T0);\r\n\t} else {\r\n\t\tlet recomp = RECOMP.get(a);\r\n\t\tif (recomp) {\r\n\t\t\trecomp = recomp.get(b);\r\n\t\t\tif (recomp) {\r\n\t\t\t\treturn recomp;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n}\r\n\r\nfunction decomposed(cps) {\r\n\tif (!SHIFTED_RANK) init$1();\r\n\tlet ret = [];\r\n\tlet buf = [];\r\n\tlet check_order = false;\r\n\tfunction add(cp) {\r\n\t\tlet cc = SHIFTED_RANK.get(cp);\r\n\t\tif (cc) {\r\n\t\t\tcheck_order = true;\r\n\t\t\tcp |= cc;\r\n\t\t}\r\n\t\tret.push(cp);\r\n\t}\r\n\tfor (let cp of cps) {\r\n\t\twhile (true) {\r\n\t\t\tif (cp < 0x80) {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t} else if (is_hangul(cp)) {\r\n\t\t\t\tlet s_index = cp - S0;\r\n\t\t\t\tlet l_index = s_index / N_COUNT | 0;\r\n\t\t\t\tlet v_index = (s_index % N_COUNT) / T_COUNT | 0;\r\n\t\t\t\tlet t_index = s_index % T_COUNT;\r\n\t\t\t\tadd(L0 + l_index);\r\n\t\t\t\tadd(V0 + v_index);\r\n\t\t\t\tif (t_index > 0) add(T0 + t_index);\r\n\t\t\t} else {\r\n\t\t\t\tlet mapped = DECOMP.get(cp);\r\n\t\t\t\tif (mapped) {\r\n\t\t\t\t\tbuf.push(...mapped);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tadd(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!buf.length) break;\r\n\t\t\tcp = buf.pop();\r\n\t\t}\r\n\t}\r\n\tif (check_order && ret.length > 1) {\r\n\t\tlet prev_cc = unpack_cc(ret[0]);\r\n\t\tfor (let i = 1; i < ret.length; i++) {\r\n\t\t\tlet cc = unpack_cc(ret[i]);\r\n\t\t\tif (cc == 0 || prev_cc <= cc) {\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet j = i-1;\r\n\t\t\twhile (true) {\r\n\t\t\t\tlet tmp = ret[j+1];\r\n\t\t\t\tret[j+1] = ret[j];\r\n\t\t\t\tret[j] = tmp;\r\n\t\t\t\tif (!j) break;\r\n\t\t\t\tprev_cc = unpack_cc(ret[--j]);\r\n\t\t\t\tif (prev_cc <= cc) break;\r\n\t\t\t}\r\n\t\t\tprev_cc = unpack_cc(ret[i]);\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction composed_from_decomposed(v) {\r\n\tlet ret = [];\r\n\tlet stack = [];\r\n\tlet prev_cp = -1;\r\n\tlet prev_cc = 0;\r\n\tfor (let packed of v) {\r\n\t\tlet cc = unpack_cc(packed);\r\n\t\tlet cp = unpack_cp(packed);\r\n\t\tif (prev_cp == -1) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t}\r\n\t\t} else if (prev_cc > 0 && prev_cc >= cc) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tret.push(prev_cp, ...stack);\r\n\t\t\t\tstack.length = 0;\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t}\r\n\t\t\tprev_cc = cc;\r\n\t\t} else {\r\n\t\t\tlet composed = compose_pair(prev_cp, cp);\r\n\t\t\tif (composed >= 0) {\r\n\t\t\t\tprev_cp = composed;\r\n\t\t\t} else if (prev_cc == 0 && cc == 0) {\r\n\t\t\t\tret.push(prev_cp);\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (prev_cp >= 0) {\r\n\t\tret.push(prev_cp, ...stack);\t\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// note: cps can be iterable\r\nfunction nfd(cps) {\r\n\treturn decomposed(cps).map(unpack_cp);\r\n}\r\nfunction nfc(cps) {\r\n\treturn composed_from_decomposed(decomposed(cps));\r\n}\r\n\r\nconst HYPHEN = 0x2D;\r\nconst STOP = 0x2E;\r\nconst STOP_CH = '.';\r\nconst FE0F = 0xFE0F;\r\nconst UNIQUE_PH = 1;\r\n\r\n// 20230913: replace [...v] with Array_from(v) to avoid large spreads\r\nconst Array_from = x => Array.from(x); // Array.from.bind(Array);\r\n\r\nfunction group_has_cp(g, cp) {\r\n\t// 20230913: keep primary and secondary distinct instead of creating valid union\r\n\treturn g.P.has(cp) || g.Q.has(cp);\r\n}\r\n\r\nclass Emoji extends Array {\r\n\tget is_emoji() { return true; } // free tagging system\r\n}\r\n\r\nlet MAPPED, IGNORED, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;\r\n\r\n// export function ens_deinit() {\r\n// \tnf_deinit();\r\n// \tif (!MAPPED) return;\r\n// \tMAPPED = IGNORED = CM = NSM = ESCAPE = NFC_CHECK = GROUPS = WHOLE_VALID = WHOLE_MAP = VALID = EMOJI_LIST = EMOJI_ROOT = undefined;\r\n// }\r\n\r\nfunction init() {\r\n\tif (MAPPED) return;\r\n\t\r\n\tlet r = read_compressed_payload(COMPRESSED$1);\r\n\tconst read_sorted_array = () => read_sorted(r);\r\n\tconst read_sorted_set = () => new Set(read_sorted_array());\r\n\tconst set_add_many = (set, v) => v.forEach(x => set.add(x));\r\n\r\n\tMAPPED = new Map(read_mapped(r)); \r\n\tIGNORED = read_sorted_set(); // ignored characters are not valid, so just read raw codepoints\r\n\r\n\t/*\r\n\t// direct include from payload is smaller than the decompression code\r\n\tconst FENCED = new Map(read_array_while(() => {\r\n\t\tlet cp = r();\r\n\t\tif (cp) return [cp, read_str(r())];\r\n\t}));\r\n\t*/\r\n\t// 20230217: we still need all CM for proper error formatting\r\n\t// but norm only needs NSM subset that are potentially-valid\r\n\tCM = read_sorted_array();\r\n\tNSM = new Set(read_sorted_array().map(i => CM[i]));\r\n\tCM = new Set(CM);\r\n\t\r\n\tESCAPE = read_sorted_set(); // characters that should not be printed\r\n\tNFC_CHECK = read_sorted_set(); // only needed to illustrate ens_tokenize() transformations\r\n\r\n\tlet chunks = read_sorted_arrays(r);\r\n\tlet unrestricted = r();\r\n\t//const read_chunked = () => new Set(read_sorted_array().flatMap(i => chunks[i]).concat(read_sorted_array()));\r\n\tconst read_chunked = () => {\r\n\t\t// 20230921: build set in parts, 2x faster\r\n\t\tlet set = new Set();\r\n\t\tread_sorted_array().forEach(i => set_add_many(set, chunks[i]));\r\n\t\tset_add_many(set, read_sorted_array());\r\n\t\treturn set; \r\n\t};\r\n\tGROUPS = read_array_while(i => {\r\n\t\t// minifier property mangling seems unsafe\r\n\t\t// so these are manually renamed to single chars\r\n\t\tlet N = read_array_while(r).map(x => x+0x60);\r\n\t\tif (N.length) {\r\n\t\t\tlet R = i >= unrestricted; // unrestricted then restricted\r\n\t\t\tN[0] -= 32; // capitalize\r\n\t\t\tN = str_from_cps(N);\r\n\t\t\tif (R) N=`Restricted[${N}]`;\r\n\t\t\tlet P = read_chunked(); // primary\r\n\t\t\tlet Q = read_chunked(); // secondary\r\n\t\t\tlet M = !r(); // not-whitelisted, check for NSM\r\n\t\t\t// *** this code currently isn't needed ***\r\n\t\t\t/*\r\n\t\t\tlet V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid\r\n\t\t\tlet M = r()-1; // number of combining mark\r\n\t\t\tif (M < 0) { // whitelisted\r\n\t\t\t\tM = new Map(read_array_while(() => {\r\n\t\t\t\t\tlet i = r();\r\n\t\t\t\t\tif (i) return [V[i-1], read_array_while(() => {\r\n\t\t\t\t\t\tlet v = read_array_while(r);\r\n\t\t\t\t\t\tif (v.length) return v.map(x => x-1);\r\n\t\t\t\t\t})];\r\n\t\t\t\t}));\r\n\t\t\t}*/\r\n\t\t\treturn {N, P, Q, M, R};\r\n\t\t}\r\n\t});\r\n\r\n\t// decode compressed wholes\r\n\tWHOLE_VALID = read_sorted_set();\r\n\tWHOLE_MAP = new Map();\r\n\tlet wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a-b); // must be sorted\r\n\twholes.forEach((cp, i) => {\r\n\t\tlet d = r(); \r\n\t\tlet w = wholes[i] = d ? wholes[i-d] : {V: [], M: new Map()};\r\n\t\tw.V.push(cp); // add to member set\r\n\t\tif (!WHOLE_VALID.has(cp)) {\r\n\t\t\tWHOLE_MAP.set(cp, w);  // register with whole map\r\n\t\t}\r\n\t});\r\n\r\n\t// compute confusable-extent complements\r\n\t// usage: WHOLE_MAP.get(cp).M.get(cp) = complement set\r\n\tfor (let {V, M} of new Set(WHOLE_MAP.values())) {\r\n\t\t// connect all groups that have each whole character\r\n\t\tlet recs = [];\r\n\t\tfor (let cp of V) {\r\n\t\t\tlet gs = GROUPS.filter(g => group_has_cp(g, cp));\r\n\t\t\tlet rec = recs.find(({G}) => gs.some(g => G.has(g)));\r\n\t\t\tif (!rec) {\r\n\t\t\t\trec = {G: new Set(), V: []};\r\n\t\t\t\trecs.push(rec);\r\n\t\t\t}\r\n\t\t\trec.V.push(cp);\r\n\t\t\tset_add_many(rec.G, gs);\r\n\t\t}\r\n\t\t// per character cache groups which are not a member of the extent\r\n\t\tlet union = recs.flatMap(x => Array_from(x.G)); // all of the groups used by this whole\r\n\t\tfor (let {G, V} of recs) {\r\n\t\t\tlet complement = new Set(union.filter(g => !G.has(g))); // groups not covered by the extent\r\n\t\t\tfor (let cp of V) {\r\n\t\t\t\tM.set(cp, complement); // this is the same reference\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// compute valid set\r\n\t// 20230924: VALID was union but can be re-used\r\n\tVALID = new Set(); // exists in 1+ groups\r\n\tlet multi = new Set(); // exists in 2+ groups\r\n\tconst add_to_union = cp => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);\r\n\tfor (let g of GROUPS) {\r\n\t\tfor (let cp of g.P) add_to_union(cp);\r\n\t\tfor (let cp of g.Q) add_to_union(cp);\r\n\t}\r\n\t// dual purpose WHOLE_MAP: return placeholder if unique non-confusable\r\n\tfor (let cp of VALID) {\r\n\t\tif (!WHOLE_MAP.has(cp) && !multi.has(cp)) {\r\n\t\t\tWHOLE_MAP.set(cp, UNIQUE_PH);\r\n\t\t}\r\n\t}\r\n\t// add all decomposed parts\r\n\t// see derive: \"Valid is Closed (via Brute-force)\"\r\n\tset_add_many(VALID, nfd(VALID));\r\n\t\r\n\t// decode emoji\r\n\t// 20230719: emoji are now fully-expanded to avoid quirk logic \r\n\tEMOJI_LIST = read_trie(r).map(v => Emoji.from(v)).sort(compare_arrays);\r\n\tEMOJI_ROOT = new Map(); // this has approx 7K nodes (2+ per emoji)\r\n\tfor (let cps of EMOJI_LIST) {\r\n\t\t// 20230719: change to *slightly* stricter algorithm which disallows \r\n\t\t// insertion of misplaced FE0F in emoji sequences (matching ENSIP-15)\r\n\t\t// example: beautified [A B] (eg. flag emoji) \r\n\t\t//  before: allow: [A FE0F B], error: [A FE0F FE0F B] \r\n\t\t//   after: error: both\r\n\t\t// note: this code now matches ENSNormalize.{cs,java} logic\r\n\t\tlet prev = [EMOJI_ROOT];\r\n\t\tfor (let cp of cps) {\r\n\t\t\tlet next = prev.map(node => {\r\n\t\t\t\tlet child = node.get(cp);\r\n\t\t\t\tif (!child) {\r\n\t\t\t\t\t// should this be object? \r\n\t\t\t\t\t// (most have 1-2 items, few have many)\r\n\t\t\t\t\t// 20230719: no, v8 default map is 4?\r\n\t\t\t\t\tchild = new Map();\r\n\t\t\t\t\tnode.set(cp, child);\r\n\t\t\t\t}\r\n\t\t\t\treturn child;\r\n\t\t\t});\r\n\t\t\tif (cp === FE0F) {\r\n\t\t\t\tprev.push(...next); // less than 20 elements\r\n\t\t\t} else {\r\n\t\t\t\tprev = next;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let x of prev) {\r\n\t\t\tx.V = cps;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// if escaped: {HEX}\r\n//       else: \"x\" {HEX}\r\nfunction quoted_cp(cp) {\r\n\treturn (should_escape(cp) ? '' : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);\r\n}\r\n\r\n// 20230211: some messages can be mixed-directional and result in spillover\r\n// use 200E after a quoted string to force the remainder of a string from \r\n// acquring the direction of the quote\r\n// https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions\r\nfunction bidi_qq(s) {\r\n\treturn `\"${s}\"\\u200E`; // strong LTR\r\n}\r\n\r\nfunction check_label_extension(cps) {\r\n\tif (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {\r\n\t\tthrow new Error(`invalid label extension: \"${str_from_cps(cps.slice(0, 4))}\"`); // this can only be ascii so cant be bidi\r\n\t}\r\n}\r\nfunction check_leading_underscore(cps) {\r\n\tconst UNDERSCORE = 0x5F;\r\n\tfor (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {\r\n\t\tif (cps[--i] !== UNDERSCORE) {\r\n\t\t\tthrow new Error('underscore allowed only at start');\r\n\t\t}\r\n\t}\r\n}\r\n// check that a fenced cp is not leading, trailing, or touching another fenced cp\r\nfunction check_fenced(cps) {\r\n\tlet cp = cps[0];\r\n\tlet prev = FENCED.get(cp);\r\n\tif (prev) throw error_placement(`leading ${prev}`);\r\n\tlet n = cps.length;\r\n\tlet last = -1; // prevents trailing from throwing\r\n\tfor (let i = 1; i < n; i++) {\r\n\t\tcp = cps[i];\r\n\t\tlet match = FENCED.get(cp);\r\n\t\tif (match) {\r\n\t\t\t// since cps[0] isn't fenced, cps[1] cannot throw\r\n\t\t\tif (last == i) throw error_placement(`${prev} + ${match}`);\r\n\t\t\tlast = i + 1;\r\n\t\t\tprev = match;\r\n\t\t}\r\n\t}\r\n\tif (last == n) throw error_placement(`trailing ${prev}`);\r\n}\r\n\r\n// create a safe to print string \r\n// invisibles are escaped\r\n// leading cm uses placeholder\r\n// if cps exceed max, middle truncate with ellipsis\r\n// quoter(cp) => string, eg. 3000 => \"{3000}\"\r\n// note: in html, you'd call this function then replace [<>&] with entities\r\nfunction safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {\r\n\t//if (Number.isInteger(cps)) cps = [cps];\r\n\t//if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);\r\n\tlet buf = [];\r\n\tif (is_combining_mark(cps[0])) buf.push('◌');\r\n\tif (cps.length > max) {\r\n\t\tmax >>= 1;\r\n\t\tcps = [...cps.slice(0, max), 0x2026, ...cps.slice(-max)];\r\n\t}\r\n\tlet prev = 0;\r\n\tlet n = cps.length;\r\n\tfor (let i = 0; i < n; i++) {\r\n\t\tlet cp = cps[i];\r\n\t\tif (should_escape(cp)) {\r\n\t\t\tbuf.push(str_from_cps(cps.slice(prev, i)));\r\n\t\t\tbuf.push(quoter(cp));\r\n\t\t\tprev = i + 1;\r\n\t\t}\r\n\t}\r\n\tbuf.push(str_from_cps(cps.slice(prev, n)));\r\n\treturn buf.join('');\r\n}\r\n\r\n// note: set(s) cannot be exposed because they can be modified\r\n// note: Object.freeze() doesn't work\r\nfunction is_combining_mark(cp, only_nsm) { // 20240127: add extra argument\r\n\tinit();\r\n\treturn only_nsm ? NSM.has(cp) : CM.has(cp);\r\n}\r\nfunction should_escape(cp) {\r\n\tinit();\r\n\treturn ESCAPE.has(cp);\r\n}\r\n\r\n// return all supported emoji as fully-qualified emoji \r\n// ordered by length then lexicographic \r\nfunction ens_emoji() {\r\n\tinit();\r\n\treturn EMOJI_LIST.map(x => x.slice()); // emoji are exposed so copy\r\n}\r\n\r\nfunction ens_normalize_fragment(frag, decompose) {\r\n\tinit();\r\n\tlet nf = decompose ? nfd : nfc;\r\n\treturn frag.split(STOP_CH).map(label => str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);\r\n}\r\n\r\nfunction ens_normalize(name) {\r\n\treturn flatten(split(name, nfc, filter_fe0f));\r\n}\r\n\r\nfunction ens_beautify(name) {\r\n\tlet labels = split(name, nfc, x => x); // emoji not exposed\r\n\tfor (let {type, output, error} of labels) {\r\n\t\tif (error) break; // flatten will throw\r\n\r\n\t\t// replace leading/trailing hyphen\r\n\t\t// 20230121: consider beautifing all or leading/trailing hyphen to unicode variant\r\n\t\t// not exactly the same in every font, but very similar: \"-\" vs \"‐\"\r\n\t\t/*\r\n\t\tconst UNICODE_HYPHEN = 0x2010;\r\n\t\t// maybe this should replace all for visual consistancy?\r\n\t\t// `node tools/reg-count.js regex ^-\\{2,\\}` => 592\r\n\t\t//for (let i = 0; i < output.length; i++) if (output[i] == 0x2D) output[i] = 0x2010;\r\n\t\tif (output[0] == HYPHEN) output[0] = UNICODE_HYPHEN;\r\n\t\tlet end = output.length-1;\r\n\t\tif (output[end] == HYPHEN) output[end] = UNICODE_HYPHEN;\r\n\t\t*/\r\n\t\t// 20230123: WHATWG URL uses \"CheckHyphens\" false\r\n\t\t// https://url.spec.whatwg.org/#idna\r\n\r\n\t\t// update ethereum symbol\r\n\t\t// ξ => Ξ if not greek\r\n\t\tif (type !== 'Greek') array_replace(output, 0x3BE, 0x39E);\r\n\r\n\t\t// 20221213: fixes bidi subdomain issue, but breaks invariant (200E is disallowed)\r\n\t\t// could be fixed with special case for: 2D (.) + 200E (LTR)\r\n\t\t// https://discuss.ens.domains/t/bidi-label-ordering-spoof/15824\r\n\t\t//output.splice(0, 0, 0x200E);\r\n\t}\r\n\treturn flatten(labels);\r\n}\r\n\r\nfunction ens_split(name, preserve_emoji) {\r\n\treturn split(name, nfc, preserve_emoji ? x => x.slice() : filter_fe0f); // emoji are exposed so copy\r\n}\r\n\r\nfunction split(name, nf, ef) {\r\n\tif (!name) return []; // 20230719: empty name allowance\r\n\tinit();\r\n\tlet offset = 0;\r\n\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t// 4.) \"The label must not contain a U+002E ( . ) FULL STOP.\"\r\n\treturn name.split(STOP_CH).map(label => {\r\n\t\tlet input = explode_cp(label);\r\n\t\tlet info = {\r\n\t\t\tinput,\r\n\t\t\toffset, // codepoint, not substring!\r\n\t\t};\r\n\t\toffset += input.length + 1; // + stop\r\n\t\ttry {\r\n\t\t\t// 1.) \"The label must be in Unicode Normalization Form NFC\"\r\n\t\t\tlet tokens = info.tokens = tokens_from_str(input, nf, ef);\r\n\t\t\tlet token_count = tokens.length;\r\n\t\t\tlet type;\r\n\t\t\tif (!token_count) { // the label was effectively empty (could of had ignored characters)\r\n\t\t\t\t//norm = [];\r\n\t\t\t\t//type = 'None'; // use this instead of next match, \"ASCII\"\r\n\t\t\t\t// 20230120: change to strict\r\n\t\t\t\t// https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59\r\n\t\t\t\tthrow new Error(`empty label`);\r\n\t\t\t} \r\n\t\t\tlet norm = info.output = tokens.flat();\r\n\t\t\tcheck_leading_underscore(norm);\r\n\t\t\tlet emoji = info.emoji = token_count > 1 || tokens[0].is_emoji; // same as: tokens.some(x => x.is_emoji);\r\n\t\t\tif (!emoji && norm.every(cp => cp < 0x80)) { // special case for ascii\r\n\t\t\t\t// 20230123: matches matches WHATWG, see note 3.3\r\n\t\t\t\tcheck_label_extension(norm); // only needed for ascii\r\n\t\t\t\t// cant have fenced\r\n\t\t\t\t// cant have cm\r\n\t\t\t\t// cant have wholes\r\n\t\t\t\t// see derive: \"Fastpath ASCII\"\r\n\t\t\t\ttype = 'ASCII';\r\n\t\t\t} else {\r\n\t\t\t\tlet chars = tokens.flatMap(x => x.is_emoji ? [] : x); // all of the nfc tokens concat together\r\n\t\t\t\tif (!chars.length) { // theres no text, just emoji\r\n\t\t\t\t\ttype = 'Emoji';\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 5.) \"The label must not begin with a combining mark, that is: General_Category=Mark.\"\r\n\t\t\t\t\tif (CM.has(norm[0])) throw error_placement('leading combining mark');\r\n\t\t\t\t\tfor (let i = 1; i < token_count; i++) { // we've already checked the first token\r\n\t\t\t\t\t\tlet cps = tokens[i];\r\n\t\t\t\t\t\tif (!cps.is_emoji && CM.has(cps[0])) { // every text token has emoji neighbors, eg. EtEEEtEt...\r\n\t\t\t\t\t\t\t// bidi_qq() not needed since emoji is LTR and cps is a CM\r\n\t\t\t\t\t\t\tthrow error_placement(`emoji + combining mark: \"${str_from_cps(tokens[i-1])} + ${safe_str_from_cps([cps[0]])}\"`); \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcheck_fenced(norm);\r\n\t\t\t\t\tlet unique = Array_from(new Set(chars));\r\n\t\t\t\t\tlet [g] = determine_group(unique); // take the first match\r\n\t\t\t\t\t// see derive: \"Matching Groups have Same CM Style\"\r\n\t\t\t\t\t// alternative: could form a hybrid type: Latin/Japanese/...\t\r\n\t\t\t\t\tcheck_group(g, chars); // need text in order\r\n\t\t\t\t\tcheck_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)\r\n\t\t\t\t\ttype = g.N;\r\n\t\t\t\t\t// 20230121: consider exposing restricted flag\r\n\t\t\t\t\t// it's simpler to just check for 'Restricted'\r\n\t\t\t\t\t// or even better: type.endsWith(']')\r\n\t\t\t\t\t//if (g.R) info.restricted = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinfo.type = type;\r\n\t\t} catch (err) {\r\n\t\t\tinfo.error = err; // use full error object\r\n\t\t}\r\n\t\treturn info;\r\n\t});\r\n}\r\n\r\nfunction check_whole(group, unique) {\r\n\tlet maker;\r\n\tlet shared = [];\r\n\tfor (let cp of unique) {\r\n\t\tlet whole = WHOLE_MAP.get(cp);\r\n\t\tif (whole === UNIQUE_PH) return; // unique, non-confusable\r\n\t\tif (whole) {\r\n\t\t\tlet set = whole.M.get(cp); // groups which have a character that look-like this character\r\n\t\t\tmaker = maker ? maker.filter(g => set.has(g)) : Array_from(set);\r\n\t\t\tif (!maker.length) return; // confusable intersection is empty\r\n\t\t} else {\r\n\t\t\tshared.push(cp); \r\n\t\t}\r\n\t}\r\n\tif (maker) {\r\n\t\t// we have 1+ confusable\r\n\t\t// check if any of the remaining groups\r\n\t\t// contain the shared characters too\r\n\t\tfor (let g of maker) {\r\n\t\t\tif (shared.every(cp => group_has_cp(g, cp))) {\r\n\t\t\t\tthrow new Error(`whole-script confusable: ${group.N}/${g.N}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// assumption: unique.size > 0\r\n// returns list of matching groups\r\nfunction determine_group(unique) {\r\n\tlet groups = GROUPS;\r\n\tfor (let cp of unique) {\r\n\t\t// note: we need to dodge CM that are whitelisted\r\n\t\t// but that code isn't currently necessary\r\n\t\tlet gs = groups.filter(g => group_has_cp(g, cp));\r\n\t\tif (!gs.length) {\r\n\t\t\tif (!GROUPS.some(g => group_has_cp(g, cp))) { \r\n\t\t\t\t// the character was composed of valid parts\r\n\t\t\t\t// but it's NFC form is invalid\r\n\t\t\t\t// 20230716: change to more exact statement, see: ENSNormalize.{cs,java}\r\n\t\t\t\t// note: this doesn't have to be a composition\r\n\t\t\t\t// 20230720: change to full check\r\n\t\t\t\tthrow error_disallowed(cp); // this should be rare\r\n\t\t\t} else {\r\n\t\t\t\t// there is no group that contains all these characters\r\n\t\t\t\t// throw using the highest priority group that matched\r\n\t\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\t\tthrow error_group_member(groups[0], cp);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgroups = gs;\r\n\t\tif (gs.length == 1) break; // there is only one group left\r\n\t}\r\n\t// there are at least 1 group(s) with all of these characters\r\n\treturn groups;\r\n}\r\n\r\n// throw on first error\r\nfunction flatten(split) {\r\n\treturn split.map(({input, error, output}) => {\r\n\t\tif (error) {\r\n\t\t\t// don't print label again if just a single label\r\n\t\t\tlet msg = error.message;\r\n\t\t\t// bidi_qq() only necessary if msg is digits\r\n\t\t\tthrow new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`); \r\n\t\t}\r\n\t\treturn str_from_cps(output);\r\n\t}).join(STOP_CH);\r\n}\r\n\r\nfunction error_disallowed(cp) {\r\n\t// TODO: add cp to error?\r\n\treturn new Error(`disallowed character: ${quoted_cp(cp)}`); \r\n}\r\nfunction error_group_member(g, cp) {\r\n\tlet quoted = quoted_cp(cp);\r\n\tlet gg = GROUPS.find(g => g.P.has(cp)); // only check primary\r\n\tif (gg) {\r\n\t\tquoted = `${gg.N} ${quoted}`;\r\n\t}\r\n\treturn new Error(`illegal mixture: ${g.N} + ${quoted}`);\r\n}\r\nfunction error_placement(where) {\r\n\treturn new Error(`illegal placement: ${where}`);\r\n}\r\n\r\n// assumption: cps.length > 0\r\n// assumption: cps[0] isn't a CM\r\n// assumption: the previous character isn't an emoji\r\nfunction check_group(g, cps) {\r\n\tfor (let cp of cps) {\r\n\t\tif (!group_has_cp(g, cp)) {\r\n\t\t\t// for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. \"e{300}{300}\"\r\n\t\t\t// at the moment, it's unnecessary to introduce an extra error type\r\n\t\t\t// until there exists a whitelisted multi-character\r\n\t\t\t//   eg. if (M < 0 && is_combining_mark(cp)) { ... }\r\n\t\t\t// there are 3 cases:\r\n\t\t\t//   1. illegal cm for wrong group => mixture error\r\n\t\t\t//   2. illegal cm for same group => cm error\r\n\t\t\t//       requires set of whitelist cm per group: \r\n\t\t\t//        eg. new Set([...g.P, ...g.Q].flatMap(nfc).filter(cp => CM.has(cp)))\r\n\t\t\t//   3. wrong group => mixture error\r\n\t\t\tthrow error_group_member(g, cp);\r\n\t\t}\r\n\t}\r\n\t//if (M >= 0) { // we have a known fixed cm count\r\n\tif (g.M) { // we need to check for NSM\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // see: assumption\r\n\t\t\t// 20230210: bugfix: using cps instead of decomposed h/t Carbon225\r\n\t\t\t/*\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t// 20230217: switch to NSM counting\r\n\t\t\t// https://www.unicode.org/reports/tr39/#Optional_Detection\r\n\t\t\tif (NSM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\tfor (let cp; j < e && NSM.has(cp = decomposed[j]); j++) {\r\n\t\t\t\t\t// a. Forbid sequences of the same nonspacing mark.\r\n\t\t\t\t\tfor (let k = i; k < j; k++) { // O(n^2) but n < 100\r\n\t\t\t\t\t\tif (decomposed[k] == cp) {\r\n\t\t\t\t\t\t\tthrow new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// parse to end so we have full nsm count\r\n\t\t\t\t// b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).\r\n\t\t\t\tif (j - i > NSM_MAX) {\r\n\t\t\t\t\t// note: this slice starts with a base char or spacing-mark cm\r\n\t\t\t\t\tthrow new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${NSM_MAX})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// *** this code currently isn't needed ***\r\n\t/*\r\n\tlet cm_whitelist = M instanceof Map;\r\n\tfor (let i = 0, e = cps.length; i < e; ) {\r\n\t\tlet cp = cps[i++];\r\n\t\tlet seqs = cm_whitelist && M.get(cp);\r\n\t\tif (seqs) { \r\n\t\t\t// list of codepoints that can follow\r\n\t\t\t// if this exists, this will always be 1+\r\n\t\t\tlet j = i;\r\n\t\t\twhile (j < e && CM.has(cps[j])) j++;\r\n\t\t\tlet cms = cps.slice(i, j);\r\n\t\t\tlet match = seqs.find(seq => !compare_arrays(seq, cms));\r\n\t\t\tif (!match) throw new Error(`disallowed combining mark sequence: \"${safe_str_from_cps([cp, ...cms])}\"`);\r\n\t\t\ti = j;\r\n\t\t} else if (!V.has(cp)) {\r\n\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\tlet quoted = quoted_cp(cp);\r\n\t\t\tfor (let cp of cps) {\r\n\t\t\t\tlet u = UNIQUE.get(cp);\r\n\t\t\t\tif (u && u !== g) {\r\n\t\t\t\t\t// if both scripts are restricted this error is confusing\r\n\t\t\t\t\t// because we don't differentiate RestrictedA from RestrictedB \r\n\t\t\t\t\tif (!u.R) quoted = `${quoted} is ${u.N}`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(`disallowed ${g.N} character: ${quoted}`);\r\n\t\t\t//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);\r\n\t\t\t//throw new Error(`${g.N} does not allow: ${quoted}`);\r\n\t\t}\r\n\t}\r\n\tif (!cm_whitelist) {\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: \"${str_from_cps(decomposed.slice(i-1, j))}\" (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t*/\r\n}\r\n\r\n// given a list of codepoints\r\n// returns a list of lists, where emoji are a fully-qualified (as Array subclass)\r\n// eg. explode_cp(\"abc💩d\") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]\r\n// 20230818: rename for 'process' name collision h/t Javarome\r\n// https://github.com/adraffy/ens-normalize.js/issues/23\r\nfunction tokens_from_str(input, nf, ef) {\r\n\tlet ret = [];\r\n\tlet chars = [];\r\n\tinput = input.slice().reverse(); // flip so we can pop\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input);\r\n\t\tif (emoji) {\r\n\t\t\tif (chars.length) {\r\n\t\t\t\tret.push(nf(chars));\r\n\t\t\t\tchars = [];\r\n\t\t\t}\r\n\t\t\tret.push(ef(emoji));\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (VALID.has(cp)) {\r\n\t\t\t\tchars.push(cp);\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\tchars.push(...cps); // less than 10 elements\r\n\t\t\t\t} else if (!IGNORED.has(cp)) {\r\n\t\t\t\t\t// 20230912: unicode 15.1 changed the order of processing such that\r\n\t\t\t\t\t// disallowed parts are only rejected after NFC\r\n\t\t\t\t\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t\t\t\t\t// this doesn't impact normalization as of today\r\n\t\t\t\t\t// technically, this error can be removed as the group logic will apply similar logic\r\n\t\t\t\t\t// however the error type might be less clear\r\n\t\t\t\t\tthrow error_disallowed(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (chars.length) {\r\n\t\tret.push(nf(chars));\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction filter_fe0f(cps) {\r\n\treturn cps.filter(cp => cp != FE0F);\r\n}\r\n\r\n// given array of codepoints\r\n// returns the longest valid emoji sequence (or undefined if no match)\r\n// *MUTATES* the supplied array\r\n// disallows interleaved ignored characters\r\n// fills (optional) eaten array with matched codepoints\r\nfunction consume_emoji_reversed(cps, eaten) {\r\n\tlet node = EMOJI_ROOT;\r\n\tlet emoji;\r\n\tlet pos = cps.length;\r\n\twhile (pos) {\r\n\t\tnode = node.get(cps[--pos]);\r\n\t\tif (!node) break;\r\n\t\tlet {V} = node;\r\n\t\tif (V) { // this is a valid emoji (so far)\r\n\t\t\temoji = V;\r\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // (optional) copy input, used for ens_tokenize()\r\n\t\t\tcps.length = pos; // truncate\r\n\t\t}\r\n\t}\r\n\treturn emoji;\r\n}\r\n\r\n// ************************************************************\r\n// tokenizer \r\n\r\nconst TY_VALID = 'valid';\r\nconst TY_MAPPED = 'mapped';\r\nconst TY_IGNORED = 'ignored';\r\nconst TY_DISALLOWED = 'disallowed';\r\nconst TY_EMOJI = 'emoji';\r\nconst TY_NFC = 'nfc';\r\nconst TY_STOP = 'stop';\r\n\r\nfunction ens_tokenize(name, {\r\n\tnf = true, // collapse unnormalized runs into a single token\r\n} = {}) {\r\n\tinit();\r\n\tlet input = explode_cp(name).reverse();\r\n\tlet eaten = [];\r\n\tlet tokens = [];\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input, eaten);\r\n\t\tif (emoji) {\r\n\t\t\ttokens.push({\r\n\t\t\t\ttype: TY_EMOJI,\r\n\t\t\t\temoji: emoji.slice(), // copy emoji\r\n\t\t\t\tinput: eaten,\r\n\t\t\t\tcps: filter_fe0f(emoji)\r\n\t\t\t});\r\n\t\t\teaten = []; // reset buffer\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (cp == STOP) {\r\n\t\t\t\ttokens.push({type: TY_STOP, cp});\r\n\t\t\t} else if (VALID.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_VALID, cps: [cp]});\r\n\t\t\t} else if (IGNORED.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_IGNORED, cp});\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\ttokens.push({type: TY_MAPPED, cp, cps: cps.slice()});\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttokens.push({type: TY_DISALLOWED, cp});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (nf) {\r\n\t\tfor (let i = 0, start = -1; i < tokens.length; i++) {\r\n\t\t\tlet token = tokens[i];\r\n\t\t\tif (is_valid_or_mapped(token.type)) {\r\n\t\t\t\tif (requires_check(token.cps)) { // normalization might be needed\r\n\t\t\t\t\tlet end = i + 1;\r\n\t\t\t\t\tfor (let pos = end; pos < tokens.length; pos++) { // find adjacent text\r\n\t\t\t\t\t\tlet {type, cps} = tokens[pos];\r\n\t\t\t\t\t\tif (is_valid_or_mapped(type)) {\r\n\t\t\t\t\t\t\tif (!requires_check(cps)) break;\r\n\t\t\t\t\t\t\tend = pos + 1;\r\n\t\t\t\t\t\t} else if (type !== TY_IGNORED) { // || type !== TY_DISALLOWED) { \r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (start < 0) start = i;\r\n\t\t\t\t\tlet slice = tokens.slice(start, end);\r\n\t\t\t\t\tlet cps0 = slice.flatMap(x => is_valid_or_mapped(x.type) ? x.cps : []); // strip junk tokens\r\n\t\t\t\t\tlet cps = nfc(cps0);\r\n\t\t\t\t\tif (compare_arrays(cps, cps0)) { // bundle into an nfc token\r\n\t\t\t\t\t\ttokens.splice(start, end - start, {\r\n\t\t\t\t\t\t\ttype: TY_NFC, \r\n\t\t\t\t\t\t\tinput: cps0, // there are 3 states: tokens0 ==(process)=> input ==(nfc)=> tokens/cps\r\n\t\t\t\t\t\t\tcps, \r\n\t\t\t\t\t\t\ttokens0: collapse_valid_tokens(slice),\r\n\t\t\t\t\t\t\ttokens: ens_tokenize(str_from_cps(cps), {nf: false})\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\ti = start;\r\n\t\t\t\t\t} else { \r\n\t\t\t\t\t\ti = end - 1; // skip to end of slice\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstart = -1; // reset\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstart = i; // remember last\r\n\t\t\t\t}\r\n\t\t\t} else if (token.type !== TY_IGNORED) { // 20221024: is this correct?\r\n\t\t\t\tstart = -1; // reset\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn collapse_valid_tokens(tokens);\r\n}\r\n\r\nfunction is_valid_or_mapped(type) {\r\n\treturn type == TY_VALID || type == TY_MAPPED;\r\n}\r\n\r\nfunction requires_check(cps) {\r\n\treturn cps.some(cp => NFC_CHECK.has(cp));\r\n}\r\n\r\nfunction collapse_valid_tokens(tokens) {\r\n\tfor (let i = 0; i < tokens.length; i++) {\r\n\t\tif (tokens[i].type == TY_VALID) {\r\n\t\t\tlet j = i + 1;\r\n\t\t\twhile (j < tokens.length && tokens[j].type == TY_VALID) j++;\r\n\t\t\ttokens.splice(i, j - i, {type: TY_VALID, cps: tokens.slice(i, j).flatMap(x => x.cps)});\r\n\t\t}\r\n\t}\r\n\treturn tokens;\r\n}\r\n\r\nexport { ens_beautify, ens_emoji, ens_normalize, ens_normalize_fragment, ens_split, ens_tokenize, is_combining_mark, nfc, nfd, safe_str_from_cps, should_escape };\r\n", "/**\r\n * @module BIP32 hierarchical deterministic (HD) wallets over secp256k1.\r\n * @example\r\n * ```js\r\n * import { HDKey } from \"@scure/bip32\";\r\n * const hdkey1 = HDKey.fromMasterSeed(seed);\r\n * const hdkey2 = HDKey.fromExtendedKey(base58key);\r\n * const hdkey3 = HDKey.fromJSON({ xpriv: string });\r\n *\r\n * // props\r\n * [hdkey1.depth, hdkey1.index, hdkey1.chainCode];\r\n * console.log(hdkey2.privateKey, hdkey2.publicKey);\r\n * console.log(hdkey3.derive(\"m/0/2147483647'/1\"));\r\n * const sig = hdkey3.sign(hash);\r\n * hdkey3.verify(hash, sig);\r\n * ```\r\n */\r\n/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\r\nimport { mod } from '@noble/curves/abstract/modular';\r\nimport { secp256k1 as secp } from '@noble/curves/secp256k1';\r\nimport { hmac } from '@noble/hashes/hmac';\r\nimport { ripemd160 } from '@noble/hashes/legacy';\r\nimport { sha256, sha512 } from '@noble/hashes/sha2';\r\nimport {\r\n  abytes,\r\n  bytesToHex,\r\n  concatBytes,\r\n  createView,\r\n  hexToBytes,\r\n  utf8ToBytes,\r\n} from '@noble/hashes/utils';\r\nimport { createBase58check } from '@scure/base';\r\n\r\nconst Point = secp.ProjectivePoint;\r\nconst base58check = createBase58check(sha256);\r\n\r\nfunction bytesToNumber(bytes: Uint8Array): bigint {\r\n  abytes(bytes);\r\n  const h = bytes.length === 0 ? '0' : bytesToHex(bytes);\r\n  return BigInt('0x' + h);\r\n}\r\n\r\nfunction numberToBytes(num: bigint): Uint8Array {\r\n  if (typeof num !== 'bigint') throw new Error('bigint expected');\r\n  return hexToBytes(num.toString(16).padStart(64, '0'));\r\n}\r\n\r\nconst MASTER_SECRET = utf8ToBytes('Bitcoin seed');\r\n// Bitcoin hardcoded by default\r\nconst BITCOIN_VERSIONS: Versions = { private: 0x0488ade4, public: 0x0488b21e };\r\nexport const HARDENED_OFFSET: number = 0x80000000;\r\n\r\nexport interface Versions {\r\n  private: number;\r\n  public: number;\r\n}\r\n\r\nconst hash160 = (data: Uint8Array) => ripemd160(sha256(data));\r\nconst fromU32 = (data: Uint8Array) => createView(data).getUint32(0, false);\r\nconst toU32 = (n: number) => {\r\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\r\n    throw new Error('invalid number, should be from 0 to 2**32-1, got ' + n);\r\n  }\r\n  const buf = new Uint8Array(4);\r\n  createView(buf).setUint32(0, n, false);\r\n  return buf;\r\n};\r\n\r\ninterface HDKeyOpt {\r\n  versions?: Versions;\r\n  depth?: number;\r\n  index?: number;\r\n  parentFingerprint?: number;\r\n  chainCode?: Uint8Array;\r\n  publicKey?: Uint8Array;\r\n  privateKey?: Uint8Array | bigint;\r\n}\r\n\r\nexport class HDKey {\r\n  get fingerprint(): number {\r\n    if (!this.pubHash) {\r\n      throw new Error('No publicKey set!');\r\n    }\r\n    return fromU32(this.pubHash);\r\n  }\r\n  get identifier(): Uint8Array | undefined {\r\n    return this.pubHash;\r\n  }\r\n  get pubKeyHash(): Uint8Array | undefined {\r\n    return this.pubHash;\r\n  }\r\n  get privateKey(): Uint8Array | null {\r\n    return this.privKeyBytes || null;\r\n  }\r\n  get publicKey(): Uint8Array | null {\r\n    return this.pubKey || null;\r\n  }\r\n  get privateExtendedKey(): string {\r\n    const priv = this.privateKey;\r\n    if (!priv) {\r\n      throw new Error('No private key');\r\n    }\r\n    return base58check.encode(\r\n      this.serialize(this.versions.private, concatBytes(new Uint8Array([0]), priv))\r\n    );\r\n  }\r\n  get publicExtendedKey(): string {\r\n    if (!this.pubKey) {\r\n      throw new Error('No public key');\r\n    }\r\n    return base58check.encode(this.serialize(this.versions.public, this.pubKey));\r\n  }\r\n\r\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions = BITCOIN_VERSIONS): HDKey {\r\n    abytes(seed);\r\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\r\n      throw new Error(\r\n        'HDKey: seed length must be between 128 and 512 bits; 256 bits is advised, got ' +\r\n          seed.length\r\n      );\r\n    }\r\n    const I = hmac(sha512, MASTER_SECRET, seed);\r\n    return new HDKey({\r\n      versions,\r\n      chainCode: I.slice(32),\r\n      privateKey: I.slice(0, 32),\r\n    });\r\n  }\r\n\r\n  public static fromExtendedKey(base58key: string, versions: Versions = BITCOIN_VERSIONS): HDKey {\r\n    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\r\n    const keyBuffer: Uint8Array = base58check.decode(base58key);\r\n    const keyView = createView(keyBuffer);\r\n    const version = keyView.getUint32(0, false);\r\n    const opt = {\r\n      versions,\r\n      depth: keyBuffer[4],\r\n      parentFingerprint: keyView.getUint32(5, false),\r\n      index: keyView.getUint32(9, false),\r\n      chainCode: keyBuffer.slice(13, 45),\r\n    };\r\n    const key = keyBuffer.slice(45);\r\n    const isPriv = key[0] === 0;\r\n    if (version !== versions[isPriv ? 'private' : 'public']) {\r\n      throw new Error('Version mismatch');\r\n    }\r\n    if (isPriv) {\r\n      return new HDKey({ ...opt, privateKey: key.slice(1) });\r\n    } else {\r\n      return new HDKey({ ...opt, publicKey: key });\r\n    }\r\n  }\r\n\r\n  public static fromJSON(json: { xpriv: string }): HDKey {\r\n    return HDKey.fromExtendedKey(json.xpriv);\r\n  }\r\n  public readonly versions: Versions;\r\n  public readonly depth: number = 0;\r\n  public readonly index: number = 0;\r\n  public readonly chainCode: Uint8Array | null = null;\r\n  public readonly parentFingerprint: number = 0;\r\n  private privKey?: bigint;\r\n  private privKeyBytes?: Uint8Array;\r\n  private pubKey?: Uint8Array;\r\n  private pubHash: Uint8Array | undefined;\r\n\r\n  constructor(opt: HDKeyOpt) {\r\n    if (!opt || typeof opt !== 'object') {\r\n      throw new Error('HDKey.constructor must not be called directly');\r\n    }\r\n    this.versions = opt.versions || BITCOIN_VERSIONS;\r\n    this.depth = opt.depth || 0;\r\n    this.chainCode = opt.chainCode || null;\r\n    this.index = opt.index || 0;\r\n    this.parentFingerprint = opt.parentFingerprint || 0;\r\n    if (!this.depth) {\r\n      if (this.parentFingerprint || this.index) {\r\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\r\n      }\r\n    }\r\n    if (opt.publicKey && opt.privateKey) {\r\n      throw new Error('HDKey: publicKey and privateKey at same time.');\r\n    }\r\n    if (opt.privateKey) {\r\n      if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\r\n        throw new Error('Invalid private key');\r\n      }\r\n      this.privKey =\r\n        typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\r\n      this.privKeyBytes = numberToBytes(this.privKey);\r\n      this.pubKey = secp.getPublicKey(opt.privateKey, true);\r\n    } else if (opt.publicKey) {\r\n      this.pubKey = Point.fromHex(opt.publicKey).toRawBytes(true); // force compressed point\r\n    } else {\r\n      throw new Error('HDKey: no public or private key provided');\r\n    }\r\n    this.pubHash = hash160(this.pubKey);\r\n  }\r\n\r\n  public derive(path: string): HDKey {\r\n    if (!/^[mM]'?/.test(path)) {\r\n      throw new Error('Path must start with \"m\" or \"M\"');\r\n    }\r\n    if (/^[mM]'?$/.test(path)) {\r\n      return this;\r\n    }\r\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\r\n    // tslint:disable-next-line\r\n    let child: HDKey = this;\r\n    for (const c of parts) {\r\n      const m = /^(\\d+)('?)$/.exec(c);\r\n      const m1 = m && m[1];\r\n      if (!m || m.length !== 3 || typeof m1 !== 'string')\r\n        throw new Error('invalid child index: ' + c);\r\n      let idx = +m1;\r\n      if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) {\r\n        throw new Error('Invalid index');\r\n      }\r\n      // hardened key\r\n      if (m[2] === \"'\") {\r\n        idx += HARDENED_OFFSET;\r\n      }\r\n      child = child.deriveChild(idx);\r\n    }\r\n    return child;\r\n  }\r\n\r\n  public deriveChild(index: number): HDKey {\r\n    if (!this.pubKey || !this.chainCode) {\r\n      throw new Error('No publicKey or chainCode set');\r\n    }\r\n    let data = toU32(index);\r\n    if (index >= HARDENED_OFFSET) {\r\n      // Hardened\r\n      const priv = this.privateKey;\r\n      if (!priv) {\r\n        throw new Error('Could not derive hardened child key');\r\n      }\r\n      // Hardened child: 0x00 || ser256(kpar) || ser32(index)\r\n      data = concatBytes(new Uint8Array([0]), priv, data);\r\n    } else {\r\n      // Normal child: serP(point(kpar)) || ser32(index)\r\n      data = concatBytes(this.pubKey, data);\r\n    }\r\n    const I = hmac(sha512, this.chainCode, data);\r\n    const childTweak = bytesToNumber(I.slice(0, 32));\r\n    const chainCode = I.slice(32);\r\n    if (!secp.utils.isValidPrivateKey(childTweak)) {\r\n      throw new Error('Tweak bigger than curve order');\r\n    }\r\n    const opt: HDKeyOpt = {\r\n      versions: this.versions,\r\n      chainCode,\r\n      depth: this.depth + 1,\r\n      parentFingerprint: this.fingerprint,\r\n      index,\r\n    };\r\n    try {\r\n      // Private parent key -> private child key\r\n      if (this.privateKey) {\r\n        const added = mod(this.privKey! + childTweak, secp.CURVE.n);\r\n        if (!secp.utils.isValidPrivateKey(added)) {\r\n          throw new Error('The tweak was out of range or the resulted private key is invalid');\r\n        }\r\n        opt.privateKey = added;\r\n      } else {\r\n        const added = Point.fromHex(this.pubKey).add(Point.fromPrivateKey(childTweak));\r\n        // Cryptographically impossible: hmac-sha512 preimage would need to be found\r\n        if (added.equals(Point.ZERO)) {\r\n          throw new Error('The tweak was equal to negative P, which made the result key invalid');\r\n        }\r\n        opt.publicKey = added.toRawBytes(true);\r\n      }\r\n      return new HDKey(opt);\r\n    } catch (err) {\r\n      return this.deriveChild(index + 1);\r\n    }\r\n  }\r\n\r\n  public sign(hash: Uint8Array): Uint8Array {\r\n    if (!this.privateKey) {\r\n      throw new Error('No privateKey set!');\r\n    }\r\n    abytes(hash, 32);\r\n    return secp.sign(hash, this.privKey!).toCompactRawBytes();\r\n  }\r\n\r\n  public verify(hash: Uint8Array, signature: Uint8Array): boolean {\r\n    abytes(hash, 32);\r\n    abytes(signature, 64);\r\n    if (!this.publicKey) {\r\n      throw new Error('No publicKey set!');\r\n    }\r\n    let sig;\r\n    try {\r\n      sig = secp.Signature.fromCompact(signature);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n    return secp.verify(sig, hash, this.publicKey);\r\n  }\r\n\r\n  public wipePrivateData(): this {\r\n    this.privKey = undefined;\r\n    if (this.privKeyBytes) {\r\n      this.privKeyBytes.fill(0);\r\n      this.privKeyBytes = undefined;\r\n    }\r\n    return this;\r\n  }\r\n  public toJSON(): { xpriv: string; xpub: string } {\r\n    return {\r\n      xpriv: this.privateExtendedKey,\r\n      xpub: this.publicExtendedKey,\r\n    };\r\n  }\r\n\r\n  private serialize(version: number, key: Uint8Array) {\r\n    if (!this.chainCode) {\r\n      throw new Error('No chainCode set');\r\n    }\r\n    abytes(key, 33);\r\n    // version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\r\n    return concatBytes(\r\n      toU32(version),\r\n      new Uint8Array([this.depth]),\r\n      toU32(this.parentFingerprint),\r\n      toU32(this.index),\r\n      this.chainCode,\r\n      key\r\n    );\r\n  }\r\n}\r\n", "/**\r\n * HMAC: RFC2104 message authentication code.\r\n * @module\r\n */\r\nimport { abytes, aexists, ahash, clean, Hash, toBytes, type CHash, type Input } from './utils.ts';\r\n\r\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\r\n  oHash: T;\r\n  iHash: T;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  private finished = false;\r\n  private destroyed = false;\r\n\r\n  constructor(hash: CHash, _key: Input) {\r\n    super();\r\n    ahash(hash);\r\n    const key = toBytes(_key);\r\n    this.iHash = hash.create() as T;\r\n    if (typeof this.iHash.update !== 'function')\r\n      throw new Error('Expected instance of class which extends utils.Hash');\r\n    this.blockLen = this.iHash.blockLen;\r\n    this.outputLen = this.iHash.outputLen;\r\n    const blockLen = this.blockLen;\r\n    const pad = new Uint8Array(blockLen);\r\n    // blockLen can be bigger than outputLen\r\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\r\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\r\n    this.iHash.update(pad);\r\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\r\n    this.oHash = hash.create() as T;\r\n    // Undo internal XOR && apply outer XOR\r\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\r\n    this.oHash.update(pad);\r\n    clean(pad);\r\n  }\r\n  update(buf: Input): this {\r\n    aexists(this);\r\n    this.iHash.update(buf);\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array): void {\r\n    aexists(this);\r\n    abytes(out, this.outputLen);\r\n    this.finished = true;\r\n    this.iHash.digestInto(out);\r\n    this.oHash.update(out);\r\n    this.oHash.digestInto(out);\r\n    this.destroy();\r\n  }\r\n  digest(): Uint8Array {\r\n    const out = new Uint8Array(this.oHash.outputLen);\r\n    this.digestInto(out);\r\n    return out;\r\n  }\r\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\r\n    // Create new instance without calling constructor since key already in state and we don't know it.\r\n    to ||= Object.create(Object.getPrototypeOf(this), {});\r\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\r\n    to = to as this;\r\n    to.finished = finished;\r\n    to.destroyed = destroyed;\r\n    to.blockLen = blockLen;\r\n    to.outputLen = outputLen;\r\n    to.oHash = oHash._cloneInto(to.oHash);\r\n    to.iHash = iHash._cloneInto(to.iHash);\r\n    return to;\r\n  }\r\n  clone(): HMAC<T> {\r\n    return this._cloneInto();\r\n  }\r\n  destroy(): void {\r\n    this.destroyed = true;\r\n    this.oHash.destroy();\r\n    this.iHash.destroy();\r\n  }\r\n}\r\n\r\n/**\r\n * HMAC: RFC2104 message authentication code.\r\n * @param hash - function that would be used e.g. sha256\r\n * @param key - message key\r\n * @param message - message data\r\n * @example\r\n * import { hmac } from '@noble/hashes/hmac';\r\n * import { sha256 } from '@noble/hashes/sha2';\r\n * const mac1 = hmac(sha256, 'key', 'message');\r\n */\r\nexport const hmac: {\r\n  (hash: CHash, key: Input, message: Input): Uint8Array;\r\n  create(hash: CHash, key: Input): HMAC<any>;\r\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\r\n  new HMAC<any>(hash, key).update(message).digest();\r\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\r\n", "import { secp256k1 } from '@noble/curves/secp256k1'\r\nimport * as Address from './Address.js'\r\nimport * as Bytes from './Bytes.js'\r\nimport type * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\nimport * as PublicKey from './PublicKey.js'\r\nimport type * as Signature from './Signature.js'\r\nimport * as Entropy from './internal/entropy.js'\r\nimport type { OneOf } from './internal/types.js'\r\n\r\n/** Re-export of noble/curves secp256k1 utilities. */\r\nexport const noble = secp256k1\r\n\r\n/**\r\n * Computes the secp256k1 ECDSA public key from a provided private key.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Secp256k1 } from 'ox'\r\n *\r\n * const publicKey = Secp256k1.getPublicKey({ privateKey: '0x...' })\r\n * ```\r\n *\r\n * @param options - The options to compute the public key.\r\n * @returns The computed public key.\r\n */\r\nexport function getPublicKey(\r\n  options: getPublicKey.Options,\r\n): PublicKey.PublicKey {\r\n  const { privateKey } = options\r\n  const point = secp256k1.ProjectivePoint.fromPrivateKey(\r\n    Hex.from(privateKey).slice(2),\r\n  )\r\n  return PublicKey.from(point)\r\n}\r\n\r\nexport declare namespace getPublicKey {\r\n  type Options = {\r\n    /**\r\n     * Private key to compute the public key from.\r\n     */\r\n    privateKey: Hex.Hex | Bytes.Bytes\r\n  }\r\n\r\n  type ErrorType =\r\n    | Hex.from.ErrorType\r\n    | PublicKey.from.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Generates a random ECDSA private key on the secp256k1 curve.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Secp256k1 } from 'ox'\r\n *\r\n * const privateKey = Secp256k1.randomPrivateKey()\r\n * ```\r\n *\r\n * @param options - The options to generate the private key.\r\n * @returns The generated private key.\r\n */\r\nexport function randomPrivateKey<as extends 'Hex' | 'Bytes' = 'Hex'>(\r\n  options: randomPrivateKey.Options<as> = {},\r\n): randomPrivateKey.ReturnType<as> {\r\n  const { as = 'Hex' } = options\r\n  const bytes = secp256k1.utils.randomPrivateKey()\r\n  if (as === 'Hex') return Hex.fromBytes(bytes) as never\r\n  return bytes as never\r\n}\r\n\r\nexport declare namespace randomPrivateKey {\r\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\r\n    /**\r\n     * Format of the returned private key.\r\n     * @default 'Hex'\r\n     */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes'> =\r\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\r\n    | (as extends 'Hex' ? Hex.Hex : never)\r\n\r\n  type ErrorType = Hex.fromBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Recovers the signing address from the signed payload and signature.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Secp256k1 } from 'ox'\r\n *\r\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\r\n *\r\n * const address = Secp256k1.recoverAddress({ // [!code focus]\r\n *   payload: '0xdeadbeef', // [!code focus]\r\n *   signature, // [!code focus]\r\n * }) // [!code focus]\r\n * ```\r\n *\r\n * @param options - The recovery options.\r\n * @returns The recovered address.\r\n */\r\nexport function recoverAddress(\r\n  options: recoverAddress.Options,\r\n): recoverAddress.ReturnType {\r\n  return Address.fromPublicKey(recoverPublicKey(options))\r\n}\r\n\r\nexport declare namespace recoverAddress {\r\n  type Options = {\r\n    /** Payload that was signed. */\r\n    payload: Hex.Hex | Bytes.Bytes\r\n    /** Signature of the payload. */\r\n    signature: Signature.Signature\r\n  }\r\n\r\n  type ReturnType = Address.Address\r\n\r\n  type ErrorType =\r\n    | Address.fromPublicKey.ErrorType\r\n    | recoverPublicKey.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Recovers the signing public key from the signed payload and signature.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Secp256k1 } from 'ox'\r\n *\r\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\r\n *\r\n * const publicKey = Secp256k1.recoverPublicKey({ // [!code focus]\r\n *   payload: '0xdeadbeef', // [!code focus]\r\n *   signature, // [!code focus]\r\n * }) // [!code focus]\r\n * ```\r\n *\r\n * @param options - The recovery options.\r\n * @returns The recovered public key.\r\n */\r\nexport function recoverPublicKey(\r\n  options: recoverPublicKey.Options,\r\n): PublicKey.PublicKey {\r\n  const { payload, signature } = options\r\n  const { r, s, yParity } = signature\r\n  const signature_ = new secp256k1.Signature(\r\n    BigInt(r),\r\n    BigInt(s),\r\n  ).addRecoveryBit(yParity)\r\n  const point = signature_.recoverPublicKey(Hex.from(payload).substring(2))\r\n  return PublicKey.from(point)\r\n}\r\n\r\nexport declare namespace recoverPublicKey {\r\n  type Options = {\r\n    /** Payload that was signed. */\r\n    payload: Hex.Hex | Bytes.Bytes\r\n    /** Signature of the payload. */\r\n    signature: Signature.Signature\r\n  }\r\n\r\n  type ErrorType =\r\n    | PublicKey.from.ErrorType\r\n    | Hex.from.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Signs the payload with the provided private key.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Secp256k1 } from 'ox'\r\n *\r\n * const signature = Secp256k1.sign({ // [!code focus]\r\n *   payload: '0xdeadbeef', // [!code focus]\r\n *   privateKey: '0x...' // [!code focus]\r\n * }) // [!code focus]\r\n * ```\r\n *\r\n * @param options - The signing options.\r\n * @returns The ECDSA {@link ox#Signature.Signature}.\r\n */\r\nexport function sign(options: sign.Options): Signature.Signature {\r\n  const {\r\n    extraEntropy = Entropy.extraEntropy,\r\n    hash,\r\n    payload,\r\n    privateKey,\r\n  } = options\r\n  const { r, s, recovery } = secp256k1.sign(\r\n    Bytes.from(payload),\r\n    Bytes.from(privateKey),\r\n    {\r\n      extraEntropy:\r\n        typeof extraEntropy === 'boolean'\r\n          ? extraEntropy\r\n          : Hex.from(extraEntropy).slice(2),\r\n      lowS: true,\r\n      ...(hash ? { prehash: true } : {}),\r\n    },\r\n  )\r\n  return {\r\n    r,\r\n    s,\r\n    yParity: recovery,\r\n  }\r\n}\r\n\r\nexport declare namespace sign {\r\n  type Options = {\r\n    /**\r\n     * Extra entropy to add to the signing process. Setting to `false` will disable it.\r\n     * @default true\r\n     */\r\n    extraEntropy?: boolean | Hex.Hex | Bytes.Bytes | undefined\r\n    /**\r\n     *  If set to `true`, the payload will be hashed (sha256) before being signed.\r\n     */\r\n    hash?: boolean | undefined\r\n    /**\r\n     * Payload to sign.\r\n     */\r\n    payload: Hex.Hex | Bytes.Bytes\r\n    /**\r\n     * ECDSA private key.\r\n     */\r\n    privateKey: Hex.Hex | Bytes.Bytes\r\n  }\r\n\r\n  type ErrorType = Bytes.from.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Verifies a payload was signed by the provided address.\r\n *\r\n * @example\r\n * ### Verify with Ethereum Address\r\n *\r\n * ```ts twoslash\r\n * import { Secp256k1 } from 'ox'\r\n *\r\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\r\n *\r\n * const verified = Secp256k1.verify({ // [!code focus]\r\n *   address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]\r\n *   payload: '0xdeadbeef', // [!code focus]\r\n *   signature, // [!code focus]\r\n * }) // [!code focus]\r\n * ```\r\n *\r\n * @example\r\n * ### Verify with Public Key\r\n *\r\n * ```ts twoslash\r\n * import { Secp256k1 } from 'ox'\r\n *\r\n * const privateKey = '0x...'\r\n * const publicKey = Secp256k1.getPublicKey({ privateKey })\r\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey })\r\n *\r\n * const verified = Secp256k1.verify({ // [!code focus]\r\n *   publicKey, // [!code focus]\r\n *   payload: '0xdeadbeef', // [!code focus]\r\n *   signature, // [!code focus]\r\n * }) // [!code focus]\r\n * ```\r\n *\r\n * @param options - The verification options.\r\n * @returns Whether the payload was signed by the provided address.\r\n */\r\nexport function verify(options: verify.Options): boolean {\r\n  const { address, hash, payload, publicKey, signature } = options\r\n  if (address)\r\n    return Address.isEqual(address, recoverAddress({ payload, signature }))\r\n  return secp256k1.verify(\r\n    signature,\r\n    Bytes.from(payload),\r\n    PublicKey.toBytes(publicKey),\r\n    ...(hash ? [{ prehash: true, lowS: true }] : []),\r\n  )\r\n}\r\n\r\nexport declare namespace verify {\r\n  type Options = {\r\n    /** If set to `true`, the payload will be hashed (sha256) before being verified. */\r\n    hash?: boolean | undefined\r\n    /** Payload that was signed. */\r\n    payload: Hex.Hex | Bytes.Bytes\r\n  } & OneOf<\r\n    | {\r\n        /** Address that signed the payload. */\r\n        address: Address.Address\r\n        /** Signature of the payload. */\r\n        signature: Signature.Signature\r\n      }\r\n    | {\r\n        /** Public key that signed the payload. */\r\n        publicKey: PublicKey.PublicKey<boolean>\r\n        /** Signature of the payload. */\r\n        signature: Signature.Signature<false>\r\n      }\r\n  >\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n", "/**\r\n * Audited & minimal JS implementation of\r\n * [BIP39 mnemonic phrases](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\r\n * @module\r\n * @example\r\n```js\r\nimport * as bip39 from '@scure/bip39';\r\nimport { wordlist } from '@scure/bip39/wordlists/english';\r\nconst mn = bip39.generateMnemonic(wordlist);\r\nconsole.log(mn);\r\nconst ent = bip39.mnemonicToEntropy(mn, wordlist)\r\nbip39.entropyToMnemonic(ent, wordlist);\r\nbip39.validateMnemonic(mn, wordlist);\r\nawait bip39.mnemonicToSeed(mn, 'password');\r\nbip39.mnemonicToSeedSync(mn, 'password');\r\n\r\n// Wordlists\r\nimport { wordlist as czech } from '@scure/bip39/wordlists/czech';\r\nimport { wordlist as english } from '@scure/bip39/wordlists/english';\r\nimport { wordlist as french } from '@scure/bip39/wordlists/french';\r\nimport { wordlist as italian } from '@scure/bip39/wordlists/italian';\r\nimport { wordlist as japanese } from '@scure/bip39/wordlists/japanese';\r\nimport { wordlist as korean } from '@scure/bip39/wordlists/korean';\r\nimport { wordlist as portuguese } from '@scure/bip39/wordlists/portuguese';\r\nimport { wordlist as simplifiedChinese } from '@scure/bip39/wordlists/simplified-chinese';\r\nimport { wordlist as spanish } from '@scure/bip39/wordlists/spanish';\r\nimport { wordlist as traditionalChinese } from '@scure/bip39/wordlists/traditional-chinese';\r\n```\r\n */\r\n/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\r\nimport { pbkdf2, pbkdf2Async } from '@noble/hashes/pbkdf2';\r\nimport { sha256, sha512 } from '@noble/hashes/sha2';\r\nimport { abytes, anumber, randomBytes } from '@noble/hashes/utils';\r\nimport { utils as baseUtils } from '@scure/base';\r\n// Japanese wordlist\r\nconst isJapanese = (wordlist) => wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093';\r\n// Normalization replaces equivalent sequences of characters\r\n// so that any two texts that are equivalent will be reduced\r\n// to the same sequence of code points, called the normal form of the original text.\r\n// https://tonsky.me/blog/unicode/#why-is-a----\r\nfunction nfkd(str) {\r\n    if (typeof str !== 'string')\r\n        throw new TypeError('invalid mnemonic type: ' + typeof str);\r\n    return str.normalize('NFKD');\r\n}\r\nfunction normalize(str) {\r\n    const norm = nfkd(str);\r\n    const words = norm.split(' ');\r\n    if (![12, 15, 18, 21, 24].includes(words.length))\r\n        throw new Error('Invalid mnemonic');\r\n    return { nfkd: norm, words };\r\n}\r\nfunction aentropy(ent) {\r\n    abytes(ent, 16, 20, 24, 28, 32);\r\n}\r\n/**\r\n * Generate x random words. Uses Cryptographically-Secure Random Number Generator.\r\n * @param wordlist imported wordlist for specific language\r\n * @param strength mnemonic strength 128-256 bits\r\n * @example\r\n * generateMnemonic(wordlist, 128)\r\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\r\n */\r\nexport function generateMnemonic(wordlist, strength = 128) {\r\n    anumber(strength);\r\n    if (strength % 32 !== 0 || strength > 256)\r\n        throw new TypeError('Invalid entropy');\r\n    return entropyToMnemonic(randomBytes(strength / 8), wordlist);\r\n}\r\nconst calcChecksum = (entropy) => {\r\n    // Checksum is ent.length/4 bits long\r\n    const bitsLeft = 8 - entropy.length / 4;\r\n    // Zero rightmost \"bitsLeft\" bits in byte\r\n    // For example: bitsLeft=4 val=10111101 -> 10110000\r\n    return new Uint8Array([(sha256(entropy)[0] >> bitsLeft) << bitsLeft]);\r\n};\r\nfunction getCoder(wordlist) {\r\n    if (!Array.isArray(wordlist) || wordlist.length !== 2048 || typeof wordlist[0] !== 'string')\r\n        throw new Error('Wordlist: expected array of 2048 strings');\r\n    wordlist.forEach((i) => {\r\n        if (typeof i !== 'string')\r\n            throw new Error('wordlist: non-string element: ' + i);\r\n    });\r\n    return baseUtils.chain(baseUtils.checksum(1, calcChecksum), baseUtils.radix2(11, true), baseUtils.alphabet(wordlist));\r\n}\r\n/**\r\n * Reversible: Converts mnemonic string to raw entropy in form of byte array.\r\n * @param mnemonic 12-24 words\r\n * @param wordlist imported wordlist for specific language\r\n * @example\r\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\r\n * mnemonicToEntropy(mnem, wordlist)\r\n * // Produces\r\n * new Uint8Array([\r\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\r\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\r\n * ])\r\n */\r\nexport function mnemonicToEntropy(mnemonic, wordlist) {\r\n    const { words } = normalize(mnemonic);\r\n    const entropy = getCoder(wordlist).decode(words);\r\n    aentropy(entropy);\r\n    return entropy;\r\n}\r\n/**\r\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\r\n * @param entropy byte array\r\n * @param wordlist imported wordlist for specific language\r\n * @returns 12-24 words\r\n * @example\r\n * const ent = new Uint8Array([\r\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\r\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\r\n * ]);\r\n * entropyToMnemonic(ent, wordlist);\r\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\r\n */\r\nexport function entropyToMnemonic(entropy, wordlist) {\r\n    aentropy(entropy);\r\n    const words = getCoder(wordlist).encode(entropy);\r\n    return words.join(isJapanese(wordlist) ? '\\u3000' : ' ');\r\n}\r\n/**\r\n * Validates mnemonic for being 12-24 words contained in `wordlist`.\r\n */\r\nexport function validateMnemonic(mnemonic, wordlist) {\r\n    try {\r\n        mnemonicToEntropy(mnemonic, wordlist);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nconst psalt = (passphrase) => nfkd('mnemonic' + passphrase);\r\n/**\r\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\r\n * @param mnemonic 12-24 words\r\n * @param passphrase string that will additionally protect the key\r\n * @returns 64 bytes of key data\r\n * @example\r\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\r\n * await mnemonicToSeed(mnem, 'password');\r\n * // new Uint8Array([...64 bytes])\r\n */\r\nexport function mnemonicToSeed(mnemonic, passphrase = '') {\r\n    return pbkdf2Async(sha512, normalize(mnemonic).nfkd, psalt(passphrase), { c: 2048, dkLen: 64 });\r\n}\r\n/**\r\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\r\n * @param mnemonic 12-24 words\r\n * @param passphrase string that will additionally protect the key\r\n * @returns 64 bytes of key data\r\n * @example\r\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\r\n * mnemonicToSeedSync(mnem, 'password');\r\n * // new Uint8Array([...64 bytes])\r\n */\r\nexport function mnemonicToSeedSync(mnemonic, passphrase = '') {\r\n    return pbkdf2(sha512, normalize(mnemonic).nfkd, psalt(passphrase), { c: 2048, dkLen: 64 });\r\n}\r\n", "export const wordlist = `abdikace\r\nabeceda\r\nadresa\r\nagrese\r\nakce\r\naktovka\r\nalej\r\nalkohol\r\namputace\r\nananas\r\nandulka\r\nanekdota\r\nanketa\r\nantika\r\nanulovat\r\narcha\r\narogance\r\nasfalt\r\nasistent\r\naspirace\r\nastma\r\nastronom\r\natlas\r\natletika\r\natol\r\nautobus\r\nazyl\r\nbabka\r\nbachor\r\nbacil\r\nbaculka\r\nbadatel\r\nbageta\r\nbagr\r\nbahno\r\nbakterie\r\nbalada\r\nbaletka\r\nbalkon\r\nbalonek\r\nbalvan\r\nbalza\r\nbambus\r\nbankomat\r\nbarbar\r\nbaret\r\nbarman\r\nbaroko\r\nbarva\r\nbaterka\r\nbatoh\r\nbavlna\r\nbazalka\r\nbazilika\r\nbazuka\r\nbedna\r\nberan\r\nbeseda\r\nbestie\r\nbeton\r\nbezinka\r\nbezmoc\r\nbeztak\r\nbicykl\r\nbidlo\r\nbiftek\r\nbikiny\r\nbilance\r\nbiograf\r\nbiolog\r\nbitva\r\nbizon\r\nblahobyt\r\nblatouch\r\nblecha\r\nbledule\r\nblesk\r\nblikat\r\nblizna\r\nblokovat\r\nbloudit\r\nblud\r\nbobek\r\nbobr\r\nbodlina\r\nbodnout\r\nbohatost\r\nbojkot\r\nbojovat\r\nbokorys\r\nbolest\r\nborec\r\nborovice\r\nbota\r\nboubel\r\nbouchat\r\nbouda\r\nboule\r\nbourat\r\nboxer\r\nbradavka\r\nbrambora\r\nbranka\r\nbratr\r\nbrepta\r\nbriketa\r\nbrko\r\nbrloh\r\nbronz\r\nbroskev\r\nbrunetka\r\nbrusinka\r\nbrzda\r\nbrzy\r\nbublina\r\nbubnovat\r\nbuchta\r\nbuditel\r\nbudka\r\nbudova\r\nbufet\r\nbujarost\r\nbukvice\r\nbuldok\r\nbulva\r\nbunda\r\nbunkr\r\nburza\r\nbutik\r\nbuvol\r\nbuzola\r\nbydlet\r\nbylina\r\nbytovka\r\nbzukot\r\ncapart\r\ncarevna\r\ncedr\r\ncedule\r\ncejch\r\ncejn\r\ncela\r\nceler\r\ncelkem\r\ncelnice\r\ncenina\r\ncennost\r\ncenovka\r\ncentrum\r\ncenzor\r\ncestopis\r\ncetka\r\nchalupa\r\nchapadlo\r\ncharita\r\nchata\r\nchechtat\r\nchemie\r\nchichot\r\nchirurg\r\nchlad\r\nchleba\r\nchlubit\r\nchmel\r\nchmura\r\nchobot\r\nchochol\r\nchodba\r\ncholera\r\nchomout\r\nchopit\r\nchoroba\r\nchov\r\nchrapot\r\nchrlit\r\nchrt\r\nchrup\r\nchtivost\r\nchudina\r\nchutnat\r\nchvat\r\nchvilka\r\nchvost\r\nchyba\r\nchystat\r\nchytit\r\ncibule\r\ncigareta\r\ncihelna\r\ncihla\r\ncinkot\r\ncirkus\r\ncisterna\r\ncitace\r\ncitrus\r\ncizinec\r\ncizost\r\nclona\r\ncokoliv\r\ncouvat\r\nctitel\r\nctnost\r\ncudnost\r\ncuketa\r\ncukr\r\ncupot\r\ncvaknout\r\ncval\r\ncvik\r\ncvrkot\r\ncyklista\r\ndaleko\r\ndareba\r\ndatel\r\ndatum\r\ndcera\r\ndebata\r\ndechovka\r\ndecibel\r\ndeficit\r\ndeflace\r\ndekl\r\ndekret\r\ndemokrat\r\ndeprese\r\nderby\r\ndeska\r\ndetektiv\r\ndikobraz\r\ndiktovat\r\ndioda\r\ndiplom\r\ndisk\r\ndisplej\r\ndivadlo\r\ndivoch\r\ndlaha\r\ndlouho\r\ndluhopis\r\ndnes\r\ndobro\r\ndobytek\r\ndocent\r\ndochutit\r\ndodnes\r\ndohled\r\ndohoda\r\ndohra\r\ndojem\r\ndojnice\r\ndoklad\r\ndokola\r\ndoktor\r\ndokument\r\ndolar\r\ndoleva\r\ndolina\r\ndoma\r\ndominant\r\ndomluvit\r\ndomov\r\ndonutit\r\ndopad\r\ndopis\r\ndoplnit\r\ndoposud\r\ndoprovod\r\ndopustit\r\ndorazit\r\ndorost\r\ndort\r\ndosah\r\ndoslov\r\ndostatek\r\ndosud\r\ndosyta\r\ndotaz\r\ndotek\r\ndotknout\r\ndoufat\r\ndoutnat\r\ndovozce\r\ndozadu\r\ndoznat\r\ndozorce\r\ndrahota\r\ndrak\r\ndramatik\r\ndravec\r\ndraze\r\ndrdol\r\ndrobnost\r\ndrogerie\r\ndrozd\r\ndrsnost\r\ndrtit\r\ndrzost\r\nduben\r\nduchovno\r\ndudek\r\nduha\r\nduhovka\r\ndusit\r\ndusno\r\ndutost\r\ndvojice\r\ndvorec\r\ndynamit\r\nekolog\r\nekonomie\r\nelektron\r\nelipsa\r\nemail\r\nemise\r\nemoce\r\nempatie\r\nepizoda\r\nepocha\r\nepopej\r\nepos\r\nesej\r\nesence\r\neskorta\r\neskymo\r\netiketa\r\neuforie\r\nevoluce\r\nexekuce\r\nexkurze\r\nexpedice\r\nexploze\r\nexport\r\nextrakt\r\nfacka\r\nfajfka\r\nfakulta\r\nfanatik\r\nfantazie\r\nfarmacie\r\nfavorit\r\nfazole\r\nfederace\r\nfejeton\r\nfenka\r\nfialka\r\nfigurant\r\nfilozof\r\nfiltr\r\nfinance\r\nfinta\r\nfixace\r\nfjord\r\nflanel\r\nflirt\r\nflotila\r\nfond\r\nfosfor\r\nfotbal\r\nfotka\r\nfoton\r\nfrakce\r\nfreska\r\nfronta\r\nfukar\r\nfunkce\r\nfyzika\r\ngaleje\r\ngarant\r\ngenetika\r\ngeolog\r\ngilotina\r\nglazura\r\nglejt\r\ngolem\r\ngolfista\r\ngotika\r\ngraf\r\ngramofon\r\ngranule\r\ngrep\r\ngril\r\ngrog\r\ngroteska\r\nguma\r\nhadice\r\nhadr\r\nhala\r\nhalenka\r\nhanba\r\nhanopis\r\nharfa\r\nharpuna\r\nhavran\r\nhebkost\r\nhejkal\r\nhejno\r\nhejtman\r\nhektar\r\nhelma\r\nhematom\r\nherec\r\nherna\r\nheslo\r\nhezky\r\nhistorik\r\nhladovka\r\nhlasivky\r\nhlava\r\nhledat\r\nhlen\r\nhlodavec\r\nhloh\r\nhloupost\r\nhltat\r\nhlubina\r\nhluchota\r\nhmat\r\nhmota\r\nhmyz\r\nhnis\r\nhnojivo\r\nhnout\r\nhoblina\r\nhoboj\r\nhoch\r\nhodiny\r\nhodlat\r\nhodnota\r\nhodovat\r\nhojnost\r\nhokej\r\nholinka\r\nholka\r\nholub\r\nhomole\r\nhonitba\r\nhonorace\r\nhoral\r\nhorda\r\nhorizont\r\nhorko\r\nhorlivec\r\nhormon\r\nhornina\r\nhoroskop\r\nhorstvo\r\nhospoda\r\nhostina\r\nhotovost\r\nhouba\r\nhouf\r\nhoupat\r\nhouska\r\nhovor\r\nhradba\r\nhranice\r\nhravost\r\nhrazda\r\nhrbolek\r\nhrdina\r\nhrdlo\r\nhrdost\r\nhrnek\r\nhrobka\r\nhromada\r\nhrot\r\nhrouda\r\nhrozen\r\nhrstka\r\nhrubost\r\nhryzat\r\nhubenost\r\nhubnout\r\nhudba\r\nhukot\r\nhumr\r\nhusita\r\nhustota\r\nhvozd\r\nhybnost\r\nhydrant\r\nhygiena\r\nhymna\r\nhysterik\r\nidylka\r\nihned\r\nikona\r\niluze\r\nimunita\r\ninfekce\r\ninflace\r\ninkaso\r\ninovace\r\ninspekce\r\ninternet\r\ninvalida\r\ninvestor\r\ninzerce\r\nironie\r\njablko\r\njachta\r\njahoda\r\njakmile\r\njakost\r\njalovec\r\njantar\r\njarmark\r\njaro\r\njasan\r\njasno\r\njatka\r\njavor\r\njazyk\r\njedinec\r\njedle\r\njednatel\r\njehlan\r\njekot\r\njelen\r\njelito\r\njemnost\r\njenom\r\njepice\r\njeseter\r\njevit\r\njezdec\r\njezero\r\njinak\r\njindy\r\njinoch\r\njiskra\r\njistota\r\njitrnice\r\njizva\r\njmenovat\r\njogurt\r\njurta\r\nkabaret\r\nkabel\r\nkabinet\r\nkachna\r\nkadet\r\nkadidlo\r\nkahan\r\nkajak\r\nkajuta\r\nkakao\r\nkaktus\r\nkalamita\r\nkalhoty\r\nkalibr\r\nkalnost\r\nkamera\r\nkamkoliv\r\nkamna\r\nkanibal\r\nkanoe\r\nkantor\r\nkapalina\r\nkapela\r\nkapitola\r\nkapka\r\nkaple\r\nkapota\r\nkapr\r\nkapusta\r\nkapybara\r\nkaramel\r\nkarotka\r\nkarton\r\nkasa\r\nkatalog\r\nkatedra\r\nkauce\r\nkauza\r\nkavalec\r\nkazajka\r\nkazeta\r\nkazivost\r\nkdekoliv\r\nkdesi\r\nkedluben\r\nkemp\r\nkeramika\r\nkino\r\nklacek\r\nkladivo\r\nklam\r\nklapot\r\nklasika\r\nklaun\r\nklec\r\nklenba\r\nklepat\r\nklesnout\r\nklid\r\nklima\r\nklisna\r\nklobouk\r\nklokan\r\nklopa\r\nkloub\r\nklubovna\r\nklusat\r\nkluzkost\r\nkmen\r\nkmitat\r\nkmotr\r\nkniha\r\nknot\r\nkoalice\r\nkoberec\r\nkobka\r\nkobliha\r\nkobyla\r\nkocour\r\nkohout\r\nkojenec\r\nkokos\r\nkoktejl\r\nkolaps\r\nkoleda\r\nkolize\r\nkolo\r\nkomando\r\nkometa\r\nkomik\r\nkomnata\r\nkomora\r\nkompas\r\nkomunita\r\nkonat\r\nkoncept\r\nkondice\r\nkonec\r\nkonfese\r\nkongres\r\nkonina\r\nkonkurs\r\nkontakt\r\nkonzerva\r\nkopanec\r\nkopie\r\nkopnout\r\nkoprovka\r\nkorbel\r\nkorektor\r\nkormidlo\r\nkoroptev\r\nkorpus\r\nkoruna\r\nkoryto\r\nkorzet\r\nkosatec\r\nkostka\r\nkotel\r\nkotleta\r\nkotoul\r\nkoukat\r\nkoupelna\r\nkousek\r\nkouzlo\r\nkovboj\r\nkoza\r\nkozoroh\r\nkrabice\r\nkrach\r\nkrajina\r\nkralovat\r\nkrasopis\r\nkravata\r\nkredit\r\nkrejcar\r\nkresba\r\nkreveta\r\nkriket\r\nkritik\r\nkrize\r\nkrkavec\r\nkrmelec\r\nkrmivo\r\nkrocan\r\nkrok\r\nkronika\r\nkropit\r\nkroupa\r\nkrovka\r\nkrtek\r\nkruhadlo\r\nkrupice\r\nkrutost\r\nkrvinka\r\nkrychle\r\nkrypta\r\nkrystal\r\nkryt\r\nkudlanka\r\nkufr\r\nkujnost\r\nkukla\r\nkulajda\r\nkulich\r\nkulka\r\nkulomet\r\nkultura\r\nkuna\r\nkupodivu\r\nkurt\r\nkurzor\r\nkutil\r\nkvalita\r\nkvasinka\r\nkvestor\r\nkynolog\r\nkyselina\r\nkytara\r\nkytice\r\nkytka\r\nkytovec\r\nkyvadlo\r\nlabrador\r\nlachtan\r\nladnost\r\nlaik\r\nlakomec\r\nlamela\r\nlampa\r\nlanovka\r\nlasice\r\nlaso\r\nlastura\r\nlatinka\r\nlavina\r\nlebka\r\nleckdy\r\nleden\r\nlednice\r\nledovka\r\nledvina\r\nlegenda\r\nlegie\r\nlegrace\r\nlehce\r\nlehkost\r\nlehnout\r\nlektvar\r\nlenochod\r\nlentilka\r\nlepenka\r\nlepidlo\r\nletadlo\r\nletec\r\nletmo\r\nletokruh\r\nlevhart\r\nlevitace\r\nlevobok\r\nlibra\r\nlichotka\r\nlidojed\r\nlidskost\r\nlihovina\r\nlijavec\r\nlilek\r\nlimetka\r\nlinie\r\nlinka\r\nlinoleum\r\nlistopad\r\nlitina\r\nlitovat\r\nlobista\r\nlodivod\r\nlogika\r\nlogoped\r\nlokalita\r\nloket\r\nlomcovat\r\nlopata\r\nlopuch\r\nlord\r\nlosos\r\nlotr\r\nloudal\r\nlouh\r\nlouka\r\nlouskat\r\nlovec\r\nlstivost\r\nlucerna\r\nlucifer\r\nlump\r\nlusk\r\nlustrace\r\nlvice\r\nlyra\r\nlyrika\r\nlysina\r\nmadam\r\nmadlo\r\nmagistr\r\nmahagon\r\nmajetek\r\nmajitel\r\nmajorita\r\nmakak\r\nmakovice\r\nmakrela\r\nmalba\r\nmalina\r\nmalovat\r\nmalvice\r\nmaminka\r\nmandle\r\nmanko\r\nmarnost\r\nmasakr\r\nmaskot\r\nmasopust\r\nmatice\r\nmatrika\r\nmaturita\r\nmazanec\r\nmazivo\r\nmazlit\r\nmazurka\r\nmdloba\r\nmechanik\r\nmeditace\r\nmedovina\r\nmelasa\r\nmeloun\r\nmentolka\r\nmetla\r\nmetoda\r\nmetr\r\nmezera\r\nmigrace\r\nmihnout\r\nmihule\r\nmikina\r\nmikrofon\r\nmilenec\r\nmilimetr\r\nmilost\r\nmimika\r\nmincovna\r\nminibar\r\nminomet\r\nminulost\r\nmiska\r\nmistr\r\nmixovat\r\nmladost\r\nmlha\r\nmlhovina\r\nmlok\r\nmlsat\r\nmluvit\r\nmnich\r\nmnohem\r\nmobil\r\nmocnost\r\nmodelka\r\nmodlitba\r\nmohyla\r\nmokro\r\nmolekula\r\nmomentka\r\nmonarcha\r\nmonokl\r\nmonstrum\r\nmontovat\r\nmonzun\r\nmosaz\r\nmoskyt\r\nmost\r\nmotivace\r\nmotorka\r\nmotyka\r\nmoucha\r\nmoudrost\r\nmozaika\r\nmozek\r\nmozol\r\nmramor\r\nmravenec\r\nmrkev\r\nmrtvola\r\nmrzet\r\nmrzutost\r\nmstitel\r\nmudrc\r\nmuflon\r\nmulat\r\nmumie\r\nmunice\r\nmuset\r\nmutace\r\nmuzeum\r\nmuzikant\r\nmyslivec\r\nmzda\r\nnabourat\r\nnachytat\r\nnadace\r\nnadbytek\r\nnadhoz\r\nnadobro\r\nnadpis\r\nnahlas\r\nnahnat\r\nnahodile\r\nnahradit\r\nnaivita\r\nnajednou\r\nnajisto\r\nnajmout\r\nnaklonit\r\nnakonec\r\nnakrmit\r\nnalevo\r\nnamazat\r\nnamluvit\r\nnanometr\r\nnaoko\r\nnaopak\r\nnaostro\r\nnapadat\r\nnapevno\r\nnaplnit\r\nnapnout\r\nnaposled\r\nnaprosto\r\nnarodit\r\nnaruby\r\nnarychlo\r\nnasadit\r\nnasekat\r\nnaslepo\r\nnastat\r\nnatolik\r\nnavenek\r\nnavrch\r\nnavzdory\r\nnazvat\r\nnebe\r\nnechat\r\nnecky\r\nnedaleko\r\nnedbat\r\nneduh\r\nnegace\r\nnehet\r\nnehoda\r\nnejen\r\nnejprve\r\nneklid\r\nnelibost\r\nnemilost\r\nnemoc\r\nneochota\r\nneonka\r\nnepokoj\r\nnerost\r\nnerv\r\nnesmysl\r\nnesoulad\r\nnetvor\r\nneuron\r\nnevina\r\nnezvykle\r\nnicota\r\nnijak\r\nnikam\r\nnikdy\r\nnikl\r\nnikterak\r\nnitro\r\nnocleh\r\nnohavice\r\nnominace\r\nnora\r\nnorek\r\nnositel\r\nnosnost\r\nnouze\r\nnoviny\r\nnovota\r\nnozdra\r\nnuda\r\nnudle\r\nnuget\r\nnutit\r\nnutnost\r\nnutrie\r\nnymfa\r\nobal\r\nobarvit\r\nobava\r\nobdiv\r\nobec\r\nobehnat\r\nobejmout\r\nobezita\r\nobhajoba\r\nobilnice\r\nobjasnit\r\nobjekt\r\nobklopit\r\noblast\r\noblek\r\nobliba\r\nobloha\r\nobluda\r\nobnos\r\nobohatit\r\nobojek\r\nobout\r\nobrazec\r\nobrna\r\nobruba\r\nobrys\r\nobsah\r\nobsluha\r\nobstarat\r\nobuv\r\nobvaz\r\nobvinit\r\nobvod\r\nobvykle\r\nobyvatel\r\nobzor\r\nocas\r\nocel\r\nocenit\r\nochladit\r\nochota\r\nochrana\r\nocitnout\r\nodboj\r\nodbyt\r\nodchod\r\nodcizit\r\nodebrat\r\nodeslat\r\nodevzdat\r\nodezva\r\nodhadce\r\nodhodit\r\nodjet\r\nodjinud\r\nodkaz\r\nodkoupit\r\nodliv\r\nodluka\r\nodmlka\r\nodolnost\r\nodpad\r\nodpis\r\nodplout\r\nodpor\r\nodpustit\r\nodpykat\r\nodrazka\r\nodsoudit\r\nodstup\r\nodsun\r\nodtok\r\nodtud\r\nodvaha\r\nodveta\r\nodvolat\r\nodvracet\r\nodznak\r\nofina\r\nofsajd\r\nohlas\r\nohnisko\r\nohrada\r\nohrozit\r\nohryzek\r\nokap\r\nokenice\r\noklika\r\nokno\r\nokouzlit\r\nokovy\r\nokrasa\r\nokres\r\nokrsek\r\nokruh\r\nokupant\r\nokurka\r\nokusit\r\nolejnina\r\nolizovat\r\nomak\r\nomeleta\r\nomezit\r\nomladina\r\nomlouvat\r\nomluva\r\nomyl\r\nonehdy\r\nopakovat\r\nopasek\r\noperace\r\nopice\r\nopilost\r\nopisovat\r\nopora\r\nopozice\r\nopravdu\r\noproti\r\norbital\r\norchestr\r\norgie\r\norlice\r\norloj\r\nortel\r\nosada\r\noschnout\r\nosika\r\nosivo\r\noslava\r\noslepit\r\noslnit\r\noslovit\r\nosnova\r\nosoba\r\nosolit\r\nospalec\r\nosten\r\nostraha\r\nostuda\r\nostych\r\nosvojit\r\noteplit\r\notisk\r\notop\r\notrhat\r\notrlost\r\notrok\r\notruby\r\notvor\r\novanout\r\novar\r\noves\r\novlivnit\r\novoce\r\noxid\r\nozdoba\r\npachatel\r\npacient\r\npadouch\r\npahorek\r\npakt\r\npalanda\r\npalec\r\npalivo\r\npaluba\r\npamflet\r\npamlsek\r\npanenka\r\npanika\r\npanna\r\npanovat\r\npanstvo\r\npantofle\r\npaprika\r\nparketa\r\nparodie\r\nparta\r\nparuka\r\nparyba\r\npaseka\r\npasivita\r\npastelka\r\npatent\r\npatrona\r\npavouk\r\npazneht\r\npazourek\r\npecka\r\npedagog\r\npejsek\r\npeklo\r\npeloton\r\npenalta\r\npendrek\r\npenze\r\nperiskop\r\npero\r\npestrost\r\npetarda\r\npetice\r\npetrolej\r\npevnina\r\npexeso\r\npianista\r\npiha\r\npijavice\r\npikle\r\npiknik\r\npilina\r\npilnost\r\npilulka\r\npinzeta\r\npipeta\r\npisatel\r\npistole\r\npitevna\r\npivnice\r\npivovar\r\nplacenta\r\nplakat\r\nplamen\r\nplaneta\r\nplastika\r\nplatit\r\nplavidlo\r\nplaz\r\nplech\r\nplemeno\r\nplenta\r\nples\r\npletivo\r\nplevel\r\nplivat\r\nplnit\r\nplno\r\nplocha\r\nplodina\r\nplomba\r\nplout\r\npluk\r\nplyn\r\npobavit\r\npobyt\r\npochod\r\npocit\r\npoctivec\r\npodat\r\npodcenit\r\npodepsat\r\npodhled\r\npodivit\r\npodklad\r\npodmanit\r\npodnik\r\npodoba\r\npodpora\r\npodraz\r\npodstata\r\npodvod\r\npodzim\r\npoezie\r\npohanka\r\npohnutka\r\npohovor\r\npohroma\r\npohyb\r\npointa\r\npojistka\r\npojmout\r\npokazit\r\npokles\r\npokoj\r\npokrok\r\npokuta\r\npokyn\r\npoledne\r\npolibek\r\npolknout\r\npoloha\r\npolynom\r\npomalu\r\npominout\r\npomlka\r\npomoc\r\npomsta\r\npomyslet\r\nponechat\r\nponorka\r\nponurost\r\npopadat\r\npopel\r\npopisek\r\npoplach\r\npoprosit\r\npopsat\r\npopud\r\nporadce\r\nporce\r\nporod\r\nporucha\r\nporyv\r\nposadit\r\nposed\r\nposila\r\nposkok\r\nposlanec\r\nposoudit\r\npospolu\r\npostava\r\nposudek\r\nposyp\r\npotah\r\npotkan\r\npotlesk\r\npotomek\r\npotrava\r\npotupa\r\npotvora\r\npoukaz\r\npouto\r\npouzdro\r\npovaha\r\npovidla\r\npovlak\r\npovoz\r\npovrch\r\npovstat\r\npovyk\r\npovzdech\r\npozdrav\r\npozemek\r\npoznatek\r\npozor\r\npozvat\r\npracovat\r\nprahory\r\npraktika\r\nprales\r\npraotec\r\npraporek\r\nprase\r\npravda\r\nprincip\r\nprkno\r\nprobudit\r\nprocento\r\nprodej\r\nprofese\r\nprohra\r\nprojekt\r\nprolomit\r\npromile\r\npronikat\r\npropad\r\nprorok\r\nprosba\r\nproton\r\nproutek\r\nprovaz\r\nprskavka\r\nprsten\r\nprudkost\r\nprut\r\nprvek\r\nprvohory\r\npsanec\r\npsovod\r\npstruh\r\nptactvo\r\npuberta\r\npuch\r\npudl\r\npukavec\r\npuklina\r\npukrle\r\npult\r\npumpa\r\npunc\r\npupen\r\npusa\r\npusinka\r\npustina\r\nputovat\r\nputyka\r\npyramida\r\npysk\r\npytel\r\nracek\r\nrachot\r\nradiace\r\nradnice\r\nradon\r\nraft\r\nragby\r\nraketa\r\nrakovina\r\nrameno\r\nrampouch\r\nrande\r\nrarach\r\nrarita\r\nrasovna\r\nrastr\r\nratolest\r\nrazance\r\nrazidlo\r\nreagovat\r\nreakce\r\nrecept\r\nredaktor\r\nreferent\r\nreflex\r\nrejnok\r\nreklama\r\nrekord\r\nrekrut\r\nrektor\r\nreputace\r\nrevize\r\nrevma\r\nrevolver\r\nrezerva\r\nriskovat\r\nriziko\r\nrobotika\r\nrodokmen\r\nrohovka\r\nrokle\r\nrokoko\r\nromaneto\r\nropovod\r\nropucha\r\nrorejs\r\nrosol\r\nrostlina\r\nrotmistr\r\nrotoped\r\nrotunda\r\nroubenka\r\nroucho\r\nroup\r\nroura\r\nrovina\r\nrovnice\r\nrozbor\r\nrozchod\r\nrozdat\r\nrozeznat\r\nrozhodce\r\nrozinka\r\nrozjezd\r\nrozkaz\r\nrozloha\r\nrozmar\r\nrozpad\r\nrozruch\r\nrozsah\r\nroztok\r\nrozum\r\nrozvod\r\nrubrika\r\nruchadlo\r\nrukavice\r\nrukopis\r\nryba\r\nrybolov\r\nrychlost\r\nrydlo\r\nrypadlo\r\nrytina\r\nryzost\r\nsadista\r\nsahat\r\nsako\r\nsamec\r\nsamizdat\r\nsamota\r\nsanitka\r\nsardinka\r\nsasanka\r\nsatelit\r\nsazba\r\nsazenice\r\nsbor\r\nschovat\r\nsebranka\r\nsecese\r\nsedadlo\r\nsediment\r\nsedlo\r\nsehnat\r\nsejmout\r\nsekera\r\nsekta\r\nsekunda\r\nsekvoje\r\nsemeno\r\nseno\r\nservis\r\nsesadit\r\nseshora\r\nseskok\r\nseslat\r\nsestra\r\nsesuv\r\nsesypat\r\nsetba\r\nsetina\r\nsetkat\r\nsetnout\r\nsetrvat\r\nsever\r\nseznam\r\nshoda\r\nshrnout\r\nsifon\r\nsilnice\r\nsirka\r\nsirotek\r\nsirup\r\nsituace\r\nskafandr\r\nskalisko\r\nskanzen\r\nskaut\r\nskeptik\r\nskica\r\nskladba\r\nsklenice\r\nsklo\r\nskluz\r\nskoba\r\nskokan\r\nskoro\r\nskripta\r\nskrz\r\nskupina\r\nskvost\r\nskvrna\r\nslabika\r\nsladidlo\r\nslanina\r\nslast\r\nslavnost\r\nsledovat\r\nslepec\r\nsleva\r\nslezina\r\nslib\r\nslina\r\nsliznice\r\nslon\r\nsloupek\r\nslovo\r\nsluch\r\nsluha\r\nslunce\r\nslupka\r\nslza\r\nsmaragd\r\nsmetana\r\nsmilstvo\r\nsmlouva\r\nsmog\r\nsmrad\r\nsmrk\r\nsmrtka\r\nsmutek\r\nsmysl\r\nsnad\r\nsnaha\r\nsnob\r\nsobota\r\nsocha\r\nsodovka\r\nsokol\r\nsopka\r\nsotva\r\nsouboj\r\nsoucit\r\nsoudce\r\nsouhlas\r\nsoulad\r\nsoumrak\r\nsouprava\r\nsoused\r\nsoutok\r\nsouviset\r\nspalovna\r\nspasitel\r\nspis\r\nsplav\r\nspodek\r\nspojenec\r\nspolu\r\nsponzor\r\nspornost\r\nspousta\r\nsprcha\r\nspustit\r\nsranda\r\nsraz\r\nsrdce\r\nsrna\r\nsrnec\r\nsrovnat\r\nsrpen\r\nsrst\r\nsrub\r\nstanice\r\nstarosta\r\nstatika\r\nstavba\r\nstehno\r\nstezka\r\nstodola\r\nstolek\r\nstopa\r\nstorno\r\nstoupat\r\nstrach\r\nstres\r\nstrhnout\r\nstrom\r\nstruna\r\nstudna\r\nstupnice\r\nstvol\r\nstyk\r\nsubjekt\r\nsubtropy\r\nsuchar\r\nsudost\r\nsukno\r\nsundat\r\nsunout\r\nsurikata\r\nsurovina\r\nsvah\r\nsvalstvo\r\nsvetr\r\nsvatba\r\nsvazek\r\nsvisle\r\nsvitek\r\nsvoboda\r\nsvodidlo\r\nsvorka\r\nsvrab\r\nsykavka\r\nsykot\r\nsynek\r\nsynovec\r\nsypat\r\nsypkost\r\nsyrovost\r\nsysel\r\nsytost\r\ntabletka\r\ntabule\r\ntahoun\r\ntajemno\r\ntajfun\r\ntajga\r\ntajit\r\ntajnost\r\ntaktika\r\ntamhle\r\ntampon\r\ntancovat\r\ntanec\r\ntanker\r\ntapeta\r\ntavenina\r\ntazatel\r\ntechnika\r\ntehdy\r\ntekutina\r\ntelefon\r\ntemnota\r\ntendence\r\ntenista\r\ntenor\r\nteplota\r\ntepna\r\nteprve\r\nterapie\r\ntermoska\r\ntextil\r\nticho\r\ntiskopis\r\ntitulek\r\ntkadlec\r\ntkanina\r\ntlapka\r\ntleskat\r\ntlukot\r\ntlupa\r\ntmel\r\ntoaleta\r\ntopinka\r\ntopol\r\ntorzo\r\ntouha\r\ntoulec\r\ntradice\r\ntraktor\r\ntramp\r\ntrasa\r\ntraverza\r\ntrefit\r\ntrest\r\ntrezor\r\ntrhavina\r\ntrhlina\r\ntrochu\r\ntrojice\r\ntroska\r\ntrouba\r\ntrpce\r\ntrpitel\r\ntrpkost\r\ntrubec\r\ntruchlit\r\ntruhlice\r\ntrus\r\ntrvat\r\ntudy\r\ntuhnout\r\ntuhost\r\ntundra\r\nturista\r\nturnaj\r\ntuzemsko\r\ntvaroh\r\ntvorba\r\ntvrdost\r\ntvrz\r\ntygr\r\ntykev\r\nubohost\r\nuboze\r\nubrat\r\nubrousek\r\nubrus\r\nubytovna\r\nucho\r\nuctivost\r\nudivit\r\nuhradit\r\nujednat\r\nujistit\r\nujmout\r\nukazatel\r\nuklidnit\r\nuklonit\r\nukotvit\r\nukrojit\r\nulice\r\nulita\r\nulovit\r\numyvadlo\r\nunavit\r\nuniforma\r\nuniknout\r\nupadnout\r\nuplatnit\r\nuplynout\r\nupoutat\r\nupravit\r\nuran\r\nurazit\r\nusednout\r\nusilovat\r\nusmrtit\r\nusnadnit\r\nusnout\r\nusoudit\r\nustlat\r\nustrnout\r\nutahovat\r\nutkat\r\nutlumit\r\nutonout\r\nutopenec\r\nutrousit\r\nuvalit\r\nuvolnit\r\nuvozovka\r\nuzdravit\r\nuzel\r\nuzenina\r\nuzlina\r\nuznat\r\nvagon\r\nvalcha\r\nvaloun\r\nvana\r\nvandal\r\nvanilka\r\nvaran\r\nvarhany\r\nvarovat\r\nvcelku\r\nvchod\r\nvdova\r\nvedro\r\nvegetace\r\nvejce\r\nvelbloud\r\nveletrh\r\nvelitel\r\nvelmoc\r\nvelryba\r\nvenkov\r\nveranda\r\nverze\r\nveselka\r\nveskrze\r\nvesnice\r\nvespodu\r\nvesta\r\nveterina\r\nveverka\r\nvibrace\r\nvichr\r\nvideohra\r\nvidina\r\nvidle\r\nvila\r\nvinice\r\nviset\r\nvitalita\r\nvize\r\nvizitka\r\nvjezd\r\nvklad\r\nvkus\r\nvlajka\r\nvlak\r\nvlasec\r\nvlevo\r\nvlhkost\r\nvliv\r\nvlnovka\r\nvloupat\r\nvnucovat\r\nvnuk\r\nvoda\r\nvodivost\r\nvodoznak\r\nvodstvo\r\nvojensky\r\nvojna\r\nvojsko\r\nvolant\r\nvolba\r\nvolit\r\nvolno\r\nvoskovka\r\nvozidlo\r\nvozovna\r\nvpravo\r\nvrabec\r\nvracet\r\nvrah\r\nvrata\r\nvrba\r\nvrcholek\r\nvrhat\r\nvrstva\r\nvrtule\r\nvsadit\r\nvstoupit\r\nvstup\r\nvtip\r\nvybavit\r\nvybrat\r\nvychovat\r\nvydat\r\nvydra\r\nvyfotit\r\nvyhledat\r\nvyhnout\r\nvyhodit\r\nvyhradit\r\nvyhubit\r\nvyjasnit\r\nvyjet\r\nvyjmout\r\nvyklopit\r\nvykonat\r\nvylekat\r\nvymazat\r\nvymezit\r\nvymizet\r\nvymyslet\r\nvynechat\r\nvynikat\r\nvynutit\r\nvypadat\r\nvyplatit\r\nvypravit\r\nvypustit\r\nvyrazit\r\nvyrovnat\r\nvyrvat\r\nvyslovit\r\nvysoko\r\nvystavit\r\nvysunout\r\nvysypat\r\nvytasit\r\nvytesat\r\nvytratit\r\nvyvinout\r\nvyvolat\r\nvyvrhel\r\nvyzdobit\r\nvyznat\r\nvzadu\r\nvzbudit\r\nvzchopit\r\nvzdor\r\nvzduch\r\nvzdychat\r\nvzestup\r\nvzhledem\r\nvzkaz\r\nvzlykat\r\nvznik\r\nvzorek\r\nvzpoura\r\nvztah\r\nvztek\r\nxylofon\r\nzabrat\r\nzabydlet\r\nzachovat\r\nzadarmo\r\nzadusit\r\nzafoukat\r\nzahltit\r\nzahodit\r\nzahrada\r\nzahynout\r\nzajatec\r\nzajet\r\nzajistit\r\nzaklepat\r\nzakoupit\r\nzalepit\r\nzamezit\r\nzamotat\r\nzamyslet\r\nzanechat\r\nzanikat\r\nzaplatit\r\nzapojit\r\nzapsat\r\nzarazit\r\nzastavit\r\nzasunout\r\nzatajit\r\nzatemnit\r\nzatknout\r\nzaujmout\r\nzavalit\r\nzavelet\r\nzavinit\r\nzavolat\r\nzavrtat\r\nzazvonit\r\nzbavit\r\nzbrusu\r\nzbudovat\r\nzbytek\r\nzdaleka\r\nzdarma\r\nzdatnost\r\nzdivo\r\nzdobit\r\nzdroj\r\nzdvih\r\nzdymadlo\r\nzelenina\r\nzeman\r\nzemina\r\nzeptat\r\nzezadu\r\nzezdola\r\nzhatit\r\nzhltnout\r\nzhluboka\r\nzhotovit\r\nzhruba\r\nzima\r\nzimnice\r\nzjemnit\r\nzklamat\r\nzkoumat\r\nzkratka\r\nzkumavka\r\nzlato\r\nzlehka\r\nzloba\r\nzlom\r\nzlost\r\nzlozvyk\r\nzmapovat\r\nzmar\r\nzmatek\r\nzmije\r\nzmizet\r\nzmocnit\r\nzmodrat\r\nzmrzlina\r\nzmutovat\r\nznak\r\nznalost\r\nznamenat\r\nznovu\r\nzobrazit\r\nzotavit\r\nzoubek\r\nzoufale\r\nzplodit\r\nzpomalit\r\nzprava\r\nzprostit\r\nzprudka\r\nzprvu\r\nzrada\r\nzranit\r\nzrcadlo\r\nzrnitost\r\nzrno\r\nzrovna\r\nzrychlit\r\nzrzavost\r\nzticha\r\nztratit\r\nzubovina\r\nzubr\r\nzvednout\r\nzvenku\r\nzvesela\r\nzvon\r\nzvrat\r\nzvukovod\r\nzvyk`.split('\\n');\r\n", "export const wordlist = `abandon\r\nability\r\nable\r\nabout\r\nabove\r\nabsent\r\nabsorb\r\nabstract\r\nabsurd\r\nabuse\r\naccess\r\naccident\r\naccount\r\naccuse\r\nachieve\r\nacid\r\nacoustic\r\nacquire\r\nacross\r\nact\r\naction\r\nactor\r\nactress\r\nactual\r\nadapt\r\nadd\r\naddict\r\naddress\r\nadjust\r\nadmit\r\nadult\r\nadvance\r\nadvice\r\naerobic\r\naffair\r\nafford\r\nafraid\r\nagain\r\nage\r\nagent\r\nagree\r\nahead\r\naim\r\nair\r\nairport\r\naisle\r\nalarm\r\nalbum\r\nalcohol\r\nalert\r\nalien\r\nall\r\nalley\r\nallow\r\nalmost\r\nalone\r\nalpha\r\nalready\r\nalso\r\nalter\r\nalways\r\namateur\r\namazing\r\namong\r\namount\r\namused\r\nanalyst\r\nanchor\r\nancient\r\nanger\r\nangle\r\nangry\r\nanimal\r\nankle\r\nannounce\r\nannual\r\nanother\r\nanswer\r\nantenna\r\nantique\r\nanxiety\r\nany\r\napart\r\napology\r\nappear\r\napple\r\napprove\r\napril\r\narch\r\narctic\r\narea\r\narena\r\nargue\r\narm\r\narmed\r\narmor\r\narmy\r\naround\r\narrange\r\narrest\r\narrive\r\narrow\r\nart\r\nartefact\r\nartist\r\nartwork\r\nask\r\naspect\r\nassault\r\nasset\r\nassist\r\nassume\r\nasthma\r\nathlete\r\natom\r\nattack\r\nattend\r\nattitude\r\nattract\r\nauction\r\naudit\r\naugust\r\naunt\r\nauthor\r\nauto\r\nautumn\r\naverage\r\navocado\r\navoid\r\nawake\r\naware\r\naway\r\nawesome\r\nawful\r\nawkward\r\naxis\r\nbaby\r\nbachelor\r\nbacon\r\nbadge\r\nbag\r\nbalance\r\nbalcony\r\nball\r\nbamboo\r\nbanana\r\nbanner\r\nbar\r\nbarely\r\nbargain\r\nbarrel\r\nbase\r\nbasic\r\nbasket\r\nbattle\r\nbeach\r\nbean\r\nbeauty\r\nbecause\r\nbecome\r\nbeef\r\nbefore\r\nbegin\r\nbehave\r\nbehind\r\nbelieve\r\nbelow\r\nbelt\r\nbench\r\nbenefit\r\nbest\r\nbetray\r\nbetter\r\nbetween\r\nbeyond\r\nbicycle\r\nbid\r\nbike\r\nbind\r\nbiology\r\nbird\r\nbirth\r\nbitter\r\nblack\r\nblade\r\nblame\r\nblanket\r\nblast\r\nbleak\r\nbless\r\nblind\r\nblood\r\nblossom\r\nblouse\r\nblue\r\nblur\r\nblush\r\nboard\r\nboat\r\nbody\r\nboil\r\nbomb\r\nbone\r\nbonus\r\nbook\r\nboost\r\nborder\r\nboring\r\nborrow\r\nboss\r\nbottom\r\nbounce\r\nbox\r\nboy\r\nbracket\r\nbrain\r\nbrand\r\nbrass\r\nbrave\r\nbread\r\nbreeze\r\nbrick\r\nbridge\r\nbrief\r\nbright\r\nbring\r\nbrisk\r\nbroccoli\r\nbroken\r\nbronze\r\nbroom\r\nbrother\r\nbrown\r\nbrush\r\nbubble\r\nbuddy\r\nbudget\r\nbuffalo\r\nbuild\r\nbulb\r\nbulk\r\nbullet\r\nbundle\r\nbunker\r\nburden\r\nburger\r\nburst\r\nbus\r\nbusiness\r\nbusy\r\nbutter\r\nbuyer\r\nbuzz\r\ncabbage\r\ncabin\r\ncable\r\ncactus\r\ncage\r\ncake\r\ncall\r\ncalm\r\ncamera\r\ncamp\r\ncan\r\ncanal\r\ncancel\r\ncandy\r\ncannon\r\ncanoe\r\ncanvas\r\ncanyon\r\ncapable\r\ncapital\r\ncaptain\r\ncar\r\ncarbon\r\ncard\r\ncargo\r\ncarpet\r\ncarry\r\ncart\r\ncase\r\ncash\r\ncasino\r\ncastle\r\ncasual\r\ncat\r\ncatalog\r\ncatch\r\ncategory\r\ncattle\r\ncaught\r\ncause\r\ncaution\r\ncave\r\nceiling\r\ncelery\r\ncement\r\ncensus\r\ncentury\r\ncereal\r\ncertain\r\nchair\r\nchalk\r\nchampion\r\nchange\r\nchaos\r\nchapter\r\ncharge\r\nchase\r\nchat\r\ncheap\r\ncheck\r\ncheese\r\nchef\r\ncherry\r\nchest\r\nchicken\r\nchief\r\nchild\r\nchimney\r\nchoice\r\nchoose\r\nchronic\r\nchuckle\r\nchunk\r\nchurn\r\ncigar\r\ncinnamon\r\ncircle\r\ncitizen\r\ncity\r\ncivil\r\nclaim\r\nclap\r\nclarify\r\nclaw\r\nclay\r\nclean\r\nclerk\r\nclever\r\nclick\r\nclient\r\ncliff\r\nclimb\r\nclinic\r\nclip\r\nclock\r\nclog\r\nclose\r\ncloth\r\ncloud\r\nclown\r\nclub\r\nclump\r\ncluster\r\nclutch\r\ncoach\r\ncoast\r\ncoconut\r\ncode\r\ncoffee\r\ncoil\r\ncoin\r\ncollect\r\ncolor\r\ncolumn\r\ncombine\r\ncome\r\ncomfort\r\ncomic\r\ncommon\r\ncompany\r\nconcert\r\nconduct\r\nconfirm\r\ncongress\r\nconnect\r\nconsider\r\ncontrol\r\nconvince\r\ncook\r\ncool\r\ncopper\r\ncopy\r\ncoral\r\ncore\r\ncorn\r\ncorrect\r\ncost\r\ncotton\r\ncouch\r\ncountry\r\ncouple\r\ncourse\r\ncousin\r\ncover\r\ncoyote\r\ncrack\r\ncradle\r\ncraft\r\ncram\r\ncrane\r\ncrash\r\ncrater\r\ncrawl\r\ncrazy\r\ncream\r\ncredit\r\ncreek\r\ncrew\r\ncricket\r\ncrime\r\ncrisp\r\ncritic\r\ncrop\r\ncross\r\ncrouch\r\ncrowd\r\ncrucial\r\ncruel\r\ncruise\r\ncrumble\r\ncrunch\r\ncrush\r\ncry\r\ncrystal\r\ncube\r\nculture\r\ncup\r\ncupboard\r\ncurious\r\ncurrent\r\ncurtain\r\ncurve\r\ncushion\r\ncustom\r\ncute\r\ncycle\r\ndad\r\ndamage\r\ndamp\r\ndance\r\ndanger\r\ndaring\r\ndash\r\ndaughter\r\ndawn\r\nday\r\ndeal\r\ndebate\r\ndebris\r\ndecade\r\ndecember\r\ndecide\r\ndecline\r\ndecorate\r\ndecrease\r\ndeer\r\ndefense\r\ndefine\r\ndefy\r\ndegree\r\ndelay\r\ndeliver\r\ndemand\r\ndemise\r\ndenial\r\ndentist\r\ndeny\r\ndepart\r\ndepend\r\ndeposit\r\ndepth\r\ndeputy\r\nderive\r\ndescribe\r\ndesert\r\ndesign\r\ndesk\r\ndespair\r\ndestroy\r\ndetail\r\ndetect\r\ndevelop\r\ndevice\r\ndevote\r\ndiagram\r\ndial\r\ndiamond\r\ndiary\r\ndice\r\ndiesel\r\ndiet\r\ndiffer\r\ndigital\r\ndignity\r\ndilemma\r\ndinner\r\ndinosaur\r\ndirect\r\ndirt\r\ndisagree\r\ndiscover\r\ndisease\r\ndish\r\ndismiss\r\ndisorder\r\ndisplay\r\ndistance\r\ndivert\r\ndivide\r\ndivorce\r\ndizzy\r\ndoctor\r\ndocument\r\ndog\r\ndoll\r\ndolphin\r\ndomain\r\ndonate\r\ndonkey\r\ndonor\r\ndoor\r\ndose\r\ndouble\r\ndove\r\ndraft\r\ndragon\r\ndrama\r\ndrastic\r\ndraw\r\ndream\r\ndress\r\ndrift\r\ndrill\r\ndrink\r\ndrip\r\ndrive\r\ndrop\r\ndrum\r\ndry\r\nduck\r\ndumb\r\ndune\r\nduring\r\ndust\r\ndutch\r\nduty\r\ndwarf\r\ndynamic\r\neager\r\neagle\r\nearly\r\nearn\r\nearth\r\neasily\r\neast\r\neasy\r\necho\r\necology\r\neconomy\r\nedge\r\nedit\r\neducate\r\neffort\r\negg\r\neight\r\neither\r\nelbow\r\nelder\r\nelectric\r\nelegant\r\nelement\r\nelephant\r\nelevator\r\nelite\r\nelse\r\nembark\r\nembody\r\nembrace\r\nemerge\r\nemotion\r\nemploy\r\nempower\r\nempty\r\nenable\r\nenact\r\nend\r\nendless\r\nendorse\r\nenemy\r\nenergy\r\nenforce\r\nengage\r\nengine\r\nenhance\r\nenjoy\r\nenlist\r\nenough\r\nenrich\r\nenroll\r\nensure\r\nenter\r\nentire\r\nentry\r\nenvelope\r\nepisode\r\nequal\r\nequip\r\nera\r\nerase\r\nerode\r\nerosion\r\nerror\r\nerupt\r\nescape\r\nessay\r\nessence\r\nestate\r\neternal\r\nethics\r\nevidence\r\nevil\r\nevoke\r\nevolve\r\nexact\r\nexample\r\nexcess\r\nexchange\r\nexcite\r\nexclude\r\nexcuse\r\nexecute\r\nexercise\r\nexhaust\r\nexhibit\r\nexile\r\nexist\r\nexit\r\nexotic\r\nexpand\r\nexpect\r\nexpire\r\nexplain\r\nexpose\r\nexpress\r\nextend\r\nextra\r\neye\r\neyebrow\r\nfabric\r\nface\r\nfaculty\r\nfade\r\nfaint\r\nfaith\r\nfall\r\nfalse\r\nfame\r\nfamily\r\nfamous\r\nfan\r\nfancy\r\nfantasy\r\nfarm\r\nfashion\r\nfat\r\nfatal\r\nfather\r\nfatigue\r\nfault\r\nfavorite\r\nfeature\r\nfebruary\r\nfederal\r\nfee\r\nfeed\r\nfeel\r\nfemale\r\nfence\r\nfestival\r\nfetch\r\nfever\r\nfew\r\nfiber\r\nfiction\r\nfield\r\nfigure\r\nfile\r\nfilm\r\nfilter\r\nfinal\r\nfind\r\nfine\r\nfinger\r\nfinish\r\nfire\r\nfirm\r\nfirst\r\nfiscal\r\nfish\r\nfit\r\nfitness\r\nfix\r\nflag\r\nflame\r\nflash\r\nflat\r\nflavor\r\nflee\r\nflight\r\nflip\r\nfloat\r\nflock\r\nfloor\r\nflower\r\nfluid\r\nflush\r\nfly\r\nfoam\r\nfocus\r\nfog\r\nfoil\r\nfold\r\nfollow\r\nfood\r\nfoot\r\nforce\r\nforest\r\nforget\r\nfork\r\nfortune\r\nforum\r\nforward\r\nfossil\r\nfoster\r\nfound\r\nfox\r\nfragile\r\nframe\r\nfrequent\r\nfresh\r\nfriend\r\nfringe\r\nfrog\r\nfront\r\nfrost\r\nfrown\r\nfrozen\r\nfruit\r\nfuel\r\nfun\r\nfunny\r\nfurnace\r\nfury\r\nfuture\r\ngadget\r\ngain\r\ngalaxy\r\ngallery\r\ngame\r\ngap\r\ngarage\r\ngarbage\r\ngarden\r\ngarlic\r\ngarment\r\ngas\r\ngasp\r\ngate\r\ngather\r\ngauge\r\ngaze\r\ngeneral\r\ngenius\r\ngenre\r\ngentle\r\ngenuine\r\ngesture\r\nghost\r\ngiant\r\ngift\r\ngiggle\r\nginger\r\ngiraffe\r\ngirl\r\ngive\r\nglad\r\nglance\r\nglare\r\nglass\r\nglide\r\nglimpse\r\nglobe\r\ngloom\r\nglory\r\nglove\r\nglow\r\nglue\r\ngoat\r\ngoddess\r\ngold\r\ngood\r\ngoose\r\ngorilla\r\ngospel\r\ngossip\r\ngovern\r\ngown\r\ngrab\r\ngrace\r\ngrain\r\ngrant\r\ngrape\r\ngrass\r\ngravity\r\ngreat\r\ngreen\r\ngrid\r\ngrief\r\ngrit\r\ngrocery\r\ngroup\r\ngrow\r\ngrunt\r\nguard\r\nguess\r\nguide\r\nguilt\r\nguitar\r\ngun\r\ngym\r\nhabit\r\nhair\r\nhalf\r\nhammer\r\nhamster\r\nhand\r\nhappy\r\nharbor\r\nhard\r\nharsh\r\nharvest\r\nhat\r\nhave\r\nhawk\r\nhazard\r\nhead\r\nhealth\r\nheart\r\nheavy\r\nhedgehog\r\nheight\r\nhello\r\nhelmet\r\nhelp\r\nhen\r\nhero\r\nhidden\r\nhigh\r\nhill\r\nhint\r\nhip\r\nhire\r\nhistory\r\nhobby\r\nhockey\r\nhold\r\nhole\r\nholiday\r\nhollow\r\nhome\r\nhoney\r\nhood\r\nhope\r\nhorn\r\nhorror\r\nhorse\r\nhospital\r\nhost\r\nhotel\r\nhour\r\nhover\r\nhub\r\nhuge\r\nhuman\r\nhumble\r\nhumor\r\nhundred\r\nhungry\r\nhunt\r\nhurdle\r\nhurry\r\nhurt\r\nhusband\r\nhybrid\r\nice\r\nicon\r\nidea\r\nidentify\r\nidle\r\nignore\r\nill\r\nillegal\r\nillness\r\nimage\r\nimitate\r\nimmense\r\nimmune\r\nimpact\r\nimpose\r\nimprove\r\nimpulse\r\ninch\r\ninclude\r\nincome\r\nincrease\r\nindex\r\nindicate\r\nindoor\r\nindustry\r\ninfant\r\ninflict\r\ninform\r\ninhale\r\ninherit\r\ninitial\r\ninject\r\ninjury\r\ninmate\r\ninner\r\ninnocent\r\ninput\r\ninquiry\r\ninsane\r\ninsect\r\ninside\r\ninspire\r\ninstall\r\nintact\r\ninterest\r\ninto\r\ninvest\r\ninvite\r\ninvolve\r\niron\r\nisland\r\nisolate\r\nissue\r\nitem\r\nivory\r\njacket\r\njaguar\r\njar\r\njazz\r\njealous\r\njeans\r\njelly\r\njewel\r\njob\r\njoin\r\njoke\r\njourney\r\njoy\r\njudge\r\njuice\r\njump\r\njungle\r\njunior\r\njunk\r\njust\r\nkangaroo\r\nkeen\r\nkeep\r\nketchup\r\nkey\r\nkick\r\nkid\r\nkidney\r\nkind\r\nkingdom\r\nkiss\r\nkit\r\nkitchen\r\nkite\r\nkitten\r\nkiwi\r\nknee\r\nknife\r\nknock\r\nknow\r\nlab\r\nlabel\r\nlabor\r\nladder\r\nlady\r\nlake\r\nlamp\r\nlanguage\r\nlaptop\r\nlarge\r\nlater\r\nlatin\r\nlaugh\r\nlaundry\r\nlava\r\nlaw\r\nlawn\r\nlawsuit\r\nlayer\r\nlazy\r\nleader\r\nleaf\r\nlearn\r\nleave\r\nlecture\r\nleft\r\nleg\r\nlegal\r\nlegend\r\nleisure\r\nlemon\r\nlend\r\nlength\r\nlens\r\nleopard\r\nlesson\r\nletter\r\nlevel\r\nliar\r\nliberty\r\nlibrary\r\nlicense\r\nlife\r\nlift\r\nlight\r\nlike\r\nlimb\r\nlimit\r\nlink\r\nlion\r\nliquid\r\nlist\r\nlittle\r\nlive\r\nlizard\r\nload\r\nloan\r\nlobster\r\nlocal\r\nlock\r\nlogic\r\nlonely\r\nlong\r\nloop\r\nlottery\r\nloud\r\nlounge\r\nlove\r\nloyal\r\nlucky\r\nluggage\r\nlumber\r\nlunar\r\nlunch\r\nluxury\r\nlyrics\r\nmachine\r\nmad\r\nmagic\r\nmagnet\r\nmaid\r\nmail\r\nmain\r\nmajor\r\nmake\r\nmammal\r\nman\r\nmanage\r\nmandate\r\nmango\r\nmansion\r\nmanual\r\nmaple\r\nmarble\r\nmarch\r\nmargin\r\nmarine\r\nmarket\r\nmarriage\r\nmask\r\nmass\r\nmaster\r\nmatch\r\nmaterial\r\nmath\r\nmatrix\r\nmatter\r\nmaximum\r\nmaze\r\nmeadow\r\nmean\r\nmeasure\r\nmeat\r\nmechanic\r\nmedal\r\nmedia\r\nmelody\r\nmelt\r\nmember\r\nmemory\r\nmention\r\nmenu\r\nmercy\r\nmerge\r\nmerit\r\nmerry\r\nmesh\r\nmessage\r\nmetal\r\nmethod\r\nmiddle\r\nmidnight\r\nmilk\r\nmillion\r\nmimic\r\nmind\r\nminimum\r\nminor\r\nminute\r\nmiracle\r\nmirror\r\nmisery\r\nmiss\r\nmistake\r\nmix\r\nmixed\r\nmixture\r\nmobile\r\nmodel\r\nmodify\r\nmom\r\nmoment\r\nmonitor\r\nmonkey\r\nmonster\r\nmonth\r\nmoon\r\nmoral\r\nmore\r\nmorning\r\nmosquito\r\nmother\r\nmotion\r\nmotor\r\nmountain\r\nmouse\r\nmove\r\nmovie\r\nmuch\r\nmuffin\r\nmule\r\nmultiply\r\nmuscle\r\nmuseum\r\nmushroom\r\nmusic\r\nmust\r\nmutual\r\nmyself\r\nmystery\r\nmyth\r\nnaive\r\nname\r\nnapkin\r\nnarrow\r\nnasty\r\nnation\r\nnature\r\nnear\r\nneck\r\nneed\r\nnegative\r\nneglect\r\nneither\r\nnephew\r\nnerve\r\nnest\r\nnet\r\nnetwork\r\nneutral\r\nnever\r\nnews\r\nnext\r\nnice\r\nnight\r\nnoble\r\nnoise\r\nnominee\r\nnoodle\r\nnormal\r\nnorth\r\nnose\r\nnotable\r\nnote\r\nnothing\r\nnotice\r\nnovel\r\nnow\r\nnuclear\r\nnumber\r\nnurse\r\nnut\r\noak\r\nobey\r\nobject\r\noblige\r\nobscure\r\nobserve\r\nobtain\r\nobvious\r\noccur\r\nocean\r\noctober\r\nodor\r\noff\r\noffer\r\noffice\r\noften\r\noil\r\nokay\r\nold\r\nolive\r\nolympic\r\nomit\r\nonce\r\none\r\nonion\r\nonline\r\nonly\r\nopen\r\nopera\r\nopinion\r\noppose\r\noption\r\norange\r\norbit\r\norchard\r\norder\r\nordinary\r\norgan\r\norient\r\noriginal\r\norphan\r\nostrich\r\nother\r\noutdoor\r\nouter\r\noutput\r\noutside\r\noval\r\noven\r\nover\r\nown\r\nowner\r\noxygen\r\noyster\r\nozone\r\npact\r\npaddle\r\npage\r\npair\r\npalace\r\npalm\r\npanda\r\npanel\r\npanic\r\npanther\r\npaper\r\nparade\r\nparent\r\npark\r\nparrot\r\nparty\r\npass\r\npatch\r\npath\r\npatient\r\npatrol\r\npattern\r\npause\r\npave\r\npayment\r\npeace\r\npeanut\r\npear\r\npeasant\r\npelican\r\npen\r\npenalty\r\npencil\r\npeople\r\npepper\r\nperfect\r\npermit\r\nperson\r\npet\r\nphone\r\nphoto\r\nphrase\r\nphysical\r\npiano\r\npicnic\r\npicture\r\npiece\r\npig\r\npigeon\r\npill\r\npilot\r\npink\r\npioneer\r\npipe\r\npistol\r\npitch\r\npizza\r\nplace\r\nplanet\r\nplastic\r\nplate\r\nplay\r\nplease\r\npledge\r\npluck\r\nplug\r\nplunge\r\npoem\r\npoet\r\npoint\r\npolar\r\npole\r\npolice\r\npond\r\npony\r\npool\r\npopular\r\nportion\r\nposition\r\npossible\r\npost\r\npotato\r\npottery\r\npoverty\r\npowder\r\npower\r\npractice\r\npraise\r\npredict\r\nprefer\r\nprepare\r\npresent\r\npretty\r\nprevent\r\nprice\r\npride\r\nprimary\r\nprint\r\npriority\r\nprison\r\nprivate\r\nprize\r\nproblem\r\nprocess\r\nproduce\r\nprofit\r\nprogram\r\nproject\r\npromote\r\nproof\r\nproperty\r\nprosper\r\nprotect\r\nproud\r\nprovide\r\npublic\r\npudding\r\npull\r\npulp\r\npulse\r\npumpkin\r\npunch\r\npupil\r\npuppy\r\npurchase\r\npurity\r\npurpose\r\npurse\r\npush\r\nput\r\npuzzle\r\npyramid\r\nquality\r\nquantum\r\nquarter\r\nquestion\r\nquick\r\nquit\r\nquiz\r\nquote\r\nrabbit\r\nraccoon\r\nrace\r\nrack\r\nradar\r\nradio\r\nrail\r\nrain\r\nraise\r\nrally\r\nramp\r\nranch\r\nrandom\r\nrange\r\nrapid\r\nrare\r\nrate\r\nrather\r\nraven\r\nraw\r\nrazor\r\nready\r\nreal\r\nreason\r\nrebel\r\nrebuild\r\nrecall\r\nreceive\r\nrecipe\r\nrecord\r\nrecycle\r\nreduce\r\nreflect\r\nreform\r\nrefuse\r\nregion\r\nregret\r\nregular\r\nreject\r\nrelax\r\nrelease\r\nrelief\r\nrely\r\nremain\r\nremember\r\nremind\r\nremove\r\nrender\r\nrenew\r\nrent\r\nreopen\r\nrepair\r\nrepeat\r\nreplace\r\nreport\r\nrequire\r\nrescue\r\nresemble\r\nresist\r\nresource\r\nresponse\r\nresult\r\nretire\r\nretreat\r\nreturn\r\nreunion\r\nreveal\r\nreview\r\nreward\r\nrhythm\r\nrib\r\nribbon\r\nrice\r\nrich\r\nride\r\nridge\r\nrifle\r\nright\r\nrigid\r\nring\r\nriot\r\nripple\r\nrisk\r\nritual\r\nrival\r\nriver\r\nroad\r\nroast\r\nrobot\r\nrobust\r\nrocket\r\nromance\r\nroof\r\nrookie\r\nroom\r\nrose\r\nrotate\r\nrough\r\nround\r\nroute\r\nroyal\r\nrubber\r\nrude\r\nrug\r\nrule\r\nrun\r\nrunway\r\nrural\r\nsad\r\nsaddle\r\nsadness\r\nsafe\r\nsail\r\nsalad\r\nsalmon\r\nsalon\r\nsalt\r\nsalute\r\nsame\r\nsample\r\nsand\r\nsatisfy\r\nsatoshi\r\nsauce\r\nsausage\r\nsave\r\nsay\r\nscale\r\nscan\r\nscare\r\nscatter\r\nscene\r\nscheme\r\nschool\r\nscience\r\nscissors\r\nscorpion\r\nscout\r\nscrap\r\nscreen\r\nscript\r\nscrub\r\nsea\r\nsearch\r\nseason\r\nseat\r\nsecond\r\nsecret\r\nsection\r\nsecurity\r\nseed\r\nseek\r\nsegment\r\nselect\r\nsell\r\nseminar\r\nsenior\r\nsense\r\nsentence\r\nseries\r\nservice\r\nsession\r\nsettle\r\nsetup\r\nseven\r\nshadow\r\nshaft\r\nshallow\r\nshare\r\nshed\r\nshell\r\nsheriff\r\nshield\r\nshift\r\nshine\r\nship\r\nshiver\r\nshock\r\nshoe\r\nshoot\r\nshop\r\nshort\r\nshoulder\r\nshove\r\nshrimp\r\nshrug\r\nshuffle\r\nshy\r\nsibling\r\nsick\r\nside\r\nsiege\r\nsight\r\nsign\r\nsilent\r\nsilk\r\nsilly\r\nsilver\r\nsimilar\r\nsimple\r\nsince\r\nsing\r\nsiren\r\nsister\r\nsituate\r\nsix\r\nsize\r\nskate\r\nsketch\r\nski\r\nskill\r\nskin\r\nskirt\r\nskull\r\nslab\r\nslam\r\nsleep\r\nslender\r\nslice\r\nslide\r\nslight\r\nslim\r\nslogan\r\nslot\r\nslow\r\nslush\r\nsmall\r\nsmart\r\nsmile\r\nsmoke\r\nsmooth\r\nsnack\r\nsnake\r\nsnap\r\nsniff\r\nsnow\r\nsoap\r\nsoccer\r\nsocial\r\nsock\r\nsoda\r\nsoft\r\nsolar\r\nsoldier\r\nsolid\r\nsolution\r\nsolve\r\nsomeone\r\nsong\r\nsoon\r\nsorry\r\nsort\r\nsoul\r\nsound\r\nsoup\r\nsource\r\nsouth\r\nspace\r\nspare\r\nspatial\r\nspawn\r\nspeak\r\nspecial\r\nspeed\r\nspell\r\nspend\r\nsphere\r\nspice\r\nspider\r\nspike\r\nspin\r\nspirit\r\nsplit\r\nspoil\r\nsponsor\r\nspoon\r\nsport\r\nspot\r\nspray\r\nspread\r\nspring\r\nspy\r\nsquare\r\nsqueeze\r\nsquirrel\r\nstable\r\nstadium\r\nstaff\r\nstage\r\nstairs\r\nstamp\r\nstand\r\nstart\r\nstate\r\nstay\r\nsteak\r\nsteel\r\nstem\r\nstep\r\nstereo\r\nstick\r\nstill\r\nsting\r\nstock\r\nstomach\r\nstone\r\nstool\r\nstory\r\nstove\r\nstrategy\r\nstreet\r\nstrike\r\nstrong\r\nstruggle\r\nstudent\r\nstuff\r\nstumble\r\nstyle\r\nsubject\r\nsubmit\r\nsubway\r\nsuccess\r\nsuch\r\nsudden\r\nsuffer\r\nsugar\r\nsuggest\r\nsuit\r\nsummer\r\nsun\r\nsunny\r\nsunset\r\nsuper\r\nsupply\r\nsupreme\r\nsure\r\nsurface\r\nsurge\r\nsurprise\r\nsurround\r\nsurvey\r\nsuspect\r\nsustain\r\nswallow\r\nswamp\r\nswap\r\nswarm\r\nswear\r\nsweet\r\nswift\r\nswim\r\nswing\r\nswitch\r\nsword\r\nsymbol\r\nsymptom\r\nsyrup\r\nsystem\r\ntable\r\ntackle\r\ntag\r\ntail\r\ntalent\r\ntalk\r\ntank\r\ntape\r\ntarget\r\ntask\r\ntaste\r\ntattoo\r\ntaxi\r\nteach\r\nteam\r\ntell\r\nten\r\ntenant\r\ntennis\r\ntent\r\nterm\r\ntest\r\ntext\r\nthank\r\nthat\r\ntheme\r\nthen\r\ntheory\r\nthere\r\nthey\r\nthing\r\nthis\r\nthought\r\nthree\r\nthrive\r\nthrow\r\nthumb\r\nthunder\r\nticket\r\ntide\r\ntiger\r\ntilt\r\ntimber\r\ntime\r\ntiny\r\ntip\r\ntired\r\ntissue\r\ntitle\r\ntoast\r\ntobacco\r\ntoday\r\ntoddler\r\ntoe\r\ntogether\r\ntoilet\r\ntoken\r\ntomato\r\ntomorrow\r\ntone\r\ntongue\r\ntonight\r\ntool\r\ntooth\r\ntop\r\ntopic\r\ntopple\r\ntorch\r\ntornado\r\ntortoise\r\ntoss\r\ntotal\r\ntourist\r\ntoward\r\ntower\r\ntown\r\ntoy\r\ntrack\r\ntrade\r\ntraffic\r\ntragic\r\ntrain\r\ntransfer\r\ntrap\r\ntrash\r\ntravel\r\ntray\r\ntreat\r\ntree\r\ntrend\r\ntrial\r\ntribe\r\ntrick\r\ntrigger\r\ntrim\r\ntrip\r\ntrophy\r\ntrouble\r\ntruck\r\ntrue\r\ntruly\r\ntrumpet\r\ntrust\r\ntruth\r\ntry\r\ntube\r\ntuition\r\ntumble\r\ntuna\r\ntunnel\r\nturkey\r\nturn\r\nturtle\r\ntwelve\r\ntwenty\r\ntwice\r\ntwin\r\ntwist\r\ntwo\r\ntype\r\ntypical\r\nugly\r\numbrella\r\nunable\r\nunaware\r\nuncle\r\nuncover\r\nunder\r\nundo\r\nunfair\r\nunfold\r\nunhappy\r\nuniform\r\nunique\r\nunit\r\nuniverse\r\nunknown\r\nunlock\r\nuntil\r\nunusual\r\nunveil\r\nupdate\r\nupgrade\r\nuphold\r\nupon\r\nupper\r\nupset\r\nurban\r\nurge\r\nusage\r\nuse\r\nused\r\nuseful\r\nuseless\r\nusual\r\nutility\r\nvacant\r\nvacuum\r\nvague\r\nvalid\r\nvalley\r\nvalve\r\nvan\r\nvanish\r\nvapor\r\nvarious\r\nvast\r\nvault\r\nvehicle\r\nvelvet\r\nvendor\r\nventure\r\nvenue\r\nverb\r\nverify\r\nversion\r\nvery\r\nvessel\r\nveteran\r\nviable\r\nvibrant\r\nvicious\r\nvictory\r\nvideo\r\nview\r\nvillage\r\nvintage\r\nviolin\r\nvirtual\r\nvirus\r\nvisa\r\nvisit\r\nvisual\r\nvital\r\nvivid\r\nvocal\r\nvoice\r\nvoid\r\nvolcano\r\nvolume\r\nvote\r\nvoyage\r\nwage\r\nwagon\r\nwait\r\nwalk\r\nwall\r\nwalnut\r\nwant\r\nwarfare\r\nwarm\r\nwarrior\r\nwash\r\nwasp\r\nwaste\r\nwater\r\nwave\r\nway\r\nwealth\r\nweapon\r\nwear\r\nweasel\r\nweather\r\nweb\r\nwedding\r\nweekend\r\nweird\r\nwelcome\r\nwest\r\nwet\r\nwhale\r\nwhat\r\nwheat\r\nwheel\r\nwhen\r\nwhere\r\nwhip\r\nwhisper\r\nwide\r\nwidth\r\nwife\r\nwild\r\nwill\r\nwin\r\nwindow\r\nwine\r\nwing\r\nwink\r\nwinner\r\nwinter\r\nwire\r\nwisdom\r\nwise\r\nwish\r\nwitness\r\nwolf\r\nwoman\r\nwonder\r\nwood\r\nwool\r\nword\r\nwork\r\nworld\r\nworry\r\nworth\r\nwrap\r\nwreck\r\nwrestle\r\nwrist\r\nwrite\r\nwrong\r\nyard\r\nyear\r\nyellow\r\nyou\r\nyoung\r\nyouth\r\nzebra\r\nzero\r\nzone\r\nzoo`.split('\\n');\r\n", "export const wordlist = `abaisser\r\nabandon\r\nabdiquer\r\nabeille\r\nabolir\r\naborder\r\naboutir\r\naboyer\r\nabrasif\r\nabreuver\r\nabriter\r\nabroger\r\nabrupt\r\nabsence\r\nabsolu\r\nabsurde\r\nabusif\r\nabyssal\r\nacadémie\r\nacajou\r\nacarien\r\naccabler\r\naccepter\r\nacclamer\r\naccolade\r\naccroche\r\naccuser\r\nacerbe\r\nachat\r\nacheter\r\naciduler\r\nacier\r\nacompte\r\nacquérir\r\nacronyme\r\nacteur\r\nactif\r\nactuel\r\nadepte\r\nadéquat\r\nadhésif\r\nadjectif\r\nadjuger\r\nadmettre\r\nadmirer\r\nadopter\r\nadorer\r\nadoucir\r\nadresse\r\nadroit\r\nadulte\r\nadverbe\r\naérer\r\naéronef\r\naffaire\r\naffecter\r\naffiche\r\naffreux\r\naffubler\r\nagacer\r\nagencer\r\nagile\r\nagiter\r\nagrafer\r\nagréable\r\nagrume\r\naider\r\naiguille\r\nailier\r\naimable\r\naisance\r\najouter\r\najuster\r\nalarmer\r\nalchimie\r\nalerte\r\nalgèbre\r\nalgue\r\naliéner\r\naliment\r\nalléger\r\nalliage\r\nallouer\r\nallumer\r\nalourdir\r\nalpaga\r\naltesse\r\nalvéole\r\namateur\r\nambigu\r\nambre\r\naménager\r\namertume\r\namidon\r\namiral\r\namorcer\r\namour\r\namovible\r\namphibie\r\nampleur\r\namusant\r\nanalyse\r\nanaphore\r\nanarchie\r\nanatomie\r\nancien\r\nanéantir\r\nangle\r\nangoisse\r\nanguleux\r\nanimal\r\nannexer\r\nannonce\r\nannuel\r\nanodin\r\nanomalie\r\nanonyme\r\nanormal\r\nantenne\r\nantidote\r\nanxieux\r\napaiser\r\napéritif\r\naplanir\r\napologie\r\nappareil\r\nappeler\r\napporter\r\nappuyer\r\naquarium\r\naqueduc\r\narbitre\r\narbuste\r\nardeur\r\nardoise\r\nargent\r\narlequin\r\narmature\r\narmement\r\narmoire\r\narmure\r\narpenter\r\narracher\r\narriver\r\narroser\r\narsenic\r\nartériel\r\narticle\r\naspect\r\nasphalte\r\naspirer\r\nassaut\r\nasservir\r\nassiette\r\nassocier\r\nassurer\r\nasticot\r\nastre\r\nastuce\r\natelier\r\natome\r\natrium\r\natroce\r\nattaque\r\nattentif\r\nattirer\r\nattraper\r\naubaine\r\nauberge\r\naudace\r\naudible\r\naugurer\r\naurore\r\nautomne\r\nautruche\r\navaler\r\navancer\r\navarice\r\navenir\r\naverse\r\naveugle\r\naviateur\r\navide\r\navion\r\naviser\r\navoine\r\navouer\r\navril\r\naxial\r\naxiome\r\nbadge\r\nbafouer\r\nbagage\r\nbaguette\r\nbaignade\r\nbalancer\r\nbalcon\r\nbaleine\r\nbalisage\r\nbambin\r\nbancaire\r\nbandage\r\nbanlieue\r\nbannière\r\nbanquier\r\nbarbier\r\nbaril\r\nbaron\r\nbarque\r\nbarrage\r\nbassin\r\nbastion\r\nbataille\r\nbateau\r\nbatterie\r\nbaudrier\r\nbavarder\r\nbelette\r\nbélier\r\nbelote\r\nbénéfice\r\nberceau\r\nberger\r\nberline\r\nbermuda\r\nbesace\r\nbesogne\r\nbétail\r\nbeurre\r\nbiberon\r\nbicycle\r\nbidule\r\nbijou\r\nbilan\r\nbilingue\r\nbillard\r\nbinaire\r\nbiologie\r\nbiopsie\r\nbiotype\r\nbiscuit\r\nbison\r\nbistouri\r\nbitume\r\nbizarre\r\nblafard\r\nblague\r\nblanchir\r\nblessant\r\nblinder\r\nblond\r\nbloquer\r\nblouson\r\nbobard\r\nbobine\r\nboire\r\nboiser\r\nbolide\r\nbonbon\r\nbondir\r\nbonheur\r\nbonifier\r\nbonus\r\nbordure\r\nborne\r\nbotte\r\nboucle\r\nboueux\r\nbougie\r\nboulon\r\nbouquin\r\nbourse\r\nboussole\r\nboutique\r\nboxeur\r\nbranche\r\nbrasier\r\nbrave\r\nbrebis\r\nbrèche\r\nbreuvage\r\nbricoler\r\nbrigade\r\nbrillant\r\nbrioche\r\nbrique\r\nbrochure\r\nbroder\r\nbronzer\r\nbrousse\r\nbroyeur\r\nbrume\r\nbrusque\r\nbrutal\r\nbruyant\r\nbuffle\r\nbuisson\r\nbulletin\r\nbureau\r\nburin\r\nbustier\r\nbutiner\r\nbutoir\r\nbuvable\r\nbuvette\r\ncabanon\r\ncabine\r\ncachette\r\ncadeau\r\ncadre\r\ncaféine\r\ncaillou\r\ncaisson\r\ncalculer\r\ncalepin\r\ncalibre\r\ncalmer\r\ncalomnie\r\ncalvaire\r\ncamarade\r\ncaméra\r\ncamion\r\ncampagne\r\ncanal\r\ncaneton\r\ncanon\r\ncantine\r\ncanular\r\ncapable\r\ncaporal\r\ncaprice\r\ncapsule\r\ncapter\r\ncapuche\r\ncarabine\r\ncarbone\r\ncaresser\r\ncaribou\r\ncarnage\r\ncarotte\r\ncarreau\r\ncarton\r\ncascade\r\ncasier\r\ncasque\r\ncassure\r\ncauser\r\ncaution\r\ncavalier\r\ncaverne\r\ncaviar\r\ncédille\r\nceinture\r\ncéleste\r\ncellule\r\ncendrier\r\ncensurer\r\ncentral\r\ncercle\r\ncérébral\r\ncerise\r\ncerner\r\ncerveau\r\ncesser\r\nchagrin\r\nchaise\r\nchaleur\r\nchambre\r\nchance\r\nchapitre\r\ncharbon\r\nchasseur\r\nchaton\r\nchausson\r\nchavirer\r\nchemise\r\nchenille\r\nchéquier\r\nchercher\r\ncheval\r\nchien\r\nchiffre\r\nchignon\r\nchimère\r\nchiot\r\nchlorure\r\nchocolat\r\nchoisir\r\nchose\r\nchouette\r\nchrome\r\nchute\r\ncigare\r\ncigogne\r\ncimenter\r\ncinéma\r\ncintrer\r\ncirculer\r\ncirer\r\ncirque\r\nciterne\r\ncitoyen\r\ncitron\r\ncivil\r\nclairon\r\nclameur\r\nclaquer\r\nclasse\r\nclavier\r\nclient\r\ncligner\r\nclimat\r\nclivage\r\ncloche\r\nclonage\r\ncloporte\r\ncobalt\r\ncobra\r\ncocasse\r\ncocotier\r\ncoder\r\ncodifier\r\ncoffre\r\ncogner\r\ncohésion\r\ncoiffer\r\ncoincer\r\ncolère\r\ncolibri\r\ncolline\r\ncolmater\r\ncolonel\r\ncombat\r\ncomédie\r\ncommande\r\ncompact\r\nconcert\r\nconduire\r\nconfier\r\ncongeler\r\nconnoter\r\nconsonne\r\ncontact\r\nconvexe\r\ncopain\r\ncopie\r\ncorail\r\ncorbeau\r\ncordage\r\ncorniche\r\ncorpus\r\ncorrect\r\ncortège\r\ncosmique\r\ncostume\r\ncoton\r\ncoude\r\ncoupure\r\ncourage\r\ncouteau\r\ncouvrir\r\ncoyote\r\ncrabe\r\ncrainte\r\ncravate\r\ncrayon\r\ncréature\r\ncréditer\r\ncrémeux\r\ncreuser\r\ncrevette\r\ncribler\r\ncrier\r\ncristal\r\ncritère\r\ncroire\r\ncroquer\r\ncrotale\r\ncrucial\r\ncruel\r\ncrypter\r\ncubique\r\ncueillir\r\ncuillère\r\ncuisine\r\ncuivre\r\nculminer\r\ncultiver\r\ncumuler\r\ncupide\r\ncuratif\r\ncurseur\r\ncyanure\r\ncycle\r\ncylindre\r\ncynique\r\ndaigner\r\ndamier\r\ndanger\r\ndanseur\r\ndauphin\r\ndébattre\r\ndébiter\r\ndéborder\r\ndébrider\r\ndébutant\r\ndécaler\r\ndécembre\r\ndéchirer\r\ndécider\r\ndéclarer\r\ndécorer\r\ndécrire\r\ndécupler\r\ndédale\r\ndéductif\r\ndéesse\r\ndéfensif\r\ndéfiler\r\ndéfrayer\r\ndégager\r\ndégivrer\r\ndéglutir\r\ndégrafer\r\ndéjeuner\r\ndélice\r\ndéloger\r\ndemander\r\ndemeurer\r\ndémolir\r\ndénicher\r\ndénouer\r\ndentelle\r\ndénuder\r\ndépart\r\ndépenser\r\ndéphaser\r\ndéplacer\r\ndéposer\r\ndéranger\r\ndérober\r\ndésastre\r\ndescente\r\ndésert\r\ndésigner\r\ndésobéir\r\ndessiner\r\ndestrier\r\ndétacher\r\ndétester\r\ndétourer\r\ndétresse\r\ndevancer\r\ndevenir\r\ndeviner\r\ndevoir\r\ndiable\r\ndialogue\r\ndiamant\r\ndicter\r\ndifférer\r\ndigérer\r\ndigital\r\ndigne\r\ndiluer\r\ndimanche\r\ndiminuer\r\ndioxyde\r\ndirectif\r\ndiriger\r\ndiscuter\r\ndisposer\r\ndissiper\r\ndistance\r\ndivertir\r\ndiviser\r\ndocile\r\ndocteur\r\ndogme\r\ndoigt\r\ndomaine\r\ndomicile\r\ndompter\r\ndonateur\r\ndonjon\r\ndonner\r\ndopamine\r\ndortoir\r\ndorure\r\ndosage\r\ndoseur\r\ndossier\r\ndotation\r\ndouanier\r\ndouble\r\ndouceur\r\ndouter\r\ndoyen\r\ndragon\r\ndraper\r\ndresser\r\ndribbler\r\ndroiture\r\nduperie\r\nduplexe\r\ndurable\r\ndurcir\r\ndynastie\r\néblouir\r\nécarter\r\nécharpe\r\néchelle\r\néclairer\r\néclipse\r\néclore\r\nécluse\r\nécole\r\néconomie\r\nécorce\r\nécouter\r\nécraser\r\nécrémer\r\nécrivain\r\nécrou\r\nécume\r\nécureuil\r\nédifier\r\néduquer\r\neffacer\r\neffectif\r\neffigie\r\neffort\r\neffrayer\r\neffusion\r\négaliser\r\négarer\r\néjecter\r\nélaborer\r\nélargir\r\nélectron\r\nélégant\r\néléphant\r\nélève\r\néligible\r\nélitisme\r\néloge\r\nélucider\r\néluder\r\nemballer\r\nembellir\r\nembryon\r\némeraude\r\némission\r\nemmener\r\némotion\r\némouvoir\r\nempereur\r\nemployer\r\nemporter\r\nemprise\r\némulsion\r\nencadrer\r\nenchère\r\nenclave\r\nencoche\r\nendiguer\r\nendosser\r\nendroit\r\nenduire\r\nénergie\r\nenfance\r\nenfermer\r\nenfouir\r\nengager\r\nengin\r\nenglober\r\nénigme\r\nenjamber\r\nenjeu\r\nenlever\r\nennemi\r\nennuyeux\r\nenrichir\r\nenrobage\r\nenseigne\r\nentasser\r\nentendre\r\nentier\r\nentourer\r\nentraver\r\nénumérer\r\nenvahir\r\nenviable\r\nenvoyer\r\nenzyme\r\néolien\r\népaissir\r\népargne\r\népatant\r\népaule\r\népicerie\r\népidémie\r\népier\r\népilogue\r\népine\r\népisode\r\népitaphe\r\népoque\r\népreuve\r\néprouver\r\népuisant\r\néquerre\r\néquipe\r\nériger\r\nérosion\r\nerreur\r\néruption\r\nescalier\r\nespadon\r\nespèce\r\nespiègle\r\nespoir\r\nesprit\r\nesquiver\r\nessayer\r\nessence\r\nessieu\r\nessorer\r\nestime\r\nestomac\r\nestrade\r\nétagère\r\nétaler\r\nétanche\r\nétatique\r\néteindre\r\nétendoir\r\néternel\r\néthanol\r\néthique\r\nethnie\r\nétirer\r\nétoffer\r\nétoile\r\nétonnant\r\nétourdir\r\nétrange\r\nétroit\r\nétude\r\neuphorie\r\névaluer\r\névasion\r\néventail\r\névidence\r\néviter\r\névolutif\r\névoquer\r\nexact\r\nexagérer\r\nexaucer\r\nexceller\r\nexcitant\r\nexclusif\r\nexcuse\r\nexécuter\r\nexemple\r\nexercer\r\nexhaler\r\nexhorter\r\nexigence\r\nexiler\r\nexister\r\nexotique\r\nexpédier\r\nexplorer\r\nexposer\r\nexprimer\r\nexquis\r\nextensif\r\nextraire\r\nexulter\r\nfable\r\nfabuleux\r\nfacette\r\nfacile\r\nfacture\r\nfaiblir\r\nfalaise\r\nfameux\r\nfamille\r\nfarceur\r\nfarfelu\r\nfarine\r\nfarouche\r\nfasciner\r\nfatal\r\nfatigue\r\nfaucon\r\nfautif\r\nfaveur\r\nfavori\r\nfébrile\r\nféconder\r\nfédérer\r\nfélin\r\nfemme\r\nfémur\r\nfendoir\r\nféodal\r\nfermer\r\nféroce\r\nferveur\r\nfestival\r\nfeuille\r\nfeutre\r\nfévrier\r\nfiasco\r\nficeler\r\nfictif\r\nfidèle\r\nfigure\r\nfilature\r\nfiletage\r\nfilière\r\nfilleul\r\nfilmer\r\nfilou\r\nfiltrer\r\nfinancer\r\nfinir\r\nfiole\r\nfirme\r\nfissure\r\nfixer\r\nflairer\r\nflamme\r\nflasque\r\nflatteur\r\nfléau\r\nflèche\r\nfleur\r\nflexion\r\nflocon\r\nflore\r\nfluctuer\r\nfluide\r\nfluvial\r\nfolie\r\nfonderie\r\nfongible\r\nfontaine\r\nforcer\r\nforgeron\r\nformuler\r\nfortune\r\nfossile\r\nfoudre\r\nfougère\r\nfouiller\r\nfoulure\r\nfourmi\r\nfragile\r\nfraise\r\nfranchir\r\nfrapper\r\nfrayeur\r\nfrégate\r\nfreiner\r\nfrelon\r\nfrémir\r\nfrénésie\r\nfrère\r\nfriable\r\nfriction\r\nfrisson\r\nfrivole\r\nfroid\r\nfromage\r\nfrontal\r\nfrotter\r\nfruit\r\nfugitif\r\nfuite\r\nfureur\r\nfurieux\r\nfurtif\r\nfusion\r\nfutur\r\ngagner\r\ngalaxie\r\ngalerie\r\ngambader\r\ngarantir\r\ngardien\r\ngarnir\r\ngarrigue\r\ngazelle\r\ngazon\r\ngéant\r\ngélatine\r\ngélule\r\ngendarme\r\ngénéral\r\ngénie\r\ngenou\r\ngentil\r\ngéologie\r\ngéomètre\r\ngéranium\r\ngerme\r\ngestuel\r\ngeyser\r\ngibier\r\ngicler\r\ngirafe\r\ngivre\r\nglace\r\nglaive\r\nglisser\r\nglobe\r\ngloire\r\nglorieux\r\ngolfeur\r\ngomme\r\ngonfler\r\ngorge\r\ngorille\r\ngoudron\r\ngouffre\r\ngoulot\r\ngoupille\r\ngourmand\r\ngoutte\r\ngraduel\r\ngraffiti\r\ngraine\r\ngrand\r\ngrappin\r\ngratuit\r\ngravir\r\ngrenat\r\ngriffure\r\ngriller\r\ngrimper\r\ngrogner\r\ngronder\r\ngrotte\r\ngroupe\r\ngruger\r\ngrutier\r\ngruyère\r\nguépard\r\nguerrier\r\nguide\r\nguimauve\r\nguitare\r\ngustatif\r\ngymnaste\r\ngyrostat\r\nhabitude\r\nhachoir\r\nhalte\r\nhameau\r\nhangar\r\nhanneton\r\nharicot\r\nharmonie\r\nharpon\r\nhasard\r\nhélium\r\nhématome\r\nherbe\r\nhérisson\r\nhermine\r\nhéron\r\nhésiter\r\nheureux\r\nhiberner\r\nhibou\r\nhilarant\r\nhistoire\r\nhiver\r\nhomard\r\nhommage\r\nhomogène\r\nhonneur\r\nhonorer\r\nhonteux\r\nhorde\r\nhorizon\r\nhorloge\r\nhormone\r\nhorrible\r\nhouleux\r\nhousse\r\nhublot\r\nhuileux\r\nhumain\r\nhumble\r\nhumide\r\nhumour\r\nhurler\r\nhydromel\r\nhygiène\r\nhymne\r\nhypnose\r\nidylle\r\nignorer\r\niguane\r\nillicite\r\nillusion\r\nimage\r\nimbiber\r\nimiter\r\nimmense\r\nimmobile\r\nimmuable\r\nimpact\r\nimpérial\r\nimplorer\r\nimposer\r\nimprimer\r\nimputer\r\nincarner\r\nincendie\r\nincident\r\nincliner\r\nincolore\r\nindexer\r\nindice\r\ninductif\r\ninédit\r\nineptie\r\ninexact\r\ninfini\r\ninfliger\r\ninformer\r\ninfusion\r\ningérer\r\ninhaler\r\ninhiber\r\ninjecter\r\ninjure\r\ninnocent\r\ninoculer\r\ninonder\r\ninscrire\r\ninsecte\r\ninsigne\r\ninsolite\r\ninspirer\r\ninstinct\r\ninsulter\r\nintact\r\nintense\r\nintime\r\nintrigue\r\nintuitif\r\ninutile\r\ninvasion\r\ninventer\r\ninviter\r\ninvoquer\r\nironique\r\nirradier\r\nirréel\r\nirriter\r\nisoler\r\nivoire\r\nivresse\r\njaguar\r\njaillir\r\njambe\r\njanvier\r\njardin\r\njauger\r\njaune\r\njavelot\r\njetable\r\njeton\r\njeudi\r\njeunesse\r\njoindre\r\njoncher\r\njongler\r\njoueur\r\njouissif\r\njournal\r\njovial\r\njoyau\r\njoyeux\r\njubiler\r\njugement\r\njunior\r\njupon\r\njuriste\r\njustice\r\njuteux\r\njuvénile\r\nkayak\r\nkimono\r\nkiosque\r\nlabel\r\nlabial\r\nlabourer\r\nlacérer\r\nlactose\r\nlagune\r\nlaine\r\nlaisser\r\nlaitier\r\nlambeau\r\nlamelle\r\nlampe\r\nlanceur\r\nlangage\r\nlanterne\r\nlapin\r\nlargeur\r\nlarme\r\nlaurier\r\nlavabo\r\nlavoir\r\nlecture\r\nlégal\r\nléger\r\nlégume\r\nlessive\r\nlettre\r\nlevier\r\nlexique\r\nlézard\r\nliasse\r\nlibérer\r\nlibre\r\nlicence\r\nlicorne\r\nliège\r\nlièvre\r\nligature\r\nligoter\r\nligue\r\nlimer\r\nlimite\r\nlimonade\r\nlimpide\r\nlinéaire\r\nlingot\r\nlionceau\r\nliquide\r\nlisière\r\nlister\r\nlithium\r\nlitige\r\nlittoral\r\nlivreur\r\nlogique\r\nlointain\r\nloisir\r\nlombric\r\nloterie\r\nlouer\r\nlourd\r\nloutre\r\nlouve\r\nloyal\r\nlubie\r\nlucide\r\nlucratif\r\nlueur\r\nlugubre\r\nluisant\r\nlumière\r\nlunaire\r\nlundi\r\nluron\r\nlutter\r\nluxueux\r\nmachine\r\nmagasin\r\nmagenta\r\nmagique\r\nmaigre\r\nmaillon\r\nmaintien\r\nmairie\r\nmaison\r\nmajorer\r\nmalaxer\r\nmaléfice\r\nmalheur\r\nmalice\r\nmallette\r\nmammouth\r\nmandater\r\nmaniable\r\nmanquant\r\nmanteau\r\nmanuel\r\nmarathon\r\nmarbre\r\nmarchand\r\nmardi\r\nmaritime\r\nmarqueur\r\nmarron\r\nmarteler\r\nmascotte\r\nmassif\r\nmatériel\r\nmatière\r\nmatraque\r\nmaudire\r\nmaussade\r\nmauve\r\nmaximal\r\nméchant\r\nméconnu\r\nmédaille\r\nmédecin\r\nméditer\r\nméduse\r\nmeilleur\r\nmélange\r\nmélodie\r\nmembre\r\nmémoire\r\nmenacer\r\nmener\r\nmenhir\r\nmensonge\r\nmentor\r\nmercredi\r\nmérite\r\nmerle\r\nmessager\r\nmesure\r\nmétal\r\nmétéore\r\nméthode\r\nmétier\r\nmeuble\r\nmiauler\r\nmicrobe\r\nmiette\r\nmignon\r\nmigrer\r\nmilieu\r\nmillion\r\nmimique\r\nmince\r\nminéral\r\nminimal\r\nminorer\r\nminute\r\nmiracle\r\nmiroiter\r\nmissile\r\nmixte\r\nmobile\r\nmoderne\r\nmoelleux\r\nmondial\r\nmoniteur\r\nmonnaie\r\nmonotone\r\nmonstre\r\nmontagne\r\nmonument\r\nmoqueur\r\nmorceau\r\nmorsure\r\nmortier\r\nmoteur\r\nmotif\r\nmouche\r\nmoufle\r\nmoulin\r\nmousson\r\nmouton\r\nmouvant\r\nmultiple\r\nmunition\r\nmuraille\r\nmurène\r\nmurmure\r\nmuscle\r\nmuséum\r\nmusicien\r\nmutation\r\nmuter\r\nmutuel\r\nmyriade\r\nmyrtille\r\nmystère\r\nmythique\r\nnageur\r\nnappe\r\nnarquois\r\nnarrer\r\nnatation\r\nnation\r\nnature\r\nnaufrage\r\nnautique\r\nnavire\r\nnébuleux\r\nnectar\r\nnéfaste\r\nnégation\r\nnégliger\r\nnégocier\r\nneige\r\nnerveux\r\nnettoyer\r\nneurone\r\nneutron\r\nneveu\r\nniche\r\nnickel\r\nnitrate\r\nniveau\r\nnoble\r\nnocif\r\nnocturne\r\nnoirceur\r\nnoisette\r\nnomade\r\nnombreux\r\nnommer\r\nnormatif\r\nnotable\r\nnotifier\r\nnotoire\r\nnourrir\r\nnouveau\r\nnovateur\r\nnovembre\r\nnovice\r\nnuage\r\nnuancer\r\nnuire\r\nnuisible\r\nnuméro\r\nnuptial\r\nnuque\r\nnutritif\r\nobéir\r\nobjectif\r\nobliger\r\nobscur\r\nobserver\r\nobstacle\r\nobtenir\r\nobturer\r\noccasion\r\noccuper\r\nocéan\r\noctobre\r\noctroyer\r\noctupler\r\noculaire\r\nodeur\r\nodorant\r\noffenser\r\nofficier\r\noffrir\r\nogive\r\noiseau\r\noisillon\r\nolfactif\r\nolivier\r\nombrage\r\nomettre\r\nonctueux\r\nonduler\r\nonéreux\r\nonirique\r\nopale\r\nopaque\r\nopérer\r\nopinion\r\nopportun\r\nopprimer\r\nopter\r\noptique\r\norageux\r\norange\r\norbite\r\nordonner\r\noreille\r\norgane\r\norgueil\r\norifice\r\nornement\r\norque\r\nortie\r\nosciller\r\nosmose\r\nossature\r\notarie\r\nouragan\r\nourson\r\noutil\r\noutrager\r\nouvrage\r\novation\r\noxyde\r\noxygène\r\nozone\r\npaisible\r\npalace\r\npalmarès\r\npalourde\r\npalper\r\npanache\r\npanda\r\npangolin\r\npaniquer\r\npanneau\r\npanorama\r\npantalon\r\npapaye\r\npapier\r\npapoter\r\npapyrus\r\nparadoxe\r\nparcelle\r\nparesse\r\nparfumer\r\nparler\r\nparole\r\nparrain\r\nparsemer\r\npartager\r\nparure\r\nparvenir\r\npassion\r\npastèque\r\npaternel\r\npatience\r\npatron\r\npavillon\r\npavoiser\r\npayer\r\npaysage\r\npeigne\r\npeintre\r\npelage\r\npélican\r\npelle\r\npelouse\r\npeluche\r\npendule\r\npénétrer\r\npénible\r\npensif\r\npénurie\r\npépite\r\npéplum\r\nperdrix\r\nperforer\r\npériode\r\npermuter\r\nperplexe\r\npersil\r\nperte\r\npeser\r\npétale\r\npetit\r\npétrir\r\npeuple\r\npharaon\r\nphobie\r\nphoque\r\nphoton\r\nphrase\r\nphysique\r\npiano\r\npictural\r\npièce\r\npierre\r\npieuvre\r\npilote\r\npinceau\r\npipette\r\npiquer\r\npirogue\r\npiscine\r\npiston\r\npivoter\r\npixel\r\npizza\r\nplacard\r\nplafond\r\nplaisir\r\nplaner\r\nplaque\r\nplastron\r\nplateau\r\npleurer\r\nplexus\r\npliage\r\nplomb\r\nplonger\r\npluie\r\nplumage\r\npochette\r\npoésie\r\npoète\r\npointe\r\npoirier\r\npoisson\r\npoivre\r\npolaire\r\npolicier\r\npollen\r\npolygone\r\npommade\r\npompier\r\nponctuel\r\npondérer\r\nponey\r\nportique\r\nposition\r\nposséder\r\nposture\r\npotager\r\npoteau\r\npotion\r\npouce\r\npoulain\r\npoumon\r\npourpre\r\npoussin\r\npouvoir\r\nprairie\r\npratique\r\nprécieux\r\nprédire\r\npréfixe\r\nprélude\r\nprénom\r\nprésence\r\nprétexte\r\nprévoir\r\nprimitif\r\nprince\r\nprison\r\npriver\r\nproblème\r\nprocéder\r\nprodige\r\nprofond\r\nprogrès\r\nproie\r\nprojeter\r\nprologue\r\npromener\r\npropre\r\nprospère\r\nprotéger\r\nprouesse\r\nproverbe\r\nprudence\r\npruneau\r\npsychose\r\npublic\r\npuceron\r\npuiser\r\npulpe\r\npulsar\r\npunaise\r\npunitif\r\npupitre\r\npurifier\r\npuzzle\r\npyramide\r\nquasar\r\nquerelle\r\nquestion\r\nquiétude\r\nquitter\r\nquotient\r\nracine\r\nraconter\r\nradieux\r\nragondin\r\nraideur\r\nraisin\r\nralentir\r\nrallonge\r\nramasser\r\nrapide\r\nrasage\r\nratisser\r\nravager\r\nravin\r\nrayonner\r\nréactif\r\nréagir\r\nréaliser\r\nréanimer\r\nrecevoir\r\nréciter\r\nréclamer\r\nrécolter\r\nrecruter\r\nreculer\r\nrecycler\r\nrédiger\r\nredouter\r\nrefaire\r\nréflexe\r\nréformer\r\nrefrain\r\nrefuge\r\nrégalien\r\nrégion\r\nréglage\r\nrégulier\r\nréitérer\r\nrejeter\r\nrejouer\r\nrelatif\r\nrelever\r\nrelief\r\nremarque\r\nremède\r\nremise\r\nremonter\r\nremplir\r\nremuer\r\nrenard\r\nrenfort\r\nrenifler\r\nrenoncer\r\nrentrer\r\nrenvoi\r\nreplier\r\nreporter\r\nreprise\r\nreptile\r\nrequin\r\nréserve\r\nrésineux\r\nrésoudre\r\nrespect\r\nrester\r\nrésultat\r\nrétablir\r\nretenir\r\nréticule\r\nretomber\r\nretracer\r\nréunion\r\nréussir\r\nrevanche\r\nrevivre\r\nrévolte\r\nrévulsif\r\nrichesse\r\nrideau\r\nrieur\r\nrigide\r\nrigoler\r\nrincer\r\nriposter\r\nrisible\r\nrisque\r\nrituel\r\nrival\r\nrivière\r\nrocheux\r\nromance\r\nrompre\r\nronce\r\nrondin\r\nroseau\r\nrosier\r\nrotatif\r\nrotor\r\nrotule\r\nrouge\r\nrouille\r\nrouleau\r\nroutine\r\nroyaume\r\nruban\r\nrubis\r\nruche\r\nruelle\r\nrugueux\r\nruiner\r\nruisseau\r\nruser\r\nrustique\r\nrythme\r\nsabler\r\nsaboter\r\nsabre\r\nsacoche\r\nsafari\r\nsagesse\r\nsaisir\r\nsalade\r\nsalive\r\nsalon\r\nsaluer\r\nsamedi\r\nsanction\r\nsanglier\r\nsarcasme\r\nsardine\r\nsaturer\r\nsaugrenu\r\nsaumon\r\nsauter\r\nsauvage\r\nsavant\r\nsavonner\r\nscalpel\r\nscandale\r\nscélérat\r\nscénario\r\nsceptre\r\nschéma\r\nscience\r\nscinder\r\nscore\r\nscrutin\r\nsculpter\r\nséance\r\nsécable\r\nsécher\r\nsecouer\r\nsécréter\r\nsédatif\r\nséduire\r\nseigneur\r\nséjour\r\nsélectif\r\nsemaine\r\nsembler\r\nsemence\r\nséminal\r\nsénateur\r\nsensible\r\nsentence\r\nséparer\r\nséquence\r\nserein\r\nsergent\r\nsérieux\r\nserrure\r\nsérum\r\nservice\r\nsésame\r\nsévir\r\nsevrage\r\nsextuple\r\nsidéral\r\nsiècle\r\nsiéger\r\nsiffler\r\nsigle\r\nsignal\r\nsilence\r\nsilicium\r\nsimple\r\nsincère\r\nsinistre\r\nsiphon\r\nsirop\r\nsismique\r\nsituer\r\nskier\r\nsocial\r\nsocle\r\nsodium\r\nsoigneux\r\nsoldat\r\nsoleil\r\nsolitude\r\nsoluble\r\nsombre\r\nsommeil\r\nsomnoler\r\nsonde\r\nsongeur\r\nsonnette\r\nsonore\r\nsorcier\r\nsortir\r\nsosie\r\nsottise\r\nsoucieux\r\nsoudure\r\nsouffle\r\nsoulever\r\nsoupape\r\nsource\r\nsoutirer\r\nsouvenir\r\nspacieux\r\nspatial\r\nspécial\r\nsphère\r\nspiral\r\nstable\r\nstation\r\nsternum\r\nstimulus\r\nstipuler\r\nstrict\r\nstudieux\r\nstupeur\r\nstyliste\r\nsublime\r\nsubstrat\r\nsubtil\r\nsubvenir\r\nsuccès\r\nsucre\r\nsuffixe\r\nsuggérer\r\nsuiveur\r\nsulfate\r\nsuperbe\r\nsupplier\r\nsurface\r\nsuricate\r\nsurmener\r\nsurprise\r\nsursaut\r\nsurvie\r\nsuspect\r\nsyllabe\r\nsymbole\r\nsymétrie\r\nsynapse\r\nsyntaxe\r\nsystème\r\ntabac\r\ntablier\r\ntactile\r\ntailler\r\ntalent\r\ntalisman\r\ntalonner\r\ntambour\r\ntamiser\r\ntangible\r\ntapis\r\ntaquiner\r\ntarder\r\ntarif\r\ntartine\r\ntasse\r\ntatami\r\ntatouage\r\ntaupe\r\ntaureau\r\ntaxer\r\ntémoin\r\ntemporel\r\ntenaille\r\ntendre\r\nteneur\r\ntenir\r\ntension\r\nterminer\r\nterne\r\nterrible\r\ntétine\r\ntexte\r\nthème\r\nthéorie\r\nthérapie\r\nthorax\r\ntibia\r\ntiède\r\ntimide\r\ntirelire\r\ntiroir\r\ntissu\r\ntitane\r\ntitre\r\ntituber\r\ntoboggan\r\ntolérant\r\ntomate\r\ntonique\r\ntonneau\r\ntoponyme\r\ntorche\r\ntordre\r\ntornade\r\ntorpille\r\ntorrent\r\ntorse\r\ntortue\r\ntotem\r\ntoucher\r\ntournage\r\ntousser\r\ntoxine\r\ntraction\r\ntrafic\r\ntragique\r\ntrahir\r\ntrain\r\ntrancher\r\ntravail\r\ntrèfle\r\ntremper\r\ntrésor\r\ntreuil\r\ntriage\r\ntribunal\r\ntricoter\r\ntrilogie\r\ntriomphe\r\ntripler\r\ntriturer\r\ntrivial\r\ntrombone\r\ntronc\r\ntropical\r\ntroupeau\r\ntuile\r\ntulipe\r\ntumulte\r\ntunnel\r\nturbine\r\ntuteur\r\ntutoyer\r\ntuyau\r\ntympan\r\ntyphon\r\ntypique\r\ntyran\r\nubuesque\r\nultime\r\nultrason\r\nunanime\r\nunifier\r\nunion\r\nunique\r\nunitaire\r\nunivers\r\nuranium\r\nurbain\r\nurticant\r\nusage\r\nusine\r\nusuel\r\nusure\r\nutile\r\nutopie\r\nvacarme\r\nvaccin\r\nvagabond\r\nvague\r\nvaillant\r\nvaincre\r\nvaisseau\r\nvalable\r\nvalise\r\nvallon\r\nvalve\r\nvampire\r\nvanille\r\nvapeur\r\nvarier\r\nvaseux\r\nvassal\r\nvaste\r\nvecteur\r\nvedette\r\nvégétal\r\nvéhicule\r\nveinard\r\nvéloce\r\nvendredi\r\nvénérer\r\nvenger\r\nvenimeux\r\nventouse\r\nverdure\r\nvérin\r\nvernir\r\nverrou\r\nverser\r\nvertu\r\nveston\r\nvétéran\r\nvétuste\r\nvexant\r\nvexer\r\nviaduc\r\nviande\r\nvictoire\r\nvidange\r\nvidéo\r\nvignette\r\nvigueur\r\nvilain\r\nvillage\r\nvinaigre\r\nviolon\r\nvipère\r\nvirement\r\nvirtuose\r\nvirus\r\nvisage\r\nviseur\r\nvision\r\nvisqueux\r\nvisuel\r\nvital\r\nvitesse\r\nviticole\r\nvitrine\r\nvivace\r\nvivipare\r\nvocation\r\nvoguer\r\nvoile\r\nvoisin\r\nvoiture\r\nvolaille\r\nvolcan\r\nvoltiger\r\nvolume\r\nvorace\r\nvortex\r\nvoter\r\nvouloir\r\nvoyage\r\nvoyelle\r\nwagon\r\nxénon\r\nyacht\r\nzèbre\r\nzénith\r\nzeste\r\nzoologie`.split('\\n');\r\n", "export const wordlist = `abaco\r\nabbaglio\r\nabbinato\r\nabete\r\nabisso\r\nabolire\r\nabrasivo\r\nabrogato\r\naccadere\r\naccenno\r\naccusato\r\nacetone\r\nachille\r\nacido\r\nacqua\r\nacre\r\nacrilico\r\nacrobata\r\nacuto\r\nadagio\r\naddebito\r\naddome\r\nadeguato\r\naderire\r\nadipe\r\nadottare\r\nadulare\r\naffabile\r\naffetto\r\naffisso\r\naffranto\r\naforisma\r\nafoso\r\nafricano\r\nagave\r\nagente\r\nagevole\r\naggancio\r\nagire\r\nagitare\r\nagonismo\r\nagricolo\r\nagrumeto\r\naguzzo\r\nalabarda\r\nalato\r\nalbatro\r\nalberato\r\nalbo\r\nalbume\r\nalce\r\nalcolico\r\nalettone\r\nalfa\r\nalgebra\r\naliante\r\nalibi\r\nalimento\r\nallagato\r\nallegro\r\nallievo\r\nallodola\r\nallusivo\r\nalmeno\r\nalogeno\r\nalpaca\r\nalpestre\r\naltalena\r\nalterno\r\nalticcio\r\naltrove\r\nalunno\r\nalveolo\r\nalzare\r\namalgama\r\namanita\r\namarena\r\nambito\r\nambrato\r\nameba\r\namerica\r\nametista\r\namico\r\nammasso\r\nammenda\r\nammirare\r\nammonito\r\namore\r\nampio\r\nampliare\r\namuleto\r\nanacardo\r\nanagrafe\r\nanalista\r\nanarchia\r\nanatra\r\nanca\r\nancella\r\nancora\r\nandare\r\nandrea\r\nanello\r\nangelo\r\nangolare\r\nangusto\r\nanima\r\nannegare\r\nannidato\r\nanno\r\nannuncio\r\nanonimo\r\nanticipo\r\nanzi\r\napatico\r\napertura\r\napode\r\napparire\r\nappetito\r\nappoggio\r\napprodo\r\nappunto\r\naprile\r\narabica\r\narachide\r\naragosta\r\naraldica\r\narancio\r\naratura\r\narazzo\r\narbitro\r\narchivio\r\nardito\r\narenile\r\nargento\r\nargine\r\narguto\r\naria\r\narmonia\r\narnese\r\narredato\r\narringa\r\narrosto\r\narsenico\r\narso\r\nartefice\r\narzillo\r\nasciutto\r\nascolto\r\nasepsi\r\nasettico\r\nasfalto\r\nasino\r\nasola\r\naspirato\r\naspro\r\nassaggio\r\nasse\r\nassoluto\r\nassurdo\r\nasta\r\nastenuto\r\nastice\r\nastratto\r\natavico\r\nateismo\r\natomico\r\natono\r\nattesa\r\nattivare\r\nattorno\r\nattrito\r\nattuale\r\nausilio\r\naustria\r\nautista\r\nautonomo\r\nautunno\r\navanzato\r\navere\r\navvenire\r\navviso\r\navvolgere\r\nazione\r\nazoto\r\nazzimo\r\nazzurro\r\nbabele\r\nbaccano\r\nbacino\r\nbaco\r\nbadessa\r\nbadilata\r\nbagnato\r\nbaita\r\nbalcone\r\nbaldo\r\nbalena\r\nballata\r\nbalzano\r\nbambino\r\nbandire\r\nbaraonda\r\nbarbaro\r\nbarca\r\nbaritono\r\nbarlume\r\nbarocco\r\nbasilico\r\nbasso\r\nbatosta\r\nbattuto\r\nbaule\r\nbava\r\nbavosa\r\nbecco\r\nbeffa\r\nbelgio\r\nbelva\r\nbenda\r\nbenevole\r\nbenigno\r\nbenzina\r\nbere\r\nberlina\r\nbeta\r\nbibita\r\nbici\r\nbidone\r\nbifido\r\nbiga\r\nbilancia\r\nbimbo\r\nbinocolo\r\nbiologo\r\nbipede\r\nbipolare\r\nbirbante\r\nbirra\r\nbiscotto\r\nbisesto\r\nbisnonno\r\nbisonte\r\nbisturi\r\nbizzarro\r\nblando\r\nblatta\r\nbollito\r\nbonifico\r\nbordo\r\nbosco\r\nbotanico\r\nbottino\r\nbozzolo\r\nbraccio\r\nbradipo\r\nbrama\r\nbranca\r\nbravura\r\nbretella\r\nbrevetto\r\nbrezza\r\nbriglia\r\nbrillante\r\nbrindare\r\nbroccolo\r\nbrodo\r\nbronzina\r\nbrullo\r\nbruno\r\nbubbone\r\nbuca\r\nbudino\r\nbuffone\r\nbuio\r\nbulbo\r\nbuono\r\nburlone\r\nburrasca\r\nbussola\r\nbusta\r\ncadetto\r\ncaduco\r\ncalamaro\r\ncalcolo\r\ncalesse\r\ncalibro\r\ncalmo\r\ncaloria\r\ncambusa\r\ncamerata\r\ncamicia\r\ncammino\r\ncamola\r\ncampale\r\ncanapa\r\ncandela\r\ncane\r\ncanino\r\ncanotto\r\ncantina\r\ncapace\r\ncapello\r\ncapitolo\r\ncapogiro\r\ncappero\r\ncapra\r\ncapsula\r\ncarapace\r\ncarcassa\r\ncardo\r\ncarisma\r\ncarovana\r\ncarretto\r\ncartolina\r\ncasaccio\r\ncascata\r\ncaserma\r\ncaso\r\ncassone\r\ncastello\r\ncasuale\r\ncatasta\r\ncatena\r\ncatrame\r\ncauto\r\ncavillo\r\ncedibile\r\ncedrata\r\ncefalo\r\ncelebre\r\ncellulare\r\ncena\r\ncenone\r\ncentesimo\r\nceramica\r\ncercare\r\ncerto\r\ncerume\r\ncervello\r\ncesoia\r\ncespo\r\nceto\r\nchela\r\nchiaro\r\nchicca\r\nchiedere\r\nchimera\r\nchina\r\nchirurgo\r\nchitarra\r\nciao\r\nciclismo\r\ncifrare\r\ncigno\r\ncilindro\r\nciottolo\r\ncirca\r\ncirrosi\r\ncitrico\r\ncittadino\r\nciuffo\r\ncivetta\r\ncivile\r\nclassico\r\nclinica\r\ncloro\r\ncocco\r\ncodardo\r\ncodice\r\ncoerente\r\ncognome\r\ncollare\r\ncolmato\r\ncolore\r\ncolposo\r\ncoltivato\r\ncolza\r\ncoma\r\ncometa\r\ncommando\r\ncomodo\r\ncomputer\r\ncomune\r\nconciso\r\ncondurre\r\nconferma\r\ncongelare\r\nconiuge\r\nconnesso\r\nconoscere\r\nconsumo\r\ncontinuo\r\nconvegno\r\ncoperto\r\ncopione\r\ncoppia\r\ncopricapo\r\ncorazza\r\ncordata\r\ncoricato\r\ncornice\r\ncorolla\r\ncorpo\r\ncorredo\r\ncorsia\r\ncortese\r\ncosmico\r\ncostante\r\ncottura\r\ncovato\r\ncratere\r\ncravatta\r\ncreato\r\ncredere\r\ncremoso\r\ncrescita\r\ncreta\r\ncriceto\r\ncrinale\r\ncrisi\r\ncritico\r\ncroce\r\ncronaca\r\ncrostata\r\ncruciale\r\ncrusca\r\ncucire\r\ncuculo\r\ncugino\r\ncullato\r\ncupola\r\ncuratore\r\ncursore\r\ncurvo\r\ncuscino\r\ncustode\r\ndado\r\ndaino\r\ndalmata\r\ndamerino\r\ndaniela\r\ndannoso\r\ndanzare\r\ndatato\r\ndavanti\r\ndavvero\r\ndebutto\r\ndecennio\r\ndeciso\r\ndeclino\r\ndecollo\r\ndecreto\r\ndedicato\r\ndefinito\r\ndeforme\r\ndegno\r\ndelegare\r\ndelfino\r\ndelirio\r\ndelta\r\ndemenza\r\ndenotato\r\ndentro\r\ndeposito\r\nderapata\r\nderivare\r\nderoga\r\ndescritto\r\ndeserto\r\ndesiderio\r\ndesumere\r\ndetersivo\r\ndevoto\r\ndiametro\r\ndicembre\r\ndiedro\r\ndifeso\r\ndiffuso\r\ndigerire\r\ndigitale\r\ndiluvio\r\ndinamico\r\ndinnanzi\r\ndipinto\r\ndiploma\r\ndipolo\r\ndiradare\r\ndire\r\ndirotto\r\ndirupo\r\ndisagio\r\ndiscreto\r\ndisfare\r\ndisgelo\r\ndisposto\r\ndistanza\r\ndisumano\r\ndito\r\ndivano\r\ndivelto\r\ndividere\r\ndivorato\r\ndoblone\r\ndocente\r\ndoganale\r\ndogma\r\ndolce\r\ndomato\r\ndomenica\r\ndominare\r\ndondolo\r\ndono\r\ndormire\r\ndote\r\ndottore\r\ndovuto\r\ndozzina\r\ndrago\r\ndruido\r\ndubbio\r\ndubitare\r\nducale\r\nduna\r\nduomo\r\nduplice\r\nduraturo\r\nebano\r\neccesso\r\necco\r\neclissi\r\neconomia\r\nedera\r\nedicola\r\nedile\r\neditoria\r\neducare\r\negemonia\r\negli\r\negoismo\r\negregio\r\nelaborato\r\nelargire\r\nelegante\r\nelencato\r\neletto\r\nelevare\r\nelfico\r\nelica\r\nelmo\r\nelsa\r\neluso\r\nemanato\r\nemblema\r\nemesso\r\nemiro\r\nemotivo\r\nemozione\r\nempirico\r\nemulo\r\nendemico\r\nenduro\r\nenergia\r\nenfasi\r\nenoteca\r\nentrare\r\nenzima\r\nepatite\r\nepilogo\r\nepisodio\r\nepocale\r\neppure\r\nequatore\r\nerario\r\nerba\r\nerboso\r\nerede\r\neremita\r\nerigere\r\nermetico\r\neroe\r\nerosivo\r\nerrante\r\nesagono\r\nesame\r\nesanime\r\nesaudire\r\nesca\r\nesempio\r\nesercito\r\nesibito\r\nesigente\r\nesistere\r\nesito\r\nesofago\r\nesortato\r\nesoso\r\nespanso\r\nespresso\r\nessenza\r\nesso\r\nesteso\r\nestimare\r\nestonia\r\nestroso\r\nesultare\r\netilico\r\netnico\r\netrusco\r\netto\r\neuclideo\r\neuropa\r\nevaso\r\nevidenza\r\nevitato\r\nevoluto\r\nevviva\r\nfabbrica\r\nfaccenda\r\nfachiro\r\nfalco\r\nfamiglia\r\nfanale\r\nfanfara\r\nfango\r\nfantasma\r\nfare\r\nfarfalla\r\nfarinoso\r\nfarmaco\r\nfascia\r\nfastoso\r\nfasullo\r\nfaticare\r\nfato\r\nfavoloso\r\nfebbre\r\nfecola\r\nfede\r\nfegato\r\nfelpa\r\nfeltro\r\nfemmina\r\nfendere\r\nfenomeno\r\nfermento\r\nferro\r\nfertile\r\nfessura\r\nfestivo\r\nfetta\r\nfeudo\r\nfiaba\r\nfiducia\r\nfifa\r\nfigurato\r\nfilo\r\nfinanza\r\nfinestra\r\nfinire\r\nfiore\r\nfiscale\r\nfisico\r\nfiume\r\nflacone\r\nflamenco\r\nflebo\r\nflemma\r\nflorido\r\nfluente\r\nfluoro\r\nfobico\r\nfocaccia\r\nfocoso\r\nfoderato\r\nfoglio\r\nfolata\r\nfolclore\r\nfolgore\r\nfondente\r\nfonetico\r\nfonia\r\nfontana\r\nforbito\r\nforchetta\r\nforesta\r\nformica\r\nfornaio\r\nforo\r\nfortezza\r\nforzare\r\nfosfato\r\nfosso\r\nfracasso\r\nfrana\r\nfrassino\r\nfratello\r\nfreccetta\r\nfrenata\r\nfresco\r\nfrigo\r\nfrollino\r\nfronde\r\nfrugale\r\nfrutta\r\nfucilata\r\nfucsia\r\nfuggente\r\nfulmine\r\nfulvo\r\nfumante\r\nfumetto\r\nfumoso\r\nfune\r\nfunzione\r\nfuoco\r\nfurbo\r\nfurgone\r\nfurore\r\nfuso\r\nfutile\r\ngabbiano\r\ngaffe\r\ngalateo\r\ngallina\r\ngaloppo\r\ngambero\r\ngamma\r\ngaranzia\r\ngarbo\r\ngarofano\r\ngarzone\r\ngasdotto\r\ngasolio\r\ngastrico\r\ngatto\r\ngaudio\r\ngazebo\r\ngazzella\r\ngeco\r\ngelatina\r\ngelso\r\ngemello\r\ngemmato\r\ngene\r\ngenitore\r\ngennaio\r\ngenotipo\r\ngergo\r\nghepardo\r\nghiaccio\r\nghisa\r\ngiallo\r\ngilda\r\nginepro\r\ngiocare\r\ngioiello\r\ngiorno\r\ngiove\r\ngirato\r\ngirone\r\ngittata\r\ngiudizio\r\ngiurato\r\ngiusto\r\nglobulo\r\nglutine\r\ngnomo\r\ngobba\r\ngolf\r\ngomito\r\ngommone\r\ngonfio\r\ngonna\r\ngoverno\r\ngracile\r\ngrado\r\ngrafico\r\ngrammo\r\ngrande\r\ngrattare\r\ngravoso\r\ngrazia\r\ngreca\r\ngregge\r\ngrifone\r\ngrigio\r\ngrinza\r\ngrotta\r\ngruppo\r\nguadagno\r\nguaio\r\nguanto\r\nguardare\r\ngufo\r\nguidare\r\nibernato\r\nicona\r\nidentico\r\nidillio\r\nidolo\r\nidra\r\nidrico\r\nidrogeno\r\nigiene\r\nignaro\r\nignorato\r\nilare\r\nilleso\r\nillogico\r\nilludere\r\nimballo\r\nimbevuto\r\nimbocco\r\nimbuto\r\nimmane\r\nimmerso\r\nimmolato\r\nimpacco\r\nimpeto\r\nimpiego\r\nimporto\r\nimpronta\r\ninalare\r\ninarcare\r\ninattivo\r\nincanto\r\nincendio\r\ninchino\r\nincisivo\r\nincluso\r\nincontro\r\nincrocio\r\nincubo\r\nindagine\r\nindia\r\nindole\r\ninedito\r\ninfatti\r\ninfilare\r\ninflitto\r\ningaggio\r\ningegno\r\ninglese\r\ningordo\r\ningrosso\r\ninnesco\r\ninodore\r\ninoltrare\r\ninondato\r\ninsano\r\ninsetto\r\ninsieme\r\ninsonnia\r\ninsulina\r\nintasato\r\nintero\r\nintonaco\r\nintuito\r\ninumidire\r\ninvalido\r\ninvece\r\ninvito\r\niperbole\r\nipnotico\r\nipotesi\r\nippica\r\niride\r\nirlanda\r\nironico\r\nirrigato\r\nirrorare\r\nisolato\r\nisotopo\r\nisterico\r\nistituto\r\nistrice\r\nitalia\r\niterare\r\nlabbro\r\nlabirinto\r\nlacca\r\nlacerato\r\nlacrima\r\nlacuna\r\nladdove\r\nlago\r\nlampo\r\nlancetta\r\nlanterna\r\nlardoso\r\nlarga\r\nlaringe\r\nlastra\r\nlatenza\r\nlatino\r\nlattuga\r\nlavagna\r\nlavoro\r\nlegale\r\nleggero\r\nlembo\r\nlentezza\r\nlenza\r\nleone\r\nlepre\r\nlesivo\r\nlessato\r\nlesto\r\nletterale\r\nleva\r\nlevigato\r\nlibero\r\nlido\r\nlievito\r\nlilla\r\nlimatura\r\nlimitare\r\nlimpido\r\nlineare\r\nlingua\r\nliquido\r\nlira\r\nlirica\r\nlisca\r\nlite\r\nlitigio\r\nlivrea\r\nlocanda\r\nlode\r\nlogica\r\nlombare\r\nlondra\r\nlongevo\r\nloquace\r\nlorenzo\r\nloto\r\nlotteria\r\nluce\r\nlucidato\r\nlumaca\r\nluminoso\r\nlungo\r\nlupo\r\nluppolo\r\nlusinga\r\nlusso\r\nlutto\r\nmacabro\r\nmacchina\r\nmacero\r\nmacinato\r\nmadama\r\nmagico\r\nmaglia\r\nmagnete\r\nmagro\r\nmaiolica\r\nmalafede\r\nmalgrado\r\nmalinteso\r\nmalsano\r\nmalto\r\nmalumore\r\nmana\r\nmancia\r\nmandorla\r\nmangiare\r\nmanifesto\r\nmannaro\r\nmanovra\r\nmansarda\r\nmantide\r\nmanubrio\r\nmappa\r\nmaratona\r\nmarcire\r\nmaretta\r\nmarmo\r\nmarsupio\r\nmaschera\r\nmassaia\r\nmastino\r\nmaterasso\r\nmatricola\r\nmattone\r\nmaturo\r\nmazurca\r\nmeandro\r\nmeccanico\r\nmecenate\r\nmedesimo\r\nmeditare\r\nmega\r\nmelassa\r\nmelis\r\nmelodia\r\nmeninge\r\nmeno\r\nmensola\r\nmercurio\r\nmerenda\r\nmerlo\r\nmeschino\r\nmese\r\nmessere\r\nmestolo\r\nmetallo\r\nmetodo\r\nmettere\r\nmiagolare\r\nmica\r\nmicelio\r\nmichele\r\nmicrobo\r\nmidollo\r\nmiele\r\nmigliore\r\nmilano\r\nmilite\r\nmimosa\r\nminerale\r\nmini\r\nminore\r\nmirino\r\nmirtillo\r\nmiscela\r\nmissiva\r\nmisto\r\nmisurare\r\nmitezza\r\nmitigare\r\nmitra\r\nmittente\r\nmnemonico\r\nmodello\r\nmodifica\r\nmodulo\r\nmogano\r\nmogio\r\nmole\r\nmolosso\r\nmonastero\r\nmonco\r\nmondina\r\nmonetario\r\nmonile\r\nmonotono\r\nmonsone\r\nmontato\r\nmonviso\r\nmora\r\nmordere\r\nmorsicato\r\nmostro\r\nmotivato\r\nmotosega\r\nmotto\r\nmovenza\r\nmovimento\r\nmozzo\r\nmucca\r\nmucosa\r\nmuffa\r\nmughetto\r\nmugnaio\r\nmulatto\r\nmulinello\r\nmultiplo\r\nmummia\r\nmunto\r\nmuovere\r\nmurale\r\nmusa\r\nmuscolo\r\nmusica\r\nmutevole\r\nmuto\r\nnababbo\r\nnafta\r\nnanometro\r\nnarciso\r\nnarice\r\nnarrato\r\nnascere\r\nnastrare\r\nnaturale\r\nnautica\r\nnaviglio\r\nnebulosa\r\nnecrosi\r\nnegativo\r\nnegozio\r\nnemmeno\r\nneofita\r\nneretto\r\nnervo\r\nnessuno\r\nnettuno\r\nneutrale\r\nneve\r\nnevrotico\r\nnicchia\r\nninfa\r\nnitido\r\nnobile\r\nnocivo\r\nnodo\r\nnome\r\nnomina\r\nnordico\r\nnormale\r\nnorvegese\r\nnostrano\r\nnotare\r\nnotizia\r\nnotturno\r\nnovella\r\nnucleo\r\nnulla\r\nnumero\r\nnuovo\r\nnutrire\r\nnuvola\r\nnuziale\r\noasi\r\nobbedire\r\nobbligo\r\nobelisco\r\noblio\r\nobolo\r\nobsoleto\r\noccasione\r\nocchio\r\noccidente\r\noccorrere\r\noccultare\r\nocra\r\noculato\r\nodierno\r\nodorare\r\nofferta\r\noffrire\r\noffuscato\r\noggetto\r\noggi\r\nognuno\r\nolandese\r\nolfatto\r\noliato\r\noliva\r\nologramma\r\noltre\r\nomaggio\r\nombelico\r\nombra\r\nomega\r\nomissione\r\nondoso\r\nonere\r\nonice\r\nonnivoro\r\nonorevole\r\nonta\r\noperato\r\nopinione\r\nopposto\r\noracolo\r\norafo\r\nordine\r\norecchino\r\norefice\r\norfano\r\norganico\r\norigine\r\norizzonte\r\norma\r\normeggio\r\nornativo\r\norologio\r\norrendo\r\norribile\r\nortensia\r\nortica\r\norzata\r\norzo\r\nosare\r\noscurare\r\nosmosi\r\nospedale\r\nospite\r\nossa\r\nossidare\r\nostacolo\r\noste\r\notite\r\notre\r\nottagono\r\nottimo\r\nottobre\r\novale\r\novest\r\novino\r\noviparo\r\novocito\r\novunque\r\novviare\r\nozio\r\npacchetto\r\npace\r\npacifico\r\npadella\r\npadrone\r\npaese\r\npaga\r\npagina\r\npalazzina\r\npalesare\r\npallido\r\npalo\r\npalude\r\npandoro\r\npannello\r\npaolo\r\npaonazzo\r\npaprica\r\nparabola\r\nparcella\r\nparere\r\npargolo\r\npari\r\nparlato\r\nparola\r\npartire\r\nparvenza\r\nparziale\r\npassivo\r\npasticca\r\npatacca\r\npatologia\r\npattume\r\npavone\r\npeccato\r\npedalare\r\npedonale\r\npeggio\r\npeloso\r\npenare\r\npendice\r\npenisola\r\npennuto\r\npenombra\r\npensare\r\npentola\r\npepe\r\npepita\r\nperbene\r\npercorso\r\nperdonato\r\nperforare\r\npergamena\r\nperiodo\r\npermesso\r\nperno\r\nperplesso\r\npersuaso\r\npertugio\r\npervaso\r\npesatore\r\npesista\r\npeso\r\npestifero\r\npetalo\r\npettine\r\npetulante\r\npezzo\r\npiacere\r\npianta\r\npiattino\r\npiccino\r\npicozza\r\npiega\r\npietra\r\npiffero\r\npigiama\r\npigolio\r\npigro\r\npila\r\npilifero\r\npillola\r\npilota\r\npimpante\r\npineta\r\npinna\r\npinolo\r\npioggia\r\npiombo\r\npiramide\r\npiretico\r\npirite\r\npirolisi\r\npitone\r\npizzico\r\nplacebo\r\nplanare\r\nplasma\r\nplatano\r\nplenario\r\npochezza\r\npoderoso\r\npodismo\r\npoesia\r\npoggiare\r\npolenta\r\npoligono\r\npollice\r\npolmonite\r\npolpetta\r\npolso\r\npoltrona\r\npolvere\r\npomice\r\npomodoro\r\nponte\r\npopoloso\r\nporfido\r\nporoso\r\nporpora\r\nporre\r\nportata\r\nposa\r\npositivo\r\npossesso\r\npostulato\r\npotassio\r\npotere\r\npranzo\r\nprassi\r\npratica\r\nprecluso\r\npredica\r\nprefisso\r\npregiato\r\nprelievo\r\npremere\r\nprenotare\r\npreparato\r\npresenza\r\npretesto\r\nprevalso\r\nprima\r\nprincipe\r\nprivato\r\nproblema\r\nprocura\r\nprodurre\r\nprofumo\r\nprogetto\r\nprolunga\r\npromessa\r\npronome\r\nproposta\r\nproroga\r\nproteso\r\nprova\r\nprudente\r\nprugna\r\nprurito\r\npsiche\r\npubblico\r\npudica\r\npugilato\r\npugno\r\npulce\r\npulito\r\npulsante\r\npuntare\r\npupazzo\r\npupilla\r\npuro\r\nquadro\r\nqualcosa\r\nquasi\r\nquerela\r\nquota\r\nraccolto\r\nraddoppio\r\nradicale\r\nradunato\r\nraffica\r\nragazzo\r\nragione\r\nragno\r\nramarro\r\nramingo\r\nramo\r\nrandagio\r\nrantolare\r\nrapato\r\nrapina\r\nrappreso\r\nrasatura\r\nraschiato\r\nrasente\r\nrassegna\r\nrastrello\r\nrata\r\nravveduto\r\nreale\r\nrecepire\r\nrecinto\r\nrecluta\r\nrecondito\r\nrecupero\r\nreddito\r\nredimere\r\nregalato\r\nregistro\r\nregola\r\nregresso\r\nrelazione\r\nremare\r\nremoto\r\nrenna\r\nreplica\r\nreprimere\r\nreputare\r\nresa\r\nresidente\r\nresponso\r\nrestauro\r\nrete\r\nretina\r\nretorica\r\nrettifica\r\nrevocato\r\nriassunto\r\nribadire\r\nribelle\r\nribrezzo\r\nricarica\r\nricco\r\nricevere\r\nriciclato\r\nricordo\r\nricreduto\r\nridicolo\r\nridurre\r\nrifasare\r\nriflesso\r\nriforma\r\nrifugio\r\nrigare\r\nrigettato\r\nrighello\r\nrilassato\r\nrilevato\r\nrimanere\r\nrimbalzo\r\nrimedio\r\nrimorchio\r\nrinascita\r\nrincaro\r\nrinforzo\r\nrinnovo\r\nrinomato\r\nrinsavito\r\nrintocco\r\nrinuncia\r\nrinvenire\r\nriparato\r\nripetuto\r\nripieno\r\nriportare\r\nripresa\r\nripulire\r\nrisata\r\nrischio\r\nriserva\r\nrisibile\r\nriso\r\nrispetto\r\nristoro\r\nrisultato\r\nrisvolto\r\nritardo\r\nritegno\r\nritmico\r\nritrovo\r\nriunione\r\nriva\r\nriverso\r\nrivincita\r\nrivolto\r\nrizoma\r\nroba\r\nrobotico\r\nrobusto\r\nroccia\r\nroco\r\nrodaggio\r\nrodere\r\nroditore\r\nrogito\r\nrollio\r\nromantico\r\nrompere\r\nronzio\r\nrosolare\r\nrospo\r\nrotante\r\nrotondo\r\nrotula\r\nrovescio\r\nrubizzo\r\nrubrica\r\nruga\r\nrullino\r\nrumine\r\nrumoroso\r\nruolo\r\nrupe\r\nrussare\r\nrustico\r\nsabato\r\nsabbiare\r\nsabotato\r\nsagoma\r\nsalasso\r\nsaldatura\r\nsalgemma\r\nsalivare\r\nsalmone\r\nsalone\r\nsaltare\r\nsaluto\r\nsalvo\r\nsapere\r\nsapido\r\nsaporito\r\nsaraceno\r\nsarcasmo\r\nsarto\r\nsassoso\r\nsatellite\r\nsatira\r\nsatollo\r\nsaturno\r\nsavana\r\nsavio\r\nsaziato\r\nsbadiglio\r\nsbalzo\r\nsbancato\r\nsbarra\r\nsbattere\r\nsbavare\r\nsbendare\r\nsbirciare\r\nsbloccato\r\nsbocciato\r\nsbrinare\r\nsbruffone\r\nsbuffare\r\nscabroso\r\nscadenza\r\nscala\r\nscambiare\r\nscandalo\r\nscapola\r\nscarso\r\nscatenare\r\nscavato\r\nscelto\r\nscenico\r\nscettro\r\nscheda\r\nschiena\r\nsciarpa\r\nscienza\r\nscindere\r\nscippo\r\nsciroppo\r\nscivolo\r\nsclerare\r\nscodella\r\nscolpito\r\nscomparto\r\nsconforto\r\nscoprire\r\nscorta\r\nscossone\r\nscozzese\r\nscriba\r\nscrollare\r\nscrutinio\r\nscuderia\r\nscultore\r\nscuola\r\nscuro\r\nscusare\r\nsdebitare\r\nsdoganare\r\nseccatura\r\nsecondo\r\nsedano\r\nseggiola\r\nsegnalato\r\nsegregato\r\nseguito\r\nselciato\r\nselettivo\r\nsella\r\nselvaggio\r\nsemaforo\r\nsembrare\r\nseme\r\nseminato\r\nsempre\r\nsenso\r\nsentire\r\nsepolto\r\nsequenza\r\nserata\r\nserbato\r\nsereno\r\nserio\r\nserpente\r\nserraglio\r\nservire\r\nsestina\r\nsetola\r\nsettimana\r\nsfacelo\r\nsfaldare\r\nsfamato\r\nsfarzoso\r\nsfaticato\r\nsfera\r\nsfida\r\nsfilato\r\nsfinge\r\nsfocato\r\nsfoderare\r\nsfogo\r\nsfoltire\r\nsforzato\r\nsfratto\r\nsfruttato\r\nsfuggito\r\nsfumare\r\nsfuso\r\nsgabello\r\nsgarbato\r\nsgonfiare\r\nsgorbio\r\nsgrassato\r\nsguardo\r\nsibilo\r\nsiccome\r\nsierra\r\nsigla\r\nsignore\r\nsilenzio\r\nsillaba\r\nsimbolo\r\nsimpatico\r\nsimulato\r\nsinfonia\r\nsingolo\r\nsinistro\r\nsino\r\nsintesi\r\nsinusoide\r\nsipario\r\nsisma\r\nsistole\r\nsituato\r\nslitta\r\nslogatura\r\nsloveno\r\nsmarrito\r\nsmemorato\r\nsmentito\r\nsmeraldo\r\nsmilzo\r\nsmontare\r\nsmottato\r\nsmussato\r\nsnellire\r\nsnervato\r\nsnodo\r\nsobbalzo\r\nsobrio\r\nsoccorso\r\nsociale\r\nsodale\r\nsoffitto\r\nsogno\r\nsoldato\r\nsolenne\r\nsolido\r\nsollazzo\r\nsolo\r\nsolubile\r\nsolvente\r\nsomatico\r\nsomma\r\nsonda\r\nsonetto\r\nsonnifero\r\nsopire\r\nsoppeso\r\nsopra\r\nsorgere\r\nsorpasso\r\nsorriso\r\nsorso\r\nsorteggio\r\nsorvolato\r\nsospiro\r\nsosta\r\nsottile\r\nspada\r\nspalla\r\nspargere\r\nspatola\r\nspavento\r\nspazzola\r\nspecie\r\nspedire\r\nspegnere\r\nspelatura\r\nsperanza\r\nspessore\r\nspettrale\r\nspezzato\r\nspia\r\nspigoloso\r\nspillato\r\nspinoso\r\nspirale\r\nsplendido\r\nsportivo\r\nsposo\r\nspranga\r\nsprecare\r\nspronato\r\nspruzzo\r\nspuntino\r\nsquillo\r\nsradicare\r\nsrotolato\r\nstabile\r\nstacco\r\nstaffa\r\nstagnare\r\nstampato\r\nstantio\r\nstarnuto\r\nstasera\r\nstatuto\r\nstelo\r\nsteppa\r\nsterzo\r\nstiletto\r\nstima\r\nstirpe\r\nstivale\r\nstizzoso\r\nstonato\r\nstorico\r\nstrappo\r\nstregato\r\nstridulo\r\nstrozzare\r\nstrutto\r\nstuccare\r\nstufo\r\nstupendo\r\nsubentro\r\nsuccoso\r\nsudore\r\nsuggerito\r\nsugo\r\nsultano\r\nsuonare\r\nsuperbo\r\nsupporto\r\nsurgelato\r\nsurrogato\r\nsussurro\r\nsutura\r\nsvagare\r\nsvedese\r\nsveglio\r\nsvelare\r\nsvenuto\r\nsvezia\r\nsviluppo\r\nsvista\r\nsvizzera\r\nsvolta\r\nsvuotare\r\ntabacco\r\ntabulato\r\ntacciare\r\ntaciturno\r\ntale\r\ntalismano\r\ntampone\r\ntannino\r\ntara\r\ntardivo\r\ntargato\r\ntariffa\r\ntarpare\r\ntartaruga\r\ntasto\r\ntattico\r\ntaverna\r\ntavolata\r\ntazza\r\nteca\r\ntecnico\r\ntelefono\r\ntemerario\r\ntempo\r\ntemuto\r\ntendone\r\ntenero\r\ntensione\r\ntentacolo\r\nteorema\r\nterme\r\nterrazzo\r\nterzetto\r\ntesi\r\ntesserato\r\ntestato\r\ntetro\r\ntettoia\r\ntifare\r\ntigella\r\ntimbro\r\ntinto\r\ntipico\r\ntipografo\r\ntiraggio\r\ntiro\r\ntitanio\r\ntitolo\r\ntitubante\r\ntizio\r\ntizzone\r\ntoccare\r\ntollerare\r\ntolto\r\ntombola\r\ntomo\r\ntonfo\r\ntonsilla\r\ntopazio\r\ntopologia\r\ntoppa\r\ntorba\r\ntornare\r\ntorrone\r\ntortora\r\ntoscano\r\ntossire\r\ntostatura\r\ntotano\r\ntrabocco\r\ntrachea\r\ntrafila\r\ntragedia\r\ntralcio\r\ntramonto\r\ntransito\r\ntrapano\r\ntrarre\r\ntrasloco\r\ntrattato\r\ntrave\r\ntreccia\r\ntremolio\r\ntrespolo\r\ntributo\r\ntricheco\r\ntrifoglio\r\ntrillo\r\ntrincea\r\ntrio\r\ntristezza\r\ntriturato\r\ntrivella\r\ntromba\r\ntrono\r\ntroppo\r\ntrottola\r\ntrovare\r\ntruccato\r\ntubatura\r\ntuffato\r\ntulipano\r\ntumulto\r\ntunisia\r\nturbare\r\nturchino\r\ntuta\r\ntutela\r\nubicato\r\nuccello\r\nuccisore\r\nudire\r\nuditivo\r\nuffa\r\nufficio\r\nuguale\r\nulisse\r\nultimato\r\numano\r\numile\r\numorismo\r\nuncinetto\r\nungere\r\nungherese\r\nunicorno\r\nunificato\r\nunisono\r\nunitario\r\nunte\r\nuovo\r\nupupa\r\nuragano\r\nurgenza\r\nurlo\r\nusanza\r\nusato\r\nuscito\r\nusignolo\r\nusuraio\r\nutensile\r\nutilizzo\r\nutopia\r\nvacante\r\nvaccinato\r\nvagabondo\r\nvagliato\r\nvalanga\r\nvalgo\r\nvalico\r\nvalletta\r\nvaloroso\r\nvalutare\r\nvalvola\r\nvampata\r\nvangare\r\nvanitoso\r\nvano\r\nvantaggio\r\nvanvera\r\nvapore\r\nvarano\r\nvarcato\r\nvariante\r\nvasca\r\nvedetta\r\nvedova\r\nveduto\r\nvegetale\r\nveicolo\r\nvelcro\r\nvelina\r\nvelluto\r\nveloce\r\nvenato\r\nvendemmia\r\nvento\r\nverace\r\nverbale\r\nvergogna\r\nverifica\r\nvero\r\nverruca\r\nverticale\r\nvescica\r\nvessillo\r\nvestale\r\nveterano\r\nvetrina\r\nvetusto\r\nviandante\r\nvibrante\r\nvicenda\r\nvichingo\r\nvicinanza\r\nvidimare\r\nvigilia\r\nvigneto\r\nvigore\r\nvile\r\nvillano\r\nvimini\r\nvincitore\r\nviola\r\nvipera\r\nvirgola\r\nvirologo\r\nvirulento\r\nviscoso\r\nvisione\r\nvispo\r\nvissuto\r\nvisura\r\nvita\r\nvitello\r\nvittima\r\nvivanda\r\nvivido\r\nviziare\r\nvoce\r\nvoga\r\nvolatile\r\nvolere\r\nvolpe\r\nvoragine\r\nvulcano\r\nzampogna\r\nzanna\r\nzappato\r\nzattera\r\nzavorra\r\nzefiro\r\nzelante\r\nzelo\r\nzenzero\r\nzerbino\r\nzibetto\r\nzinco\r\nzircone\r\nzitto\r\nzolla\r\nzotico\r\nzucchero\r\nzufolo\r\nzulu\r\nzuppa`.split('\\n');\r\n", "export const wordlist = `あいこくしん\r\nあいさつ\r\nあいだ\r\nあおぞら\r\nあかちゃん\r\nあきる\r\nあけがた\r\nあける\r\nあこがれる\r\nあさい\r\nあさひ\r\nあしあと\r\nあじわう\r\nあずかる\r\nあずき\r\nあそぶ\r\nあたえる\r\nあたためる\r\nあたりまえ\r\nあたる\r\nあつい\r\nあつかう\r\nあっしゅく\r\nあつまり\r\nあつめる\r\nあてな\r\nあてはまる\r\nあひる\r\nあぶら\r\nあぶる\r\nあふれる\r\nあまい\r\nあまど\r\nあまやかす\r\nあまり\r\nあみもの\r\nあめりか\r\nあやまる\r\nあゆむ\r\nあらいぐま\r\nあらし\r\nあらすじ\r\nあらためる\r\nあらゆる\r\nあらわす\r\nありがとう\r\nあわせる\r\nあわてる\r\nあんい\r\nあんがい\r\nあんこ\r\nあんぜん\r\nあんてい\r\nあんない\r\nあんまり\r\nいいだす\r\nいおん\r\nいがい\r\nいがく\r\nいきおい\r\nいきなり\r\nいきもの\r\nいきる\r\nいくじ\r\nいくぶん\r\nいけばな\r\nいけん\r\nいこう\r\nいこく\r\nいこつ\r\nいさましい\r\nいさん\r\nいしき\r\nいじゅう\r\nいじょう\r\nいじわる\r\nいずみ\r\nいずれ\r\nいせい\r\nいせえび\r\nいせかい\r\nいせき\r\nいぜん\r\nいそうろう\r\nいそがしい\r\nいだい\r\nいだく\r\nいたずら\r\nいたみ\r\nいたりあ\r\nいちおう\r\nいちじ\r\nいちど\r\nいちば\r\nいちぶ\r\nいちりゅう\r\nいつか\r\nいっしゅん\r\nいっせい\r\nいっそう\r\nいったん\r\nいっち\r\nいってい\r\nいっぽう\r\nいてざ\r\nいてん\r\nいどう\r\nいとこ\r\nいない\r\nいなか\r\nいねむり\r\nいのち\r\nいのる\r\nいはつ\r\nいばる\r\nいはん\r\nいびき\r\nいひん\r\nいふく\r\nいへん\r\nいほう\r\nいみん\r\nいもうと\r\nいもたれ\r\nいもり\r\nいやがる\r\nいやす\r\nいよかん\r\nいよく\r\nいらい\r\nいらすと\r\nいりぐち\r\nいりょう\r\nいれい\r\nいれもの\r\nいれる\r\nいろえんぴつ\r\nいわい\r\nいわう\r\nいわかん\r\nいわば\r\nいわゆる\r\nいんげんまめ\r\nいんさつ\r\nいんしょう\r\nいんよう\r\nうえき\r\nうえる\r\nうおざ\r\nうがい\r\nうかぶ\r\nうかべる\r\nうきわ\r\nうくらいな\r\nうくれれ\r\nうけたまわる\r\nうけつけ\r\nうけとる\r\nうけもつ\r\nうける\r\nうごかす\r\nうごく\r\nうこん\r\nうさぎ\r\nうしなう\r\nうしろがみ\r\nうすい\r\nうすぎ\r\nうすぐらい\r\nうすめる\r\nうせつ\r\nうちあわせ\r\nうちがわ\r\nうちき\r\nうちゅう\r\nうっかり\r\nうつくしい\r\nうったえる\r\nうつる\r\nうどん\r\nうなぎ\r\nうなじ\r\nうなずく\r\nうなる\r\nうねる\r\nうのう\r\nうぶげ\r\nうぶごえ\r\nうまれる\r\nうめる\r\nうもう\r\nうやまう\r\nうよく\r\nうらがえす\r\nうらぐち\r\nうらない\r\nうりあげ\r\nうりきれ\r\nうるさい\r\nうれしい\r\nうれゆき\r\nうれる\r\nうろこ\r\nうわき\r\nうわさ\r\nうんこう\r\nうんちん\r\nうんてん\r\nうんどう\r\nえいえん\r\nえいが\r\nえいきょう\r\nえいご\r\nえいせい\r\nえいぶん\r\nえいよう\r\nえいわ\r\nえおり\r\nえがお\r\nえがく\r\nえきたい\r\nえくせる\r\nえしゃく\r\nえすて\r\nえつらん\r\nえのぐ\r\nえほうまき\r\nえほん\r\nえまき\r\nえもじ\r\nえもの\r\nえらい\r\nえらぶ\r\nえりあ\r\nえんえん\r\nえんかい\r\nえんぎ\r\nえんげき\r\nえんしゅう\r\nえんぜつ\r\nえんそく\r\nえんちょう\r\nえんとつ\r\nおいかける\r\nおいこす\r\nおいしい\r\nおいつく\r\nおうえん\r\nおうさま\r\nおうじ\r\nおうせつ\r\nおうたい\r\nおうふく\r\nおうべい\r\nおうよう\r\nおえる\r\nおおい\r\nおおう\r\nおおどおり\r\nおおや\r\nおおよそ\r\nおかえり\r\nおかず\r\nおがむ\r\nおかわり\r\nおぎなう\r\nおきる\r\nおくさま\r\nおくじょう\r\nおくりがな\r\nおくる\r\nおくれる\r\nおこす\r\nおこなう\r\nおこる\r\nおさえる\r\nおさない\r\nおさめる\r\nおしいれ\r\nおしえる\r\nおじぎ\r\nおじさん\r\nおしゃれ\r\nおそらく\r\nおそわる\r\nおたがい\r\nおたく\r\nおだやか\r\nおちつく\r\nおっと\r\nおつり\r\nおでかけ\r\nおとしもの\r\nおとなしい\r\nおどり\r\nおどろかす\r\nおばさん\r\nおまいり\r\nおめでとう\r\nおもいで\r\nおもう\r\nおもたい\r\nおもちゃ\r\nおやつ\r\nおやゆび\r\nおよぼす\r\nおらんだ\r\nおろす\r\nおんがく\r\nおんけい\r\nおんしゃ\r\nおんせん\r\nおんだん\r\nおんちゅう\r\nおんどけい\r\nかあつ\r\nかいが\r\nがいき\r\nがいけん\r\nがいこう\r\nかいさつ\r\nかいしゃ\r\nかいすいよく\r\nかいぜん\r\nかいぞうど\r\nかいつう\r\nかいてん\r\nかいとう\r\nかいふく\r\nがいへき\r\nかいほう\r\nかいよう\r\nがいらい\r\nかいわ\r\nかえる\r\nかおり\r\nかかえる\r\nかがく\r\nかがし\r\nかがみ\r\nかくご\r\nかくとく\r\nかざる\r\nがぞう\r\nかたい\r\nかたち\r\nがちょう\r\nがっきゅう\r\nがっこう\r\nがっさん\r\nがっしょう\r\nかなざわし\r\nかのう\r\nがはく\r\nかぶか\r\nかほう\r\nかほご\r\nかまう\r\nかまぼこ\r\nかめれおん\r\nかゆい\r\nかようび\r\nからい\r\nかるい\r\nかろう\r\nかわく\r\nかわら\r\nがんか\r\nかんけい\r\nかんこう\r\nかんしゃ\r\nかんそう\r\nかんたん\r\nかんち\r\nがんばる\r\nきあい\r\nきあつ\r\nきいろ\r\nぎいん\r\nきうい\r\nきうん\r\nきえる\r\nきおう\r\nきおく\r\nきおち\r\nきおん\r\nきかい\r\nきかく\r\nきかんしゃ\r\nききて\r\nきくばり\r\nきくらげ\r\nきけんせい\r\nきこう\r\nきこえる\r\nきこく\r\nきさい\r\nきさく\r\nきさま\r\nきさらぎ\r\nぎじかがく\r\nぎしき\r\nぎじたいけん\r\nぎじにってい\r\nぎじゅつしゃ\r\nきすう\r\nきせい\r\nきせき\r\nきせつ\r\nきそう\r\nきぞく\r\nきぞん\r\nきたえる\r\nきちょう\r\nきつえん\r\nぎっちり\r\nきつつき\r\nきつね\r\nきてい\r\nきどう\r\nきどく\r\nきない\r\nきなが\r\nきなこ\r\nきぬごし\r\nきねん\r\nきのう\r\nきのした\r\nきはく\r\nきびしい\r\nきひん\r\nきふく\r\nきぶん\r\nきぼう\r\nきほん\r\nきまる\r\nきみつ\r\nきむずかしい\r\nきめる\r\nきもだめし\r\nきもち\r\nきもの\r\nきゃく\r\nきやく\r\nぎゅうにく\r\nきよう\r\nきょうりゅう\r\nきらい\r\nきらく\r\nきりん\r\nきれい\r\nきれつ\r\nきろく\r\nぎろん\r\nきわめる\r\nぎんいろ\r\nきんかくじ\r\nきんじょ\r\nきんようび\r\nぐあい\r\nくいず\r\nくうかん\r\nくうき\r\nくうぐん\r\nくうこう\r\nぐうせい\r\nくうそう\r\nぐうたら\r\nくうふく\r\nくうぼ\r\nくかん\r\nくきょう\r\nくげん\r\nぐこう\r\nくさい\r\nくさき\r\nくさばな\r\nくさる\r\nくしゃみ\r\nくしょう\r\nくすのき\r\nくすりゆび\r\nくせげ\r\nくせん\r\nぐたいてき\r\nくださる\r\nくたびれる\r\nくちこみ\r\nくちさき\r\nくつした\r\nぐっすり\r\nくつろぐ\r\nくとうてん\r\nくどく\r\nくなん\r\nくねくね\r\nくのう\r\nくふう\r\nくみあわせ\r\nくみたてる\r\nくめる\r\nくやくしょ\r\nくらす\r\nくらべる\r\nくるま\r\nくれる\r\nくろう\r\nくわしい\r\nぐんかん\r\nぐんしょく\r\nぐんたい\r\nぐんて\r\nけあな\r\nけいかく\r\nけいけん\r\nけいこ\r\nけいさつ\r\nげいじゅつ\r\nけいたい\r\nげいのうじん\r\nけいれき\r\nけいろ\r\nけおとす\r\nけおりもの\r\nげきか\r\nげきげん\r\nげきだん\r\nげきちん\r\nげきとつ\r\nげきは\r\nげきやく\r\nげこう\r\nげこくじょう\r\nげざい\r\nけさき\r\nげざん\r\nけしき\r\nけしごむ\r\nけしょう\r\nげすと\r\nけたば\r\nけちゃっぷ\r\nけちらす\r\nけつあつ\r\nけつい\r\nけつえき\r\nけっこん\r\nけつじょ\r\nけっせき\r\nけってい\r\nけつまつ\r\nげつようび\r\nげつれい\r\nけつろん\r\nげどく\r\nけとばす\r\nけとる\r\nけなげ\r\nけなす\r\nけなみ\r\nけぬき\r\nげねつ\r\nけねん\r\nけはい\r\nげひん\r\nけぶかい\r\nげぼく\r\nけまり\r\nけみかる\r\nけむし\r\nけむり\r\nけもの\r\nけらい\r\nけろけろ\r\nけわしい\r\nけんい\r\nけんえつ\r\nけんお\r\nけんか\r\nげんき\r\nけんげん\r\nけんこう\r\nけんさく\r\nけんしゅう\r\nけんすう\r\nげんそう\r\nけんちく\r\nけんてい\r\nけんとう\r\nけんない\r\nけんにん\r\nげんぶつ\r\nけんま\r\nけんみん\r\nけんめい\r\nけんらん\r\nけんり\r\nこあくま\r\nこいぬ\r\nこいびと\r\nごうい\r\nこうえん\r\nこうおん\r\nこうかん\r\nごうきゅう\r\nごうけい\r\nこうこう\r\nこうさい\r\nこうじ\r\nこうすい\r\nごうせい\r\nこうそく\r\nこうたい\r\nこうちゃ\r\nこうつう\r\nこうてい\r\nこうどう\r\nこうない\r\nこうはい\r\nごうほう\r\nごうまん\r\nこうもく\r\nこうりつ\r\nこえる\r\nこおり\r\nごかい\r\nごがつ\r\nごかん\r\nこくご\r\nこくさい\r\nこくとう\r\nこくない\r\nこくはく\r\nこぐま\r\nこけい\r\nこける\r\nここのか\r\nこころ\r\nこさめ\r\nこしつ\r\nこすう\r\nこせい\r\nこせき\r\nこぜん\r\nこそだて\r\nこたい\r\nこたえる\r\nこたつ\r\nこちょう\r\nこっか\r\nこつこつ\r\nこつばん\r\nこつぶ\r\nこてい\r\nこてん\r\nことがら\r\nことし\r\nことば\r\nことり\r\nこなごな\r\nこねこね\r\nこのまま\r\nこのみ\r\nこのよ\r\nごはん\r\nこひつじ\r\nこふう\r\nこふん\r\nこぼれる\r\nごまあぶら\r\nこまかい\r\nごますり\r\nこまつな\r\nこまる\r\nこむぎこ\r\nこもじ\r\nこもち\r\nこもの\r\nこもん\r\nこやく\r\nこやま\r\nこゆう\r\nこゆび\r\nこよい\r\nこよう\r\nこりる\r\nこれくしょん\r\nころっけ\r\nこわもて\r\nこわれる\r\nこんいん\r\nこんかい\r\nこんき\r\nこんしゅう\r\nこんすい\r\nこんだて\r\nこんとん\r\nこんなん\r\nこんびに\r\nこんぽん\r\nこんまけ\r\nこんや\r\nこんれい\r\nこんわく\r\nざいえき\r\nさいかい\r\nさいきん\r\nざいげん\r\nざいこ\r\nさいしょ\r\nさいせい\r\nざいたく\r\nざいちゅう\r\nさいてき\r\nざいりょう\r\nさうな\r\nさかいし\r\nさがす\r\nさかな\r\nさかみち\r\nさがる\r\nさぎょう\r\nさくし\r\nさくひん\r\nさくら\r\nさこく\r\nさこつ\r\nさずかる\r\nざせき\r\nさたん\r\nさつえい\r\nざつおん\r\nざっか\r\nざつがく\r\nさっきょく\r\nざっし\r\nさつじん\r\nざっそう\r\nさつたば\r\nさつまいも\r\nさてい\r\nさといも\r\nさとう\r\nさとおや\r\nさとし\r\nさとる\r\nさのう\r\nさばく\r\nさびしい\r\nさべつ\r\nさほう\r\nさほど\r\nさます\r\nさみしい\r\nさみだれ\r\nさむけ\r\nさめる\r\nさやえんどう\r\nさゆう\r\nさよう\r\nさよく\r\nさらだ\r\nざるそば\r\nさわやか\r\nさわる\r\nさんいん\r\nさんか\r\nさんきゃく\r\nさんこう\r\nさんさい\r\nざんしょ\r\nさんすう\r\nさんせい\r\nさんそ\r\nさんち\r\nさんま\r\nさんみ\r\nさんらん\r\nしあい\r\nしあげ\r\nしあさって\r\nしあわせ\r\nしいく\r\nしいん\r\nしうち\r\nしえい\r\nしおけ\r\nしかい\r\nしかく\r\nじかん\r\nしごと\r\nしすう\r\nじだい\r\nしたうけ\r\nしたぎ\r\nしたて\r\nしたみ\r\nしちょう\r\nしちりん\r\nしっかり\r\nしつじ\r\nしつもん\r\nしてい\r\nしてき\r\nしてつ\r\nじてん\r\nじどう\r\nしなぎれ\r\nしなもの\r\nしなん\r\nしねま\r\nしねん\r\nしのぐ\r\nしのぶ\r\nしはい\r\nしばかり\r\nしはつ\r\nしはらい\r\nしはん\r\nしひょう\r\nしふく\r\nじぶん\r\nしへい\r\nしほう\r\nしほん\r\nしまう\r\nしまる\r\nしみん\r\nしむける\r\nじむしょ\r\nしめい\r\nしめる\r\nしもん\r\nしゃいん\r\nしゃうん\r\nしゃおん\r\nじゃがいも\r\nしやくしょ\r\nしゃくほう\r\nしゃけん\r\nしゃこ\r\nしゃざい\r\nしゃしん\r\nしゃせん\r\nしゃそう\r\nしゃたい\r\nしゃちょう\r\nしゃっきん\r\nじゃま\r\nしゃりん\r\nしゃれい\r\nじゆう\r\nじゅうしょ\r\nしゅくはく\r\nじゅしん\r\nしゅっせき\r\nしゅみ\r\nしゅらば\r\nじゅんばん\r\nしょうかい\r\nしょくたく\r\nしょっけん\r\nしょどう\r\nしょもつ\r\nしらせる\r\nしらべる\r\nしんか\r\nしんこう\r\nじんじゃ\r\nしんせいじ\r\nしんちく\r\nしんりん\r\nすあげ\r\nすあし\r\nすあな\r\nずあん\r\nすいえい\r\nすいか\r\nすいとう\r\nずいぶん\r\nすいようび\r\nすうがく\r\nすうじつ\r\nすうせん\r\nすおどり\r\nすきま\r\nすくう\r\nすくない\r\nすける\r\nすごい\r\nすこし\r\nずさん\r\nすずしい\r\nすすむ\r\nすすめる\r\nすっかり\r\nずっしり\r\nずっと\r\nすてき\r\nすてる\r\nすねる\r\nすのこ\r\nすはだ\r\nすばらしい\r\nずひょう\r\nずぶぬれ\r\nすぶり\r\nすふれ\r\nすべて\r\nすべる\r\nずほう\r\nすぼん\r\nすまい\r\nすめし\r\nすもう\r\nすやき\r\nすらすら\r\nするめ\r\nすれちがう\r\nすろっと\r\nすわる\r\nすんぜん\r\nすんぽう\r\nせあぶら\r\nせいかつ\r\nせいげん\r\nせいじ\r\nせいよう\r\nせおう\r\nせかいかん\r\nせきにん\r\nせきむ\r\nせきゆ\r\nせきらんうん\r\nせけん\r\nせこう\r\nせすじ\r\nせたい\r\nせたけ\r\nせっかく\r\nせっきゃく\r\nぜっく\r\nせっけん\r\nせっこつ\r\nせっさたくま\r\nせつぞく\r\nせつだん\r\nせつでん\r\nせっぱん\r\nせつび\r\nせつぶん\r\nせつめい\r\nせつりつ\r\nせなか\r\nせのび\r\nせはば\r\nせびろ\r\nせぼね\r\nせまい\r\nせまる\r\nせめる\r\nせもたれ\r\nせりふ\r\nぜんあく\r\nせんい\r\nせんえい\r\nせんか\r\nせんきょ\r\nせんく\r\nせんげん\r\nぜんご\r\nせんさい\r\nせんしゅ\r\nせんすい\r\nせんせい\r\nせんぞ\r\nせんたく\r\nせんちょう\r\nせんてい\r\nせんとう\r\nせんぬき\r\nせんねん\r\nせんぱい\r\nぜんぶ\r\nぜんぽう\r\nせんむ\r\nせんめんじょ\r\nせんもん\r\nせんやく\r\nせんゆう\r\nせんよう\r\nぜんら\r\nぜんりゃく\r\nせんれい\r\nせんろ\r\nそあく\r\nそいとげる\r\nそいね\r\nそうがんきょう\r\nそうき\r\nそうご\r\nそうしん\r\nそうだん\r\nそうなん\r\nそうび\r\nそうめん\r\nそうり\r\nそえもの\r\nそえん\r\nそがい\r\nそげき\r\nそこう\r\nそこそこ\r\nそざい\r\nそしな\r\nそせい\r\nそせん\r\nそそぐ\r\nそだてる\r\nそつう\r\nそつえん\r\nそっかん\r\nそつぎょう\r\nそっけつ\r\nそっこう\r\nそっせん\r\nそっと\r\nそとがわ\r\nそとづら\r\nそなえる\r\nそなた\r\nそふぼ\r\nそぼく\r\nそぼろ\r\nそまつ\r\nそまる\r\nそむく\r\nそむりえ\r\nそめる\r\nそもそも\r\nそよかぜ\r\nそらまめ\r\nそろう\r\nそんかい\r\nそんけい\r\nそんざい\r\nそんしつ\r\nそんぞく\r\nそんちょう\r\nぞんび\r\nぞんぶん\r\nそんみん\r\nたあい\r\nたいいん\r\nたいうん\r\nたいえき\r\nたいおう\r\nだいがく\r\nたいき\r\nたいぐう\r\nたいけん\r\nたいこ\r\nたいざい\r\nだいじょうぶ\r\nだいすき\r\nたいせつ\r\nたいそう\r\nだいたい\r\nたいちょう\r\nたいてい\r\nだいどころ\r\nたいない\r\nたいねつ\r\nたいのう\r\nたいはん\r\nだいひょう\r\nたいふう\r\nたいへん\r\nたいほ\r\nたいまつばな\r\nたいみんぐ\r\nたいむ\r\nたいめん\r\nたいやき\r\nたいよう\r\nたいら\r\nたいりょく\r\nたいる\r\nたいわん\r\nたうえ\r\nたえる\r\nたおす\r\nたおる\r\nたおれる\r\nたかい\r\nたかね\r\nたきび\r\nたくさん\r\nたこく\r\nたこやき\r\nたさい\r\nたしざん\r\nだじゃれ\r\nたすける\r\nたずさわる\r\nたそがれ\r\nたたかう\r\nたたく\r\nただしい\r\nたたみ\r\nたちばな\r\nだっかい\r\nだっきゃく\r\nだっこ\r\nだっしゅつ\r\nだったい\r\nたてる\r\nたとえる\r\nたなばた\r\nたにん\r\nたぬき\r\nたのしみ\r\nたはつ\r\nたぶん\r\nたべる\r\nたぼう\r\nたまご\r\nたまる\r\nだむる\r\nためいき\r\nためす\r\nためる\r\nたもつ\r\nたやすい\r\nたよる\r\nたらす\r\nたりきほんがん\r\nたりょう\r\nたりる\r\nたると\r\nたれる\r\nたれんと\r\nたろっと\r\nたわむれる\r\nだんあつ\r\nたんい\r\nたんおん\r\nたんか\r\nたんき\r\nたんけん\r\nたんご\r\nたんさん\r\nたんじょうび\r\nだんせい\r\nたんそく\r\nたんたい\r\nだんち\r\nたんてい\r\nたんとう\r\nだんな\r\nたんにん\r\nだんねつ\r\nたんのう\r\nたんぴん\r\nだんぼう\r\nたんまつ\r\nたんめい\r\nだんれつ\r\nだんろ\r\nだんわ\r\nちあい\r\nちあん\r\nちいき\r\nちいさい\r\nちえん\r\nちかい\r\nちから\r\nちきゅう\r\nちきん\r\nちけいず\r\nちけん\r\nちこく\r\nちさい\r\nちしき\r\nちしりょう\r\nちせい\r\nちそう\r\nちたい\r\nちたん\r\nちちおや\r\nちつじょ\r\nちてき\r\nちてん\r\nちぬき\r\nちぬり\r\nちのう\r\nちひょう\r\nちへいせん\r\nちほう\r\nちまた\r\nちみつ\r\nちみどろ\r\nちめいど\r\nちゃんこなべ\r\nちゅうい\r\nちゆりょく\r\nちょうし\r\nちょさくけん\r\nちらし\r\nちらみ\r\nちりがみ\r\nちりょう\r\nちるど\r\nちわわ\r\nちんたい\r\nちんもく\r\nついか\r\nついたち\r\nつうか\r\nつうじょう\r\nつうはん\r\nつうわ\r\nつかう\r\nつかれる\r\nつくね\r\nつくる\r\nつけね\r\nつける\r\nつごう\r\nつたえる\r\nつづく\r\nつつじ\r\nつつむ\r\nつとめる\r\nつながる\r\nつなみ\r\nつねづね\r\nつのる\r\nつぶす\r\nつまらない\r\nつまる\r\nつみき\r\nつめたい\r\nつもり\r\nつもる\r\nつよい\r\nつるぼ\r\nつるみく\r\nつわもの\r\nつわり\r\nてあし\r\nてあて\r\nてあみ\r\nていおん\r\nていか\r\nていき\r\nていけい\r\nていこく\r\nていさつ\r\nていし\r\nていせい\r\nていたい\r\nていど\r\nていねい\r\nていひょう\r\nていへん\r\nていぼう\r\nてうち\r\nておくれ\r\nてきとう\r\nてくび\r\nでこぼこ\r\nてさぎょう\r\nてさげ\r\nてすり\r\nてそう\r\nてちがい\r\nてちょう\r\nてつがく\r\nてつづき\r\nでっぱ\r\nてつぼう\r\nてつや\r\nでぬかえ\r\nてぬき\r\nてぬぐい\r\nてのひら\r\nてはい\r\nてぶくろ\r\nてふだ\r\nてほどき\r\nてほん\r\nてまえ\r\nてまきずし\r\nてみじか\r\nてみやげ\r\nてらす\r\nてれび\r\nてわけ\r\nてわたし\r\nでんあつ\r\nてんいん\r\nてんかい\r\nてんき\r\nてんぐ\r\nてんけん\r\nてんごく\r\nてんさい\r\nてんし\r\nてんすう\r\nでんち\r\nてんてき\r\nてんとう\r\nてんない\r\nてんぷら\r\nてんぼうだい\r\nてんめつ\r\nてんらんかい\r\nでんりょく\r\nでんわ\r\nどあい\r\nといれ\r\nどうかん\r\nとうきゅう\r\nどうぐ\r\nとうし\r\nとうむぎ\r\nとおい\r\nとおか\r\nとおく\r\nとおす\r\nとおる\r\nとかい\r\nとかす\r\nときおり\r\nときどき\r\nとくい\r\nとくしゅう\r\nとくてん\r\nとくに\r\nとくべつ\r\nとけい\r\nとける\r\nとこや\r\nとさか\r\nとしょかん\r\nとそう\r\nとたん\r\nとちゅう\r\nとっきゅう\r\nとっくん\r\nとつぜん\r\nとつにゅう\r\nとどける\r\nととのえる\r\nとない\r\nとなえる\r\nとなり\r\nとのさま\r\nとばす\r\nどぶがわ\r\nとほう\r\nとまる\r\nとめる\r\nともだち\r\nともる\r\nどようび\r\nとらえる\r\nとんかつ\r\nどんぶり\r\nないかく\r\nないこう\r\nないしょ\r\nないす\r\nないせん\r\nないそう\r\nなおす\r\nながい\r\nなくす\r\nなげる\r\nなこうど\r\nなさけ\r\nなたでここ\r\nなっとう\r\nなつやすみ\r\nななおし\r\nなにごと\r\nなにもの\r\nなにわ\r\nなのか\r\nなふだ\r\nなまいき\r\nなまえ\r\nなまみ\r\nなみだ\r\nなめらか\r\nなめる\r\nなやむ\r\nならう\r\nならび\r\nならぶ\r\nなれる\r\nなわとび\r\nなわばり\r\nにあう\r\nにいがた\r\nにうけ\r\nにおい\r\nにかい\r\nにがて\r\nにきび\r\nにくしみ\r\nにくまん\r\nにげる\r\nにさんかたんそ\r\nにしき\r\nにせもの\r\nにちじょう\r\nにちようび\r\nにっか\r\nにっき\r\nにっけい\r\nにっこう\r\nにっさん\r\nにっしょく\r\nにっすう\r\nにっせき\r\nにってい\r\nになう\r\nにほん\r\nにまめ\r\nにもつ\r\nにやり\r\nにゅういん\r\nにりんしゃ\r\nにわとり\r\nにんい\r\nにんか\r\nにんき\r\nにんげん\r\nにんしき\r\nにんずう\r\nにんそう\r\nにんたい\r\nにんち\r\nにんてい\r\nにんにく\r\nにんぷ\r\nにんまり\r\nにんむ\r\nにんめい\r\nにんよう\r\nぬいくぎ\r\nぬかす\r\nぬぐいとる\r\nぬぐう\r\nぬくもり\r\nぬすむ\r\nぬまえび\r\nぬめり\r\nぬらす\r\nぬんちゃく\r\nねあげ\r\nねいき\r\nねいる\r\nねいろ\r\nねぐせ\r\nねくたい\r\nねくら\r\nねこぜ\r\nねこむ\r\nねさげ\r\nねすごす\r\nねそべる\r\nねだん\r\nねつい\r\nねっしん\r\nねつぞう\r\nねったいぎょ\r\nねぶそく\r\nねふだ\r\nねぼう\r\nねほりはほり\r\nねまき\r\nねまわし\r\nねみみ\r\nねむい\r\nねむたい\r\nねもと\r\nねらう\r\nねわざ\r\nねんいり\r\nねんおし\r\nねんかん\r\nねんきん\r\nねんぐ\r\nねんざ\r\nねんし\r\nねんちゃく\r\nねんど\r\nねんぴ\r\nねんぶつ\r\nねんまつ\r\nねんりょう\r\nねんれい\r\nのいず\r\nのおづま\r\nのがす\r\nのきなみ\r\nのこぎり\r\nのこす\r\nのこる\r\nのせる\r\nのぞく\r\nのぞむ\r\nのたまう\r\nのちほど\r\nのっく\r\nのばす\r\nのはら\r\nのべる\r\nのぼる\r\nのみもの\r\nのやま\r\nのらいぬ\r\nのらねこ\r\nのりもの\r\nのりゆき\r\nのれん\r\nのんき\r\nばあい\r\nはあく\r\nばあさん\r\nばいか\r\nばいく\r\nはいけん\r\nはいご\r\nはいしん\r\nはいすい\r\nはいせん\r\nはいそう\r\nはいち\r\nばいばい\r\nはいれつ\r\nはえる\r\nはおる\r\nはかい\r\nばかり\r\nはかる\r\nはくしゅ\r\nはけん\r\nはこぶ\r\nはさみ\r\nはさん\r\nはしご\r\nばしょ\r\nはしる\r\nはせる\r\nぱそこん\r\nはそん\r\nはたん\r\nはちみつ\r\nはつおん\r\nはっかく\r\nはづき\r\nはっきり\r\nはっくつ\r\nはっけん\r\nはっこう\r\nはっさん\r\nはっしん\r\nはったつ\r\nはっちゅう\r\nはってん\r\nはっぴょう\r\nはっぽう\r\nはなす\r\nはなび\r\nはにかむ\r\nはぶらし\r\nはみがき\r\nはむかう\r\nはめつ\r\nはやい\r\nはやし\r\nはらう\r\nはろうぃん\r\nはわい\r\nはんい\r\nはんえい\r\nはんおん\r\nはんかく\r\nはんきょう\r\nばんぐみ\r\nはんこ\r\nはんしゃ\r\nはんすう\r\nはんだん\r\nぱんち\r\nぱんつ\r\nはんてい\r\nはんとし\r\nはんのう\r\nはんぱ\r\nはんぶん\r\nはんぺん\r\nはんぼうき\r\nはんめい\r\nはんらん\r\nはんろん\r\nひいき\r\nひうん\r\nひえる\r\nひかく\r\nひかり\r\nひかる\r\nひかん\r\nひくい\r\nひけつ\r\nひこうき\r\nひこく\r\nひさい\r\nひさしぶり\r\nひさん\r\nびじゅつかん\r\nひしょ\r\nひそか\r\nひそむ\r\nひたむき\r\nひだり\r\nひたる\r\nひつぎ\r\nひっこし\r\nひっし\r\nひつじゅひん\r\nひっす\r\nひつぜん\r\nぴったり\r\nぴっちり\r\nひつよう\r\nひてい\r\nひとごみ\r\nひなまつり\r\nひなん\r\nひねる\r\nひはん\r\nひびく\r\nひひょう\r\nひほう\r\nひまわり\r\nひまん\r\nひみつ\r\nひめい\r\nひめじし\r\nひやけ\r\nひやす\r\nひよう\r\nびょうき\r\nひらがな\r\nひらく\r\nひりつ\r\nひりょう\r\nひるま\r\nひるやすみ\r\nひれい\r\nひろい\r\nひろう\r\nひろき\r\nひろゆき\r\nひんかく\r\nひんけつ\r\nひんこん\r\nひんしゅ\r\nひんそう\r\nぴんち\r\nひんぱん\r\nびんぼう\r\nふあん\r\nふいうち\r\nふうけい\r\nふうせん\r\nぷうたろう\r\nふうとう\r\nふうふ\r\nふえる\r\nふおん\r\nふかい\r\nふきん\r\nふくざつ\r\nふくぶくろ\r\nふこう\r\nふさい\r\nふしぎ\r\nふじみ\r\nふすま\r\nふせい\r\nふせぐ\r\nふそく\r\nぶたにく\r\nふたん\r\nふちょう\r\nふつう\r\nふつか\r\nふっかつ\r\nふっき\r\nふっこく\r\nぶどう\r\nふとる\r\nふとん\r\nふのう\r\nふはい\r\nふひょう\r\nふへん\r\nふまん\r\nふみん\r\nふめつ\r\nふめん\r\nふよう\r\nふりこ\r\nふりる\r\nふるい\r\nふんいき\r\nぶんがく\r\nぶんぐ\r\nふんしつ\r\nぶんせき\r\nふんそう\r\nぶんぽう\r\nへいあん\r\nへいおん\r\nへいがい\r\nへいき\r\nへいげん\r\nへいこう\r\nへいさ\r\nへいしゃ\r\nへいせつ\r\nへいそ\r\nへいたく\r\nへいてん\r\nへいねつ\r\nへいわ\r\nへきが\r\nへこむ\r\nべにいろ\r\nべにしょうが\r\nへらす\r\nへんかん\r\nべんきょう\r\nべんごし\r\nへんさい\r\nへんたい\r\nべんり\r\nほあん\r\nほいく\r\nぼうぎょ\r\nほうこく\r\nほうそう\r\nほうほう\r\nほうもん\r\nほうりつ\r\nほえる\r\nほおん\r\nほかん\r\nほきょう\r\nぼきん\r\nほくろ\r\nほけつ\r\nほけん\r\nほこう\r\nほこる\r\nほしい\r\nほしつ\r\nほしゅ\r\nほしょう\r\nほせい\r\nほそい\r\nほそく\r\nほたて\r\nほたる\r\nぽちぶくろ\r\nほっきょく\r\nほっさ\r\nほったん\r\nほとんど\r\nほめる\r\nほんい\r\nほんき\r\nほんけ\r\nほんしつ\r\nほんやく\r\nまいにち\r\nまかい\r\nまかせる\r\nまがる\r\nまける\r\nまこと\r\nまさつ\r\nまじめ\r\nますく\r\nまぜる\r\nまつり\r\nまとめ\r\nまなぶ\r\nまぬけ\r\nまねく\r\nまほう\r\nまもる\r\nまゆげ\r\nまよう\r\nまろやか\r\nまわす\r\nまわり\r\nまわる\r\nまんが\r\nまんきつ\r\nまんぞく\r\nまんなか\r\nみいら\r\nみうち\r\nみえる\r\nみがく\r\nみかた\r\nみかん\r\nみけん\r\nみこん\r\nみじかい\r\nみすい\r\nみすえる\r\nみせる\r\nみっか\r\nみつかる\r\nみつける\r\nみてい\r\nみとめる\r\nみなと\r\nみなみかさい\r\nみねらる\r\nみのう\r\nみのがす\r\nみほん\r\nみもと\r\nみやげ\r\nみらい\r\nみりょく\r\nみわく\r\nみんか\r\nみんぞく\r\nむいか\r\nむえき\r\nむえん\r\nむかい\r\nむかう\r\nむかえ\r\nむかし\r\nむぎちゃ\r\nむける\r\nむげん\r\nむさぼる\r\nむしあつい\r\nむしば\r\nむじゅん\r\nむしろ\r\nむすう\r\nむすこ\r\nむすぶ\r\nむすめ\r\nむせる\r\nむせん\r\nむちゅう\r\nむなしい\r\nむのう\r\nむやみ\r\nむよう\r\nむらさき\r\nむりょう\r\nむろん\r\nめいあん\r\nめいうん\r\nめいえん\r\nめいかく\r\nめいきょく\r\nめいさい\r\nめいし\r\nめいそう\r\nめいぶつ\r\nめいれい\r\nめいわく\r\nめぐまれる\r\nめざす\r\nめした\r\nめずらしい\r\nめだつ\r\nめまい\r\nめやす\r\nめんきょ\r\nめんせき\r\nめんどう\r\nもうしあげる\r\nもうどうけん\r\nもえる\r\nもくし\r\nもくてき\r\nもくようび\r\nもちろん\r\nもどる\r\nもらう\r\nもんく\r\nもんだい\r\nやおや\r\nやける\r\nやさい\r\nやさしい\r\nやすい\r\nやすたろう\r\nやすみ\r\nやせる\r\nやそう\r\nやたい\r\nやちん\r\nやっと\r\nやっぱり\r\nやぶる\r\nやめる\r\nややこしい\r\nやよい\r\nやわらかい\r\nゆうき\r\nゆうびんきょく\r\nゆうべ\r\nゆうめい\r\nゆけつ\r\nゆしゅつ\r\nゆせん\r\nゆそう\r\nゆたか\r\nゆちゃく\r\nゆでる\r\nゆにゅう\r\nゆびわ\r\nゆらい\r\nゆれる\r\nようい\r\nようか\r\nようきゅう\r\nようじ\r\nようす\r\nようちえん\r\nよかぜ\r\nよかん\r\nよきん\r\nよくせい\r\nよくぼう\r\nよけい\r\nよごれる\r\nよさん\r\nよしゅう\r\nよそう\r\nよそく\r\nよっか\r\nよてい\r\nよどがわく\r\nよねつ\r\nよやく\r\nよゆう\r\nよろこぶ\r\nよろしい\r\nらいう\r\nらくがき\r\nらくご\r\nらくさつ\r\nらくだ\r\nらしんばん\r\nらせん\r\nらぞく\r\nらたい\r\nらっか\r\nられつ\r\nりえき\r\nりかい\r\nりきさく\r\nりきせつ\r\nりくぐん\r\nりくつ\r\nりけん\r\nりこう\r\nりせい\r\nりそう\r\nりそく\r\nりてん\r\nりねん\r\nりゆう\r\nりゅうがく\r\nりよう\r\nりょうり\r\nりょかん\r\nりょくちゃ\r\nりょこう\r\nりりく\r\nりれき\r\nりろん\r\nりんご\r\nるいけい\r\nるいさい\r\nるいじ\r\nるいせき\r\nるすばん\r\nるりがわら\r\nれいかん\r\nれいぎ\r\nれいせい\r\nれいぞうこ\r\nれいとう\r\nれいぼう\r\nれきし\r\nれきだい\r\nれんあい\r\nれんけい\r\nれんこん\r\nれんさい\r\nれんしゅう\r\nれんぞく\r\nれんらく\r\nろうか\r\nろうご\r\nろうじん\r\nろうそく\r\nろくが\r\nろこつ\r\nろじうら\r\nろしゅつ\r\nろせん\r\nろてん\r\nろめん\r\nろれつ\r\nろんぎ\r\nろんぱ\r\nろんぶん\r\nろんり\r\nわかす\r\nわかめ\r\nわかやま\r\nわかれる\r\nわしつ\r\nわじまし\r\nわすれもの\r\nわらう\r\nわれる`.split('\\n');\r\n", "export const wordlist = `가격\r\n가끔\r\n가난\r\n가능\r\n가득\r\n가르침\r\n가뭄\r\n가방\r\n가상\r\n가슴\r\n가운데\r\n가을\r\n가이드\r\n가입\r\n가장\r\n가정\r\n가족\r\n가죽\r\n각오\r\n각자\r\n간격\r\n간부\r\n간섭\r\n간장\r\n간접\r\n간판\r\n갈등\r\n갈비\r\n갈색\r\n갈증\r\n감각\r\n감기\r\n감소\r\n감수성\r\n감자\r\n감정\r\n갑자기\r\n강남\r\n강당\r\n강도\r\n강력히\r\n강변\r\n강북\r\n강사\r\n강수량\r\n강아지\r\n강원도\r\n강의\r\n강제\r\n강조\r\n같이\r\n개구리\r\n개나리\r\n개방\r\n개별\r\n개선\r\n개성\r\n개인\r\n객관적\r\n거실\r\n거액\r\n거울\r\n거짓\r\n거품\r\n걱정\r\n건강\r\n건물\r\n건설\r\n건조\r\n건축\r\n걸음\r\n검사\r\n검토\r\n게시판\r\n게임\r\n겨울\r\n견해\r\n결과\r\n결국\r\n결론\r\n결석\r\n결승\r\n결심\r\n결정\r\n결혼\r\n경계\r\n경고\r\n경기\r\n경력\r\n경복궁\r\n경비\r\n경상도\r\n경영\r\n경우\r\n경쟁\r\n경제\r\n경주\r\n경찰\r\n경치\r\n경향\r\n경험\r\n계곡\r\n계단\r\n계란\r\n계산\r\n계속\r\n계약\r\n계절\r\n계층\r\n계획\r\n고객\r\n고구려\r\n고궁\r\n고급\r\n고등학생\r\n고무신\r\n고민\r\n고양이\r\n고장\r\n고전\r\n고집\r\n고춧가루\r\n고통\r\n고향\r\n곡식\r\n골목\r\n골짜기\r\n골프\r\n공간\r\n공개\r\n공격\r\n공군\r\n공급\r\n공기\r\n공동\r\n공무원\r\n공부\r\n공사\r\n공식\r\n공업\r\n공연\r\n공원\r\n공장\r\n공짜\r\n공책\r\n공통\r\n공포\r\n공항\r\n공휴일\r\n과목\r\n과일\r\n과장\r\n과정\r\n과학\r\n관객\r\n관계\r\n관광\r\n관념\r\n관람\r\n관련\r\n관리\r\n관습\r\n관심\r\n관점\r\n관찰\r\n광경\r\n광고\r\n광장\r\n광주\r\n괴로움\r\n굉장히\r\n교과서\r\n교문\r\n교복\r\n교실\r\n교양\r\n교육\r\n교장\r\n교직\r\n교통\r\n교환\r\n교훈\r\n구경\r\n구름\r\n구멍\r\n구별\r\n구분\r\n구석\r\n구성\r\n구속\r\n구역\r\n구입\r\n구청\r\n구체적\r\n국가\r\n국기\r\n국내\r\n국립\r\n국물\r\n국민\r\n국수\r\n국어\r\n국왕\r\n국적\r\n국제\r\n국회\r\n군대\r\n군사\r\n군인\r\n궁극적\r\n권리\r\n권위\r\n권투\r\n귀국\r\n귀신\r\n규정\r\n규칙\r\n균형\r\n그날\r\n그냥\r\n그늘\r\n그러나\r\n그룹\r\n그릇\r\n그림\r\n그제서야\r\n그토록\r\n극복\r\n극히\r\n근거\r\n근교\r\n근래\r\n근로\r\n근무\r\n근본\r\n근원\r\n근육\r\n근처\r\n글씨\r\n글자\r\n금강산\r\n금고\r\n금년\r\n금메달\r\n금액\r\n금연\r\n금요일\r\n금지\r\n긍정적\r\n기간\r\n기관\r\n기념\r\n기능\r\n기독교\r\n기둥\r\n기록\r\n기름\r\n기법\r\n기본\r\n기분\r\n기쁨\r\n기숙사\r\n기술\r\n기억\r\n기업\r\n기온\r\n기운\r\n기원\r\n기적\r\n기준\r\n기침\r\n기혼\r\n기획\r\n긴급\r\n긴장\r\n길이\r\n김밥\r\n김치\r\n김포공항\r\n깍두기\r\n깜빡\r\n깨달음\r\n깨소금\r\n껍질\r\n꼭대기\r\n꽃잎\r\n나들이\r\n나란히\r\n나머지\r\n나물\r\n나침반\r\n나흘\r\n낙엽\r\n난방\r\n날개\r\n날씨\r\n날짜\r\n남녀\r\n남대문\r\n남매\r\n남산\r\n남자\r\n남편\r\n남학생\r\n낭비\r\n낱말\r\n내년\r\n내용\r\n내일\r\n냄비\r\n냄새\r\n냇물\r\n냉동\r\n냉면\r\n냉방\r\n냉장고\r\n넥타이\r\n넷째\r\n노동\r\n노란색\r\n노력\r\n노인\r\n녹음\r\n녹차\r\n녹화\r\n논리\r\n논문\r\n논쟁\r\n놀이\r\n농구\r\n농담\r\n농민\r\n농부\r\n농업\r\n농장\r\n농촌\r\n높이\r\n눈동자\r\n눈물\r\n눈썹\r\n뉴욕\r\n느낌\r\n늑대\r\n능동적\r\n능력\r\n다방\r\n다양성\r\n다음\r\n다이어트\r\n다행\r\n단계\r\n단골\r\n단독\r\n단맛\r\n단순\r\n단어\r\n단위\r\n단점\r\n단체\r\n단추\r\n단편\r\n단풍\r\n달걀\r\n달러\r\n달력\r\n달리\r\n닭고기\r\n담당\r\n담배\r\n담요\r\n담임\r\n답변\r\n답장\r\n당근\r\n당분간\r\n당연히\r\n당장\r\n대규모\r\n대낮\r\n대단히\r\n대답\r\n대도시\r\n대략\r\n대량\r\n대륙\r\n대문\r\n대부분\r\n대신\r\n대응\r\n대장\r\n대전\r\n대접\r\n대중\r\n대책\r\n대출\r\n대충\r\n대통령\r\n대학\r\n대한민국\r\n대합실\r\n대형\r\n덩어리\r\n데이트\r\n도대체\r\n도덕\r\n도둑\r\n도망\r\n도서관\r\n도심\r\n도움\r\n도입\r\n도자기\r\n도저히\r\n도전\r\n도중\r\n도착\r\n독감\r\n독립\r\n독서\r\n독일\r\n독창적\r\n동화책\r\n뒷모습\r\n뒷산\r\n딸아이\r\n마누라\r\n마늘\r\n마당\r\n마라톤\r\n마련\r\n마무리\r\n마사지\r\n마약\r\n마요네즈\r\n마을\r\n마음\r\n마이크\r\n마중\r\n마지막\r\n마찬가지\r\n마찰\r\n마흔\r\n막걸리\r\n막내\r\n막상\r\n만남\r\n만두\r\n만세\r\n만약\r\n만일\r\n만점\r\n만족\r\n만화\r\n많이\r\n말기\r\n말씀\r\n말투\r\n맘대로\r\n망원경\r\n매년\r\n매달\r\n매력\r\n매번\r\n매스컴\r\n매일\r\n매장\r\n맥주\r\n먹이\r\n먼저\r\n먼지\r\n멀리\r\n메일\r\n며느리\r\n며칠\r\n면담\r\n멸치\r\n명단\r\n명령\r\n명예\r\n명의\r\n명절\r\n명칭\r\n명함\r\n모금\r\n모니터\r\n모델\r\n모든\r\n모범\r\n모습\r\n모양\r\n모임\r\n모조리\r\n모집\r\n모퉁이\r\n목걸이\r\n목록\r\n목사\r\n목소리\r\n목숨\r\n목적\r\n목표\r\n몰래\r\n몸매\r\n몸무게\r\n몸살\r\n몸속\r\n몸짓\r\n몸통\r\n몹시\r\n무관심\r\n무궁화\r\n무더위\r\n무덤\r\n무릎\r\n무슨\r\n무엇\r\n무역\r\n무용\r\n무조건\r\n무지개\r\n무척\r\n문구\r\n문득\r\n문법\r\n문서\r\n문제\r\n문학\r\n문화\r\n물가\r\n물건\r\n물결\r\n물고기\r\n물론\r\n물리학\r\n물음\r\n물질\r\n물체\r\n미국\r\n미디어\r\n미사일\r\n미술\r\n미역\r\n미용실\r\n미움\r\n미인\r\n미팅\r\n미혼\r\n민간\r\n민족\r\n민주\r\n믿음\r\n밀가루\r\n밀리미터\r\n밑바닥\r\n바가지\r\n바구니\r\n바나나\r\n바늘\r\n바닥\r\n바닷가\r\n바람\r\n바이러스\r\n바탕\r\n박물관\r\n박사\r\n박수\r\n반대\r\n반드시\r\n반말\r\n반발\r\n반성\r\n반응\r\n반장\r\n반죽\r\n반지\r\n반찬\r\n받침\r\n발가락\r\n발걸음\r\n발견\r\n발달\r\n발레\r\n발목\r\n발바닥\r\n발생\r\n발음\r\n발자국\r\n발전\r\n발톱\r\n발표\r\n밤하늘\r\n밥그릇\r\n밥맛\r\n밥상\r\n밥솥\r\n방금\r\n방면\r\n방문\r\n방바닥\r\n방법\r\n방송\r\n방식\r\n방안\r\n방울\r\n방지\r\n방학\r\n방해\r\n방향\r\n배경\r\n배꼽\r\n배달\r\n배드민턴\r\n백두산\r\n백색\r\n백성\r\n백인\r\n백제\r\n백화점\r\n버릇\r\n버섯\r\n버튼\r\n번개\r\n번역\r\n번지\r\n번호\r\n벌금\r\n벌레\r\n벌써\r\n범위\r\n범인\r\n범죄\r\n법률\r\n법원\r\n법적\r\n법칙\r\n베이징\r\n벨트\r\n변경\r\n변동\r\n변명\r\n변신\r\n변호사\r\n변화\r\n별도\r\n별명\r\n별일\r\n병실\r\n병아리\r\n병원\r\n보관\r\n보너스\r\n보라색\r\n보람\r\n보름\r\n보상\r\n보안\r\n보자기\r\n보장\r\n보전\r\n보존\r\n보통\r\n보편적\r\n보험\r\n복도\r\n복사\r\n복숭아\r\n복습\r\n볶음\r\n본격적\r\n본래\r\n본부\r\n본사\r\n본성\r\n본인\r\n본질\r\n볼펜\r\n봉사\r\n봉지\r\n봉투\r\n부근\r\n부끄러움\r\n부담\r\n부동산\r\n부문\r\n부분\r\n부산\r\n부상\r\n부엌\r\n부인\r\n부작용\r\n부장\r\n부정\r\n부족\r\n부지런히\r\n부친\r\n부탁\r\n부품\r\n부회장\r\n북부\r\n북한\r\n분노\r\n분량\r\n분리\r\n분명\r\n분석\r\n분야\r\n분위기\r\n분필\r\n분홍색\r\n불고기\r\n불과\r\n불교\r\n불꽃\r\n불만\r\n불법\r\n불빛\r\n불안\r\n불이익\r\n불행\r\n브랜드\r\n비극\r\n비난\r\n비닐\r\n비둘기\r\n비디오\r\n비로소\r\n비만\r\n비명\r\n비밀\r\n비바람\r\n비빔밥\r\n비상\r\n비용\r\n비율\r\n비중\r\n비타민\r\n비판\r\n빌딩\r\n빗물\r\n빗방울\r\n빗줄기\r\n빛깔\r\n빨간색\r\n빨래\r\n빨리\r\n사건\r\n사계절\r\n사나이\r\n사냥\r\n사람\r\n사랑\r\n사립\r\n사모님\r\n사물\r\n사방\r\n사상\r\n사생활\r\n사설\r\n사슴\r\n사실\r\n사업\r\n사용\r\n사월\r\n사장\r\n사전\r\n사진\r\n사촌\r\n사춘기\r\n사탕\r\n사투리\r\n사흘\r\n산길\r\n산부인과\r\n산업\r\n산책\r\n살림\r\n살인\r\n살짝\r\n삼계탕\r\n삼국\r\n삼십\r\n삼월\r\n삼촌\r\n상관\r\n상금\r\n상대\r\n상류\r\n상반기\r\n상상\r\n상식\r\n상업\r\n상인\r\n상자\r\n상점\r\n상처\r\n상추\r\n상태\r\n상표\r\n상품\r\n상황\r\n새벽\r\n색깔\r\n색연필\r\n생각\r\n생명\r\n생물\r\n생방송\r\n생산\r\n생선\r\n생신\r\n생일\r\n생활\r\n서랍\r\n서른\r\n서명\r\n서민\r\n서비스\r\n서양\r\n서울\r\n서적\r\n서점\r\n서쪽\r\n서클\r\n석사\r\n석유\r\n선거\r\n선물\r\n선배\r\n선생\r\n선수\r\n선원\r\n선장\r\n선전\r\n선택\r\n선풍기\r\n설거지\r\n설날\r\n설렁탕\r\n설명\r\n설문\r\n설사\r\n설악산\r\n설치\r\n설탕\r\n섭씨\r\n성공\r\n성당\r\n성명\r\n성별\r\n성인\r\n성장\r\n성적\r\n성질\r\n성함\r\n세금\r\n세미나\r\n세상\r\n세월\r\n세종대왕\r\n세탁\r\n센터\r\n센티미터\r\n셋째\r\n소규모\r\n소극적\r\n소금\r\n소나기\r\n소년\r\n소득\r\n소망\r\n소문\r\n소설\r\n소속\r\n소아과\r\n소용\r\n소원\r\n소음\r\n소중히\r\n소지품\r\n소질\r\n소풍\r\n소형\r\n속담\r\n속도\r\n속옷\r\n손가락\r\n손길\r\n손녀\r\n손님\r\n손등\r\n손목\r\n손뼉\r\n손실\r\n손질\r\n손톱\r\n손해\r\n솔직히\r\n솜씨\r\n송아지\r\n송이\r\n송편\r\n쇠고기\r\n쇼핑\r\n수건\r\n수년\r\n수단\r\n수돗물\r\n수동적\r\n수면\r\n수명\r\n수박\r\n수상\r\n수석\r\n수술\r\n수시로\r\n수업\r\n수염\r\n수영\r\n수입\r\n수준\r\n수집\r\n수출\r\n수컷\r\n수필\r\n수학\r\n수험생\r\n수화기\r\n숙녀\r\n숙소\r\n숙제\r\n순간\r\n순서\r\n순수\r\n순식간\r\n순위\r\n숟가락\r\n술병\r\n술집\r\n숫자\r\n스님\r\n스물\r\n스스로\r\n스승\r\n스웨터\r\n스위치\r\n스케이트\r\n스튜디오\r\n스트레스\r\n스포츠\r\n슬쩍\r\n슬픔\r\n습관\r\n습기\r\n승객\r\n승리\r\n승부\r\n승용차\r\n승진\r\n시각\r\n시간\r\n시골\r\n시금치\r\n시나리오\r\n시댁\r\n시리즈\r\n시멘트\r\n시민\r\n시부모\r\n시선\r\n시설\r\n시스템\r\n시아버지\r\n시어머니\r\n시월\r\n시인\r\n시일\r\n시작\r\n시장\r\n시절\r\n시점\r\n시중\r\n시즌\r\n시집\r\n시청\r\n시합\r\n시험\r\n식구\r\n식기\r\n식당\r\n식량\r\n식료품\r\n식물\r\n식빵\r\n식사\r\n식생활\r\n식초\r\n식탁\r\n식품\r\n신고\r\n신규\r\n신념\r\n신문\r\n신발\r\n신비\r\n신사\r\n신세\r\n신용\r\n신제품\r\n신청\r\n신체\r\n신화\r\n실감\r\n실내\r\n실력\r\n실례\r\n실망\r\n실수\r\n실습\r\n실시\r\n실장\r\n실정\r\n실질적\r\n실천\r\n실체\r\n실컷\r\n실태\r\n실패\r\n실험\r\n실현\r\n심리\r\n심부름\r\n심사\r\n심장\r\n심정\r\n심판\r\n쌍둥이\r\n씨름\r\n씨앗\r\n아가씨\r\n아나운서\r\n아드님\r\n아들\r\n아쉬움\r\n아스팔트\r\n아시아\r\n아울러\r\n아저씨\r\n아줌마\r\n아직\r\n아침\r\n아파트\r\n아프리카\r\n아픔\r\n아홉\r\n아흔\r\n악기\r\n악몽\r\n악수\r\n안개\r\n안경\r\n안과\r\n안내\r\n안녕\r\n안동\r\n안방\r\n안부\r\n안주\r\n알루미늄\r\n알코올\r\n암시\r\n암컷\r\n압력\r\n앞날\r\n앞문\r\n애인\r\n애정\r\n액수\r\n앨범\r\n야간\r\n야단\r\n야옹\r\n약간\r\n약국\r\n약속\r\n약수\r\n약점\r\n약품\r\n약혼녀\r\n양념\r\n양력\r\n양말\r\n양배추\r\n양주\r\n양파\r\n어둠\r\n어려움\r\n어른\r\n어젯밤\r\n어쨌든\r\n어쩌다가\r\n어쩐지\r\n언니\r\n언덕\r\n언론\r\n언어\r\n얼굴\r\n얼른\r\n얼음\r\n얼핏\r\n엄마\r\n업무\r\n업종\r\n업체\r\n엉덩이\r\n엉망\r\n엉터리\r\n엊그제\r\n에너지\r\n에어컨\r\n엔진\r\n여건\r\n여고생\r\n여관\r\n여군\r\n여권\r\n여대생\r\n여덟\r\n여동생\r\n여든\r\n여론\r\n여름\r\n여섯\r\n여성\r\n여왕\r\n여인\r\n여전히\r\n여직원\r\n여학생\r\n여행\r\n역사\r\n역시\r\n역할\r\n연결\r\n연구\r\n연극\r\n연기\r\n연락\r\n연설\r\n연세\r\n연속\r\n연습\r\n연애\r\n연예인\r\n연인\r\n연장\r\n연주\r\n연출\r\n연필\r\n연합\r\n연휴\r\n열기\r\n열매\r\n열쇠\r\n열심히\r\n열정\r\n열차\r\n열흘\r\n염려\r\n엽서\r\n영국\r\n영남\r\n영상\r\n영양\r\n영역\r\n영웅\r\n영원히\r\n영하\r\n영향\r\n영혼\r\n영화\r\n옆구리\r\n옆방\r\n옆집\r\n예감\r\n예금\r\n예방\r\n예산\r\n예상\r\n예선\r\n예술\r\n예습\r\n예식장\r\n예약\r\n예전\r\n예절\r\n예정\r\n예컨대\r\n옛날\r\n오늘\r\n오락\r\n오랫동안\r\n오렌지\r\n오로지\r\n오른발\r\n오븐\r\n오십\r\n오염\r\n오월\r\n오전\r\n오직\r\n오징어\r\n오페라\r\n오피스텔\r\n오히려\r\n옥상\r\n옥수수\r\n온갖\r\n온라인\r\n온몸\r\n온종일\r\n온통\r\n올가을\r\n올림픽\r\n올해\r\n옷차림\r\n와이셔츠\r\n와인\r\n완성\r\n완전\r\n왕비\r\n왕자\r\n왜냐하면\r\n왠지\r\n외갓집\r\n외국\r\n외로움\r\n외삼촌\r\n외출\r\n외침\r\n외할머니\r\n왼발\r\n왼손\r\n왼쪽\r\n요금\r\n요일\r\n요즘\r\n요청\r\n용기\r\n용서\r\n용어\r\n우산\r\n우선\r\n우승\r\n우연히\r\n우정\r\n우체국\r\n우편\r\n운동\r\n운명\r\n운반\r\n운전\r\n운행\r\n울산\r\n울음\r\n움직임\r\n웃어른\r\n웃음\r\n워낙\r\n원고\r\n원래\r\n원서\r\n원숭이\r\n원인\r\n원장\r\n원피스\r\n월급\r\n월드컵\r\n월세\r\n월요일\r\n웨이터\r\n위반\r\n위법\r\n위성\r\n위원\r\n위험\r\n위협\r\n윗사람\r\n유난히\r\n유럽\r\n유명\r\n유물\r\n유산\r\n유적\r\n유치원\r\n유학\r\n유행\r\n유형\r\n육군\r\n육상\r\n육십\r\n육체\r\n은행\r\n음력\r\n음료\r\n음반\r\n음성\r\n음식\r\n음악\r\n음주\r\n의견\r\n의논\r\n의문\r\n의복\r\n의식\r\n의심\r\n의외로\r\n의욕\r\n의원\r\n의학\r\n이것\r\n이곳\r\n이념\r\n이놈\r\n이달\r\n이대로\r\n이동\r\n이렇게\r\n이력서\r\n이론적\r\n이름\r\n이민\r\n이발소\r\n이별\r\n이불\r\n이빨\r\n이상\r\n이성\r\n이슬\r\n이야기\r\n이용\r\n이웃\r\n이월\r\n이윽고\r\n이익\r\n이전\r\n이중\r\n이튿날\r\n이틀\r\n이혼\r\n인간\r\n인격\r\n인공\r\n인구\r\n인근\r\n인기\r\n인도\r\n인류\r\n인물\r\n인생\r\n인쇄\r\n인연\r\n인원\r\n인재\r\n인종\r\n인천\r\n인체\r\n인터넷\r\n인하\r\n인형\r\n일곱\r\n일기\r\n일단\r\n일대\r\n일등\r\n일반\r\n일본\r\n일부\r\n일상\r\n일생\r\n일손\r\n일요일\r\n일월\r\n일정\r\n일종\r\n일주일\r\n일찍\r\n일체\r\n일치\r\n일행\r\n일회용\r\n임금\r\n임무\r\n입대\r\n입력\r\n입맛\r\n입사\r\n입술\r\n입시\r\n입원\r\n입장\r\n입학\r\n자가용\r\n자격\r\n자극\r\n자동\r\n자랑\r\n자부심\r\n자식\r\n자신\r\n자연\r\n자원\r\n자율\r\n자전거\r\n자정\r\n자존심\r\n자판\r\n작가\r\n작년\r\n작성\r\n작업\r\n작용\r\n작은딸\r\n작품\r\n잔디\r\n잔뜩\r\n잔치\r\n잘못\r\n잠깐\r\n잠수함\r\n잠시\r\n잠옷\r\n잠자리\r\n잡지\r\n장관\r\n장군\r\n장기간\r\n장래\r\n장례\r\n장르\r\n장마\r\n장면\r\n장모\r\n장미\r\n장비\r\n장사\r\n장소\r\n장식\r\n장애인\r\n장인\r\n장점\r\n장차\r\n장학금\r\n재능\r\n재빨리\r\n재산\r\n재생\r\n재작년\r\n재정\r\n재채기\r\n재판\r\n재학\r\n재활용\r\n저것\r\n저고리\r\n저곳\r\n저녁\r\n저런\r\n저렇게\r\n저번\r\n저울\r\n저절로\r\n저축\r\n적극\r\n적당히\r\n적성\r\n적용\r\n적응\r\n전개\r\n전공\r\n전기\r\n전달\r\n전라도\r\n전망\r\n전문\r\n전반\r\n전부\r\n전세\r\n전시\r\n전용\r\n전자\r\n전쟁\r\n전주\r\n전철\r\n전체\r\n전통\r\n전혀\r\n전후\r\n절대\r\n절망\r\n절반\r\n절약\r\n절차\r\n점검\r\n점수\r\n점심\r\n점원\r\n점점\r\n점차\r\n접근\r\n접시\r\n접촉\r\n젓가락\r\n정거장\r\n정도\r\n정류장\r\n정리\r\n정말\r\n정면\r\n정문\r\n정반대\r\n정보\r\n정부\r\n정비\r\n정상\r\n정성\r\n정오\r\n정원\r\n정장\r\n정지\r\n정치\r\n정확히\r\n제공\r\n제과점\r\n제대로\r\n제목\r\n제발\r\n제법\r\n제삿날\r\n제안\r\n제일\r\n제작\r\n제주도\r\n제출\r\n제품\r\n제한\r\n조각\r\n조건\r\n조금\r\n조깅\r\n조명\r\n조미료\r\n조상\r\n조선\r\n조용히\r\n조절\r\n조정\r\n조직\r\n존댓말\r\n존재\r\n졸업\r\n졸음\r\n종교\r\n종로\r\n종류\r\n종소리\r\n종업원\r\n종종\r\n종합\r\n좌석\r\n죄인\r\n주관적\r\n주름\r\n주말\r\n주머니\r\n주먹\r\n주문\r\n주민\r\n주방\r\n주변\r\n주식\r\n주인\r\n주일\r\n주장\r\n주전자\r\n주택\r\n준비\r\n줄거리\r\n줄기\r\n줄무늬\r\n중간\r\n중계방송\r\n중국\r\n중년\r\n중단\r\n중독\r\n중반\r\n중부\r\n중세\r\n중소기업\r\n중순\r\n중앙\r\n중요\r\n중학교\r\n즉석\r\n즉시\r\n즐거움\r\n증가\r\n증거\r\n증권\r\n증상\r\n증세\r\n지각\r\n지갑\r\n지경\r\n지극히\r\n지금\r\n지급\r\n지능\r\n지름길\r\n지리산\r\n지방\r\n지붕\r\n지식\r\n지역\r\n지우개\r\n지원\r\n지적\r\n지점\r\n지진\r\n지출\r\n직선\r\n직업\r\n직원\r\n직장\r\n진급\r\n진동\r\n진로\r\n진료\r\n진리\r\n진짜\r\n진찰\r\n진출\r\n진통\r\n진행\r\n질문\r\n질병\r\n질서\r\n짐작\r\n집단\r\n집안\r\n집중\r\n짜증\r\n찌꺼기\r\n차남\r\n차라리\r\n차량\r\n차림\r\n차별\r\n차선\r\n차츰\r\n착각\r\n찬물\r\n찬성\r\n참가\r\n참기름\r\n참새\r\n참석\r\n참여\r\n참외\r\n참조\r\n찻잔\r\n창가\r\n창고\r\n창구\r\n창문\r\n창밖\r\n창작\r\n창조\r\n채널\r\n채점\r\n책가방\r\n책방\r\n책상\r\n책임\r\n챔피언\r\n처벌\r\n처음\r\n천국\r\n천둥\r\n천장\r\n천재\r\n천천히\r\n철도\r\n철저히\r\n철학\r\n첫날\r\n첫째\r\n청년\r\n청바지\r\n청소\r\n청춘\r\n체계\r\n체력\r\n체온\r\n체육\r\n체중\r\n체험\r\n초등학생\r\n초반\r\n초밥\r\n초상화\r\n초순\r\n초여름\r\n초원\r\n초저녁\r\n초점\r\n초청\r\n초콜릿\r\n촛불\r\n총각\r\n총리\r\n총장\r\n촬영\r\n최근\r\n최상\r\n최선\r\n최신\r\n최악\r\n최종\r\n추석\r\n추억\r\n추진\r\n추천\r\n추측\r\n축구\r\n축소\r\n축제\r\n축하\r\n출근\r\n출발\r\n출산\r\n출신\r\n출연\r\n출입\r\n출장\r\n출판\r\n충격\r\n충고\r\n충돌\r\n충분히\r\n충청도\r\n취업\r\n취직\r\n취향\r\n치약\r\n친구\r\n친척\r\n칠십\r\n칠월\r\n칠판\r\n침대\r\n침묵\r\n침실\r\n칫솔\r\n칭찬\r\n카메라\r\n카운터\r\n칼국수\r\n캐릭터\r\n캠퍼스\r\n캠페인\r\n커튼\r\n컨디션\r\n컬러\r\n컴퓨터\r\n코끼리\r\n코미디\r\n콘서트\r\n콜라\r\n콤플렉스\r\n콩나물\r\n쾌감\r\n쿠데타\r\n크림\r\n큰길\r\n큰딸\r\n큰소리\r\n큰아들\r\n큰어머니\r\n큰일\r\n큰절\r\n클래식\r\n클럽\r\n킬로\r\n타입\r\n타자기\r\n탁구\r\n탁자\r\n탄생\r\n태권도\r\n태양\r\n태풍\r\n택시\r\n탤런트\r\n터널\r\n터미널\r\n테니스\r\n테스트\r\n테이블\r\n텔레비전\r\n토론\r\n토마토\r\n토요일\r\n통계\r\n통과\r\n통로\r\n통신\r\n통역\r\n통일\r\n통장\r\n통제\r\n통증\r\n통합\r\n통화\r\n퇴근\r\n퇴원\r\n퇴직금\r\n튀김\r\n트럭\r\n특급\r\n특별\r\n특성\r\n특수\r\n특징\r\n특히\r\n튼튼히\r\n티셔츠\r\n파란색\r\n파일\r\n파출소\r\n판결\r\n판단\r\n판매\r\n판사\r\n팔십\r\n팔월\r\n팝송\r\n패션\r\n팩스\r\n팩시밀리\r\n팬티\r\n퍼센트\r\n페인트\r\n편견\r\n편의\r\n편지\r\n편히\r\n평가\r\n평균\r\n평생\r\n평소\r\n평양\r\n평일\r\n평화\r\n포스터\r\n포인트\r\n포장\r\n포함\r\n표면\r\n표정\r\n표준\r\n표현\r\n품목\r\n품질\r\n풍경\r\n풍속\r\n풍습\r\n프랑스\r\n프린터\r\n플라스틱\r\n피곤\r\n피망\r\n피아노\r\n필름\r\n필수\r\n필요\r\n필자\r\n필통\r\n핑계\r\n하느님\r\n하늘\r\n하드웨어\r\n하룻밤\r\n하반기\r\n하숙집\r\n하순\r\n하여튼\r\n하지만\r\n하천\r\n하품\r\n하필\r\n학과\r\n학교\r\n학급\r\n학기\r\n학년\r\n학력\r\n학번\r\n학부모\r\n학비\r\n학생\r\n학술\r\n학습\r\n학용품\r\n학원\r\n학위\r\n학자\r\n학점\r\n한계\r\n한글\r\n한꺼번에\r\n한낮\r\n한눈\r\n한동안\r\n한때\r\n한라산\r\n한마디\r\n한문\r\n한번\r\n한복\r\n한식\r\n한여름\r\n한쪽\r\n할머니\r\n할아버지\r\n할인\r\n함께\r\n함부로\r\n합격\r\n합리적\r\n항공\r\n항구\r\n항상\r\n항의\r\n해결\r\n해군\r\n해답\r\n해당\r\n해물\r\n해석\r\n해설\r\n해수욕장\r\n해안\r\n핵심\r\n핸드백\r\n햄버거\r\n햇볕\r\n햇살\r\n행동\r\n행복\r\n행사\r\n행운\r\n행위\r\n향기\r\n향상\r\n향수\r\n허락\r\n허용\r\n헬기\r\n현관\r\n현금\r\n현대\r\n현상\r\n현실\r\n현장\r\n현재\r\n현지\r\n혈액\r\n협력\r\n형부\r\n형사\r\n형수\r\n형식\r\n형제\r\n형태\r\n형편\r\n혜택\r\n호기심\r\n호남\r\n호랑이\r\n호박\r\n호텔\r\n호흡\r\n혹시\r\n홀로\r\n홈페이지\r\n홍보\r\n홍수\r\n홍차\r\n화면\r\n화분\r\n화살\r\n화요일\r\n화장\r\n화학\r\n확보\r\n확인\r\n확장\r\n확정\r\n환갑\r\n환경\r\n환영\r\n환율\r\n환자\r\n활기\r\n활동\r\n활발히\r\n활용\r\n활짝\r\n회견\r\n회관\r\n회복\r\n회색\r\n회원\r\n회장\r\n회전\r\n횟수\r\n횡단보도\r\n효율적\r\n후반\r\n후춧가루\r\n훈련\r\n훨씬\r\n휴식\r\n휴일\r\n흉내\r\n흐름\r\n흑백\r\n흑인\r\n흔적\r\n흔히\r\n흥미\r\n흥분\r\n희곡\r\n희망\r\n희생\r\n흰색\r\n힘껏`.split('\\n');\r\n", "export const wordlist = `abacate\r\nabaixo\r\nabalar\r\nabater\r\nabduzir\r\nabelha\r\naberto\r\nabismo\r\nabotoar\r\nabranger\r\nabreviar\r\nabrigar\r\nabrupto\r\nabsinto\r\nabsoluto\r\nabsurdo\r\nabutre\r\nacabado\r\nacalmar\r\nacampar\r\nacanhar\r\nacaso\r\naceitar\r\nacelerar\r\nacenar\r\nacervo\r\nacessar\r\nacetona\r\nachatar\r\nacidez\r\nacima\r\nacionado\r\nacirrar\r\naclamar\r\naclive\r\nacolhida\r\nacomodar\r\nacoplar\r\nacordar\r\nacumular\r\nacusador\r\nadaptar\r\nadega\r\nadentro\r\nadepto\r\nadequar\r\naderente\r\nadesivo\r\nadeus\r\nadiante\r\naditivo\r\nadjetivo\r\nadjunto\r\nadmirar\r\nadorar\r\nadquirir\r\nadubo\r\nadverso\r\nadvogado\r\naeronave\r\nafastar\r\naferir\r\nafetivo\r\nafinador\r\nafivelar\r\naflito\r\nafluente\r\nafrontar\r\nagachar\r\nagarrar\r\nagasalho\r\nagenciar\r\nagilizar\r\nagiota\r\nagitado\r\nagora\r\nagradar\r\nagreste\r\nagrupar\r\naguardar\r\nagulha\r\najoelhar\r\najudar\r\najustar\r\nalameda\r\nalarme\r\nalastrar\r\nalavanca\r\nalbergue\r\nalbino\r\nalcatra\r\naldeia\r\nalecrim\r\nalegria\r\nalertar\r\nalface\r\nalfinete\r\nalgum\r\nalheio\r\naliar\r\nalicate\r\nalienar\r\nalinhar\r\naliviar\r\nalmofada\r\nalocar\r\nalpiste\r\nalterar\r\naltitude\r\nalucinar\r\nalugar\r\naluno\r\nalusivo\r\nalvo\r\namaciar\r\namador\r\namarelo\r\namassar\r\nambas\r\nambiente\r\nameixa\r\namenizar\r\namido\r\namistoso\r\namizade\r\namolador\r\namontoar\r\namoroso\r\namostra\r\namparar\r\nampliar\r\nampola\r\nanagrama\r\nanalisar\r\nanarquia\r\nanatomia\r\nandaime\r\nanel\r\nanexo\r\nangular\r\nanimar\r\nanjo\r\nanomalia\r\nanotado\r\nansioso\r\nanterior\r\nanuidade\r\nanunciar\r\nanzol\r\napagador\r\napalpar\r\napanhado\r\napego\r\napelido\r\napertada\r\napesar\r\napetite\r\napito\r\naplauso\r\naplicada\r\napoio\r\napontar\r\naposta\r\naprendiz\r\naprovar\r\naquecer\r\narame\r\naranha\r\narara\r\narcada\r\nardente\r\nareia\r\narejar\r\narenito\r\naresta\r\nargiloso\r\nargola\r\narma\r\narquivo\r\narraial\r\narrebate\r\narriscar\r\narroba\r\narrumar\r\narsenal\r\narterial\r\nartigo\r\narvoredo\r\nasfaltar\r\nasilado\r\naspirar\r\nassador\r\nassinar\r\nassoalho\r\nassunto\r\nastral\r\natacado\r\natadura\r\natalho\r\natarefar\r\natear\r\natender\r\naterro\r\nateu\r\natingir\r\natirador\r\nativo\r\natoleiro\r\natracar\r\natrevido\r\natriz\r\natual\r\natum\r\nauditor\r\naumentar\r\naura\r\naurora\r\nautismo\r\nautoria\r\nautuar\r\navaliar\r\navante\r\navaria\r\navental\r\navesso\r\naviador\r\navisar\r\navulso\r\naxila\r\nazarar\r\nazedo\r\nazeite\r\nazulejo\r\nbabar\r\nbabosa\r\nbacalhau\r\nbacharel\r\nbacia\r\nbagagem\r\nbaiano\r\nbailar\r\nbaioneta\r\nbairro\r\nbaixista\r\nbajular\r\nbaleia\r\nbaliza\r\nbalsa\r\nbanal\r\nbandeira\r\nbanho\r\nbanir\r\nbanquete\r\nbarato\r\nbarbado\r\nbaronesa\r\nbarraca\r\nbarulho\r\nbaseado\r\nbastante\r\nbatata\r\nbatedor\r\nbatida\r\nbatom\r\nbatucar\r\nbaunilha\r\nbeber\r\nbeijo\r\nbeirada\r\nbeisebol\r\nbeldade\r\nbeleza\r\nbelga\r\nbeliscar\r\nbendito\r\nbengala\r\nbenzer\r\nberimbau\r\nberlinda\r\nberro\r\nbesouro\r\nbexiga\r\nbezerro\r\nbico\r\nbicudo\r\nbienal\r\nbifocal\r\nbifurcar\r\nbigorna\r\nbilhete\r\nbimestre\r\nbimotor\r\nbiologia\r\nbiombo\r\nbiosfera\r\nbipolar\r\nbirrento\r\nbiscoito\r\nbisneto\r\nbispo\r\nbissexto\r\nbitola\r\nbizarro\r\nblindado\r\nbloco\r\nbloquear\r\nboato\r\nbobagem\r\nbocado\r\nbocejo\r\nbochecha\r\nboicotar\r\nbolada\r\nboletim\r\nbolha\r\nbolo\r\nbombeiro\r\nbonde\r\nboneco\r\nbonita\r\nborbulha\r\nborda\r\nboreal\r\nborracha\r\nbovino\r\nboxeador\r\nbranco\r\nbrasa\r\nbraveza\r\nbreu\r\nbriga\r\nbrilho\r\nbrincar\r\nbroa\r\nbrochura\r\nbronzear\r\nbroto\r\nbruxo\r\nbucha\r\nbudismo\r\nbufar\r\nbule\r\nburaco\r\nbusca\r\nbusto\r\nbuzina\r\ncabana\r\ncabelo\r\ncabide\r\ncabo\r\ncabrito\r\ncacau\r\ncacetada\r\ncachorro\r\ncacique\r\ncadastro\r\ncadeado\r\ncafezal\r\ncaiaque\r\ncaipira\r\ncaixote\r\ncajado\r\ncaju\r\ncalafrio\r\ncalcular\r\ncaldeira\r\ncalibrar\r\ncalmante\r\ncalota\r\ncamada\r\ncambista\r\ncamisa\r\ncamomila\r\ncampanha\r\ncamuflar\r\ncanavial\r\ncancelar\r\ncaneta\r\ncanguru\r\ncanhoto\r\ncanivete\r\ncanoa\r\ncansado\r\ncantar\r\ncanudo\r\ncapacho\r\ncapela\r\ncapinar\r\ncapotar\r\ncapricho\r\ncaptador\r\ncapuz\r\ncaracol\r\ncarbono\r\ncardeal\r\ncareca\r\ncarimbar\r\ncarneiro\r\ncarpete\r\ncarreira\r\ncartaz\r\ncarvalho\r\ncasaco\r\ncasca\r\ncasebre\r\ncastelo\r\ncasulo\r\ncatarata\r\ncativar\r\ncaule\r\ncausador\r\ncautelar\r\ncavalo\r\ncaverna\r\ncebola\r\ncedilha\r\ncegonha\r\ncelebrar\r\ncelular\r\ncenoura\r\ncenso\r\ncenteio\r\ncercar\r\ncerrado\r\ncerteiro\r\ncerveja\r\ncetim\r\ncevada\r\nchacota\r\nchaleira\r\nchamado\r\nchapada\r\ncharme\r\nchatice\r\nchave\r\nchefe\r\nchegada\r\ncheiro\r\ncheque\r\nchicote\r\nchifre\r\nchinelo\r\nchocalho\r\nchover\r\nchumbo\r\nchutar\r\nchuva\r\ncicatriz\r\nciclone\r\ncidade\r\ncidreira\r\nciente\r\ncigana\r\ncimento\r\ncinto\r\ncinza\r\nciranda\r\ncircuito\r\ncirurgia\r\ncitar\r\nclareza\r\nclero\r\nclicar\r\nclone\r\nclube\r\ncoado\r\ncoagir\r\ncobaia\r\ncobertor\r\ncobrar\r\ncocada\r\ncoelho\r\ncoentro\r\ncoeso\r\ncogumelo\r\ncoibir\r\ncoifa\r\ncoiote\r\ncolar\r\ncoleira\r\ncolher\r\ncolidir\r\ncolmeia\r\ncolono\r\ncoluna\r\ncomando\r\ncombinar\r\ncomentar\r\ncomitiva\r\ncomover\r\ncomplexo\r\ncomum\r\nconcha\r\ncondor\r\nconectar\r\nconfuso\r\ncongelar\r\nconhecer\r\nconjugar\r\nconsumir\r\ncontrato\r\nconvite\r\ncooperar\r\ncopeiro\r\ncopiador\r\ncopo\r\ncoquetel\r\ncoragem\r\ncordial\r\ncorneta\r\ncoronha\r\ncorporal\r\ncorreio\r\ncortejo\r\ncoruja\r\ncorvo\r\ncosseno\r\ncostela\r\ncotonete\r\ncouro\r\ncouve\r\ncovil\r\ncozinha\r\ncratera\r\ncravo\r\ncreche\r\ncredor\r\ncreme\r\ncrer\r\ncrespo\r\ncriada\r\ncriminal\r\ncrioulo\r\ncrise\r\ncriticar\r\ncrosta\r\ncrua\r\ncruzeiro\r\ncubano\r\ncueca\r\ncuidado\r\ncujo\r\nculatra\r\nculminar\r\nculpar\r\ncultura\r\ncumprir\r\ncunhado\r\ncupido\r\ncurativo\r\ncurral\r\ncursar\r\ncurto\r\ncuspir\r\ncustear\r\ncutelo\r\ndamasco\r\ndatar\r\ndebater\r\ndebitar\r\ndeboche\r\ndebulhar\r\ndecalque\r\ndecimal\r\ndeclive\r\ndecote\r\ndecretar\r\ndedal\r\ndedicado\r\ndeduzir\r\ndefesa\r\ndefumar\r\ndegelo\r\ndegrau\r\ndegustar\r\ndeitado\r\ndeixar\r\ndelator\r\ndelegado\r\ndelinear\r\ndelonga\r\ndemanda\r\ndemitir\r\ndemolido\r\ndentista\r\ndepenado\r\ndepilar\r\ndepois\r\ndepressa\r\ndepurar\r\nderiva\r\nderramar\r\ndesafio\r\ndesbotar\r\ndescanso\r\ndesenho\r\ndesfiado\r\ndesgaste\r\ndesigual\r\ndeslize\r\ndesmamar\r\ndesova\r\ndespesa\r\ndestaque\r\ndesviar\r\ndetalhar\r\ndetentor\r\ndetonar\r\ndetrito\r\ndeusa\r\ndever\r\ndevido\r\ndevotado\r\ndezena\r\ndiagrama\r\ndialeto\r\ndidata\r\ndifuso\r\ndigitar\r\ndilatado\r\ndiluente\r\ndiminuir\r\ndinastia\r\ndinheiro\r\ndiocese\r\ndireto\r\ndiscreta\r\ndisfarce\r\ndisparo\r\ndisquete\r\ndissipar\r\ndistante\r\nditador\r\ndiurno\r\ndiverso\r\ndivisor\r\ndivulgar\r\ndizer\r\ndobrador\r\ndolorido\r\ndomador\r\ndominado\r\ndonativo\r\ndonzela\r\ndormente\r\ndorsal\r\ndosagem\r\ndourado\r\ndoutor\r\ndrenagem\r\ndrible\r\ndrogaria\r\nduelar\r\nduende\r\ndueto\r\nduplo\r\nduquesa\r\ndurante\r\nduvidoso\r\neclodir\r\necoar\r\necologia\r\nedificar\r\nedital\r\neducado\r\nefeito\r\nefetivar\r\nejetar\r\nelaborar\r\neleger\r\neleitor\r\nelenco\r\nelevador\r\neliminar\r\nelogiar\r\nembargo\r\nembolado\r\nembrulho\r\nembutido\r\nemenda\r\nemergir\r\nemissor\r\nempatia\r\nempenho\r\nempinado\r\nempolgar\r\nemprego\r\nempurrar\r\nemulador\r\nencaixe\r\nencenado\r\nenchente\r\nencontro\r\nendeusar\r\nendossar\r\nenfaixar\r\nenfeite\r\nenfim\r\nengajado\r\nengenho\r\nenglobar\r\nengomado\r\nengraxar\r\nenguia\r\nenjoar\r\nenlatar\r\nenquanto\r\nenraizar\r\nenrolado\r\nenrugar\r\nensaio\r\nenseada\r\nensino\r\nensopado\r\nentanto\r\nenteado\r\nentidade\r\nentortar\r\nentrada\r\nentulho\r\nenvergar\r\nenviado\r\nenvolver\r\nenxame\r\nenxerto\r\nenxofre\r\nenxuto\r\nepiderme\r\nequipar\r\nereto\r\nerguido\r\nerrata\r\nerva\r\nervilha\r\nesbanjar\r\nesbelto\r\nescama\r\nescola\r\nescrita\r\nescuta\r\nesfinge\r\nesfolar\r\nesfregar\r\nesfumado\r\nesgrima\r\nesmalte\r\nespanto\r\nespelho\r\nespiga\r\nesponja\r\nespreita\r\nespumar\r\nesquerda\r\nestaca\r\nesteira\r\nesticar\r\nestofado\r\nestrela\r\nestudo\r\nesvaziar\r\netanol\r\netiqueta\r\neuforia\r\neuropeu\r\nevacuar\r\nevaporar\r\nevasivo\r\neventual\r\nevidente\r\nevoluir\r\nexagero\r\nexalar\r\nexaminar\r\nexato\r\nexausto\r\nexcesso\r\nexcitar\r\nexclamar\r\nexecutar\r\nexemplo\r\nexibir\r\nexigente\r\nexonerar\r\nexpandir\r\nexpelir\r\nexpirar\r\nexplanar\r\nexposto\r\nexpresso\r\nexpulsar\r\nexterno\r\nextinto\r\nextrato\r\nfabricar\r\nfabuloso\r\nfaceta\r\nfacial\r\nfada\r\nfadiga\r\nfaixa\r\nfalar\r\nfalta\r\nfamiliar\r\nfandango\r\nfanfarra\r\nfantoche\r\nfardado\r\nfarelo\r\nfarinha\r\nfarofa\r\nfarpa\r\nfartura\r\nfatia\r\nfator\r\nfavorita\r\nfaxina\r\nfazenda\r\nfechado\r\nfeijoada\r\nfeirante\r\nfelino\r\nfeminino\r\nfenda\r\nfeno\r\nfera\r\nferiado\r\nferrugem\r\nferver\r\nfestejar\r\nfetal\r\nfeudal\r\nfiapo\r\nfibrose\r\nficar\r\nficheiro\r\nfigurado\r\nfileira\r\nfilho\r\nfilme\r\nfiltrar\r\nfirmeza\r\nfisgada\r\nfissura\r\nfita\r\nfivela\r\nfixador\r\nfixo\r\nflacidez\r\nflamingo\r\nflanela\r\nflechada\r\nflora\r\nflutuar\r\nfluxo\r\nfocal\r\nfocinho\r\nfofocar\r\nfogo\r\nfoguete\r\nfoice\r\nfolgado\r\nfolheto\r\nforjar\r\nformiga\r\nforno\r\nforte\r\nfosco\r\nfossa\r\nfragata\r\nfralda\r\nfrango\r\nfrasco\r\nfraterno\r\nfreira\r\nfrente\r\nfretar\r\nfrieza\r\nfriso\r\nfritura\r\nfronha\r\nfrustrar\r\nfruteira\r\nfugir\r\nfulano\r\nfuligem\r\nfundar\r\nfungo\r\nfunil\r\nfurador\r\nfurioso\r\nfutebol\r\ngabarito\r\ngabinete\r\ngado\r\ngaiato\r\ngaiola\r\ngaivota\r\ngalega\r\ngalho\r\ngalinha\r\ngalocha\r\nganhar\r\ngaragem\r\ngarfo\r\ngargalo\r\ngarimpo\r\ngaroupa\r\ngarrafa\r\ngasoduto\r\ngasto\r\ngata\r\ngatilho\r\ngaveta\r\ngazela\r\ngelado\r\ngeleia\r\ngelo\r\ngemada\r\ngemer\r\ngemido\r\ngeneroso\r\ngengiva\r\ngenial\r\ngenoma\r\ngenro\r\ngeologia\r\ngerador\r\ngerminar\r\ngesso\r\ngestor\r\nginasta\r\ngincana\r\ngingado\r\ngirafa\r\ngirino\r\nglacial\r\nglicose\r\nglobal\r\nglorioso\r\ngoela\r\ngoiaba\r\ngolfe\r\ngolpear\r\ngordura\r\ngorjeta\r\ngorro\r\ngostoso\r\ngoteira\r\ngovernar\r\ngracejo\r\ngradual\r\ngrafite\r\ngralha\r\ngrampo\r\ngranada\r\ngratuito\r\ngraveto\r\ngraxa\r\ngrego\r\ngrelhar\r\ngreve\r\ngrilo\r\ngrisalho\r\ngritaria\r\ngrosso\r\ngrotesco\r\ngrudado\r\ngrunhido\r\ngruta\r\nguache\r\nguarani\r\nguaxinim\r\nguerrear\r\nguiar\r\nguincho\r\nguisado\r\ngula\r\nguloso\r\nguru\r\nhabitar\r\nharmonia\r\nhaste\r\nhaver\r\nhectare\r\nherdar\r\nheresia\r\nhesitar\r\nhiato\r\nhibernar\r\nhidratar\r\nhiena\r\nhino\r\nhipismo\r\nhipnose\r\nhipoteca\r\nhoje\r\nholofote\r\nhomem\r\nhonesto\r\nhonrado\r\nhormonal\r\nhospedar\r\nhumorado\r\niate\r\nideia\r\nidoso\r\nignorado\r\nigreja\r\niguana\r\nileso\r\nilha\r\niludido\r\niluminar\r\nilustrar\r\nimagem\r\nimediato\r\nimenso\r\nimersivo\r\niminente\r\nimitador\r\nimortal\r\nimpacto\r\nimpedir\r\nimplante\r\nimpor\r\nimprensa\r\nimpune\r\nimunizar\r\ninalador\r\ninapto\r\ninativo\r\nincenso\r\ninchar\r\nincidir\r\nincluir\r\nincolor\r\nindeciso\r\nindireto\r\nindutor\r\nineficaz\r\ninerente\r\ninfantil\r\ninfestar\r\ninfinito\r\ninflamar\r\ninformal\r\ninfrator\r\ningerir\r\ninibido\r\ninicial\r\ninimigo\r\ninjetar\r\ninocente\r\ninodoro\r\ninovador\r\ninox\r\ninquieto\r\ninscrito\r\ninseto\r\ninsistir\r\ninspetor\r\ninstalar\r\ninsulto\r\nintacto\r\nintegral\r\nintimar\r\nintocado\r\nintriga\r\ninvasor\r\ninverno\r\ninvicto\r\ninvocar\r\niogurte\r\niraniano\r\nironizar\r\nirreal\r\nirritado\r\nisca\r\nisento\r\nisolado\r\nisqueiro\r\nitaliano\r\njaneiro\r\njangada\r\njanta\r\njararaca\r\njardim\r\njarro\r\njasmim\r\njato\r\njavali\r\njazida\r\njejum\r\njoaninha\r\njoelhada\r\njogador\r\njoia\r\njornal\r\njorrar\r\njovem\r\njuba\r\njudeu\r\njudoca\r\njuiz\r\njulgador\r\njulho\r\njurado\r\njurista\r\njuro\r\njusta\r\nlabareda\r\nlaboral\r\nlacre\r\nlactante\r\nladrilho\r\nlagarta\r\nlagoa\r\nlaje\r\nlamber\r\nlamentar\r\nlaminar\r\nlampejo\r\nlanche\r\nlapidar\r\nlapso\r\nlaranja\r\nlareira\r\nlargura\r\nlasanha\r\nlastro\r\nlateral\r\nlatido\r\nlavanda\r\nlavoura\r\nlavrador\r\nlaxante\r\nlazer\r\nlealdade\r\nlebre\r\nlegado\r\nlegendar\r\nlegista\r\nleigo\r\nleiloar\r\nleitura\r\nlembrete\r\nleme\r\nlenhador\r\nlentilha\r\nleoa\r\nlesma\r\nleste\r\nletivo\r\nletreiro\r\nlevar\r\nleveza\r\nlevitar\r\nliberal\r\nlibido\r\nliderar\r\nligar\r\nligeiro\r\nlimitar\r\nlimoeiro\r\nlimpador\r\nlinda\r\nlinear\r\nlinhagem\r\nliquidez\r\nlistagem\r\nlisura\r\nlitoral\r\nlivro\r\nlixa\r\nlixeira\r\nlocador\r\nlocutor\r\nlojista\r\nlombo\r\nlona\r\nlonge\r\nlontra\r\nlorde\r\nlotado\r\nloteria\r\nloucura\r\nlousa\r\nlouvar\r\nluar\r\nlucidez\r\nlucro\r\nluneta\r\nlustre\r\nlutador\r\nluva\r\nmacaco\r\nmacete\r\nmachado\r\nmacio\r\nmadeira\r\nmadrinha\r\nmagnata\r\nmagreza\r\nmaior\r\nmais\r\nmalandro\r\nmalha\r\nmalote\r\nmaluco\r\nmamilo\r\nmamoeiro\r\nmamute\r\nmanada\r\nmancha\r\nmandato\r\nmanequim\r\nmanhoso\r\nmanivela\r\nmanobrar\r\nmansa\r\nmanter\r\nmanusear\r\nmapeado\r\nmaquinar\r\nmarcador\r\nmaresia\r\nmarfim\r\nmargem\r\nmarinho\r\nmarmita\r\nmaroto\r\nmarquise\r\nmarreco\r\nmartelo\r\nmarujo\r\nmascote\r\nmasmorra\r\nmassagem\r\nmastigar\r\nmatagal\r\nmaterno\r\nmatinal\r\nmatutar\r\nmaxilar\r\nmedalha\r\nmedida\r\nmedusa\r\nmegafone\r\nmeiga\r\nmelancia\r\nmelhor\r\nmembro\r\nmemorial\r\nmenino\r\nmenos\r\nmensagem\r\nmental\r\nmerecer\r\nmergulho\r\nmesada\r\nmesclar\r\nmesmo\r\nmesquita\r\nmestre\r\nmetade\r\nmeteoro\r\nmetragem\r\nmexer\r\nmexicano\r\nmicro\r\nmigalha\r\nmigrar\r\nmilagre\r\nmilenar\r\nmilhar\r\nmimado\r\nminerar\r\nminhoca\r\nministro\r\nminoria\r\nmiolo\r\nmirante\r\nmirtilo\r\nmisturar\r\nmocidade\r\nmoderno\r\nmodular\r\nmoeda\r\nmoer\r\nmoinho\r\nmoita\r\nmoldura\r\nmoleza\r\nmolho\r\nmolinete\r\nmolusco\r\nmontanha\r\nmoqueca\r\nmorango\r\nmorcego\r\nmordomo\r\nmorena\r\nmosaico\r\nmosquete\r\nmostarda\r\nmotel\r\nmotim\r\nmoto\r\nmotriz\r\nmuda\r\nmuito\r\nmulata\r\nmulher\r\nmultar\r\nmundial\r\nmunido\r\nmuralha\r\nmurcho\r\nmuscular\r\nmuseu\r\nmusical\r\nnacional\r\nnadador\r\nnaja\r\nnamoro\r\nnarina\r\nnarrado\r\nnascer\r\nnativa\r\nnatureza\r\nnavalha\r\nnavegar\r\nnavio\r\nneblina\r\nnebuloso\r\nnegativa\r\nnegociar\r\nnegrito\r\nnervoso\r\nneta\r\nneural\r\nnevasca\r\nnevoeiro\r\nninar\r\nninho\r\nnitidez\r\nnivelar\r\nnobreza\r\nnoite\r\nnoiva\r\nnomear\r\nnominal\r\nnordeste\r\nnortear\r\nnotar\r\nnoticiar\r\nnoturno\r\nnovelo\r\nnovilho\r\nnovo\r\nnublado\r\nnudez\r\nnumeral\r\nnupcial\r\nnutrir\r\nnuvem\r\nobcecado\r\nobedecer\r\nobjetivo\r\nobrigado\r\nobscuro\r\nobstetra\r\nobter\r\nobturar\r\nocidente\r\nocioso\r\nocorrer\r\noculista\r\nocupado\r\nofegante\r\nofensiva\r\noferenda\r\noficina\r\nofuscado\r\nogiva\r\nolaria\r\noleoso\r\nolhar\r\noliveira\r\nombro\r\nomelete\r\nomisso\r\nomitir\r\nondulado\r\noneroso\r\nontem\r\nopcional\r\noperador\r\noponente\r\noportuno\r\noposto\r\norar\r\norbitar\r\nordem\r\nordinal\r\norfanato\r\norgasmo\r\norgulho\r\noriental\r\norigem\r\noriundo\r\norla\r\nortodoxo\r\norvalho\r\noscilar\r\nossada\r\nosso\r\nostentar\r\notimismo\r\nousadia\r\noutono\r\noutubro\r\nouvido\r\novelha\r\novular\r\noxidar\r\noxigenar\r\npacato\r\npaciente\r\npacote\r\npactuar\r\npadaria\r\npadrinho\r\npagar\r\npagode\r\npainel\r\npairar\r\npaisagem\r\npalavra\r\npalestra\r\npalheta\r\npalito\r\npalmada\r\npalpitar\r\npancada\r\npanela\r\npanfleto\r\npanqueca\r\npantanal\r\npapagaio\r\npapelada\r\npapiro\r\nparafina\r\nparcial\r\npardal\r\nparede\r\npartida\r\npasmo\r\npassado\r\npastel\r\npatamar\r\npatente\r\npatinar\r\npatrono\r\npaulada\r\npausar\r\npeculiar\r\npedalar\r\npedestre\r\npediatra\r\npedra\r\npegada\r\npeitoral\r\npeixe\r\npele\r\npelicano\r\npenca\r\npendurar\r\npeneira\r\npenhasco\r\npensador\r\npente\r\nperceber\r\nperfeito\r\npergunta\r\nperito\r\npermitir\r\nperna\r\nperplexo\r\npersiana\r\npertence\r\nperuca\r\npescado\r\npesquisa\r\npessoa\r\npetiscar\r\npiada\r\npicado\r\npiedade\r\npigmento\r\npilastra\r\npilhado\r\npilotar\r\npimenta\r\npincel\r\npinguim\r\npinha\r\npinote\r\npintar\r\npioneiro\r\npipoca\r\npiquete\r\npiranha\r\npires\r\npirueta\r\npiscar\r\npistola\r\npitanga\r\npivete\r\nplanta\r\nplaqueta\r\nplatina\r\nplebeu\r\nplumagem\r\npluvial\r\npneu\r\npoda\r\npoeira\r\npoetisa\r\npolegada\r\npoliciar\r\npoluente\r\npolvilho\r\npomar\r\npomba\r\nponderar\r\npontaria\r\npopuloso\r\nporta\r\npossuir\r\npostal\r\npote\r\npoupar\r\npouso\r\npovoar\r\npraia\r\nprancha\r\nprato\r\npraxe\r\nprece\r\npredador\r\nprefeito\r\npremiar\r\nprensar\r\npreparar\r\npresilha\r\npretexto\r\nprevenir\r\nprezar\r\nprimata\r\nprincesa\r\nprisma\r\nprivado\r\nprocesso\r\nproduto\r\nprofeta\r\nproibido\r\nprojeto\r\nprometer\r\npropagar\r\nprosa\r\nprotetor\r\nprovador\r\npublicar\r\npudim\r\npular\r\npulmonar\r\npulseira\r\npunhal\r\npunir\r\npupilo\r\npureza\r\npuxador\r\nquadra\r\nquantia\r\nquarto\r\nquase\r\nquebrar\r\nqueda\r\nqueijo\r\nquente\r\nquerido\r\nquimono\r\nquina\r\nquiosque\r\nrabanada\r\nrabisco\r\nrachar\r\nracionar\r\nradial\r\nraiar\r\nrainha\r\nraio\r\nraiva\r\nrajada\r\nralado\r\nramal\r\nranger\r\nranhura\r\nrapadura\r\nrapel\r\nrapidez\r\nraposa\r\nraquete\r\nraridade\r\nrasante\r\nrascunho\r\nrasgar\r\nraspador\r\nrasteira\r\nrasurar\r\nratazana\r\nratoeira\r\nrealeza\r\nreanimar\r\nreaver\r\nrebaixar\r\nrebelde\r\nrebolar\r\nrecado\r\nrecente\r\nrecheio\r\nrecibo\r\nrecordar\r\nrecrutar\r\nrecuar\r\nrede\r\nredimir\r\nredonda\r\nreduzida\r\nreenvio\r\nrefinar\r\nrefletir\r\nrefogar\r\nrefresco\r\nrefugiar\r\nregalia\r\nregime\r\nregra\r\nreinado\r\nreitor\r\nrejeitar\r\nrelativo\r\nremador\r\nremendo\r\nremorso\r\nrenovado\r\nreparo\r\nrepelir\r\nrepleto\r\nrepolho\r\nrepresa\r\nrepudiar\r\nrequerer\r\nresenha\r\nresfriar\r\nresgatar\r\nresidir\r\nresolver\r\nrespeito\r\nressaca\r\nrestante\r\nresumir\r\nretalho\r\nreter\r\nretirar\r\nretomada\r\nretratar\r\nrevelar\r\nrevisor\r\nrevolta\r\nriacho\r\nrica\r\nrigidez\r\nrigoroso\r\nrimar\r\nringue\r\nrisada\r\nrisco\r\nrisonho\r\nrobalo\r\nrochedo\r\nrodada\r\nrodeio\r\nrodovia\r\nroedor\r\nroleta\r\nromano\r\nroncar\r\nrosado\r\nroseira\r\nrosto\r\nrota\r\nroteiro\r\nrotina\r\nrotular\r\nrouco\r\nroupa\r\nroxo\r\nrubro\r\nrugido\r\nrugoso\r\nruivo\r\nrumo\r\nrupestre\r\nrusso\r\nsabor\r\nsaciar\r\nsacola\r\nsacudir\r\nsadio\r\nsafira\r\nsaga\r\nsagrada\r\nsaibro\r\nsalada\r\nsaleiro\r\nsalgado\r\nsaliva\r\nsalpicar\r\nsalsicha\r\nsaltar\r\nsalvador\r\nsambar\r\nsamurai\r\nsanar\r\nsanfona\r\nsangue\r\nsanidade\r\nsapato\r\nsarda\r\nsargento\r\nsarjeta\r\nsaturar\r\nsaudade\r\nsaxofone\r\nsazonal\r\nsecar\r\nsecular\r\nseda\r\nsedento\r\nsediado\r\nsedoso\r\nsedutor\r\nsegmento\r\nsegredo\r\nsegundo\r\nseiva\r\nseleto\r\nselvagem\r\nsemanal\r\nsemente\r\nsenador\r\nsenhor\r\nsensual\r\nsentado\r\nseparado\r\nsereia\r\nseringa\r\nserra\r\nservo\r\nsetembro\r\nsetor\r\nsigilo\r\nsilhueta\r\nsilicone\r\nsimetria\r\nsimpatia\r\nsimular\r\nsinal\r\nsincero\r\nsingular\r\nsinopse\r\nsintonia\r\nsirene\r\nsiri\r\nsituado\r\nsoberano\r\nsobra\r\nsocorro\r\nsogro\r\nsoja\r\nsolda\r\nsoletrar\r\nsolteiro\r\nsombrio\r\nsonata\r\nsondar\r\nsonegar\r\nsonhador\r\nsono\r\nsoprano\r\nsoquete\r\nsorrir\r\nsorteio\r\nsossego\r\nsotaque\r\nsoterrar\r\nsovado\r\nsozinho\r\nsuavizar\r\nsubida\r\nsubmerso\r\nsubsolo\r\nsubtrair\r\nsucata\r\nsucesso\r\nsuco\r\nsudeste\r\nsufixo\r\nsugador\r\nsugerir\r\nsujeito\r\nsulfato\r\nsumir\r\nsuor\r\nsuperior\r\nsuplicar\r\nsuposto\r\nsuprimir\r\nsurdina\r\nsurfista\r\nsurpresa\r\nsurreal\r\nsurtir\r\nsuspiro\r\nsustento\r\ntabela\r\ntablete\r\ntabuada\r\ntacho\r\ntagarela\r\ntalher\r\ntalo\r\ntalvez\r\ntamanho\r\ntamborim\r\ntampa\r\ntangente\r\ntanto\r\ntapar\r\ntapioca\r\ntardio\r\ntarefa\r\ntarja\r\ntarraxa\r\ntatuagem\r\ntaurino\r\ntaxativo\r\ntaxista\r\nteatral\r\ntecer\r\ntecido\r\nteclado\r\ntedioso\r\nteia\r\nteimar\r\ntelefone\r\ntelhado\r\ntempero\r\ntenente\r\ntensor\r\ntentar\r\ntermal\r\nterno\r\nterreno\r\ntese\r\ntesoura\r\ntestado\r\nteto\r\ntextura\r\ntexugo\r\ntiara\r\ntigela\r\ntijolo\r\ntimbrar\r\ntimidez\r\ntingido\r\ntinteiro\r\ntiragem\r\ntitular\r\ntoalha\r\ntocha\r\ntolerar\r\ntolice\r\ntomada\r\ntomilho\r\ntonel\r\ntontura\r\ntopete\r\ntora\r\ntorcido\r\ntorneio\r\ntorque\r\ntorrada\r\ntorto\r\ntostar\r\ntouca\r\ntoupeira\r\ntoxina\r\ntrabalho\r\ntracejar\r\ntradutor\r\ntrafegar\r\ntrajeto\r\ntrama\r\ntrancar\r\ntrapo\r\ntraseiro\r\ntratador\r\ntravar\r\ntreino\r\ntremer\r\ntrepidar\r\ntrevo\r\ntriagem\r\ntribo\r\ntriciclo\r\ntridente\r\ntrilogia\r\ntrindade\r\ntriplo\r\ntriturar\r\ntriunfal\r\ntrocar\r\ntrombeta\r\ntrova\r\ntrunfo\r\ntruque\r\ntubular\r\ntucano\r\ntudo\r\ntulipa\r\ntupi\r\nturbo\r\nturma\r\nturquesa\r\ntutelar\r\ntutorial\r\nuivar\r\numbigo\r\nunha\r\nunidade\r\nuniforme\r\nurologia\r\nurso\r\nurtiga\r\nurubu\r\nusado\r\nusina\r\nusufruir\r\nvacina\r\nvadiar\r\nvagaroso\r\nvaidoso\r\nvala\r\nvalente\r\nvalidade\r\nvalores\r\nvantagem\r\nvaqueiro\r\nvaranda\r\nvareta\r\nvarrer\r\nvascular\r\nvasilha\r\nvassoura\r\nvazar\r\nvazio\r\nveado\r\nvedar\r\nvegetar\r\nveicular\r\nveleiro\r\nvelhice\r\nveludo\r\nvencedor\r\nvendaval\r\nvenerar\r\nventre\r\nverbal\r\nverdade\r\nvereador\r\nvergonha\r\nvermelho\r\nverniz\r\nversar\r\nvertente\r\nvespa\r\nvestido\r\nvetorial\r\nviaduto\r\nviagem\r\nviajar\r\nviatura\r\nvibrador\r\nvideira\r\nvidraria\r\nviela\r\nviga\r\nvigente\r\nvigiar\r\nvigorar\r\nvilarejo\r\nvinco\r\nvinheta\r\nvinil\r\nvioleta\r\nvirada\r\nvirtude\r\nvisitar\r\nvisto\r\nvitral\r\nviveiro\r\nvizinho\r\nvoador\r\nvoar\r\nvogal\r\nvolante\r\nvoleibol\r\nvoltagem\r\nvolumoso\r\nvontade\r\nvulto\r\nvuvuzela\r\nxadrez\r\nxarope\r\nxeque\r\nxeretar\r\nxerife\r\nxingar\r\nzangado\r\nzarpar\r\nzebu\r\nzelador\r\nzombar\r\nzoologia\r\nzumbido`.split('\\n');\r\n", "export const wordlist = `的\r\n一\r\n是\r\n在\r\n不\r\n了\r\n有\r\n和\r\n人\r\n这\r\n中\r\n大\r\n为\r\n上\r\n个\r\n国\r\n我\r\n以\r\n要\r\n他\r\n时\r\n来\r\n用\r\n们\r\n生\r\n到\r\n作\r\n地\r\n于\r\n出\r\n就\r\n分\r\n对\r\n成\r\n会\r\n可\r\n主\r\n发\r\n年\r\n动\r\n同\r\n工\r\n也\r\n能\r\n下\r\n过\r\n子\r\n说\r\n产\r\n种\r\n面\r\n而\r\n方\r\n后\r\n多\r\n定\r\n行\r\n学\r\n法\r\n所\r\n民\r\n得\r\n经\r\n十\r\n三\r\n之\r\n进\r\n着\r\n等\r\n部\r\n度\r\n家\r\n电\r\n力\r\n里\r\n如\r\n水\r\n化\r\n高\r\n自\r\n二\r\n理\r\n起\r\n小\r\n物\r\n现\r\n实\r\n加\r\n量\r\n都\r\n两\r\n体\r\n制\r\n机\r\n当\r\n使\r\n点\r\n从\r\n业\r\n本\r\n去\r\n把\r\n性\r\n好\r\n应\r\n开\r\n它\r\n合\r\n还\r\n因\r\n由\r\n其\r\n些\r\n然\r\n前\r\n外\r\n天\r\n政\r\n四\r\n日\r\n那\r\n社\r\n义\r\n事\r\n平\r\n形\r\n相\r\n全\r\n表\r\n间\r\n样\r\n与\r\n关\r\n各\r\n重\r\n新\r\n线\r\n内\r\n数\r\n正\r\n心\r\n反\r\n你\r\n明\r\n看\r\n原\r\n又\r\n么\r\n利\r\n比\r\n或\r\n但\r\n质\r\n气\r\n第\r\n向\r\n道\r\n命\r\n此\r\n变\r\n条\r\n只\r\n没\r\n结\r\n解\r\n问\r\n意\r\n建\r\n月\r\n公\r\n无\r\n系\r\n军\r\n很\r\n情\r\n者\r\n最\r\n立\r\n代\r\n想\r\n已\r\n通\r\n并\r\n提\r\n直\r\n题\r\n党\r\n程\r\n展\r\n五\r\n果\r\n料\r\n象\r\n员\r\n革\r\n位\r\n入\r\n常\r\n文\r\n总\r\n次\r\n品\r\n式\r\n活\r\n设\r\n及\r\n管\r\n特\r\n件\r\n长\r\n求\r\n老\r\n头\r\n基\r\n资\r\n边\r\n流\r\n路\r\n级\r\n少\r\n图\r\n山\r\n统\r\n接\r\n知\r\n较\r\n将\r\n组\r\n见\r\n计\r\n别\r\n她\r\n手\r\n角\r\n期\r\n根\r\n论\r\n运\r\n农\r\n指\r\n几\r\n九\r\n区\r\n强\r\n放\r\n决\r\n西\r\n被\r\n干\r\n做\r\n必\r\n战\r\n先\r\n回\r\n则\r\n任\r\n取\r\n据\r\n处\r\n队\r\n南\r\n给\r\n色\r\n光\r\n门\r\n即\r\n保\r\n治\r\n北\r\n造\r\n百\r\n规\r\n热\r\n领\r\n七\r\n海\r\n口\r\n东\r\n导\r\n器\r\n压\r\n志\r\n世\r\n金\r\n增\r\n争\r\n济\r\n阶\r\n油\r\n思\r\n术\r\n极\r\n交\r\n受\r\n联\r\n什\r\n认\r\n六\r\n共\r\n权\r\n收\r\n证\r\n改\r\n清\r\n美\r\n再\r\n采\r\n转\r\n更\r\n单\r\n风\r\n切\r\n打\r\n白\r\n教\r\n速\r\n花\r\n带\r\n安\r\n场\r\n身\r\n车\r\n例\r\n真\r\n务\r\n具\r\n万\r\n每\r\n目\r\n至\r\n达\r\n走\r\n积\r\n示\r\n议\r\n声\r\n报\r\n斗\r\n完\r\n类\r\n八\r\n离\r\n华\r\n名\r\n确\r\n才\r\n科\r\n张\r\n信\r\n马\r\n节\r\n话\r\n米\r\n整\r\n空\r\n元\r\n况\r\n今\r\n集\r\n温\r\n传\r\n土\r\n许\r\n步\r\n群\r\n广\r\n石\r\n记\r\n需\r\n段\r\n研\r\n界\r\n拉\r\n林\r\n律\r\n叫\r\n且\r\n究\r\n观\r\n越\r\n织\r\n装\r\n影\r\n算\r\n低\r\n持\r\n音\r\n众\r\n书\r\n布\r\n复\r\n容\r\n儿\r\n须\r\n际\r\n商\r\n非\r\n验\r\n连\r\n断\r\n深\r\n难\r\n近\r\n矿\r\n千\r\n周\r\n委\r\n素\r\n技\r\n备\r\n半\r\n办\r\n青\r\n省\r\n列\r\n习\r\n响\r\n约\r\n支\r\n般\r\n史\r\n感\r\n劳\r\n便\r\n团\r\n往\r\n酸\r\n历\r\n市\r\n克\r\n何\r\n除\r\n消\r\n构\r\n府\r\n称\r\n太\r\n准\r\n精\r\n值\r\n号\r\n率\r\n族\r\n维\r\n划\r\n选\r\n标\r\n写\r\n存\r\n候\r\n毛\r\n亲\r\n快\r\n效\r\n斯\r\n院\r\n查\r\n江\r\n型\r\n眼\r\n王\r\n按\r\n格\r\n养\r\n易\r\n置\r\n派\r\n层\r\n片\r\n始\r\n却\r\n专\r\n状\r\n育\r\n厂\r\n京\r\n识\r\n适\r\n属\r\n圆\r\n包\r\n火\r\n住\r\n调\r\n满\r\n县\r\n局\r\n照\r\n参\r\n红\r\n细\r\n引\r\n听\r\n该\r\n铁\r\n价\r\n严\r\n首\r\n底\r\n液\r\n官\r\n德\r\n随\r\n病\r\n苏\r\n失\r\n尔\r\n死\r\n讲\r\n配\r\n女\r\n黄\r\n推\r\n显\r\n谈\r\n罪\r\n神\r\n艺\r\n呢\r\n席\r\n含\r\n企\r\n望\r\n密\r\n批\r\n营\r\n项\r\n防\r\n举\r\n球\r\n英\r\n氧\r\n势\r\n告\r\n李\r\n台\r\n落\r\n木\r\n帮\r\n轮\r\n破\r\n亚\r\n师\r\n围\r\n注\r\n远\r\n字\r\n材\r\n排\r\n供\r\n河\r\n态\r\n封\r\n另\r\n施\r\n减\r\n树\r\n溶\r\n怎\r\n止\r\n案\r\n言\r\n士\r\n均\r\n武\r\n固\r\n叶\r\n鱼\r\n波\r\n视\r\n仅\r\n费\r\n紧\r\n爱\r\n左\r\n章\r\n早\r\n朝\r\n害\r\n续\r\n轻\r\n服\r\n试\r\n食\r\n充\r\n兵\r\n源\r\n判\r\n护\r\n司\r\n足\r\n某\r\n练\r\n差\r\n致\r\n板\r\n田\r\n降\r\n黑\r\n犯\r\n负\r\n击\r\n范\r\n继\r\n兴\r\n似\r\n余\r\n坚\r\n曲\r\n输\r\n修\r\n故\r\n城\r\n夫\r\n够\r\n送\r\n笔\r\n船\r\n占\r\n右\r\n财\r\n吃\r\n富\r\n春\r\n职\r\n觉\r\n汉\r\n画\r\n功\r\n巴\r\n跟\r\n虽\r\n杂\r\n飞\r\n检\r\n吸\r\n助\r\n升\r\n阳\r\n互\r\n初\r\n创\r\n抗\r\n考\r\n投\r\n坏\r\n策\r\n古\r\n径\r\n换\r\n未\r\n跑\r\n留\r\n钢\r\n曾\r\n端\r\n责\r\n站\r\n简\r\n述\r\n钱\r\n副\r\n尽\r\n帝\r\n射\r\n草\r\n冲\r\n承\r\n独\r\n令\r\n限\r\n阿\r\n宣\r\n环\r\n双\r\n请\r\n超\r\n微\r\n让\r\n控\r\n州\r\n良\r\n轴\r\n找\r\n否\r\n纪\r\n益\r\n依\r\n优\r\n顶\r\n础\r\n载\r\n倒\r\n房\r\n突\r\n坐\r\n粉\r\n敌\r\n略\r\n客\r\n袁\r\n冷\r\n胜\r\n绝\r\n析\r\n块\r\n剂\r\n测\r\n丝\r\n协\r\n诉\r\n念\r\n陈\r\n仍\r\n罗\r\n盐\r\n友\r\n洋\r\n错\r\n苦\r\n夜\r\n刑\r\n移\r\n频\r\n逐\r\n靠\r\n混\r\n母\r\n短\r\n皮\r\n终\r\n聚\r\n汽\r\n村\r\n云\r\n哪\r\n既\r\n距\r\n卫\r\n停\r\n烈\r\n央\r\n察\r\n烧\r\n迅\r\n境\r\n若\r\n印\r\n洲\r\n刻\r\n括\r\n激\r\n孔\r\n搞\r\n甚\r\n室\r\n待\r\n核\r\n校\r\n散\r\n侵\r\n吧\r\n甲\r\n游\r\n久\r\n菜\r\n味\r\n旧\r\n模\r\n湖\r\n货\r\n损\r\n预\r\n阻\r\n毫\r\n普\r\n稳\r\n乙\r\n妈\r\n植\r\n息\r\n扩\r\n银\r\n语\r\n挥\r\n酒\r\n守\r\n拿\r\n序\r\n纸\r\n医\r\n缺\r\n雨\r\n吗\r\n针\r\n刘\r\n啊\r\n急\r\n唱\r\n误\r\n训\r\n愿\r\n审\r\n附\r\n获\r\n茶\r\n鲜\r\n粮\r\n斤\r\n孩\r\n脱\r\n硫\r\n肥\r\n善\r\n龙\r\n演\r\n父\r\n渐\r\n血\r\n欢\r\n械\r\n掌\r\n歌\r\n沙\r\n刚\r\n攻\r\n谓\r\n盾\r\n讨\r\n晚\r\n粒\r\n乱\r\n燃\r\n矛\r\n乎\r\n杀\r\n药\r\n宁\r\n鲁\r\n贵\r\n钟\r\n煤\r\n读\r\n班\r\n伯\r\n香\r\n介\r\n迫\r\n句\r\n丰\r\n培\r\n握\r\n兰\r\n担\r\n弦\r\n蛋\r\n沉\r\n假\r\n穿\r\n执\r\n答\r\n乐\r\n谁\r\n顺\r\n烟\r\n缩\r\n征\r\n脸\r\n喜\r\n松\r\n脚\r\n困\r\n异\r\n免\r\n背\r\n星\r\n福\r\n买\r\n染\r\n井\r\n概\r\n慢\r\n怕\r\n磁\r\n倍\r\n祖\r\n皇\r\n促\r\n静\r\n补\r\n评\r\n翻\r\n肉\r\n践\r\n尼\r\n衣\r\n宽\r\n扬\r\n棉\r\n希\r\n伤\r\n操\r\n垂\r\n秋\r\n宜\r\n氢\r\n套\r\n督\r\n振\r\n架\r\n亮\r\n末\r\n宪\r\n庆\r\n编\r\n牛\r\n触\r\n映\r\n雷\r\n销\r\n诗\r\n座\r\n居\r\n抓\r\n裂\r\n胞\r\n呼\r\n娘\r\n景\r\n威\r\n绿\r\n晶\r\n厚\r\n盟\r\n衡\r\n鸡\r\n孙\r\n延\r\n危\r\n胶\r\n屋\r\n乡\r\n临\r\n陆\r\n顾\r\n掉\r\n呀\r\n灯\r\n岁\r\n措\r\n束\r\n耐\r\n剧\r\n玉\r\n赵\r\n跳\r\n哥\r\n季\r\n课\r\n凯\r\n胡\r\n额\r\n款\r\n绍\r\n卷\r\n齐\r\n伟\r\n蒸\r\n殖\r\n永\r\n宗\r\n苗\r\n川\r\n炉\r\n岩\r\n弱\r\n零\r\n杨\r\n奏\r\n沿\r\n露\r\n杆\r\n探\r\n滑\r\n镇\r\n饭\r\n浓\r\n航\r\n怀\r\n赶\r\n库\r\n夺\r\n伊\r\n灵\r\n税\r\n途\r\n灭\r\n赛\r\n归\r\n召\r\n鼓\r\n播\r\n盘\r\n裁\r\n险\r\n康\r\n唯\r\n录\r\n菌\r\n纯\r\n借\r\n糖\r\n盖\r\n横\r\n符\r\n私\r\n努\r\n堂\r\n域\r\n枪\r\n润\r\n幅\r\n哈\r\n竟\r\n熟\r\n虫\r\n泽\r\n脑\r\n壤\r\n碳\r\n欧\r\n遍\r\n侧\r\n寨\r\n敢\r\n彻\r\n虑\r\n斜\r\n薄\r\n庭\r\n纳\r\n弹\r\n饲\r\n伸\r\n折\r\n麦\r\n湿\r\n暗\r\n荷\r\n瓦\r\n塞\r\n床\r\n筑\r\n恶\r\n户\r\n访\r\n塔\r\n奇\r\n透\r\n梁\r\n刀\r\n旋\r\n迹\r\n卡\r\n氯\r\n遇\r\n份\r\n毒\r\n泥\r\n退\r\n洗\r\n摆\r\n灰\r\n彩\r\n卖\r\n耗\r\n夏\r\n择\r\n忙\r\n铜\r\n献\r\n硬\r\n予\r\n繁\r\n圈\r\n雪\r\n函\r\n亦\r\n抽\r\n篇\r\n阵\r\n阴\r\n丁\r\n尺\r\n追\r\n堆\r\n雄\r\n迎\r\n泛\r\n爸\r\n楼\r\n避\r\n谋\r\n吨\r\n野\r\n猪\r\n旗\r\n累\r\n偏\r\n典\r\n馆\r\n索\r\n秦\r\n脂\r\n潮\r\n爷\r\n豆\r\n忽\r\n托\r\n惊\r\n塑\r\n遗\r\n愈\r\n朱\r\n替\r\n纤\r\n粗\r\n倾\r\n尚\r\n痛\r\n楚\r\n谢\r\n奋\r\n购\r\n磨\r\n君\r\n池\r\n旁\r\n碎\r\n骨\r\n监\r\n捕\r\n弟\r\n暴\r\n割\r\n贯\r\n殊\r\n释\r\n词\r\n亡\r\n壁\r\n顿\r\n宝\r\n午\r\n尘\r\n闻\r\n揭\r\n炮\r\n残\r\n冬\r\n桥\r\n妇\r\n警\r\n综\r\n招\r\n吴\r\n付\r\n浮\r\n遭\r\n徐\r\n您\r\n摇\r\n谷\r\n赞\r\n箱\r\n隔\r\n订\r\n男\r\n吹\r\n园\r\n纷\r\n唐\r\n败\r\n宋\r\n玻\r\n巨\r\n耕\r\n坦\r\n荣\r\n闭\r\n湾\r\n键\r\n凡\r\n驻\r\n锅\r\n救\r\n恩\r\n剥\r\n凝\r\n碱\r\n齿\r\n截\r\n炼\r\n麻\r\n纺\r\n禁\r\n废\r\n盛\r\n版\r\n缓\r\n净\r\n睛\r\n昌\r\n婚\r\n涉\r\n筒\r\n嘴\r\n插\r\n岸\r\n朗\r\n庄\r\n街\r\n藏\r\n姑\r\n贸\r\n腐\r\n奴\r\n啦\r\n惯\r\n乘\r\n伙\r\n恢\r\n匀\r\n纱\r\n扎\r\n辩\r\n耳\r\n彪\r\n臣\r\n亿\r\n璃\r\n抵\r\n脉\r\n秀\r\n萨\r\n俄\r\n网\r\n舞\r\n店\r\n喷\r\n纵\r\n寸\r\n汗\r\n挂\r\n洪\r\n贺\r\n闪\r\n柬\r\n爆\r\n烯\r\n津\r\n稻\r\n墙\r\n软\r\n勇\r\n像\r\n滚\r\n厘\r\n蒙\r\n芳\r\n肯\r\n坡\r\n柱\r\n荡\r\n腿\r\n仪\r\n旅\r\n尾\r\n轧\r\n冰\r\n贡\r\n登\r\n黎\r\n削\r\n钻\r\n勒\r\n逃\r\n障\r\n氨\r\n郭\r\n峰\r\n币\r\n港\r\n伏\r\n轨\r\n亩\r\n毕\r\n擦\r\n莫\r\n刺\r\n浪\r\n秘\r\n援\r\n株\r\n健\r\n售\r\n股\r\n岛\r\n甘\r\n泡\r\n睡\r\n童\r\n铸\r\n汤\r\n阀\r\n休\r\n汇\r\n舍\r\n牧\r\n绕\r\n炸\r\n哲\r\n磷\r\n绩\r\n朋\r\n淡\r\n尖\r\n启\r\n陷\r\n柴\r\n呈\r\n徒\r\n颜\r\n泪\r\n稍\r\n忘\r\n泵\r\n蓝\r\n拖\r\n洞\r\n授\r\n镜\r\n辛\r\n壮\r\n锋\r\n贫\r\n虚\r\n弯\r\n摩\r\n泰\r\n幼\r\n廷\r\n尊\r\n窗\r\n纲\r\n弄\r\n隶\r\n疑\r\n氏\r\n宫\r\n姐\r\n震\r\n瑞\r\n怪\r\n尤\r\n琴\r\n循\r\n描\r\n膜\r\n违\r\n夹\r\n腰\r\n缘\r\n珠\r\n穷\r\n森\r\n枝\r\n竹\r\n沟\r\n催\r\n绳\r\n忆\r\n邦\r\n剩\r\n幸\r\n浆\r\n栏\r\n拥\r\n牙\r\n贮\r\n礼\r\n滤\r\n钠\r\n纹\r\n罢\r\n拍\r\n咱\r\n喊\r\n袖\r\n埃\r\n勤\r\n罚\r\n焦\r\n潜\r\n伍\r\n墨\r\n欲\r\n缝\r\n姓\r\n刊\r\n饱\r\n仿\r\n奖\r\n铝\r\n鬼\r\n丽\r\n跨\r\n默\r\n挖\r\n链\r\n扫\r\n喝\r\n袋\r\n炭\r\n污\r\n幕\r\n诸\r\n弧\r\n励\r\n梅\r\n奶\r\n洁\r\n灾\r\n舟\r\n鉴\r\n苯\r\n讼\r\n抱\r\n毁\r\n懂\r\n寒\r\n智\r\n埔\r\n寄\r\n届\r\n跃\r\n渡\r\n挑\r\n丹\r\n艰\r\n贝\r\n碰\r\n拔\r\n爹\r\n戴\r\n码\r\n梦\r\n芽\r\n熔\r\n赤\r\n渔\r\n哭\r\n敬\r\n颗\r\n奔\r\n铅\r\n仲\r\n虎\r\n稀\r\n妹\r\n乏\r\n珍\r\n申\r\n桌\r\n遵\r\n允\r\n隆\r\n螺\r\n仓\r\n魏\r\n锐\r\n晓\r\n氮\r\n兼\r\n隐\r\n碍\r\n赫\r\n拨\r\n忠\r\n肃\r\n缸\r\n牵\r\n抢\r\n博\r\n巧\r\n壳\r\n兄\r\n杜\r\n讯\r\n诚\r\n碧\r\n祥\r\n柯\r\n页\r\n巡\r\n矩\r\n悲\r\n灌\r\n龄\r\n伦\r\n票\r\n寻\r\n桂\r\n铺\r\n圣\r\n恐\r\n恰\r\n郑\r\n趣\r\n抬\r\n荒\r\n腾\r\n贴\r\n柔\r\n滴\r\n猛\r\n阔\r\n辆\r\n妻\r\n填\r\n撤\r\n储\r\n签\r\n闹\r\n扰\r\n紫\r\n砂\r\n递\r\n戏\r\n吊\r\n陶\r\n伐\r\n喂\r\n疗\r\n瓶\r\n婆\r\n抚\r\n臂\r\n摸\r\n忍\r\n虾\r\n蜡\r\n邻\r\n胸\r\n巩\r\n挤\r\n偶\r\n弃\r\n槽\r\n劲\r\n乳\r\n邓\r\n吉\r\n仁\r\n烂\r\n砖\r\n租\r\n乌\r\n舰\r\n伴\r\n瓜\r\n浅\r\n丙\r\n暂\r\n燥\r\n橡\r\n柳\r\n迷\r\n暖\r\n牌\r\n秧\r\n胆\r\n详\r\n簧\r\n踏\r\n瓷\r\n谱\r\n呆\r\n宾\r\n糊\r\n洛\r\n辉\r\n愤\r\n竞\r\n隙\r\n怒\r\n粘\r\n乃\r\n绪\r\n肩\r\n籍\r\n敏\r\n涂\r\n熙\r\n皆\r\n侦\r\n悬\r\n掘\r\n享\r\n纠\r\n醒\r\n狂\r\n锁\r\n淀\r\n恨\r\n牲\r\n霸\r\n爬\r\n赏\r\n逆\r\n玩\r\n陵\r\n祝\r\n秒\r\n浙\r\n貌\r\n役\r\n彼\r\n悉\r\n鸭\r\n趋\r\n凤\r\n晨\r\n畜\r\n辈\r\n秩\r\n卵\r\n署\r\n梯\r\n炎\r\n滩\r\n棋\r\n驱\r\n筛\r\n峡\r\n冒\r\n啥\r\n寿\r\n译\r\n浸\r\n泉\r\n帽\r\n迟\r\n硅\r\n疆\r\n贷\r\n漏\r\n稿\r\n冠\r\n嫩\r\n胁\r\n芯\r\n牢\r\n叛\r\n蚀\r\n奥\r\n鸣\r\n岭\r\n羊\r\n凭\r\n串\r\n塘\r\n绘\r\n酵\r\n融\r\n盆\r\n锡\r\n庙\r\n筹\r\n冻\r\n辅\r\n摄\r\n袭\r\n筋\r\n拒\r\n僚\r\n旱\r\n钾\r\n鸟\r\n漆\r\n沈\r\n眉\r\n疏\r\n添\r\n棒\r\n穗\r\n硝\r\n韩\r\n逼\r\n扭\r\n侨\r\n凉\r\n挺\r\n碗\r\n栽\r\n炒\r\n杯\r\n患\r\n馏\r\n劝\r\n豪\r\n辽\r\n勃\r\n鸿\r\n旦\r\n吏\r\n拜\r\n狗\r\n埋\r\n辊\r\n掩\r\n饮\r\n搬\r\n骂\r\n辞\r\n勾\r\n扣\r\n估\r\n蒋\r\n绒\r\n雾\r\n丈\r\n朵\r\n姆\r\n拟\r\n宇\r\n辑\r\n陕\r\n雕\r\n偿\r\n蓄\r\n崇\r\n剪\r\n倡\r\n厅\r\n咬\r\n驶\r\n薯\r\n刷\r\n斥\r\n番\r\n赋\r\n奉\r\n佛\r\n浇\r\n漫\r\n曼\r\n扇\r\n钙\r\n桃\r\n扶\r\n仔\r\n返\r\n俗\r\n亏\r\n腔\r\n鞋\r\n棱\r\n覆\r\n框\r\n悄\r\n叔\r\n撞\r\n骗\r\n勘\r\n旺\r\n沸\r\n孤\r\n吐\r\n孟\r\n渠\r\n屈\r\n疾\r\n妙\r\n惜\r\n仰\r\n狠\r\n胀\r\n谐\r\n抛\r\n霉\r\n桑\r\n岗\r\n嘛\r\n衰\r\n盗\r\n渗\r\n脏\r\n赖\r\n涌\r\n甜\r\n曹\r\n阅\r\n肌\r\n哩\r\n厉\r\n烃\r\n纬\r\n毅\r\n昨\r\n伪\r\n症\r\n煮\r\n叹\r\n钉\r\n搭\r\n茎\r\n笼\r\n酷\r\n偷\r\n弓\r\n锥\r\n恒\r\n杰\r\n坑\r\n鼻\r\n翼\r\n纶\r\n叙\r\n狱\r\n逮\r\n罐\r\n络\r\n棚\r\n抑\r\n膨\r\n蔬\r\n寺\r\n骤\r\n穆\r\n冶\r\n枯\r\n册\r\n尸\r\n凸\r\n绅\r\n坯\r\n牺\r\n焰\r\n轰\r\n欣\r\n晋\r\n瘦\r\n御\r\n锭\r\n锦\r\n丧\r\n旬\r\n锻\r\n垄\r\n搜\r\n扑\r\n邀\r\n亭\r\n酯\r\n迈\r\n舒\r\n脆\r\n酶\r\n闲\r\n忧\r\n酚\r\n顽\r\n羽\r\n涨\r\n卸\r\n仗\r\n陪\r\n辟\r\n惩\r\n杭\r\n姚\r\n肚\r\n捉\r\n飘\r\n漂\r\n昆\r\n欺\r\n吾\r\n郎\r\n烷\r\n汁\r\n呵\r\n饰\r\n萧\r\n雅\r\n邮\r\n迁\r\n燕\r\n撒\r\n姻\r\n赴\r\n宴\r\n烦\r\n债\r\n帐\r\n斑\r\n铃\r\n旨\r\n醇\r\n董\r\n饼\r\n雏\r\n姿\r\n拌\r\n傅\r\n腹\r\n妥\r\n揉\r\n贤\r\n拆\r\n歪\r\n葡\r\n胺\r\n丢\r\n浩\r\n徽\r\n昂\r\n垫\r\n挡\r\n览\r\n贪\r\n慰\r\n缴\r\n汪\r\n慌\r\n冯\r\n诺\r\n姜\r\n谊\r\n凶\r\n劣\r\n诬\r\n耀\r\n昏\r\n躺\r\n盈\r\n骑\r\n乔\r\n溪\r\n丛\r\n卢\r\n抹\r\n闷\r\n咨\r\n刮\r\n驾\r\n缆\r\n悟\r\n摘\r\n铒\r\n掷\r\n颇\r\n幻\r\n柄\r\n惠\r\n惨\r\n佳\r\n仇\r\n腊\r\n窝\r\n涤\r\n剑\r\n瞧\r\n堡\r\n泼\r\n葱\r\n罩\r\n霍\r\n捞\r\n胎\r\n苍\r\n滨\r\n俩\r\n捅\r\n湘\r\n砍\r\n霞\r\n邵\r\n萄\r\n疯\r\n淮\r\n遂\r\n熊\r\n粪\r\n烘\r\n宿\r\n档\r\n戈\r\n驳\r\n嫂\r\n裕\r\n徙\r\n箭\r\n捐\r\n肠\r\n撑\r\n晒\r\n辨\r\n殿\r\n莲\r\n摊\r\n搅\r\n酱\r\n屏\r\n疫\r\n哀\r\n蔡\r\n堵\r\n沫\r\n皱\r\n畅\r\n叠\r\n阁\r\n莱\r\n敲\r\n辖\r\n钩\r\n痕\r\n坝\r\n巷\r\n饿\r\n祸\r\n丘\r\n玄\r\n溜\r\n曰\r\n逻\r\n彭\r\n尝\r\n卿\r\n妨\r\n艇\r\n吞\r\n韦\r\n怨\r\n矮\r\n歇`.split('\\n');\r\n", "export const wordlist = `ábaco\r\nabdomen\r\nabeja\r\nabierto\r\nabogado\r\nabono\r\naborto\r\nabrazo\r\nabrir\r\nabuelo\r\nabuso\r\nacabar\r\nacademia\r\nacceso\r\nacción\r\naceite\r\nacelga\r\nacento\r\naceptar\r\nácido\r\naclarar\r\nacné\r\nacoger\r\nacoso\r\nactivo\r\nacto\r\nactriz\r\nactuar\r\nacudir\r\nacuerdo\r\nacusar\r\nadicto\r\nadmitir\r\nadoptar\r\nadorno\r\naduana\r\nadulto\r\naéreo\r\nafectar\r\nafición\r\nafinar\r\nafirmar\r\nágil\r\nagitar\r\nagonía\r\nagosto\r\nagotar\r\nagregar\r\nagrio\r\nagua\r\nagudo\r\náguila\r\naguja\r\nahogo\r\nahorro\r\naire\r\naislar\r\najedrez\r\najeno\r\najuste\r\nalacrán\r\nalambre\r\nalarma\r\nalba\r\nálbum\r\nalcalde\r\naldea\r\nalegre\r\nalejar\r\nalerta\r\naleta\r\nalfiler\r\nalga\r\nalgodón\r\naliado\r\naliento\r\nalivio\r\nalma\r\nalmeja\r\nalmíbar\r\naltar\r\nalteza\r\naltivo\r\nalto\r\naltura\r\nalumno\r\nalzar\r\namable\r\namante\r\namapola\r\namargo\r\namasar\r\námbar\r\námbito\r\nameno\r\namigo\r\namistad\r\namor\r\namparo\r\namplio\r\nancho\r\nanciano\r\nancla\r\nandar\r\nandén\r\nanemia\r\nángulo\r\nanillo\r\nánimo\r\nanís\r\nanotar\r\nantena\r\nantiguo\r\nantojo\r\nanual\r\nanular\r\nanuncio\r\nañadir\r\nañejo\r\naño\r\napagar\r\naparato\r\napetito\r\napio\r\naplicar\r\napodo\r\naporte\r\napoyo\r\naprender\r\naprobar\r\napuesta\r\napuro\r\narado\r\naraña\r\narar\r\nárbitro\r\nárbol\r\narbusto\r\narchivo\r\narco\r\narder\r\nardilla\r\narduo\r\nárea\r\nárido\r\naries\r\narmonía\r\narnés\r\naroma\r\narpa\r\narpón\r\narreglo\r\narroz\r\narruga\r\narte\r\nartista\r\nasa\r\nasado\r\nasalto\r\nascenso\r\nasegurar\r\naseo\r\nasesor\r\nasiento\r\nasilo\r\nasistir\r\nasno\r\nasombro\r\náspero\r\nastilla\r\nastro\r\nastuto\r\nasumir\r\nasunto\r\natajo\r\nataque\r\natar\r\natento\r\nateo\r\nático\r\natleta\r\nátomo\r\natraer\r\natroz\r\natún\r\naudaz\r\naudio\r\nauge\r\naula\r\naumento\r\nausente\r\nautor\r\naval\r\navance\r\navaro\r\nave\r\navellana\r\navena\r\navestruz\r\navión\r\naviso\r\nayer\r\nayuda\r\nayuno\r\nazafrán\r\nazar\r\nazote\r\nazúcar\r\nazufre\r\nazul\r\nbaba\r\nbabor\r\nbache\r\nbahía\r\nbaile\r\nbajar\r\nbalanza\r\nbalcón\r\nbalde\r\nbambú\r\nbanco\r\nbanda\r\nbaño\r\nbarba\r\nbarco\r\nbarniz\r\nbarro\r\nbáscula\r\nbastón\r\nbasura\r\nbatalla\r\nbatería\r\nbatir\r\nbatuta\r\nbaúl\r\nbazar\r\nbebé\r\nbebida\r\nbello\r\nbesar\r\nbeso\r\nbestia\r\nbicho\r\nbien\r\nbingo\r\nblanco\r\nbloque\r\nblusa\r\nboa\r\nbobina\r\nbobo\r\nboca\r\nbocina\r\nboda\r\nbodega\r\nboina\r\nbola\r\nbolero\r\nbolsa\r\nbomba\r\nbondad\r\nbonito\r\nbono\r\nbonsái\r\nborde\r\nborrar\r\nbosque\r\nbote\r\nbotín\r\nbóveda\r\nbozal\r\nbravo\r\nbrazo\r\nbrecha\r\nbreve\r\nbrillo\r\nbrinco\r\nbrisa\r\nbroca\r\nbroma\r\nbronce\r\nbrote\r\nbruja\r\nbrusco\r\nbruto\r\nbuceo\r\nbucle\r\nbueno\r\nbuey\r\nbufanda\r\nbufón\r\nbúho\r\nbuitre\r\nbulto\r\nburbuja\r\nburla\r\nburro\r\nbuscar\r\nbutaca\r\nbuzón\r\ncaballo\r\ncabeza\r\ncabina\r\ncabra\r\ncacao\r\ncadáver\r\ncadena\r\ncaer\r\ncafé\r\ncaída\r\ncaimán\r\ncaja\r\ncajón\r\ncal\r\ncalamar\r\ncalcio\r\ncaldo\r\ncalidad\r\ncalle\r\ncalma\r\ncalor\r\ncalvo\r\ncama\r\ncambio\r\ncamello\r\ncamino\r\ncampo\r\ncáncer\r\ncandil\r\ncanela\r\ncanguro\r\ncanica\r\ncanto\r\ncaña\r\ncañón\r\ncaoba\r\ncaos\r\ncapaz\r\ncapitán\r\ncapote\r\ncaptar\r\ncapucha\r\ncara\r\ncarbón\r\ncárcel\r\ncareta\r\ncarga\r\ncariño\r\ncarne\r\ncarpeta\r\ncarro\r\ncarta\r\ncasa\r\ncasco\r\ncasero\r\ncaspa\r\ncastor\r\ncatorce\r\ncatre\r\ncaudal\r\ncausa\r\ncazo\r\ncebolla\r\nceder\r\ncedro\r\ncelda\r\ncélebre\r\nceloso\r\ncélula\r\ncemento\r\nceniza\r\ncentro\r\ncerca\r\ncerdo\r\ncereza\r\ncero\r\ncerrar\r\ncerteza\r\ncésped\r\ncetro\r\nchacal\r\nchaleco\r\nchampú\r\nchancla\r\nchapa\r\ncharla\r\nchico\r\nchiste\r\nchivo\r\nchoque\r\nchoza\r\nchuleta\r\nchupar\r\nciclón\r\nciego\r\ncielo\r\ncien\r\ncierto\r\ncifra\r\ncigarro\r\ncima\r\ncinco\r\ncine\r\ncinta\r\nciprés\r\ncirco\r\nciruela\r\ncisne\r\ncita\r\nciudad\r\nclamor\r\nclan\r\nclaro\r\nclase\r\nclave\r\ncliente\r\nclima\r\nclínica\r\ncobre\r\ncocción\r\ncochino\r\ncocina\r\ncoco\r\ncódigo\r\ncodo\r\ncofre\r\ncoger\r\ncohete\r\ncojín\r\ncojo\r\ncola\r\ncolcha\r\ncolegio\r\ncolgar\r\ncolina\r\ncollar\r\ncolmo\r\ncolumna\r\ncombate\r\ncomer\r\ncomida\r\ncómodo\r\ncompra\r\nconde\r\nconejo\r\nconga\r\nconocer\r\nconsejo\r\ncontar\r\ncopa\r\ncopia\r\ncorazón\r\ncorbata\r\ncorcho\r\ncordón\r\ncorona\r\ncorrer\r\ncoser\r\ncosmos\r\ncosta\r\ncráneo\r\ncráter\r\ncrear\r\ncrecer\r\ncreído\r\ncrema\r\ncría\r\ncrimen\r\ncripta\r\ncrisis\r\ncromo\r\ncrónica\r\ncroqueta\r\ncrudo\r\ncruz\r\ncuadro\r\ncuarto\r\ncuatro\r\ncubo\r\ncubrir\r\ncuchara\r\ncuello\r\ncuento\r\ncuerda\r\ncuesta\r\ncueva\r\ncuidar\r\nculebra\r\nculpa\r\nculto\r\ncumbre\r\ncumplir\r\ncuna\r\ncuneta\r\ncuota\r\ncupón\r\ncúpula\r\ncurar\r\ncurioso\r\ncurso\r\ncurva\r\ncutis\r\ndama\r\ndanza\r\ndar\r\ndardo\r\ndátil\r\ndeber\r\ndébil\r\ndécada\r\ndecir\r\ndedo\r\ndefensa\r\ndefinir\r\ndejar\r\ndelfín\r\ndelgado\r\ndelito\r\ndemora\r\ndenso\r\ndental\r\ndeporte\r\nderecho\r\nderrota\r\ndesayuno\r\ndeseo\r\ndesfile\r\ndesnudo\r\ndestino\r\ndesvío\r\ndetalle\r\ndetener\r\ndeuda\r\ndía\r\ndiablo\r\ndiadema\r\ndiamante\r\ndiana\r\ndiario\r\ndibujo\r\ndictar\r\ndiente\r\ndieta\r\ndiez\r\ndifícil\r\ndigno\r\ndilema\r\ndiluir\r\ndinero\r\ndirecto\r\ndirigir\r\ndisco\r\ndiseño\r\ndisfraz\r\ndiva\r\ndivino\r\ndoble\r\ndoce\r\ndolor\r\ndomingo\r\ndon\r\ndonar\r\ndorado\r\ndormir\r\ndorso\r\ndos\r\ndosis\r\ndragón\r\ndroga\r\nducha\r\nduda\r\nduelo\r\ndueño\r\ndulce\r\ndúo\r\nduque\r\ndurar\r\ndureza\r\nduro\r\nébano\r\nebrio\r\nechar\r\neco\r\necuador\r\nedad\r\nedición\r\nedificio\r\neditor\r\neducar\r\nefecto\r\neficaz\r\neje\r\nejemplo\r\nelefante\r\nelegir\r\nelemento\r\nelevar\r\nelipse\r\nélite\r\nelixir\r\nelogio\r\neludir\r\nembudo\r\nemitir\r\nemoción\r\nempate\r\nempeño\r\nempleo\r\nempresa\r\nenano\r\nencargo\r\nenchufe\r\nencía\r\nenemigo\r\nenero\r\nenfado\r\nenfermo\r\nengaño\r\nenigma\r\nenlace\r\nenorme\r\nenredo\r\nensayo\r\nenseñar\r\nentero\r\nentrar\r\nenvase\r\nenvío\r\népoca\r\nequipo\r\nerizo\r\nescala\r\nescena\r\nescolar\r\nescribir\r\nescudo\r\nesencia\r\nesfera\r\nesfuerzo\r\nespada\r\nespejo\r\nespía\r\nesposa\r\nespuma\r\nesquí\r\nestar\r\neste\r\nestilo\r\nestufa\r\netapa\r\neterno\r\nética\r\netnia\r\nevadir\r\nevaluar\r\nevento\r\nevitar\r\nexacto\r\nexamen\r\nexceso\r\nexcusa\r\nexento\r\nexigir\r\nexilio\r\nexistir\r\néxito\r\nexperto\r\nexplicar\r\nexponer\r\nextremo\r\nfábrica\r\nfábula\r\nfachada\r\nfácil\r\nfactor\r\nfaena\r\nfaja\r\nfalda\r\nfallo\r\nfalso\r\nfaltar\r\nfama\r\nfamilia\r\nfamoso\r\nfaraón\r\nfarmacia\r\nfarol\r\nfarsa\r\nfase\r\nfatiga\r\nfauna\r\nfavor\r\nfax\r\nfebrero\r\nfecha\r\nfeliz\r\nfeo\r\nferia\r\nferoz\r\nfértil\r\nfervor\r\nfestín\r\nfiable\r\nfianza\r\nfiar\r\nfibra\r\nficción\r\nficha\r\nfideo\r\nfiebre\r\nfiel\r\nfiera\r\nfiesta\r\nfigura\r\nfijar\r\nfijo\r\nfila\r\nfilete\r\nfilial\r\nfiltro\r\nfin\r\nfinca\r\nfingir\r\nfinito\r\nfirma\r\nflaco\r\nflauta\r\nflecha\r\nflor\r\nflota\r\nfluir\r\nflujo\r\nflúor\r\nfobia\r\nfoca\r\nfogata\r\nfogón\r\nfolio\r\nfolleto\r\nfondo\r\nforma\r\nforro\r\nfortuna\r\nforzar\r\nfosa\r\nfoto\r\nfracaso\r\nfrágil\r\nfranja\r\nfrase\r\nfraude\r\nfreír\r\nfreno\r\nfresa\r\nfrío\r\nfrito\r\nfruta\r\nfuego\r\nfuente\r\nfuerza\r\nfuga\r\nfumar\r\nfunción\r\nfunda\r\nfurgón\r\nfuria\r\nfusil\r\nfútbol\r\nfuturo\r\ngacela\r\ngafas\r\ngaita\r\ngajo\r\ngala\r\ngalería\r\ngallo\r\ngamba\r\nganar\r\ngancho\r\nganga\r\nganso\r\ngaraje\r\ngarza\r\ngasolina\r\ngastar\r\ngato\r\ngavilán\r\ngemelo\r\ngemir\r\ngen\r\ngénero\r\ngenio\r\ngente\r\ngeranio\r\ngerente\r\ngermen\r\ngesto\r\ngigante\r\ngimnasio\r\ngirar\r\ngiro\r\nglaciar\r\nglobo\r\ngloria\r\ngol\r\ngolfo\r\ngoloso\r\ngolpe\r\ngoma\r\ngordo\r\ngorila\r\ngorra\r\ngota\r\ngoteo\r\ngozar\r\ngrada\r\ngráfico\r\ngrano\r\ngrasa\r\ngratis\r\ngrave\r\ngrieta\r\ngrillo\r\ngripe\r\ngris\r\ngrito\r\ngrosor\r\ngrúa\r\ngrueso\r\ngrumo\r\ngrupo\r\nguante\r\nguapo\r\nguardia\r\nguerra\r\nguía\r\nguiño\r\nguion\r\nguiso\r\nguitarra\r\ngusano\r\ngustar\r\nhaber\r\nhábil\r\nhablar\r\nhacer\r\nhacha\r\nhada\r\nhallar\r\nhamaca\r\nharina\r\nhaz\r\nhazaña\r\nhebilla\r\nhebra\r\nhecho\r\nhelado\r\nhelio\r\nhembra\r\nherir\r\nhermano\r\nhéroe\r\nhervir\r\nhielo\r\nhierro\r\nhígado\r\nhigiene\r\nhijo\r\nhimno\r\nhistoria\r\nhocico\r\nhogar\r\nhoguera\r\nhoja\r\nhombre\r\nhongo\r\nhonor\r\nhonra\r\nhora\r\nhormiga\r\nhorno\r\nhostil\r\nhoyo\r\nhueco\r\nhuelga\r\nhuerta\r\nhueso\r\nhuevo\r\nhuida\r\nhuir\r\nhumano\r\nhúmedo\r\nhumilde\r\nhumo\r\nhundir\r\nhuracán\r\nhurto\r\nicono\r\nideal\r\nidioma\r\nídolo\r\niglesia\r\niglú\r\nigual\r\nilegal\r\nilusión\r\nimagen\r\nimán\r\nimitar\r\nimpar\r\nimperio\r\nimponer\r\nimpulso\r\nincapaz\r\níndice\r\ninerte\r\ninfiel\r\ninforme\r\ningenio\r\ninicio\r\ninmenso\r\ninmune\r\ninnato\r\ninsecto\r\ninstante\r\ninterés\r\níntimo\r\nintuir\r\ninútil\r\ninvierno\r\nira\r\niris\r\nironía\r\nisla\r\nislote\r\njabalí\r\njabón\r\njamón\r\njarabe\r\njardín\r\njarra\r\njaula\r\njazmín\r\njefe\r\njeringa\r\njinete\r\njornada\r\njoroba\r\njoven\r\njoya\r\njuerga\r\njueves\r\njuez\r\njugador\r\njugo\r\njuguete\r\njuicio\r\njunco\r\njungla\r\njunio\r\njuntar\r\njúpiter\r\njurar\r\njusto\r\njuvenil\r\njuzgar\r\nkilo\r\nkoala\r\nlabio\r\nlacio\r\nlacra\r\nlado\r\nladrón\r\nlagarto\r\nlágrima\r\nlaguna\r\nlaico\r\nlamer\r\nlámina\r\nlámpara\r\nlana\r\nlancha\r\nlangosta\r\nlanza\r\nlápiz\r\nlargo\r\nlarva\r\nlástima\r\nlata\r\nlátex\r\nlatir\r\nlaurel\r\nlavar\r\nlazo\r\nleal\r\nlección\r\nleche\r\nlector\r\nleer\r\nlegión\r\nlegumbre\r\nlejano\r\nlengua\r\nlento\r\nleña\r\nleón\r\nleopardo\r\nlesión\r\nletal\r\nletra\r\nleve\r\nleyenda\r\nlibertad\r\nlibro\r\nlicor\r\nlíder\r\nlidiar\r\nlienzo\r\nliga\r\nligero\r\nlima\r\nlímite\r\nlimón\r\nlimpio\r\nlince\r\nlindo\r\nlínea\r\nlingote\r\nlino\r\nlinterna\r\nlíquido\r\nliso\r\nlista\r\nlitera\r\nlitio\r\nlitro\r\nllaga\r\nllama\r\nllanto\r\nllave\r\nllegar\r\nllenar\r\nllevar\r\nllorar\r\nllover\r\nlluvia\r\nlobo\r\nloción\r\nloco\r\nlocura\r\nlógica\r\nlogro\r\nlombriz\r\nlomo\r\nlonja\r\nlote\r\nlucha\r\nlucir\r\nlugar\r\nlujo\r\nluna\r\nlunes\r\nlupa\r\nlustro\r\nluto\r\nluz\r\nmaceta\r\nmacho\r\nmadera\r\nmadre\r\nmaduro\r\nmaestro\r\nmafia\r\nmagia\r\nmago\r\nmaíz\r\nmaldad\r\nmaleta\r\nmalla\r\nmalo\r\nmamá\r\nmambo\r\nmamut\r\nmanco\r\nmando\r\nmanejar\r\nmanga\r\nmaniquí\r\nmanjar\r\nmano\r\nmanso\r\nmanta\r\nmañana\r\nmapa\r\nmáquina\r\nmar\r\nmarco\r\nmarea\r\nmarfil\r\nmargen\r\nmarido\r\nmármol\r\nmarrón\r\nmartes\r\nmarzo\r\nmasa\r\nmáscara\r\nmasivo\r\nmatar\r\nmateria\r\nmatiz\r\nmatriz\r\nmáximo\r\nmayor\r\nmazorca\r\nmecha\r\nmedalla\r\nmedio\r\nmédula\r\nmejilla\r\nmejor\r\nmelena\r\nmelón\r\nmemoria\r\nmenor\r\nmensaje\r\nmente\r\nmenú\r\nmercado\r\nmerengue\r\nmérito\r\nmes\r\nmesón\r\nmeta\r\nmeter\r\nmétodo\r\nmetro\r\nmezcla\r\nmiedo\r\nmiel\r\nmiembro\r\nmiga\r\nmil\r\nmilagro\r\nmilitar\r\nmillón\r\nmimo\r\nmina\r\nminero\r\nmínimo\r\nminuto\r\nmiope\r\nmirar\r\nmisa\r\nmiseria\r\nmisil\r\nmismo\r\nmitad\r\nmito\r\nmochila\r\nmoción\r\nmoda\r\nmodelo\r\nmoho\r\nmojar\r\nmolde\r\nmoler\r\nmolino\r\nmomento\r\nmomia\r\nmonarca\r\nmoneda\r\nmonja\r\nmonto\r\nmoño\r\nmorada\r\nmorder\r\nmoreno\r\nmorir\r\nmorro\r\nmorsa\r\nmortal\r\nmosca\r\nmostrar\r\nmotivo\r\nmover\r\nmóvil\r\nmozo\r\nmucho\r\nmudar\r\nmueble\r\nmuela\r\nmuerte\r\nmuestra\r\nmugre\r\nmujer\r\nmula\r\nmuleta\r\nmulta\r\nmundo\r\nmuñeca\r\nmural\r\nmuro\r\nmúsculo\r\nmuseo\r\nmusgo\r\nmúsica\r\nmuslo\r\nnácar\r\nnación\r\nnadar\r\nnaipe\r\nnaranja\r\nnariz\r\nnarrar\r\nnasal\r\nnatal\r\nnativo\r\nnatural\r\nnáusea\r\nnaval\r\nnave\r\nnavidad\r\nnecio\r\nnéctar\r\nnegar\r\nnegocio\r\nnegro\r\nneón\r\nnervio\r\nneto\r\nneutro\r\nnevar\r\nnevera\r\nnicho\r\nnido\r\nniebla\r\nnieto\r\nniñez\r\nniño\r\nnítido\r\nnivel\r\nnobleza\r\nnoche\r\nnómina\r\nnoria\r\nnorma\r\nnorte\r\nnota\r\nnoticia\r\nnovato\r\nnovela\r\nnovio\r\nnube\r\nnuca\r\nnúcleo\r\nnudillo\r\nnudo\r\nnuera\r\nnueve\r\nnuez\r\nnulo\r\nnúmero\r\nnutria\r\noasis\r\nobeso\r\nobispo\r\nobjeto\r\nobra\r\nobrero\r\nobservar\r\nobtener\r\nobvio\r\noca\r\nocaso\r\nocéano\r\nochenta\r\nocho\r\nocio\r\nocre\r\noctavo\r\noctubre\r\noculto\r\nocupar\r\nocurrir\r\nodiar\r\nodio\r\nodisea\r\noeste\r\nofensa\r\noferta\r\noficio\r\nofrecer\r\nogro\r\noído\r\noír\r\nojo\r\nola\r\noleada\r\nolfato\r\nolivo\r\nolla\r\nolmo\r\nolor\r\nolvido\r\nombligo\r\nonda\r\nonza\r\nopaco\r\nopción\r\nópera\r\nopinar\r\noponer\r\noptar\r\nóptica\r\nopuesto\r\noración\r\norador\r\noral\r\nórbita\r\norca\r\norden\r\noreja\r\nórgano\r\norgía\r\norgullo\r\noriente\r\norigen\r\norilla\r\noro\r\norquesta\r\noruga\r\nosadía\r\noscuro\r\nosezno\r\noso\r\nostra\r\notoño\r\notro\r\noveja\r\nóvulo\r\nóxido\r\noxígeno\r\noyente\r\nozono\r\npacto\r\npadre\r\npaella\r\npágina\r\npago\r\npaís\r\npájaro\r\npalabra\r\npalco\r\npaleta\r\npálido\r\npalma\r\npaloma\r\npalpar\r\npan\r\npanal\r\npánico\r\npantera\r\npañuelo\r\npapá\r\npapel\r\npapilla\r\npaquete\r\nparar\r\nparcela\r\npared\r\nparir\r\nparo\r\npárpado\r\nparque\r\npárrafo\r\nparte\r\npasar\r\npaseo\r\npasión\r\npaso\r\npasta\r\npata\r\npatio\r\npatria\r\npausa\r\npauta\r\npavo\r\npayaso\r\npeatón\r\npecado\r\npecera\r\npecho\r\npedal\r\npedir\r\npegar\r\npeine\r\npelar\r\npeldaño\r\npelea\r\npeligro\r\npellejo\r\npelo\r\npeluca\r\npena\r\npensar\r\npeñón\r\npeón\r\npeor\r\npepino\r\npequeño\r\npera\r\npercha\r\nperder\r\npereza\r\nperfil\r\nperico\r\nperla\r\npermiso\r\nperro\r\npersona\r\npesa\r\npesca\r\npésimo\r\npestaña\r\npétalo\r\npetróleo\r\npez\r\npezuña\r\npicar\r\npichón\r\npie\r\npiedra\r\npierna\r\npieza\r\npijama\r\npilar\r\npiloto\r\npimienta\r\npino\r\npintor\r\npinza\r\npiña\r\npiojo\r\npipa\r\npirata\r\npisar\r\npiscina\r\npiso\r\npista\r\npitón\r\npizca\r\nplaca\r\nplan\r\nplata\r\nplaya\r\nplaza\r\npleito\r\npleno\r\nplomo\r\npluma\r\nplural\r\npobre\r\npoco\r\npoder\r\npodio\r\npoema\r\npoesía\r\npoeta\r\npolen\r\npolicía\r\npollo\r\npolvo\r\npomada\r\npomelo\r\npomo\r\npompa\r\nponer\r\nporción\r\nportal\r\nposada\r\nposeer\r\nposible\r\nposte\r\npotencia\r\npotro\r\npozo\r\nprado\r\nprecoz\r\npregunta\r\npremio\r\nprensa\r\npreso\r\nprevio\r\nprimo\r\npríncipe\r\nprisión\r\nprivar\r\nproa\r\nprobar\r\nproceso\r\nproducto\r\nproeza\r\nprofesor\r\nprograma\r\nprole\r\npromesa\r\npronto\r\npropio\r\npróximo\r\nprueba\r\npúblico\r\npuchero\r\npudor\r\npueblo\r\npuerta\r\npuesto\r\npulga\r\npulir\r\npulmón\r\npulpo\r\npulso\r\npuma\r\npunto\r\npuñal\r\npuño\r\npupa\r\npupila\r\npuré\r\nquedar\r\nqueja\r\nquemar\r\nquerer\r\nqueso\r\nquieto\r\nquímica\r\nquince\r\nquitar\r\nrábano\r\nrabia\r\nrabo\r\nración\r\nradical\r\nraíz\r\nrama\r\nrampa\r\nrancho\r\nrango\r\nrapaz\r\nrápido\r\nrapto\r\nrasgo\r\nraspa\r\nrato\r\nrayo\r\nraza\r\nrazón\r\nreacción\r\nrealidad\r\nrebaño\r\nrebote\r\nrecaer\r\nreceta\r\nrechazo\r\nrecoger\r\nrecreo\r\nrecto\r\nrecurso\r\nred\r\nredondo\r\nreducir\r\nreflejo\r\nreforma\r\nrefrán\r\nrefugio\r\nregalo\r\nregir\r\nregla\r\nregreso\r\nrehén\r\nreino\r\nreír\r\nreja\r\nrelato\r\nrelevo\r\nrelieve\r\nrelleno\r\nreloj\r\nremar\r\nremedio\r\nremo\r\nrencor\r\nrendir\r\nrenta\r\nreparto\r\nrepetir\r\nreposo\r\nreptil\r\nres\r\nrescate\r\nresina\r\nrespeto\r\nresto\r\nresumen\r\nretiro\r\nretorno\r\nretrato\r\nreunir\r\nrevés\r\nrevista\r\nrey\r\nrezar\r\nrico\r\nriego\r\nrienda\r\nriesgo\r\nrifa\r\nrígido\r\nrigor\r\nrincón\r\nriñón\r\nrío\r\nriqueza\r\nrisa\r\nritmo\r\nrito\r\nrizo\r\nroble\r\nroce\r\nrociar\r\nrodar\r\nrodeo\r\nrodilla\r\nroer\r\nrojizo\r\nrojo\r\nromero\r\nromper\r\nron\r\nronco\r\nronda\r\nropa\r\nropero\r\nrosa\r\nrosca\r\nrostro\r\nrotar\r\nrubí\r\nrubor\r\nrudo\r\nrueda\r\nrugir\r\nruido\r\nruina\r\nruleta\r\nrulo\r\nrumbo\r\nrumor\r\nruptura\r\nruta\r\nrutina\r\nsábado\r\nsaber\r\nsabio\r\nsable\r\nsacar\r\nsagaz\r\nsagrado\r\nsala\r\nsaldo\r\nsalero\r\nsalir\r\nsalmón\r\nsalón\r\nsalsa\r\nsalto\r\nsalud\r\nsalvar\r\nsamba\r\nsanción\r\nsandía\r\nsanear\r\nsangre\r\nsanidad\r\nsano\r\nsanto\r\nsapo\r\nsaque\r\nsardina\r\nsartén\r\nsastre\r\nsatán\r\nsauna\r\nsaxofón\r\nsección\r\nseco\r\nsecreto\r\nsecta\r\nsed\r\nseguir\r\nseis\r\nsello\r\nselva\r\nsemana\r\nsemilla\r\nsenda\r\nsensor\r\nseñal\r\nseñor\r\nseparar\r\nsepia\r\nsequía\r\nser\r\nserie\r\nsermón\r\nservir\r\nsesenta\r\nsesión\r\nseta\r\nsetenta\r\nsevero\r\nsexo\r\nsexto\r\nsidra\r\nsiesta\r\nsiete\r\nsiglo\r\nsigno\r\nsílaba\r\nsilbar\r\nsilencio\r\nsilla\r\nsímbolo\r\nsimio\r\nsirena\r\nsistema\r\nsitio\r\nsituar\r\nsobre\r\nsocio\r\nsodio\r\nsol\r\nsolapa\r\nsoldado\r\nsoledad\r\nsólido\r\nsoltar\r\nsolución\r\nsombra\r\nsondeo\r\nsonido\r\nsonoro\r\nsonrisa\r\nsopa\r\nsoplar\r\nsoporte\r\nsordo\r\nsorpresa\r\nsorteo\r\nsostén\r\nsótano\r\nsuave\r\nsubir\r\nsuceso\r\nsudor\r\nsuegra\r\nsuelo\r\nsueño\r\nsuerte\r\nsufrir\r\nsujeto\r\nsultán\r\nsumar\r\nsuperar\r\nsuplir\r\nsuponer\r\nsupremo\r\nsur\r\nsurco\r\nsureño\r\nsurgir\r\nsusto\r\nsutil\r\ntabaco\r\ntabique\r\ntabla\r\ntabú\r\ntaco\r\ntacto\r\ntajo\r\ntalar\r\ntalco\r\ntalento\r\ntalla\r\ntalón\r\ntamaño\r\ntambor\r\ntango\r\ntanque\r\ntapa\r\ntapete\r\ntapia\r\ntapón\r\ntaquilla\r\ntarde\r\ntarea\r\ntarifa\r\ntarjeta\r\ntarot\r\ntarro\r\ntarta\r\ntatuaje\r\ntauro\r\ntaza\r\ntazón\r\nteatro\r\ntecho\r\ntecla\r\ntécnica\r\ntejado\r\ntejer\r\ntejido\r\ntela\r\nteléfono\r\ntema\r\ntemor\r\ntemplo\r\ntenaz\r\ntender\r\ntener\r\ntenis\r\ntenso\r\nteoría\r\nterapia\r\nterco\r\ntérmino\r\nternura\r\nterror\r\ntesis\r\ntesoro\r\ntestigo\r\ntetera\r\ntexto\r\ntez\r\ntibio\r\ntiburón\r\ntiempo\r\ntienda\r\ntierra\r\ntieso\r\ntigre\r\ntijera\r\ntilde\r\ntimbre\r\ntímido\r\ntimo\r\ntinta\r\ntío\r\ntípico\r\ntipo\r\ntira\r\ntirón\r\ntitán\r\ntítere\r\ntítulo\r\ntiza\r\ntoalla\r\ntobillo\r\ntocar\r\ntocino\r\ntodo\r\ntoga\r\ntoldo\r\ntomar\r\ntono\r\ntonto\r\ntopar\r\ntope\r\ntoque\r\ntórax\r\ntorero\r\ntormenta\r\ntorneo\r\ntoro\r\ntorpedo\r\ntorre\r\ntorso\r\ntortuga\r\ntos\r\ntosco\r\ntoser\r\ntóxico\r\ntrabajo\r\ntractor\r\ntraer\r\ntráfico\r\ntrago\r\ntraje\r\ntramo\r\ntrance\r\ntrato\r\ntrauma\r\ntrazar\r\ntrébol\r\ntregua\r\ntreinta\r\ntren\r\ntrepar\r\ntres\r\ntribu\r\ntrigo\r\ntripa\r\ntriste\r\ntriunfo\r\ntrofeo\r\ntrompa\r\ntronco\r\ntropa\r\ntrote\r\ntrozo\r\ntruco\r\ntrueno\r\ntrufa\r\ntubería\r\ntubo\r\ntuerto\r\ntumba\r\ntumor\r\ntúnel\r\ntúnica\r\nturbina\r\nturismo\r\nturno\r\ntutor\r\nubicar\r\núlcera\r\numbral\r\nunidad\r\nunir\r\nuniverso\r\nuno\r\nuntar\r\nuña\r\nurbano\r\nurbe\r\nurgente\r\nurna\r\nusar\r\nusuario\r\nútil\r\nutopía\r\nuva\r\nvaca\r\nvacío\r\nvacuna\r\nvagar\r\nvago\r\nvaina\r\nvajilla\r\nvale\r\nválido\r\nvalle\r\nvalor\r\nválvula\r\nvampiro\r\nvara\r\nvariar\r\nvarón\r\nvaso\r\nvecino\r\nvector\r\nvehículo\r\nveinte\r\nvejez\r\nvela\r\nvelero\r\nveloz\r\nvena\r\nvencer\r\nvenda\r\nveneno\r\nvengar\r\nvenir\r\nventa\r\nvenus\r\nver\r\nverano\r\nverbo\r\nverde\r\nvereda\r\nverja\r\nverso\r\nverter\r\nvía\r\nviaje\r\nvibrar\r\nvicio\r\nvíctima\r\nvida\r\nvídeo\r\nvidrio\r\nviejo\r\nviernes\r\nvigor\r\nvil\r\nvilla\r\nvinagre\r\nvino\r\nviñedo\r\nviolín\r\nviral\r\nvirgo\r\nvirtud\r\nvisor\r\nvíspera\r\nvista\r\nvitamina\r\nviudo\r\nvivaz\r\nvivero\r\nvivir\r\nvivo\r\nvolcán\r\nvolumen\r\nvolver\r\nvoraz\r\nvotar\r\nvoto\r\nvoz\r\nvuelo\r\nvulgar\r\nyacer\r\nyate\r\nyegua\r\nyema\r\nyerno\r\nyeso\r\nyodo\r\nyoga\r\nyogur\r\nzafiro\r\nzanja\r\nzapato\r\nzarza\r\nzona\r\nzorro\r\nzumo\r\nzurdo`.split('\\n');\r\n", "export const wordlist = `的\r\n一\r\n是\r\n在\r\n不\r\n了\r\n有\r\n和\r\n人\r\n這\r\n中\r\n大\r\n為\r\n上\r\n個\r\n國\r\n我\r\n以\r\n要\r\n他\r\n時\r\n來\r\n用\r\n們\r\n生\r\n到\r\n作\r\n地\r\n於\r\n出\r\n就\r\n分\r\n對\r\n成\r\n會\r\n可\r\n主\r\n發\r\n年\r\n動\r\n同\r\n工\r\n也\r\n能\r\n下\r\n過\r\n子\r\n說\r\n產\r\n種\r\n面\r\n而\r\n方\r\n後\r\n多\r\n定\r\n行\r\n學\r\n法\r\n所\r\n民\r\n得\r\n經\r\n十\r\n三\r\n之\r\n進\r\n著\r\n等\r\n部\r\n度\r\n家\r\n電\r\n力\r\n裡\r\n如\r\n水\r\n化\r\n高\r\n自\r\n二\r\n理\r\n起\r\n小\r\n物\r\n現\r\n實\r\n加\r\n量\r\n都\r\n兩\r\n體\r\n制\r\n機\r\n當\r\n使\r\n點\r\n從\r\n業\r\n本\r\n去\r\n把\r\n性\r\n好\r\n應\r\n開\r\n它\r\n合\r\n還\r\n因\r\n由\r\n其\r\n些\r\n然\r\n前\r\n外\r\n天\r\n政\r\n四\r\n日\r\n那\r\n社\r\n義\r\n事\r\n平\r\n形\r\n相\r\n全\r\n表\r\n間\r\n樣\r\n與\r\n關\r\n各\r\n重\r\n新\r\n線\r\n內\r\n數\r\n正\r\n心\r\n反\r\n你\r\n明\r\n看\r\n原\r\n又\r\n麼\r\n利\r\n比\r\n或\r\n但\r\n質\r\n氣\r\n第\r\n向\r\n道\r\n命\r\n此\r\n變\r\n條\r\n只\r\n沒\r\n結\r\n解\r\n問\r\n意\r\n建\r\n月\r\n公\r\n無\r\n系\r\n軍\r\n很\r\n情\r\n者\r\n最\r\n立\r\n代\r\n想\r\n已\r\n通\r\n並\r\n提\r\n直\r\n題\r\n黨\r\n程\r\n展\r\n五\r\n果\r\n料\r\n象\r\n員\r\n革\r\n位\r\n入\r\n常\r\n文\r\n總\r\n次\r\n品\r\n式\r\n活\r\n設\r\n及\r\n管\r\n特\r\n件\r\n長\r\n求\r\n老\r\n頭\r\n基\r\n資\r\n邊\r\n流\r\n路\r\n級\r\n少\r\n圖\r\n山\r\n統\r\n接\r\n知\r\n較\r\n將\r\n組\r\n見\r\n計\r\n別\r\n她\r\n手\r\n角\r\n期\r\n根\r\n論\r\n運\r\n農\r\n指\r\n幾\r\n九\r\n區\r\n強\r\n放\r\n決\r\n西\r\n被\r\n幹\r\n做\r\n必\r\n戰\r\n先\r\n回\r\n則\r\n任\r\n取\r\n據\r\n處\r\n隊\r\n南\r\n給\r\n色\r\n光\r\n門\r\n即\r\n保\r\n治\r\n北\r\n造\r\n百\r\n規\r\n熱\r\n領\r\n七\r\n海\r\n口\r\n東\r\n導\r\n器\r\n壓\r\n志\r\n世\r\n金\r\n增\r\n爭\r\n濟\r\n階\r\n油\r\n思\r\n術\r\n極\r\n交\r\n受\r\n聯\r\n什\r\n認\r\n六\r\n共\r\n權\r\n收\r\n證\r\n改\r\n清\r\n美\r\n再\r\n採\r\n轉\r\n更\r\n單\r\n風\r\n切\r\n打\r\n白\r\n教\r\n速\r\n花\r\n帶\r\n安\r\n場\r\n身\r\n車\r\n例\r\n真\r\n務\r\n具\r\n萬\r\n每\r\n目\r\n至\r\n達\r\n走\r\n積\r\n示\r\n議\r\n聲\r\n報\r\n鬥\r\n完\r\n類\r\n八\r\n離\r\n華\r\n名\r\n確\r\n才\r\n科\r\n張\r\n信\r\n馬\r\n節\r\n話\r\n米\r\n整\r\n空\r\n元\r\n況\r\n今\r\n集\r\n溫\r\n傳\r\n土\r\n許\r\n步\r\n群\r\n廣\r\n石\r\n記\r\n需\r\n段\r\n研\r\n界\r\n拉\r\n林\r\n律\r\n叫\r\n且\r\n究\r\n觀\r\n越\r\n織\r\n裝\r\n影\r\n算\r\n低\r\n持\r\n音\r\n眾\r\n書\r\n布\r\n复\r\n容\r\n兒\r\n須\r\n際\r\n商\r\n非\r\n驗\r\n連\r\n斷\r\n深\r\n難\r\n近\r\n礦\r\n千\r\n週\r\n委\r\n素\r\n技\r\n備\r\n半\r\n辦\r\n青\r\n省\r\n列\r\n習\r\n響\r\n約\r\n支\r\n般\r\n史\r\n感\r\n勞\r\n便\r\n團\r\n往\r\n酸\r\n歷\r\n市\r\n克\r\n何\r\n除\r\n消\r\n構\r\n府\r\n稱\r\n太\r\n準\r\n精\r\n值\r\n號\r\n率\r\n族\r\n維\r\n劃\r\n選\r\n標\r\n寫\r\n存\r\n候\r\n毛\r\n親\r\n快\r\n效\r\n斯\r\n院\r\n查\r\n江\r\n型\r\n眼\r\n王\r\n按\r\n格\r\n養\r\n易\r\n置\r\n派\r\n層\r\n片\r\n始\r\n卻\r\n專\r\n狀\r\n育\r\n廠\r\n京\r\n識\r\n適\r\n屬\r\n圓\r\n包\r\n火\r\n住\r\n調\r\n滿\r\n縣\r\n局\r\n照\r\n參\r\n紅\r\n細\r\n引\r\n聽\r\n該\r\n鐵\r\n價\r\n嚴\r\n首\r\n底\r\n液\r\n官\r\n德\r\n隨\r\n病\r\n蘇\r\n失\r\n爾\r\n死\r\n講\r\n配\r\n女\r\n黃\r\n推\r\n顯\r\n談\r\n罪\r\n神\r\n藝\r\n呢\r\n席\r\n含\r\n企\r\n望\r\n密\r\n批\r\n營\r\n項\r\n防\r\n舉\r\n球\r\n英\r\n氧\r\n勢\r\n告\r\n李\r\n台\r\n落\r\n木\r\n幫\r\n輪\r\n破\r\n亞\r\n師\r\n圍\r\n注\r\n遠\r\n字\r\n材\r\n排\r\n供\r\n河\r\n態\r\n封\r\n另\r\n施\r\n減\r\n樹\r\n溶\r\n怎\r\n止\r\n案\r\n言\r\n士\r\n均\r\n武\r\n固\r\n葉\r\n魚\r\n波\r\n視\r\n僅\r\n費\r\n緊\r\n愛\r\n左\r\n章\r\n早\r\n朝\r\n害\r\n續\r\n輕\r\n服\r\n試\r\n食\r\n充\r\n兵\r\n源\r\n判\r\n護\r\n司\r\n足\r\n某\r\n練\r\n差\r\n致\r\n板\r\n田\r\n降\r\n黑\r\n犯\r\n負\r\n擊\r\n范\r\n繼\r\n興\r\n似\r\n餘\r\n堅\r\n曲\r\n輸\r\n修\r\n故\r\n城\r\n夫\r\n夠\r\n送\r\n筆\r\n船\r\n佔\r\n右\r\n財\r\n吃\r\n富\r\n春\r\n職\r\n覺\r\n漢\r\n畫\r\n功\r\n巴\r\n跟\r\n雖\r\n雜\r\n飛\r\n檢\r\n吸\r\n助\r\n昇\r\n陽\r\n互\r\n初\r\n創\r\n抗\r\n考\r\n投\r\n壞\r\n策\r\n古\r\n徑\r\n換\r\n未\r\n跑\r\n留\r\n鋼\r\n曾\r\n端\r\n責\r\n站\r\n簡\r\n述\r\n錢\r\n副\r\n盡\r\n帝\r\n射\r\n草\r\n衝\r\n承\r\n獨\r\n令\r\n限\r\n阿\r\n宣\r\n環\r\n雙\r\n請\r\n超\r\n微\r\n讓\r\n控\r\n州\r\n良\r\n軸\r\n找\r\n否\r\n紀\r\n益\r\n依\r\n優\r\n頂\r\n礎\r\n載\r\n倒\r\n房\r\n突\r\n坐\r\n粉\r\n敵\r\n略\r\n客\r\n袁\r\n冷\r\n勝\r\n絕\r\n析\r\n塊\r\n劑\r\n測\r\n絲\r\n協\r\n訴\r\n念\r\n陳\r\n仍\r\n羅\r\n鹽\r\n友\r\n洋\r\n錯\r\n苦\r\n夜\r\n刑\r\n移\r\n頻\r\n逐\r\n靠\r\n混\r\n母\r\n短\r\n皮\r\n終\r\n聚\r\n汽\r\n村\r\n雲\r\n哪\r\n既\r\n距\r\n衛\r\n停\r\n烈\r\n央\r\n察\r\n燒\r\n迅\r\n境\r\n若\r\n印\r\n洲\r\n刻\r\n括\r\n激\r\n孔\r\n搞\r\n甚\r\n室\r\n待\r\n核\r\n校\r\n散\r\n侵\r\n吧\r\n甲\r\n遊\r\n久\r\n菜\r\n味\r\n舊\r\n模\r\n湖\r\n貨\r\n損\r\n預\r\n阻\r\n毫\r\n普\r\n穩\r\n乙\r\n媽\r\n植\r\n息\r\n擴\r\n銀\r\n語\r\n揮\r\n酒\r\n守\r\n拿\r\n序\r\n紙\r\n醫\r\n缺\r\n雨\r\n嗎\r\n針\r\n劉\r\n啊\r\n急\r\n唱\r\n誤\r\n訓\r\n願\r\n審\r\n附\r\n獲\r\n茶\r\n鮮\r\n糧\r\n斤\r\n孩\r\n脫\r\n硫\r\n肥\r\n善\r\n龍\r\n演\r\n父\r\n漸\r\n血\r\n歡\r\n械\r\n掌\r\n歌\r\n沙\r\n剛\r\n攻\r\n謂\r\n盾\r\n討\r\n晚\r\n粒\r\n亂\r\n燃\r\n矛\r\n乎\r\n殺\r\n藥\r\n寧\r\n魯\r\n貴\r\n鐘\r\n煤\r\n讀\r\n班\r\n伯\r\n香\r\n介\r\n迫\r\n句\r\n豐\r\n培\r\n握\r\n蘭\r\n擔\r\n弦\r\n蛋\r\n沉\r\n假\r\n穿\r\n執\r\n答\r\n樂\r\n誰\r\n順\r\n煙\r\n縮\r\n徵\r\n臉\r\n喜\r\n松\r\n腳\r\n困\r\n異\r\n免\r\n背\r\n星\r\n福\r\n買\r\n染\r\n井\r\n概\r\n慢\r\n怕\r\n磁\r\n倍\r\n祖\r\n皇\r\n促\r\n靜\r\n補\r\n評\r\n翻\r\n肉\r\n踐\r\n尼\r\n衣\r\n寬\r\n揚\r\n棉\r\n希\r\n傷\r\n操\r\n垂\r\n秋\r\n宜\r\n氫\r\n套\r\n督\r\n振\r\n架\r\n亮\r\n末\r\n憲\r\n慶\r\n編\r\n牛\r\n觸\r\n映\r\n雷\r\n銷\r\n詩\r\n座\r\n居\r\n抓\r\n裂\r\n胞\r\n呼\r\n娘\r\n景\r\n威\r\n綠\r\n晶\r\n厚\r\n盟\r\n衡\r\n雞\r\n孫\r\n延\r\n危\r\n膠\r\n屋\r\n鄉\r\n臨\r\n陸\r\n顧\r\n掉\r\n呀\r\n燈\r\n歲\r\n措\r\n束\r\n耐\r\n劇\r\n玉\r\n趙\r\n跳\r\n哥\r\n季\r\n課\r\n凱\r\n胡\r\n額\r\n款\r\n紹\r\n卷\r\n齊\r\n偉\r\n蒸\r\n殖\r\n永\r\n宗\r\n苗\r\n川\r\n爐\r\n岩\r\n弱\r\n零\r\n楊\r\n奏\r\n沿\r\n露\r\n桿\r\n探\r\n滑\r\n鎮\r\n飯\r\n濃\r\n航\r\n懷\r\n趕\r\n庫\r\n奪\r\n伊\r\n靈\r\n稅\r\n途\r\n滅\r\n賽\r\n歸\r\n召\r\n鼓\r\n播\r\n盤\r\n裁\r\n險\r\n康\r\n唯\r\n錄\r\n菌\r\n純\r\n借\r\n糖\r\n蓋\r\n橫\r\n符\r\n私\r\n努\r\n堂\r\n域\r\n槍\r\n潤\r\n幅\r\n哈\r\n竟\r\n熟\r\n蟲\r\n澤\r\n腦\r\n壤\r\n碳\r\n歐\r\n遍\r\n側\r\n寨\r\n敢\r\n徹\r\n慮\r\n斜\r\n薄\r\n庭\r\n納\r\n彈\r\n飼\r\n伸\r\n折\r\n麥\r\n濕\r\n暗\r\n荷\r\n瓦\r\n塞\r\n床\r\n築\r\n惡\r\n戶\r\n訪\r\n塔\r\n奇\r\n透\r\n梁\r\n刀\r\n旋\r\n跡\r\n卡\r\n氯\r\n遇\r\n份\r\n毒\r\n泥\r\n退\r\n洗\r\n擺\r\n灰\r\n彩\r\n賣\r\n耗\r\n夏\r\n擇\r\n忙\r\n銅\r\n獻\r\n硬\r\n予\r\n繁\r\n圈\r\n雪\r\n函\r\n亦\r\n抽\r\n篇\r\n陣\r\n陰\r\n丁\r\n尺\r\n追\r\n堆\r\n雄\r\n迎\r\n泛\r\n爸\r\n樓\r\n避\r\n謀\r\n噸\r\n野\r\n豬\r\n旗\r\n累\r\n偏\r\n典\r\n館\r\n索\r\n秦\r\n脂\r\n潮\r\n爺\r\n豆\r\n忽\r\n托\r\n驚\r\n塑\r\n遺\r\n愈\r\n朱\r\n替\r\n纖\r\n粗\r\n傾\r\n尚\r\n痛\r\n楚\r\n謝\r\n奮\r\n購\r\n磨\r\n君\r\n池\r\n旁\r\n碎\r\n骨\r\n監\r\n捕\r\n弟\r\n暴\r\n割\r\n貫\r\n殊\r\n釋\r\n詞\r\n亡\r\n壁\r\n頓\r\n寶\r\n午\r\n塵\r\n聞\r\n揭\r\n炮\r\n殘\r\n冬\r\n橋\r\n婦\r\n警\r\n綜\r\n招\r\n吳\r\n付\r\n浮\r\n遭\r\n徐\r\n您\r\n搖\r\n谷\r\n贊\r\n箱\r\n隔\r\n訂\r\n男\r\n吹\r\n園\r\n紛\r\n唐\r\n敗\r\n宋\r\n玻\r\n巨\r\n耕\r\n坦\r\n榮\r\n閉\r\n灣\r\n鍵\r\n凡\r\n駐\r\n鍋\r\n救\r\n恩\r\n剝\r\n凝\r\n鹼\r\n齒\r\n截\r\n煉\r\n麻\r\n紡\r\n禁\r\n廢\r\n盛\r\n版\r\n緩\r\n淨\r\n睛\r\n昌\r\n婚\r\n涉\r\n筒\r\n嘴\r\n插\r\n岸\r\n朗\r\n莊\r\n街\r\n藏\r\n姑\r\n貿\r\n腐\r\n奴\r\n啦\r\n慣\r\n乘\r\n夥\r\n恢\r\n勻\r\n紗\r\n扎\r\n辯\r\n耳\r\n彪\r\n臣\r\n億\r\n璃\r\n抵\r\n脈\r\n秀\r\n薩\r\n俄\r\n網\r\n舞\r\n店\r\n噴\r\n縱\r\n寸\r\n汗\r\n掛\r\n洪\r\n賀\r\n閃\r\n柬\r\n爆\r\n烯\r\n津\r\n稻\r\n牆\r\n軟\r\n勇\r\n像\r\n滾\r\n厘\r\n蒙\r\n芳\r\n肯\r\n坡\r\n柱\r\n盪\r\n腿\r\n儀\r\n旅\r\n尾\r\n軋\r\n冰\r\n貢\r\n登\r\n黎\r\n削\r\n鑽\r\n勒\r\n逃\r\n障\r\n氨\r\n郭\r\n峰\r\n幣\r\n港\r\n伏\r\n軌\r\n畝\r\n畢\r\n擦\r\n莫\r\n刺\r\n浪\r\n秘\r\n援\r\n株\r\n健\r\n售\r\n股\r\n島\r\n甘\r\n泡\r\n睡\r\n童\r\n鑄\r\n湯\r\n閥\r\n休\r\n匯\r\n舍\r\n牧\r\n繞\r\n炸\r\n哲\r\n磷\r\n績\r\n朋\r\n淡\r\n尖\r\n啟\r\n陷\r\n柴\r\n呈\r\n徒\r\n顏\r\n淚\r\n稍\r\n忘\r\n泵\r\n藍\r\n拖\r\n洞\r\n授\r\n鏡\r\n辛\r\n壯\r\n鋒\r\n貧\r\n虛\r\n彎\r\n摩\r\n泰\r\n幼\r\n廷\r\n尊\r\n窗\r\n綱\r\n弄\r\n隸\r\n疑\r\n氏\r\n宮\r\n姐\r\n震\r\n瑞\r\n怪\r\n尤\r\n琴\r\n循\r\n描\r\n膜\r\n違\r\n夾\r\n腰\r\n緣\r\n珠\r\n窮\r\n森\r\n枝\r\n竹\r\n溝\r\n催\r\n繩\r\n憶\r\n邦\r\n剩\r\n幸\r\n漿\r\n欄\r\n擁\r\n牙\r\n貯\r\n禮\r\n濾\r\n鈉\r\n紋\r\n罷\r\n拍\r\n咱\r\n喊\r\n袖\r\n埃\r\n勤\r\n罰\r\n焦\r\n潛\r\n伍\r\n墨\r\n欲\r\n縫\r\n姓\r\n刊\r\n飽\r\n仿\r\n獎\r\n鋁\r\n鬼\r\n麗\r\n跨\r\n默\r\n挖\r\n鏈\r\n掃\r\n喝\r\n袋\r\n炭\r\n污\r\n幕\r\n諸\r\n弧\r\n勵\r\n梅\r\n奶\r\n潔\r\n災\r\n舟\r\n鑑\r\n苯\r\n訟\r\n抱\r\n毀\r\n懂\r\n寒\r\n智\r\n埔\r\n寄\r\n屆\r\n躍\r\n渡\r\n挑\r\n丹\r\n艱\r\n貝\r\n碰\r\n拔\r\n爹\r\n戴\r\n碼\r\n夢\r\n芽\r\n熔\r\n赤\r\n漁\r\n哭\r\n敬\r\n顆\r\n奔\r\n鉛\r\n仲\r\n虎\r\n稀\r\n妹\r\n乏\r\n珍\r\n申\r\n桌\r\n遵\r\n允\r\n隆\r\n螺\r\n倉\r\n魏\r\n銳\r\n曉\r\n氮\r\n兼\r\n隱\r\n礙\r\n赫\r\n撥\r\n忠\r\n肅\r\n缸\r\n牽\r\n搶\r\n博\r\n巧\r\n殼\r\n兄\r\n杜\r\n訊\r\n誠\r\n碧\r\n祥\r\n柯\r\n頁\r\n巡\r\n矩\r\n悲\r\n灌\r\n齡\r\n倫\r\n票\r\n尋\r\n桂\r\n鋪\r\n聖\r\n恐\r\n恰\r\n鄭\r\n趣\r\n抬\r\n荒\r\n騰\r\n貼\r\n柔\r\n滴\r\n猛\r\n闊\r\n輛\r\n妻\r\n填\r\n撤\r\n儲\r\n簽\r\n鬧\r\n擾\r\n紫\r\n砂\r\n遞\r\n戲\r\n吊\r\n陶\r\n伐\r\n餵\r\n療\r\n瓶\r\n婆\r\n撫\r\n臂\r\n摸\r\n忍\r\n蝦\r\n蠟\r\n鄰\r\n胸\r\n鞏\r\n擠\r\n偶\r\n棄\r\n槽\r\n勁\r\n乳\r\n鄧\r\n吉\r\n仁\r\n爛\r\n磚\r\n租\r\n烏\r\n艦\r\n伴\r\n瓜\r\n淺\r\n丙\r\n暫\r\n燥\r\n橡\r\n柳\r\n迷\r\n暖\r\n牌\r\n秧\r\n膽\r\n詳\r\n簧\r\n踏\r\n瓷\r\n譜\r\n呆\r\n賓\r\n糊\r\n洛\r\n輝\r\n憤\r\n競\r\n隙\r\n怒\r\n粘\r\n乃\r\n緒\r\n肩\r\n籍\r\n敏\r\n塗\r\n熙\r\n皆\r\n偵\r\n懸\r\n掘\r\n享\r\n糾\r\n醒\r\n狂\r\n鎖\r\n淀\r\n恨\r\n牲\r\n霸\r\n爬\r\n賞\r\n逆\r\n玩\r\n陵\r\n祝\r\n秒\r\n浙\r\n貌\r\n役\r\n彼\r\n悉\r\n鴨\r\n趨\r\n鳳\r\n晨\r\n畜\r\n輩\r\n秩\r\n卵\r\n署\r\n梯\r\n炎\r\n灘\r\n棋\r\n驅\r\n篩\r\n峽\r\n冒\r\n啥\r\n壽\r\n譯\r\n浸\r\n泉\r\n帽\r\n遲\r\n矽\r\n疆\r\n貸\r\n漏\r\n稿\r\n冠\r\n嫩\r\n脅\r\n芯\r\n牢\r\n叛\r\n蝕\r\n奧\r\n鳴\r\n嶺\r\n羊\r\n憑\r\n串\r\n塘\r\n繪\r\n酵\r\n融\r\n盆\r\n錫\r\n廟\r\n籌\r\n凍\r\n輔\r\n攝\r\n襲\r\n筋\r\n拒\r\n僚\r\n旱\r\n鉀\r\n鳥\r\n漆\r\n沈\r\n眉\r\n疏\r\n添\r\n棒\r\n穗\r\n硝\r\n韓\r\n逼\r\n扭\r\n僑\r\n涼\r\n挺\r\n碗\r\n栽\r\n炒\r\n杯\r\n患\r\n餾\r\n勸\r\n豪\r\n遼\r\n勃\r\n鴻\r\n旦\r\n吏\r\n拜\r\n狗\r\n埋\r\n輥\r\n掩\r\n飲\r\n搬\r\n罵\r\n辭\r\n勾\r\n扣\r\n估\r\n蔣\r\n絨\r\n霧\r\n丈\r\n朵\r\n姆\r\n擬\r\n宇\r\n輯\r\n陝\r\n雕\r\n償\r\n蓄\r\n崇\r\n剪\r\n倡\r\n廳\r\n咬\r\n駛\r\n薯\r\n刷\r\n斥\r\n番\r\n賦\r\n奉\r\n佛\r\n澆\r\n漫\r\n曼\r\n扇\r\n鈣\r\n桃\r\n扶\r\n仔\r\n返\r\n俗\r\n虧\r\n腔\r\n鞋\r\n棱\r\n覆\r\n框\r\n悄\r\n叔\r\n撞\r\n騙\r\n勘\r\n旺\r\n沸\r\n孤\r\n吐\r\n孟\r\n渠\r\n屈\r\n疾\r\n妙\r\n惜\r\n仰\r\n狠\r\n脹\r\n諧\r\n拋\r\n黴\r\n桑\r\n崗\r\n嘛\r\n衰\r\n盜\r\n滲\r\n臟\r\n賴\r\n湧\r\n甜\r\n曹\r\n閱\r\n肌\r\n哩\r\n厲\r\n烴\r\n緯\r\n毅\r\n昨\r\n偽\r\n症\r\n煮\r\n嘆\r\n釘\r\n搭\r\n莖\r\n籠\r\n酷\r\n偷\r\n弓\r\n錐\r\n恆\r\n傑\r\n坑\r\n鼻\r\n翼\r\n綸\r\n敘\r\n獄\r\n逮\r\n罐\r\n絡\r\n棚\r\n抑\r\n膨\r\n蔬\r\n寺\r\n驟\r\n穆\r\n冶\r\n枯\r\n冊\r\n屍\r\n凸\r\n紳\r\n坯\r\n犧\r\n焰\r\n轟\r\n欣\r\n晉\r\n瘦\r\n禦\r\n錠\r\n錦\r\n喪\r\n旬\r\n鍛\r\n壟\r\n搜\r\n撲\r\n邀\r\n亭\r\n酯\r\n邁\r\n舒\r\n脆\r\n酶\r\n閒\r\n憂\r\n酚\r\n頑\r\n羽\r\n漲\r\n卸\r\n仗\r\n陪\r\n闢\r\n懲\r\n杭\r\n姚\r\n肚\r\n捉\r\n飄\r\n漂\r\n昆\r\n欺\r\n吾\r\n郎\r\n烷\r\n汁\r\n呵\r\n飾\r\n蕭\r\n雅\r\n郵\r\n遷\r\n燕\r\n撒\r\n姻\r\n赴\r\n宴\r\n煩\r\n債\r\n帳\r\n斑\r\n鈴\r\n旨\r\n醇\r\n董\r\n餅\r\n雛\r\n姿\r\n拌\r\n傅\r\n腹\r\n妥\r\n揉\r\n賢\r\n拆\r\n歪\r\n葡\r\n胺\r\n丟\r\n浩\r\n徽\r\n昂\r\n墊\r\n擋\r\n覽\r\n貪\r\n慰\r\n繳\r\n汪\r\n慌\r\n馮\r\n諾\r\n姜\r\n誼\r\n兇\r\n劣\r\n誣\r\n耀\r\n昏\r\n躺\r\n盈\r\n騎\r\n喬\r\n溪\r\n叢\r\n盧\r\n抹\r\n悶\r\n諮\r\n刮\r\n駕\r\n纜\r\n悟\r\n摘\r\n鉺\r\n擲\r\n頗\r\n幻\r\n柄\r\n惠\r\n慘\r\n佳\r\n仇\r\n臘\r\n窩\r\n滌\r\n劍\r\n瞧\r\n堡\r\n潑\r\n蔥\r\n罩\r\n霍\r\n撈\r\n胎\r\n蒼\r\n濱\r\n倆\r\n捅\r\n湘\r\n砍\r\n霞\r\n邵\r\n萄\r\n瘋\r\n淮\r\n遂\r\n熊\r\n糞\r\n烘\r\n宿\r\n檔\r\n戈\r\n駁\r\n嫂\r\n裕\r\n徙\r\n箭\r\n捐\r\n腸\r\n撐\r\n曬\r\n辨\r\n殿\r\n蓮\r\n攤\r\n攪\r\n醬\r\n屏\r\n疫\r\n哀\r\n蔡\r\n堵\r\n沫\r\n皺\r\n暢\r\n疊\r\n閣\r\n萊\r\n敲\r\n轄\r\n鉤\r\n痕\r\n壩\r\n巷\r\n餓\r\n禍\r\n丘\r\n玄\r\n溜\r\n曰\r\n邏\r\n彭\r\n嘗\r\n卿\r\n妨\r\n艇\r\n吞\r\n韋\r\n怨\r\n矮\r\n歇`.split('\\n');\r\n", "import { EventEmitter } from 'eventemitter3'\r\nimport type * as Address from './Address.js'\r\nimport * as Errors from './Errors.js'\r\nimport * as RpcResponse from './RpcResponse.js'\r\nimport type * as RpcSchema from './RpcSchema.js'\r\nimport type * as RpcSchema_internal from './internal/rpcSchema.js'\r\nimport type { Compute, IsNarrowable, IsNever } from './internal/types.js'\r\n\r\n/** Options for a {@link ox#Provider.Provider}. */\r\nexport type Options = {\r\n  /**\r\n   * Whether to include event functions (`on`, `removeListener`) on the Provider.\r\n   *\r\n   * @default true\r\n   */\r\n  includeEvents?: boolean | undefined\r\n  /**\r\n   * RPC Schema to use for the Provider's `request` function.\r\n   * See {@link ox#RpcSchema.(from:function)} for more.\r\n   *\r\n   * @default `RpcSchema.Generic`\r\n   */\r\n  schema?: RpcSchema.Generic | undefined\r\n}\r\n\r\n/** Root type for an EIP-1193 Provider. */\r\nexport type Provider<\r\n  options extends Options | undefined = undefined,\r\n  ///\r\n  _schema extends RpcSchema.Generic = options extends {\r\n    schema: infer schema extends RpcSchema.Generic\r\n  }\r\n    ? schema\r\n    : RpcSchema.Default,\r\n> = Compute<\r\n  {\r\n    request: RequestFn<_schema>\r\n  } & (options extends { includeEvents: true } | undefined\r\n    ? {\r\n        on: EventListenerFn\r\n        removeListener: EventListenerFn\r\n      }\r\n    : {})\r\n>\r\n\r\n/** Type for an EIP-1193 Provider's event emitter. */\r\nexport type Emitter = Compute<EventEmitter<EventMap>>\r\n\r\n/** EIP-1193 Provider's `request` function. */\r\nexport type RequestFn<schema extends RpcSchema.Generic = RpcSchema.Generic> = <\r\n  methodName extends RpcSchema.MethodNameGeneric,\r\n>(\r\n  parameters: RpcSchema_internal.ExtractRequestOpaque<schema, methodName>,\r\n) => Promise<RpcSchema.ExtractReturnType<schema, methodName>>\r\n\r\n/** Type for an EIP-1193 Provider's event listener functions (`on`, `removeListener`, etc). */\r\nexport type EventListenerFn = <event extends keyof EventMap>(\r\n  event: event,\r\n  listener: EventMap[event],\r\n) => void\r\n\r\nexport type ConnectInfo = {\r\n  chainId: string\r\n}\r\n\r\nexport type Message = {\r\n  type: string\r\n  data: unknown\r\n}\r\n\r\nexport class ProviderRpcError extends Error {\r\n  override name = 'ProviderRpcError'\r\n\r\n  code: number\r\n  details: string\r\n\r\n  constructor(code: number, message: string) {\r\n    super(message)\r\n    this.code = code\r\n    this.details = message\r\n  }\r\n}\r\n\r\nexport type EventMap = {\r\n  accountsChanged: (accounts: readonly Address.Address[]) => void\r\n  chainChanged: (chainId: string) => void\r\n  connect: (connectInfo: ConnectInfo) => void\r\n  disconnect: (error: ProviderRpcError) => void\r\n  message: (message: Message) => void\r\n}\r\n\r\n/** The user rejected the request. */\r\nexport class UserRejectedRequestError extends ProviderRpcError {\r\n  static readonly code = 4001\r\n  override readonly code = 4001\r\n  override readonly name = 'Provider.UserRejectedRequestError'\r\n\r\n  constructor({\r\n    message = 'The user rejected the request.',\r\n  }: { message?: string | undefined } = {}) {\r\n    super(4001, message)\r\n  }\r\n}\r\n\r\n/** The requested method and/or account has not been authorized by the user. */\r\nexport class UnauthorizedError extends ProviderRpcError {\r\n  static readonly code = 4100\r\n  override readonly code = 4100\r\n  override readonly name = 'Provider.UnauthorizedError'\r\n\r\n  constructor({\r\n    message = 'The requested method and/or account has not been authorized by the user.',\r\n  }: { message?: string | undefined } = {}) {\r\n    super(4100, message)\r\n  }\r\n}\r\n\r\n/** The provider does not support the requested method. */\r\nexport class UnsupportedMethodError extends ProviderRpcError {\r\n  static readonly code = 4200\r\n  override readonly code = 4200\r\n  override readonly name = 'Provider.UnsupportedMethodError'\r\n\r\n  constructor({\r\n    message = 'The provider does not support the requested method.',\r\n  }: { message?: string | undefined } = {}) {\r\n    super(4200, message)\r\n  }\r\n}\r\n\r\n/** The provider is disconnected from all chains. */\r\nexport class DisconnectedError extends ProviderRpcError {\r\n  static readonly code = 4900\r\n  override readonly code = 4900\r\n  override readonly name = 'Provider.DisconnectedError'\r\n\r\n  constructor({\r\n    message = 'The provider is disconnected from all chains.',\r\n  }: { message?: string | undefined } = {}) {\r\n    super(4900, message)\r\n  }\r\n}\r\n\r\n/** The provider is not connected to the requested chain. */\r\nexport class ChainDisconnectedError extends ProviderRpcError {\r\n  static readonly code = 4901\r\n  override readonly code = 4901\r\n  override readonly name = 'Provider.ChainDisconnectedError'\r\n\r\n  constructor({\r\n    message = 'The provider is not connected to the requested chain.',\r\n  }: { message?: string | undefined } = {}) {\r\n    super(4901, message)\r\n  }\r\n}\r\n\r\n/**\r\n * Creates an EIP-1193 flavored event emitter to be injected onto a Provider.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Provider, RpcRequest, RpcResponse } from 'ox' // [!code focus]\r\n *\r\n * // 1. Instantiate a Provider Emitter. // [!code focus]\r\n * const emitter = Provider.createEmitter() // [!code focus]\r\n *\r\n * const store = RpcRequest.createStore()\r\n *\r\n * const provider = Provider.from({\r\n *   // 2. Pass the Emitter to the Provider. // [!code focus]\r\n *   ...emitter, // [!code focus]\r\n *   async request(args) {\r\n *     return await fetch('https://1.rpc.thirdweb.com', {\r\n *       body: JSON.stringify(store.prepare(args)),\r\n *       method: 'POST',\r\n *       headers: {\r\n *         'Content-Type': 'application/json',\r\n *       },\r\n *     })\r\n *       .then((res) => res.json())\r\n *       .then(RpcResponse.parse)\r\n *   },\r\n * })\r\n *\r\n * // 3. Emit Provider Events. // [!code focus]\r\n * emitter.emit('accountsChanged', ['0x...']) // [!code focus]\r\n * ```\r\n *\r\n * @returns An event emitter.\r\n */\r\nexport function createEmitter(): Emitter {\r\n  const emitter = new EventEmitter<EventMap>()\r\n\r\n  return {\r\n    get eventNames() {\r\n      return emitter.eventNames.bind(emitter)\r\n    },\r\n    get listenerCount() {\r\n      return emitter.listenerCount.bind(emitter)\r\n    },\r\n    get listeners() {\r\n      return emitter.listeners.bind(emitter)\r\n    },\r\n    addListener: emitter.addListener.bind(emitter),\r\n    emit: emitter.emit.bind(emitter),\r\n    off: emitter.off.bind(emitter),\r\n    on: emitter.on.bind(emitter),\r\n    once: emitter.once.bind(emitter),\r\n    removeAllListeners: emitter.removeAllListeners.bind(emitter),\r\n    removeListener: emitter.removeListener.bind(emitter),\r\n  }\r\n}\r\n\r\nexport declare namespace createEmitter {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Instantiates an [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193) {@link ox#Provider.Provider}\r\n * from an arbitrary [EIP-1193 Provider](https://eips.ethereum.org/EIPS/eip-1193) interface.\r\n *\r\n * @example\r\n * ### Instantiating with RPC Transport\r\n *\r\n * Ox's {@link ox#RpcTransport} is EIP-1193 compliant, and can be used to instantiate an EIP-1193 Provider. This means you can use any HTTP RPC endpoint as an EIP-1193 Provider.\r\n *\r\n * ```ts twoslash\r\n * import { Provider, RpcTransport } from 'ox'\r\n *\r\n * const transport = RpcTransport.fromHttp('https://1.rpc.thirdweb.com')\r\n * const provider = Provider.from(transport)\r\n * ```\r\n *\r\n * @example\r\n * ### Instantiating with External Providers\r\n *\r\n * The example below demonstrates how we can instantiate a typed EIP-1193 Provider from an\r\n * external EIP-1193 Provider like `window.ethereum`.\r\n *\r\n * ```ts twoslash\r\n * import 'ox/window'\r\n * import { Provider } from 'ox'\r\n *\r\n * const provider = Provider.from(window.ethereum)\r\n *\r\n * const blockNumber = await provider.request({ method: 'eth_blockNumber' })\r\n * ```\r\n *\r\n * :::tip\r\n *\r\n * There are also libraries that distribute EIP-1193 Provider objects that you can use with `Provider.from`:\r\n *\r\n * - [`@walletconnect/ethereum-provider`](https://www.npmjs.com/package/\\@walletconnect/ethereum-provider)\r\n *\r\n * - [`@coinbase/wallet-sdk`](https://www.npmjs.com/package/\\@coinbase/wallet-sdk)\r\n *\r\n * - [`@metamask/detect-provider`](https://www.npmjs.com/package/\\@metamask/detect-provider)\r\n *\r\n * - [`@safe-global/safe-apps-provider`](https://github.com/safe-global/safe-apps-sdk/tree/main/packages/safe-apps-provider)\r\n *\r\n * - [`mipd`](https://github.com/wevm/mipd): EIP-6963 Multi Injected Providers\r\n *\r\n * :::\r\n *\r\n * @example\r\n * ### Instantiating a Custom Provider\r\n *\r\n * The example below demonstrates how we can instantiate a typed EIP-1193 Provider from a\r\n * HTTP `fetch` JSON-RPC request. You can use this pattern to integrate with any asynchronous JSON-RPC\r\n * transport, including WebSockets and IPC.\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Provider, RpcRequest, RpcResponse } from 'ox'\r\n *\r\n * const store = RpcRequest.createStore()\r\n *\r\n * const provider = Provider.from({\r\n *   async request(args) {\r\n *     return await fetch('https://1.rpc.thirdweb.com', {\r\n *       body: JSON.stringify(store.prepare(args)),\r\n *       method: 'POST',\r\n *       headers: {\r\n *         'Content-Type': 'application/json',\r\n *       },\r\n *     })\r\n *       .then((res) => res.json())\r\n *       .then(RpcResponse.parse)\r\n *   },\r\n * })\r\n *\r\n * const blockNumber = await provider.request({ method: 'eth_blockNumber' })\r\n * ```\r\n *\r\n * @example\r\n * ### Type-safe Custom Schemas\r\n *\r\n * It is possible to define your own type-safe schema by using the {@link ox#RpcSchema.(from:function)} type.\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import 'ox/window'\r\n * import { Provider, RpcSchema } from 'ox'\r\n *\r\n * const schema = RpcSchema.from<\r\n *   | RpcSchema.Default\r\n *   | {\r\n *       Request: {\r\n *         method: 'abe_foo',\r\n *         params: [id: number],\r\n *       }\r\n *       ReturnType: string\r\n *     }\r\n *   | {\r\n *       Request: {\r\n *         method: 'abe_bar',\r\n *         params: [id: string],\r\n *       }\r\n *       ReturnType: string\r\n *     }\r\n * >()\r\n *\r\n * const provider = Provider.from(window.ethereum, { schema })\r\n *\r\n * const blockNumber = await provider.request({ method: 'e' })\r\n * //                                                    ^|\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * @example\r\n * ### Instantiating a Provider with Events\r\n *\r\n * The example below demonstrates how to instantiate a Provider with your own EIP-1193 flavored event emitter.\r\n *\r\n * This example is useful for Wallets that distribute an EIP-1193 Provider (e.g. webpage injection via `window.ethereum`).\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Provider, RpcRequest, RpcResponse } from 'ox'\r\n *\r\n * // 1. Instantiate a Provider Emitter.\r\n * const emitter = Provider.createEmitter() // [!code ++]\r\n *\r\n * const store = RpcRequest.createStore()\r\n *\r\n * const provider = Provider.from({\r\n *   // 2. Pass the Emitter to the Provider.\r\n *   ...emitter, // [!code ++]\r\n *   async request(args) {\r\n *     return await fetch('https://1.rpc.thirdweb.com', {\r\n *       body: JSON.stringify(store.prepare(args)),\r\n *       method: 'POST',\r\n *       headers: {\r\n *         'Content-Type': 'application/json',\r\n *       },\r\n *     })\r\n *       .then((res) => res.json())\r\n *       .then(RpcResponse.parse)\r\n *   },\r\n * })\r\n *\r\n * // 3. Emit Provider Events.\r\n * emitter.emit('accountsChanged', ['0x...']) // [!code ++]\r\n * ```\r\n *\r\n * @param provider - The EIP-1193 provider to convert.\r\n * @returns An typed EIP-1193 Provider.\r\n */\r\nexport function from<\r\n  const provider extends Provider | unknown,\r\n  options extends Options | undefined = undefined,\r\n>(\r\n  provider: provider | Provider<{ schema: RpcSchema.Generic }>,\r\n  options?: options | Options,\r\n): Provider<options>\r\n// eslint-disable-next-line jsdoc/require-jsdoc\r\nexport function from(provider: any, options: Options = {}): Provider<Options> {\r\n  const { includeEvents = true } = options\r\n  if (!provider) throw new IsUndefinedError()\r\n  return {\r\n    ...(includeEvents\r\n      ? {\r\n          on: provider.on?.bind(provider),\r\n          removeListener: provider.removeListener?.bind(provider),\r\n        }\r\n      : {}),\r\n    async request(args) {\r\n      try {\r\n        const result = await provider.request(args)\r\n        if (\r\n          result &&\r\n          typeof result === 'object' &&\r\n          'jsonrpc' in (result as { jsonrpc?: unknown })\r\n        )\r\n          return RpcResponse.parse(result) as never\r\n        return result\r\n      } catch (error) {\r\n        throw parseError(error)\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport declare namespace from {\r\n  type ErrorType = IsUndefinedError | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Parses an error object into an error instance.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Provider } from 'ox'\r\n *\r\n * const error = Provider.parseError({ code: 4200, message: 'foo' })\r\n *\r\n * error\r\n * // ^?\r\n *\r\n * ```\r\n *\r\n * @param errorObject - The error object to parse.\r\n * @returns An error instance.\r\n */\r\nexport function parseError<\r\n  const errorObject extends RpcResponse.ErrorObject | unknown,\r\n>(\r\n  errorObject: errorObject | RpcResponse.ErrorObject,\r\n): parseError.ReturnType<errorObject> {\r\n  const errorObject_ = errorObject as RpcResponse.ErrorObject\r\n  const error = RpcResponse.parseError(errorObject_)\r\n  if (error instanceof RpcResponse.InternalError) {\r\n    if (!error.data) return error as never\r\n\r\n    const { code } = error.data as RpcResponse.ErrorObject\r\n    if (code === DisconnectedError.code)\r\n      return new DisconnectedError(errorObject_) as never\r\n    if (code === ChainDisconnectedError.code)\r\n      return new ChainDisconnectedError(errorObject_) as never\r\n    if (code === UserRejectedRequestError.code)\r\n      return new UserRejectedRequestError(errorObject_) as never\r\n    if (code === UnauthorizedError.code)\r\n      return new UnauthorizedError(errorObject_) as never\r\n    if (code === UnsupportedMethodError.code)\r\n      return new UnsupportedMethodError(errorObject_) as never\r\n  }\r\n  return error as never\r\n}\r\n\r\nexport declare namespace parseError {\r\n  type ReturnType<\r\n    errorObject extends RpcResponse.ErrorObject | unknown,\r\n    //\r\n    error = errorObject extends RpcResponse.ErrorObject\r\n      ?\r\n          | (errorObject['code'] extends DisconnectedError['code']\r\n              ? DisconnectedError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? DisconnectedError\r\n              : never)\r\n          | (errorObject['code'] extends ChainDisconnectedError['code']\r\n              ? ChainDisconnectedError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? ChainDisconnectedError\r\n              : never)\r\n          | (errorObject['code'] extends UserRejectedRequestError['code']\r\n              ? UserRejectedRequestError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? UserRejectedRequestError\r\n              : never)\r\n          | (errorObject['code'] extends UnauthorizedError['code']\r\n              ? UnauthorizedError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? UnauthorizedError\r\n              : never)\r\n          | (errorObject['code'] extends UnsupportedMethodError['code']\r\n              ? UnsupportedMethodError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? UnsupportedMethodError\r\n              : never)\r\n      : RpcResponse.parseError.ReturnType<RpcResponse.ErrorObject>,\r\n  > = IsNever<error> extends true\r\n    ? RpcResponse.parseError.ReturnType<errorObject>\r\n    : error\r\n}\r\n\r\n/** Thrown when the provider is undefined. */\r\nexport class IsUndefinedError extends Errors.BaseError {\r\n  override readonly name = 'Provider.IsUndefinedError'\r\n\r\n  constructor() {\r\n    super('`provider` is undefined.')\r\n  }\r\n}\r\n", "import type { Errors, RpcRequest } from '../index.js'\r\nimport type {\r\n  Compute,\r\n  IsNarrowable,\r\n  IsNever,\r\n  OneOf,\r\n  UnionPartialBy,\r\n} from './internal/types.js'\r\n\r\n/** A JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#request_object). */\r\nexport type RpcResponse<\r\n  result = unknown,\r\n  error extends ErrorObject = ErrorObject,\r\n> = Compute<\r\n  {\r\n    id: number\r\n    jsonrpc: '2.0'\r\n  } & OneOf<{ result: result } | { error: error }>\r\n>\r\n\r\n/** JSON-RPC error object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#error_object). */\r\nexport type ErrorObject = {\r\n  code: number\r\n  message: string\r\n  data?: unknown | undefined\r\n}\r\n\r\n/**\r\n * A type-safe interface to instantiate a JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#response_object).\r\n *\r\n * @example\r\n * ### Instantiating a Response Object\r\n *\r\n * ```ts twoslash\r\n * import { RpcResponse } from 'ox'\r\n *\r\n * const response = RpcResponse.from({\r\n *   id: 0,\r\n *   jsonrpc: '2.0',\r\n *   result: '0x69420',\r\n * })\r\n * ```\r\n *\r\n * @example\r\n * ### Type-safe Instantiation\r\n *\r\n * If you have a JSON-RPC request object, you can use it to strongly-type the response. If a `request` is provided,\r\n * then the `id` and `jsonrpc` properties will be overridden with the values from the request.\r\n *\r\n * ```ts twoslash\r\n * import { RpcRequest, RpcResponse } from 'ox'\r\n *\r\n * const request = RpcRequest.from({ id: 0, method: 'eth_blockNumber' })\r\n *\r\n * const response = RpcResponse.from(\r\n *   { result: '0x69420' },\r\n *   { request },\r\n * )\r\n * ```\r\n *\r\n * @param response - Opaque JSON-RPC response object.\r\n * @param options - Parsing options.\r\n * @returns Typed JSON-RPC result, or response object (if `raw` is `true`).\r\n */\r\nexport function from<\r\n  request extends RpcRequest.RpcRequest | undefined = undefined,\r\n  const response =\r\n    | (request extends RpcRequest.RpcRequest\r\n        ? request['_returnType']\r\n        : RpcResponse)\r\n    | unknown,\r\n>(\r\n  response: from.Response<request, response>,\r\n  options?: from.Options<request>,\r\n): Compute<from.ReturnType<response>>\r\n// eslint-disable-next-line jsdoc/require-jsdoc\r\nexport function from(response: RpcResponse, options: any = {}): RpcResponse {\r\n  const { request } = options\r\n  return {\r\n    ...response,\r\n    id: response.id ?? request?.id,\r\n    jsonrpc: response.jsonrpc ?? request.jsonrpc,\r\n  }\r\n}\r\n\r\nexport declare namespace from {\r\n  type Response<\r\n    request extends RpcRequest.RpcRequest | undefined = undefined,\r\n    response = unknown,\r\n  > = response &\r\n    (request extends RpcRequest.RpcRequest\r\n      ? UnionPartialBy<RpcResponse<request['_returnType']>, 'id' | 'jsonrpc'>\r\n      : RpcResponse)\r\n\r\n  type Options<\r\n    request extends RpcRequest.RpcRequest | undefined =\r\n      | RpcRequest.RpcRequest\r\n      | undefined,\r\n  > = {\r\n    request?: request | RpcRequest.RpcRequest | undefined\r\n  }\r\n\r\n  type ReturnType<response> = IsNarrowable<response, RpcResponse> extends true\r\n    ? RpcResponse\r\n    : response & Readonly<{ id: number; jsonrpc: '2.0' }>\r\n}\r\n\r\n/**\r\n * A type-safe interface to parse a JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#response_object), and extract the result.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { RpcRequest, RpcResponse } from 'ox'\r\n *\r\n * // 1. Create a request store.\r\n * const store = RpcRequest.createStore()\r\n *\r\n * // 2. Get a request object.\r\n * const request = store.prepare({\r\n *   method: 'eth_getBlockByNumber',\r\n *   params: ['0x1', false],\r\n * })\r\n *\r\n * // 3. Send the JSON-RPC request via HTTP.\r\n * const block = await fetch('https://1.rpc.thirdweb.com', {\r\n *   body: JSON.stringify(request),\r\n *   headers: {\r\n *     'Content-Type': 'application/json',\r\n *   },\r\n *   method: 'POST',\r\n * })\r\n *  .then((response) => response.json())\r\n *  // 4. Parse the JSON-RPC response into a type-safe result. // [!code focus]\r\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code focus]\r\n *\r\n * block // [!code focus]\r\n * // ^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * :::tip\r\n *\r\n * If you don't need the return type, you can omit the options entirely.\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { RpcResponse } from 'ox'\r\n *\r\n * const block = await fetch('https://1.rpc.thirdweb.com', {})\r\n *  .then((response) => response.json())\r\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code --]\r\n *  .then(RpcResponse.parse) // [!code ++]\r\n * ```\r\n * :::\r\n *\r\n * @example\r\n * ### Raw Mode\r\n *\r\n * If `raw` is `true`, the response will be returned as an object with `result` and `error` properties instead of returning the `result` directly and throwing errors.\r\n *\r\n * ```ts twoslash\r\n * import { RpcRequest, RpcResponse } from 'ox'\r\n *\r\n * const store = RpcRequest.createStore()\r\n *\r\n * const request = store.prepare({\r\n *   method: 'eth_blockNumber',\r\n * })\r\n *\r\n * const response = RpcResponse.parse({}, {\r\n *   request,\r\n *   raw: true, // [!code hl]\r\n * })\r\n *\r\n * response.result\r\n * //       ^?\r\n *\r\n *\r\n * response.error\r\n * //       ^?\r\n *\r\n *\r\n * ```\r\n *\r\n * @param response - Opaque JSON-RPC response object.\r\n * @param options - Parsing options.\r\n * @returns Typed JSON-RPC result, or response object (if `raw` is `true`).\r\n */\r\nexport function parse<\r\n  const response extends RpcResponse | unknown,\r\n  returnType,\r\n  raw extends boolean = false,\r\n>(\r\n  response: response,\r\n  options: parse.Options<returnType, raw> = {},\r\n): parse.ReturnType<\r\n  unknown extends response\r\n    ? returnType\r\n    : response extends RpcResponse\r\n      ? response extends { result: infer result }\r\n        ? result\r\n        : never\r\n      : returnType,\r\n  raw\r\n> {\r\n  const { raw = false } = options\r\n  const response_ = response as RpcResponse\r\n  if (raw) return response as never\r\n  if (response_.error) throw parseError(response_.error)\r\n  return response_.result as never\r\n}\r\n\r\nexport declare namespace parse {\r\n  type Options<returnType, raw extends boolean = false> = {\r\n    /**\r\n     * JSON-RPC Method that was used to make the request. Used for typing the response.\r\n     */\r\n    request?:\r\n      | {\r\n          _returnType: returnType\r\n        }\r\n      | RpcRequest.RpcRequest\r\n      | undefined\r\n    /**\r\n     * Enables raw mode – responses will return an object with `result` and `error` properties instead of returning the `result` directly and throwing errors.\r\n     *\r\n     * - `true`: a JSON-RPC response object will be returned with `result` and `error` properties.\r\n     * - `false`: the JSON-RPC response object's `result` property will be returned directly, and JSON-RPC Errors will be thrown.\r\n     *\r\n     * @default false\r\n     */\r\n    raw?: raw | boolean | undefined\r\n  }\r\n\r\n  type ReturnType<returnType, raw extends boolean = false> = Compute<\r\n    raw extends true ? RpcResponse<returnType> : returnType\r\n  >\r\n\r\n  type ErrorType =\r\n    | ParseError\r\n    | InvalidInputError\r\n    | ResourceNotFoundError\r\n    | ResourceUnavailableError\r\n    | TransactionRejectedError\r\n    | MethodNotSupportedError\r\n    | LimitExceededError\r\n    | VersionNotSupportedError\r\n    | InvalidRequestError\r\n    | MethodNotFoundError\r\n    | InvalidParamsError\r\n    | InternalError\r\n    | BaseErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Parses a JSON-RPC error object into an error instance.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { RpcResponse } from 'ox'\r\n *\r\n * const error = RpcResponse.parseError({ code: -32000, message: 'unsupported method' })\r\n *\r\n * error\r\n * // ^?\r\n *\r\n * ```\r\n *\r\n * @param errorObject - JSON-RPC error object.\r\n * @returns Error instance.\r\n */\r\nexport function parseError<const errorObject extends ErrorObject | unknown>(\r\n  errorObject: errorObject | ErrorObject,\r\n): parseError.ReturnType<errorObject> {\r\n  const errorObject_ = errorObject as ErrorObject\r\n  const { code } = errorObject_\r\n  if (code === InternalError.code)\r\n    return new InternalError(errorObject_) as never\r\n  if (code === InvalidInputError.code)\r\n    return new InvalidInputError(errorObject_) as never\r\n  if (code === InvalidParamsError.code)\r\n    return new InvalidParamsError(errorObject_) as never\r\n  if (code === InvalidRequestError.code)\r\n    return new InvalidRequestError(errorObject_) as never\r\n  if (code === LimitExceededError.code)\r\n    return new LimitExceededError(errorObject_) as never\r\n  if (code === MethodNotFoundError.code)\r\n    return new MethodNotFoundError(errorObject_) as never\r\n  if (code === MethodNotSupportedError.code)\r\n    return new MethodNotSupportedError(errorObject_) as never\r\n  if (code === ParseError.code) return new ParseError(errorObject_) as never\r\n  if (code === ResourceNotFoundError.code)\r\n    return new ResourceNotFoundError(errorObject_) as never\r\n  if (code === ResourceUnavailableError.code)\r\n    return new ResourceUnavailableError(errorObject_) as never\r\n  if (code === TransactionRejectedError.code)\r\n    return new TransactionRejectedError(errorObject_) as never\r\n  if (code === VersionNotSupportedError.code)\r\n    return new VersionNotSupportedError(errorObject_) as never\r\n  return new InternalError({\r\n    data: errorObject_,\r\n    message: errorObject_.message,\r\n  }) as never\r\n}\r\n\r\nexport declare namespace parseError {\r\n  type ReturnType<\r\n    errorObject extends ErrorObject | unknown,\r\n    //\r\n    error = errorObject extends ErrorObject\r\n      ?\r\n          | (errorObject['code'] extends InternalError['code']\r\n              ? InternalError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? InternalError\r\n              : never)\r\n          | (errorObject['code'] extends InvalidInputError['code']\r\n              ? InvalidInputError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? InvalidInputError\r\n              : never)\r\n          | (errorObject['code'] extends ResourceNotFoundError['code']\r\n              ? ResourceNotFoundError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? ResourceNotFoundError\r\n              : never)\r\n          | (errorObject['code'] extends ResourceUnavailableError['code']\r\n              ? ResourceUnavailableError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? ResourceUnavailableError\r\n              : never)\r\n          | (errorObject['code'] extends TransactionRejectedError['code']\r\n              ? TransactionRejectedError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? TransactionRejectedError\r\n              : never)\r\n          | (errorObject['code'] extends ParseError['code']\r\n              ? ParseError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? ParseError\r\n              : never)\r\n          | (errorObject['code'] extends MethodNotSupportedError['code']\r\n              ? MethodNotSupportedError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? MethodNotSupportedError\r\n              : never)\r\n          | (errorObject['code'] extends LimitExceededError['code']\r\n              ? LimitExceededError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? LimitExceededError\r\n              : never)\r\n          | (errorObject['code'] extends VersionNotSupportedError['code']\r\n              ? VersionNotSupportedError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? VersionNotSupportedError\r\n              : never)\r\n          | (errorObject['code'] extends InvalidRequestError['code']\r\n              ? InvalidRequestError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? InvalidRequestError\r\n              : never)\r\n          | (errorObject['code'] extends MethodNotFoundError['code']\r\n              ? MethodNotFoundError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? MethodNotFoundError\r\n              : never)\r\n          | (errorObject['code'] extends InvalidParamsError['code']\r\n              ? InvalidParamsError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? InvalidParamsError\r\n              : never)\r\n          | (IsNarrowable<errorObject['code'], number> extends false\r\n              ? BaseError\r\n              : never)\r\n      : parseError.ReturnType<ErrorObject>,\r\n  > = IsNever<error> extends true ? BaseError : error\r\n}\r\n\r\nexport type BaseErrorType = BaseError & { name: 'BaseError' }\r\n\r\n/** Thrown when a JSON-RPC error has occurred. */\r\nexport class BaseError extends Error {\r\n  override name = 'RpcResponse.BaseError'\r\n\r\n  readonly code: number\r\n  readonly data?: unknown | undefined\r\n\r\n  constructor(errorObject: ErrorObject) {\r\n    const { code, message, data } = errorObject\r\n    super(message)\r\n    this.code = code\r\n    this.data = data\r\n  }\r\n}\r\n\r\n/** Thrown when the input to a JSON-RPC method is invalid. */\r\nexport class InvalidInputError extends BaseError {\r\n  static readonly code = -32000\r\n  override readonly code = -32000\r\n  override readonly name = 'RpcResponse.InvalidInputError'\r\n\r\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\r\n    super({\r\n      code: InvalidInputError.code,\r\n      data: parameters.data,\r\n      message: parameters.message ?? 'Missing or invalid parameters.',\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when a JSON-RPC resource is not found. */\r\nexport class ResourceNotFoundError extends BaseError {\r\n  static readonly code = -32001\r\n  override readonly code = -32001\r\n  override readonly name = 'RpcResponse.ResourceNotFoundError'\r\n\r\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\r\n    super({\r\n      code: ResourceNotFoundError.code,\r\n      data: parameters.data,\r\n      message: parameters.message ?? 'Requested resource not found.',\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when a JSON-RPC resource is unavailable. */\r\nexport class ResourceUnavailableError extends BaseError {\r\n  static readonly code = -32002\r\n  override readonly code = -32002\r\n  override readonly name = 'RpcResponse.ResourceUnavailableError'\r\n\r\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\r\n    super({\r\n      code: ResourceUnavailableError.code,\r\n      data: parameters.data,\r\n      message: parameters.message ?? 'Requested resource not available.',\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when a JSON-RPC transaction is rejected. */\r\nexport class TransactionRejectedError extends BaseError {\r\n  static readonly code = -32003\r\n  override readonly code = -32003\r\n  override readonly name = 'RpcResponse.TransactionRejectedError'\r\n\r\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\r\n    super({\r\n      code: TransactionRejectedError.code,\r\n      data: parameters.data,\r\n      message: parameters.message ?? 'Transaction creation failed.',\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when a JSON-RPC method is not supported. */\r\nexport class MethodNotSupportedError extends BaseError {\r\n  static readonly code = -32004\r\n  override readonly code = -32004\r\n  override readonly name = 'RpcResponse.MethodNotSupportedError'\r\n\r\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\r\n    super({\r\n      code: MethodNotSupportedError.code,\r\n      data: parameters.data,\r\n      message: parameters.message ?? 'Method is not implemented.',\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when a rate-limit is exceeded. */\r\nexport class LimitExceededError extends BaseError {\r\n  static readonly code = -32005\r\n  override readonly code = -32005\r\n  override readonly name = 'RpcResponse.LimitExceededError'\r\n\r\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\r\n    super({\r\n      code: LimitExceededError.code,\r\n      data: parameters.data,\r\n      message: parameters.message ?? 'Rate limit exceeded.',\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when a JSON-RPC version is not supported. */\r\nexport class VersionNotSupportedError extends BaseError {\r\n  static readonly code = -32006\r\n  override readonly code = -32006\r\n  override readonly name = 'RpcResponse.VersionNotSupportedError'\r\n\r\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\r\n    super({\r\n      code: VersionNotSupportedError.code,\r\n      data: parameters.data,\r\n      message: parameters.message ?? 'JSON-RPC version not supported.',\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when a JSON-RPC request is invalid. */\r\nexport class InvalidRequestError extends BaseError {\r\n  static readonly code = -32600\r\n  override readonly code = -32600\r\n  override readonly name = 'RpcResponse.InvalidRequestError'\r\n\r\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\r\n    super({\r\n      code: InvalidRequestError.code,\r\n      data: parameters.data,\r\n      message: parameters.message ?? 'Input is not a valid JSON-RPC request.',\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when a JSON-RPC method is not found. */\r\nexport class MethodNotFoundError extends BaseError {\r\n  static readonly code = -32601\r\n  override readonly code = -32601\r\n  override readonly name = 'RpcResponse.MethodNotFoundError'\r\n\r\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\r\n    super({\r\n      code: MethodNotFoundError.code,\r\n      data: parameters.data,\r\n      message: parameters.message ?? 'Method does not exist.',\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when the parameters to a JSON-RPC method are invalid. */\r\nexport class InvalidParamsError extends BaseError {\r\n  static readonly code = -32602\r\n  override readonly code = -32602\r\n  override readonly name = 'RpcResponse.InvalidParamsError'\r\n\r\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\r\n    super({\r\n      code: InvalidParamsError.code,\r\n      data: parameters.data,\r\n      message: parameters.message ?? 'Invalid method parameters.',\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when an internal JSON-RPC error has occurred. */\r\nexport class InternalError extends BaseError {\r\n  static readonly code = -32603\r\n  override readonly code = -32603\r\n  override readonly name = 'RpcResponse.InternalError'\r\n\r\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\r\n    super({\r\n      code: InternalError.code,\r\n      data: parameters.data,\r\n      message: parameters.message ?? 'Internal JSON-RPC error.',\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when a JSON-RPC response is invalid. */\r\nexport class ParseError extends BaseError {\r\n  static readonly code = -32700\r\n  override readonly code = -32700\r\n  override readonly name = 'RpcResponse.ParseError'\r\n\r\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\r\n    super({\r\n      code: ParseError.code,\r\n      data: parameters.data,\r\n      message: parameters.message ?? 'Failed to parse JSON-RPC response.',\r\n    })\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\nimport { BaseError } from '../../errors/base.js'\r\nimport type { Hex } from '../../types/misc.js'\r\n\r\nexport type AccountNotDeployedErrorType = AccountNotDeployedError & {\r\n  name: 'AccountNotDeployedError'\r\n}\r\nexport class AccountNotDeployedError extends BaseError {\r\n  static message = /aa20/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('Smart Account is not deployed.', {\r\n      cause,\r\n      metaMessages: [\r\n        'This could arise when:',\r\n        '- No `factory`/`factoryData` or `initCode` properties are provided for Smart Account deployment.',\r\n        '- An incorrect `sender` address is provided.',\r\n      ],\r\n      name: 'AccountNotDeployedError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type ExecutionRevertedErrorType = ExecutionRevertedError & {\r\n  code: -32521\r\n  name: 'ExecutionRevertedError'\r\n}\r\nexport class ExecutionRevertedError extends BaseError {\r\n  static code = -32521\r\n  static message = /execution reverted/\r\n\r\n  data?: { revertData?: Hex } | undefined\r\n\r\n  constructor({\r\n    cause,\r\n    data,\r\n    message,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n    data?: { revertData?: Hex } | undefined\r\n    message?: string | undefined\r\n  } = {}) {\r\n    const reason = message\r\n      ?.replace('execution reverted: ', '')\r\n      ?.replace('execution reverted', '')\r\n    super(\r\n      `Execution reverted ${\r\n        reason ? `with reason: ${reason}` : 'for an unknown reason'\r\n      }.`,\r\n      {\r\n        cause,\r\n        name: 'ExecutionRevertedError',\r\n      },\r\n    )\r\n\r\n    this.data = data\r\n  }\r\n}\r\n\r\nexport type FailedToSendToBeneficiaryErrorType =\r\n  FailedToSendToBeneficiaryError & {\r\n    name: 'FailedToSendToBeneficiaryError'\r\n  }\r\nexport class FailedToSendToBeneficiaryError extends BaseError {\r\n  static message = /aa91/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('Failed to send funds to beneficiary.', {\r\n      cause,\r\n      name: 'FailedToSendToBeneficiaryError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type GasValuesOverflowErrorType = GasValuesOverflowError & {\r\n  name: 'GasValuesOverflowError'\r\n}\r\nexport class GasValuesOverflowError extends BaseError {\r\n  static message = /aa94/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('Gas value overflowed.', {\r\n      cause,\r\n      metaMessages: [\r\n        'This could arise when:',\r\n        '- one of the gas values exceeded 2**120 (uint120)',\r\n      ].filter(Boolean) as string[],\r\n      name: 'GasValuesOverflowError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type HandleOpsOutOfGasErrorType = HandleOpsOutOfGasError & {\r\n  name: 'HandleOpsOutOfGasError'\r\n}\r\nexport class HandleOpsOutOfGasError extends BaseError {\r\n  static message = /aa95/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super(\r\n      'The `handleOps` function was called by the Bundler with a gas limit too low.',\r\n      {\r\n        cause,\r\n        name: 'HandleOpsOutOfGasError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type InitCodeFailedErrorType = InitCodeFailedError & {\r\n  name: 'InitCodeFailedError'\r\n}\r\nexport class InitCodeFailedError extends BaseError {\r\n  static message = /aa13/\r\n  constructor({\r\n    cause,\r\n    factory,\r\n    factoryData,\r\n    initCode,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n    factory?: Address | undefined\r\n    factoryData?: Hex | undefined\r\n    initCode?: Hex | undefined\r\n  }) {\r\n    super('Failed to simulate deployment for Smart Account.', {\r\n      cause,\r\n      metaMessages: [\r\n        'This could arise when:',\r\n        '- Invalid `factory`/`factoryData` or `initCode` properties are present',\r\n        '- Smart Account deployment execution ran out of gas (low `verificationGasLimit` value)',\r\n        '- Smart Account deployment execution reverted with an error\\n',\r\n        factory && `factory: ${factory}`,\r\n        factoryData && `factoryData: ${factoryData}`,\r\n        initCode && `initCode: ${initCode}`,\r\n      ].filter(Boolean) as string[],\r\n      name: 'InitCodeFailedError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type InitCodeMustCreateSenderErrorType =\r\n  InitCodeMustCreateSenderError & {\r\n    name: 'InitCodeMustCreateSenderError'\r\n  }\r\nexport class InitCodeMustCreateSenderError extends BaseError {\r\n  static message = /aa15/\r\n  constructor({\r\n    cause,\r\n    factory,\r\n    factoryData,\r\n    initCode,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n    factory?: Address | undefined\r\n    factoryData?: Hex | undefined\r\n    initCode?: Hex | undefined\r\n  }) {\r\n    super(\r\n      'Smart Account initialization implementation did not create an account.',\r\n      {\r\n        cause,\r\n        metaMessages: [\r\n          'This could arise when:',\r\n          '- `factory`/`factoryData` or `initCode` properties are invalid',\r\n          '- Smart Account initialization implementation is incorrect\\n',\r\n          factory && `factory: ${factory}`,\r\n          factoryData && `factoryData: ${factoryData}`,\r\n          initCode && `initCode: ${initCode}`,\r\n        ].filter(Boolean) as string[],\r\n        name: 'InitCodeMustCreateSenderError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type InitCodeMustReturnSenderErrorType =\r\n  InitCodeMustReturnSenderError & {\r\n    name: 'InitCodeMustReturnSenderError'\r\n  }\r\nexport class InitCodeMustReturnSenderError extends BaseError {\r\n  static message = /aa14/\r\n  constructor({\r\n    cause,\r\n    factory,\r\n    factoryData,\r\n    initCode,\r\n    sender,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n    factory?: Address | undefined\r\n    factoryData?: Hex | undefined\r\n    initCode?: Hex | undefined\r\n    sender?: Address | undefined\r\n  }) {\r\n    super(\r\n      'Smart Account initialization implementation does not return the expected sender.',\r\n      {\r\n        cause,\r\n        metaMessages: [\r\n          'This could arise when:',\r\n          'Smart Account initialization implementation does not return a sender address\\n',\r\n          factory && `factory: ${factory}`,\r\n          factoryData && `factoryData: ${factoryData}`,\r\n          initCode && `initCode: ${initCode}`,\r\n          sender && `sender: ${sender}`,\r\n        ].filter(Boolean) as string[],\r\n        name: 'InitCodeMustReturnSenderError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type InsufficientPrefundErrorType = InsufficientPrefundError & {\r\n  name: 'InsufficientPrefundError'\r\n}\r\nexport class InsufficientPrefundError extends BaseError {\r\n  static message = /aa21/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super(\r\n      'Smart Account does not have sufficient funds to execute the User Operation.',\r\n      {\r\n        cause,\r\n        metaMessages: [\r\n          'This could arise when:',\r\n          '- the Smart Account does not have sufficient funds to cover the required prefund, or',\r\n          '- a Paymaster was not provided',\r\n        ].filter(Boolean) as string[],\r\n        name: 'InsufficientPrefundError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type InternalCallOnlyErrorType = InternalCallOnlyError & {\r\n  name: 'InternalCallOnlyError'\r\n}\r\nexport class InternalCallOnlyError extends BaseError {\r\n  static message = /aa92/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('Bundler attempted to call an invalid function on the EntryPoint.', {\r\n      cause,\r\n      name: 'InternalCallOnlyError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type InvalidAggregatorErrorType = InvalidAggregatorError & {\r\n  name: 'InvalidAggregatorError'\r\n}\r\nexport class InvalidAggregatorError extends BaseError {\r\n  static message = /aa96/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super(\r\n      'Bundler used an invalid aggregator for handling aggregated User Operations.',\r\n      {\r\n        cause,\r\n        name: 'InvalidAggregatorError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type InvalidAccountNonceErrorType = InvalidAccountNonceError & {\r\n  name: 'InvalidAccountNonceError'\r\n}\r\nexport class InvalidAccountNonceError extends BaseError {\r\n  static message = /aa25/\r\n  constructor({\r\n    cause,\r\n    nonce,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n    nonce?: bigint | undefined\r\n  }) {\r\n    super('Invalid Smart Account nonce used for User Operation.', {\r\n      cause,\r\n      metaMessages: [nonce && `nonce: ${nonce}`].filter(Boolean) as string[],\r\n      name: 'InvalidAccountNonceError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type InvalidBeneficiaryErrorType = InvalidBeneficiaryError & {\r\n  name: 'InvalidBeneficiaryError'\r\n}\r\nexport class InvalidBeneficiaryError extends BaseError {\r\n  static message = /aa90/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('Bundler has not set a beneficiary address.', {\r\n      cause,\r\n      name: 'InvalidBeneficiaryError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type InvalidFieldsErrorType = InvalidFieldsError & {\r\n  name: 'InvalidFieldsError'\r\n}\r\nexport class InvalidFieldsError extends BaseError {\r\n  static code = -32602\r\n\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('Invalid fields set on User Operation.', {\r\n      cause,\r\n      name: 'InvalidFieldsError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type InvalidPaymasterAndDataErrorType = InvalidPaymasterAndDataError & {\r\n  name: 'InvalidPaymasterAndDataError'\r\n}\r\nexport class InvalidPaymasterAndDataError extends BaseError {\r\n  static message = /aa93/\r\n  constructor({\r\n    cause,\r\n    paymasterAndData,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n    paymasterAndData?: Hex | undefined\r\n  }) {\r\n    super('Paymaster properties provided are invalid.', {\r\n      cause,\r\n      metaMessages: [\r\n        'This could arise when:',\r\n        '- the `paymasterAndData` property is of an incorrect length\\n',\r\n        paymasterAndData && `paymasterAndData: ${paymasterAndData}`,\r\n      ].filter(Boolean) as string[],\r\n      name: 'InvalidPaymasterAndDataError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type PaymasterDepositTooLowErrorType = PaymasterDepositTooLowError & {\r\n  code: -32508\r\n  name: 'PaymasterDepositTooLowError'\r\n}\r\nexport class PaymasterDepositTooLowError extends BaseError {\r\n  static code = -32508\r\n  static message = /aa31/\r\n\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('Paymaster deposit for the User Operation is too low.', {\r\n      cause,\r\n      metaMessages: [\r\n        'This could arise when:',\r\n        '- the Paymaster has deposited less than the expected amount via the `deposit` function',\r\n      ].filter(Boolean) as string[],\r\n      name: 'PaymasterDepositTooLowError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type PaymasterFunctionRevertedErrorType =\r\n  PaymasterFunctionRevertedError & {\r\n    name: 'PaymasterFunctionRevertedError'\r\n  }\r\nexport class PaymasterFunctionRevertedError extends BaseError {\r\n  static message = /aa33/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('The `validatePaymasterUserOp` function on the Paymaster reverted.', {\r\n      cause,\r\n      name: 'PaymasterFunctionRevertedError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type PaymasterNotDeployedErrorType = PaymasterNotDeployedError & {\r\n  name: 'PaymasterNotDeployedError'\r\n}\r\nexport class PaymasterNotDeployedError extends BaseError {\r\n  static message = /aa30/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('The Paymaster contract has not been deployed.', {\r\n      cause,\r\n      name: 'PaymasterNotDeployedError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type PaymasterRateLimitErrorType = PaymasterRateLimitError & {\r\n  code: -32504\r\n  name: 'PaymasterRateLimitError'\r\n}\r\nexport class PaymasterRateLimitError extends BaseError {\r\n  static code = -32504\r\n\r\n  constructor({ cause }: { cause?: BaseError | undefined }) {\r\n    super(\r\n      'UserOperation rejected because paymaster (or signature aggregator) is throttled/banned.',\r\n      {\r\n        cause,\r\n        name: 'PaymasterRateLimitError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type PaymasterStakeTooLowErrorType = PaymasterStakeTooLowError & {\r\n  code: -32505\r\n  name: 'PaymasterStakeTooLowError'\r\n}\r\nexport class PaymasterStakeTooLowError extends BaseError {\r\n  static code = -32505\r\n\r\n  constructor({ cause }: { cause?: BaseError | undefined }) {\r\n    super(\r\n      'UserOperation rejected because paymaster (or signature aggregator) is throttled/banned.',\r\n      {\r\n        cause,\r\n        name: 'PaymasterStakeTooLowError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type PaymasterPostOpFunctionRevertedErrorType =\r\n  PaymasterPostOpFunctionRevertedError & {\r\n    name: 'PaymasterPostOpFunctionRevertedError'\r\n  }\r\nexport class PaymasterPostOpFunctionRevertedError extends BaseError {\r\n  static message = /aa50/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('Paymaster `postOp` function reverted.', {\r\n      cause,\r\n      name: 'PaymasterPostOpFunctionRevertedError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type SenderAlreadyConstructedErrorType =\r\n  SenderAlreadyConstructedError & {\r\n    name: 'SenderAlreadyConstructedError'\r\n  }\r\nexport class SenderAlreadyConstructedError extends BaseError {\r\n  static message = /aa10/\r\n  constructor({\r\n    cause,\r\n    factory,\r\n    factoryData,\r\n    initCode,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n    factory?: Address | undefined\r\n    factoryData?: Hex | undefined\r\n    initCode?: Hex | undefined\r\n  }) {\r\n    super('Smart Account has already been deployed.', {\r\n      cause,\r\n      metaMessages: [\r\n        'Remove the following properties and try again:',\r\n        factory && '`factory`',\r\n        factoryData && '`factoryData`',\r\n        initCode && '`initCode`',\r\n      ].filter(Boolean) as string[],\r\n      name: 'SenderAlreadyConstructedError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type SignatureCheckFailedErrorType = SignatureCheckFailedError & {\r\n  code: -32507\r\n  name: 'SignatureCheckFailedError'\r\n}\r\nexport class SignatureCheckFailedError extends BaseError {\r\n  static code = -32507\r\n\r\n  constructor({ cause }: { cause?: BaseError | undefined }) {\r\n    super(\r\n      'UserOperation rejected because account signature check failed (or paymaster signature, if the paymaster uses its data as signature).',\r\n      {\r\n        cause,\r\n        name: 'SignatureCheckFailedError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type SmartAccountFunctionRevertedErrorType =\r\n  SmartAccountFunctionRevertedError & {\r\n    name: 'SmartAccountFunctionRevertedError'\r\n  }\r\nexport class SmartAccountFunctionRevertedError extends BaseError {\r\n  static message = /aa23/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('The `validateUserOp` function on the Smart Account reverted.', {\r\n      cause,\r\n      name: 'SmartAccountFunctionRevertedError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type UnsupportedSignatureAggregatorErrorType =\r\n  UnsupportedSignatureAggregatorError & {\r\n    code: -32506\r\n    name: 'UnsupportedSignatureAggregatorError'\r\n  }\r\nexport class UnsupportedSignatureAggregatorError extends BaseError {\r\n  static code = -32506\r\n\r\n  constructor({ cause }: { cause?: BaseError | undefined }) {\r\n    super(\r\n      'UserOperation rejected because account specified unsupported signature aggregator.',\r\n      {\r\n        cause,\r\n        name: 'UnsupportedSignatureAggregatorError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type UserOperationExpiredErrorType = UserOperationExpiredError & {\r\n  name: 'UserOperationExpiredError'\r\n}\r\nexport class UserOperationExpiredError extends BaseError {\r\n  static message = /aa22/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('User Operation expired.', {\r\n      cause,\r\n      metaMessages: [\r\n        'This could arise when:',\r\n        '- the `validAfter` or `validUntil` values returned from `validateUserOp` on the Smart Account are not satisfied',\r\n      ].filter(Boolean) as string[],\r\n      name: 'UserOperationExpiredError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type UserOperationPaymasterExpiredErrorType =\r\n  UserOperationPaymasterExpiredError & {\r\n    name: 'UserOperationPaymasterExpiredError'\r\n  }\r\nexport class UserOperationPaymasterExpiredError extends BaseError {\r\n  static message = /aa32/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('Paymaster for User Operation expired.', {\r\n      cause,\r\n      metaMessages: [\r\n        'This could arise when:',\r\n        '- the `validAfter` or `validUntil` values returned from `validatePaymasterUserOp` on the Paymaster are not satisfied',\r\n      ].filter(Boolean) as string[],\r\n      name: 'UserOperationPaymasterExpiredError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type UserOperationSignatureErrorType = UserOperationSignatureError & {\r\n  name: 'UserOperationSignatureError'\r\n}\r\nexport class UserOperationSignatureError extends BaseError {\r\n  static message = /aa24/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('Signature provided for the User Operation is invalid.', {\r\n      cause,\r\n      metaMessages: [\r\n        'This could arise when:',\r\n        '- the `signature` for the User Operation is incorrectly computed, and unable to be verified by the Smart Account',\r\n      ].filter(Boolean) as string[],\r\n      name: 'UserOperationSignatureError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type UserOperationPaymasterSignatureErrorType =\r\n  UserOperationPaymasterSignatureError & {\r\n    name: 'UserOperationPaymasterSignatureError'\r\n  }\r\nexport class UserOperationPaymasterSignatureError extends BaseError {\r\n  static message = /aa34/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('Signature provided for the User Operation is invalid.', {\r\n      cause,\r\n      metaMessages: [\r\n        'This could arise when:',\r\n        '- the `signature` for the User Operation is incorrectly computed, and unable to be verified by the Paymaster',\r\n      ].filter(Boolean) as string[],\r\n      name: 'UserOperationPaymasterSignatureError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type UserOperationRejectedByEntryPointErrorType =\r\n  UserOperationRejectedByEntryPointError & {\r\n    code: -32500\r\n    name: 'UserOperationRejectedByEntryPointError'\r\n  }\r\nexport class UserOperationRejectedByEntryPointError extends BaseError {\r\n  static code = -32500\r\n\r\n  constructor({ cause }: { cause?: BaseError | undefined }) {\r\n    super(\r\n      \"User Operation rejected by EntryPoint's `simulateValidation` during account creation or validation.\",\r\n      {\r\n        cause,\r\n        name: 'UserOperationRejectedByEntryPointError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type UserOperationRejectedByPaymasterErrorType =\r\n  UserOperationRejectedByPaymasterError & {\r\n    code: -32501\r\n    name: 'UserOperationRejectedByPaymasterError'\r\n  }\r\nexport class UserOperationRejectedByPaymasterError extends BaseError {\r\n  static code = -32501\r\n\r\n  constructor({ cause }: { cause?: BaseError | undefined }) {\r\n    super(\"User Operation rejected by Paymaster's `validatePaymasterUserOp`.\", {\r\n      cause,\r\n      name: 'UserOperationRejectedByPaymasterError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type UserOperationRejectedByOpCodeErrorType =\r\n  UserOperationRejectedByOpCodeError & {\r\n    code: -32502\r\n    name: 'UserOperationRejectedByOpCodeError'\r\n  }\r\nexport class UserOperationRejectedByOpCodeError extends BaseError {\r\n  static code = -32502\r\n\r\n  constructor({ cause }: { cause?: BaseError | undefined }) {\r\n    super('User Operation rejected with op code validation error.', {\r\n      cause,\r\n      name: 'UserOperationRejectedByOpCodeError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type UserOperationOutOfTimeRangeErrorType =\r\n  UserOperationOutOfTimeRangeError & {\r\n    code: -32503\r\n    name: 'UserOperationOutOfTimeRangeError'\r\n  }\r\nexport class UserOperationOutOfTimeRangeError extends BaseError {\r\n  static code = -32503\r\n\r\n  constructor({ cause }: { cause?: BaseError | undefined }) {\r\n    super(\r\n      'UserOperation out of time-range: either wallet or paymaster returned a time-range, and it is already expired (or will expire soon).',\r\n      {\r\n        cause,\r\n        name: 'UserOperationOutOfTimeRangeError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type UnknownBundlerErrorType = UnknownBundlerError & {\r\n  name: 'UnknownBundlerError'\r\n}\r\nexport class UnknownBundlerError extends BaseError {\r\n  constructor({ cause }: { cause?: BaseError | undefined }) {\r\n    super(\r\n      `An error occurred while executing user operation: ${cause?.shortMessage}`,\r\n      {\r\n        cause,\r\n        name: 'UnknownBundlerError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type VerificationGasLimitExceededErrorType =\r\n  VerificationGasLimitExceededError & {\r\n    name: 'VerificationGasLimitExceededError'\r\n  }\r\nexport class VerificationGasLimitExceededError extends BaseError {\r\n  static message = /aa40/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('User Operation verification gas limit exceeded.', {\r\n      cause,\r\n      metaMessages: [\r\n        'This could arise when:',\r\n        '- the gas used for verification exceeded the `verificationGasLimit`',\r\n      ].filter(Boolean) as string[],\r\n      name: 'VerificationGasLimitExceededError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type VerificationGasLimitTooLowErrorType =\r\n  VerificationGasLimitTooLowError & {\r\n    name: 'VerificationGasLimitTooLowError'\r\n  }\r\nexport class VerificationGasLimitTooLowError extends BaseError {\r\n  static message = /aa41/\r\n  constructor({\r\n    cause,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n  }) {\r\n    super('User Operation verification gas limit is too low.', {\r\n      cause,\r\n      metaMessages: [\r\n        'This could arise when:',\r\n        '- the `verificationGasLimit` is too low to verify the User Operation',\r\n      ].filter(Boolean) as string[],\r\n      name: 'VerificationGasLimitTooLowError',\r\n    })\r\n  }\r\n}\r\n", "import { BaseError } from '../../errors/base.js'\r\nimport { prettyPrint } from '../../errors/transaction.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport { formatGwei } from '../../utils/index.js'\r\nimport type { UserOperation } from '../types/userOperation.js'\r\n\r\nexport type UserOperationExecutionErrorType = UserOperationExecutionError & {\r\n  name: 'UserOperationExecutionError'\r\n}\r\nexport class UserOperationExecutionError extends BaseError {\r\n  override cause: BaseError\r\n\r\n  constructor(\r\n    cause: BaseError,\r\n    {\r\n      callData,\r\n      callGasLimit,\r\n      docsPath,\r\n      factory,\r\n      factoryData,\r\n      initCode,\r\n      maxFeePerGas,\r\n      maxPriorityFeePerGas,\r\n      nonce,\r\n      paymaster,\r\n      paymasterAndData,\r\n      paymasterData,\r\n      paymasterPostOpGasLimit,\r\n      paymasterVerificationGasLimit,\r\n      preVerificationGas,\r\n      sender,\r\n      signature,\r\n      verificationGasLimit,\r\n    }: UserOperation & {\r\n      docsPath?: string | undefined\r\n    },\r\n  ) {\r\n    const prettyArgs = prettyPrint({\r\n      callData,\r\n      callGasLimit,\r\n      factory,\r\n      factoryData,\r\n      initCode,\r\n      maxFeePerGas:\r\n        typeof maxFeePerGas !== 'undefined' &&\r\n        `${formatGwei(maxFeePerGas)} gwei`,\r\n      maxPriorityFeePerGas:\r\n        typeof maxPriorityFeePerGas !== 'undefined' &&\r\n        `${formatGwei(maxPriorityFeePerGas)} gwei`,\r\n      nonce,\r\n      paymaster,\r\n      paymasterAndData,\r\n      paymasterData,\r\n      paymasterPostOpGasLimit,\r\n      paymasterVerificationGasLimit,\r\n      preVerificationGas,\r\n      sender,\r\n      signature,\r\n      verificationGasLimit,\r\n    })\r\n\r\n    super(cause.shortMessage, {\r\n      cause,\r\n      docsPath,\r\n      metaMessages: [\r\n        ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\r\n        'Request Arguments:',\r\n        prettyArgs,\r\n      ].filter(Boolean) as string[],\r\n      name: 'UserOperationExecutionError',\r\n    })\r\n    this.cause = cause\r\n  }\r\n}\r\n\r\nexport type UserOperationReceiptNotFoundErrorType =\r\n  UserOperationReceiptNotFoundError & {\r\n    name: 'UserOperationReceiptNotFoundError'\r\n  }\r\nexport class UserOperationReceiptNotFoundError extends BaseError {\r\n  constructor({ hash }: { hash: Hash }) {\r\n    super(\r\n      `User Operation receipt with hash \"${hash}\" could not be found. The User Operation may not have been processed yet.`,\r\n      { name: 'UserOperationReceiptNotFoundError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type UserOperationNotFoundErrorType = UserOperationNotFoundError & {\r\n  name: 'UserOperationNotFoundError'\r\n}\r\nexport class UserOperationNotFoundError extends BaseError {\r\n  constructor({ hash }: { hash: Hash }) {\r\n    super(`User Operation with hash \"${hash}\" could not be found.`, {\r\n      name: 'UserOperationNotFoundError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type WaitForUserOperationReceiptTimeoutErrorType =\r\n  WaitForUserOperationReceiptTimeoutError & {\r\n    name: 'WaitForUserOperationReceiptTimeoutError'\r\n  }\r\nexport class WaitForUserOperationReceiptTimeoutError extends BaseError {\r\n  constructor({ hash }: { hash: Hash }) {\r\n    super(\r\n      `Timed out while waiting for User Operation with hash \"${hash}\" to be confirmed.`,\r\n      { name: 'WaitForUserOperationReceiptTimeoutError' },\r\n    )\r\n  }\r\n}\r\n", "import type { BaseError } from '../../../errors/base.js'\r\nimport type { ExactPartial } from '../../../types/utils.js'\r\nimport {\r\n  AccountNotDeployedError,\r\n  type AccountNotDeployedErrorType,\r\n  ExecutionRevertedError,\r\n  type ExecutionRevertedErrorType,\r\n  FailedToSendToBeneficiaryError,\r\n  type FailedToSendToBeneficiaryErrorType,\r\n  GasValuesOverflowError,\r\n  type GasValuesOverflowErrorType,\r\n  HandleOpsOutOfGasError,\r\n  type HandleOpsOutOfGasErrorType,\r\n  InitCodeFailedError,\r\n  type InitCodeFailedErrorType,\r\n  InitCodeMustCreateSenderError,\r\n  type InitCodeMustCreateSenderErrorType,\r\n  InitCodeMustReturnSenderError,\r\n  type InitCodeMustReturnSenderErrorType,\r\n  InsufficientPrefundError,\r\n  type InsufficientPrefundErrorType,\r\n  InternalCallOnlyError,\r\n  type InternalCallOnlyErrorType,\r\n  InvalidAccountNonceError,\r\n  type InvalidAccountNonceErrorType,\r\n  InvalidAggregatorError,\r\n  type InvalidAggregatorErrorType,\r\n  InvalidBeneficiaryError,\r\n  type InvalidBeneficiaryErrorType,\r\n  InvalidFieldsError,\r\n  type InvalidFieldsErrorType,\r\n  InvalidPaymasterAndDataError,\r\n  type InvalidPaymasterAndDataErrorType,\r\n  PaymasterDepositTooLowError,\r\n  type PaymasterDepositTooLowErrorType,\r\n  PaymasterFunctionRevertedError,\r\n  type PaymasterFunctionRevertedErrorType,\r\n  PaymasterNotDeployedError,\r\n  type PaymasterNotDeployedErrorType,\r\n  PaymasterPostOpFunctionRevertedError,\r\n  type PaymasterPostOpFunctionRevertedErrorType,\r\n  PaymasterRateLimitError,\r\n  type PaymasterRateLimitErrorType,\r\n  PaymasterStakeTooLowError,\r\n  type PaymasterStakeTooLowErrorType,\r\n  SenderAlreadyConstructedError,\r\n  type SenderAlreadyConstructedErrorType,\r\n  SignatureCheckFailedError,\r\n  type SignatureCheckFailedErrorType,\r\n  SmartAccountFunctionRevertedError,\r\n  type SmartAccountFunctionRevertedErrorType,\r\n  UnknownBundlerError,\r\n  type UnknownBundlerErrorType,\r\n  UnsupportedSignatureAggregatorError,\r\n  type UnsupportedSignatureAggregatorErrorType,\r\n  UserOperationExpiredError,\r\n  type UserOperationExpiredErrorType,\r\n  UserOperationOutOfTimeRangeError,\r\n  type UserOperationOutOfTimeRangeErrorType,\r\n  UserOperationPaymasterExpiredError,\r\n  type UserOperationPaymasterExpiredErrorType,\r\n  UserOperationPaymasterSignatureError,\r\n  type UserOperationPaymasterSignatureErrorType,\r\n  UserOperationRejectedByEntryPointError,\r\n  type UserOperationRejectedByEntryPointErrorType,\r\n  UserOperationRejectedByOpCodeError,\r\n  type UserOperationRejectedByOpCodeErrorType,\r\n  UserOperationRejectedByPaymasterError,\r\n  type UserOperationRejectedByPaymasterErrorType,\r\n  UserOperationSignatureError,\r\n  type UserOperationSignatureErrorType,\r\n  VerificationGasLimitExceededError,\r\n  type VerificationGasLimitExceededErrorType,\r\n  VerificationGasLimitTooLowError,\r\n  type VerificationGasLimitTooLowErrorType,\r\n} from '../../errors/bundler.js'\r\nimport type { UserOperation } from '../../types/userOperation.js'\r\n\r\nconst bundlerErrors = [\r\n  ExecutionRevertedError,\r\n  InvalidFieldsError,\r\n  PaymasterDepositTooLowError,\r\n  PaymasterRateLimitError,\r\n  PaymasterStakeTooLowError,\r\n  SignatureCheckFailedError,\r\n  UnsupportedSignatureAggregatorError,\r\n  UserOperationOutOfTimeRangeError,\r\n  UserOperationRejectedByEntryPointError,\r\n  UserOperationRejectedByPaymasterError,\r\n  UserOperationRejectedByOpCodeError,\r\n]\r\n\r\nexport type GetBundlerErrorParameters = ExactPartial<UserOperation>\r\n\r\nexport type GetBundlerErrorReturnType =\r\n  | AccountNotDeployedErrorType\r\n  | ExecutionRevertedErrorType\r\n  | FailedToSendToBeneficiaryErrorType\r\n  | GasValuesOverflowErrorType\r\n  | HandleOpsOutOfGasErrorType\r\n  | InitCodeFailedErrorType\r\n  | InitCodeMustCreateSenderErrorType\r\n  | InitCodeMustReturnSenderErrorType\r\n  | InsufficientPrefundErrorType\r\n  | InternalCallOnlyErrorType\r\n  | InvalidAccountNonceErrorType\r\n  | InvalidAggregatorErrorType\r\n  | InvalidBeneficiaryErrorType\r\n  | InvalidFieldsErrorType\r\n  | InvalidPaymasterAndDataErrorType\r\n  | PaymasterDepositTooLowErrorType\r\n  | PaymasterFunctionRevertedErrorType\r\n  | PaymasterNotDeployedErrorType\r\n  | PaymasterPostOpFunctionRevertedErrorType\r\n  | PaymasterRateLimitErrorType\r\n  | PaymasterStakeTooLowErrorType\r\n  | SignatureCheckFailedErrorType\r\n  | SenderAlreadyConstructedErrorType\r\n  | SmartAccountFunctionRevertedErrorType\r\n  | UnsupportedSignatureAggregatorErrorType\r\n  | UserOperationOutOfTimeRangeErrorType\r\n  | UserOperationRejectedByEntryPointErrorType\r\n  | UserOperationRejectedByOpCodeErrorType\r\n  | UserOperationRejectedByPaymasterErrorType\r\n  | UnknownBundlerErrorType\r\n  | UserOperationExpiredErrorType\r\n  | UserOperationPaymasterExpiredErrorType\r\n  | UserOperationPaymasterSignatureErrorType\r\n  | UserOperationSignatureErrorType\r\n  | VerificationGasLimitExceededErrorType\r\n  | VerificationGasLimitTooLowErrorType\r\n\r\nexport function getBundlerError(\r\n  err: BaseError,\r\n  args: GetBundlerErrorParameters,\r\n): GetBundlerErrorReturnType {\r\n  const message = (err.details || '').toLowerCase()\r\n\r\n  if (AccountNotDeployedError.message.test(message))\r\n    return new AccountNotDeployedError({\r\n      cause: err,\r\n    }) as any\r\n  if (FailedToSendToBeneficiaryError.message.test(message))\r\n    return new FailedToSendToBeneficiaryError({\r\n      cause: err,\r\n    }) as any\r\n  if (GasValuesOverflowError.message.test(message))\r\n    return new GasValuesOverflowError({\r\n      cause: err,\r\n    }) as any\r\n  if (HandleOpsOutOfGasError.message.test(message))\r\n    return new HandleOpsOutOfGasError({\r\n      cause: err,\r\n    }) as any\r\n  if (InitCodeFailedError.message.test(message))\r\n    return new InitCodeFailedError({\r\n      cause: err,\r\n      factory: args.factory,\r\n      factoryData: args.factoryData,\r\n      initCode: args.initCode,\r\n    }) as any\r\n  if (InitCodeMustCreateSenderError.message.test(message))\r\n    return new InitCodeMustCreateSenderError({\r\n      cause: err,\r\n      factory: args.factory,\r\n      factoryData: args.factoryData,\r\n      initCode: args.initCode,\r\n    }) as any\r\n  if (InitCodeMustReturnSenderError.message.test(message))\r\n    return new InitCodeMustReturnSenderError({\r\n      cause: err,\r\n      factory: args.factory,\r\n      factoryData: args.factoryData,\r\n      initCode: args.initCode,\r\n      sender: args.sender,\r\n    }) as any\r\n  if (InsufficientPrefundError.message.test(message))\r\n    return new InsufficientPrefundError({\r\n      cause: err,\r\n    }) as any\r\n  if (InternalCallOnlyError.message.test(message))\r\n    return new InternalCallOnlyError({\r\n      cause: err,\r\n    }) as any\r\n  if (InvalidAccountNonceError.message.test(message))\r\n    return new InvalidAccountNonceError({\r\n      cause: err,\r\n      nonce: args.nonce,\r\n    }) as any\r\n  if (InvalidAggregatorError.message.test(message))\r\n    return new InvalidAggregatorError({\r\n      cause: err,\r\n    }) as any\r\n  if (InvalidBeneficiaryError.message.test(message))\r\n    return new InvalidBeneficiaryError({\r\n      cause: err,\r\n    }) as any\r\n  if (InvalidPaymasterAndDataError.message.test(message))\r\n    return new InvalidPaymasterAndDataError({\r\n      cause: err,\r\n    }) as any\r\n  if (PaymasterDepositTooLowError.message.test(message))\r\n    return new PaymasterDepositTooLowError({\r\n      cause: err,\r\n    }) as any\r\n  if (PaymasterFunctionRevertedError.message.test(message))\r\n    return new PaymasterFunctionRevertedError({\r\n      cause: err,\r\n    }) as any\r\n  if (PaymasterNotDeployedError.message.test(message))\r\n    return new PaymasterNotDeployedError({\r\n      cause: err,\r\n    }) as any\r\n  if (PaymasterPostOpFunctionRevertedError.message.test(message))\r\n    return new PaymasterPostOpFunctionRevertedError({\r\n      cause: err,\r\n    }) as any\r\n  if (SmartAccountFunctionRevertedError.message.test(message))\r\n    return new SmartAccountFunctionRevertedError({\r\n      cause: err,\r\n    }) as any\r\n  if (SenderAlreadyConstructedError.message.test(message))\r\n    return new SenderAlreadyConstructedError({\r\n      cause: err,\r\n      factory: args.factory,\r\n      factoryData: args.factoryData,\r\n      initCode: args.initCode,\r\n    }) as any\r\n  if (UserOperationExpiredError.message.test(message))\r\n    return new UserOperationExpiredError({\r\n      cause: err,\r\n    }) as any\r\n  if (UserOperationPaymasterExpiredError.message.test(message))\r\n    return new UserOperationPaymasterExpiredError({\r\n      cause: err,\r\n    }) as any\r\n  if (UserOperationPaymasterSignatureError.message.test(message))\r\n    return new UserOperationPaymasterSignatureError({\r\n      cause: err,\r\n    }) as any\r\n  if (UserOperationSignatureError.message.test(message))\r\n    return new UserOperationSignatureError({\r\n      cause: err,\r\n    }) as any\r\n  if (VerificationGasLimitExceededError.message.test(message))\r\n    return new VerificationGasLimitExceededError({\r\n      cause: err,\r\n    }) as any\r\n  if (VerificationGasLimitTooLowError.message.test(message))\r\n    return new VerificationGasLimitTooLowError({\r\n      cause: err,\r\n    }) as any\r\n\r\n  const error = err.walk((e) =>\r\n    bundlerErrors.some((error) => error.code === (e as { code: number }).code),\r\n  ) as BaseError & { code: number; data: any }\r\n\r\n  if (error) {\r\n    if (error.code === ExecutionRevertedError.code)\r\n      return new ExecutionRevertedError({\r\n        cause: err,\r\n        data: error.data,\r\n        message: error.details,\r\n      }) as any\r\n    if (error.code === InvalidFieldsError.code)\r\n      return new InvalidFieldsError({\r\n        cause: err,\r\n      }) as any\r\n    if (error.code === PaymasterDepositTooLowError.code)\r\n      return new PaymasterDepositTooLowError({\r\n        cause: err,\r\n      }) as any\r\n    if (error.code === PaymasterRateLimitError.code)\r\n      return new PaymasterRateLimitError({\r\n        cause: err,\r\n      }) as any\r\n    if (error.code === PaymasterStakeTooLowError.code)\r\n      return new PaymasterStakeTooLowError({\r\n        cause: err,\r\n      }) as any\r\n    if (error.code === SignatureCheckFailedError.code)\r\n      return new SignatureCheckFailedError({\r\n        cause: err,\r\n      }) as any\r\n    if (error.code === UnsupportedSignatureAggregatorError.code)\r\n      return new UnsupportedSignatureAggregatorError({\r\n        cause: err,\r\n      }) as any\r\n    if (error.code === UserOperationOutOfTimeRangeError.code)\r\n      return new UserOperationOutOfTimeRangeError({\r\n        cause: err,\r\n      }) as any\r\n    if (error.code === UserOperationRejectedByEntryPointError.code)\r\n      return new UserOperationRejectedByEntryPointError({\r\n        cause: err,\r\n      }) as any\r\n    if (error.code === UserOperationRejectedByPaymasterError.code)\r\n      return new UserOperationRejectedByPaymasterError({\r\n        cause: err,\r\n      }) as any\r\n    if (error.code === UserOperationRejectedByOpCodeError.code)\r\n      return new UserOperationRejectedByOpCodeError({\r\n        cause: err,\r\n      }) as any\r\n  }\r\n\r\n  return new UnknownBundlerError({\r\n    cause: err,\r\n  }) as any\r\n}\r\n", "import type { Abi, Address } from 'abitype'\r\nimport { BaseError } from '../../../errors/base.js'\r\nimport {\r\n  ContractFunctionExecutionError,\r\n  ContractFunctionRevertedError,\r\n  ContractFunctionZeroDataError,\r\n} from '../../../errors/contract.js'\r\nimport type { ErrorType } from '../../../errors/utils.js'\r\nimport type { Call } from '../../../types/calls.js'\r\nimport type { Hex } from '../../../types/misc.js'\r\nimport { decodeErrorResult } from '../../../utils/abi/decodeErrorResult.js'\r\nimport type { GetContractErrorReturnType } from '../../../utils/errors/getContractError.js'\r\nimport { ExecutionRevertedError } from '../../errors/bundler.js'\r\nimport {\r\n  UserOperationExecutionError,\r\n  type UserOperationExecutionErrorType,\r\n} from '../../errors/userOperation.js'\r\nimport type { UserOperation } from '../../types/userOperation.js'\r\nimport {\r\n  type GetBundlerErrorParameters,\r\n  getBundlerError,\r\n} from './getBundlerError.js'\r\n\r\ntype GetNodeErrorReturnType = ErrorType\r\n\r\nexport type GetUserOperationErrorParameters = UserOperation & {\r\n  calls?: readonly unknown[] | undefined\r\n  docsPath?: string | undefined\r\n}\r\n\r\nexport type GetUserOperationErrorReturnType<cause = ErrorType> = Omit<\r\n  UserOperationExecutionErrorType,\r\n  'cause'\r\n> & { cause: cause | GetNodeErrorReturnType }\r\n\r\nexport type GetUserOperationErrorErrorType = ErrorType\r\n\r\nexport function getUserOperationError<err extends ErrorType<string>>(\r\n  err: err,\r\n  { calls, docsPath, ...args }: GetUserOperationErrorParameters,\r\n): GetUserOperationErrorReturnType<err> {\r\n  const cause = (() => {\r\n    const cause = getBundlerError(\r\n      err as {} as BaseError,\r\n      args as GetBundlerErrorParameters,\r\n    )\r\n    if (calls && cause instanceof ExecutionRevertedError) {\r\n      const revertData = getRevertData(cause)\r\n      const contractCalls = calls?.filter(\r\n        (call: any) => call.abi,\r\n      ) as readonly Call[]\r\n      if (revertData && contractCalls.length > 0)\r\n        return getContractError({ calls: contractCalls, revertData })\r\n    }\r\n    return cause\r\n  })()\r\n  return new UserOperationExecutionError(cause, {\r\n    docsPath,\r\n    ...args,\r\n  }) as GetUserOperationErrorReturnType<err>\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction getRevertData(error: BaseError) {\r\n  let revertData: Hex | undefined\r\n  error.walk((e) => {\r\n    const error = e as any\r\n    if (\r\n      typeof error.data === 'string' ||\r\n      typeof error.data?.revertData === 'string' ||\r\n      (!(error instanceof BaseError) && typeof error.message === 'string')\r\n    ) {\r\n      const match = (\r\n        error.data?.revertData ||\r\n        error.data ||\r\n        error.message\r\n      ).match?.(/(0x[A-Za-z0-9]*)/)\r\n      if (match) {\r\n        revertData = match[1]\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  })\r\n  return revertData\r\n}\r\n\r\nfunction getContractError(parameters: {\r\n  calls: readonly Call[]\r\n  revertData: Hex\r\n}) {\r\n  const { calls, revertData } = parameters\r\n\r\n  const { abi, functionName, args, to } = (() => {\r\n    const contractCalls = calls?.filter((call) =>\r\n      Boolean(call.abi),\r\n    ) as readonly Call[]\r\n\r\n    if (contractCalls.length === 1) return contractCalls[0]\r\n\r\n    const compatContractCalls = contractCalls.filter((call) => {\r\n      try {\r\n        return Boolean(\r\n          decodeErrorResult({\r\n            abi: call.abi,\r\n            data: revertData,\r\n          }),\r\n        )\r\n      } catch {\r\n        return false\r\n      }\r\n    })\r\n    if (compatContractCalls.length === 1) return compatContractCalls[0]\r\n\r\n    return {\r\n      abi: [],\r\n      functionName: contractCalls.reduce(\r\n        (acc, call) => `${acc ? `${acc} | ` : ''}${call.functionName}`,\r\n        '',\r\n      ),\r\n      args: undefined,\r\n      to: undefined,\r\n    }\r\n  })() as {\r\n    abi: Abi\r\n    functionName: string\r\n    args: unknown[]\r\n    to: Address\r\n  }\r\n\r\n  const cause = (() => {\r\n    if (revertData === '0x')\r\n      return new ContractFunctionZeroDataError({ functionName })\r\n    return new ContractFunctionRevertedError({\r\n      abi,\r\n      data: revertData,\r\n      functionName,\r\n    })\r\n  })()\r\n  return new ContractFunctionExecutionError(cause as BaseError, {\r\n    abi,\r\n    args,\r\n    contractAddress: to,\r\n    functionName,\r\n  }) as GetContractErrorReturnType\r\n}\r\n", "import type { ErrorType } from '../../../errors/utils.js'\r\nimport type { RpcEstimateUserOperationGasReturnType } from '../../types/rpc.js'\r\nimport type { EstimateUserOperationGasReturnType } from '../../types/userOperation.js'\r\n\r\nexport type FormatUserOperationGasErrorType = ErrorType\r\n\r\nexport function formatUserOperationGas(\r\n  parameters: RpcEstimateUserOperationGasReturnType,\r\n): EstimateUserOperationGasReturnType {\r\n  const gas = {} as EstimateUserOperationGasReturnType\r\n\r\n  if (parameters.callGasLimit)\r\n    gas.callGasLimit = BigInt(parameters.callGasLimit)\r\n  if (parameters.preVerificationGas)\r\n    gas.preVerificationGas = BigInt(parameters.preVerificationGas)\r\n  if (parameters.verificationGasLimit)\r\n    gas.verificationGasLimit = BigInt(parameters.verificationGasLimit)\r\n  if (parameters.paymasterPostOpGasLimit)\r\n    gas.paymasterPostOpGasLimit = BigInt(parameters.paymasterPostOpGasLimit)\r\n  if (parameters.paymasterVerificationGasLimit)\r\n    gas.paymasterVerificationGasLimit = BigInt(\r\n      parameters.paymasterVerificationGasLimit,\r\n    )\r\n\r\n  return gas\r\n}\r\n", "import type { ErrorType } from '../../../errors/utils.js'\r\nimport type { SignedAuthorization } from '../../../types/authorization.js'\r\nimport type { ExactPartial } from '../../../types/utils.js'\r\nimport { numberToHex } from '../../../utils/encoding/toHex.js'\r\nimport { pad } from '../../../utils/index.js'\r\nimport type { RpcUserOperation } from '../../types/rpc.js'\r\nimport type { UserOperation } from '../../types/userOperation.js'\r\n\r\nexport type FormatUserOperationRequestErrorType = ErrorType\r\n\r\nexport function formatUserOperationRequest(\r\n  request: ExactPartial<UserOperation>,\r\n) {\r\n  const rpcRequest = {} as RpcUserOperation\r\n\r\n  if (typeof request.callData !== 'undefined')\r\n    rpcRequest.callData = request.callData\r\n  if (typeof request.callGasLimit !== 'undefined')\r\n    rpcRequest.callGasLimit = numberToHex(request.callGasLimit)\r\n  if (typeof request.factory !== 'undefined')\r\n    rpcRequest.factory = request.factory\r\n  if (typeof request.factoryData !== 'undefined')\r\n    rpcRequest.factoryData = request.factoryData\r\n  if (typeof request.initCode !== 'undefined')\r\n    rpcRequest.initCode = request.initCode\r\n  if (typeof request.maxFeePerGas !== 'undefined')\r\n    rpcRequest.maxFeePerGas = numberToHex(request.maxFeePerGas)\r\n  if (typeof request.maxPriorityFeePerGas !== 'undefined')\r\n    rpcRequest.maxPriorityFeePerGas = numberToHex(request.maxPriorityFeePerGas)\r\n  if (typeof request.nonce !== 'undefined')\r\n    rpcRequest.nonce = numberToHex(request.nonce)\r\n  if (typeof request.paymaster !== 'undefined')\r\n    rpcRequest.paymaster = request.paymaster\r\n  if (typeof request.paymasterAndData !== 'undefined')\r\n    rpcRequest.paymasterAndData = request.paymasterAndData || '0x'\r\n  if (typeof request.paymasterData !== 'undefined')\r\n    rpcRequest.paymasterData = request.paymasterData\r\n  if (typeof request.paymasterPostOpGasLimit !== 'undefined')\r\n    rpcRequest.paymasterPostOpGasLimit = numberToHex(\r\n      request.paymasterPostOpGasLimit,\r\n    )\r\n  if (typeof request.paymasterVerificationGasLimit !== 'undefined')\r\n    rpcRequest.paymasterVerificationGasLimit = numberToHex(\r\n      request.paymasterVerificationGasLimit,\r\n    )\r\n  if (typeof request.preVerificationGas !== 'undefined')\r\n    rpcRequest.preVerificationGas = numberToHex(request.preVerificationGas)\r\n  if (typeof request.sender !== 'undefined') rpcRequest.sender = request.sender\r\n  if (typeof request.signature !== 'undefined')\r\n    rpcRequest.signature = request.signature\r\n  if (typeof request.verificationGasLimit !== 'undefined')\r\n    rpcRequest.verificationGasLimit = numberToHex(request.verificationGasLimit)\r\n  if (typeof request.authorization !== 'undefined')\r\n    rpcRequest.eip7702Auth = formatAuthorization(request.authorization)\r\n\r\n  return rpcRequest\r\n}\r\n\r\nfunction formatAuthorization(authorization: SignedAuthorization) {\r\n  return {\r\n    address: authorization.address,\r\n    chainId: numberToHex(authorization.chainId),\r\n    nonce: numberToHex(authorization.nonce),\r\n    r: authorization.r\r\n      ? numberToHex(BigInt(authorization.r), { size: 32 })\r\n      : pad('0x', { size: 32 }),\r\n    s: authorization.s\r\n      ? numberToHex(BigInt(authorization.s), { size: 32 })\r\n      : pad('0x', { size: 32 }),\r\n    yParity: authorization.yParity\r\n      ? numberToHex(authorization.yParity, { size: 1 })\r\n      : pad('0x', { size: 32 }),\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\nimport type { Client } from '../../../clients/createClient.js'\r\nimport type { Transport } from '../../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../../errors/utils.js'\r\nimport type { Hex } from '../../../types/misc.js'\r\nimport type { OneOf, PartialBy, Prettify } from '../../../types/utils.js'\r\nimport { hexToBigInt } from '../../../utils/encoding/fromHex.js'\r\nimport { numberToHex } from '../../../utils/encoding/toHex.js'\r\nimport type { UserOperation } from '../../types/userOperation.js'\r\nimport {\r\n  type FormatUserOperationRequestErrorType,\r\n  formatUserOperationRequest,\r\n} from '../../utils/formatters/userOperationRequest.js'\r\n\r\nexport type GetPaymasterDataParameters = OneOf<\r\n  | PartialBy<\r\n      Pick<\r\n        UserOperation<'0.6'>,\r\n        | 'callData'\r\n        | 'callGasLimit'\r\n        | 'initCode'\r\n        | 'maxFeePerGas'\r\n        | 'maxPriorityFeePerGas'\r\n        | 'nonce'\r\n        | 'sender'\r\n        | 'preVerificationGas'\r\n        | 'verificationGasLimit'\r\n      >,\r\n      | 'callGasLimit'\r\n      | 'initCode'\r\n      | 'maxFeePerGas'\r\n      | 'maxPriorityFeePerGas'\r\n      | 'preVerificationGas'\r\n      | 'verificationGasLimit'\r\n    >\r\n  | PartialBy<\r\n      Pick<\r\n        UserOperation<'0.7'>,\r\n        | 'callData'\r\n        | 'callGasLimit'\r\n        | 'factory'\r\n        | 'factoryData'\r\n        | 'maxFeePerGas'\r\n        | 'maxPriorityFeePerGas'\r\n        | 'nonce'\r\n        | 'sender'\r\n        | 'preVerificationGas'\r\n        | 'verificationGasLimit'\r\n        | 'paymasterPostOpGasLimit'\r\n        | 'paymasterVerificationGasLimit'\r\n      >,\r\n      | 'callGasLimit'\r\n      | 'factory'\r\n      | 'factoryData'\r\n      | 'maxFeePerGas'\r\n      | 'maxPriorityFeePerGas'\r\n      | 'preVerificationGas'\r\n      | 'verificationGasLimit'\r\n    >\r\n  | PartialBy<\r\n      Pick<\r\n        UserOperation<'0.8'>,\r\n        | 'callData'\r\n        | 'callGasLimit'\r\n        | 'factory'\r\n        | 'factoryData'\r\n        | 'maxFeePerGas'\r\n        | 'maxPriorityFeePerGas'\r\n        | 'nonce'\r\n        | 'sender'\r\n        | 'preVerificationGas'\r\n        | 'verificationGasLimit'\r\n        | 'paymasterPostOpGasLimit'\r\n        | 'paymasterVerificationGasLimit'\r\n      >,\r\n      | 'callGasLimit'\r\n      | 'factory'\r\n      | 'factoryData'\r\n      | 'maxFeePerGas'\r\n      | 'maxPriorityFeePerGas'\r\n      | 'preVerificationGas'\r\n      | 'verificationGasLimit'\r\n    >\r\n> & {\r\n  context?: unknown | undefined\r\n  chainId: number\r\n  entryPointAddress: Address\r\n}\r\n\r\nexport type GetPaymasterDataReturnType = Prettify<\r\n  OneOf<\r\n    | { paymasterAndData: Hex }\r\n    | {\r\n        paymaster: Address\r\n        paymasterData: Hex\r\n        paymasterPostOpGasLimit?: bigint | undefined\r\n        paymasterVerificationGasLimit?: bigint | undefined\r\n      }\r\n  >\r\n>\r\n\r\nexport type GetPaymasterDataErrorType =\r\n  | FormatUserOperationRequestErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Retrieves paymaster-related User Operation properties to be used for sending the User Operation.\r\n *\r\n * - Docs: https://viem.sh/account-abstraction/actions/paymaster/getPaymasterData\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetPaymasterDataParameters}\r\n * @returns Paymaster-related User Operation properties. {@link GetPaymasterDataReturnType}\r\n *\r\n * @example\r\n * import { http } from 'viem'\r\n * import { createPaymasterClient, getPaymasterData } from 'viem/account-abstraction'\r\n *\r\n * const paymasterClient = createPaymasterClient({\r\n *   transport: http('https://...'),\r\n * })\r\n *\r\n * const userOperation = { ... }\r\n *\r\n * const values = await getPaymasterData(paymasterClient, {\r\n *   chainId: 1,\r\n *   entryPointAddress: '0x...',\r\n *   ...userOperation,\r\n * })\r\n */\r\nexport async function getPaymasterData(\r\n  client: Client<Transport>,\r\n  parameters: GetPaymasterDataParameters,\r\n): Promise<GetPaymasterDataReturnType> {\r\n  const { chainId, entryPointAddress, context, ...userOperation } = parameters\r\n  const request = formatUserOperationRequest(userOperation)\r\n  const { paymasterPostOpGasLimit, paymasterVerificationGasLimit, ...rest } =\r\n    await client.request({\r\n      method: 'pm_getPaymasterData',\r\n      params: [\r\n        {\r\n          ...request,\r\n          callGasLimit: request.callGasLimit ?? '0x0',\r\n          verificationGasLimit: request.verificationGasLimit ?? '0x0',\r\n          preVerificationGas: request.preVerificationGas ?? '0x0',\r\n        },\r\n        entryPointAddress,\r\n        numberToHex(chainId),\r\n        context,\r\n      ],\r\n    })\r\n  return {\r\n    ...rest,\r\n    ...(paymasterPostOpGasLimit && {\r\n      paymasterPostOpGasLimit: hexToBigInt(paymasterPostOpGasLimit),\r\n    }),\r\n    ...(paymasterVerificationGasLimit && {\r\n      paymasterVerificationGasLimit: hexToBigInt(paymasterVerificationGasLimit),\r\n    }),\r\n  } as unknown as GetPaymasterDataReturnType\r\n}\r\n", "import type { Address } from 'abitype'\r\nimport type { Client } from '../../../clients/createClient.js'\r\nimport type { Transport } from '../../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../../errors/utils.js'\r\nimport type { Hex } from '../../../types/misc.js'\r\nimport type { OneOf, PartialBy, Prettify } from '../../../types/utils.js'\r\nimport { hexToBigInt } from '../../../utils/encoding/fromHex.js'\r\nimport { numberToHex } from '../../../utils/encoding/toHex.js'\r\nimport type { UserOperation } from '../../types/userOperation.js'\r\nimport {\r\n  type FormatUserOperationRequestErrorType,\r\n  formatUserOperationRequest,\r\n} from '../../utils/formatters/userOperationRequest.js'\r\n\r\nexport type GetPaymasterStubDataParameters = OneOf<\r\n  | PartialBy<\r\n      Pick<\r\n        UserOperation<'0.6'>,\r\n        | 'callData'\r\n        | 'callGasLimit'\r\n        | 'initCode'\r\n        | 'maxFeePerGas'\r\n        | 'maxPriorityFeePerGas'\r\n        | 'nonce'\r\n        | 'sender'\r\n        | 'preVerificationGas'\r\n        | 'verificationGasLimit'\r\n      >,\r\n      | 'callGasLimit'\r\n      | 'initCode'\r\n      | 'maxFeePerGas'\r\n      | 'maxPriorityFeePerGas'\r\n      | 'preVerificationGas'\r\n      | 'verificationGasLimit'\r\n    >\r\n  | PartialBy<\r\n      Pick<\r\n        UserOperation<'0.7'>,\r\n        | 'callData'\r\n        | 'callGasLimit'\r\n        | 'factory'\r\n        | 'factoryData'\r\n        | 'maxFeePerGas'\r\n        | 'maxPriorityFeePerGas'\r\n        | 'nonce'\r\n        | 'sender'\r\n        | 'preVerificationGas'\r\n        | 'verificationGasLimit'\r\n      >,\r\n      | 'callGasLimit'\r\n      | 'factory'\r\n      | 'factoryData'\r\n      | 'maxFeePerGas'\r\n      | 'maxPriorityFeePerGas'\r\n      | 'preVerificationGas'\r\n      | 'verificationGasLimit'\r\n    >\r\n> & {\r\n  context?: unknown | undefined\r\n  chainId: number\r\n  entryPointAddress: Address\r\n}\r\n\r\nexport type GetPaymasterStubDataReturnType = Prettify<\r\n  OneOf<\r\n    | { paymasterAndData: Hex }\r\n    | {\r\n        paymaster: Address\r\n        paymasterData: Hex\r\n        paymasterVerificationGasLimit?: bigint | undefined\r\n        paymasterPostOpGasLimit: bigint\r\n      }\r\n  > & {\r\n    sponsor?: { name: string; icon?: string | undefined } | undefined\r\n    isFinal?: boolean | undefined\r\n  }\r\n>\r\n\r\nexport type GetPaymasterStubDataErrorType =\r\n  | FormatUserOperationRequestErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Retrieves paymaster-related User Operation properties to be used for gas estimation.\r\n *\r\n * - Docs: https://viem.sh/account-abstraction/actions/paymaster/getPaymasterStubData\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetPaymasterStubDataParameters}\r\n * @returns Paymaster-related User Operation properties. {@link GetPaymasterStubDataReturnType}\r\n *\r\n * @example\r\n * import { http } from 'viem'\r\n * import { createPaymasterClient, getPaymasterStubData } from 'viem/account-abstraction'\r\n *\r\n * const paymasterClient = createPaymasterClient({\r\n *   transport: http('https://...'),\r\n * })\r\n *\r\n * const userOperation = { ... }\r\n *\r\n * const values = await getPaymasterStubData(paymasterClient, {\r\n *   chainId: 1,\r\n *   entryPointAddress: '0x...',\r\n *   ...userOperation,\r\n * })\r\n */\r\nexport async function getPaymasterStubData(\r\n  client: Client<Transport>,\r\n  parameters: GetPaymasterStubDataParameters,\r\n): Promise<GetPaymasterStubDataReturnType> {\r\n  const { chainId, entryPointAddress, context, ...userOperation } = parameters\r\n  const request = formatUserOperationRequest(userOperation)\r\n  const { paymasterPostOpGasLimit, paymasterVerificationGasLimit, ...rest } =\r\n    await client.request({\r\n      method: 'pm_getPaymasterStubData',\r\n      params: [\r\n        {\r\n          ...request,\r\n          callGasLimit: request.callGasLimit ?? '0x0',\r\n          verificationGasLimit: request.verificationGasLimit ?? '0x0',\r\n          preVerificationGas: request.preVerificationGas ?? '0x0',\r\n        },\r\n        entryPointAddress,\r\n        numberToHex(chainId),\r\n        context,\r\n      ],\r\n    })\r\n  return {\r\n    ...rest,\r\n    ...(paymasterPostOpGasLimit && {\r\n      paymasterPostOpGasLimit: hexToBigInt(paymasterPostOpGasLimit),\r\n    }),\r\n    ...(paymasterVerificationGasLimit && {\r\n      paymasterVerificationGasLimit: hexToBigInt(paymasterVerificationGasLimit),\r\n    }),\r\n  } as unknown as GetPaymasterStubDataReturnType\r\n}\r\n", "import type { Address, Narrow } from 'abitype'\r\nimport {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../../../accounts/utils/parseAccount.js'\r\nimport { prepareAuthorization } from '../../../actions/index.js'\r\nimport {\r\n  type EstimateFeesPerGasErrorType,\r\n  estimateFeesPerGas,\r\n} from '../../../actions/public/estimateFeesPerGas.js'\r\nimport { getChainId as getChainId_ } from '../../../actions/public/getChainId.js'\r\nimport type { Client } from '../../../clients/createClient.js'\r\nimport type { Transport } from '../../../clients/transports/createTransport.js'\r\nimport { AccountNotFoundError } from '../../../errors/account.js'\r\nimport type { ErrorType } from '../../../errors/utils.js'\r\nimport type { SignedAuthorization } from '../../../types/authorization.js'\r\nimport type { Call, Calls } from '../../../types/calls.js'\r\nimport type { Chain } from '../../../types/chain.js'\r\nimport type { Hex } from '../../../types/misc.js'\r\nimport type { StateOverride } from '../../../types/stateOverride.js'\r\nimport type {\r\n  Assign,\r\n  OneOf,\r\n  Prettify,\r\n  UnionOmit,\r\n} from '../../../types/utils.js'\r\nimport {\r\n  type EncodeFunctionDataErrorType,\r\n  encodeFunctionData,\r\n} from '../../../utils/abi/encodeFunctionData.js'\r\nimport { type ConcatErrorType, concat } from '../../../utils/data/concat.js'\r\nimport { getAction } from '../../../utils/getAction.js'\r\nimport type { SmartAccount } from '../../accounts/types.js'\r\nimport type { BundlerClient } from '../../clients/createBundlerClient.js'\r\nimport type { PaymasterActions } from '../../clients/decorators/paymaster.js'\r\nimport type {\r\n  DeriveSmartAccount,\r\n  GetSmartAccountParameter,\r\n} from '../../types/account.js'\r\nimport type {\r\n  DeriveEntryPointVersion,\r\n  EntryPointVersion,\r\n} from '../../types/entryPointVersion.js'\r\nimport type {\r\n  UserOperation,\r\n  UserOperationRequest,\r\n} from '../../types/userOperation.js'\r\nimport {\r\n  type GetPaymasterDataErrorType,\r\n  getPaymasterData as getPaymasterData_,\r\n} from '../paymaster/getPaymasterData.js'\r\nimport {\r\n  type GetPaymasterStubDataErrorType,\r\n  getPaymasterStubData as getPaymasterStubData_,\r\n} from '../paymaster/getPaymasterStubData.js'\r\nimport {\r\n  type EstimateUserOperationGasParameters,\r\n  estimateUserOperationGas,\r\n} from './estimateUserOperationGas.js'\r\n\r\nconst defaultParameters = [\r\n  'factory',\r\n  'fees',\r\n  'gas',\r\n  'paymaster',\r\n  'nonce',\r\n  'signature',\r\n  'authorization',\r\n] as const\r\n\r\nexport type PrepareUserOperationParameterType =\r\n  | 'factory'\r\n  | 'fees'\r\n  | 'gas'\r\n  | 'paymaster'\r\n  | 'nonce'\r\n  | 'signature'\r\n  | 'authorization'\r\n\r\ntype FactoryProperties<\r\n  entryPointVersion extends EntryPointVersion = EntryPointVersion,\r\n> =\r\n  | (entryPointVersion extends '0.8'\r\n      ? {\r\n          factory: UserOperation['factory']\r\n          factoryData: UserOperation['factoryData']\r\n        }\r\n      : never)\r\n  | (entryPointVersion extends '0.7'\r\n      ? {\r\n          factory: UserOperation['factory']\r\n          factoryData: UserOperation['factoryData']\r\n        }\r\n      : never)\r\n  | (entryPointVersion extends '0.6'\r\n      ? {\r\n          initCode: UserOperation['initCode']\r\n        }\r\n      : never)\r\n\r\ntype GasProperties<\r\n  entryPointVersion extends EntryPointVersion = EntryPointVersion,\r\n> =\r\n  | (entryPointVersion extends '0.8'\r\n      ? {\r\n          callGasLimit: UserOperation['callGasLimit']\r\n          preVerificationGas: UserOperation['preVerificationGas']\r\n          verificationGasLimit: UserOperation['verificationGasLimit']\r\n          paymasterPostOpGasLimit: UserOperation['paymasterPostOpGasLimit']\r\n          paymasterVerificationGasLimit: UserOperation['paymasterVerificationGasLimit']\r\n        }\r\n      : never)\r\n  | (entryPointVersion extends '0.7'\r\n      ? {\r\n          callGasLimit: UserOperation['callGasLimit']\r\n          preVerificationGas: UserOperation['preVerificationGas']\r\n          verificationGasLimit: UserOperation['verificationGasLimit']\r\n          paymasterPostOpGasLimit: UserOperation['paymasterPostOpGasLimit']\r\n          paymasterVerificationGasLimit: UserOperation['paymasterVerificationGasLimit']\r\n        }\r\n      : never)\r\n  | (entryPointVersion extends '0.6'\r\n      ? {\r\n          callGasLimit: UserOperation['callGasLimit']\r\n          preVerificationGas: UserOperation['preVerificationGas']\r\n          verificationGasLimit: UserOperation['verificationGasLimit']\r\n        }\r\n      : never)\r\n\r\ntype FeeProperties = {\r\n  maxFeePerGas: UserOperation['maxFeePerGas']\r\n  maxPriorityFeePerGas: UserOperation['maxPriorityFeePerGas']\r\n}\r\n\r\ntype NonceProperties = {\r\n  nonce: UserOperation['nonce']\r\n}\r\n\r\ntype PaymasterProperties<\r\n  entryPointVersion extends EntryPointVersion = EntryPointVersion,\r\n> =\r\n  | (entryPointVersion extends '0.8'\r\n      ? {\r\n          paymaster: UserOperation['paymaster']\r\n          paymasterData: UserOperation['paymasterData']\r\n          paymasterPostOpGasLimit: UserOperation['paymasterPostOpGasLimit']\r\n          paymasterVerificationGasLimit: UserOperation['paymasterVerificationGasLimit']\r\n        }\r\n      : never)\r\n  | (entryPointVersion extends '0.7'\r\n      ? {\r\n          paymaster: UserOperation['paymaster']\r\n          paymasterData: UserOperation['paymasterData']\r\n          paymasterPostOpGasLimit: UserOperation['paymasterPostOpGasLimit']\r\n          paymasterVerificationGasLimit: UserOperation['paymasterVerificationGasLimit']\r\n        }\r\n      : never)\r\n  | (entryPointVersion extends '0.6'\r\n      ? {\r\n          paymasterAndData: UserOperation['paymasterAndData']\r\n        }\r\n      : never)\r\n\r\ntype SignatureProperties = {\r\n  signature: UserOperation['signature']\r\n}\r\n\r\ntype AuthorizationProperties = {\r\n  authorization: UserOperation['authorization']\r\n}\r\n\r\nexport type PrepareUserOperationRequest<\r\n  account extends SmartAccount | undefined = SmartAccount | undefined,\r\n  accountOverride extends SmartAccount | undefined = SmartAccount | undefined,\r\n  calls extends readonly unknown[] = readonly unknown[],\r\n  //\r\n  _derivedAccount extends SmartAccount | undefined = DeriveSmartAccount<\r\n    account,\r\n    accountOverride\r\n  >,\r\n  _derivedVersion extends\r\n    EntryPointVersion = DeriveEntryPointVersion<_derivedAccount>,\r\n> = Assign<\r\n  UserOperationRequest<_derivedVersion>,\r\n  OneOf<{ calls: Calls<Narrow<calls>> } | { callData: Hex }> & {\r\n    parameters?: readonly PrepareUserOperationParameterType[] | undefined\r\n    paymaster?:\r\n      | Address\r\n      | true\r\n      | {\r\n          /** Retrieves paymaster-related User Operation properties to be used for sending the User Operation. */\r\n          getPaymasterData?: PaymasterActions['getPaymasterData'] | undefined\r\n          /** Retrieves paymaster-related User Operation properties to be used for gas estimation. */\r\n          getPaymasterStubData?:\r\n            | PaymasterActions['getPaymasterStubData']\r\n            | undefined\r\n        }\r\n      | undefined\r\n    /** Paymaster context to pass to `getPaymasterData` and `getPaymasterStubData` calls. */\r\n    paymasterContext?: unknown | undefined\r\n    /** State overrides for the User Operation call. */\r\n    stateOverride?: StateOverride | undefined\r\n  }\r\n>\r\n\r\nexport type PrepareUserOperationParameters<\r\n  account extends SmartAccount | undefined = SmartAccount | undefined,\r\n  accountOverride extends SmartAccount | undefined = SmartAccount | undefined,\r\n  calls extends readonly unknown[] = readonly unknown[],\r\n  request extends PrepareUserOperationRequest<\r\n    account,\r\n    accountOverride,\r\n    calls\r\n  > = PrepareUserOperationRequest<account, accountOverride, calls>,\r\n> = request & GetSmartAccountParameter<account, accountOverride>\r\n\r\nexport type PrepareUserOperationReturnType<\r\n  account extends SmartAccount | undefined = SmartAccount | undefined,\r\n  accountOverride extends SmartAccount | undefined = SmartAccount | undefined,\r\n  calls extends readonly unknown[] = readonly unknown[],\r\n  request extends PrepareUserOperationRequest<\r\n    account,\r\n    accountOverride,\r\n    calls\r\n  > = PrepareUserOperationRequest<account, accountOverride, calls>,\r\n  //\r\n  _parameters extends\r\n    PrepareUserOperationParameterType = request['parameters'] extends readonly PrepareUserOperationParameterType[]\r\n    ? request['parameters'][number]\r\n    : (typeof defaultParameters)[number],\r\n  _derivedAccount extends SmartAccount | undefined = DeriveSmartAccount<\r\n    account,\r\n    accountOverride\r\n  >,\r\n  _derivedVersion extends\r\n    EntryPointVersion = DeriveEntryPointVersion<_derivedAccount>,\r\n> = Prettify<\r\n  UnionOmit<request, 'calls' | 'parameters'> & {\r\n    callData: Hex\r\n    paymasterAndData: _derivedVersion extends '0.6' ? Hex : undefined\r\n    sender: UserOperation['sender']\r\n  } & (Extract<_parameters, 'authorization'> extends never\r\n      ? {}\r\n      : AuthorizationProperties) &\r\n    (Extract<_parameters, 'factory'> extends never\r\n      ? {}\r\n      : FactoryProperties<_derivedVersion>) &\r\n    (Extract<_parameters, 'nonce'> extends never ? {} : NonceProperties) &\r\n    (Extract<_parameters, 'fees'> extends never ? {} : FeeProperties) &\r\n    (Extract<_parameters, 'gas'> extends never\r\n      ? {}\r\n      : GasProperties<_derivedVersion>) &\r\n    (Extract<_parameters, 'paymaster'> extends never\r\n      ? {}\r\n      : PaymasterProperties<_derivedVersion>) &\r\n    (Extract<_parameters, 'signature'> extends never ? {} : SignatureProperties)\r\n>\r\n\r\nexport type PrepareUserOperationErrorType =\r\n  | ParseAccountErrorType\r\n  | GetPaymasterStubDataErrorType\r\n  | GetPaymasterDataErrorType\r\n  | EncodeFunctionDataErrorType\r\n  | ConcatErrorType\r\n  | EstimateFeesPerGasErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Prepares a User Operation and fills in missing properties.\r\n *\r\n * - Docs: https://viem.sh/actions/bundler/prepareUserOperation\r\n *\r\n * @param args - {@link PrepareUserOperationParameters}\r\n * @returns The User Operation. {@link PrepareUserOperationReturnType}\r\n *\r\n * @example\r\n * import { createBundlerClient, http } from 'viem'\r\n * import { toSmartAccount } from 'viem/accounts'\r\n * import { mainnet } from 'viem/chains'\r\n * import { prepareUserOperation } from 'viem/actions'\r\n *\r\n * const account = await toSmartAccount({ ... })\r\n *\r\n * const client = createBundlerClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n *\r\n * const request = await prepareUserOperation(client, {\r\n *   account,\r\n *   calls: [{ to: '0x...', value: parseEther('1') }],\r\n * })\r\n */\r\nexport async function prepareUserOperation<\r\n  account extends SmartAccount | undefined,\r\n  const calls extends readonly unknown[],\r\n  const request extends PrepareUserOperationRequest<\r\n    account,\r\n    accountOverride,\r\n    calls\r\n  >,\r\n  accountOverride extends SmartAccount | undefined = undefined,\r\n>(\r\n  client: Client<Transport, Chain | undefined, account>,\r\n  parameters_: PrepareUserOperationParameters<\r\n    account,\r\n    accountOverride,\r\n    calls,\r\n    request\r\n  >,\r\n): Promise<\r\n  PrepareUserOperationReturnType<account, accountOverride, calls, request>\r\n> {\r\n  const parameters = parameters_ as PrepareUserOperationParameters\r\n  const {\r\n    account: account_ = client.account,\r\n    parameters: properties = defaultParameters,\r\n    stateOverride,\r\n  } = parameters\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Assert that an Account is defined.\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n\r\n  if (!account_) throw new AccountNotFoundError()\r\n  const account = parseAccount(account_)\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Declare typed Bundler Client.\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n\r\n  const bundlerClient = client as unknown as BundlerClient\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Declare Paymaster properties.\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n\r\n  const paymaster = parameters.paymaster ?? bundlerClient?.paymaster\r\n  const paymasterAddress = typeof paymaster === 'string' ? paymaster : undefined\r\n  const { getPaymasterStubData, getPaymasterData } = (() => {\r\n    // If `paymaster: true`, we will assume the Bundler Client supports Paymaster Actions.\r\n    if (paymaster === true)\r\n      return {\r\n        getPaymasterStubData: (parameters: any) =>\r\n          getAction(\r\n            bundlerClient,\r\n            getPaymasterStubData_,\r\n            'getPaymasterStubData',\r\n          )(parameters),\r\n        getPaymasterData: (parameters: any) =>\r\n          getAction(\r\n            bundlerClient,\r\n            getPaymasterData_,\r\n            'getPaymasterData',\r\n          )(parameters),\r\n      }\r\n\r\n    // If Actions are passed to `paymaster` (via Paymaster Client or directly), we will use them.\r\n    if (typeof paymaster === 'object') {\r\n      const { getPaymasterStubData, getPaymasterData } = paymaster\r\n      return {\r\n        getPaymasterStubData: (getPaymasterData && getPaymasterStubData\r\n          ? getPaymasterStubData\r\n          : getPaymasterData) as typeof getPaymasterStubData,\r\n        getPaymasterData:\r\n          getPaymasterData && getPaymasterStubData\r\n            ? getPaymasterData\r\n            : undefined,\r\n      }\r\n    }\r\n\r\n    // No Paymaster functions.\r\n    return {\r\n      getPaymasterStubData: undefined,\r\n      getPaymasterData: undefined,\r\n    }\r\n  })()\r\n  const paymasterContext = parameters.paymasterContext\r\n    ? parameters.paymasterContext\r\n    : bundlerClient?.paymasterContext\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Set up the User Operation request.\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n\r\n  let request = {\r\n    ...parameters,\r\n    paymaster: paymasterAddress,\r\n    sender: account.address,\r\n  } as PrepareUserOperationRequest\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Concurrently prepare properties required to fill the User Operation.\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n\r\n  const [callData, factory, fees, nonce, authorization] = await Promise.all([\r\n    (async () => {\r\n      if (parameters.calls)\r\n        return account.encodeCalls(\r\n          parameters.calls.map((call_) => {\r\n            const call = call_ as Call\r\n            if (call.abi)\r\n              return {\r\n                data: encodeFunctionData(call),\r\n                to: call.to,\r\n                value: call.value,\r\n              } as Call\r\n            return call as Call\r\n          }),\r\n        )\r\n      return parameters.callData\r\n    })(),\r\n    (async () => {\r\n      if (!properties.includes('factory')) return undefined\r\n      if (parameters.initCode) return { initCode: parameters.initCode }\r\n      if (parameters.factory && parameters.factoryData) {\r\n        return {\r\n          factory: parameters.factory,\r\n          factoryData: parameters.factoryData,\r\n        }\r\n      }\r\n\r\n      const { factory, factoryData } = await account.getFactoryArgs()\r\n\r\n      if (account.entryPoint.version === '0.6')\r\n        return {\r\n          initCode:\r\n            factory && factoryData ? concat([factory, factoryData]) : undefined,\r\n        }\r\n      return {\r\n        factory,\r\n        factoryData,\r\n      }\r\n    })(),\r\n    (async () => {\r\n      if (!properties.includes('fees')) return undefined\r\n\r\n      // If we have sufficient properties for fees, return them.\r\n      if (\r\n        typeof parameters.maxFeePerGas === 'bigint' &&\r\n        typeof parameters.maxPriorityFeePerGas === 'bigint'\r\n      )\r\n        return request\r\n\r\n      // If the Bundler Client has a `estimateFeesPerGas` hook, run it.\r\n      if (bundlerClient?.userOperation?.estimateFeesPerGas) {\r\n        const fees = await bundlerClient.userOperation.estimateFeesPerGas({\r\n          account,\r\n          bundlerClient,\r\n          userOperation: request as UserOperation,\r\n        })\r\n        return {\r\n          ...request,\r\n          ...fees,\r\n        }\r\n      }\r\n\r\n      // Otherwise, we will need to estimate the fees to fill the fee properties.\r\n      try {\r\n        const client_ = bundlerClient.client ?? client\r\n        const fees = await getAction(\r\n          client_,\r\n          estimateFeesPerGas,\r\n          'estimateFeesPerGas',\r\n        )({\r\n          chain: client_.chain,\r\n          type: 'eip1559',\r\n        })\r\n        return {\r\n          maxFeePerGas:\r\n            typeof parameters.maxFeePerGas === 'bigint'\r\n              ? parameters.maxFeePerGas\r\n              : BigInt(\r\n                  // Bundlers unfortunately have strict rules on fee prechecks – we will need to set a generous buffer.\r\n                  2n * fees.maxFeePerGas,\r\n                ),\r\n          maxPriorityFeePerGas:\r\n            typeof parameters.maxPriorityFeePerGas === 'bigint'\r\n              ? parameters.maxPriorityFeePerGas\r\n              : BigInt(\r\n                  // Bundlers unfortunately have strict rules on fee prechecks – we will need to set a generous buffer.\r\n                  2n * fees.maxPriorityFeePerGas,\r\n                ),\r\n        }\r\n      } catch {\r\n        return undefined\r\n      }\r\n    })(),\r\n    (async () => {\r\n      if (!properties.includes('nonce')) return undefined\r\n      if (typeof parameters.nonce === 'bigint') return parameters.nonce\r\n      return account.getNonce()\r\n    })(),\r\n    (async () => {\r\n      if (!properties.includes('authorization')) return undefined\r\n      if (typeof parameters.authorization === 'object')\r\n        return parameters.authorization\r\n      if (account.authorization && !(await account.isDeployed())) {\r\n        const authorization = await prepareAuthorization(\r\n          account.client,\r\n          account.authorization,\r\n        )\r\n        return {\r\n          ...authorization,\r\n          r: '0xfffffffffffffffffffffffffffffff000000000000000000000000000000000',\r\n          s: '0x7aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\r\n          yParity: 1,\r\n        } satisfies SignedAuthorization\r\n      }\r\n      return undefined\r\n    })(),\r\n  ])\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Fill User Operation with the prepared properties from above.\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n\r\n  if (typeof callData !== 'undefined') request.callData = callData\r\n  if (typeof factory !== 'undefined')\r\n    request = { ...request, ...(factory as any) }\r\n  if (typeof fees !== 'undefined') request = { ...request, ...(fees as any) }\r\n  if (typeof nonce !== 'undefined') request.nonce = nonce\r\n  if (typeof authorization !== 'undefined')\r\n    request.authorization = authorization\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Fill User Operation with the `signature` property.\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n\r\n  if (properties.includes('signature')) {\r\n    if (typeof parameters.signature !== 'undefined')\r\n      request.signature = parameters.signature\r\n    else\r\n      request.signature = await account.getStubSignature(\r\n        request as UserOperation,\r\n      )\r\n  }\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // `initCode` is required to be filled with EntryPoint 0.6.\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n\r\n  // If no `initCode` is provided, we use an empty bytes string.\r\n  if (account.entryPoint.version === '0.6' && !request.initCode)\r\n    request.initCode = '0x'\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Fill User Operation with paymaster-related properties for **gas estimation**.\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n\r\n  let chainId: number | undefined\r\n  async function getChainId(): Promise<number> {\r\n    if (chainId) return chainId\r\n    if (client.chain) return client.chain.id\r\n    const chainId_ = await getAction(client, getChainId_, 'getChainId')({})\r\n    chainId = chainId_\r\n    return chainId\r\n  }\r\n\r\n  // If the User Operation is intended to be sponsored, we will need to fill the paymaster-related\r\n  // User Operation properties required to estimate the User Operation gas.\r\n  let isPaymasterPopulated = false\r\n  if (\r\n    properties.includes('paymaster') &&\r\n    getPaymasterStubData &&\r\n    !paymasterAddress &&\r\n    !parameters.paymasterAndData\r\n  ) {\r\n    const {\r\n      isFinal = false,\r\n      sponsor,\r\n      ...paymasterArgs\r\n    } = await getPaymasterStubData({\r\n      chainId: await getChainId(),\r\n      entryPointAddress: account.entryPoint.address,\r\n      context: paymasterContext,\r\n      ...(request as UserOperation),\r\n    })\r\n    isPaymasterPopulated = isFinal\r\n    request = {\r\n      ...request,\r\n      ...paymasterArgs,\r\n    } as PrepareUserOperationRequest\r\n  }\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // `paymasterAndData` is required to be filled with EntryPoint 0.6.\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n\r\n  // If no `paymasterAndData` is provided, we use an empty bytes string.\r\n  if (account.entryPoint.version === '0.6' && !request.paymasterAndData)\r\n    request.paymasterAndData = '0x'\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Fill User Operation with gas-related properties.\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n\r\n  if (properties.includes('gas')) {\r\n    // If the Account has opinionated gas estimation logic, run the `estimateGas` hook and\r\n    // fill the request with the prepared gas properties.\r\n    if (account.userOperation?.estimateGas) {\r\n      const gas = await account.userOperation.estimateGas(\r\n        request as UserOperation,\r\n      )\r\n      request = {\r\n        ...request,\r\n        ...gas,\r\n      } as PrepareUserOperationRequest\r\n    }\r\n\r\n    // If not all the gas properties are already populated, we will need to estimate the gas\r\n    // to fill the gas properties.\r\n    if (\r\n      typeof request.callGasLimit === 'undefined' ||\r\n      typeof request.preVerificationGas === 'undefined' ||\r\n      typeof request.verificationGasLimit === 'undefined' ||\r\n      (request.paymaster &&\r\n        typeof request.paymasterPostOpGasLimit === 'undefined') ||\r\n      (request.paymaster &&\r\n        typeof request.paymasterVerificationGasLimit === 'undefined')\r\n    ) {\r\n      const gas = await getAction(\r\n        bundlerClient,\r\n        estimateUserOperationGas,\r\n        'estimateUserOperationGas',\r\n      )({\r\n        account,\r\n        // Some Bundlers fail if nullish gas values are provided for gas estimation :') –\r\n        // so we will need to set a default zeroish value.\r\n        callGasLimit: 0n,\r\n        preVerificationGas: 0n,\r\n        verificationGasLimit: 0n,\r\n        stateOverride,\r\n        ...(request.paymaster\r\n          ? {\r\n              paymasterPostOpGasLimit: 0n,\r\n              paymasterVerificationGasLimit: 0n,\r\n            }\r\n          : {}),\r\n        ...request,\r\n      } as EstimateUserOperationGasParameters)\r\n      request = {\r\n        ...request,\r\n        callGasLimit: request.callGasLimit ?? gas.callGasLimit,\r\n        preVerificationGas:\r\n          request.preVerificationGas ?? gas.preVerificationGas,\r\n        verificationGasLimit:\r\n          request.verificationGasLimit ?? gas.verificationGasLimit,\r\n        paymasterPostOpGasLimit:\r\n          request.paymasterPostOpGasLimit ?? gas.paymasterPostOpGasLimit,\r\n        paymasterVerificationGasLimit:\r\n          request.paymasterVerificationGasLimit ??\r\n          gas.paymasterVerificationGasLimit,\r\n      } as PrepareUserOperationRequest\r\n    }\r\n  }\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Fill User Operation with paymaster-related properties for **sending** the User Operation.\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n\r\n  // If the User Operation is intended to be sponsored, we will need to fill the paymaster-related\r\n  // User Operation properties required to send the User Operation.\r\n  if (\r\n    properties.includes('paymaster') &&\r\n    getPaymasterData &&\r\n    !paymasterAddress &&\r\n    !parameters.paymasterAndData &&\r\n    !isPaymasterPopulated\r\n  ) {\r\n    // Retrieve paymaster-related User Operation properties to be used for **sending** the User Operation.\r\n    const paymaster = await getPaymasterData({\r\n      chainId: await getChainId(),\r\n      entryPointAddress: account.entryPoint.address,\r\n      context: paymasterContext,\r\n      ...(request as UserOperation),\r\n    })\r\n    request = {\r\n      ...request,\r\n      ...paymaster,\r\n    } as PrepareUserOperationRequest\r\n  }\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Remove redundant properties that do not conform to the User Operation schema.\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n\r\n  delete request.calls\r\n  delete request.parameters\r\n  delete request.paymasterContext\r\n  if (typeof request.paymaster !== 'string') delete request.paymaster\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n\r\n  return request as unknown as PrepareUserOperationReturnType<\r\n    account,\r\n    accountOverride,\r\n    calls,\r\n    request\r\n  >\r\n}\r\n", "import type { Address, Narrow } from 'abitype'\r\nimport {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../../../accounts/utils/parseAccount.js'\r\nimport type { Client } from '../../../clients/createClient.js'\r\nimport type { Transport } from '../../../clients/transports/createTransport.js'\r\nimport { AccountNotFoundError } from '../../../errors/account.js'\r\nimport type { BaseError } from '../../../errors/base.js'\r\nimport type { ErrorType } from '../../../errors/utils.js'\r\nimport type { Calls } from '../../../types/calls.js'\r\nimport type { Chain } from '../../../types/chain.js'\r\nimport type { Hex } from '../../../types/misc.js'\r\nimport type { StateOverride } from '../../../types/stateOverride.js'\r\nimport type {\r\n  Assign,\r\n  MaybeRequired,\r\n  OneOf,\r\n  Prettify,\r\n} from '../../../types/utils.js'\r\nimport type { RequestErrorType } from '../../../utils/buildRequest.js'\r\nimport { getAction } from '../../../utils/getAction.js'\r\nimport { serializeStateOverride } from '../../../utils/stateOverride.js'\r\nimport type { SmartAccount } from '../../accounts/types.js'\r\nimport type { PaymasterActions } from '../../clients/decorators/paymaster.js'\r\nimport type {\r\n  DeriveSmartAccount,\r\n  GetSmartAccountParameter,\r\n} from '../../types/account.js'\r\nimport type {\r\n  DeriveEntryPointVersion,\r\n  EntryPointVersion,\r\n} from '../../types/entryPointVersion.js'\r\nimport type {\r\n  EstimateUserOperationGasReturnType as EstimateUserOperationGasReturnType_,\r\n  UserOperation,\r\n  UserOperationRequest,\r\n} from '../../types/userOperation.js'\r\nimport { getUserOperationError } from '../../utils/errors/getUserOperationError.js'\r\nimport {\r\n  type FormatUserOperationGasErrorType,\r\n  formatUserOperationGas,\r\n} from '../../utils/formatters/userOperationGas.js'\r\nimport {\r\n  type FormatUserOperationRequestErrorType,\r\n  formatUserOperationRequest,\r\n} from '../../utils/formatters/userOperationRequest.js'\r\nimport {\r\n  type PrepareUserOperationErrorType,\r\n  type PrepareUserOperationParameters,\r\n  prepareUserOperation,\r\n} from './prepareUserOperation.js'\r\n\r\nexport type EstimateUserOperationGasParameters<\r\n  account extends SmartAccount | undefined = SmartAccount | undefined,\r\n  accountOverride extends SmartAccount | undefined = SmartAccount | undefined,\r\n  calls extends readonly unknown[] = readonly unknown[],\r\n  //\r\n  _derivedAccount extends SmartAccount | undefined = DeriveSmartAccount<\r\n    account,\r\n    accountOverride\r\n  >,\r\n  _derivedVersion extends\r\n    EntryPointVersion = DeriveEntryPointVersion<_derivedAccount>,\r\n> = GetSmartAccountParameter<account, accountOverride, false> &\r\n  (\r\n    | UserOperation // Accept a full-formed User Operation.\r\n    | Assign<\r\n        // Accept a partially-formed User Operation (UserOperationRequest) to be filled.\r\n        UserOperationRequest<_derivedVersion>,\r\n        OneOf<{ calls: Calls<Narrow<calls>> } | { callData: Hex }> & {\r\n          paymaster?:\r\n            | Address\r\n            | true\r\n            | {\r\n                /** Retrieves paymaster-related User Operation properties to be used for sending the User Operation. */\r\n                getPaymasterData?:\r\n                  | PaymasterActions['getPaymasterData']\r\n                  | undefined\r\n                /** Retrieves paymaster-related User Operation properties to be used for gas estimation. */\r\n                getPaymasterStubData?:\r\n                  | PaymasterActions['getPaymasterStubData']\r\n                  | undefined\r\n              }\r\n            | undefined\r\n          /** Paymaster context to pass to `getPaymasterData` and `getPaymasterStubData` calls. */\r\n          paymasterContext?: unknown | undefined\r\n        }\r\n      >\r\n  ) &\r\n  // Allow the EntryPoint address to be overridden, if no Account is provided, it will need to be required.\r\n  MaybeRequired<\r\n    { entryPointAddress?: Address },\r\n    _derivedAccount extends undefined ? true : false\r\n  > & {\r\n    /** State overrides for the User Operation call. */\r\n    stateOverride?: StateOverride | undefined\r\n  }\r\n\r\nexport type EstimateUserOperationGasReturnType<\r\n  account extends SmartAccount | undefined = SmartAccount | undefined,\r\n  accountOverride extends SmartAccount | undefined = SmartAccount | undefined,\r\n  //\r\n  _derivedAccount extends SmartAccount | undefined = DeriveSmartAccount<\r\n    account,\r\n    accountOverride\r\n  >,\r\n  _derivedVersion extends\r\n    EntryPointVersion = DeriveEntryPointVersion<_derivedAccount>,\r\n> = Prettify<EstimateUserOperationGasReturnType_<_derivedVersion>>\r\n\r\nexport type EstimateUserOperationGasErrorType =\r\n  | ParseAccountErrorType\r\n  | PrepareUserOperationErrorType\r\n  | FormatUserOperationRequestErrorType\r\n  | FormatUserOperationGasErrorType\r\n  | RequestErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns an estimate of gas values necessary to execute the User Operation.\r\n *\r\n * - Docs: https://viem.sh/actions/bundler/estimateUserOperationGas\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link EstimateUserOperationGasParameters}\r\n * @returns The gas estimate (in wei). {@link EstimateUserOperationGasReturnType}\r\n *\r\n * @example\r\n * import { createBundlerClient, http, parseEther } from 'viem'\r\n * import { toSmartAccount } from 'viem/accounts'\r\n * import { mainnet } from 'viem/chains'\r\n * import { estimateUserOperationGas } from 'viem/actions'\r\n *\r\n * const account = await toSmartAccount({ ... })\r\n *\r\n * const bundlerClient = createBundlerClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n *\r\n * const values = await estimateUserOperationGas(bundlerClient, {\r\n *   account,\r\n *   calls: [{ to: '0x...', value: parseEther('1') }],\r\n * })\r\n */\r\nexport async function estimateUserOperationGas<\r\n  const calls extends readonly unknown[],\r\n  account extends SmartAccount | undefined,\r\n  accountOverride extends SmartAccount | undefined = undefined,\r\n>(\r\n  client: Client<Transport, Chain | undefined, account>,\r\n  parameters: EstimateUserOperationGasParameters<\r\n    account,\r\n    accountOverride,\r\n    calls\r\n  >,\r\n): Promise<EstimateUserOperationGasReturnType<account, accountOverride>> {\r\n  const {\r\n    account: account_ = client.account,\r\n    entryPointAddress,\r\n    stateOverride,\r\n  } = parameters\r\n\r\n  if (!account_ && !parameters.sender) throw new AccountNotFoundError()\r\n  const account = account_ ? parseAccount(account_) : undefined\r\n\r\n  const rpcStateOverride = serializeStateOverride(stateOverride)\r\n\r\n  const request = account\r\n    ? await getAction(\r\n        client,\r\n        prepareUserOperation,\r\n        'prepareUserOperation',\r\n      )({\r\n        ...parameters,\r\n        parameters: [\r\n          'authorization',\r\n          'factory',\r\n          'nonce',\r\n          'paymaster',\r\n          'signature',\r\n        ],\r\n      } as unknown as PrepareUserOperationParameters)\r\n    : parameters\r\n\r\n  try {\r\n    const params = [\r\n      formatUserOperationRequest(request as UserOperation),\r\n      (entryPointAddress ?? account?.entryPoint?.address)!,\r\n    ] as const\r\n\r\n    const result = await client.request({\r\n      method: 'eth_estimateUserOperationGas',\r\n      params: rpcStateOverride ? [...params, rpcStateOverride] : [...params],\r\n    })\r\n    return formatUserOperationGas(result) as EstimateUserOperationGasReturnType<\r\n      account,\r\n      accountOverride\r\n    >\r\n  } catch (error) {\r\n    const calls = (parameters as any).calls\r\n    throw getUserOperationError(error as BaseError, {\r\n      ...(request as UserOperation),\r\n      ...(calls ? { calls } : {}),\r\n    })\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\nimport type { Client } from '../../../clients/createClient.js'\r\nimport type { Transport } from '../../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../../errors/utils.js'\r\nimport type { RequestErrorType } from '../../../utils/buildRequest.js'\r\n\r\nexport type GetSupportedEntryPointsReturnType = readonly Address[]\r\nexport type GetSupportedEntryPointsErrorType = RequestErrorType | ErrorType\r\n\r\n/**\r\n * Returns the EntryPoints that the bundler supports.\r\n *\r\n * - Docs: https://viem.sh/actions/bundler/getSupportedEntryPoints\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetSupportedEntryPointsParameters}\r\n * @returns Supported Entry Points. {@link GetSupportedEntryPointsReturnType}\r\n *\r\n * @example\r\n * import { createBundlerClient, http, parseEther } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getSupportedEntryPoints } from 'viem/actions'\r\n *\r\n * const bundlerClient = createBundlerClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n *\r\n * const addresses = await getSupportedEntryPoints(bundlerClient)\r\n */\r\nexport function getSupportedEntryPoints(client: Client<Transport>) {\r\n  return client.request({ method: 'eth_supportedEntryPoints' })\r\n}\r\n", "import type { ErrorType } from '../../../errors/utils.js'\r\nimport type { RpcUserOperation } from '../../types/rpc.js'\r\nimport type { UserOperation } from '../../types/userOperation.js'\r\n\r\nexport type FormatUserOperationErrorType = ErrorType\r\n\r\nexport function formatUserOperation(parameters: RpcUserOperation) {\r\n  const userOperation = { ...parameters } as unknown as UserOperation\r\n\r\n  if (parameters.callGasLimit)\r\n    userOperation.callGasLimit = BigInt(parameters.callGasLimit)\r\n  if (parameters.maxFeePerGas)\r\n    userOperation.maxFeePerGas = BigInt(parameters.maxFeePerGas)\r\n  if (parameters.maxPriorityFeePerGas)\r\n    userOperation.maxPriorityFeePerGas = BigInt(parameters.maxPriorityFeePerGas)\r\n  if (parameters.nonce) userOperation.nonce = BigInt(parameters.nonce)\r\n  if (parameters.paymasterPostOpGasLimit)\r\n    userOperation.paymasterPostOpGasLimit = BigInt(\r\n      parameters.paymasterPostOpGasLimit,\r\n    )\r\n  if (parameters.paymasterVerificationGasLimit)\r\n    userOperation.paymasterVerificationGasLimit = BigInt(\r\n      parameters.paymasterVerificationGasLimit,\r\n    )\r\n  if (parameters.preVerificationGas)\r\n    userOperation.preVerificationGas = BigInt(parameters.preVerificationGas)\r\n  if (parameters.verificationGasLimit)\r\n    userOperation.verificationGasLimit = BigInt(parameters.verificationGasLimit)\r\n\r\n  return userOperation\r\n}\r\n", "import type { Address } from 'abitype'\r\nimport type { Client } from '../../../clients/createClient.js'\r\nimport type { Transport } from '../../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../../errors/utils.js'\r\nimport type { Hash } from '../../../types/misc.js'\r\nimport type { Prettify } from '../../../types/utils.js'\r\nimport type { RequestErrorType } from '../../../utils/buildRequest.js'\r\nimport {\r\n  UserOperationNotFoundError,\r\n  type UserOperationNotFoundErrorType,\r\n} from '../../errors/userOperation.js'\r\nimport type { UserOperation } from '../../types/userOperation.js'\r\nimport { formatUserOperation } from '../../utils/formatters/userOperation.js'\r\n\r\nexport type GetUserOperationParameters = {\r\n  /** The hash of the User Operation. */\r\n  hash: Hash\r\n}\r\n\r\nexport type GetUserOperationReturnType = Prettify<{\r\n  /** The block hash the User Operation was included on. */\r\n  blockHash: Hash\r\n  /** The block number the User Operation was included on. */\r\n  blockNumber: bigint\r\n  /** The EntryPoint which handled the User Operation. */\r\n  entryPoint: Address\r\n  /** The hash of the transaction which included the User Operation. */\r\n  transactionHash: Hash\r\n  /** The User Operation. */\r\n  userOperation: UserOperation\r\n}>\r\n\r\nexport type GetUserOperationErrorType =\r\n  | RequestErrorType\r\n  | UserOperationNotFoundErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Retrieves information about a User Operation given a hash.\r\n *\r\n * - Docs: https://viem.sh/account-abstraction/actions/bundler/getUserOperation\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetUserOperationParameters}\r\n * @returns The receipt. {@link GetUserOperationReturnType}\r\n *\r\n * @example\r\n * import { createBundlerClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getUserOperation } from 'viem/actions\r\n *\r\n * const client = createBundlerClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n *\r\n * const receipt = await getUserOperation(client, {\r\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\r\n * })\r\n */\r\nexport async function getUserOperation(\r\n  client: Client<Transport>,\r\n  { hash }: GetUserOperationParameters,\r\n) {\r\n  const result = await client.request(\r\n    {\r\n      method: 'eth_getUserOperationByHash',\r\n      params: [hash],\r\n    },\r\n    { dedupe: true },\r\n  )\r\n\r\n  if (!result) throw new UserOperationNotFoundError({ hash })\r\n\r\n  const { blockHash, blockNumber, entryPoint, transactionHash, userOperation } =\r\n    result\r\n\r\n  return {\r\n    blockHash,\r\n    blockNumber: BigInt(blockNumber),\r\n    entryPoint,\r\n    transactionHash,\r\n    userOperation: formatUserOperation(userOperation),\r\n  }\r\n}\r\n", "import type { ErrorType } from '../../../errors/utils.js'\r\nimport { formatLog } from '../../../utils/formatters/log.js'\r\nimport { formatTransactionReceipt } from '../../../utils/formatters/transactionReceipt.js'\r\nimport type { RpcUserOperationReceipt } from '../../types/rpc.js'\r\nimport type { UserOperationReceipt } from '../../types/userOperation.js'\r\n\r\nexport type FormatUserOperationReceiptErrorType = ErrorType\r\n\r\nexport function formatUserOperationReceipt(\r\n  parameters: RpcUserOperationReceipt,\r\n) {\r\n  const receipt = { ...parameters } as unknown as UserOperationReceipt\r\n\r\n  if (parameters.actualGasCost)\r\n    receipt.actualGasCost = BigInt(parameters.actualGasCost)\r\n  if (parameters.actualGasUsed)\r\n    receipt.actualGasUsed = BigInt(parameters.actualGasUsed)\r\n  if (parameters.logs)\r\n    receipt.logs = parameters.logs.map((log) => formatLog(log)) as any\r\n  if (parameters.receipt)\r\n    receipt.receipt = formatTransactionReceipt(receipt.receipt as any)\r\n\r\n  return receipt\r\n}\r\n", "import type { Client } from '../../../clients/createClient.js'\r\nimport type { Transport } from '../../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../../errors/utils.js'\r\nimport type { Hash } from '../../../types/misc.js'\r\nimport type { Prettify } from '../../../types/utils.js'\r\nimport type { RequestErrorType } from '../../../utils/buildRequest.js'\r\nimport {\r\n  UserOperationReceiptNotFoundError,\r\n  type UserOperationReceiptNotFoundErrorType,\r\n} from '../../errors/userOperation.js'\r\nimport type { UserOperationReceipt } from '../../types/userOperation.js'\r\nimport { formatUserOperationReceipt } from '../../utils/formatters/userOperationReceipt.js'\r\n\r\nexport type GetUserOperationReceiptParameters = {\r\n  /** The hash of the User Operation. */\r\n  hash: Hash\r\n}\r\n\r\nexport type GetUserOperationReceiptReturnType = Prettify<UserOperationReceipt>\r\n\r\nexport type GetUserOperationReceiptErrorType =\r\n  | RequestErrorType\r\n  | UserOperationReceiptNotFoundErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns the User Operation Receipt given a User Operation hash.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/bundler/getUserOperationReceipt\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetUserOperationReceiptParameters}\r\n * @returns The receipt. {@link GetUserOperationReceiptReturnType}\r\n *\r\n * @example\r\n * import { createBundlerClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getUserOperationReceipt } from 'viem/actions\r\n *\r\n * const client = createBundlerClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n *\r\n * const receipt = await getUserOperationReceipt(client, {\r\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\r\n * })\r\n */\r\nexport async function getUserOperationReceipt(\r\n  client: Client<Transport>,\r\n  { hash }: GetUserOperationReceiptParameters,\r\n) {\r\n  const receipt = await client.request(\r\n    {\r\n      method: 'eth_getUserOperationReceipt',\r\n      params: [hash],\r\n    },\r\n    { dedupe: true },\r\n  )\r\n\r\n  if (!receipt) throw new UserOperationReceiptNotFoundError({ hash })\r\n\r\n  return formatUserOperationReceipt(receipt)\r\n}\r\n", "import type { Address, Narrow } from 'abitype'\r\nimport { parseAccount } from '../../../accounts/utils/parseAccount.js'\r\nimport type { Client } from '../../../clients/createClient.js'\r\nimport type { Transport } from '../../../clients/transports/createTransport.js'\r\nimport { AccountNotFoundError } from '../../../errors/account.js'\r\nimport type { BaseError } from '../../../errors/base.js'\r\nimport type { ErrorType } from '../../../errors/utils.js'\r\nimport type { Calls } from '../../../types/calls.js'\r\nimport type { Chain } from '../../../types/chain.js'\r\nimport type { Hex } from '../../../types/misc.js'\r\nimport type { Assign, MaybeRequired, OneOf } from '../../../types/utils.js'\r\nimport type { RequestErrorType } from '../../../utils/buildRequest.js'\r\nimport { getAction } from '../../../utils/getAction.js'\r\nimport type { SmartAccount } from '../../accounts/types.js'\r\nimport type { PaymasterActions } from '../../clients/decorators/paymaster.js'\r\nimport type {\r\n  DeriveSmartAccount,\r\n  GetSmartAccountParameter,\r\n} from '../../types/account.js'\r\nimport type {\r\n  DeriveEntryPointVersion,\r\n  EntryPointVersion,\r\n} from '../../types/entryPointVersion.js'\r\nimport type {\r\n  UserOperation,\r\n  UserOperationRequest,\r\n} from '../../types/userOperation.js'\r\nimport { getUserOperationError } from '../../utils/errors/getUserOperationError.js'\r\nimport {\r\n  type FormatUserOperationRequestErrorType,\r\n  formatUserOperationRequest,\r\n} from '../../utils/formatters/userOperationRequest.js'\r\nimport {\r\n  type PrepareUserOperationErrorType,\r\n  type PrepareUserOperationParameters,\r\n  prepareUserOperation,\r\n} from './prepareUserOperation.js'\r\n\r\nexport type SendUserOperationParameters<\r\n  account extends SmartAccount | undefined = SmartAccount | undefined,\r\n  accountOverride extends SmartAccount | undefined = SmartAccount | undefined,\r\n  calls extends readonly unknown[] = readonly unknown[],\r\n  //\r\n  _derivedAccount extends SmartAccount | undefined = DeriveSmartAccount<\r\n    account,\r\n    accountOverride\r\n  >,\r\n  _derivedVersion extends\r\n    EntryPointVersion = DeriveEntryPointVersion<_derivedAccount>,\r\n> = GetSmartAccountParameter<account, accountOverride, false> &\r\n  (\r\n    | UserOperation // Accept a full-formed User Operation.\r\n    | Assign<\r\n        // Accept a partially-formed User Operation (UserOperationRequest) to be filled.\r\n        UserOperationRequest<_derivedVersion>,\r\n        OneOf<{ calls: Calls<Narrow<calls>> } | { callData: Hex }> & {\r\n          paymaster?:\r\n            | Address\r\n            | true\r\n            | {\r\n                /** Retrieves paymaster-related User Operation properties to be used for sending the User Operation. */\r\n                getPaymasterData?:\r\n                  | PaymasterActions['getPaymasterData']\r\n                  | undefined\r\n                /** Retrieves paymaster-related User Operation properties to be used for gas estimation. */\r\n                getPaymasterStubData?:\r\n                  | PaymasterActions['getPaymasterStubData']\r\n                  | undefined\r\n              }\r\n            | undefined\r\n          /** Paymaster context to pass to `getPaymasterData` and `getPaymasterStubData` calls. */\r\n          paymasterContext?: unknown | undefined\r\n        }\r\n      >\r\n  ) &\r\n  // Allow the EntryPoint address to be overridden, if no Account is provided, it will need to be required.\r\n  MaybeRequired<\r\n    { entryPointAddress?: Address },\r\n    _derivedAccount extends undefined ? true : false\r\n  >\r\nexport type SendUserOperationReturnType = Hex\r\n\r\nexport type SendUserOperationErrorType =\r\n  | FormatUserOperationRequestErrorType\r\n  | PrepareUserOperationErrorType\r\n  | RequestErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Broadcasts a User Operation to the Bundler.\r\n *\r\n * - Docs: https://viem.sh/actions/bundler/sendUserOperation\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link SendUserOperationParameters}\r\n * @returns The User Operation hash. {@link SendUserOperationReturnType}\r\n *\r\n * @example\r\n * import { createBundlerClient, http, parseEther } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { toSmartAccount } from 'viem/accounts'\r\n * import { sendUserOperation } from 'viem/actions'\r\n *\r\n * const account = await toSmartAccount({ ... })\r\n *\r\n * const bundlerClient = createBundlerClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n *\r\n * const values = await sendUserOperation(bundlerClient, {\r\n *   account,\r\n *   calls: [{ to: '0x...', value: parseEther('1') }],\r\n * })\r\n */\r\nexport async function sendUserOperation<\r\n  const calls extends readonly unknown[],\r\n  account extends SmartAccount | undefined,\r\n  accountOverride extends SmartAccount | undefined = undefined,\r\n>(\r\n  client: Client<Transport, Chain | undefined, account>,\r\n  parameters: SendUserOperationParameters<account, accountOverride, calls>,\r\n) {\r\n  const { account: account_ = client.account, entryPointAddress } = parameters\r\n\r\n  if (!account_ && !parameters.sender) throw new AccountNotFoundError()\r\n  const account = account_ ? parseAccount(account_) : undefined\r\n\r\n  const request = account\r\n    ? await getAction(\r\n        client,\r\n        prepareUserOperation,\r\n        'prepareUserOperation',\r\n      )(parameters as unknown as PrepareUserOperationParameters)\r\n    : parameters\r\n\r\n  const signature = (parameters.signature ||\r\n    (await account?.signUserOperation?.(request as UserOperation)))!\r\n\r\n  const rpcParameters = formatUserOperationRequest({\r\n    ...request,\r\n    signature,\r\n  } as UserOperation)\r\n\r\n  try {\r\n    return await client.request(\r\n      {\r\n        method: 'eth_sendUserOperation',\r\n        params: [\r\n          rpcParameters,\r\n          (entryPointAddress ?? account?.entryPoint?.address)!,\r\n        ],\r\n      },\r\n      { retryCount: 0 },\r\n    )\r\n  } catch (error) {\r\n    const calls = (parameters as any).calls\r\n    throw getUserOperationError(error as BaseError, {\r\n      ...(request as UserOperation),\r\n      ...(calls ? { calls } : {}),\r\n      signature,\r\n    })\r\n  }\r\n}\r\n", "import type { Client } from '../../../clients/createClient.js'\r\nimport type { Transport } from '../../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../../errors/utils.js'\r\nimport type { Hash } from '../../../types/misc.js'\r\nimport type { Prettify } from '../../../types/utils.js'\r\nimport { getAction } from '../../../utils/getAction.js'\r\nimport { type ObserveErrorType, observe } from '../../../utils/observe.js'\r\nimport { type PollErrorType, poll } from '../../../utils/poll.js'\r\nimport { stringify } from '../../../utils/stringify.js'\r\nimport {\r\n  WaitForUserOperationReceiptTimeoutError,\r\n  type WaitForUserOperationReceiptTimeoutErrorType,\r\n} from '../../errors/userOperation.js'\r\nimport type { UserOperationReceipt } from '../../types/userOperation.js'\r\nimport {\r\n  type GetUserOperationReceiptErrorType,\r\n  getUserOperationReceipt,\r\n} from './getUserOperationReceipt.js'\r\n\r\nexport type WaitForUserOperationReceiptParameters = {\r\n  /** The hash of the User Operation. */\r\n  hash: Hash\r\n  /**\r\n   * Polling frequency (in ms). Defaults to the client's pollingInterval config.\r\n   * @default client.pollingInterval\r\n   */\r\n  pollingInterval?: number | undefined\r\n  /**\r\n   * The number of times to retry.\r\n   * @default 6\r\n   */\r\n  retryCount?: number | undefined\r\n  /** Optional timeout (in ms) to wait before stopping polling. */\r\n  timeout?: number | undefined\r\n}\r\n\r\nexport type WaitForUserOperationReceiptReturnType =\r\n  Prettify<UserOperationReceipt>\r\n\r\nexport type WaitForUserOperationReceiptErrorType =\r\n  | WaitForUserOperationReceiptTimeoutErrorType\r\n  | PollErrorType\r\n  | ObserveErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Waits for the User Operation to be included on a [Block](https://viem.sh/docs/glossary/terms#block) (one confirmation), and then returns the User Operation receipt.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/bundler/waitForUserOperationReceipt\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link WaitForUserOperationReceiptParameters}\r\n * @returns The receipt. {@link WaitForUserOperationReceiptReturnType}\r\n *\r\n * @example\r\n * import { createBundlerClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { waitForUserOperationReceipt } from 'viem/actions'\r\n *\r\n * const client = createBundlerClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n *\r\n * const receipt = await waitForUserOperationReceipt(client, {\r\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\r\n * })\r\n */\r\nexport function waitForUserOperationReceipt(\r\n  client: Client<Transport>,\r\n  parameters: WaitForUserOperationReceiptParameters,\r\n): Promise<WaitForUserOperationReceiptReturnType> {\r\n  const {\r\n    hash,\r\n    pollingInterval = client.pollingInterval,\r\n    retryCount,\r\n    timeout = 120_000,\r\n  } = parameters\r\n\r\n  let count = 0\r\n  const observerId = stringify([\r\n    'waitForUserOperationReceipt',\r\n    client.uid,\r\n    hash,\r\n  ])\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const unobserve = observe(observerId, { resolve, reject }, (emit) => {\r\n      const done = (fn: () => void) => {\r\n        unpoll()\r\n        fn()\r\n        unobserve()\r\n      }\r\n\r\n      const unpoll = poll(\r\n        async () => {\r\n          if (retryCount && count >= retryCount)\r\n            done(() =>\r\n              emit.reject(\r\n                new WaitForUserOperationReceiptTimeoutError({ hash }),\r\n              ),\r\n            )\r\n\r\n          try {\r\n            const receipt = await getAction(\r\n              client,\r\n              getUserOperationReceipt,\r\n              'getUserOperationReceipt',\r\n            )({ hash })\r\n            done(() => emit.resolve(receipt))\r\n          } catch (err) {\r\n            const error = err as GetUserOperationReceiptErrorType\r\n            if (error.name !== 'UserOperationReceiptNotFoundError')\r\n              done(() => emit.reject(error))\r\n          }\r\n\r\n          count++\r\n        },\r\n        {\r\n          emitOnBegin: true,\r\n          interval: pollingInterval,\r\n        },\r\n      )\r\n\r\n      if (timeout)\r\n        setTimeout(\r\n          () =>\r\n            done(() =>\r\n              emit.reject(\r\n                new WaitForUserOperationReceiptTimeoutError({ hash }),\r\n              ),\r\n            ),\r\n          timeout,\r\n        )\r\n\r\n      return unpoll\r\n    })\r\n  })\r\n}\r\n", "import {\r\n  type GetChainIdReturnType,\r\n  getChainId,\r\n} from '../../../actions/public/getChainId.js'\r\nimport type { Client } from '../../../clients/createClient.js'\r\nimport type { Transport } from '../../../clients/transports/createTransport.js'\r\nimport type { Chain } from '../../../types/chain.js'\r\nimport type { SmartAccount } from '../../accounts/types.js'\r\nimport {\r\n  type EstimateUserOperationGasParameters,\r\n  type EstimateUserOperationGasReturnType,\r\n  estimateUserOperationGas,\r\n} from '../../actions/bundler/estimateUserOperationGas.js'\r\nimport {\r\n  type GetSupportedEntryPointsReturnType,\r\n  getSupportedEntryPoints,\r\n} from '../../actions/bundler/getSupportedEntryPoints.js'\r\nimport {\r\n  type GetUserOperationParameters,\r\n  type GetUserOperationReturnType,\r\n  getUserOperation,\r\n} from '../../actions/bundler/getUserOperation.js'\r\nimport {\r\n  type GetUserOperationReceiptParameters,\r\n  type GetUserOperationReceiptReturnType,\r\n  getUserOperationReceipt,\r\n} from '../../actions/bundler/getUserOperationReceipt.js'\r\nimport {\r\n  type PrepareUserOperationParameters,\r\n  type PrepareUserOperationRequest,\r\n  type PrepareUserOperationReturnType,\r\n  prepareUserOperation,\r\n} from '../../actions/bundler/prepareUserOperation.js'\r\nimport {\r\n  type SendUserOperationParameters,\r\n  type SendUserOperationReturnType,\r\n  sendUserOperation,\r\n} from '../../actions/bundler/sendUserOperation.js'\r\nimport {\r\n  type WaitForUserOperationReceiptParameters,\r\n  type WaitForUserOperationReceiptReturnType,\r\n  waitForUserOperationReceipt,\r\n} from '../../actions/bundler/waitForUserOperationReceipt.js'\r\n\r\nexport type BundlerActions<\r\n  account extends SmartAccount | undefined = SmartAccount | undefined,\r\n> = {\r\n  /**\r\n   * Returns an estimate of gas values necessary to execute the User Operation.\r\n   *\r\n   * - Docs: https://viem.sh/actions/bundler/estimateUserOperationGas\r\n   *\r\n   * @param client - Client to use\r\n   * @param parameters - {@link EstimateUserOperationGasParameters}\r\n   * @returns The gas estimate (in wei). {@link EstimateUserOperationGasReturnType}\r\n   *\r\n   * @example\r\n   * import { createBundlerClient, http, parseEther } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   * import { toSmartAccount } from 'viem/accounts'\r\n   *\r\n   * const account = await toSmartAccount({ ... })\r\n   *\r\n   * const bundlerClient = createBundlerClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   *\r\n   * const values = await bundlerClient.estimateUserOperationGas({\r\n   *   account,\r\n   *   calls: [{ to: '0x...', value: parseEther('1') }],\r\n   * })\r\n   */\r\n  estimateUserOperationGas: <\r\n    const calls extends readonly unknown[],\r\n    accountOverride extends SmartAccount | undefined = undefined,\r\n  >(\r\n    parameters: EstimateUserOperationGasParameters<\r\n      account,\r\n      accountOverride,\r\n      calls\r\n    >,\r\n  ) => Promise<EstimateUserOperationGasReturnType<account, accountOverride>>\r\n  /**\r\n   * Returns the chain ID associated with the bundler.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getChainId\r\n   * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\r\n   *\r\n   * @returns The current chain ID. {@link GetChainIdReturnType}\r\n   *\r\n   * @example\r\n   * import { http } from 'viem'\r\n   * import { createBundlerClient, mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const chainId = await client.getChainId()\r\n   * // 1\r\n   */\r\n  getChainId: () => Promise<GetChainIdReturnType>\r\n  /**\r\n   * Returns the EntryPoints that the bundler supports.\r\n   *\r\n   * - Docs: https://viem.sh/actions/bundler/getSupportedEntryPoints\r\n   *\r\n   * @param client - Client to use\r\n   * @param parameters - {@link GetSupportedEntryPointsParameters}\r\n   * @returns Supported Entry Points. {@link GetSupportedEntryPointsReturnType}\r\n   *\r\n   * @example\r\n   * import { createBundlerClient, http, parseEther } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const bundlerClient = createBundlerClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   *\r\n   * const addresses = await bundlerClient.getSupportedEntryPoints()\r\n   */\r\n  getSupportedEntryPoints: () => Promise<GetSupportedEntryPointsReturnType>\r\n  /**\r\n   * Returns the information about a User Operation given a hash.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/bundler/getUserOperation\r\n   *\r\n   * @param client - Client to use\r\n   * @param parameters - {@link GetUserOperationParameters}\r\n   * @returns The receipt. {@link GetUserOperationReturnType}\r\n   *\r\n   * @example\r\n   * import { createBundlerClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createBundlerClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   *\r\n   * const receipt = await client.getUserOperation({\r\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\r\n   * })\r\n   */\r\n  getUserOperation: (\r\n    parameters: GetUserOperationParameters,\r\n  ) => Promise<GetUserOperationReturnType>\r\n  /**\r\n   * Returns the User Operation Receipt given a User Operation hash.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/bundler/getUserOperationReceipt\r\n   *\r\n   * @param client - Client to use\r\n   * @param parameters - {@link GetUserOperationReceiptParameters}\r\n   * @returns The receipt. {@link GetUserOperationReceiptReturnType}\r\n   *\r\n   * @example\r\n   * import { createBundlerClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createBundlerClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   *\r\n   * const receipt = await client.getUserOperationReceipt({\r\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\r\n   * })\r\n   */\r\n  getUserOperationReceipt: (\r\n    parameters: GetUserOperationReceiptParameters,\r\n  ) => Promise<GetUserOperationReceiptReturnType>\r\n  /**\r\n   * Prepares a User Operation and fills in missing properties.\r\n   *\r\n   * - Docs: https://viem.sh/actions/bundler/prepareUserOperation\r\n   *\r\n   * @param args - {@link PrepareUserOperationParameters}\r\n   * @returns The User Operation. {@link PrepareUserOperationReturnType}\r\n   *\r\n   * @example\r\n   * import { createBundlerClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   * import { toSmartAccount } from 'viem/accounts'\r\n   *\r\n   * const account = await toSmartAccount({ ... })\r\n   *\r\n   * const client = createBundlerClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   *\r\n   * const request = await client.prepareUserOperation({\r\n   *   account,\r\n   *   calls: [{ to: '0x...', value: parseEther('1') }],\r\n   * })\r\n   */\r\n  prepareUserOperation: <\r\n    const calls extends readonly unknown[],\r\n    const request extends PrepareUserOperationRequest<\r\n      account,\r\n      accountOverride,\r\n      calls\r\n    >,\r\n    accountOverride extends SmartAccount | undefined = undefined,\r\n  >(\r\n    parameters: PrepareUserOperationParameters<\r\n      account,\r\n      accountOverride,\r\n      calls,\r\n      request\r\n    >,\r\n  ) => Promise<\r\n    PrepareUserOperationReturnType<account, accountOverride, calls, request>\r\n  >\r\n  /**\r\n   * Broadcasts a User Operation to the Bundler.\r\n   *\r\n   * - Docs: https://viem.sh/actions/bundler/sendUserOperation\r\n   *\r\n   * @param client - Client to use\r\n   * @param parameters - {@link SendUserOperationParameters}\r\n   * @returns The User Operation hash. {@link SendUserOperationReturnType}\r\n   *\r\n   * @example\r\n   * import { createBundlerClient, http, parseEther } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   * import { toSmartAccount } from 'viem/accounts'\r\n   *\r\n   * const account = toSmartAccount({ ... })\r\n   *\r\n   * const bundlerClient = createBundlerClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   *\r\n   * const values = await bundlerClient.sendUserOperation({\r\n   *   account,\r\n   *   calls: [{ to: '0x...', value: parseEther('1') }],\r\n   * })\r\n   */\r\n  sendUserOperation: <\r\n    const calls extends readonly unknown[],\r\n    accountOverride extends SmartAccount | undefined = undefined,\r\n  >(\r\n    parameters: SendUserOperationParameters<account, accountOverride, calls>,\r\n  ) => Promise<SendUserOperationReturnType>\r\n  /**\r\n   * Waits for the User Operation to be included on a [Block](https://viem.sh/docs/glossary/terms#block) (one confirmation), and then returns the User Operation receipt.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/bundler/waitForUserOperationReceipt\r\n   *\r\n   * @param client - Client to use\r\n   * @param parameters - {@link WaitForUserOperationReceiptParameters}\r\n   * @returns The receipt. {@link WaitForUserOperationReceiptReturnType}\r\n   *\r\n   * @example\r\n   * import { createBundlerClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createBundlerClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   *\r\n   * const receipt = await client.waitForUserOperationReceipt({\r\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\r\n   * })\r\n   */\r\n  waitForUserOperationReceipt: (\r\n    parameters: WaitForUserOperationReceiptParameters,\r\n  ) => Promise<WaitForUserOperationReceiptReturnType>\r\n}\r\n\r\nexport function bundlerActions<\r\n  transport extends Transport = Transport,\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends SmartAccount | undefined = SmartAccount | undefined,\r\n>(client: Client<transport, chain, account>): BundlerActions<account> {\r\n  return {\r\n    estimateUserOperationGas: (parameters) =>\r\n      estimateUserOperationGas(client, parameters),\r\n    getChainId: () => getChainId(client),\r\n    getSupportedEntryPoints: () => getSupportedEntryPoints(client),\r\n    getUserOperation: (parameters) => getUserOperation(client, parameters),\r\n    getUserOperationReceipt: (parameters) =>\r\n      getUserOperationReceipt(client, parameters),\r\n    prepareUserOperation: (parameters) =>\r\n      prepareUserOperation(client, parameters),\r\n    sendUserOperation: (parameters) => sendUserOperation(client, parameters),\r\n    waitForUserOperationReceipt: (parameters) =>\r\n      waitForUserOperationReceipt(client, parameters),\r\n  }\r\n}\r\n", "import type { EstimateFeesPerGasReturnType } from '../../actions/public/estimateFeesPerGas.js'\r\nimport {\r\n  type Client,\r\n  type ClientConfig,\r\n  type CreateClientErrorType,\r\n  createClient,\r\n} from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { RpcSchema } from '../../types/eip1193.js'\r\nimport type { BundlerRpcSchema } from '../../types/eip1193.js'\r\nimport type { Prettify } from '../../types/utils.js'\r\nimport type { SmartAccount } from '../accounts/types.js'\r\nimport type { UserOperationRequest } from '../types/userOperation.js'\r\nimport { type BundlerActions, bundlerActions } from './decorators/bundler.js'\r\nimport type { PaymasterActions } from './decorators/paymaster.js'\r\n\r\nexport type BundlerClientConfig<\r\n  transport extends Transport = Transport,\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends SmartAccount | undefined = SmartAccount | undefined,\r\n  client extends Client | undefined = Client | undefined,\r\n  rpcSchema extends RpcSchema | undefined = undefined,\r\n> = Prettify<\r\n  Pick<\r\n    ClientConfig<transport, chain, account, rpcSchema>,\r\n    | 'account'\r\n    | 'cacheTime'\r\n    | 'chain'\r\n    | 'key'\r\n    | 'name'\r\n    | 'pollingInterval'\r\n    | 'rpcSchema'\r\n    | 'transport'\r\n  >\r\n> & {\r\n  /** Client that points to an Execution RPC URL. */\r\n  client?: client | Client | undefined\r\n  /** Paymaster configuration. */\r\n  paymaster?:\r\n    | true\r\n    | {\r\n        /** Retrieves paymaster-related User Operation properties to be used for sending the User Operation. */\r\n        getPaymasterData?: PaymasterActions['getPaymasterData'] | undefined\r\n        /** Retrieves paymaster-related User Operation properties to be used for gas estimation. */\r\n        getPaymasterStubData?:\r\n          | PaymasterActions['getPaymasterStubData']\r\n          | undefined\r\n      }\r\n    | undefined\r\n  /** Paymaster context to pass to `getPaymasterData` and `getPaymasterStubData` calls. */\r\n  paymasterContext?: unknown\r\n  /** User Operation configuration. */\r\n  userOperation?:\r\n    | {\r\n        /** Prepares fee properties for the User Operation request. */\r\n        estimateFeesPerGas?:\r\n          | ((parameters: {\r\n              account: account | SmartAccount\r\n              bundlerClient: Client\r\n              userOperation: UserOperationRequest\r\n            }) => Promise<EstimateFeesPerGasReturnType<'eip1559'>>)\r\n          | undefined\r\n      }\r\n    | undefined\r\n}\r\n\r\nexport type BundlerClient<\r\n  transport extends Transport = Transport,\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends SmartAccount | undefined = SmartAccount | undefined,\r\n  client extends Client | undefined = Client | undefined,\r\n  rpcSchema extends RpcSchema | undefined = undefined,\r\n> = Prettify<\r\n  Client<\r\n    transport,\r\n    chain extends Chain\r\n      ? chain\r\n      : client extends Client<any, infer chain>\r\n        ? chain\r\n        : undefined,\r\n    account,\r\n    rpcSchema extends RpcSchema\r\n      ? [...BundlerRpcSchema, ...rpcSchema]\r\n      : BundlerRpcSchema,\r\n    BundlerActions<account>\r\n  >\r\n> & {\r\n  client: client\r\n  paymaster: BundlerClientConfig['paymaster'] | undefined\r\n  paymasterContext: BundlerClientConfig['paymasterContext'] | undefined\r\n  userOperation: BundlerClientConfig['userOperation'] | undefined\r\n}\r\n\r\nexport type CreateBundlerClientErrorType = CreateClientErrorType | ErrorType\r\n\r\n/**\r\n * Creates a Bundler Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\r\n *\r\n * - Docs: https://viem.sh/account-abstraction/clients/bundler\r\n *\r\n * @param config - {@link BundlerClientConfig}\r\n * @returns A Bundler Client. {@link BundlerClient}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { createBundlerClient } from 'viem/account-abstraction'\r\n * import { mainnet } from 'viem/chains'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n *\r\n * const bundlerClient = createBundlerClient({\r\n *   client,\r\n *   transport: http('https://public.pimlico.io/v2/1/rpc'),\r\n * })\r\n */\r\nexport function createBundlerClient<\r\n  transport extends Transport,\r\n  chain extends Chain | undefined = undefined,\r\n  account extends SmartAccount | undefined = undefined,\r\n  client extends Client | undefined = undefined,\r\n  rpcSchema extends RpcSchema | undefined = undefined,\r\n>(\r\n  parameters: BundlerClientConfig<transport, chain, account, client, rpcSchema>,\r\n): BundlerClient<transport, chain, account, client, rpcSchema>\r\n\r\nexport function createBundlerClient(\r\n  parameters: BundlerClientConfig,\r\n): BundlerClient {\r\n  const {\r\n    client: client_,\r\n    key = 'bundler',\r\n    name = 'Bundler Client',\r\n    paymaster,\r\n    paymasterContext,\r\n    transport,\r\n    userOperation,\r\n  } = parameters\r\n  const client = Object.assign(\r\n    createClient({\r\n      ...parameters,\r\n      chain: parameters.chain ?? client_?.chain,\r\n      key,\r\n      name,\r\n      transport,\r\n      type: 'bundlerClient',\r\n    }),\r\n    { client: client_, paymaster, paymasterContext, userOperation },\r\n  )\r\n  return client.extend(bundlerActions) as any\r\n}\r\n", "import * as Bytes from './Bytes.js'\r\nimport type * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\n\r\nconst encoder = /*#__PURE__*/ new TextEncoder()\r\nconst decoder = /*#__PURE__*/ new TextDecoder()\r\n\r\nconst integerToCharacter = /*#__PURE__*/ Object.fromEntries(\r\n  Array.from(\r\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\r\n  ).map((a, i) => [i, a.charCodeAt(0)]),\r\n)\r\n\r\nconst characterToInteger = /*#__PURE__*/ {\r\n  ...Object.fromEntries(\r\n    Array.from(\r\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\r\n    ).map((a, i) => [a.charCodeAt(0), i]),\r\n  ),\r\n  ['='.charCodeAt(0)]: 0,\r\n  ['-'.charCodeAt(0)]: 62,\r\n  ['_'.charCodeAt(0)]: 63,\r\n} as Record<number, number>\r\n\r\n/**\r\n * Encodes a {@link ox#Bytes.Bytes} to a Base64-encoded string (with optional padding and/or URL-safe characters).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Base64, Bytes } from 'ox'\r\n *\r\n * const value = Base64.fromBytes(Bytes.fromString('hello world'))\r\n * // @log: 'aGVsbG8gd29ybGQ='\r\n * ```\r\n *\r\n * @example\r\n * ### No Padding\r\n *\r\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\r\n *\r\n * ```ts twoslash\r\n * import { Base64, Bytes } from 'ox'\r\n *\r\n * const value = Base64.fromBytes(Bytes.fromString('hello world'), { pad: false })\r\n * // @log: 'aGVsbG8gd29ybGQ'\r\n * ```\r\n *\r\n * ### URL-safe Encoding\r\n *\r\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\r\n *\r\n * ```ts twoslash\r\n * import { Base64, Bytes } from 'ox'\r\n *\r\n * const value = Base64.fromBytes(Bytes.fromString('hello wod'), { url: true })\r\n * // @log: 'aGVsbG8gd29_77-9ZA=='\r\n * ```\r\n *\r\n * @param value - The byte array to encode.\r\n * @param options - Encoding options.\r\n * @returns The Base64 encoded string.\r\n */\r\nexport function fromBytes(value: Bytes.Bytes, options: fromBytes.Options = {}) {\r\n  const { pad = true, url = false } = options\r\n\r\n  const encoded = new Uint8Array(Math.ceil(value.length / 3) * 4)\r\n\r\n  for (let i = 0, j = 0; j < value.length; i += 4, j += 3) {\r\n    const y = (value[j]! << 16) + (value[j + 1]! << 8) + (value[j + 2]! | 0)\r\n    encoded[i] = integerToCharacter[y >> 18]!\r\n    encoded[i + 1] = integerToCharacter[(y >> 12) & 0x3f]!\r\n    encoded[i + 2] = integerToCharacter[(y >> 6) & 0x3f]!\r\n    encoded[i + 3] = integerToCharacter[y & 0x3f]!\r\n  }\r\n\r\n  const k = value.length % 3\r\n  const end = Math.floor(value.length / 3) * 4 + (k && k + 1)\r\n  let base64 = decoder.decode(new Uint8Array(encoded.buffer, 0, end))\r\n  if (pad && k === 1) base64 += '=='\r\n  if (pad && k === 2) base64 += '='\r\n  if (url) base64 = base64.replaceAll('+', '-').replaceAll('/', '_')\r\n  return base64\r\n}\r\n\r\nexport declare namespace fromBytes {\r\n  type Options = {\r\n    /**\r\n     * Whether to [pad](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) the Base64 encoded string.\r\n     *\r\n     * @default true\r\n     */\r\n    pad?: boolean | undefined\r\n    /**\r\n     * Whether to Base64 encode with [URL safe characters](https://datatracker.ietf.org/doc/html/rfc4648#section-5).\r\n     *\r\n     * @default false\r\n     */\r\n    url?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a {@link ox#Hex.Hex} to a Base64-encoded string (with optional padding and/or URL-safe characters).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Base64, Hex } from 'ox'\r\n *\r\n * const value = Base64.fromHex(Hex.fromString('hello world'))\r\n * // @log: 'aGVsbG8gd29ybGQ='\r\n * ```\r\n *\r\n * @example\r\n * ### No Padding\r\n *\r\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\r\n *\r\n * ```ts twoslash\r\n * import { Base64, Hex } from 'ox'\r\n *\r\n * const value = Base64.fromHex(Hex.fromString('hello world'), { pad: false })\r\n * // @log: 'aGVsbG8gd29ybGQ'\r\n * ```\r\n *\r\n * ### URL-safe Encoding\r\n *\r\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\r\n *\r\n * ```ts twoslash\r\n * import { Base64, Hex } from 'ox'\r\n *\r\n * const value = Base64.fromHex(Hex.fromString('hello wod'), { url: true })\r\n * // @log: 'aGVsbG8gd29_77-9ZA=='\r\n * ```\r\n *\r\n * @param value - The hex value to encode.\r\n * @param options - Encoding options.\r\n * @returns The Base64 encoded string.\r\n */\r\nexport function fromHex(value: Hex.Hex, options: fromHex.Options = {}) {\r\n  return fromBytes(Bytes.fromHex(value), options)\r\n}\r\n\r\nexport declare namespace fromHex {\r\n  type Options = {\r\n    /**\r\n     * Whether to [pad](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) the Base64 encoded string.\r\n     *\r\n     * @default true\r\n     */\r\n    pad?: boolean | undefined\r\n    /**\r\n     * Whether to Base64 encode with [URL safe characters](https://datatracker.ietf.org/doc/html/rfc4648#section-5).\r\n     *\r\n     * @default false\r\n     */\r\n    url?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType = fromBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a string to a Base64-encoded string (with optional padding and/or URL-safe characters).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Base64 } from 'ox'\r\n *\r\n * const value = Base64.fromString('hello world')\r\n * // @log: 'aGVsbG8gd29ybGQ='\r\n * ```\r\n *\r\n * @example\r\n * ### No Padding\r\n *\r\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\r\n *\r\n * ```ts twoslash\r\n * import { Base64 } from 'ox'\r\n *\r\n * const value = Base64.fromString('hello world', { pad: false })\r\n * // @log: 'aGVsbG8gd29ybGQ'\r\n * ```\r\n *\r\n * ### URL-safe Encoding\r\n *\r\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\r\n *\r\n * ```ts twoslash\r\n * import { Base64 } from 'ox'\r\n *\r\n * const value = Base64.fromString('hello wod', { url: true })\r\n * // @log: 'aGVsbG8gd29_77-9ZA=='\r\n * ```\r\n *\r\n * @param value - The string to encode.\r\n * @param options - Encoding options.\r\n * @returns The Base64 encoded string.\r\n */\r\nexport function fromString(value: string, options: fromString.Options = {}) {\r\n  return fromBytes(Bytes.fromString(value), options)\r\n}\r\n\r\nexport declare namespace fromString {\r\n  type Options = {\r\n    /**\r\n     * Whether to [pad](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) the Base64 encoded string.\r\n     *\r\n     * @default true\r\n     */\r\n    pad?: boolean | undefined\r\n    /**\r\n     * Whether to Base64 encode with [URL safe characters](https://datatracker.ietf.org/doc/html/rfc4648#section-5).\r\n     *\r\n     * @default false\r\n     */\r\n    url?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType = fromBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Base64, Bytes } from 'ox'\r\n *\r\n * const value = Base64.toBytes('aGVsbG8gd29ybGQ=')\r\n * // @log: Uint8Array([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100])\r\n * ```\r\n *\r\n * @param value - The string, hex value, or byte array to encode.\r\n * @returns The Base64 decoded {@link ox#Bytes.Bytes}.\r\n */\r\nexport function toBytes(value: string): Bytes.Bytes {\r\n  const base64 = value.replace(/=+$/, '')\r\n\r\n  const size = base64.length\r\n\r\n  const decoded = new Uint8Array(size + 3)\r\n  encoder.encodeInto(base64 + '===', decoded)\r\n\r\n  for (let i = 0, j = 0; i < base64.length; i += 4, j += 3) {\r\n    const x =\r\n      (characterToInteger[decoded[i]!]! << 18) +\r\n      (characterToInteger[decoded[i + 1]!]! << 12) +\r\n      (characterToInteger[decoded[i + 2]!]! << 6) +\r\n      characterToInteger[decoded[i + 3]!]!\r\n    decoded[j] = x >> 16\r\n    decoded[j + 1] = (x >> 8) & 0xff\r\n    decoded[j + 2] = x & 0xff\r\n  }\r\n\r\n  const decodedSize = (size >> 2) * 3 + (size % 4 && (size % 4) - 1)\r\n  return new Uint8Array(decoded.buffer, 0, decodedSize)\r\n}\r\n\r\nexport declare namespace toBytes {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to {@link ox#Hex.Hex}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Base64, Hex } from 'ox'\r\n *\r\n * const value = Base64.toHex('aGVsbG8gd29ybGQ=')\r\n * // @log: 0x68656c6c6f20776f726c64\r\n * ```\r\n *\r\n * @param value - The string, hex value, or byte array to encode.\r\n * @returns The Base64 decoded {@link ox#Hex.Hex}.\r\n */\r\nexport function toHex(value: string): Hex.Hex {\r\n  return Hex.fromBytes(toBytes(value))\r\n}\r\n\r\nexport declare namespace toHex {\r\n  type ErrorType = toBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to a string.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Base64 } from 'ox'\r\n *\r\n * const value = Base64.toString('aGVsbG8gd29ybGQ=')\r\n * // @log: 'hello world'\r\n * ```\r\n *\r\n * @param value - The string, hex value, or byte array to encode.\r\n * @returns The Base64 decoded string.\r\n */\r\nexport function toString(value: string): string {\r\n  return Bytes.toString(toBytes(value))\r\n}\r\n\r\nexport declare namespace toString {\r\n  type ErrorType = toBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n", "/**\r\n * Internal module for NIST P256, P384, P521 curves.\r\n * Do not use for now.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { sha256, sha384, sha512 } from '@noble/hashes/sha2.js';\r\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\r\nimport { createHasher, type H2CHasher } from './abstract/hash-to-curve.ts';\r\nimport { Field, type IField } from './abstract/modular.ts';\r\nimport { mapToCurveSimpleSWU, type WeierstrassOpts } from './abstract/weierstrass.ts';\r\n\r\n// p = 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n - 1n\r\n// a = Fp256.create(BigInt('-3'));\r\nconst p256_CURVE: WeierstrassOpts<bigint> = {\r\n  p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\r\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\r\n  h: BigInt(1),\r\n  a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\r\n  b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\r\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\r\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\r\n};\r\n\r\n// p = 2n**384n - 2n**128n - 2n**96n + 2n**32n - 1n\r\nconst p384_CURVE: WeierstrassOpts<bigint> = {\r\n  p: BigInt(\r\n    '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff'\r\n  ),\r\n  n: BigInt(\r\n    '0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973'\r\n  ),\r\n  h: BigInt(1),\r\n  a: BigInt(\r\n    '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc'\r\n  ),\r\n  b: BigInt(\r\n    '0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef'\r\n  ),\r\n  Gx: BigInt(\r\n    '0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7'\r\n  ),\r\n  Gy: BigInt(\r\n    '0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f'\r\n  ),\r\n};\r\n\r\n// p = 2n**521n - 1n\r\nconst p521_CURVE: WeierstrassOpts<bigint> = {\r\n  p: BigInt(\r\n    '0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\r\n  ),\r\n  n: BigInt(\r\n    '0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409'\r\n  ),\r\n  h: BigInt(1),\r\n  a: BigInt(\r\n    '0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc'\r\n  ),\r\n  b: BigInt(\r\n    '0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00'\r\n  ),\r\n  Gx: BigInt(\r\n    '0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66'\r\n  ),\r\n  Gy: BigInt(\r\n    '0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650'\r\n  ),\r\n};\r\n\r\nconst Fp256 = Field(p256_CURVE.p);\r\nconst Fp384 = Field(p384_CURVE.p);\r\nconst Fp521 = Field(p521_CURVE.p);\r\ntype SwuOpts = {\r\n  A: bigint;\r\n  B: bigint;\r\n  Z: bigint;\r\n};\r\nfunction createSWU(field: IField<bigint>, opts: SwuOpts) {\r\n  const map = mapToCurveSimpleSWU(field, opts);\r\n  return (scalars: bigint[]) => map(scalars[0]);\r\n}\r\n\r\n/** NIST P256 (aka secp256r1, prime256v1) curve, ECDSA and ECDH methods. */\r\nexport const p256: CurveFnWithCreate = createCurve(\r\n  { ...p256_CURVE, Fp: Fp256, lowS: false },\r\n  sha256\r\n);\r\n/** Alias to p256. */\r\nexport const secp256r1: CurveFnWithCreate = p256;\r\n/** Hashing / encoding to p256 points / field. RFC 9380 methods. */\r\nexport const p256_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() => {\r\n  return createHasher(\r\n    p256.Point,\r\n    createSWU(Fp256, {\r\n      A: p256_CURVE.a,\r\n      B: p256_CURVE.b,\r\n      Z: Fp256.create(BigInt('-10')),\r\n    }),\r\n    {\r\n      DST: 'P256_XMD:SHA-256_SSWU_RO_',\r\n      encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\r\n      p: p256_CURVE.p,\r\n      m: 1,\r\n      k: 128,\r\n      expand: 'xmd',\r\n      hash: sha256,\r\n    }\r\n  );\r\n})();\r\n\r\n/** NIST P384 (aka secp384r1) curve, ECDSA and ECDH methods. */\r\nexport const p384: CurveFnWithCreate = createCurve(\r\n  { ...p384_CURVE, Fp: Fp384, lowS: false },\r\n  sha384\r\n);\r\n/** Alias to p384. */\r\nexport const secp384r1: CurveFnWithCreate = p384;\r\n/** Hashing / encoding to p384 points / field. RFC 9380 methods. */\r\nexport const p384_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() => {\r\n  return createHasher(\r\n    p384.Point,\r\n    createSWU(Fp384, {\r\n      A: p384_CURVE.a,\r\n      B: p384_CURVE.b,\r\n      Z: Fp384.create(BigInt('-12')),\r\n    }),\r\n    {\r\n      DST: 'P384_XMD:SHA-384_SSWU_RO_',\r\n      encodeDST: 'P384_XMD:SHA-384_SSWU_NU_',\r\n      p: p384_CURVE.p,\r\n      m: 1,\r\n      k: 192,\r\n      expand: 'xmd',\r\n      hash: sha384,\r\n    }\r\n  );\r\n})();\r\n\r\n/** NIST P521 (aka secp521r1) curve, ECDSA and ECDH methods. */\r\nexport const p521: CurveFnWithCreate = createCurve(\r\n  { ...p521_CURVE, Fp: Fp521, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] },\r\n  sha512\r\n);\r\n/** Alias to p521. */\r\nexport const secp521r1: CurveFnWithCreate = p521;\r\n/** Hashing / encoding to p521 points / field. RFC 9380 methods. */\r\nexport const p521_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() => {\r\n  return createHasher(\r\n    p521.Point,\r\n    createSWU(Fp521, {\r\n      A: p521_CURVE.a,\r\n      B: p521_CURVE.b,\r\n      Z: Fp521.create(BigInt('-4')),\r\n    }),\r\n    {\r\n      DST: 'P521_XMD:SHA-512_SSWU_RO_',\r\n      encodeDST: 'P521_XMD:SHA-512_SSWU_NU_',\r\n      p: p521_CURVE.p,\r\n      m: 1,\r\n      k: 256,\r\n      expand: 'xmd',\r\n      hash: sha512,\r\n    }\r\n  );\r\n})();\r\n", "/**\r\n * NIST secp256r1 aka p256.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { type H2CMethod } from './abstract/hash-to-curve.ts';\r\nimport { p256_hasher, p256 as p256n } from './nist.ts';\r\nexport const p256: typeof p256n = p256n;\r\nexport const secp256r1: typeof p256n = p256n;\r\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() => p256_hasher.hashToCurve)();\r\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() => p256_hasher.encodeToCurve)();\r\n", "import * as Base64 from './Base64.js'\r\nimport * as Bytes from './Bytes.js'\r\nimport * as Errors from './Errors.js'\r\nimport * as Hash from './Hash.js'\r\nimport * as Hex from './Hex.js'\r\nimport * as P256 from './P256.js'\r\nimport type * as PublicKey from './PublicKey.js'\r\nimport type * as Signature from './Signature.js'\r\nimport type { Compute, OneOf } from './internal/types.js'\r\nimport * as internal from './internal/webauthn.js'\r\n\r\n/** A WebAuthn-flavored P256 credential. */\r\nexport type P256Credential = {\r\n  id: string\r\n  publicKey: PublicKey.PublicKey\r\n  raw: internal.PublicKeyCredential\r\n}\r\n\r\n/** Metadata for a WebAuthn P256 signature. */\r\nexport type SignMetadata = Compute<{\r\n  authenticatorData: Hex.Hex\r\n  challengeIndex: number\r\n  clientDataJSON: string\r\n  typeIndex: number\r\n  userVerificationRequired: boolean\r\n}>\r\n\r\nexport const createChallenge = Uint8Array.from([\r\n  105, 171, 180, 181, 160, 222, 75, 198, 42, 42, 32, 31, 141, 37, 186, 233,\r\n])\r\n\r\n/**\r\n * Creates a new WebAuthn P256 Credential, which can be stored and later used for signing.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256 } from 'ox'\r\n *\r\n * const credential = await WebAuthnP256.createCredential({ name: 'Example' }) // [!code focus]\r\n * // @log: {\r\n * // @log:   id: 'oZ48...',\r\n * // @log:   publicKey: { x: 51421...5123n, y: 12345...6789n },\r\n * // @log:   raw: PublicKeyCredential {},\r\n * // @log: }\r\n *\r\n * const { metadata, signature } = await WebAuthnP256.sign({\r\n *   credentialId: credential.id,\r\n *   challenge: '0xdeadbeef',\r\n * })\r\n * ```\r\n *\r\n * @param options - Credential creation options.\r\n * @returns A WebAuthn P256 credential.\r\n */\r\nexport async function createCredential(\r\n  options: createCredential.Options,\r\n): Promise<P256Credential> {\r\n  const {\r\n    createFn = window.navigator.credentials.create.bind(\r\n      window.navigator.credentials,\r\n    ),\r\n    ...rest\r\n  } = options\r\n  const creationOptions = getCredentialCreationOptions(rest)\r\n  try {\r\n    const credential = (await createFn(\r\n      creationOptions,\r\n    )) as internal.PublicKeyCredential\r\n    if (!credential) throw new CredentialCreationFailedError()\r\n\r\n    const response = credential.response as AuthenticatorAttestationResponse\r\n    const publicKey = await internal.parseCredentialPublicKey(response)\r\n\r\n    return {\r\n      id: credential.id,\r\n      publicKey,\r\n      raw: credential,\r\n    }\r\n  } catch (error) {\r\n    throw new CredentialCreationFailedError({\r\n      cause: error as Error,\r\n    })\r\n  }\r\n}\r\n\r\nexport declare namespace createCredential {\r\n  type Options = getCredentialCreationOptions.Options & {\r\n    /**\r\n     * Credential creation function. Useful for environments that do not support\r\n     * the WebAuthn API natively (i.e. React Native or testing environments).\r\n     *\r\n     * @default window.navigator.credentials.create\r\n     */\r\n    createFn?:\r\n      | ((\r\n          options?: internal.CredentialCreationOptions | undefined,\r\n        ) => Promise<internal.Credential | null>)\r\n      | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | getCredentialCreationOptions.ErrorType\r\n    | internal.parseCredentialPublicKey.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Gets the authenticator data which contains information about the\r\n * processing of an authenticator request (ie. from `WebAuthnP256.sign`).\r\n *\r\n * :::warning\r\n *\r\n * This function is mainly for testing purposes or for manually constructing\r\n * autenticator data. In most cases you will not need this function.\r\n * `authenticatorData` is typically returned as part of the\r\n * {@link ox#WebAuthnP256.(sign:function)} response (ie. an authenticator response).\r\n *\r\n * :::\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256 } from 'ox'\r\n *\r\n * const authenticatorData = WebAuthnP256.getAuthenticatorData({\r\n *   rpId: 'example.com',\r\n *   signCount: 420,\r\n * })\r\n * // @log: \"0xa379a6f6eeafb9a55e378c118034e2751e682fab9f2d30ab13d2125586ce194705000001a4\"\r\n * ```\r\n *\r\n * @param options - Options to construct the authenticator data.\r\n * @returns The authenticator data.\r\n */\r\nexport function getAuthenticatorData(\r\n  options: getAuthenticatorData.Options = {},\r\n): Hex.Hex {\r\n  const { flag = 5, rpId = window.location.hostname, signCount = 0 } = options\r\n  const rpIdHash = Hash.sha256(Hex.fromString(rpId))\r\n  const flag_bytes = Hex.fromNumber(flag, { size: 1 })\r\n  const signCount_bytes = Hex.fromNumber(signCount, { size: 4 })\r\n  return Hex.concat(rpIdHash, flag_bytes, signCount_bytes)\r\n}\r\n\r\nexport declare namespace getAuthenticatorData {\r\n  type Options = {\r\n    /** A bitfield that indicates various attributes that were asserted by the authenticator. [Read more](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Authenticator_data#flags) */\r\n    flag?: number | undefined\r\n    /** The [Relying Party ID](https://w3c.github.io/webauthn/#relying-party-identifier) that the credential is scoped to. */\r\n    rpId?: internal.PublicKeyCredentialRequestOptions['rpId'] | undefined\r\n    /** A signature counter, if supported by the authenticator (set to 0 otherwise). */\r\n    signCount?: number | undefined\r\n  }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Constructs the Client Data in stringified JSON format which represents client data that\r\n * was passed to `credentials.get()` in {@link ox#WebAuthnP256.(sign:function)}.\r\n *\r\n * :::warning\r\n *\r\n * This function is mainly for testing purposes or for manually constructing\r\n * client data. In most cases you will not need this function.\r\n * `clientDataJSON` is typically returned as part of the\r\n * {@link ox#WebAuthnP256.(sign:function)} response (ie. an authenticator response).\r\n *\r\n * :::\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256 } from 'ox'\r\n *\r\n * const clientDataJSON = WebAuthnP256.getClientDataJSON({\r\n *   challenge: '0xdeadbeef',\r\n *   origin: 'https://example.com',\r\n * })\r\n * // @log: \"{\"type\":\"webauthn.get\",\"challenge\":\"3q2-7w\",\"origin\":\"https://example.com\",\"crossOrigin\":false}\"\r\n * ```\r\n *\r\n * @param options - Options to construct the client data.\r\n * @returns The client data.\r\n */\r\nexport function getClientDataJSON(options: getClientDataJSON.Options): string {\r\n  const {\r\n    challenge,\r\n    crossOrigin = false,\r\n    extraClientData,\r\n    origin = window.location.origin,\r\n  } = options\r\n\r\n  return JSON.stringify({\r\n    type: 'webauthn.get',\r\n    challenge: Base64.fromHex(challenge, { url: true, pad: false }),\r\n    origin,\r\n    crossOrigin,\r\n    ...extraClientData,\r\n  })\r\n}\r\n\r\nexport declare namespace getClientDataJSON {\r\n  type Options = {\r\n    /** The challenge to sign. */\r\n    challenge: Hex.Hex\r\n    /** If set to `true`, it means that the calling context is an `<iframe>` that is not same origin with its ancestor frames. */\r\n    crossOrigin?: boolean | undefined\r\n    /** Additional client data to include in the client data JSON. */\r\n    extraClientData?: Record<string, unknown> | undefined\r\n    /** The fully qualified origin of the relying party which has been given by the client/browser to the authenticator. */\r\n    origin?: string | undefined\r\n  }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Returns the creation options for a P256 WebAuthn Credential to be used with\r\n * the Web Authentication API.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256 } from 'ox'\r\n *\r\n * const options = WebAuthnP256.getCredentialCreationOptions({ name: 'Example' })\r\n *\r\n * const credential = await window.navigator.credentials.create(options)\r\n * ```\r\n *\r\n * @param options - Options.\r\n * @returns The credential creation options.\r\n */\r\nexport function getCredentialCreationOptions(\r\n  options: getCredentialCreationOptions.Options,\r\n): internal.CredentialCreationOptions {\r\n  const {\r\n    attestation = 'none',\r\n    authenticatorSelection = {\r\n      residentKey: 'preferred',\r\n      requireResidentKey: false,\r\n      userVerification: 'required',\r\n    },\r\n    challenge = createChallenge,\r\n    excludeCredentialIds,\r\n    name: name_,\r\n    rp = {\r\n      id: window.location.hostname,\r\n      name: window.document.title,\r\n    },\r\n    user,\r\n    extensions,\r\n  } = options\r\n  const name = (user?.name ?? name_)!\r\n  return {\r\n    publicKey: {\r\n      attestation,\r\n      authenticatorSelection,\r\n      challenge,\r\n      ...(excludeCredentialIds\r\n        ? {\r\n            excludeCredentials: excludeCredentialIds?.map((id) => ({\r\n              id: Base64.toBytes(id),\r\n              type: 'public-key',\r\n            })),\r\n          }\r\n        : {}),\r\n      pubKeyCredParams: [\r\n        {\r\n          type: 'public-key',\r\n          alg: -7, // p256\r\n        },\r\n      ],\r\n      rp,\r\n      user: {\r\n        id: user?.id ?? Hash.keccak256(Bytes.fromString(name), { as: 'Bytes' }),\r\n        name,\r\n        displayName: user?.displayName ?? name,\r\n      },\r\n      extensions,\r\n    },\r\n  } as internal.CredentialCreationOptions\r\n}\r\n\r\nexport declare namespace getCredentialCreationOptions {\r\n  type Options = {\r\n    /**\r\n     * A string specifying the relying party's preference for how the attestation statement\r\n     * (i.e., provision of verifiable evidence of the authenticity of the authenticator and its data)\r\n     * is conveyed during credential creation.\r\n     */\r\n    attestation?:\r\n      | internal.PublicKeyCredentialCreationOptions['attestation']\r\n      | undefined\r\n    /**\r\n     * An object whose properties are criteria used to filter out the potential authenticators\r\n     * for the credential creation operation.\r\n     */\r\n    authenticatorSelection?:\r\n      | internal.PublicKeyCredentialCreationOptions['authenticatorSelection']\r\n      | undefined\r\n    /**\r\n     * An `ArrayBuffer`, `TypedArray`, or `DataView` used as a cryptographic challenge.\r\n     */\r\n    challenge?:\r\n      | internal.PublicKeyCredentialCreationOptions['challenge']\r\n      | undefined\r\n    /**\r\n     * List of credential IDs to exclude from the creation. This property can be used\r\n     * to prevent creation of a credential if it already exists.\r\n     */\r\n    excludeCredentialIds?: readonly string[] | undefined\r\n    /**\r\n     * List of Web Authentication API credentials to use during creation or authentication.\r\n     */\r\n    extensions?:\r\n      | internal.PublicKeyCredentialCreationOptions['extensions']\r\n      | undefined\r\n    /**\r\n     * An object describing the relying party that requested the credential creation\r\n     */\r\n    rp?:\r\n      | {\r\n          id: string\r\n          name: string\r\n        }\r\n      | undefined\r\n    /**\r\n     * A numerical hint, in milliseconds, which indicates the time the calling web app is willing to wait for the creation operation to complete.\r\n     */\r\n    timeout?: internal.PublicKeyCredentialCreationOptions['timeout'] | undefined\r\n  } & OneOf<\r\n    | {\r\n        /** Name for the credential (user.name). */\r\n        name: string\r\n      }\r\n    | {\r\n        /**\r\n         * An object describing the user account for which the credential is generated.\r\n         */\r\n        user: {\r\n          displayName?: string\r\n          id?: BufferSource\r\n          name: string\r\n        }\r\n      }\r\n  >\r\n\r\n  type ErrorType =\r\n    | Base64.toBytes.ErrorType\r\n    | Hash.keccak256.ErrorType\r\n    | Bytes.fromString.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Returns the request options to sign a challenge with the Web Authentication API.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256 } from 'ox'\r\n *\r\n * const options = WebAuthnP256.getCredentialRequestOptions({\r\n *   challenge: '0xdeadbeef',\r\n * })\r\n *\r\n * const credential = await window.navigator.credentials.get(options)\r\n * ```\r\n *\r\n * @param options - Options.\r\n * @returns The credential request options.\r\n */\r\nexport function getCredentialRequestOptions(\r\n  options: getCredentialRequestOptions.Options,\r\n): internal.CredentialRequestOptions {\r\n  const {\r\n    credentialId,\r\n    challenge,\r\n    rpId = window.location.hostname,\r\n    userVerification = 'required',\r\n  } = options\r\n  return {\r\n    publicKey: {\r\n      ...(credentialId\r\n        ? {\r\n            allowCredentials: Array.isArray(credentialId)\r\n              ? credentialId.map((id) => ({\r\n                  id: Base64.toBytes(id),\r\n                  type: 'public-key',\r\n                }))\r\n              : [\r\n                  {\r\n                    id: Base64.toBytes(credentialId),\r\n                    type: 'public-key',\r\n                  },\r\n                ],\r\n          }\r\n        : {}),\r\n      challenge: Bytes.fromHex(challenge),\r\n      rpId,\r\n      userVerification,\r\n    },\r\n  }\r\n}\r\n\r\nexport declare namespace getCredentialRequestOptions {\r\n  type Options = {\r\n    /** The credential ID to use. */\r\n    credentialId?: string | string[] | undefined\r\n    /** The challenge to sign. */\r\n    challenge: Hex.Hex\r\n    /** The relying party identifier to use. */\r\n    rpId?: internal.PublicKeyCredentialRequestOptions['rpId'] | undefined\r\n    /** The user verification requirement. */\r\n    userVerification?:\r\n      | internal.PublicKeyCredentialRequestOptions['userVerification']\r\n      | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | Bytes.fromHex.ErrorType\r\n    | Base64.toBytes.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Constructs the final digest that was signed and computed by the authenticator. This payload includes\r\n * the cryptographic `challenge`, as well as authenticator metadata (`authenticatorData` + `clientDataJSON`).\r\n * This value can be also used with raw P256 verification (such as {@link ox#P256.(verify:function)} or\r\n * {@link ox#WebCryptoP256.(verify:function)}).\r\n *\r\n * :::warning\r\n *\r\n * This function is mainly for testing purposes or for manually constructing\r\n * signing payloads. In most cases you will not need this function and\r\n * instead use {@link ox#WebAuthnP256.(sign:function)}.\r\n *\r\n * :::\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256, WebCryptoP256 } from 'ox'\r\n *\r\n * const { metadata, payload } = WebAuthnP256.getSignPayload({ // [!code focus]\r\n *   challenge: '0xdeadbeef', // [!code focus]\r\n * }) // [!code focus]\r\n * // @log: {\r\n * // @log:   metadata: {\r\n * // @log:     authenticatorData: \"0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000\",\r\n * // @log:     challengeIndex: 23,\r\n * // @log:     clientDataJSON: \"{\"type\":\"webauthn.get\",\"challenge\":\"9jEFijuhEWrM4SOW-tChJbUEHEP44VcjcJ-Bqo1fTM8\",\"origin\":\"http://localhost:5173\",\"crossOrigin\":false}\",\r\n * // @log:     typeIndex: 1,\r\n * // @log:     userVerificationRequired: true,\r\n * // @log:   },\r\n * // @log:   payload: \"0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d9763050000000045086dcb06a5f234db625bcdc94e657f86b76b6fd3eb9c30543eabc1e577a4b0\",\r\n * // @log: }\r\n *\r\n * const { publicKey, privateKey } = await WebCryptoP256.createKeyPair()\r\n *\r\n * const signature = await WebCryptoP256.sign({\r\n *   payload,\r\n *   privateKey,\r\n * })\r\n * ```\r\n *\r\n * @param options - Options to construct the signing payload.\r\n * @returns The signing payload.\r\n */\r\nexport function getSignPayload(\r\n  options: getSignPayload.Options,\r\n): getSignPayload.ReturnType {\r\n  const {\r\n    challenge,\r\n    crossOrigin,\r\n    extraClientData,\r\n    flag,\r\n    origin,\r\n    rpId,\r\n    signCount,\r\n    userVerification = 'required',\r\n  } = options\r\n\r\n  const authenticatorData = getAuthenticatorData({\r\n    flag,\r\n    rpId,\r\n    signCount,\r\n  })\r\n  const clientDataJSON = getClientDataJSON({\r\n    challenge,\r\n    crossOrigin,\r\n    extraClientData,\r\n    origin,\r\n  })\r\n  const clientDataJSONHash = Hash.sha256(Hex.fromString(clientDataJSON))\r\n\r\n  const challengeIndex = clientDataJSON.indexOf('\"challenge\"')\r\n  const typeIndex = clientDataJSON.indexOf('\"type\"')\r\n\r\n  const metadata = {\r\n    authenticatorData,\r\n    clientDataJSON,\r\n    challengeIndex,\r\n    typeIndex,\r\n    userVerificationRequired: userVerification === 'required',\r\n  }\r\n\r\n  const payload = Hex.concat(authenticatorData, clientDataJSONHash)\r\n\r\n  return { metadata, payload }\r\n}\r\n\r\nexport declare namespace getSignPayload {\r\n  type Options = {\r\n    /** The challenge to sign. */\r\n    challenge: Hex.Hex\r\n    /** If set to `true`, it means that the calling context is an `<iframe>` that is not same origin with its ancestor frames. */\r\n    crossOrigin?: boolean | undefined\r\n    /** Additional client data to include in the client data JSON. */\r\n    extraClientData?: Record<string, unknown> | undefined\r\n    /** If set to `true`, the payload will be hashed before being returned. */\r\n    hash?: boolean | undefined\r\n    /** A bitfield that indicates various attributes that were asserted by the authenticator. [Read more](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Authenticator_data#flags) */\r\n    flag?: number | undefined\r\n    /** The fully qualified origin of the relying party which has been given by the client/browser to the authenticator. */\r\n    origin?: string | undefined\r\n    /** The [Relying Party ID](https://w3c.github.io/webauthn/#relying-party-identifier) that the credential is scoped to. */\r\n    rpId?: internal.PublicKeyCredentialRequestOptions['rpId'] | undefined\r\n    /** A signature counter, if supported by the authenticator (set to 0 otherwise). */\r\n    signCount?: number | undefined\r\n    /** The user verification requirement that the authenticator will enforce. */\r\n    userVerification?:\r\n      | internal.PublicKeyCredentialRequestOptions['userVerification']\r\n      | undefined\r\n  }\r\n\r\n  type ReturnType = {\r\n    metadata: SignMetadata\r\n    payload: Hex.Hex\r\n  }\r\n\r\n  type ErrorType =\r\n    | Hash.sha256.ErrorType\r\n    | Hex.concat.ErrorType\r\n    | Hex.fromString.ErrorType\r\n    | getAuthenticatorData.ErrorType\r\n    | getClientDataJSON.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Signs a challenge using a stored WebAuthn P256 Credential. If no Credential is provided,\r\n * a prompt will be displayed for the user to select an existing Credential\r\n * that was previously registered.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256 } from 'ox'\r\n *\r\n * const credential = await WebAuthnP256.createCredential({\r\n *   name: 'Example',\r\n * })\r\n *\r\n * const { metadata, signature } = await WebAuthnP256.sign({ // [!code focus]\r\n *   credentialId: credential.id, // [!code focus]\r\n *   challenge: '0xdeadbeef', // [!code focus]\r\n * }) // [!code focus]\r\n * // @log: {\r\n * // @log:   metadata: {\r\n * // @log:     authenticatorData: '0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000',\r\n * // @log:     clientDataJSON: '{\"type\":\"webauthn.get\",\"challenge\":\"9jEFijuhEWrM4SOW-tChJbUEHEP44VcjcJ-Bqo1fTM8\",\"origin\":\"http://localhost:5173\",\"crossOrigin\":false}',\r\n * // @log:     challengeIndex: 23,\r\n * // @log:     typeIndex: 1,\r\n * // @log:     userVerificationRequired: true,\r\n * // @log:   },\r\n * // @log:   signature: { r: 51231...4215n, s: 12345...6789n },\r\n * // @log: }\r\n * ```\r\n *\r\n * @param options - Options.\r\n * @returns The signature.\r\n */\r\nexport async function sign(options: sign.Options): Promise<sign.ReturnType> {\r\n  const {\r\n    getFn = window.navigator.credentials.get.bind(window.navigator.credentials),\r\n    ...rest\r\n  } = options\r\n  const requestOptions = getCredentialRequestOptions(rest)\r\n  try {\r\n    const credential = (await getFn(\r\n      requestOptions,\r\n    )) as internal.PublicKeyCredential\r\n    if (!credential) throw new CredentialRequestFailedError()\r\n    const response = credential.response as AuthenticatorAssertionResponse\r\n\r\n    const clientDataJSON = String.fromCharCode(\r\n      ...new Uint8Array(response.clientDataJSON),\r\n    )\r\n    const challengeIndex = clientDataJSON.indexOf('\"challenge\"')\r\n    const typeIndex = clientDataJSON.indexOf('\"type\"')\r\n\r\n    const signature = internal.parseAsn1Signature(\r\n      new Uint8Array(response.signature),\r\n    )\r\n\r\n    return {\r\n      metadata: {\r\n        authenticatorData: Hex.fromBytes(\r\n          new Uint8Array(response.authenticatorData),\r\n        ),\r\n        clientDataJSON,\r\n        challengeIndex,\r\n        typeIndex,\r\n        userVerificationRequired:\r\n          requestOptions.publicKey!.userVerification === 'required',\r\n      },\r\n      signature,\r\n      raw: credential,\r\n    }\r\n  } catch (error) {\r\n    throw new CredentialRequestFailedError({\r\n      cause: error as Error,\r\n    })\r\n  }\r\n}\r\n\r\nexport declare namespace sign {\r\n  type Options = getCredentialRequestOptions.Options & {\r\n    /**\r\n     * Credential request function. Useful for environments that do not support\r\n     * the WebAuthn API natively (i.e. React Native or testing environments).\r\n     *\r\n     * @default window.navigator.credentials.get\r\n     */\r\n    getFn?:\r\n      | ((\r\n          options?: internal.CredentialRequestOptions | undefined,\r\n        ) => Promise<internal.Credential | null>)\r\n      | undefined\r\n  }\r\n\r\n  type ReturnType = {\r\n    metadata: SignMetadata\r\n    raw: internal.PublicKeyCredential\r\n    signature: Signature.Signature<false>\r\n  }\r\n\r\n  type ErrorType =\r\n    | Hex.fromBytes.ErrorType\r\n    | getCredentialRequestOptions.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Verifies a signature using the Credential's public key and the challenge which was signed.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { WebAuthnP256 } from 'ox'\r\n *\r\n * const credential = await WebAuthnP256.createCredential({\r\n *   name: 'Example',\r\n * })\r\n *\r\n * const { metadata, signature } = await WebAuthnP256.sign({\r\n *   credentialId: credential.id,\r\n *   challenge: '0xdeadbeef',\r\n * })\r\n *\r\n * const result = await WebAuthnP256.verify({ // [!code focus]\r\n *   metadata, // [!code focus]\r\n *   challenge: '0xdeadbeef', // [!code focus]\r\n *   publicKey: credential.publicKey, // [!code focus]\r\n *   signature, // [!code focus]\r\n * }) // [!code focus]\r\n * // @log: true\r\n * ```\r\n *\r\n * @param options - Options.\r\n * @returns Whether the signature is valid.\r\n */\r\nexport function verify(options: verify.Options): boolean {\r\n  const { challenge, hash = true, metadata, publicKey, signature } = options\r\n  const {\r\n    authenticatorData,\r\n    challengeIndex,\r\n    clientDataJSON,\r\n    typeIndex,\r\n    userVerificationRequired,\r\n  } = metadata\r\n\r\n  const authenticatorDataBytes = Bytes.fromHex(authenticatorData)\r\n\r\n  // Check length of `authenticatorData`.\r\n  if (authenticatorDataBytes.length < 37) return false\r\n\r\n  const flag = authenticatorDataBytes[32]!\r\n\r\n  // Verify that the UP bit of the flags in authData is set.\r\n  if ((flag & 0x01) !== 0x01) return false\r\n\r\n  // If user verification was determined to be required, verify that\r\n  // the UV bit of the flags in authData is set. Otherwise, ignore the\r\n  // value of the UV flag.\r\n  if (userVerificationRequired && (flag & 0x04) !== 0x04) return false\r\n\r\n  // If the BE bit of the flags in authData is not set, verify that\r\n  // the BS bit is not set.\r\n  if ((flag & 0x08) !== 0x08 && (flag & 0x10) === 0x10) return false\r\n\r\n  // Check that response is for an authentication assertion\r\n  const type = '\"type\":\"webauthn.get\"'\r\n  if (type !== clientDataJSON.slice(Number(typeIndex), type.length + 1))\r\n    return false\r\n\r\n  // Check that hash is in the clientDataJSON.\r\n  const match = clientDataJSON\r\n    .slice(Number(challengeIndex))\r\n    .match(/^\"challenge\":\"(.*?)\"/)\r\n  if (!match) return false\r\n\r\n  // Validate the challenge in the clientDataJSON.\r\n  const [_, challenge_extracted] = match\r\n  if (Hex.fromBytes(Base64.toBytes(challenge_extracted!)) !== challenge)\r\n    return false\r\n\r\n  const clientDataJSONHash = Hash.sha256(Bytes.fromString(clientDataJSON), {\r\n    as: 'Bytes',\r\n  })\r\n  const payload = Bytes.concat(authenticatorDataBytes, clientDataJSONHash)\r\n\r\n  return P256.verify({\r\n    hash,\r\n    payload,\r\n    publicKey,\r\n    signature,\r\n  })\r\n}\r\n\r\nexport declare namespace verify {\r\n  type Options = {\r\n    /** The challenge to verify. */\r\n    challenge: Hex.Hex\r\n    /** If set to `true`, the payload will be hashed (sha256) before being verified. */\r\n    hash?: boolean | undefined\r\n    /** The public key to verify the signature with. */\r\n    publicKey: PublicKey.PublicKey\r\n    /** The signature to verify. */\r\n    signature: Signature.Signature<false>\r\n    /** The metadata to verify the signature with. */\r\n    metadata: SignMetadata\r\n  }\r\n\r\n  type ErrorType =\r\n    | Base64.toBytes.ErrorType\r\n    | Bytes.concat.ErrorType\r\n    | Bytes.fromHex.ErrorType\r\n    | P256.verify.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** Thrown when a WebAuthn P256 credential creation fails. */\r\nexport class CredentialCreationFailedError extends Errors.BaseError<Error> {\r\n  override readonly name = 'WebAuthnP256.CredentialCreationFailedError'\r\n\r\n  constructor({ cause }: { cause?: Error | undefined } = {}) {\r\n    super('Failed to create credential.', {\r\n      cause,\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when a WebAuthn P256 credential request fails. */\r\nexport class CredentialRequestFailedError extends Errors.BaseError<Error> {\r\n  override readonly name = 'WebAuthnP256.CredentialRequestFailedError'\r\n\r\n  constructor({ cause }: { cause?: Error | undefined } = {}) {\r\n    super('Failed to request credential.', {\r\n      cause,\r\n    })\r\n  }\r\n}\r\n", "export const entryPoint06Abi = [\r\n  {\r\n    inputs: [\r\n      { name: 'preOpGas', type: 'uint256' },\r\n      { name: 'paid', type: 'uint256' },\r\n      { name: 'validAfter', type: 'uint48' },\r\n      { name: 'validUntil', type: 'uint48' },\r\n      { name: 'targetSuccess', type: 'bool' },\r\n      { name: 'targetResult', type: 'bytes' },\r\n    ],\r\n    name: 'ExecutionResult',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      { name: 'opIndex', type: 'uint256' },\r\n      { name: 'reason', type: 'string' },\r\n    ],\r\n    name: 'FailedOp',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [{ name: 'sender', type: 'address' }],\r\n    name: 'SenderAddressResult',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [{ name: 'aggregator', type: 'address' }],\r\n    name: 'SignatureValidationFailed',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          { name: 'preOpGas', type: 'uint256' },\r\n          { name: 'prefund', type: 'uint256' },\r\n          { name: 'sigFailed', type: 'bool' },\r\n          { name: 'validAfter', type: 'uint48' },\r\n          { name: 'validUntil', type: 'uint48' },\r\n          { name: 'paymasterContext', type: 'bytes' },\r\n        ],\r\n\r\n        name: 'returnInfo',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          { name: 'stake', type: 'uint256' },\r\n          { name: 'unstakeDelaySec', type: 'uint256' },\r\n        ],\r\n\r\n        name: 'senderInfo',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          { name: 'stake', type: 'uint256' },\r\n          { name: 'unstakeDelaySec', type: 'uint256' },\r\n        ],\r\n\r\n        name: 'factoryInfo',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          { name: 'stake', type: 'uint256' },\r\n          { name: 'unstakeDelaySec', type: 'uint256' },\r\n        ],\r\n\r\n        name: 'paymasterInfo',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'ValidationResult',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          { name: 'preOpGas', type: 'uint256' },\r\n          { name: 'prefund', type: 'uint256' },\r\n          { name: 'sigFailed', type: 'bool' },\r\n          { name: 'validAfter', type: 'uint48' },\r\n          { name: 'validUntil', type: 'uint48' },\r\n          { name: 'paymasterContext', type: 'bytes' },\r\n        ],\r\n\r\n        name: 'returnInfo',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          { name: 'stake', type: 'uint256' },\r\n          { name: 'unstakeDelaySec', type: 'uint256' },\r\n        ],\r\n\r\n        name: 'senderInfo',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          { name: 'stake', type: 'uint256' },\r\n          { name: 'unstakeDelaySec', type: 'uint256' },\r\n        ],\r\n\r\n        name: 'factoryInfo',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          { name: 'stake', type: 'uint256' },\r\n          { name: 'unstakeDelaySec', type: 'uint256' },\r\n        ],\r\n\r\n        name: 'paymasterInfo',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          { name: 'aggregator', type: 'address' },\r\n          {\r\n            components: [\r\n              { name: 'stake', type: 'uint256' },\r\n              {\r\n                name: 'unstakeDelaySec',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n\r\n            name: 'stakeInfo',\r\n            type: 'tuple',\r\n          },\r\n        ],\r\n\r\n        name: 'aggregatorInfo',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'ValidationResultWithAggregation',\r\n    type: 'error',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'userOpHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'factory',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'paymaster',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'AccountDeployed',\r\n    type: 'event',\r\n  },\r\n  { anonymous: false, inputs: [], name: 'BeforeExecution', type: 'event' },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'totalDeposit',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Deposited',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'aggregator',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'SignatureAggregatorChanged',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'totalStaked',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'unstakeDelaySec',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'StakeLocked',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'withdrawTime',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'StakeUnlocked',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'withdrawAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'StakeWithdrawn',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'userOpHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'paymaster',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      { indexed: false, name: 'success', type: 'bool' },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'actualGasCost',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'actualGasUsed',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'UserOperationEvent',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'userOpHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'revertReason',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'UserOperationRevertReason',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'withdrawAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Withdrawn',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'SIG_VALIDATION_FAILED',\r\n    outputs: [{ name: '', type: 'uint256' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      { name: 'initCode', type: 'bytes' },\r\n      { name: 'sender', type: 'address' },\r\n      { name: 'paymasterAndData', type: 'bytes' },\r\n    ],\r\n    name: '_validateSenderAndPaymaster',\r\n    outputs: [],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ name: 'unstakeDelaySec', type: 'uint32' }],\r\n    name: 'addStake',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ name: 'account', type: 'address' }],\r\n    name: 'balanceOf',\r\n    outputs: [{ name: '', type: 'uint256' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ name: 'account', type: 'address' }],\r\n    name: 'depositTo',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ name: '', type: 'address' }],\r\n    name: 'deposits',\r\n    outputs: [\r\n      { name: 'deposit', type: 'uint112' },\r\n      { name: 'staked', type: 'bool' },\r\n      { name: 'stake', type: 'uint112' },\r\n      { name: 'unstakeDelaySec', type: 'uint32' },\r\n      { name: 'withdrawTime', type: 'uint48' },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ name: 'account', type: 'address' }],\r\n    name: 'getDepositInfo',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          { name: 'deposit', type: 'uint112' },\r\n          { name: 'staked', type: 'bool' },\r\n          { name: 'stake', type: 'uint112' },\r\n          { name: 'unstakeDelaySec', type: 'uint32' },\r\n          { name: 'withdrawTime', type: 'uint48' },\r\n        ],\r\n\r\n        name: 'info',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      { name: 'sender', type: 'address' },\r\n      { name: 'key', type: 'uint192' },\r\n    ],\r\n    name: 'getNonce',\r\n    outputs: [{ name: 'nonce', type: 'uint256' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ name: 'initCode', type: 'bytes' }],\r\n    name: 'getSenderAddress',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          { name: 'sender', type: 'address' },\r\n          { name: 'nonce', type: 'uint256' },\r\n          { name: 'initCode', type: 'bytes' },\r\n          { name: 'callData', type: 'bytes' },\r\n          { name: 'callGasLimit', type: 'uint256' },\r\n          {\r\n            name: 'verificationGasLimit',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            name: 'preVerificationGas',\r\n            type: 'uint256',\r\n          },\r\n          { name: 'maxFeePerGas', type: 'uint256' },\r\n          {\r\n            name: 'maxPriorityFeePerGas',\r\n            type: 'uint256',\r\n          },\r\n          { name: 'paymasterAndData', type: 'bytes' },\r\n          { name: 'signature', type: 'bytes' },\r\n        ],\r\n\r\n        name: 'userOp',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getUserOpHash',\r\n    outputs: [{ name: '', type: 'bytes32' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            components: [\r\n              { name: 'sender', type: 'address' },\r\n              { name: 'nonce', type: 'uint256' },\r\n              { name: 'initCode', type: 'bytes' },\r\n              { name: 'callData', type: 'bytes' },\r\n              {\r\n                name: 'callGasLimit',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                name: 'verificationGasLimit',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                name: 'preVerificationGas',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                name: 'maxFeePerGas',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                name: 'maxPriorityFeePerGas',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                name: 'paymasterAndData',\r\n                type: 'bytes',\r\n              },\r\n              { name: 'signature', type: 'bytes' },\r\n            ],\r\n\r\n            name: 'userOps',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            name: 'aggregator',\r\n            type: 'address',\r\n          },\r\n          { name: 'signature', type: 'bytes' },\r\n        ],\r\n\r\n        name: 'opsPerAggregator',\r\n        type: 'tuple[]',\r\n      },\r\n      { name: 'beneficiary', type: 'address' },\r\n    ],\r\n    name: 'handleAggregatedOps',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          { name: 'sender', type: 'address' },\r\n          { name: 'nonce', type: 'uint256' },\r\n          { name: 'initCode', type: 'bytes' },\r\n          { name: 'callData', type: 'bytes' },\r\n          { name: 'callGasLimit', type: 'uint256' },\r\n          {\r\n            name: 'verificationGasLimit',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            name: 'preVerificationGas',\r\n            type: 'uint256',\r\n          },\r\n          { name: 'maxFeePerGas', type: 'uint256' },\r\n          {\r\n            name: 'maxPriorityFeePerGas',\r\n            type: 'uint256',\r\n          },\r\n          { name: 'paymasterAndData', type: 'bytes' },\r\n          { name: 'signature', type: 'bytes' },\r\n        ],\r\n\r\n        name: 'ops',\r\n        type: 'tuple[]',\r\n      },\r\n      { name: 'beneficiary', type: 'address' },\r\n    ],\r\n    name: 'handleOps',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ name: 'key', type: 'uint192' }],\r\n    name: 'incrementNonce',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      { name: 'callData', type: 'bytes' },\r\n      {\r\n        components: [\r\n          {\r\n            components: [\r\n              { name: 'sender', type: 'address' },\r\n              { name: 'nonce', type: 'uint256' },\r\n              {\r\n                name: 'callGasLimit',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                name: 'verificationGasLimit',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                name: 'preVerificationGas',\r\n                type: 'uint256',\r\n              },\r\n              { name: 'paymaster', type: 'address' },\r\n              {\r\n                name: 'maxFeePerGas',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                name: 'maxPriorityFeePerGas',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n\r\n            name: 'mUserOp',\r\n            type: 'tuple',\r\n          },\r\n          { name: 'userOpHash', type: 'bytes32' },\r\n          { name: 'prefund', type: 'uint256' },\r\n          { name: 'contextOffset', type: 'uint256' },\r\n          { name: 'preOpGas', type: 'uint256' },\r\n        ],\r\n\r\n        name: 'opInfo',\r\n        type: 'tuple',\r\n      },\r\n      { name: 'context', type: 'bytes' },\r\n    ],\r\n    name: 'innerHandleOp',\r\n    outputs: [{ name: 'actualGasCost', type: 'uint256' }],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      { name: '', type: 'address' },\r\n      { name: '', type: 'uint192' },\r\n    ],\r\n    name: 'nonceSequenceNumber',\r\n    outputs: [{ name: '', type: 'uint256' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          { name: 'sender', type: 'address' },\r\n          { name: 'nonce', type: 'uint256' },\r\n          { name: 'initCode', type: 'bytes' },\r\n          { name: 'callData', type: 'bytes' },\r\n          { name: 'callGasLimit', type: 'uint256' },\r\n          {\r\n            name: 'verificationGasLimit',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            name: 'preVerificationGas',\r\n            type: 'uint256',\r\n          },\r\n          { name: 'maxFeePerGas', type: 'uint256' },\r\n          {\r\n            name: 'maxPriorityFeePerGas',\r\n            type: 'uint256',\r\n          },\r\n          { name: 'paymasterAndData', type: 'bytes' },\r\n          { name: 'signature', type: 'bytes' },\r\n        ],\r\n\r\n        name: 'op',\r\n        type: 'tuple',\r\n      },\r\n      { name: 'target', type: 'address' },\r\n      { name: 'targetCallData', type: 'bytes' },\r\n    ],\r\n    name: 'simulateHandleOp',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          { name: 'sender', type: 'address' },\r\n          { name: 'nonce', type: 'uint256' },\r\n          { name: 'initCode', type: 'bytes' },\r\n          { name: 'callData', type: 'bytes' },\r\n          { name: 'callGasLimit', type: 'uint256' },\r\n          {\r\n            name: 'verificationGasLimit',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            name: 'preVerificationGas',\r\n            type: 'uint256',\r\n          },\r\n          { name: 'maxFeePerGas', type: 'uint256' },\r\n          {\r\n            name: 'maxPriorityFeePerGas',\r\n            type: 'uint256',\r\n          },\r\n          { name: 'paymasterAndData', type: 'bytes' },\r\n          { name: 'signature', type: 'bytes' },\r\n        ],\r\n\r\n        name: 'userOp',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'simulateValidation',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'unlockStake',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'withdrawAddress',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'withdrawStake',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'withdrawAddress',\r\n        type: 'address',\r\n      },\r\n      { name: 'withdrawAmount', type: 'uint256' },\r\n    ],\r\n    name: 'withdrawTo',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  { stateMutability: 'payable', type: 'receive' },\r\n] as const\r\n\r\nexport const entryPoint07Abi = [\r\n  {\r\n    inputs: [\r\n      { name: 'success', type: 'bool' },\r\n      { name: 'ret', type: 'bytes' },\r\n    ],\r\n    name: 'DelegateAndRevert',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      { name: 'opIndex', type: 'uint256' },\r\n      { name: 'reason', type: 'string' },\r\n    ],\r\n    name: 'FailedOp',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      { name: 'opIndex', type: 'uint256' },\r\n      { name: 'reason', type: 'string' },\r\n      { name: 'inner', type: 'bytes' },\r\n    ],\r\n    name: 'FailedOpWithRevert',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [{ name: 'returnData', type: 'bytes' }],\r\n    name: 'PostOpReverted',\r\n    type: 'error',\r\n  },\r\n  { inputs: [], name: 'ReentrancyGuardReentrantCall', type: 'error' },\r\n  {\r\n    inputs: [{ name: 'sender', type: 'address' }],\r\n    name: 'SenderAddressResult',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [{ name: 'aggregator', type: 'address' }],\r\n    name: 'SignatureValidationFailed',\r\n    type: 'error',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'userOpHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'factory',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'paymaster',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'AccountDeployed',\r\n    type: 'event',\r\n  },\r\n  { anonymous: false, inputs: [], name: 'BeforeExecution', type: 'event' },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'totalDeposit',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Deposited',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'userOpHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'revertReason',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'PostOpRevertReason',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'aggregator',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'SignatureAggregatorChanged',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'totalStaked',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'unstakeDelaySec',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'StakeLocked',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'withdrawTime',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'StakeUnlocked',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'withdrawAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'StakeWithdrawn',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'userOpHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'paymaster',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      { indexed: false, name: 'success', type: 'bool' },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'actualGasCost',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'actualGasUsed',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'UserOperationEvent',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'userOpHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'UserOperationPrefundTooLow',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'userOpHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'revertReason',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'UserOperationRevertReason',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'withdrawAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Withdrawn',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [{ name: 'unstakeDelaySec', type: 'uint32' }],\r\n    name: 'addStake',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ name: 'account', type: 'address' }],\r\n    name: 'balanceOf',\r\n    outputs: [{ name: '', type: 'uint256' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      { name: 'target', type: 'address' },\r\n      { name: 'data', type: 'bytes' },\r\n    ],\r\n    name: 'delegateAndRevert',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ name: 'account', type: 'address' }],\r\n    name: 'depositTo',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ name: '', type: 'address' }],\r\n    name: 'deposits',\r\n    outputs: [\r\n      { name: 'deposit', type: 'uint256' },\r\n      { name: 'staked', type: 'bool' },\r\n      { name: 'stake', type: 'uint112' },\r\n      { name: 'unstakeDelaySec', type: 'uint32' },\r\n      { name: 'withdrawTime', type: 'uint48' },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ name: 'account', type: 'address' }],\r\n    name: 'getDepositInfo',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          { name: 'deposit', type: 'uint256' },\r\n          { name: 'staked', type: 'bool' },\r\n          { name: 'stake', type: 'uint112' },\r\n          { name: 'unstakeDelaySec', type: 'uint32' },\r\n          { name: 'withdrawTime', type: 'uint48' },\r\n        ],\r\n\r\n        name: 'info',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      { name: 'sender', type: 'address' },\r\n      { name: 'key', type: 'uint192' },\r\n    ],\r\n    name: 'getNonce',\r\n    outputs: [{ name: 'nonce', type: 'uint256' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ name: 'initCode', type: 'bytes' }],\r\n    name: 'getSenderAddress',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          { name: 'sender', type: 'address' },\r\n          { name: 'nonce', type: 'uint256' },\r\n          { name: 'initCode', type: 'bytes' },\r\n          { name: 'callData', type: 'bytes' },\r\n          {\r\n            name: 'accountGasLimits',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            name: 'preVerificationGas',\r\n            type: 'uint256',\r\n          },\r\n          { name: 'gasFees', type: 'bytes32' },\r\n          { name: 'paymasterAndData', type: 'bytes' },\r\n          { name: 'signature', type: 'bytes' },\r\n        ],\r\n\r\n        name: 'userOp',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getUserOpHash',\r\n    outputs: [{ name: '', type: 'bytes32' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            components: [\r\n              { name: 'sender', type: 'address' },\r\n              { name: 'nonce', type: 'uint256' },\r\n              { name: 'initCode', type: 'bytes' },\r\n              { name: 'callData', type: 'bytes' },\r\n              {\r\n                name: 'accountGasLimits',\r\n                type: 'bytes32',\r\n              },\r\n              {\r\n                name: 'preVerificationGas',\r\n                type: 'uint256',\r\n              },\r\n              { name: 'gasFees', type: 'bytes32' },\r\n              {\r\n                name: 'paymasterAndData',\r\n                type: 'bytes',\r\n              },\r\n              { name: 'signature', type: 'bytes' },\r\n            ],\r\n\r\n            name: 'userOps',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            name: 'aggregator',\r\n            type: 'address',\r\n          },\r\n          { name: 'signature', type: 'bytes' },\r\n        ],\r\n\r\n        name: 'opsPerAggregator',\r\n        type: 'tuple[]',\r\n      },\r\n      { name: 'beneficiary', type: 'address' },\r\n    ],\r\n    name: 'handleAggregatedOps',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          { name: 'sender', type: 'address' },\r\n          { name: 'nonce', type: 'uint256' },\r\n          { name: 'initCode', type: 'bytes' },\r\n          { name: 'callData', type: 'bytes' },\r\n          {\r\n            name: 'accountGasLimits',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            name: 'preVerificationGas',\r\n            type: 'uint256',\r\n          },\r\n          { name: 'gasFees', type: 'bytes32' },\r\n          { name: 'paymasterAndData', type: 'bytes' },\r\n          { name: 'signature', type: 'bytes' },\r\n        ],\r\n\r\n        name: 'ops',\r\n        type: 'tuple[]',\r\n      },\r\n      { name: 'beneficiary', type: 'address' },\r\n    ],\r\n    name: 'handleOps',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ name: 'key', type: 'uint192' }],\r\n    name: 'incrementNonce',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      { name: 'callData', type: 'bytes' },\r\n      {\r\n        components: [\r\n          {\r\n            components: [\r\n              { name: 'sender', type: 'address' },\r\n              { name: 'nonce', type: 'uint256' },\r\n              {\r\n                name: 'verificationGasLimit',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                name: 'callGasLimit',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                name: 'paymasterVerificationGasLimit',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                name: 'paymasterPostOpGasLimit',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                name: 'preVerificationGas',\r\n                type: 'uint256',\r\n              },\r\n              { name: 'paymaster', type: 'address' },\r\n              {\r\n                name: 'maxFeePerGas',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                name: 'maxPriorityFeePerGas',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n\r\n            name: 'mUserOp',\r\n            type: 'tuple',\r\n          },\r\n          { name: 'userOpHash', type: 'bytes32' },\r\n          { name: 'prefund', type: 'uint256' },\r\n          { name: 'contextOffset', type: 'uint256' },\r\n          { name: 'preOpGas', type: 'uint256' },\r\n        ],\r\n\r\n        name: 'opInfo',\r\n        type: 'tuple',\r\n      },\r\n      { name: 'context', type: 'bytes' },\r\n    ],\r\n    name: 'innerHandleOp',\r\n    outputs: [{ name: 'actualGasCost', type: 'uint256' }],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      { name: '', type: 'address' },\r\n      { name: '', type: 'uint192' },\r\n    ],\r\n    name: 'nonceSequenceNumber',\r\n    outputs: [{ name: '', type: 'uint256' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ name: 'interfaceId', type: 'bytes4' }],\r\n    name: 'supportsInterface',\r\n    outputs: [{ name: '', type: 'bool' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'unlockStake',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'withdrawAddress',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'withdrawStake',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'withdrawAddress',\r\n        type: 'address',\r\n      },\r\n      { name: 'withdrawAmount', type: 'uint256' },\r\n    ],\r\n    name: 'withdrawTo',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  { stateMutability: 'payable', type: 'receive' },\r\n] as const\r\n\r\nexport const entryPoint08Abi = [\r\n  { inputs: [], stateMutability: 'nonpayable', type: 'constructor' },\r\n  {\r\n    inputs: [\r\n      { internalType: 'bool', name: 'success', type: 'bool' },\r\n      { internalType: 'bytes', name: 'ret', type: 'bytes' },\r\n    ],\r\n    name: 'DelegateAndRevert',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: 'uint256', name: 'opIndex', type: 'uint256' },\r\n      { internalType: 'string', name: 'reason', type: 'string' },\r\n    ],\r\n    name: 'FailedOp',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: 'uint256', name: 'opIndex', type: 'uint256' },\r\n      { internalType: 'string', name: 'reason', type: 'string' },\r\n      { internalType: 'bytes', name: 'inner', type: 'bytes' },\r\n    ],\r\n    name: 'FailedOpWithRevert',\r\n    type: 'error',\r\n  },\r\n  { inputs: [], name: 'InvalidShortString', type: 'error' },\r\n  {\r\n    inputs: [{ internalType: 'bytes', name: 'returnData', type: 'bytes' }],\r\n    name: 'PostOpReverted',\r\n    type: 'error',\r\n  },\r\n  { inputs: [], name: 'ReentrancyGuardReentrantCall', type: 'error' },\r\n  {\r\n    inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],\r\n    name: 'SenderAddressResult',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [{ internalType: 'address', name: 'aggregator', type: 'address' }],\r\n    name: 'SignatureValidationFailed',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [{ internalType: 'string', name: 'str', type: 'string' }],\r\n    name: 'StringTooLong',\r\n    type: 'error',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes32',\r\n        name: 'userOpHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'factory',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'paymaster',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'AccountDeployed',\r\n    type: 'event',\r\n  },\r\n  { anonymous: false, inputs: [], name: 'BeforeExecution', type: 'event' },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'totalDeposit',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Deposited',\r\n    type: 'event',\r\n  },\r\n  { anonymous: false, inputs: [], name: 'EIP712DomainChanged', type: 'event' },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes32',\r\n        name: 'userOpHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes',\r\n        name: 'revertReason',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'PostOpRevertReason',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'aggregator',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'SignatureAggregatorChanged',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'totalStaked',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'unstakeDelaySec',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'StakeLocked',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'withdrawTime',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'StakeUnlocked',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'withdrawAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'StakeWithdrawn',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes32',\r\n        name: 'userOpHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'paymaster',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      { indexed: false, internalType: 'bool', name: 'success', type: 'bool' },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'actualGasCost',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'actualGasUsed',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'UserOperationEvent',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes32',\r\n        name: 'userOpHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'UserOperationPrefundTooLow',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes32',\r\n        name: 'userOpHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes',\r\n        name: 'revertReason',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'UserOperationRevertReason',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'withdrawAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Withdrawn',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: 'uint32', name: 'unstakeDelaySec', type: 'uint32' },\r\n    ],\r\n    name: 'addStake',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\r\n    name: 'balanceOf',\r\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: 'address', name: 'target', type: 'address' },\r\n      { internalType: 'bytes', name: 'data', type: 'bytes' },\r\n    ],\r\n    name: 'delegateAndRevert',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\r\n    name: 'depositTo',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'eip712Domain',\r\n    outputs: [\r\n      { internalType: 'bytes1', name: 'fields', type: 'bytes1' },\r\n      { internalType: 'string', name: 'name', type: 'string' },\r\n      { internalType: 'string', name: 'version', type: 'string' },\r\n      { internalType: 'uint256', name: 'chainId', type: 'uint256' },\r\n      { internalType: 'address', name: 'verifyingContract', type: 'address' },\r\n      { internalType: 'bytes32', name: 'salt', type: 'bytes32' },\r\n      { internalType: 'uint256[]', name: 'extensions', type: 'uint256[]' },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\r\n    name: 'getDepositInfo',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          { internalType: 'uint256', name: 'deposit', type: 'uint256' },\r\n          { internalType: 'bool', name: 'staked', type: 'bool' },\r\n          { internalType: 'uint112', name: 'stake', type: 'uint112' },\r\n          { internalType: 'uint32', name: 'unstakeDelaySec', type: 'uint32' },\r\n          { internalType: 'uint48', name: 'withdrawTime', type: 'uint48' },\r\n        ],\r\n        internalType: 'struct IStakeManager.DepositInfo',\r\n        name: 'info',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'getDomainSeparatorV4',\r\n    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: 'address', name: 'sender', type: 'address' },\r\n      { internalType: 'uint192', name: 'key', type: 'uint192' },\r\n    ],\r\n    name: 'getNonce',\r\n    outputs: [{ internalType: 'uint256', name: 'nonce', type: 'uint256' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'getPackedUserOpTypeHash',\r\n    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\r\n    stateMutability: 'pure',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ internalType: 'bytes', name: 'initCode', type: 'bytes' }],\r\n    name: 'getSenderAddress',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          { internalType: 'address', name: 'sender', type: 'address' },\r\n          { internalType: 'uint256', name: 'nonce', type: 'uint256' },\r\n          { internalType: 'bytes', name: 'initCode', type: 'bytes' },\r\n          { internalType: 'bytes', name: 'callData', type: 'bytes' },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'accountGasLimits',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'preVerificationGas',\r\n            type: 'uint256',\r\n          },\r\n          { internalType: 'bytes32', name: 'gasFees', type: 'bytes32' },\r\n          { internalType: 'bytes', name: 'paymasterAndData', type: 'bytes' },\r\n          { internalType: 'bytes', name: 'signature', type: 'bytes' },\r\n        ],\r\n        internalType: 'struct PackedUserOperation',\r\n        name: 'userOp',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getUserOpHash',\r\n    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            components: [\r\n              { internalType: 'address', name: 'sender', type: 'address' },\r\n              { internalType: 'uint256', name: 'nonce', type: 'uint256' },\r\n              { internalType: 'bytes', name: 'initCode', type: 'bytes' },\r\n              { internalType: 'bytes', name: 'callData', type: 'bytes' },\r\n              {\r\n                internalType: 'bytes32',\r\n                name: 'accountGasLimits',\r\n                type: 'bytes32',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'preVerificationGas',\r\n                type: 'uint256',\r\n              },\r\n              { internalType: 'bytes32', name: 'gasFees', type: 'bytes32' },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'paymasterAndData',\r\n                type: 'bytes',\r\n              },\r\n              { internalType: 'bytes', name: 'signature', type: 'bytes' },\r\n            ],\r\n            internalType: 'struct PackedUserOperation[]',\r\n            name: 'userOps',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IAggregator',\r\n            name: 'aggregator',\r\n            type: 'address',\r\n          },\r\n          { internalType: 'bytes', name: 'signature', type: 'bytes' },\r\n        ],\r\n        internalType: 'struct IEntryPoint.UserOpsPerAggregator[]',\r\n        name: 'opsPerAggregator',\r\n        type: 'tuple[]',\r\n      },\r\n      { internalType: 'address payable', name: 'beneficiary', type: 'address' },\r\n    ],\r\n    name: 'handleAggregatedOps',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          { internalType: 'address', name: 'sender', type: 'address' },\r\n          { internalType: 'uint256', name: 'nonce', type: 'uint256' },\r\n          { internalType: 'bytes', name: 'initCode', type: 'bytes' },\r\n          { internalType: 'bytes', name: 'callData', type: 'bytes' },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'accountGasLimits',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'preVerificationGas',\r\n            type: 'uint256',\r\n          },\r\n          { internalType: 'bytes32', name: 'gasFees', type: 'bytes32' },\r\n          { internalType: 'bytes', name: 'paymasterAndData', type: 'bytes' },\r\n          { internalType: 'bytes', name: 'signature', type: 'bytes' },\r\n        ],\r\n        internalType: 'struct PackedUserOperation[]',\r\n        name: 'ops',\r\n        type: 'tuple[]',\r\n      },\r\n      { internalType: 'address payable', name: 'beneficiary', type: 'address' },\r\n    ],\r\n    name: 'handleOps',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ internalType: 'uint192', name: 'key', type: 'uint192' }],\r\n    name: 'incrementNonce',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: 'bytes', name: 'callData', type: 'bytes' },\r\n      {\r\n        components: [\r\n          {\r\n            components: [\r\n              { internalType: 'address', name: 'sender', type: 'address' },\r\n              { internalType: 'uint256', name: 'nonce', type: 'uint256' },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'verificationGasLimit',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'callGasLimit',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'paymasterVerificationGasLimit',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'paymasterPostOpGasLimit',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'preVerificationGas',\r\n                type: 'uint256',\r\n              },\r\n              { internalType: 'address', name: 'paymaster', type: 'address' },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'maxFeePerGas',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'maxPriorityFeePerGas',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct EntryPoint.MemoryUserOp',\r\n            name: 'mUserOp',\r\n            type: 'tuple',\r\n          },\r\n          { internalType: 'bytes32', name: 'userOpHash', type: 'bytes32' },\r\n          { internalType: 'uint256', name: 'prefund', type: 'uint256' },\r\n          { internalType: 'uint256', name: 'contextOffset', type: 'uint256' },\r\n          { internalType: 'uint256', name: 'preOpGas', type: 'uint256' },\r\n        ],\r\n        internalType: 'struct EntryPoint.UserOpInfo',\r\n        name: 'opInfo',\r\n        type: 'tuple',\r\n      },\r\n      { internalType: 'bytes', name: 'context', type: 'bytes' },\r\n    ],\r\n    name: 'innerHandleOp',\r\n    outputs: [\r\n      { internalType: 'uint256', name: 'actualGasCost', type: 'uint256' },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: 'address', name: '', type: 'address' },\r\n      { internalType: 'uint192', name: '', type: 'uint192' },\r\n    ],\r\n    name: 'nonceSequenceNumber',\r\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'senderCreator',\r\n    outputs: [\r\n      { internalType: 'contract ISenderCreator', name: '', type: 'address' },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],\r\n    name: 'supportsInterface',\r\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'unlockStake',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address payable',\r\n        name: 'withdrawAddress',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'withdrawStake',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address payable',\r\n        name: 'withdrawAddress',\r\n        type: 'address',\r\n      },\r\n      { internalType: 'uint256', name: 'withdrawAmount', type: 'uint256' },\r\n    ],\r\n    name: 'withdrawTo',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  { stateMutability: 'payable', type: 'receive' },\r\n] as const\r\n", "import { concat } from '../../../utils/data/concat.js'\r\nimport type { UserOperation } from '../../types/userOperation.js'\r\n\r\nexport function getInitCode(\r\n  userOperation: Pick<\r\n    UserOperation,\r\n    'authorization' | 'factory' | 'factoryData'\r\n  >,\r\n) {\r\n  const { authorization, factory, factoryData } = userOperation\r\n  if (\r\n    factory === '0x7702' ||\r\n    factory === '0x7702000000000000000000000000000000000000'\r\n  ) {\r\n    if (!authorization) return '0x7702000000000000000000000000000000000000'\r\n    const delegation = authorization.address\r\n    return concat([delegation, factoryData ?? '0x'])\r\n  }\r\n  if (!factory) return '0x'\r\n  return concat([factory, factoryData ?? '0x'])\r\n}\r\n", "import { concat } from '../../../utils/data/concat.js'\r\nimport { pad } from '../../../utils/data/pad.js'\r\nimport { numberToHex } from '../../../utils/index.js'\r\nimport type {\r\n  PackedUserOperation,\r\n  UserOperation,\r\n} from '../../types/userOperation.js'\r\nimport { getInitCode } from './getInitCode.js'\r\n\r\nexport function toPackedUserOperation(\r\n  userOperation: UserOperation,\r\n): PackedUserOperation {\r\n  const {\r\n    callGasLimit,\r\n    callData,\r\n    maxPriorityFeePerGas,\r\n    maxFeePerGas,\r\n    paymaster,\r\n    paymasterData,\r\n    paymasterPostOpGasLimit,\r\n    paymasterVerificationGasLimit,\r\n    sender,\r\n    signature = '0x',\r\n    verificationGasLimit,\r\n  } = userOperation\r\n\r\n  const accountGasLimits = concat([\r\n    pad(numberToHex(verificationGasLimit || 0n), { size: 16 }),\r\n    pad(numberToHex(callGasLimit || 0n), { size: 16 }),\r\n  ])\r\n  const initCode = getInitCode(userOperation)\r\n  const gasFees = concat([\r\n    pad(numberToHex(maxPriorityFeePerGas || 0n), { size: 16 }),\r\n    pad(numberToHex(maxFeePerGas || 0n), { size: 16 }),\r\n  ])\r\n  const nonce = userOperation.nonce ?? 0n\r\n  const paymasterAndData = paymaster\r\n    ? concat([\r\n        paymaster,\r\n        pad(numberToHex(paymasterVerificationGasLimit || 0n), {\r\n          size: 16,\r\n        }),\r\n        pad(numberToHex(paymasterPostOpGasLimit || 0n), {\r\n          size: 16,\r\n        }),\r\n        paymasterData || '0x',\r\n      ])\r\n    : '0x'\r\n  const preVerificationGas = userOperation.preVerificationGas ?? 0n\r\n\r\n  return {\r\n    accountGasLimits,\r\n    callData,\r\n    initCode,\r\n    gasFees,\r\n    nonce,\r\n    paymasterAndData,\r\n    preVerificationGas,\r\n    sender,\r\n    signature,\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { TypedDataDefinition } from '../../../types/typedData.js'\r\nimport type { UserOperation } from '../../types/userOperation.js'\r\nimport { toPackedUserOperation } from './toPackedUserOperation.js'\r\n\r\nexport type GetUserOperationTypedDataParameters = {\r\n  chainId: number\r\n  entryPointAddress: Address\r\n  userOperation: UserOperation<'0.8'>\r\n}\r\n\r\nexport type GetUserOperationTypedDataReturnType = TypedDataDefinition<\r\n  typeof types,\r\n  'PackedUserOperation'\r\n>\r\n\r\nconst types = {\r\n  PackedUserOperation: [\r\n    { type: 'address', name: 'sender' },\r\n    { type: 'uint256', name: 'nonce' },\r\n    { type: 'bytes', name: 'initCode' },\r\n    { type: 'bytes', name: 'callData' },\r\n    { type: 'bytes32', name: 'accountGasLimits' },\r\n    { type: 'uint256', name: 'preVerificationGas' },\r\n    { type: 'bytes32', name: 'gasFees' },\r\n    { type: 'bytes', name: 'paymasterAndData' },\r\n  ],\r\n} as const\r\n\r\nexport function getUserOperationTypedData(\r\n  parameters: GetUserOperationTypedDataParameters,\r\n): GetUserOperationTypedDataReturnType {\r\n  const { chainId, entryPointAddress, userOperation } = parameters\r\n\r\n  const packedUserOp = toPackedUserOperation(userOperation)\r\n\r\n  return {\r\n    types,\r\n    primaryType: 'PackedUserOperation',\r\n    domain: {\r\n      name: 'ERC4337',\r\n      version: '1',\r\n      chainId,\r\n      verifyingContract: entryPointAddress,\r\n    },\r\n    message: packedUserOp,\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Hash, Hex } from '../../../types/misc.js'\r\nimport { encodeAbiParameters } from '../../../utils/abi/encodeAbiParameters.js'\r\nimport { keccak256 } from '../../../utils/hash/keccak256.js'\r\nimport { hashTypedData } from '../../../utils/signature/hashTypedData.js'\r\nimport type { EntryPointVersion } from '../../types/entryPointVersion.js'\r\nimport type { UserOperation } from '../../types/userOperation.js'\r\nimport { getInitCode } from './getInitCode.js'\r\nimport { getUserOperationTypedData } from './getUserOperationTypedData.js'\r\nimport { toPackedUserOperation } from './toPackedUserOperation.js'\r\n\r\nexport type GetUserOperationHashParameters<\r\n  entryPointVersion extends EntryPointVersion = EntryPointVersion,\r\n> = {\r\n  chainId: number\r\n  entryPointAddress: Address\r\n  entryPointVersion: entryPointVersion | EntryPointVersion\r\n  userOperation: UserOperation<entryPointVersion>\r\n}\r\n\r\nexport type GetUserOperationHashReturnType = Hash\r\n\r\nexport function getUserOperationHash<\r\n  entryPointVersion extends EntryPointVersion,\r\n>(\r\n  parameters: GetUserOperationHashParameters<entryPointVersion>,\r\n): GetUserOperationHashReturnType {\r\n  const { chainId, entryPointAddress, entryPointVersion } = parameters\r\n  const userOperation = parameters.userOperation as UserOperation\r\n  const {\r\n    authorization,\r\n    callData = '0x',\r\n    callGasLimit,\r\n    maxFeePerGas,\r\n    maxPriorityFeePerGas,\r\n    nonce,\r\n    paymasterAndData = '0x',\r\n    preVerificationGas,\r\n    sender,\r\n    verificationGasLimit,\r\n  } = userOperation\r\n\r\n  if (entryPointVersion === '0.8')\r\n    return hashTypedData(\r\n      getUserOperationTypedData({\r\n        chainId,\r\n        entryPointAddress,\r\n        userOperation,\r\n      }),\r\n    )\r\n\r\n  const packedUserOp = (() => {\r\n    if (entryPointVersion === '0.6') {\r\n      const factory = userOperation.initCode?.slice(0, 42) as Hex\r\n      const factoryData = userOperation.initCode?.slice(42) as Hex | undefined\r\n      const initCode = getInitCode({\r\n        authorization,\r\n        factory,\r\n        factoryData,\r\n      })\r\n      return encodeAbiParameters(\r\n        [\r\n          { type: 'address' },\r\n          { type: 'uint256' },\r\n          { type: 'bytes32' },\r\n          { type: 'bytes32' },\r\n          { type: 'uint256' },\r\n          { type: 'uint256' },\r\n          { type: 'uint256' },\r\n          { type: 'uint256' },\r\n          { type: 'uint256' },\r\n          { type: 'bytes32' },\r\n        ],\r\n        [\r\n          sender,\r\n          nonce,\r\n          keccak256(initCode),\r\n          keccak256(callData),\r\n          callGasLimit,\r\n          verificationGasLimit,\r\n          preVerificationGas,\r\n          maxFeePerGas,\r\n          maxPriorityFeePerGas,\r\n          keccak256(paymasterAndData),\r\n        ],\r\n      )\r\n    }\r\n\r\n    if (entryPointVersion === '0.7') {\r\n      const packedUserOp = toPackedUserOperation(userOperation)\r\n      return encodeAbiParameters(\r\n        [\r\n          { type: 'address' },\r\n          { type: 'uint256' },\r\n          { type: 'bytes32' },\r\n          { type: 'bytes32' },\r\n          { type: 'bytes32' },\r\n          { type: 'uint256' },\r\n          { type: 'bytes32' },\r\n          { type: 'bytes32' },\r\n        ],\r\n        [\r\n          packedUserOp.sender,\r\n          packedUserOp.nonce,\r\n          keccak256(packedUserOp.initCode),\r\n          keccak256(packedUserOp.callData),\r\n          packedUserOp.accountGasLimits,\r\n          packedUserOp.preVerificationGas,\r\n          packedUserOp.gasFees,\r\n          keccak256(packedUserOp.paymasterAndData),\r\n        ],\r\n      )\r\n    }\r\n\r\n    throw new Error(`entryPointVersion \"${entryPointVersion}\" not supported.`)\r\n  })()\r\n\r\n  return keccak256(\r\n    encodeAbiParameters(\r\n      [{ type: 'bytes32' }, { type: 'address' }, { type: 'uint256' }],\r\n      [keccak256(packedUserOp), entryPointAddress, BigInt(chainId)],\r\n    ),\r\n  )\r\n}\r\n", "import { type Abi, parseAbi } from 'abitype'\r\n\r\nimport { getCode } from '../../actions/public/getCode.js'\r\nimport { readContract } from '../../actions/public/readContract.js'\r\nimport type { Prettify } from '../../types/utils.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport { createNonceManager } from '../../utils/nonceManager.js'\r\nimport { serializeErc6492Signature } from '../../utils/signature/serializeErc6492Signature.js'\r\nimport type { EntryPointVersion } from '../types/entryPointVersion.js'\r\nimport type { SmartAccount, SmartAccountImplementation } from './types.js'\r\n\r\nexport type ToSmartAccountParameters<\r\n  entryPointAbi extends Abi | readonly unknown[] = Abi,\r\n  entryPointVersion extends EntryPointVersion = EntryPointVersion,\r\n  extend extends object = object,\r\n> = SmartAccountImplementation<entryPointAbi, entryPointVersion, extend>\r\n\r\nexport type ToSmartAccountReturnType<\r\n  implementation extends\r\n    SmartAccountImplementation = SmartAccountImplementation,\r\n> = Prettify<SmartAccount<implementation>>\r\n\r\n/**\r\n * @description Creates a Smart Account with a provided account implementation.\r\n *\r\n * @param parameters - {@link ToSmartAccountParameters}\r\n * @returns A Smart Account. {@link ToSmartAccountReturnType}\r\n */\r\nexport async function toSmartAccount<\r\n  implementation extends SmartAccountImplementation,\r\n>(\r\n  implementation: implementation,\r\n): Promise<ToSmartAccountReturnType<implementation>> {\r\n  const {\r\n    extend,\r\n    nonceKeyManager = createNonceManager({\r\n      source: {\r\n        get() {\r\n          return Date.now()\r\n        },\r\n        set() {},\r\n      },\r\n    }),\r\n    ...rest\r\n  } = implementation\r\n\r\n  let deployed = false\r\n\r\n  const address = await implementation.getAddress()\r\n\r\n  return {\r\n    ...extend,\r\n    ...rest,\r\n    address,\r\n    async getFactoryArgs() {\r\n      if ('isDeployed' in this && (await this.isDeployed()))\r\n        return { factory: undefined, factoryData: undefined }\r\n      return implementation.getFactoryArgs()\r\n    },\r\n    async getNonce(parameters) {\r\n      const key =\r\n        parameters?.key ??\r\n        BigInt(\r\n          await nonceKeyManager.consume({\r\n            address,\r\n            chainId: implementation.client.chain!.id!,\r\n            client: implementation.client,\r\n          }),\r\n        )\r\n\r\n      if (implementation.getNonce)\r\n        return await implementation.getNonce({ ...parameters, key })\r\n\r\n      const nonce = await readContract(implementation.client, {\r\n        abi: parseAbi([\r\n          'function getNonce(address, uint192) pure returns (uint256)',\r\n        ]),\r\n        address: implementation.entryPoint.address,\r\n        functionName: 'getNonce',\r\n        args: [address, key],\r\n      })\r\n      return nonce\r\n    },\r\n    async isDeployed() {\r\n      if (deployed) return true\r\n      const code = await getAction(\r\n        implementation.client,\r\n        getCode,\r\n        'getCode',\r\n      )({\r\n        address,\r\n      })\r\n      deployed = Boolean(code)\r\n      return deployed\r\n    },\r\n    ...(implementation.sign\r\n      ? {\r\n          async sign(parameters) {\r\n            const [{ factory, factoryData }, signature] = await Promise.all([\r\n              this.getFactoryArgs(),\r\n              implementation.sign!(parameters),\r\n            ])\r\n            if (factory && factoryData)\r\n              return serializeErc6492Signature({\r\n                address: factory,\r\n                data: factoryData,\r\n                signature,\r\n              })\r\n            return signature\r\n          },\r\n        }\r\n      : {}),\r\n    async signMessage(parameters) {\r\n      const [{ factory, factoryData }, signature] = await Promise.all([\r\n        this.getFactoryArgs(),\r\n        implementation.signMessage(parameters),\r\n      ])\r\n      if (factory && factoryData && factory !== '0x7702')\r\n        return serializeErc6492Signature({\r\n          address: factory,\r\n          data: factoryData,\r\n          signature,\r\n        })\r\n      return signature\r\n    },\r\n    async signTypedData(parameters) {\r\n      const [{ factory, factoryData }, signature] = await Promise.all([\r\n        this.getFactoryArgs(),\r\n        implementation.signTypedData(parameters),\r\n      ])\r\n      if (factory && factoryData && factory !== '0x7702')\r\n        return serializeErc6492Signature({\r\n          address: factory,\r\n          data: factoryData,\r\n          signature,\r\n        })\r\n      return signature\r\n    },\r\n    type: 'smart',\r\n  } as ToSmartAccountReturnType<implementation>\r\n}\r\n", "export const entryPoint06Address =\r\n  '0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789' as const\r\nexport const entryPoint07Address =\r\n  '0x0000000071727De22E5E9d8BAf0edAc6f37da032' as const\r\nexport const entryPoint08Address =\r\n  '0x4337084D9E255Ff0702461CF8895CE9E3b5Ff108' as const\r\n", "export const abi = [\r\n  {\r\n    type: 'fallback',\r\n    stateMutability: 'payable',\r\n  },\r\n  {\r\n    type: 'receive',\r\n    stateMutability: 'payable',\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'execute',\r\n    inputs: [\r\n      {\r\n        name: 'mode',\r\n        type: 'bytes32',\r\n        internalType: 'bytes32',\r\n      },\r\n      {\r\n        name: 'executionData',\r\n        type: 'bytes',\r\n        internalType: 'bytes',\r\n      },\r\n    ],\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'supportsExecutionMode',\r\n    inputs: [\r\n      {\r\n        name: 'mode',\r\n        type: 'bytes32',\r\n        internalType: 'bytes32',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        name: 'result',\r\n        type: 'bool',\r\n        internalType: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n  },\r\n  {\r\n    type: 'error',\r\n    name: 'FnSelectorNotRecognized',\r\n    inputs: [],\r\n  },\r\n  {\r\n    type: 'error',\r\n    name: 'UnsupportedExecutionMode',\r\n    inputs: [],\r\n  },\r\n] as const\r\n\r\nexport const executionMode = {\r\n  default: '0x0100000000000000000000000000000000000000000000000000000000000000',\r\n  opData: '0x0100000000007821000100000000000000000000000000000000000000000000',\r\n  batchOfBatches:\r\n    '0x0100000000007821000200000000000000000000000000000000000000000000',\r\n} as const\r\n", "import * as abitype from 'abitype'\r\nimport type * as Abi from './Abi.js'\r\nimport * as AbiItem from './AbiItem.js'\r\nimport * as AbiParameters from './AbiParameters.js'\r\nimport type * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\nimport type * as internal from './internal/abiError.js'\r\nimport type * as AbiItem_internal from './internal/abiItem.js'\r\nimport type { IsNarrowable, IsNever } from './internal/types.js'\r\n\r\n/** Root type for an {@link ox#AbiItem.AbiItem} with an `error` type. */\r\nexport type AbiError = abitype.AbiError & {\r\n  hash?: Hex.Hex | undefined\r\n  overloads?: readonly AbiError[] | undefined\r\n}\r\n\r\n/** @internal */\r\nexport function decode<\r\n  const abiError extends AbiError,\r\n  as extends 'Object' | 'Array' = 'Array',\r\n>(\r\n  abiError: abiError,\r\n  data: Hex.Hex,\r\n  options?: decode.Options<as> | undefined,\r\n): decode.ReturnType<abiError, as>\r\n/**\r\n * ABI-decodes the provided error input (`inputs`).\r\n *\r\n * :::tip\r\n *\r\n * This function is typically used to decode contract function reverts (e.g. a JSON-RPC error response).\r\n *\r\n * See the [End-to-end Example](#end-to-end).\r\n *\r\n * :::\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const error = AbiError.from('error InvalidSignature(uint r, uint s, uint8 yParity)')\r\n *\r\n * const value = AbiError.decode(error, '0xecde634900000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001')\r\n * // @log: [420n, 69n, 1]\r\n * ```\r\n *\r\n * @example\r\n * You can extract an ABI Error from a JSON ABI with {@link ox#AbiError.(fromAbi:function)}:\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Abi, AbiError } from 'ox'\r\n *\r\n * const abi = Abi.from([...]) // [!code hl]\r\n * const error = AbiError.fromAbi(abi, 'InvalidSignature') // [!code hl]\r\n *\r\n * const value = AbiError.decode(error, '0xecde634900000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001')\r\n * // @log: [420n, 69n, 1]\r\n * ```\r\n *\r\n * @example\r\n * You can pass the error `data` to the `name` property of {@link ox#AbiError.(fromAbi:function)} to extract and infer the error by its 4-byte selector:\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Abi, AbiError } from 'ox'\r\n *\r\n * const data = '0xecde634900000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001'\r\n *\r\n * const abi = Abi.from([...])\r\n * const error = AbiError.fromAbi(abi, data) // [!code hl]\r\n *\r\n * const value = AbiError.decode(error, data)\r\n * // @log: [420n, 69n, 1]\r\n * ```\r\n *\r\n * @example\r\n * ### End-to-end\r\n *\r\n * Below is an end-to-end example of using `AbiError.decode` to decode the revert error of an `approve` contract call on the [Wagmi Mint Example contract](https://etherscan.io/address/0xfba3912ca04dd458c843e2ee08967fc04f3579c2).\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import 'ox/window'\r\n * import { Abi, AbiError, AbiFunction } from 'ox'\r\n *\r\n * // 1. Extract the Function from the Contract's ABI.\r\n * const abi = Abi.from([\r\n *   // ...\r\n *   {\r\n *     inputs: [\r\n *       { name: 'to', type: 'address' },\r\n *       { name: 'tokenId', type: 'uint256' },\r\n *     ],\r\n *     name: 'approve',\r\n *     outputs: [],\r\n *     stateMutability: 'nonpayable',\r\n *     type: 'function',\r\n *   },\r\n *   // ...\r\n * ])\r\n * const approve = AbiFunction.fromAbi(abi, 'approve')\r\n *\r\n * // 2. Encode the Function Input.\r\n * const data = AbiFunction.encodeData(\r\n *   approve,\r\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n]\r\n * )\r\n *\r\n * try {\r\n *   // 3. Attempt to perform the the Contract Call.\r\n *   await window.ethereum!.request({\r\n *     method: 'eth_call',\r\n *     params: [\r\n *       {\r\n *         data,\r\n *         to: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\r\n *       },\r\n *     ],\r\n *   })\r\n * } catch (e) { // [!code focus]\r\n *   // 4. Extract and decode the Error. // [!code focus]\r\n *   const error = AbiError.fromAbi(abi, e.data) // [!code focus]\r\n *   const value = AbiError.decode(error, e.data) // [!code focus]\r\n *   console.error(`${error.name}(${value})`) // [!code focus]\r\n * // @error:   Error(ERC721: approve caller is not owner nor approved for all)\r\n * } // [!code focus]\r\n * ```\r\n *\r\n * :::note\r\n *\r\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\r\n * type of JSON-RPC interface.\r\n *\r\n * :::\r\n *\r\n * @param abiError - The ABI Error to decode.\r\n * @param data - The error data.\r\n * @param options - Decoding options.\r\n * @returns The decoded error.\r\n */\r\nexport function decode(\r\n  abiError: AbiError,\r\n  data: Hex.Hex,\r\n  options?: decode.Options | undefined,\r\n): unknown | readonly unknown[] | undefined\r\n/** @internal */\r\nexport function decode(\r\n  abiError: AbiError,\r\n  data: Hex.Hex,\r\n  options: decode.Options = {},\r\n): decode.ReturnType {\r\n  if (Hex.size(data) < 4) throw new AbiItem.InvalidSelectorSizeError({ data })\r\n  if (abiError.inputs.length === 0) return undefined\r\n\r\n  const values = AbiParameters.decode(\r\n    abiError.inputs,\r\n    Hex.slice(data, 4),\r\n    options,\r\n  )\r\n  if (values && Object.keys(values).length === 1) {\r\n    if (Array.isArray(values)) return values[0]\r\n    return Object.values(values)[0]\r\n  }\r\n  return values\r\n}\r\n\r\nexport declare namespace decode {\r\n  type Options<as extends 'Object' | 'Array' = 'Array'> = {\r\n    /**\r\n     * Whether the decoded values should be returned as an `Object` or `Array`.\r\n     *\r\n     * @default \"Array\"\r\n     */\r\n    as?: as | 'Array' | 'Object' | undefined\r\n  }\r\n\r\n  type ReturnType<\r\n    abiError extends AbiError = AbiError,\r\n    as extends 'Object' | 'Array' = 'Array',\r\n  > = IsNarrowable<abiError, AbiError> extends true\r\n    ? abiError['inputs'] extends readonly []\r\n      ? undefined\r\n      : abiError['inputs'] extends readonly [\r\n            infer type extends abitype.AbiParameter,\r\n          ]\r\n        ? abitype.AbiParameterToPrimitiveType<type>\r\n        : AbiParameters.decode.ReturnType<\r\n              abiError['inputs'],\r\n              as\r\n            > extends infer types\r\n          ? types extends readonly []\r\n            ? undefined\r\n            : types extends readonly [infer type]\r\n              ? type\r\n              : types\r\n          : never\r\n    : unknown | readonly unknown[] | undefined\r\n\r\n  type ErrorType =\r\n    | AbiParameters.decode.ErrorType\r\n    | Hex.size.ErrorType\r\n    | typeof AbiItem.InvalidSelectorSizeError\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * ABI-encodes the provided error input (`inputs`), prefixed with the 4 byte error selector.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const error = AbiError.from(\r\n *   'error InvalidSignature(uint r, uint s, uint8 yParity)'\r\n * )\r\n *\r\n * const data = AbiError.encode( // [!code focus]\r\n *   error, // [!code focus]\r\n *   [1n, 2n, 0] // [!code focus]\r\n * ) // [!code focus]\r\n * // @log: '0x095ea7b3000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000000000000000000010f2c'\r\n * ```\r\n *\r\n * @example\r\n * You can extract an ABI Error from a JSON ABI with {@link ox#AbiError.(fromAbi:function)}:\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Abi, AbiError } from 'ox'\r\n *\r\n * const abi = Abi.from([ // [!code hl]\r\n *   // ... // [!code hl]\r\n *   { // [!code hl]\r\n *     name: 'InvalidSignature', // [!code hl]\r\n *     type: 'error', // [!code hl]\r\n *     inputs: [ // [!code hl]\r\n *       { name: 'r', type: 'uint256' }, // [!code hl]\r\n *       { name: 's', type: 'uint256' }, // [!code hl]\r\n *       { name: 'yParity', type: 'uint8' }, // [!code hl]\r\n *     ], // [!code hl]\r\n *   }, // [!code hl]\r\n *   // ... // [!code hl]\r\n * ]) // [!code hl]\r\n * const error = AbiError.fromAbi(abi, 'InvalidSignature') // [!code hl]\r\n *\r\n * const data = AbiError.encode(\r\n *   error,\r\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n]\r\n * )\r\n * // @log: '0x095ea7b3000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000000000000000000010f2c'\r\n * ```\r\n *\r\n * @param abiError - ABI Error to encode\r\n * @param args - Error arguments\r\n * @returns ABI-encoded error name and arguments\r\n */\r\nexport function encode<const abiError extends AbiError>(\r\n  abiError: abiError,\r\n  ...args: encode.Args<abiError>\r\n): encode.ReturnType {\r\n  const selector = getSelector(abiError)\r\n\r\n  const data =\r\n    args.length > 0\r\n      ? AbiParameters.encode(abiError.inputs, (args as any)[0])\r\n      : undefined\r\n\r\n  return data ? Hex.concat(selector, data) : selector\r\n}\r\n\r\nexport declare namespace encode {\r\n  type Args<abiError extends AbiError = AbiError> = IsNarrowable<\r\n    abiError,\r\n    AbiError\r\n  > extends true\r\n    ? abitype.AbiParametersToPrimitiveTypes<\r\n        abiError['inputs']\r\n      > extends readonly []\r\n      ? []\r\n      : [abitype.AbiParametersToPrimitiveTypes<abiError['inputs']>]\r\n    : readonly unknown[]\r\n\r\n  type ReturnType = Hex.Hex\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Formats an {@link ox#AbiError.AbiError} into a **Human Readable ABI Error**.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const formatted = AbiError.format({\r\n *   type: 'error',\r\n *   name: 'Example',\r\n *   inputs: [\r\n *     {\r\n *       name: 'spender',\r\n *       type: 'address',\r\n *     },\r\n *     {\r\n *       name: 'amount',\r\n *       type: 'uint256',\r\n *     },\r\n *   ],\r\n * })\r\n *\r\n * formatted\r\n * //    ^?\r\n *\r\n *\r\n * ```\r\n *\r\n * @param abiError - The ABI Error to format.\r\n * @returns The formatted ABI Error.\r\n */\r\nexport function format<const abiError extends AbiError>(\r\n  abiError: abiError | AbiError,\r\n): abitype.FormatAbiItem<abiError> {\r\n  return abitype.formatAbiItem(abiError) as never\r\n}\r\n\r\nexport declare namespace format {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Parses an arbitrary **JSON ABI Error** or **Human Readable ABI Error** into a typed {@link ox#AbiError.AbiError}.\r\n *\r\n * @example\r\n * ### JSON ABIs\r\n *\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const badSignatureVError = AbiError.from({\r\n *   inputs: [{ name: 'v', type: 'uint8' }],\r\n *   name: 'BadSignatureV',\r\n *   type: 'error',\r\n * })\r\n *\r\n * badSignatureVError\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * @example\r\n * ### Human Readable ABIs\r\n *\r\n * A Human Readable ABI can be parsed into a typed ABI object:\r\n *\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const badSignatureVError = AbiError.from(\r\n *   'error BadSignatureV(uint8 v)' // [!code hl]\r\n * )\r\n *\r\n * badSignatureVError\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * @example\r\n * It is possible to specify `struct`s along with your definitions:\r\n *\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const badSignatureVError = AbiError.from([\r\n *   'struct Signature { uint8 v; }', // [!code hl]\r\n *   'error BadSignatureV(Signature signature)',\r\n * ])\r\n *\r\n * badSignatureVError\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n *\r\n *\r\n * @param abiError - The ABI Error to parse.\r\n * @returns Typed ABI Error.\r\n */\r\nexport function from<\r\n  const abiError extends AbiError | string | readonly string[],\r\n>(\r\n  abiError: (abiError | AbiError | string | readonly string[]) &\r\n    (\r\n      | (abiError extends string ? internal.Signature<abiError> : never)\r\n      | (abiError extends readonly string[]\r\n          ? internal.Signatures<abiError>\r\n          : never)\r\n      | AbiError\r\n    ),\r\n  options: from.Options = {},\r\n): from.ReturnType<abiError> {\r\n  return AbiItem.from(abiError as AbiError, options) as never\r\n}\r\n\r\nexport declare namespace from {\r\n  type Options = {\r\n    /**\r\n     * Whether or not to prepare the extracted function (optimization for encoding performance).\r\n     * When `true`, the `hash` property is computed and included in the returned value.\r\n     *\r\n     * @default true\r\n     */\r\n    prepare?: boolean | undefined\r\n  }\r\n\r\n  type ReturnType<abiError extends AbiError | string | readonly string[]> =\r\n    AbiItem.from.ReturnType<abiError>\r\n\r\n  type ErrorType = AbiItem.from.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Extracts an {@link ox#AbiError.AbiError} from an {@link ox#Abi.Abi} given a name and optional arguments.\r\n *\r\n * @example\r\n * ### Extracting by Name\r\n *\r\n * ABI Errors can be extracted by their name using the `name` option:\r\n *\r\n * ```ts twoslash\r\n * import { Abi, AbiError } from 'ox'\r\n *\r\n * const abi = Abi.from([\r\n *   'function foo()',\r\n *   'error BadSignatureV(uint8 v)',\r\n *   'function bar(string a) returns (uint256 x)',\r\n * ])\r\n *\r\n * const item = AbiError.fromAbi(abi, 'BadSignatureV') // [!code focus]\r\n * //    ^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * @example\r\n * ### Extracting by Selector\r\n *\r\n * ABI Errors can be extract by their selector when {@link ox#Hex.Hex} is provided to `name`.\r\n *\r\n * ```ts twoslash\r\n * import { Abi, AbiError } from 'ox'\r\n *\r\n * const abi = Abi.from([\r\n *   'function foo()',\r\n *   'error BadSignatureV(uint8 v)',\r\n *   'function bar(string a) returns (uint256 x)',\r\n * ])\r\n * const item = AbiError.fromAbi(abi, '0x095ea7b3') // [!code focus]\r\n * //    ^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * :::note\r\n *\r\n * Extracting via a hex selector is useful when extracting an ABI Error from JSON-RPC error data.\r\n *\r\n * :::\r\n *\r\n * @param abi - The ABI to extract from.\r\n * @param name - The name (or selector) of the ABI item to extract.\r\n * @param options - Extraction options.\r\n * @returns The ABI item.\r\n */\r\nexport function fromAbi<\r\n  const abi extends Abi.Abi | readonly unknown[],\r\n  name extends Name<abi>,\r\n  const args extends\r\n    | AbiItem_internal.ExtractArgs<abi, name>\r\n    | undefined = undefined,\r\n  //\r\n  allNames = Name<abi>,\r\n>(\r\n  abi: abi | Abi.Abi | readonly unknown[],\r\n  name: Hex.Hex | (name extends allNames ? name : never),\r\n  options?: AbiItem.fromAbi.Options<\r\n    abi,\r\n    name,\r\n    args,\r\n    AbiItem_internal.ExtractArgs<abi, name>\r\n  >,\r\n): fromAbi.ReturnType<abi, name, args> {\r\n  if (name === 'Error') return solidityError as never\r\n  if (name === 'Panic') return solidityPanic as never\r\n  if (Hex.validate(name, { strict: false })) {\r\n    const selector = Hex.slice(name, 0, 4)\r\n    if (selector === solidityErrorSelector) return solidityError as never\r\n    if (selector === solidityPanicSelector) return solidityPanic as never\r\n  }\r\n\r\n  const item = AbiItem.fromAbi(abi, name, options as any)\r\n  if (item.type !== 'error')\r\n    throw new AbiItem.NotFoundError({ name, type: 'error' })\r\n  return item as never\r\n}\r\n\r\nexport declare namespace fromAbi {\r\n  type ReturnType<\r\n    abi extends Abi.Abi | readonly unknown[] = Abi.Abi,\r\n    name extends Name<abi> = Name<abi>,\r\n    args extends\r\n      | AbiItem_internal.ExtractArgs<abi, name>\r\n      | undefined = AbiItem_internal.ExtractArgs<abi, name>,\r\n  > = IsNarrowable<name, Name<abi>> extends true\r\n    ?\r\n        | (name extends 'Error' ? typeof solidityError : never)\r\n        | (name extends 'Panic'\r\n            ? typeof solidityPanic\r\n            : never) extends infer result\r\n      ? IsNever<result> extends true\r\n        ? AbiItem.fromAbi.ReturnType<abi, name, args, AbiError>\r\n        : result\r\n      : never\r\n    :\r\n        | AbiItem.fromAbi.ReturnType<abi, name, args, AbiError>\r\n        | typeof solidityError\r\n        | typeof solidityPanic\r\n\r\n  type ErrorType = AbiItem.fromAbi.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Computes the [4-byte selector](https://solidity-by-example.org/function-selector/) for an {@link ox#AbiError.AbiError}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const selector = AbiError.getSelector('error BadSignatureV(uint8 v)')\r\n * // @log: '0x6352211e'\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiError } from 'ox'\r\n *\r\n * const selector = AbiError.getSelector({\r\n *   inputs: [{ name: 'v', type: 'uint8' }],\r\n *   name: 'BadSignatureV',\r\n *   type: 'error'\r\n * })\r\n * // @log: '0x6352211e'\r\n * ```\r\n *\r\n * @param abiItem - The ABI item to compute the selector for.\r\n * @returns The first 4 bytes of the {@link ox#Hash.(keccak256:function)} hash of the error signature.\r\n */\r\nexport function getSelector(abiItem: string | AbiError): Hex.Hex {\r\n  return AbiItem.getSelector(abiItem)\r\n}\r\n\r\nexport declare namespace getSelector {\r\n  type ErrorType = AbiItem.getSelector.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n// https://docs.soliditylang.org/en/v0.8.16/control-structures.html#panic-via-assert-and-error-via-require\r\nexport const panicReasons = {\r\n  1: 'An `assert` condition failed.',\r\n  17: 'Arithmetic operation resulted in underflow or overflow.',\r\n  18: 'Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).',\r\n  33: 'Attempted to convert to an invalid type.',\r\n  34: 'Attempted to access a storage byte array that is incorrectly encoded.',\r\n  49: 'Performed `.pop()` on an empty array',\r\n  50: 'Array index is out of bounds.',\r\n  65: 'Allocated too much memory or created an array which is too large.',\r\n  81: 'Attempted to call a zero-initialized variable of internal function type.',\r\n} as Record<number, string>\r\n\r\nexport const solidityError = /*#__PURE__*/ from({\r\n  inputs: [\r\n    {\r\n      name: 'message',\r\n      type: 'string',\r\n    },\r\n  ],\r\n  name: 'Error',\r\n  type: 'error',\r\n})\r\n\r\nexport const solidityErrorSelector = '0x08c379a0'\r\n\r\nexport const solidityPanic = /*#__PURE__*/ from({\r\n  inputs: [\r\n    {\r\n      name: 'reason',\r\n      type: 'uint8',\r\n    },\r\n  ],\r\n  name: 'Panic',\r\n  type: 'error',\r\n})\r\n\r\nexport const solidityPanicSelector = '0x4e487b71'\r\n\r\n/**\r\n * Extracts an {@link ox#AbiError.AbiError} item from an {@link ox#Abi.Abi}, given a name.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Abi, AbiError } from 'ox'\r\n *\r\n * const abi = Abi.from([\r\n *   'error Foo(string)',\r\n *   'error Bar(uint256)',\r\n * ])\r\n *\r\n * type Foo = AbiError.FromAbi<typeof abi, 'Foo'>\r\n * //   ^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n */\r\nexport type FromAbi<\r\n  abi extends Abi.Abi,\r\n  name extends ExtractNames<abi>,\r\n> = abitype.ExtractAbiError<abi, name>\r\n\r\n/**\r\n * Extracts the names of all {@link ox#AbiError.AbiError} items in an {@link ox#Abi.Abi}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Abi, AbiError } from 'ox'\r\n *\r\n * const abi = Abi.from([\r\n *   'error Foo(string)',\r\n *   'error Bar(uint256)',\r\n * ])\r\n *\r\n * type names = AbiError.Name<typeof abi>\r\n * //   ^?\r\n * ```\r\n */\r\nexport type Name<abi extends Abi.Abi | readonly unknown[] = Abi.Abi> =\r\n  abi extends Abi.Abi ? ExtractNames<abi> : string\r\n\r\nexport type ExtractNames<abi extends Abi.Abi> =\r\n  | abitype.ExtractAbiErrorNames<abi>\r\n  | 'Panic'\r\n  | 'Error'\r\n", "import type { Address } from '../../../accounts/index.js'\r\nimport { readContract } from '../../../actions/public/readContract.js'\r\nimport type { Client } from '../../../clients/createClient.js'\r\nimport type { Transport } from '../../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../../errors/utils.js'\r\nimport type { Chain } from '../../../types/chain.js'\r\nimport type { Hex } from '../../../types/misc.js'\r\nimport { withCache } from '../../../utils/promise/withCache.js'\r\nimport { abi, executionMode } from '../constants.js'\r\n\r\nexport type SupportsExecutionModeParameters = {\r\n  address: Address\r\n  mode?: 'default' | 'opData' | 'batchOfBatches' | Hex\r\n}\r\n\r\nexport type SupportsExecutionModeReturnType = boolean\r\n\r\nexport type SupportsExecutionModeErrorType = ErrorType\r\n\r\nconst toSerializedMode = {\r\n  default: executionMode.default,\r\n  opData: executionMode.opData,\r\n  batchOfBatches: executionMode.batchOfBatches,\r\n} as const\r\n\r\n/**\r\n * Checks if the contract supports the ERC-7821 execution mode.\r\n *\r\n * @example\r\n * ```ts\r\n * import { createClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { supportsExecutionMode } from 'viem/experimental/erc7821'\r\n *\r\n * const client = createClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n *\r\n * const supported = await supportsExecutionMode(client, {\r\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\r\n * })\r\n * ```\r\n *\r\n * @param client - Client to use.\r\n * @param parameters - {@link SupportsExecutionModeParameters}\r\n * @returns If the execution mode is supported. {@link SupportsExecutionModeReturnType}\r\n */\r\nexport async function supportsExecutionMode<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n>(\r\n  client: Client<Transport, chain>,\r\n  parameters: SupportsExecutionModeParameters,\r\n): Promise<SupportsExecutionModeReturnType> {\r\n  const { address, mode: m = 'default' } = parameters\r\n  const mode = m.startsWith('0x') ? m : (toSerializedMode as any)[m]\r\n  try {\r\n    return await withCache(\r\n      () =>\r\n        readContract(client, {\r\n          abi,\r\n          address,\r\n          functionName: 'supportsExecutionMode',\r\n          args: [mode],\r\n        }),\r\n      {\r\n        cacheKey: `supportsExecutionMode.${address}.${mode}`,\r\n      },\r\n    )\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n"],
  "mappings": "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I;EAAG;EAAG;EAAG;EAAI;EAAI;EAAG;EAAG;EAAI;EAAG;EAAG;EAAI;EAAG;EAAG;EACnD;EAAI;EAAG;EAAI;EAAG;EAAG;EAAG;EAAI;EAAI;EAAI;EAAI;EAAG;EAAG;EAAG;EAAG;EAAG;EACnD;EAAG;EAAG;EAAG;EAAG;EAAI;EAAI;EAAI;EAAI;EAAG;EAAG;EAAG;EAAI;EAAG;EAAG;EAAI;EACnD;EAAG;EAAG;EAAG;EAAG;EAAG;EAAG;EAAI;EAAI;EAAI;EAAG;EAAI;EAAI;EAAG;EAAG;EAAG;EAClD;EAAG;EAAI;EAAG;EAAI;EAAG;EAAI;EAAG;EAAG;EAAG;EAAI;EAAG;EAAG;EAAI;EAAI;EAAG;EACnD;EAAI;EAAG;EAAG;EAAI;EAAI;EAAI;EAAG;EAAI;EAAG;EAAG;EAAG;EAAG;EAAG;EAAG;EAAG;EAClD;EAAI;EAAI;EAAG;EAAI;EAAI;EAAG;EAAG;EAAG;EAAG;EAAG;EAAI;EAAG;EAAG;EAAG;EAAG;EAClD;EAAG;EAAI;EAAI;EAAG;EAAI;EAAG;EAAG;EAAG;EAAI;EAAG;EAAI;EAAG;EAAG;EAAG;EAAI;EACnD;EAAI;EAAG;EAAG;EAAG;EAAG;EAAG;EAAG;EAAG;EAAI;EAAI;EAAG;EAAI;EAAG;EAAI;EAAI;EACnD;EAAG;EAAG;EAAG;EAAG;EAAG;EAAG;EAAG;EAAG;EAAG;EAAG;EAAI;EAAI;EAAI;EAAI;EAAI;EAClD;EAAI;EAAI;EAAG;EAAG;EAAG;EAAI;EAAI;EAAG;EAAG;EAAI;EAAG;EAAG;EAAI;EAAG;EAAG;;EAEnD;EAAI;EAAG;EAAI;EAAG;EAAG;EAAG;EAAI;EAAI;EAAI;EAAI;EAAG;EAAG;EAAG;EAAG;EAAG;EACnD;EAAG;EAAG;EAAG;EAAG;EAAI;EAAI;EAAI;EAAI;EAAG;EAAG;EAAG;EAAI;EAAG;EAAG;EAAI;EACnD;EAAG;EAAG;EAAG;EAAG;EAAG;EAAG;EAAI;EAAI;EAAI;EAAG;EAAI;EAAI;EAAG;EAAG;EAAG;EAClD;EAAG;EAAI;EAAG;EAAI;EAAG;EAAI;EAAG;EAAG;EAAG;EAAI;EAAG;EAAG;EAAI;EAAI;EAA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;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA+/Dnd,MAAM,IAAI;;;AC//DbjnhfrjB,MAAM,IAAI;;;AC//DV,IAAMC,aAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;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",
  "names": ["SizeExceedsPaddingSizeError", "SizeOverflowError", "SliceOffsetOutOfBoundsError", "assert", "concat", "from", "fromString", "random", "size", "slice", "trimRight", "validate", "BaseError", "stringify", "value", "pad", "size", "assertSize", "size", "SizeOverflowError", "assertStartOffset", "SliceOffsetOutOfBoundsError", "assertEndOffset", "pad", "SizeExceedsPaddingSizeError", "trim", "concat", "from", "size", "assertSize", "BaseError", "fromNumber", "padRight", "padRight", "size", "pad", "toBigInt", "BaseError", "stringify", "size", "encoder", "assert", "concat", "from", "assertSize", "size", "fromString", "pad", "random", "slice", "assertStartOffset", "assertEndOffset", "trim", "trimRight", "validate", "BaseError", "stringify", "SizeOverflowError", "SliceOffsetOutOfBoundsError", "SizeExceedsPaddingSizeError", "assert", "from", "fromBytes", "fromHex", "toBytes", "validate", "assert", "from", "validate", "fromHex", "fromBytes", "x", "slice", "prefix", "toBytes", "concat", "BaseError", "stringify", "size", "InvalidSerializedSizeError", "assert", "from", "fromBytes", "fromHex", "toBytes", "toHex", "validate", "assert", "fromBytes", "fromHex", "InvalidSerializedSizeError", "slice", "yParity", "from", "toBytes", "toHex", "concat", "validate", "BaseError", "size", "stringify", "verify", "encoder", "decoder", "fromBytes", "pad", "fromHex", "toBytes", "size", "encoder", "crypto", "abytes", "hexes", "toBytes", "abytes", "createHasher", "toBytes", "isLE", "_32n", "toBytes", "abytes", "K", "createHasher", "toBytes", "abytes", "createHasher", "T1", "sha256", "createHasher", "sha512", "sha384", "sha256", "keccak256", "from", "sha256", "from", "Field", "Point", "mapToCurveSimpleSWU", "createCurve", "sha256", "createHasher", "sha384", "sha512", "p256", "p256", "from", "sha256", "fromString", "concat", "fromHex", "toBytes", "keccak256", "verify", "BaseError", "sign", "verify", "from", "sign", "toBigInt", "p256", "verify", "toBytes", "concat", "fromNumber", "size", "assert", "checksum", "keccak256", "BaseError", "BaseError", "from", "keccak256", "fromString", "size", "BaseError", "types", "concat", "encodePacked", "encode", "assert", "fromString", "size", "BaseError", "size", "BaseError", "from", "from", "from", "toBytes", "abytes", "compress", "toBytes", "abytes", "compress", "_0n", "_1n", "_2n", "Fp2", "Fp12", "msg", "Fp", "Fp6", "createHasher", "utils", "getPublicKey", "sign", "verify", "_0n", "_1n", "_2n", "_3n", "Fp", "Fp2", "G2psi", "G2psi2", "Field", "ORDER", "Fp6", "Fp4Square", "Fp12", "_0n", "_1n", "_2n", "_3n", "Field", "sha256", "Point", "from", "mapToCurveSimpleSWU", "toBytes", "pad", "abytes", "sha256", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "BaseError", "InvalidInputError", "error", "cause", "error", "abi", "getPaymasterStubData", "getPaymasterData", "parameters", "factory", "fees", "authorization", "getChainId", "paymaster", "encoder", "decoder", "integerToCharacter", "characterToInteger", "p256_CURVE", "p384_CURVE", "p521_CURVE", "Fp256", "Fp384", "Fp521", "createSWU", "p256", "p256_hasher", "p256", "createSWU", "Fp256", "p256_CURVE", "p384", "p384_CURVE", "Fp384", "p384_hasher", "p384", "createSWU", "Fp384", "p384_CURVE", "p521", "p521_CURVE", "Fp521", "p521_hasher", "p521", "createSWU", "Fp521", "p521_CURVE", "hashToCurve", "p256_hasher", "encodeToCurve", "createChallenge", "packedUserOp", "entryPoint06Address", "from", "solidityError", "from", "solidityPanic", "from"]
}

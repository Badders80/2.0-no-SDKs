{
  "version": 3,
  "sources": ["../../viem/node_modules/@noble/curves/src/utils.ts"],
  "sourcesContent": ["/**\r\n * Hex, bytes and number utilities.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport {\r\n  abytes as abytes_,\r\n  bytesToHex as bytesToHex_,\r\n  concatBytes as concatBytes_,\r\n  hexToBytes as hexToBytes_,\r\n  isBytes as isBytes_,\r\n} from '@noble/hashes/utils.js';\r\nexport {\r\n  abytes,\r\n  anumber,\r\n  bytesToHex,\r\n  bytesToUtf8,\r\n  concatBytes,\r\n  hexToBytes,\r\n  isBytes,\r\n  randomBytes,\r\n  utf8ToBytes,\r\n} from '@noble/hashes/utils.js';\r\nconst _0n = /* @__PURE__ */ BigInt(0);\r\nconst _1n = /* @__PURE__ */ BigInt(1);\r\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\r\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\r\nexport type CHash = {\r\n  (message: Uint8Array | string): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create(opts?: { dkLen?: number }): any; // For shake\r\n};\r\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\r\n\r\nexport function abool(title: string, value: boolean): void {\r\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\r\n}\r\n\r\n// Used in weierstrass, der\r\nexport function numberToHexUnpadded(num: number | bigint): string {\r\n  const hex = num.toString(16);\r\n  return hex.length & 1 ? '0' + hex : hex;\r\n}\r\n\r\nexport function hexToNumber(hex: string): bigint {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\r\n}\r\n\r\n// BE: Big Endian, LE: Little Endian\r\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\r\n  return hexToNumber(bytesToHex_(bytes));\r\n}\r\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\r\n  abytes_(bytes);\r\n  return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\r\n}\r\n\r\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\r\n  return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\r\n}\r\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\r\n  return numberToBytesBE(n, len).reverse();\r\n}\r\n// Unpadded, rarely used\r\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\r\n  return hexToBytes_(numberToHexUnpadded(n));\r\n}\r\n\r\n/**\r\n * Takes hex string or Uint8Array, converts to Uint8Array.\r\n * Validates output length.\r\n * Will throw error for other types.\r\n * @param title descriptive title for an error e.g. 'private key'\r\n * @param hex hex string or Uint8Array\r\n * @param expectedLength optional, will compare to result array's length\r\n * @returns\r\n */\r\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\r\n  let res: Uint8Array;\r\n  if (typeof hex === 'string') {\r\n    try {\r\n      res = hexToBytes_(hex);\r\n    } catch (e) {\r\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\r\n    }\r\n  } else if (isBytes_(hex)) {\r\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\r\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\r\n    res = Uint8Array.from(hex);\r\n  } else {\r\n    throw new Error(title + ' must be hex string or Uint8Array');\r\n  }\r\n  const len = res.length;\r\n  if (typeof expectedLength === 'number' && len !== expectedLength)\r\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\r\n  return res;\r\n}\r\n\r\n// Compares 2 u8a-s in kinda constant time\r\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\r\n  if (a.length !== b.length) return false;\r\n  let diff = 0;\r\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\r\n  return diff === 0;\r\n}\r\n\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\r\n/**\r\n * Converts bytes to string using UTF8 encoding.\r\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\r\n */\r\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\r\n\r\n// Is positive bigint\r\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\r\n\r\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\r\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\r\n}\r\n\r\n/**\r\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\r\n * @example\r\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\r\n */\r\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\r\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\r\n  // consider P=256n, min=0n, max=P\r\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\r\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\r\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\r\n  if (!inRange(n, min, max))\r\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\r\n}\r\n\r\n// Bit operations\r\n\r\n/**\r\n * Calculates amount of bits in a bigint.\r\n * Same as `n.toString(2).length`\r\n * TODO: merge with nLength in modular\r\n */\r\nexport function bitLen(n: bigint): number {\r\n  let len;\r\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\r\n  return len;\r\n}\r\n\r\n/**\r\n * Gets single bit at position.\r\n * NOTE: first bit position is 0 (same as arrays)\r\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\r\n */\r\nexport function bitGet(n: bigint, pos: number): bigint {\r\n  return (n >> BigInt(pos)) & _1n;\r\n}\r\n\r\n/**\r\n * Sets single bit at position.\r\n */\r\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\r\n  return n | ((value ? _1n : _0n) << BigInt(pos));\r\n}\r\n\r\n/**\r\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\r\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\r\n */\r\nexport const bitMask = (n: number): bigint => (_1n << BigInt(n)) - _1n;\r\n\r\n// DRBG\r\n\r\ntype Pred<T> = (v: Uint8Array) => T | undefined;\r\n/**\r\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n * @returns function that will call DRBG until 2nd arg returns something meaningful\r\n * @example\r\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\r\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\r\n */\r\nexport function createHmacDrbg<T>(\r\n  hashLen: number,\r\n  qByteLen: number,\r\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\r\n): (seed: Uint8Array, predicate: Pred<T>) => T {\r\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\r\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\r\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\r\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\r\n  const u8n = (len: number) => new Uint8Array(len); // creates Uint8Array\r\n  const u8of = (byte: number) => Uint8Array.of(byte); // another shortcut\r\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\r\n  let i = 0; // Iterations counter, will throw when over 1000\r\n  const reset = () => {\r\n    v.fill(1);\r\n    k.fill(0);\r\n    i = 0;\r\n  };\r\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\r\n  const reseed = (seed = u8n(0)) => {\r\n    // HMAC-DRBG reseed() function. Steps D-G\r\n    k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\r\n    v = h(); // v = hmac(k || v)\r\n    if (seed.length === 0) return;\r\n    k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\r\n    v = h(); // v = hmac(k || v)\r\n  };\r\n  const gen = () => {\r\n    // HMAC-DRBG generate() function\r\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\r\n    let len = 0;\r\n    const out: Uint8Array[] = [];\r\n    while (len < qByteLen) {\r\n      v = h();\r\n      const sl = v.slice();\r\n      out.push(sl);\r\n      len += v.length;\r\n    }\r\n    return concatBytes_(...out);\r\n  };\r\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\r\n    reset();\r\n    reseed(seed); // Steps D-G\r\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\r\n    while (!(res = pred(gen()))) reseed();\r\n    reset();\r\n    return res;\r\n  };\r\n  return genUntil;\r\n}\r\n\r\n// Validating curves and fields\r\n\r\nconst validatorFns = {\r\n  bigint: (val: any): boolean => typeof val === 'bigint',\r\n  function: (val: any): boolean => typeof val === 'function',\r\n  boolean: (val: any): boolean => typeof val === 'boolean',\r\n  string: (val: any): boolean => typeof val === 'string',\r\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes_(val),\r\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\r\n  array: (val: any): boolean => Array.isArray(val),\r\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\r\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\r\n} as const;\r\ntype Validator = keyof typeof validatorFns;\r\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\r\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\r\n\r\nexport function validateObject<T extends Record<string, any>>(\r\n  object: T,\r\n  validators: ValMap<T>,\r\n  optValidators: ValMap<T> = {}\r\n): T {\r\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\r\n    const checkVal = validatorFns[type];\r\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\r\n\r\n    const val = object[fieldName as keyof typeof object];\r\n    if (isOptional && val === undefined) return;\r\n    if (!checkVal(val, object)) {\r\n      throw new Error(\r\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\r\n      );\r\n    }\r\n  };\r\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\r\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\r\n  return object;\r\n}\r\n// validate type tests\r\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\r\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\r\n// // Should fail type-check\r\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\r\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\r\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\r\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\r\n\r\nexport function isHash(val: CHash): boolean {\r\n  return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\r\n}\r\nexport function _validateObject(\r\n  object: Record<string, any>,\r\n  fields: Record<string, string>,\r\n  optFields: Record<string, string> = {}\r\n): void {\r\n  if (!object || typeof object !== 'object') throw new Error('expected valid options object');\r\n  type Item = keyof typeof object;\r\n  function checkField(fieldName: Item, expectedType: string, isOpt: boolean) {\r\n    const val = object[fieldName];\r\n    if (isOpt && val === undefined) return;\r\n    const current = typeof val;\r\n    if (current !== expectedType || val === null)\r\n      throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\r\n  }\r\n  Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\r\n  Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\r\n}\r\n\r\n/**\r\n * throws not implemented error\r\n */\r\nexport const notImplemented = (): never => {\r\n  throw new Error('not implemented');\r\n};\r\n\r\n/**\r\n * Memoizes (caches) computation result.\r\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\r\n */\r\nexport function memoized<T extends object, R, O extends any[]>(\r\n  fn: (arg: T, ...args: O) => R\r\n): (arg: T, ...args: O) => R {\r\n  const map = new WeakMap<T, R>();\r\n  return (arg: T, ...args: O): R => {\r\n    const val = map.get(arg);\r\n    if (val !== undefined) return val;\r\n    const computed = fn(arg, ...args);\r\n    map.set(arg, computed);\r\n    return computed;\r\n  };\r\n}\r\n"],
  "mappings": "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",
  "names": []
}

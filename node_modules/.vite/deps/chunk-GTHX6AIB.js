import {
  require_blakejs
} from "./chunk-A6GZNS2Z.js";
import {
  Hash,
  HashMD,
  byteSwap32,
  byteSwapIfBE,
  bytes,
  checkOpts,
  createView,
  exists,
  hash,
  init_assert,
  init_md,
  init_sha256,
  init_utils,
  isLE,
  number,
  output,
  require_assert,
  require_u64,
  require_utils,
  rotl,
  sha256,
  toBytes,
  u32,
  wrapConstructor,
  wrapConstructorWithOpts,
  wrapXOFConstructorWithOpts
} from "./chunk-DMPPMQ45.js";
import {
  __asyncGenerator,
  __asyncValues,
  __await,
  __awaiter,
  __extends,
  __generator,
  __read,
  __spreadArray,
  __values as __values2,
  init_tslib_es6,
  require_bn
} from "./chunk-PCIH4M2A.js";
import {
  require_browser
} from "./chunk-KINQ5DOG.js";
import {
  require_events
} from "./chunk-USOZON4W.js";
import {
  ChainNotConfiguredError,
  ProviderNotFoundError,
  connect,
  createConnector,
  extractRpcUrls,
  getAccount,
  getConnectors,
  getWalletClient
} from "./chunk-FXIQ42SI.js";
import {
  Field,
  FpInvertBatch,
  FpSqrtEven,
  _DST_scalar,
  _createCurveFields,
  _validateObject,
  aInRange,
  abool,
  abytes,
  bytesToHex,
  bytesToNumberLE,
  concatBytes,
  createHasher,
  ensureBytes,
  equalBytes,
  expand_message_xmd,
  init_curve,
  init_hash_to_curve,
  init_modular,
  init_secp256k1,
  init_sha2,
  init_utils as init_utils2,
  init_utils2 as init_utils3,
  isNegativeLE,
  memoized,
  mod,
  normalizeZ,
  numberToBytesLE,
  pippenger,
  pow2,
  randomBytes,
  secp256k1,
  sha512,
  utf8ToBytes,
  wNAF
} from "./chunk-E7QJU2JJ.js";
import {
  base58,
  base64,
  init_esm,
  utils
} from "./chunk-GOUVGRKW.js";
import {
  import_index,
  init_eventemitter3
} from "./chunk-N5UGU3Z2.js";
import {
  require_eventemitter3
} from "./chunk-T43U4WM3.js";
import {
  require_buffer
} from "./chunk-ROA2PIJ7.js";
import {
  recoverMessageAddress,
  withRetry,
  withTimeout
} from "./chunk-UBNZMIM6.js";
import {
  ResourceUnavailableRpcError,
  SwitchChainError,
  UserRejectedRequestError,
  getAddress,
  hexToNumber,
  numberToHex
} from "./chunk-MI6XDP3Q.js";
import {
  __commonJS,
  __esm,
  __export,
  __require,
  __toCommonJS,
  __toESM
} from "./chunk-MMN2DTB3.js";

// node_modules/@polkadot/api-derive/packageInfo.js
var packageInfo;
var init_packageInfo = __esm({
  "node_modules/@polkadot/api-derive/packageInfo.js"() {
    packageInfo = { name: "@polkadot/api-derive", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.13.1" };
  }
});

// node_modules/@polkadot/rpc-core/packageInfo.js
var packageInfo2;
var init_packageInfo2 = __esm({
  "node_modules/@polkadot/rpc-core/packageInfo.js"() {
    packageInfo2 = { name: "@polkadot/rpc-core", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.13.1" };
  }
});

// node_modules/@polkadot/rpc-provider/packageInfo.js
var packageInfo3;
var init_packageInfo3 = __esm({
  "node_modules/@polkadot/rpc-provider/packageInfo.js"() {
    packageInfo3 = { name: "@polkadot/rpc-provider", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.13.1" };
  }
});

// node_modules/@polkadot/types/packageInfo.js
var packageInfo4;
var init_packageInfo4 = __esm({
  "node_modules/@polkadot/types/packageInfo.js"() {
    packageInfo4 = { name: "@polkadot/types", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.13.1" };
  }
});

// node_modules/@polkadot/types-known/packageInfo.js
var packageInfo5;
var init_packageInfo5 = __esm({
  "node_modules/@polkadot/types-known/packageInfo.js"() {
    packageInfo5 = { name: "@polkadot/types-known", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.13.1" };
  }
});

// node_modules/@polkadot/x-global/packageInfo.js
var packageInfo6;
var init_packageInfo6 = __esm({
  "node_modules/@polkadot/x-global/packageInfo.js"() {
    packageInfo6 = { name: "@polkadot/x-global", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.2" };
  }
});

// node_modules/@polkadot/x-global/index.js
function evaluateThis(fn) {
  return fn("return this");
}
function extractGlobal(name, fallback) {
  return typeof xglobal[name] === "undefined" ? fallback : xglobal[name];
}
function exposeGlobal(name, fallback) {
  if (typeof xglobal[name] === "undefined") {
    xglobal[name] = fallback;
  }
}
var xglobal;
var init_x_global = __esm({
  "node_modules/@polkadot/x-global/index.js"() {
    init_packageInfo6();
    xglobal = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis(Function);
  }
});

// node_modules/@polkadot/x-textdecoder/fallback.js
var TextDecoder2;
var init_fallback = __esm({
  "node_modules/@polkadot/x-textdecoder/fallback.js"() {
    TextDecoder2 = class {
      __encoding;
      constructor(encoding) {
        this.__encoding = encoding;
      }
      decode(value) {
        let result = "";
        for (let i = 0, count2 = value.length; i < count2; i++) {
          result += String.fromCharCode(value[i]);
        }
        return result;
      }
    };
  }
});

// node_modules/@polkadot/x-textdecoder/packageInfo.js
var packageInfo7;
var init_packageInfo7 = __esm({
  "node_modules/@polkadot/x-textdecoder/packageInfo.js"() {
    packageInfo7 = { name: "@polkadot/x-textdecoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.2" };
  }
});

// node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder3;
var init_browser = __esm({
  "node_modules/@polkadot/x-textdecoder/browser.js"() {
    init_x_global();
    init_fallback();
    init_packageInfo7();
    TextDecoder3 = extractGlobal("TextDecoder", TextDecoder2);
  }
});

// node_modules/@polkadot/x-textencoder/fallback.js
var TextEncoder2;
var init_fallback2 = __esm({
  "node_modules/@polkadot/x-textencoder/fallback.js"() {
    TextEncoder2 = class {
      encode(value) {
        const count2 = value.length;
        const u8a = new Uint8Array(count2);
        for (let i = 0; i < count2; i++) {
          u8a[i] = value.charCodeAt(i);
        }
        return u8a;
      }
    };
  }
});

// node_modules/@polkadot/x-textencoder/packageInfo.js
var packageInfo8;
var init_packageInfo8 = __esm({
  "node_modules/@polkadot/x-textencoder/packageInfo.js"() {
    packageInfo8 = { name: "@polkadot/x-textencoder", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.2" };
  }
});

// node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder3;
var init_browser2 = __esm({
  "node_modules/@polkadot/x-textencoder/browser.js"() {
    init_x_global();
    init_fallback2();
    init_packageInfo8();
    TextEncoder3 = extractGlobal("TextEncoder", TextEncoder2);
  }
});

// node_modules/@polkadot/util/detectOther.js
var detectOther_default;
var init_detectOther = __esm({
  "node_modules/@polkadot/util/detectOther.js"() {
    init_browser();
    init_browser2();
    detectOther_default = [packageInfo7, packageInfo8];
  }
});

// node_modules/@polkadot/util/packageInfo.js
var packageInfo9;
var init_packageInfo9 = __esm({
  "node_modules/@polkadot/util/packageInfo.js"() {
    packageInfo9 = { name: "@polkadot/util", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.2" };
  }
});

// node_modules/@polkadot/util/is/function.js
function isFunction(value) {
  return typeof value === "function";
}
var init_function = __esm({
  "node_modules/@polkadot/util/is/function.js"() {
  }
});

// node_modules/@polkadot/util/versionDetect.js
function getEntry(name) {
  const _global = xglobal;
  if (!_global.__polkadotjs) {
    _global.__polkadotjs = {};
  }
  if (!_global.__polkadotjs[name]) {
    _global.__polkadotjs[name] = [];
  }
  return _global.__polkadotjs[name];
}
function formatDisplay(all3, fmt) {
  let max3 = 0;
  for (let i = 0, count2 = all3.length; i < count2; i++) {
    max3 = Math.max(max3, all3[i].version.length);
  }
  return all3.map((d) => `	${fmt(d.version.padEnd(max3), d).join("	")}`).join("\n");
}
function formatInfo(version2, { name }) {
  return [
    version2,
    name
  ];
}
function formatVersion(version2, { path, type }) {
  let extracted;
  if (path && path.length >= 5) {
    const nmIndex = path.indexOf("node_modules");
    extracted = nmIndex === -1 ? path : path.substring(nmIndex);
  } else {
    extracted = "<unknown>";
  }
  return [
    `${`${type || ""}`.padStart(3)} ${version2}`,
    extracted
  ];
}
function getPath(infoPath, pathOrFn) {
  if (infoPath) {
    return infoPath;
  } else if (isFunction(pathOrFn)) {
    try {
      return pathOrFn() || "";
    } catch {
      return "";
    }
  }
  return pathOrFn || "";
}
function warn(pre, all3, fmt) {
  console.warn(`${pre}
${DEDUPE}
${formatDisplay(all3, fmt)}`);
}
function detectPackage({ name, path, type, version: version2 }, pathOrFn, deps = []) {
  if (!name.startsWith("@polkadot")) {
    throw new Error(`Invalid package descriptor ${name}`);
  }
  const entry = getEntry(name);
  entry.push({ path: getPath(path, pathOrFn), type, version: version2 });
  const entriesSameVersion = entry.every((e) => e.version === version2);
  const esmCjsWarningDisabled = xglobal.process?.env?.[POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG] === "1";
  const multipleEntries = entry.length !== 1;
  const disableWarnings = esmCjsWarningDisabled && entriesSameVersion;
  if (multipleEntries && !disableWarnings) {
    warn(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion);
  } else {
    const mismatches = deps.filter((d) => d && d.version !== version2);
    if (mismatches.length) {
      warn(`${name} requires direct dependencies exactly matching version ${version2}.`, mismatches, formatInfo);
    }
  }
}
var DEDUPE, POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG;
var init_versionDetect = __esm({
  "node_modules/@polkadot/util/versionDetect.js"() {
    init_x_global();
    init_function();
    DEDUPE = "Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:";
    POLKADOTJS_DISABLE_ESM_CJS_WARNING_FLAG = "POLKADOTJS_DISABLE_ESM_CJS_WARNING";
  }
});

// node_modules/@polkadot/util/detectPackage.js
var init_detectPackage = __esm({
  "node_modules/@polkadot/util/detectPackage.js"() {
    init_detectOther();
    init_packageInfo9();
    init_versionDetect();
    detectPackage(packageInfo9, null, detectOther_default);
  }
});

// node_modules/@polkadot/util/array/chunk.js
function arrayChunk(array, chunkSize) {
  const outputSize = Math.ceil(array.length / chunkSize);
  if (outputSize === 1) {
    return [array];
  }
  const output2 = Array(outputSize);
  for (let i = 0; i < outputSize; i++) {
    const offset = i * chunkSize;
    output2[i] = array.slice(offset, offset + chunkSize);
  }
  return output2;
}
var init_chunk = __esm({
  "node_modules/@polkadot/util/array/chunk.js"() {
  }
});

// node_modules/@polkadot/util/array/filter.js
var init_filter = __esm({
  "node_modules/@polkadot/util/array/filter.js"() {
  }
});

// node_modules/@polkadot/util/array/flatten.js
function arrayFlatten(arrays) {
  const num = arrays.length;
  if (num === 0) {
    return [];
  } else if (num === 1) {
    return arrays[0];
  }
  let size = 0;
  for (let i2 = 0; i2 < num; i2++) {
    size += arrays[i2].length;
  }
  const output2 = new Array(size);
  let i = -1;
  for (let j3 = 0; j3 < num; j3++) {
    const a = arrays[j3];
    for (let e = 0, count2 = a.length; e < count2; e++) {
      output2[++i] = a[e];
    }
  }
  return output2;
}
var init_flatten = __esm({
  "node_modules/@polkadot/util/array/flatten.js"() {
  }
});

// node_modules/@polkadot/util/array/range.js
var init_range = __esm({
  "node_modules/@polkadot/util/array/range.js"() {
  }
});

// node_modules/@polkadot/util/array/shuffle.js
var init_shuffle = __esm({
  "node_modules/@polkadot/util/array/shuffle.js"() {
  }
});

// node_modules/@polkadot/util/array/unzip.js
var init_unzip = __esm({
  "node_modules/@polkadot/util/array/unzip.js"() {
  }
});

// node_modules/@polkadot/util/array/zip.js
var init_zip = __esm({
  "node_modules/@polkadot/util/array/zip.js"() {
  }
});

// node_modules/@polkadot/util/array/index.js
var init_array = __esm({
  "node_modules/@polkadot/util/array/index.js"() {
    init_chunk();
    init_filter();
    init_flatten();
    init_range();
    init_shuffle();
    init_unzip();
    init_zip();
  }
});

// node_modules/@polkadot/util/assert.js
function assert(condition, message) {
  if (!condition) {
    throw new Error(isFunction(message) ? message() : message);
  }
}
function assertReturn(value, message) {
  assert(value !== void 0 && value !== null, message);
  return value;
}
function assertUnreachable(x) {
  throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);
}
var init_assert2 = __esm({
  "node_modules/@polkadot/util/assert.js"() {
    init_function();
  }
});

// node_modules/@polkadot/util/bi/helpers.js
function createCmp(cmp) {
  return (...items) => {
    const count2 = items.length;
    if (count2 === 0) {
      throw new Error("Must provide one or more arguments");
    }
    let result = items[0];
    for (let i = 1; i < count2; i++) {
      if (cmp(items[i], result)) {
        result = items[i];
      }
    }
    return result;
  };
}
var init_helpers = __esm({
  "node_modules/@polkadot/util/bi/helpers.js"() {
  }
});

// node_modules/@polkadot/util/bi/min.js
var nMax, nMin;
var init_min = __esm({
  "node_modules/@polkadot/util/bi/min.js"() {
    init_helpers();
    nMax = createCmp((a, b2) => a > b2);
    nMin = createCmp((a, b2) => a < b2);
  }
});

// node_modules/@polkadot/x-bigint/packageInfo.js
var packageInfo10;
var init_packageInfo10 = __esm({
  "node_modules/@polkadot/x-bigint/packageInfo.js"() {
    packageInfo10 = { name: "@polkadot/x-bigint", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.2" };
  }
});

// node_modules/@polkadot/x-bigint/index.js
function invalidFallback() {
  return Number.NaN;
}
var BigInt2;
var init_x_bigint = __esm({
  "node_modules/@polkadot/x-bigint/index.js"() {
    init_x_global();
    init_packageInfo10();
    BigInt2 = extractGlobal("BigInt", invalidFallback);
  }
});

// node_modules/@polkadot/util/bi/consts.js
var _0n, _1n, _2n, _3n, _4n, _5n, _6n, _7n, _8n, _9n, _10n, _100n, _1000n, _1Mn, _1Bn, _1Qn, _2pow53n, _sqrt2pow53n;
var init_consts = __esm({
  "node_modules/@polkadot/util/bi/consts.js"() {
    init_x_bigint();
    _0n = BigInt2(0);
    _1n = BigInt2(1);
    _2n = BigInt2(2);
    _3n = BigInt2(3);
    _4n = BigInt2(4);
    _5n = BigInt2(5);
    _6n = BigInt2(6);
    _7n = BigInt2(7);
    _8n = BigInt2(8);
    _9n = BigInt2(9);
    _10n = BigInt2(10);
    _100n = BigInt2(100);
    _1000n = BigInt2(1e3);
    _1Mn = BigInt2(1e6);
    _1Bn = BigInt2(1e9);
    _1Qn = _1Bn * _1Bn;
    _2pow53n = BigInt2(Number.MAX_SAFE_INTEGER);
    _sqrt2pow53n = BigInt2(94906265);
  }
});

// node_modules/@polkadot/util/u8a/toBigInt.js
function u8aToBigInt(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count2 = value.length;
  if (isNegative && count2 && value[count2 - 1] & 128) {
    switch (count2) {
      case 0:
        return BigInt2(0);
      case 1:
        return BigInt2((value[0] ^ 255) * -1 - 1);
      case 2:
        return BigInt2((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);
      case 4:
        return BigInt2((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);
    }
    const dvI2 = new DataView(value.buffer, value.byteOffset);
    if (count2 === 8) {
      return dvI2.getBigInt64(0, true);
    }
    let result = BigInt2(0);
    const mod2 = count2 % 2;
    for (let i = count2 - 2; i >= mod2; i -= 2) {
      result = result * U16_MAX + BigInt2(dvI2.getUint16(i, true) ^ 65535);
    }
    if (mod2) {
      result = result * U8_MAX + BigInt2(value[0] ^ 255);
    }
    return result * -_1n - _1n;
  }
  switch (count2) {
    case 0:
      return BigInt2(0);
    case 1:
      return BigInt2(value[0]);
    case 2:
      return BigInt2(value[0] + (value[1] << 8));
    case 4:
      return BigInt2(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);
  }
  const dvI = new DataView(value.buffer, value.byteOffset);
  switch (count2) {
    case 8:
      return dvI.getBigUint64(0, true);
    case 16:
      return dvI.getBigUint64(8, true) * U64_MAX + dvI.getBigUint64(0, true);
    default: {
      let result = BigInt2(0);
      const mod2 = count2 % 2;
      for (let i = count2 - 2; i >= mod2; i -= 2) {
        result = result * U16_MAX + BigInt2(dvI.getUint16(i, true));
      }
      if (mod2) {
        result = result * U8_MAX + BigInt2(value[0]);
      }
      return result;
    }
  }
}
var U8_MAX, U16_MAX, U64_MAX;
var init_toBigInt = __esm({
  "node_modules/@polkadot/util/u8a/toBigInt.js"() {
    init_x_bigint();
    init_consts();
    U8_MAX = BigInt2(256);
    U16_MAX = BigInt2(256 * 256);
    U64_MAX = BigInt2("0x10000000000000000");
  }
});

// node_modules/@polkadot/util/hex/toU8a.js
function hexToU8a(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U16[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}
var CHR, U8, U16;
var init_toU8a = __esm({
  "node_modules/@polkadot/util/hex/toU8a.js"() {
    CHR = "0123456789abcdef";
    U8 = new Uint8Array(256);
    U16 = new Uint8Array(256 * 256);
    for (let i = 0, count2 = CHR.length; i < count2; i++) {
      U8[CHR[i].charCodeAt(0) | 0] = i | 0;
      if (i > 9) {
        U8[CHR[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
      }
    }
    for (let i = 0; i < 256; i++) {
      const s = i << 8;
      for (let j3 = 0; j3 < 256; j3++) {
        U16[s | j3] = U8[i] << 4 | U8[j3];
      }
    }
  }
});

// node_modules/@polkadot/util/hex/toBigInt.js
function hexToBigInt(value, { isLe = false, isNegative = false } = {}) {
  return !value || value === "0x" ? BigInt2(0) : u8aToBigInt(hexToU8a(value), { isLe, isNegative });
}
var init_toBigInt2 = __esm({
  "node_modules/@polkadot/util/hex/toBigInt.js"() {
    init_x_bigint();
    init_toBigInt();
    init_toU8a();
  }
});

// node_modules/@polkadot/util/bn/bn.js
var import_bn;
var init_bn = __esm({
  "node_modules/@polkadot/util/bn/bn.js"() {
    import_bn = __toESM(require_bn(), 1);
  }
});

// node_modules/@polkadot/util/is/bn.js
function isBn(value) {
  return import_bn.default.isBN(value);
}
var init_bn2 = __esm({
  "node_modules/@polkadot/util/is/bn.js"() {
    init_bn();
  }
});

// node_modules/@polkadot/util/is/hex.js
function isHex(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}
var REGEX_HEX_PREFIXED, REGEX_HEX_NOPREFIX;
var init_hex = __esm({
  "node_modules/@polkadot/util/is/hex.js"() {
    REGEX_HEX_PREFIXED = /^0x[\da-fA-F]+$/;
    REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
  }
});

// node_modules/@polkadot/util/is/object.js
function isObject(value) {
  return !!value && typeof value === "object";
}
var init_object = __esm({
  "node_modules/@polkadot/util/is/object.js"() {
  }
});

// node_modules/@polkadot/util/is/helpers.js
function isOn(...fns) {
  return (value) => (isObject(value) || isFunction(value)) && fns.every((f) => isFunction(value[f]));
}
function isOnFunction(...fns) {
  return (value) => isFunction(value) && fns.every((f) => isFunction(value[f]));
}
function isOnObject(...fns) {
  return (value) => isObject(value) && fns.every((f) => isFunction(value[f]));
}
var init_helpers2 = __esm({
  "node_modules/@polkadot/util/is/helpers.js"() {
    init_function();
    init_object();
  }
});

// node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt;
var init_toBigInt3 = __esm({
  "node_modules/@polkadot/util/is/toBigInt.js"() {
    init_helpers2();
    isToBigInt = isOn("toBigInt");
  }
});

// node_modules/@polkadot/util/is/toBn.js
var isToBn;
var init_toBn = __esm({
  "node_modules/@polkadot/util/is/toBn.js"() {
    init_helpers2();
    isToBn = isOn("toBn");
  }
});

// node_modules/@polkadot/util/bi/toBigInt.js
function nToBigInt(value) {
  return typeof value === "bigint" ? value : !value ? BigInt2(0) : isHex(value) ? hexToBigInt(value.toString()) : isBn(value) ? BigInt2(value.toString()) : isToBigInt(value) ? value.toBigInt() : isToBn(value) ? BigInt2(value.toBn().toString()) : BigInt2(value);
}
var init_toBigInt4 = __esm({
  "node_modules/@polkadot/util/bi/toBigInt.js"() {
    init_x_bigint();
    init_toBigInt2();
    init_bn2();
    init_hex();
    init_toBigInt3();
    init_toBn();
  }
});

// node_modules/@polkadot/util/bi/sqrt.js
var init_sqrt = __esm({
  "node_modules/@polkadot/util/bi/sqrt.js"() {
    init_x_bigint();
    init_consts();
    init_toBigInt4();
  }
});

// node_modules/@polkadot/util/has.js
var hasBigInt, hasBuffer, hasProcess;
var init_has = __esm({
  "node_modules/@polkadot/util/has.js"() {
    init_x_bigint();
    init_x_global();
    hasBigInt = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
    hasBuffer = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
    hasProcess = typeof xglobal.process === "object";
  }
});

// node_modules/@polkadot/util/is/buffer.js
function isBuffer(value) {
  return hasBuffer && !!value && isFunction(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}
var init_buffer = __esm({
  "node_modules/@polkadot/util/is/buffer.js"() {
    init_x_global();
    init_has();
    init_function();
  }
});

// node_modules/@polkadot/util/is/u8a.js
function isU8a(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}
var init_u8a = __esm({
  "node_modules/@polkadot/util/is/u8a.js"() {
  }
});

// node_modules/@polkadot/util/string/toU8a.js
function stringToU8a(value) {
  return value ? encoder.encode(value.toString()) : new Uint8Array();
}
var encoder;
var init_toU8a2 = __esm({
  "node_modules/@polkadot/util/string/toU8a.js"() {
    init_browser2();
    encoder = new TextEncoder3();
  }
});

// node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a(value) {
  return isU8a(value) ? isBuffer(value) ? new Uint8Array(value) : value : isHex(value) ? hexToU8a(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a(value);
}
var init_toU8a3 = __esm({
  "node_modules/@polkadot/util/u8a/toU8a.js"() {
    init_toU8a();
    init_buffer();
    init_hex();
    init_u8a();
    init_toU8a2();
  }
});

// node_modules/@polkadot/util/u8a/cmp.js
var init_cmp = __esm({
  "node_modules/@polkadot/util/u8a/cmp.js"() {
    init_toU8a3();
  }
});

// node_modules/@polkadot/util/u8a/concat.js
function u8aConcat(...list) {
  const count2 = list.length;
  const u8as = new Array(count2);
  let length = 0;
  for (let i = 0; i < count2; i++) {
    u8as[i] = u8aToU8a(list[i]);
    length += u8as[i].length;
  }
  return u8aConcatStrict(u8as, length);
}
function u8aConcatStrict(u8as, length = 0) {
  const count2 = u8as.length;
  let offset = 0;
  if (!length) {
    for (let i = 0; i < count2; i++) {
      length += u8as[i].length;
    }
  }
  const result = new Uint8Array(length);
  for (let i = 0; i < count2; i++) {
    result.set(u8as[i], offset);
    offset += u8as[i].length;
  }
  return result;
}
var init_concat = __esm({
  "node_modules/@polkadot/util/u8a/concat.js"() {
    init_toU8a3();
  }
});

// node_modules/@polkadot/util/u8a/empty.js
function u8aEmpty(value) {
  const len = value.length | 0;
  for (let i = 0; i < len; i++) {
    if (value[i] | 0) {
      return false;
    }
  }
  return true;
}
var init_empty = __esm({
  "node_modules/@polkadot/util/u8a/empty.js"() {
  }
});

// node_modules/@polkadot/util/u8a/eq.js
function u8aEq(a, b2) {
  const u8aa = u8aToU8a(a);
  const u8ab = u8aToU8a(b2);
  if (u8aa.length === u8ab.length) {
    const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
    const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
    const mod2 = u8aa.length % 4 | 0;
    const length = u8aa.length - mod2 | 0;
    for (let i = 0; i < length; i += 4) {
      if (dvA.getUint32(i) !== dvB.getUint32(i)) {
        return false;
      }
    }
    for (let i = length, count2 = u8aa.length; i < count2; i++) {
      if (u8aa[i] !== u8ab[i]) {
        return false;
      }
    }
    return true;
  }
  return false;
}
var init_eq = __esm({
  "node_modules/@polkadot/util/u8a/eq.js"() {
    init_toU8a3();
  }
});

// node_modules/@polkadot/util/u8a/fixLength.js
function u8aFixLength(value, bitLength = -1, atStart = false) {
  const byteLength = Math.ceil(bitLength / 8);
  if (bitLength === -1 || value.length === byteLength) {
    return value;
  } else if (value.length > byteLength) {
    return value.subarray(0, byteLength);
  }
  const result = new Uint8Array(byteLength);
  result.set(value, atStart ? 0 : byteLength - value.length);
  return result;
}
var init_fixLength = __esm({
  "node_modules/@polkadot/util/u8a/fixLength.js"() {
  }
});

// node_modules/@polkadot/util/u8a/sorted.js
var init_sorted = __esm({
  "node_modules/@polkadot/util/u8a/sorted.js"() {
    init_cmp();
  }
});

// node_modules/@polkadot/util/u8a/toBn.js
function u8aToBn(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count2 = value.length;
  if (isNegative && count2 && value[count2 - 1] & 128) {
    switch (count2) {
      case 0:
        return new import_bn.default(0);
      case 1:
        return new import_bn.default((value[0] ^ 255) * -1 - 1);
      case 2:
        return new import_bn.default((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);
      case 3:
        return new import_bn.default((value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1);
      case 4:
        return new import_bn.default((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);
      case 5:
        return new import_bn.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1);
      case 6:
        return new import_bn.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1);
      default:
        return new import_bn.default(value, "le").fromTwos(count2 * 8);
    }
  }
  switch (count2) {
    case 0:
      return new import_bn.default(0);
    case 1:
      return new import_bn.default(value[0]);
    case 2:
      return new import_bn.default(value[0] + (value[1] << 8));
    case 3:
      return new import_bn.default(value[0] + (value[1] << 8) + (value[2] << 16));
    case 4:
      return new import_bn.default(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);
    case 5:
      return new import_bn.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216);
    case 6:
      return new import_bn.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);
    default:
      return new import_bn.default(value, "le");
  }
}
var init_toBn2 = __esm({
  "node_modules/@polkadot/util/u8a/toBn.js"() {
    init_bn();
  }
});

// node_modules/@polkadot/util/u8a/toBuffer.js
var init_toBuffer = __esm({
  "node_modules/@polkadot/util/u8a/toBuffer.js"() {
    init_x_global();
    init_has();
  }
});

// node_modules/@polkadot/util/u8a/toFloat.js
function u8aToFloat(value, { bitLength = 32, isLe = true } = {}) {
  if (bitLength !== 32 && bitLength !== 64) {
    throw new Error("Invalid bitLength provided, expected 32 or 64");
  } else if (value.length < bitLength / 8) {
    throw new Error(`Invalid input buffer provided, expected at least ${bitLength / 8} bytes, found ${value.length}`);
  }
  const dv = new DataView(value.buffer, value.byteOffset);
  return bitLength === 32 ? dv.getFloat32(0, isLe) : dv.getFloat64(0, isLe);
}
var init_toFloat = __esm({
  "node_modules/@polkadot/util/u8a/toFloat.js"() {
  }
});

// node_modules/@polkadot/util/u8a/toHex.js
function hex(value, result) {
  const mod2 = value.length % 2 | 0;
  const length = value.length - mod2 | 0;
  for (let i = 0; i < length; i += 2) {
    result += U162[value[i] << 8 | value[i + 1]];
  }
  if (mod2) {
    result += U82[value[length] | 0];
  }
  return result;
}
function u8aToHex(value, bitLength = -1, isPrefixed = true) {
  const empty3 = isPrefixed ? "0x" : "";
  if (!value?.length) {
    return empty3;
  } else if (bitLength > 0) {
    const length = Math.ceil(bitLength / 8);
    if (value.length > length) {
      return `${hex(value.subarray(0, length / 2), empty3)}…${hex(value.subarray(value.length - length / 2), "")}`;
    }
  }
  return hex(value, empty3);
}
var U82, U162;
var init_toHex = __esm({
  "node_modules/@polkadot/util/u8a/toHex.js"() {
    U82 = new Array(256);
    U162 = new Array(256 * 256);
    for (let n = 0; n < 256; n++) {
      U82[n] = n.toString(16).padStart(2, "0");
    }
    for (let i = 0; i < 256; i++) {
      const s = i << 8;
      for (let j3 = 0; j3 < 256; j3++) {
        U162[s | j3] = U82[i] + U82[j3];
      }
    }
  }
});

// node_modules/@polkadot/util/u8a/toNumber.js
function u8aToNumber(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count2 = value.length;
  if (isNegative && count2 && value[count2 - 1] & 128) {
    switch (count2) {
      case 0:
        return 0;
      case 1:
        return (value[0] ^ 255) * -1 - 1;
      case 2:
        return (value[0] + (value[1] << 8) ^ 65535) * -1 - 1;
      case 3:
        return (value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1;
      case 4:
        return (value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1;
      case 5:
        return ((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1;
      case 6:
        return ((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1;
      default:
        throw new Error("Value more than 48-bits cannot be reliably converted");
    }
  }
  switch (count2) {
    case 0:
      return 0;
    case 1:
      return value[0];
    case 2:
      return value[0] + (value[1] << 8);
    case 3:
      return value[0] + (value[1] << 8) + (value[2] << 16);
    case 4:
      return value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216;
    case 5:
      return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216;
    case 6:
      return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216;
    default:
      throw new Error("Value more than 48-bits cannot be reliably converted");
  }
}
var init_toNumber = __esm({
  "node_modules/@polkadot/util/u8a/toNumber.js"() {
  }
});

// node_modules/@polkadot/util/u8a/toString.js
function u8aToString(value) {
  return value ? decoder.decode(value) : "";
}
var decoder;
var init_toString = __esm({
  "node_modules/@polkadot/util/u8a/toString.js"() {
    init_browser();
    decoder = new TextDecoder3("utf-8");
  }
});

// node_modules/@polkadot/util/u8a/wrap.js
function u8aIsWrapped(u8a, withEthereum) {
  return u8a.length >= WRAP_LEN && u8aEq(u8a.subarray(0, U8A_WRAP_PREFIX.length), U8A_WRAP_PREFIX) && u8aEq(u8a.slice(-U8A_WRAP_POSTFIX.length), U8A_WRAP_POSTFIX) || withEthereum && u8a.length >= U8A_WRAP_ETHEREUM.length && u8aEq(u8a.subarray(0, U8A_WRAP_ETHEREUM.length), U8A_WRAP_ETHEREUM);
}
function u8aUnwrapBytes(bytes3) {
  const u8a = u8aToU8a(bytes3);
  return u8aIsWrapped(u8a, false) ? u8a.subarray(U8A_WRAP_PREFIX.length, u8a.length - U8A_WRAP_POSTFIX.length) : u8a;
}
function u8aWrapBytes(bytes3) {
  const u8a = u8aToU8a(bytes3);
  return u8aIsWrapped(u8a, true) ? u8a : u8aConcatStrict([U8A_WRAP_PREFIX, u8a, U8A_WRAP_POSTFIX]);
}
var U8A_WRAP_ETHEREUM, U8A_WRAP_PREFIX, U8A_WRAP_POSTFIX, WRAP_LEN;
var init_wrap = __esm({
  "node_modules/@polkadot/util/u8a/wrap.js"() {
    init_concat();
    init_eq();
    init_toU8a3();
    U8A_WRAP_ETHEREUM = u8aToU8a("Ethereum Signed Message:\n");
    U8A_WRAP_PREFIX = u8aToU8a("<Bytes>");
    U8A_WRAP_POSTFIX = u8aToU8a("</Bytes>");
    WRAP_LEN = U8A_WRAP_PREFIX.length + U8A_WRAP_POSTFIX.length;
  }
});

// node_modules/@polkadot/util/u8a/index.js
var init_u8a2 = __esm({
  "node_modules/@polkadot/util/u8a/index.js"() {
    init_cmp();
    init_concat();
    init_empty();
    init_eq();
    init_fixLength();
    init_sorted();
    init_toBigInt();
    init_toBn2();
    init_toBuffer();
    init_toFloat();
    init_toHex();
    init_toNumber();
    init_toString();
    init_toU8a3();
    init_wrap();
  }
});

// node_modules/@polkadot/util/bi/toU8a.js
function toU8a(value, isLe, isNegative) {
  const arr = [];
  const withSigned = isNegative && value < _0n;
  if (withSigned) {
    value = (value + _1n) * -_1n;
  }
  while (value !== _0n) {
    const mod2 = value % DIV;
    const val = Number(withSigned ? mod2 ^ NEG_MASK : mod2);
    if (isLe) {
      arr.push(val);
    } else {
      arr.unshift(val);
    }
    value = (value - mod2) / DIV;
  }
  return Uint8Array.from(arr);
}
function nToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = {}) {
  const valueBi = nToBigInt(value);
  if (valueBi === _0n) {
    return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(Math.ceil((bitLength || 0) / 8));
  }
  const u8a = toU8a(valueBi, isLe, isNegative);
  if (bitLength === -1) {
    return u8a;
  }
  const byteLength = Math.ceil((bitLength || 0) / 8);
  const output2 = new Uint8Array(byteLength);
  if (isNegative) {
    output2.fill(255);
  }
  output2.set(u8a, isLe ? 0 : byteLength - u8a.length);
  return output2;
}
var DIV, NEG_MASK;
var init_toU8a4 = __esm({
  "node_modules/@polkadot/util/bi/toU8a.js"() {
    init_x_bigint();
    init_consts();
    init_toBigInt4();
    DIV = BigInt2(256);
    NEG_MASK = BigInt2(255);
  }
});

// node_modules/@polkadot/util/bi/toHex.js
var init_toHex2 = __esm({
  "node_modules/@polkadot/util/bi/toHex.js"() {
    init_u8a2();
    init_toU8a4();
  }
});

// node_modules/@polkadot/util/bi/index.js
var init_bi = __esm({
  "node_modules/@polkadot/util/bi/index.js"() {
    init_min();
    init_sqrt();
    init_toBigInt4();
    init_toHex2();
    init_toU8a4();
    init_consts();
  }
});

// node_modules/@polkadot/util/hex/stripPrefix.js
function hexStripPrefix(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}
var init_stripPrefix = __esm({
  "node_modules/@polkadot/util/hex/stripPrefix.js"() {
    init_hex();
  }
});

// node_modules/@polkadot/util/hex/toBn.js
function hexToBn(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn.default(0);
  }
  const stripped = hexStripPrefix(value);
  const bn = new import_bn.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}
var init_toBn3 = __esm({
  "node_modules/@polkadot/util/hex/toBn.js"() {
    init_bn();
    init_stripPrefix();
  }
});

// node_modules/@polkadot/util/bn/fromHex.js
var init_fromHex = __esm({
  "node_modules/@polkadot/util/bn/fromHex.js"() {
    init_toBn3();
  }
});

// node_modules/@polkadot/util/bn/min.js
var bnMax, bnMin;
var init_min2 = __esm({
  "node_modules/@polkadot/util/bn/min.js"() {
    init_helpers();
    bnMax = createCmp((a, b2) => a.gt(b2));
    bnMin = createCmp((a, b2) => a.lt(b2));
  }
});

// node_modules/@polkadot/util/bn/consts.js
var BN_ZERO, BN_ONE, BN_TWO, BN_THREE, BN_FOUR, BN_FIVE, BN_SIX, BN_SEVEN, BN_EIGHT, BN_NINE, BN_TEN, BN_HUNDRED, BN_THOUSAND, BN_MILLION, BN_BILLION, BN_QUINTILL, BN_MAX_INTEGER, BN_SQRT_MAX_INTEGER;
var init_consts2 = __esm({
  "node_modules/@polkadot/util/bn/consts.js"() {
    init_bn();
    BN_ZERO = new import_bn.default(0);
    BN_ONE = new import_bn.default(1);
    BN_TWO = new import_bn.default(2);
    BN_THREE = new import_bn.default(3);
    BN_FOUR = new import_bn.default(4);
    BN_FIVE = new import_bn.default(5);
    BN_SIX = new import_bn.default(6);
    BN_SEVEN = new import_bn.default(7);
    BN_EIGHT = new import_bn.default(8);
    BN_NINE = new import_bn.default(9);
    BN_TEN = new import_bn.default(10);
    BN_HUNDRED = new import_bn.default(100);
    BN_THOUSAND = new import_bn.default(1e3);
    BN_MILLION = new import_bn.default(1e6);
    BN_BILLION = new import_bn.default(1e9);
    BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
    BN_MAX_INTEGER = new import_bn.default(Number.MAX_SAFE_INTEGER);
    BN_SQRT_MAX_INTEGER = new import_bn.default(94906265);
  }
});

// node_modules/@polkadot/util/is/bigInt.js
function isBigInt(value) {
  return typeof value === "bigint";
}
var init_bigInt = __esm({
  "node_modules/@polkadot/util/is/bigInt.js"() {
  }
});

// node_modules/@polkadot/util/bn/toBn.js
function bnToBn(value) {
  return value ? import_bn.default.isBN(value) ? value : isHex(value) ? hexToBn(value.toString()) : isBigInt(value) ? new import_bn.default(value.toString()) : isToBn(value) ? value.toBn() : isToBigInt(value) ? new import_bn.default(value.toBigInt().toString()) : new import_bn.default(value) : new import_bn.default(0);
}
var init_toBn4 = __esm({
  "node_modules/@polkadot/util/bn/toBn.js"() {
    init_toBn3();
    init_bigInt();
    init_hex();
    init_toBigInt3();
    init_toBn();
    init_bn();
  }
});

// node_modules/@polkadot/util/bn/sqrt.js
function bnSqrt(value) {
  const n = bnToBn(value);
  if (n.isNeg()) {
    throw new Error("square root of negative numbers is not supported");
  }
  if (n.lte(BN_MAX_INTEGER)) {
    return new import_bn.default(~~Math.sqrt(n.toNumber()));
  }
  let x0 = BN_SQRT_MAX_INTEGER.clone();
  while (true) {
    const x1 = n.div(x0).iadd(x0).ishrn(1);
    if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {
      return x0;
    }
    x0 = x1;
  }
}
var init_sqrt2 = __esm({
  "node_modules/@polkadot/util/bn/sqrt.js"() {
    init_bn();
    init_consts2();
    init_toBn4();
  }
});

// node_modules/@polkadot/util/bn/toU8a.js
function bnToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS) {
  const valueBn = bnToBn(value);
  const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);
  if (!value) {
    return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(byteLength);
  }
  const output2 = new Uint8Array(byteLength);
  const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
  output2.set(bn.toArray(isLe ? "le" : "be", byteLength), 0);
  return output2;
}
var DEFAULT_OPTS;
var init_toU8a5 = __esm({
  "node_modules/@polkadot/util/bn/toU8a.js"() {
    init_toBn4();
    DEFAULT_OPTS = { bitLength: -1, isLe: true, isNegative: false };
  }
});

// node_modules/@polkadot/util/bn/toHex.js
function bnToHex(value, { bitLength = -1, isLe = false, isNegative = false } = {}) {
  return u8aToHex(bnToU8a(value, { bitLength, isLe, isNegative }));
}
var init_toHex3 = __esm({
  "node_modules/@polkadot/util/bn/toHex.js"() {
    init_u8a2();
    init_toU8a5();
  }
});

// node_modules/@polkadot/util/bn/index.js
var init_bn3 = __esm({
  "node_modules/@polkadot/util/bn/index.js"() {
    init_bn();
    init_fromHex();
    init_min2();
    init_sqrt2();
    init_toBn4();
    init_toHex3();
    init_toU8a5();
    init_consts2();
  }
});

// node_modules/@polkadot/util/buffer/toU8a.js
var init_toU8a6 = __esm({
  "node_modules/@polkadot/util/buffer/toU8a.js"() {
  }
});

// node_modules/@polkadot/util/buffer/index.js
var init_buffer2 = __esm({
  "node_modules/@polkadot/util/buffer/index.js"() {
    init_toU8a6();
  }
});

// node_modules/@polkadot/util/compact/toU8a.js
function compactToU8a(value) {
  const bn = bnToBn(value);
  if (bn.lte(MAX_U8)) {
    return new Uint8Array([bn.toNumber() << 2]);
  } else if (bn.lte(MAX_U16)) {
    return bnToU8a(bn.shln(2).iadd(BN_ONE), BL_16);
  } else if (bn.lte(MAX_U32)) {
    return bnToU8a(bn.shln(2).iadd(BN_TWO), BL_32);
  }
  const u8a = bnToU8a(bn);
  let length = u8a.length;
  while (u8a[length - 1] === 0) {
    length--;
  }
  if (length < 4) {
    throw new Error("Invalid length, previous checks match anything less than 2^30");
  }
  return u8aConcatStrict([
    // subtract 4 as minimum (also catered for in decoding)
    new Uint8Array([(length - 4 << 2) + 3]),
    u8a.subarray(0, length)
  ]);
}
var MAX_U8, MAX_U16, MAX_U32, BL_16, BL_32;
var init_toU8a7 = __esm({
  "node_modules/@polkadot/util/compact/toU8a.js"() {
    init_bn3();
    init_u8a2();
    MAX_U8 = BN_TWO.pow(new import_bn.default(8 - 2)).isub(BN_ONE);
    MAX_U16 = BN_TWO.pow(new import_bn.default(16 - 2)).isub(BN_ONE);
    MAX_U32 = BN_TWO.pow(new import_bn.default(32 - 2)).isub(BN_ONE);
    BL_16 = { bitLength: 16 };
    BL_32 = { bitLength: 32 };
  }
});

// node_modules/@polkadot/util/compact/addLength.js
function compactAddLength(input) {
  return u8aConcatStrict([
    compactToU8a(input.length),
    input
  ]);
}
var init_addLength = __esm({
  "node_modules/@polkadot/util/compact/addLength.js"() {
    init_u8a2();
    init_toU8a7();
  }
});

// node_modules/@polkadot/util/compact/fromU8a.js
function compactFromU8a(input) {
  const u8a = u8aToU8a(input);
  switch (u8a[0] & 3) {
    case 0:
      return [1, new import_bn.default(u8a[0] >>> 2)];
    case 1:
      return [2, new import_bn.default(u8a[0] + (u8a[1] << 8) >>> 2)];
    case 2:
      return [4, new import_bn.default(u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + u8a[3] * 16777216 >>> 2)];
    // 0b11
    default: {
      const offset = (u8a[0] >>> 2) + 5;
      switch (offset) {
        // there still could be 4 bytes data, similar to 0b10 above (with offsets)
        case 5:
          return [5, new import_bn.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + u8a[4] * 16777216)];
        case 6:
          return [6, new import_bn.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8)) * 16777216)];
        // 6 bytes data is the maximum, 48 bits (56 would overflow)
        case 7:
          return [7, new import_bn.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216)];
        // for anything else, use the non-unrolled version
        default:
          return [offset, u8aToBn(u8a.subarray(1, offset))];
      }
    }
  }
}
function compactFromU8aLim(u8a) {
  switch (u8a[0] & 3) {
    case 0:
      return [1, u8a[0] >>> 2];
    case 1:
      return [2, u8a[0] + (u8a[1] << 8) >>> 2];
    case 2:
      return [4, u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + u8a[3] * 16777216 >>> 2];
    // 0b11
    default: {
      switch ((u8a[0] >>> 2) + 5) {
        // there still could be 4 bytes data, similar to 0b10 above (with offsets)
        case 5:
          return [5, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + u8a[4] * 16777216];
        case 6:
          return [6, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8)) * 16777216];
        // 6 bytes data is the maximum, 48 bits (56 would overflow)
        case 7:
          return [7, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216];
        // for anything else, we are above the actual MAX_SAFE_INTEGER - bail out
        default:
          throw new Error("Compact input is > Number.MAX_SAFE_INTEGER");
      }
    }
  }
}
var init_fromU8a = __esm({
  "node_modules/@polkadot/util/compact/fromU8a.js"() {
    init_bn3();
    init_u8a2();
  }
});

// node_modules/@polkadot/util/compact/stripLength.js
function compactStripLength(input) {
  const [offset, length] = compactFromU8a(input);
  const total = offset + length.toNumber();
  return [
    total,
    input.subarray(offset, total)
  ];
}
var init_stripLength = __esm({
  "node_modules/@polkadot/util/compact/stripLength.js"() {
    init_fromU8a();
  }
});

// node_modules/@polkadot/util/compact/index.js
var init_compact = __esm({
  "node_modules/@polkadot/util/compact/index.js"() {
    init_addLength();
    init_fromU8a();
    init_stripLength();
    init_toU8a7();
  }
});

// node_modules/@polkadot/util/extractTime.js
var MIN_MS, HR_MS, DAY_MS;
var init_extractTime = __esm({
  "node_modules/@polkadot/util/extractTime.js"() {
    MIN_MS = 60 * 1e3;
    HR_MS = MIN_MS * 60;
    DAY_MS = HR_MS * 24;
  }
});

// node_modules/@polkadot/util/float/toU8a.js
function floatToU8a(value = 0, { bitLength = 32, isLe = true } = {}) {
  if (bitLength !== 32 && bitLength !== 64) {
    throw new Error("Invalid bitLength provided, expected 32 or 64");
  }
  const result = new Uint8Array(bitLength / 8);
  const dv = new DataView(result.buffer, result.byteOffset);
  if (bitLength === 32) {
    dv.setFloat32(0, Number(value), isLe);
  } else {
    dv.setFloat64(0, Number(value), isLe);
  }
  return result;
}
var init_toU8a8 = __esm({
  "node_modules/@polkadot/util/float/toU8a.js"() {
  }
});

// node_modules/@polkadot/util/float/index.js
var init_float = __esm({
  "node_modules/@polkadot/util/float/index.js"() {
    init_toU8a8();
  }
});

// node_modules/@polkadot/util/is/boolean.js
function isBoolean(value) {
  return typeof value === "boolean";
}
var init_boolean = __esm({
  "node_modules/@polkadot/util/is/boolean.js"() {
  }
});

// node_modules/@polkadot/util/format/formatDecimal.js
function formatDecimal(value, separator = ",") {
  const isNegative = value[0].startsWith("-");
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);
  return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}
var NUMBER_REGEX;
var init_formatDecimal = __esm({
  "node_modules/@polkadot/util/format/formatDecimal.js"() {
    NUMBER_REGEX = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
  }
});

// node_modules/@polkadot/util/format/getSeparator.js
function getSeparator(locale) {
  return {
    decimal: 0.1.toLocaleString(locale).substring(1, 2),
    thousand: 1e3.toLocaleString(locale).substring(1, 2)
  };
}
var init_getSeparator = __esm({
  "node_modules/@polkadot/util/format/getSeparator.js"() {
  }
});

// node_modules/@polkadot/util/format/si.js
function findSi(type) {
  for (let i = 0, count2 = SI.length; i < count2; i++) {
    if (SI[i].value === type) {
      return SI[i];
    }
  }
  return SI[SI_MID];
}
function calcSi(text, decimals, forceUnit) {
  if (forceUnit) {
    return findSi(forceUnit);
  }
  const siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);
  return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
}
var SI_MID, SI;
var init_si = __esm({
  "node_modules/@polkadot/util/format/si.js"() {
    SI_MID = 8;
    SI = [
      { power: -24, text: "yocto", value: "y" },
      { power: -21, text: "zepto", value: "z" },
      { power: -18, text: "atto", value: "a" },
      { power: -15, text: "femto", value: "f" },
      { power: -12, text: "pico", value: "p" },
      { power: -9, text: "nano", value: "n" },
      { power: -6, text: "micro", value: "µ" },
      { power: -3, text: "milli", value: "m" },
      { power: 0, text: "Unit", value: "-" },
      // position 8
      { power: 3, text: "Kilo", value: "k" },
      { power: 6, text: "Mill", value: "M" },
      // Mega, M
      { power: 9, text: "Bill", value: "B" },
      // Giga, G
      { power: 12, text: "Tril", value: "T" },
      // Tera, T
      { power: 15, text: "Peta", value: "P" },
      { power: 18, text: "Exa", value: "E" },
      { power: 21, text: "Zeta", value: "Z" },
      { power: 24, text: "Yotta", value: "Y" }
    ];
  }
});

// node_modules/@polkadot/util/format/formatBalance.js
function _formatBalance(input, { decimals = defaultDecimals, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
  let text = bnToBn(input).toString();
  if (text.length === 0 || text === "0") {
    return "0";
  }
  let sign2 = "";
  if (text[0].startsWith("-")) {
    sign2 = "-";
    text = text.substring(1);
  }
  const si = calcSi(text, decimals, forceUnit);
  const mid = text.length - (decimals + si.power);
  const pre = mid <= 0 ? "0" : text.substring(0, mid);
  let post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
  if (!withZero) {
    let end = post.length - 1;
    do {
      if (post[end] === "0") {
        end--;
      }
    } while (post[end] === "0");
    post = post.substring(0, end + 1);
  }
  const unit = isBoolean(withUnit) ? SI[SI_MID].text : withUnit;
  const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
  const { decimal, thousand } = getSeparator(locale);
  return `${sign2}${formatDecimal(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
var DEFAULT_DECIMALS, DEFAULT_UNIT, defaultDecimals, defaultUnit, formatBalance;
var init_formatBalance = __esm({
  "node_modules/@polkadot/util/format/formatBalance.js"() {
    init_toBn4();
    init_boolean();
    init_formatDecimal();
    init_getSeparator();
    init_si();
    DEFAULT_DECIMALS = 0;
    DEFAULT_UNIT = SI[SI_MID].text;
    defaultDecimals = DEFAULT_DECIMALS;
    defaultUnit = DEFAULT_UNIT;
    formatBalance = _formatBalance;
    formatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals);
    formatBalance.findSi = findSi;
    formatBalance.getDefaults = () => {
      return {
        decimals: defaultDecimals,
        unit: defaultUnit
      };
    };
    formatBalance.getOptions = (decimals = defaultDecimals) => {
      return SI.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
    };
    formatBalance.setDefaults = ({ decimals, unit }) => {
      defaultDecimals = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals;
      defaultUnit = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit;
      SI[SI_MID].text = defaultUnit;
    };
  }
});

// node_modules/@polkadot/util/format/formatDate.js
function zeroPad(value) {
  return value.toString().padStart(2, "0");
}
function formatDate(date) {
  const year = date.getFullYear().toString();
  const month = zeroPad(date.getMonth() + 1);
  const day = zeroPad(date.getDate());
  const hour = zeroPad(date.getHours());
  const minute = zeroPad(date.getMinutes());
  const second = zeroPad(date.getSeconds());
  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}
var init_formatDate = __esm({
  "node_modules/@polkadot/util/format/formatDate.js"() {
  }
});

// node_modules/@polkadot/util/format/formatElapsed.js
var init_formatElapsed = __esm({
  "node_modules/@polkadot/util/format/formatElapsed.js"() {
    init_toBn4();
  }
});

// node_modules/@polkadot/util/format/formatNumber.js
function formatNumber(value, { locale = "en" } = {}) {
  const { thousand } = getSeparator(locale);
  return formatDecimal(bnToBn(value).toString(), thousand);
}
var init_formatNumber = __esm({
  "node_modules/@polkadot/util/format/formatNumber.js"() {
    init_toBn4();
    init_formatDecimal();
    init_getSeparator();
  }
});

// node_modules/@polkadot/util/format/index.js
var init_format = __esm({
  "node_modules/@polkadot/util/format/index.js"() {
    init_formatBalance();
    init_formatDate();
    init_formatDecimal();
    init_formatElapsed();
    init_formatNumber();
    init_si();
  }
});

// node_modules/@polkadot/util/hex/hasPrefix.js
var init_hasPrefix = __esm({
  "node_modules/@polkadot/util/hex/hasPrefix.js"() {
    init_hex();
  }
});

// node_modules/@polkadot/util/hex/addPrefix.js
var init_addPrefix = __esm({
  "node_modules/@polkadot/util/hex/addPrefix.js"() {
    init_hasPrefix();
  }
});

// node_modules/@polkadot/util/hex/fixLength.js
var init_fixLength2 = __esm({
  "node_modules/@polkadot/util/hex/fixLength.js"() {
    init_addPrefix();
    init_stripPrefix();
  }
});

// node_modules/@polkadot/util/hex/toNumber.js
var init_toNumber2 = __esm({
  "node_modules/@polkadot/util/hex/toNumber.js"() {
    init_toBn3();
  }
});

// node_modules/@polkadot/util/hex/toString.js
var init_toString2 = __esm({
  "node_modules/@polkadot/util/hex/toString.js"() {
    init_toString();
    init_toU8a();
  }
});

// node_modules/@polkadot/util/hex/index.js
var init_hex2 = __esm({
  "node_modules/@polkadot/util/hex/index.js"() {
    init_addPrefix();
    init_fixLength2();
    init_hasPrefix();
    init_stripPrefix();
    init_toBigInt2();
    init_toBn3();
    init_toNumber2();
    init_toString2();
    init_toU8a();
  }
});

// node_modules/@polkadot/util/is/array.js
var init_array2 = __esm({
  "node_modules/@polkadot/util/is/array.js"() {
  }
});

// node_modules/@polkadot/util/is/string.js
function isString(value) {
  return typeof value === "string" || value instanceof String;
}
var init_string = __esm({
  "node_modules/@polkadot/util/is/string.js"() {
  }
});

// node_modules/@polkadot/util/is/ascii.js
function isAsciiStr(str) {
  for (let i = 0, count2 = str.length; i < count2; i++) {
    const b2 = str.charCodeAt(i);
    if (b2 < 32 || b2 > 126) {
      return false;
    }
  }
  return true;
}
function isAsciiBytes(u8a) {
  for (let i = 0, count2 = u8a.length; i < count2; i++) {
    const b2 = u8a[i] | 0;
    if (b2 < 32 || b2 > 126) {
      return false;
    }
  }
  return true;
}
function isAscii(value) {
  return isString(value) ? isHex(value) ? isAsciiBytes(u8aToU8a(value)) : isAsciiStr(value) : value ? isAsciiBytes(value) : false;
}
var init_ascii = __esm({
  "node_modules/@polkadot/util/is/ascii.js"() {
    init_toU8a3();
    init_hex();
    init_string();
  }
});

// node_modules/@polkadot/util/is/class.js
var isClass;
var init_class = __esm({
  "node_modules/@polkadot/util/is/class.js"() {
    init_helpers2();
    isClass = isOnFunction("isPrototypeOf", "hasOwnProperty");
  }
});

// node_modules/@polkadot/util/is/childClass.js
function isChildClass(Parent, Child) {
  return isClass(Child) && isClass(Parent) ? Parent === Child || Parent.isPrototypeOf(Child) : false;
}
var init_childClass = __esm({
  "node_modules/@polkadot/util/is/childClass.js"() {
    init_class();
  }
});

// node_modules/@polkadot/util/is/codec.js
function isCodec(value) {
  return checkCodec(value) && checkRegistry(value.registry);
}
var checkCodec, checkRegistry;
var init_codec = __esm({
  "node_modules/@polkadot/util/is/codec.js"() {
    init_helpers2();
    checkCodec = isOnObject("toHex", "toHuman", "toU8a");
    checkRegistry = isOnObject("get");
  }
});

// node_modules/@polkadot/util/is/compact.js
var isCompact;
var init_compact2 = __esm({
  "node_modules/@polkadot/util/is/compact.js"() {
    init_helpers2();
    isCompact = isOnObject("toBigInt", "toBn", "toNumber", "unwrap");
  }
});

// node_modules/@polkadot/util/is/error.js
function isError(value) {
  return (value && value.constructor) === Error || value instanceof Error;
}
var init_error = __esm({
  "node_modules/@polkadot/util/is/error.js"() {
  }
});

// node_modules/@polkadot/util/is/instanceOf.js
var init_instanceOf = __esm({
  "node_modules/@polkadot/util/is/instanceOf.js"() {
  }
});

// node_modules/@polkadot/util/is/ip.js
var v4, v6s, v6, v46Exact, v4exact, v6exact;
var init_ip = __esm({
  "node_modules/@polkadot/util/is/ip.js"() {
    v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
    v6s = "[a-fA-F\\d]{1,4}";
    v6 = `
(?:
(?:${v6s}:){7}(?:${v6s}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6s}:){6}(?:${v4}|:${v6s}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6s}:){5}(?::${v4}|(?::${v6s}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6s}:){4}(?:(?::${v6s}){0,1}:${v4}|(?::${v6s}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6s}:){3}(?:(?::${v6s}){0,2}:${v4}|(?::${v6s}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6s}:){2}(?:(?::${v6s}){0,3}:${v4}|(?::${v6s}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6s}:){1}(?:(?::${v6s}){0,4}:${v4}|(?::${v6s}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6s}){0,5}:${v4}|(?::${v6s}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
    v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);
    v4exact = new RegExp(`^${v4}$`);
    v6exact = new RegExp(`^${v6}$`);
  }
});

// node_modules/@polkadot/util/stringify.js
function replacer(_2, v3) {
  return isBigInt(v3) ? v3.toString() : v3;
}
function stringify(value, space) {
  return JSON.stringify(value, replacer, space);
}
var init_stringify = __esm({
  "node_modules/@polkadot/util/stringify.js"() {
    init_bigInt();
  }
});

// node_modules/@polkadot/util/is/jsonObject.js
var init_jsonObject = __esm({
  "node_modules/@polkadot/util/is/jsonObject.js"() {
    init_stringify();
  }
});

// node_modules/@polkadot/util/is/null.js
function isNull(value) {
  return value === null;
}
var init_null = __esm({
  "node_modules/@polkadot/util/is/null.js"() {
  }
});

// node_modules/@polkadot/util/is/number.js
function isNumber(value) {
  return typeof value === "number";
}
var init_number = __esm({
  "node_modules/@polkadot/util/is/number.js"() {
  }
});

// node_modules/@polkadot/util/is/observable.js
var isObservable;
var init_observable = __esm({
  "node_modules/@polkadot/util/is/observable.js"() {
    init_helpers2();
    isObservable = isOn("next");
  }
});

// node_modules/@polkadot/util/is/promise.js
var isPromise;
var init_promise = __esm({
  "node_modules/@polkadot/util/is/promise.js"() {
    init_helpers2();
    isPromise = isOnObject("catch", "then");
  }
});

// node_modules/@polkadot/util/is/riscv.js
var ELF_MAGIC, PVM_MAGIC;
var init_riscv = __esm({
  "node_modules/@polkadot/util/is/riscv.js"() {
    init_eq();
    init_u8a();
    ELF_MAGIC = new Uint8Array([127, 69, 76, 70]);
    PVM_MAGIC = new Uint8Array([80, 86, 77, 0]);
  }
});

// node_modules/@polkadot/util/is/testChain.js
var init_testChain = __esm({
  "node_modules/@polkadot/util/is/testChain.js"() {
  }
});

// node_modules/@polkadot/util/is/undefined.js
function isUndefined(value) {
  return value === void 0;
}
var init_undefined = __esm({
  "node_modules/@polkadot/util/is/undefined.js"() {
  }
});

// node_modules/@polkadot/util/is/utf8.js
function isUtf8(value) {
  if (!value) {
    return isString(value);
  }
  const u8a = u8aToU8a(value);
  const len = u8a.length;
  let i = 0;
  while (i < len) {
    if (u8a[i] <= 127) {
      i += 1;
    } else if (u8a[i] >= 194 && u8a[i] <= 223) {
      if (i + 1 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 2;
    } else if (u8a[i] === 224) {
      if (i + 2 < len) {
        if (u8a[i + 1] < 160 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a[i] >= 225 && u8a[i] <= 236) {
      if (i + 2 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a[i] === 237) {
      if (i + 2 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 159) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a[i] >= 238 && u8a[i] <= 239) {
      if (i + 2 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a[i] === 240) {
      if (i + 3 < len) {
        if (u8a[i + 1] < 144 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
        if (u8a[i + 3] < 128 || u8a[i + 3] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 4;
    } else if (u8a[i] >= 241 && u8a[i] <= 243) {
      if (i + 3 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
        if (u8a[i + 3] < 128 || u8a[i + 3] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 4;
    } else if (u8a[i] === 244) {
      if (i + 3 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 143) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
        if (u8a[i + 3] < 128 || u8a[i + 3] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 4;
    } else {
      return false;
    }
  }
  return true;
}
var init_utf8 = __esm({
  "node_modules/@polkadot/util/is/utf8.js"() {
    init_toU8a3();
    init_string();
  }
});

// node_modules/@polkadot/util/is/wasm.js
var WASM_MAGIC;
var init_wasm = __esm({
  "node_modules/@polkadot/util/is/wasm.js"() {
    init_eq();
    init_u8a();
    WASM_MAGIC = new Uint8Array([0, 97, 115, 109]);
  }
});

// node_modules/@polkadot/util/is/index.js
var init_is = __esm({
  "node_modules/@polkadot/util/is/index.js"() {
    init_array2();
    init_ascii();
    init_bigInt();
    init_bn2();
    init_boolean();
    init_buffer();
    init_childClass();
    init_class();
    init_codec();
    init_compact2();
    init_error();
    init_function();
    init_hex();
    init_instanceOf();
    init_ip();
    init_jsonObject();
    init_null();
    init_number();
    init_object();
    init_observable();
    init_promise();
    init_riscv();
    init_string();
    init_testChain();
    init_toBigInt3();
    init_toBn();
    init_u8a();
    init_undefined();
    init_utf8();
    init_wasm();
  }
});

// node_modules/@polkadot/util/lazy.js
function lazyMethod(result, item, creator, getName, index = 0) {
  const name = getName ? getName(item, index) : item.toString();
  let value;
  Object.defineProperty(result, name, {
    // This allows for re-configuration with the embedded defineProperty below
    // and ensures that on tested browsers and Node, it _will_ be redefined
    // and thus short-circuited for future access
    configurable: true,
    enumerable: true,
    // Use a function here, we don't want to capture the outer this, i.e.
    // don't use arrow functions in this context since we have a this inside
    get: function() {
      if (value === void 0) {
        value = creator(item, index, this);
        try {
          Object.defineProperty(this, name, { value });
        } catch {
        }
      }
      return value;
    }
  });
}
function lazyMethods(result, items, creator, getName) {
  for (let i = 0, count2 = items.length; i < count2; i++) {
    lazyMethod(result, items[i], creator, getName, i);
  }
  return result;
}
var init_lazy = __esm({
  "node_modules/@polkadot/util/lazy.js"() {
  }
});

// node_modules/@polkadot/util/noop.js
function identity(value) {
  return value;
}
function noop() {
}
var init_noop = __esm({
  "node_modules/@polkadot/util/noop.js"() {
  }
});

// node_modules/@polkadot/util/logger.js
function formatOther(value) {
  if (value && isObject(value) && value.constructor === Object) {
    const result = {};
    for (const [k2, v3] of Object.entries(value)) {
      result[k2] = loggerFormat(v3);
    }
    return result;
  }
  return value;
}
function loggerFormat(value) {
  if (Array.isArray(value)) {
    return value.map(loggerFormat);
  } else if (isBn(value)) {
    return value.toString();
  } else if (isU8a(value) || isBuffer(value)) {
    return u8aToHex(u8aToU8a(value));
  }
  return formatOther(value);
}
function formatWithLength(maxLength) {
  return (v3) => {
    if (maxLength <= 0) {
      return v3;
    }
    const r = `${v3}`;
    return r.length < maxLength ? v3 : `${r.substring(0, maxLength)} ...`;
  };
}
function apply(log, type, values, maxSize = -1) {
  if (values.length === 1 && isFunction(values[0])) {
    const fnResult = values[0]();
    return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
  }
  console[logTo[log]](formatDate(/* @__PURE__ */ new Date()), type, ...values.map(loggerFormat).map(formatWithLength(maxSize)));
}
function isDebugOn(e, type) {
  return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
}
function isDebugOff(e, type) {
  return !!e && (e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1))));
}
function getDebugFlag(env, type) {
  let flag = false;
  for (const e of env) {
    if (isDebugOn(e, type)) {
      flag = true;
    } else if (isDebugOff(e, type)) {
      flag = false;
    }
  }
  return flag;
}
function parseEnv(type) {
  const maxSize = parseInt(xglobal.process?.env?.["DEBUG_MAX"] || "-1", 10);
  return [
    getDebugFlag((xglobal.process?.env?.["DEBUG"] || "").toLowerCase().split(","), type),
    isNaN(maxSize) ? -1 : maxSize
  ];
}
function logger(origin) {
  const type = `${origin.toUpperCase()}:`.padStart(16);
  const [isDebug, maxSize] = parseEnv(origin.toLowerCase());
  return {
    debug: isDebug ? (...values) => apply("debug", type, values, maxSize) : noop,
    error: (...values) => apply("error", type, values),
    log: (...values) => apply("log", type, values),
    noop,
    warn: (...values) => apply("warn", type, values)
  };
}
var logTo;
var init_logger = __esm({
  "node_modules/@polkadot/util/logger.js"() {
    init_x_global();
    init_formatDate();
    init_bn2();
    init_buffer();
    init_function();
    init_object();
    init_u8a();
    init_toHex();
    init_toU8a3();
    init_noop();
    logTo = {
      debug: "log",
      error: "error",
      log: "log",
      warn: "warn"
    };
  }
});

// node_modules/@polkadot/util/memoize.js
function defaultGetId() {
  return "none";
}
function memoize(fn, { getInstanceId = defaultGetId } = {}) {
  const cache = {};
  const memoized2 = (...args) => {
    const stringParams = stringify(args);
    const instanceId = getInstanceId();
    if (!cache[instanceId]) {
      cache[instanceId] = {};
    }
    if (cache[instanceId][stringParams] === void 0) {
      cache[instanceId][stringParams] = fn(...args);
    }
    return cache[instanceId][stringParams];
  };
  memoized2.unmemoize = (...args) => {
    const stringParams = stringify(args);
    const instanceId = getInstanceId();
    if (cache[instanceId]?.[stringParams] !== void 0) {
      delete cache[instanceId][stringParams];
    }
  };
  return memoized2;
}
var init_memoize = __esm({
  "node_modules/@polkadot/util/memoize.js"() {
    init_stringify();
  }
});

// node_modules/@polkadot/util/nextTick.js
function nextTick(onExec, onError) {
  setTimeout(() => {
    Promise.resolve().then(() => {
      onExec();
    }).catch((error) => {
      if (onError) {
        onError(error);
      } else {
        console.error(error);
      }
    });
  }, 0);
}
var init_nextTick = __esm({
  "node_modules/@polkadot/util/nextTick.js"() {
  }
});

// node_modules/@polkadot/util/number/toHex.js
var init_toHex4 = __esm({
  "node_modules/@polkadot/util/number/toHex.js"() {
    init_fixLength2();
  }
});

// node_modules/@polkadot/util/number/toU8a.js
var init_toU8a9 = __esm({
  "node_modules/@polkadot/util/number/toU8a.js"() {
    init_toU8a();
    init_toHex4();
  }
});

// node_modules/@polkadot/util/number/index.js
var init_number2 = __esm({
  "node_modules/@polkadot/util/number/index.js"() {
    init_toHex4();
    init_toU8a9();
  }
});

// node_modules/@polkadot/util/object/clear.js
function objectClear(value) {
  const keys2 = Object.keys(value);
  for (let i = 0, count2 = keys2.length; i < count2; i++) {
    delete value[keys2[i]];
  }
  return value;
}
var init_clear = __esm({
  "node_modules/@polkadot/util/object/clear.js"() {
  }
});

// node_modules/@polkadot/util/object/spread.js
function objectSpread(dest, ...sources) {
  for (let i = 0, count2 = sources.length; i < count2; i++) {
    const src = sources[i];
    if (src) {
      if (typeof src.entries === "function") {
        for (const [key, value] of src.entries()) {
          dest[key] = value;
        }
      } else {
        Object.assign(dest, src);
      }
    }
  }
  return dest;
}
var init_spread = __esm({
  "node_modules/@polkadot/util/object/spread.js"() {
  }
});

// node_modules/@polkadot/util/object/copy.js
var init_copy = __esm({
  "node_modules/@polkadot/util/object/copy.js"() {
    init_spread();
  }
});

// node_modules/@polkadot/util/object/entries.js
var init_entries = __esm({
  "node_modules/@polkadot/util/object/entries.js"() {
  }
});

// node_modules/@polkadot/util/object/keys.js
var init_keys = __esm({
  "node_modules/@polkadot/util/object/keys.js"() {
  }
});

// node_modules/@polkadot/util/object/property.js
function objectProperty(that, key, getter, getName, index = 0) {
  const name = getName ? getName(key, index) : key;
  if (!(name in that)) {
    Object.defineProperty(that, name, {
      enumerable: true,
      // Unlike in lazy, we always call into the upper function, i.e. this method
      // does not cache old values (it is expected to be used for dynamic values)
      get: function() {
        return getter(key, index, this);
      }
    });
  }
}
function objectProperties(that, keys2, getter, getName) {
  for (let i = 0, count2 = keys2.length; i < count2; i++) {
    objectProperty(that, keys2[i], getter, getName, i);
  }
}
var init_property = __esm({
  "node_modules/@polkadot/util/object/property.js"() {
  }
});

// node_modules/@polkadot/util/object/values.js
var init_values = __esm({
  "node_modules/@polkadot/util/object/values.js"() {
  }
});

// node_modules/@polkadot/util/object/index.js
var init_object2 = __esm({
  "node_modules/@polkadot/util/object/index.js"() {
    init_clear();
    init_copy();
    init_entries();
    init_keys();
    init_property();
    init_spread();
    init_values();
  }
});

// node_modules/@polkadot/util/promisify.js
var init_promisify = __esm({
  "node_modules/@polkadot/util/promisify.js"() {
  }
});

// node_modules/@polkadot/util/string/camelCase.js
function formatAllCaps(w2) {
  return w2.slice(0, w2.length - 1).toLowerCase() + CC_TO_UP[w2.charCodeAt(w2.length - 1)];
}
function converter(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count2 = parts.length; i < count2; i++) {
      const w2 = parts[i];
      result += format(/^[\dA-Z]+$/.test(w2) ? w2.toLowerCase() : w2.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps), i);
    }
    return result;
  };
}
var CC_TO_UP, CC_TO_LO, stringCamelCase, stringPascalCase;
var init_camelCase = __esm({
  "node_modules/@polkadot/util/string/camelCase.js"() {
    CC_TO_UP = new Array(256);
    CC_TO_LO = new Array(256);
    for (let i = 0, count2 = CC_TO_UP.length; i < count2; i++) {
      CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();
      CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();
    }
    stringCamelCase = converter((w2, i) => (i ? CC_TO_UP[w2.charCodeAt(0)] : CC_TO_LO[w2.charCodeAt(0)]) + w2.slice(1));
    stringPascalCase = converter((w2) => CC_TO_UP[w2.charCodeAt(0)] + w2.slice(1));
  }
});

// node_modules/@polkadot/util/string/lowerFirst.js
function converter2(map3) {
  return (value) => value ? map3[value.charCodeAt(0)] + value.slice(1) : "";
}
var stringLowerFirst, stringUpperFirst;
var init_lowerFirst = __esm({
  "node_modules/@polkadot/util/string/lowerFirst.js"() {
    init_camelCase();
    stringLowerFirst = converter2(CC_TO_LO);
    stringUpperFirst = converter2(CC_TO_UP);
  }
});

// node_modules/@polkadot/util/string/shorten.js
var init_shorten = __esm({
  "node_modules/@polkadot/util/string/shorten.js"() {
  }
});

// node_modules/@polkadot/util/string/toHex.js
function stringToHex(value) {
  return u8aToHex(stringToU8a(value));
}
var init_toHex5 = __esm({
  "node_modules/@polkadot/util/string/toHex.js"() {
    init_toHex();
    init_toU8a2();
  }
});

// node_modules/@polkadot/util/string/index.js
var init_string2 = __esm({
  "node_modules/@polkadot/util/string/index.js"() {
    init_camelCase();
    init_lowerFirst();
    init_shorten();
    init_toHex5();
    init_toU8a2();
  }
});

// node_modules/@polkadot/util/bundle.js
var init_bundle = __esm({
  "node_modules/@polkadot/util/bundle.js"() {
    init_packageInfo9();
    init_array();
    init_assert2();
    init_bi();
    init_bn3();
    init_buffer2();
    init_compact();
    init_extractTime();
    init_float();
    init_format();
    init_has();
    init_hex2();
    init_is();
    init_lazy();
    init_logger();
    init_memoize();
    init_nextTick();
    init_noop();
    init_number2();
    init_object2();
    init_promisify();
    init_string2();
    init_stringify();
    init_u8a2();
    init_versionDetect();
  }
});

// node_modules/@polkadot/util/index.js
var init_util = __esm({
  "node_modules/@polkadot/util/index.js"() {
    init_detectPackage();
    init_bundle();
  }
});

// node_modules/@polkadot/api/packageInfo.js
var packageInfo11;
var init_packageInfo11 = __esm({
  "node_modules/@polkadot/api/packageInfo.js"() {
    packageInfo11 = { name: "@polkadot/api", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.13.1" };
  }
});

// node_modules/@polkadot/api/packageDetect.js
var init_packageDetect = __esm({
  "node_modules/@polkadot/api/packageDetect.js"() {
    init_packageInfo();
    init_packageInfo2();
    init_packageInfo3();
    init_packageInfo4();
    init_packageInfo5();
    init_util();
    init_packageInfo11();
    detectPackage(packageInfo11, null, [packageInfo2, packageInfo, packageInfo5, packageInfo3, packageInfo4]);
  }
});

// node_modules/@polkadot/rpc-augment/packageInfo.js
var packageInfo12;
var init_packageInfo12 = __esm({
  "node_modules/@polkadot/rpc-augment/packageInfo.js"() {
    packageInfo12 = { name: "@polkadot/rpc-augment", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.13.1" };
  }
});

// node_modules/@polkadot/rpc-augment/packageDetect.js
var init_packageDetect2 = __esm({
  "node_modules/@polkadot/rpc-augment/packageDetect.js"() {
    init_packageInfo2();
    init_packageInfo4();
    init_util();
    init_packageInfo12();
    detectPackage(packageInfo12, null, [packageInfo2, packageInfo4]);
  }
});

// node_modules/@polkadot/rpc-core/types/jsonrpc.js
var jsonrpc_exports = {};
var init_jsonrpc = __esm({
  "node_modules/@polkadot/rpc-core/types/jsonrpc.js"() {
  }
});

// node_modules/@polkadot/rpc-augment/augment/jsonrpc.js
var init_jsonrpc2 = __esm({
  "node_modules/@polkadot/rpc-augment/augment/jsonrpc.js"() {
    init_jsonrpc();
  }
});

// node_modules/@polkadot/rpc-augment/augment/index.js
var init_augment = __esm({
  "node_modules/@polkadot/rpc-augment/augment/index.js"() {
    init_jsonrpc2();
  }
});

// node_modules/@polkadot/rpc-augment/bundle.js
var init_bundle2 = __esm({
  "node_modules/@polkadot/rpc-augment/bundle.js"() {
    init_augment();
    init_packageInfo12();
  }
});

// node_modules/@polkadot/rpc-augment/index.js
var init_rpc_augment = __esm({
  "node_modules/@polkadot/rpc-augment/index.js"() {
    init_packageDetect2();
    init_bundle2();
  }
});

// node_modules/@polkadot/util-crypto/packageInfo.js
var packageInfo13;
var init_packageInfo13 = __esm({
  "node_modules/@polkadot/util-crypto/packageInfo.js"() {
    packageInfo13 = { name: "@polkadot/util-crypto", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.2" };
  }
});

// node_modules/@polkadot/keyring/detectOther.js
var detectOther_default2;
var init_detectOther2 = __esm({
  "node_modules/@polkadot/keyring/detectOther.js"() {
    init_packageInfo9();
    init_packageInfo13();
    detectOther_default2 = [packageInfo9, packageInfo13];
  }
});

// node_modules/@polkadot/keyring/packageInfo.js
var packageInfo14;
var init_packageInfo14 = __esm({
  "node_modules/@polkadot/keyring/packageInfo.js"() {
    packageInfo14 = { name: "@polkadot/keyring", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.2" };
  }
});

// node_modules/@polkadot/keyring/detectPackage.js
var init_detectPackage2 = __esm({
  "node_modules/@polkadot/keyring/detectPackage.js"() {
    init_util();
    init_detectOther2();
    init_packageInfo14();
    detectPackage(packageInfo14, null, detectOther_default2);
  }
});

// node_modules/@polkadot/networks/packageInfo.js
var packageInfo15;
var init_packageInfo15 = __esm({
  "node_modules/@polkadot/networks/packageInfo.js"() {
    packageInfo15 = { name: "@polkadot/networks", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.2" };
  }
});

// node_modules/@polkadot/x-randomvalues/packageInfo.js
var packageInfo16;
var init_packageInfo16 = __esm({
  "node_modules/@polkadot/x-randomvalues/packageInfo.js"() {
    packageInfo16 = { name: "@polkadot/x-randomvalues", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.2" };
  }
});

// node_modules/@polkadot/x-randomvalues/browser.js
function getRandomValues(arr) {
  return crypto2.getRandomValues(arr);
}
var crypto2;
var init_browser3 = __esm({
  "node_modules/@polkadot/x-randomvalues/browser.js"() {
    init_x_global();
    init_packageInfo16();
    crypto2 = xglobal.crypto;
  }
});

// node_modules/@polkadot/util-crypto/detectOther.js
var detectOther_default3;
var init_detectOther3 = __esm({
  "node_modules/@polkadot/util-crypto/detectOther.js"() {
    init_packageInfo15();
    init_packageInfo9();
    init_browser3();
    detectOther_default3 = [packageInfo15, packageInfo9, packageInfo16];
  }
});

// node_modules/@polkadot/util-crypto/detectPackage.js
var init_detectPackage3 = __esm({
  "node_modules/@polkadot/util-crypto/detectPackage.js"() {
    init_util();
    init_detectOther3();
    init_packageInfo13();
    detectPackage(packageInfo13, null, detectOther_default3);
  }
});

// node_modules/@polkadot/x-bigint/shim.js
var init_shim = __esm({
  "node_modules/@polkadot/x-bigint/shim.js"() {
    init_x_bigint();
    init_x_global();
    exposeGlobal("BigInt", BigInt2);
  }
});

// node_modules/@polkadot/wasm-bridge/packageInfo.js
var packageInfo17;
var init_packageInfo17 = __esm({
  "node_modules/@polkadot/wasm-bridge/packageInfo.js"() {
    packageInfo17 = { name: "@polkadot/wasm-bridge", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "7.4.1" };
  }
});

// node_modules/@polkadot/wasm-crypto-asmjs/packageInfo.js
var packageInfo18;
var init_packageInfo18 = __esm({
  "node_modules/@polkadot/wasm-crypto-asmjs/packageInfo.js"() {
    packageInfo18 = { name: "@polkadot/wasm-crypto-asmjs", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "7.4.1" };
  }
});

// node_modules/@polkadot/wasm-crypto-init/packageInfo.js
var packageInfo19;
var init_packageInfo19 = __esm({
  "node_modules/@polkadot/wasm-crypto-init/packageInfo.js"() {
    packageInfo19 = { name: "@polkadot/wasm-crypto-init", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "7.4.1" };
  }
});

// node_modules/@polkadot/wasm-crypto-wasm/packageInfo.js
var packageInfo20;
var init_packageInfo20 = __esm({
  "node_modules/@polkadot/wasm-crypto-wasm/packageInfo.js"() {
    packageInfo20 = { name: "@polkadot/wasm-crypto-wasm", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "7.4.1" };
  }
});

// node_modules/@polkadot/wasm-util/packageInfo.js
var packageInfo21;
var init_packageInfo21 = __esm({
  "node_modules/@polkadot/wasm-util/packageInfo.js"() {
    packageInfo21 = { name: "@polkadot/wasm-util", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "7.4.1" };
  }
});

// node_modules/@polkadot/wasm-crypto/packageInfo.js
var packageInfo22;
var init_packageInfo22 = __esm({
  "node_modules/@polkadot/wasm-crypto/packageInfo.js"() {
    packageInfo22 = { name: "@polkadot/wasm-crypto", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "7.4.1" };
  }
});

// node_modules/@polkadot/wasm-crypto/packageDetect.js
var init_packageDetect3 = __esm({
  "node_modules/@polkadot/wasm-crypto/packageDetect.js"() {
    init_util();
    init_packageInfo17();
    init_packageInfo18();
    init_packageInfo19();
    init_packageInfo20();
    init_packageInfo21();
    init_packageInfo22();
    detectPackage(packageInfo22, null, [packageInfo18, packageInfo17, packageInfo19, packageInfo21, packageInfo20]);
  }
});

// node_modules/@polkadot/wasm-bridge/packageDetect.js
var init_packageDetect4 = __esm({
  "node_modules/@polkadot/wasm-bridge/packageDetect.js"() {
    init_util();
    init_packageInfo17();
    detectPackage(packageInfo17, null, []);
  }
});

// node_modules/@polkadot/wasm-bridge/wbg.js
var DEFAULT_CRYPTO, DEFAULT_SELF, Wbg;
var init_wbg = __esm({
  "node_modules/@polkadot/wasm-bridge/wbg.js"() {
    init_browser3();
    DEFAULT_CRYPTO = { getRandomValues };
    DEFAULT_SELF = { crypto: DEFAULT_CRYPTO };
    Wbg = class {
      __internal__bridge;
      constructor(bridge2) {
        this.__internal__bridge = bridge2;
      }
      /** @internal */
      abort = () => {
        throw new Error("abort");
      };
      /** @internal */
      __wbindgen_is_undefined = (idx) => {
        return this.__internal__bridge.getObject(idx) === void 0;
      };
      /** @internal */
      __wbindgen_throw = (ptr, len) => {
        throw new Error(this.__internal__bridge.getString(ptr, len));
      };
      /** @internal */
      __wbg_self_1b7a39e3a92c949c = () => {
        return this.__internal__bridge.addObject(DEFAULT_SELF);
      };
      /** @internal */
      __wbg_require_604837428532a733 = (ptr, len) => {
        throw new Error(`Unable to require ${this.__internal__bridge.getString(ptr, len)}`);
      };
      /** @internal */
      __wbg_crypto_968f1772287e2df0 = (_idx) => {
        return this.__internal__bridge.addObject(DEFAULT_CRYPTO);
      };
      /** @internal */
      __wbg_getRandomValues_a3d34b4fee3c2869 = (_idx) => {
        return this.__internal__bridge.addObject(DEFAULT_CRYPTO.getRandomValues);
      };
      /** @internal */
      __wbg_getRandomValues_f5e14ab7ac8e995d = (_arg0, ptr, len) => {
        DEFAULT_CRYPTO.getRandomValues(this.__internal__bridge.getU8a(ptr, len));
      };
      /** @internal */
      __wbg_randomFillSync_d5bd2d655fdf256a = (_idx, _ptr, _len) => {
        throw new Error("randomFillsync is not available");
      };
      /** @internal */
      __wbindgen_object_drop_ref = (idx) => {
        this.__internal__bridge.takeObject(idx);
      };
    };
  }
});

// node_modules/@polkadot/wasm-bridge/bridge.js
var Bridge;
var init_bridge = __esm({
  "node_modules/@polkadot/wasm-bridge/bridge.js"() {
    init_util();
    init_wbg();
    Bridge = class {
      __internal__createWasm;
      __internal__heap;
      __internal__wbg;
      __internal__cachegetInt32;
      __internal__cachegetUint8;
      __internal__heapNext;
      __internal__wasm;
      __internal__wasmError;
      __internal__wasmPromise;
      __internal__type;
      constructor(createWasm2) {
        this.__internal__createWasm = createWasm2;
        this.__internal__cachegetInt32 = null;
        this.__internal__cachegetUint8 = null;
        this.__internal__heap = new Array(32).fill(void 0).concat(void 0, null, true, false);
        this.__internal__heapNext = this.__internal__heap.length;
        this.__internal__type = "none";
        this.__internal__wasm = null;
        this.__internal__wasmError = null;
        this.__internal__wasmPromise = null;
        this.__internal__wbg = { ...new Wbg(this) };
      }
      /** @description Returns the init error */
      get error() {
        return this.__internal__wasmError;
      }
      /** @description Returns the init type */
      get type() {
        return this.__internal__type;
      }
      /** @description Returns the created wasm interface */
      get wasm() {
        return this.__internal__wasm;
      }
      /** @description Performs the wasm initialization */
      async init(createWasm2) {
        if (!this.__internal__wasmPromise || createWasm2) {
          this.__internal__wasmPromise = (createWasm2 || this.__internal__createWasm)(this.__internal__wbg);
        }
        const { error, type, wasm } = await this.__internal__wasmPromise;
        this.__internal__type = type;
        this.__internal__wasm = wasm;
        this.__internal__wasmError = error;
        return this.__internal__wasm;
      }
      /**
       * @internal
       * @description Gets an object from the heap
       */
      getObject(idx) {
        return this.__internal__heap[idx];
      }
      /**
       * @internal
       * @description Removes an object from the heap
       */
      dropObject(idx) {
        if (idx < 36) {
          return;
        }
        this.__internal__heap[idx] = this.__internal__heapNext;
        this.__internal__heapNext = idx;
      }
      /**
       * @internal
       * @description Retrieves and removes an object to the heap
       */
      takeObject(idx) {
        const ret = this.getObject(idx);
        this.dropObject(idx);
        return ret;
      }
      /**
       * @internal
       * @description Adds an object to the heap
       */
      addObject(obj) {
        if (this.__internal__heapNext === this.__internal__heap.length) {
          this.__internal__heap.push(this.__internal__heap.length + 1);
        }
        const idx = this.__internal__heapNext;
        this.__internal__heapNext = this.__internal__heap[idx];
        this.__internal__heap[idx] = obj;
        return idx;
      }
      /**
       * @internal
       * @description Retrieve an Int32 in the WASM interface
       */
      getInt32() {
        if (this.__internal__cachegetInt32 === null || this.__internal__cachegetInt32.buffer !== this.__internal__wasm.memory.buffer) {
          this.__internal__cachegetInt32 = new Int32Array(this.__internal__wasm.memory.buffer);
        }
        return this.__internal__cachegetInt32;
      }
      /**
       * @internal
       * @description Retrieve an Uint8Array in the WASM interface
       */
      getUint8() {
        if (this.__internal__cachegetUint8 === null || this.__internal__cachegetUint8.buffer !== this.__internal__wasm.memory.buffer) {
          this.__internal__cachegetUint8 = new Uint8Array(this.__internal__wasm.memory.buffer);
        }
        return this.__internal__cachegetUint8;
      }
      /**
       * @internal
       * @description Retrieves an Uint8Array in the WASM interface
       */
      getU8a(ptr, len) {
        return this.getUint8().subarray(ptr / 1, ptr / 1 + len);
      }
      /**
       * @internal
       * @description Retrieves a string in the WASM interface
       */
      getString(ptr, len) {
        return u8aToString(this.getU8a(ptr, len));
      }
      /**
       * @internal
       * @description Allocates an Uint8Array in the WASM interface
       */
      allocU8a(arg) {
        const ptr = this.__internal__wasm.__wbindgen_malloc(arg.length * 1);
        this.getUint8().set(arg, ptr / 1);
        return [ptr, arg.length];
      }
      /**
       * @internal
       * @description Allocates a string in the WASM interface
       */
      allocString(arg) {
        return this.allocU8a(stringToU8a(arg));
      }
      /**
       * @internal
       * @description Retrieves an Uint8Array from the WASM interface
       */
      resultU8a() {
        const r0 = this.getInt32()[8 / 4 + 0];
        const r1 = this.getInt32()[8 / 4 + 1];
        const ret = this.getU8a(r0, r1).slice();
        this.__internal__wasm.__wbindgen_free(r0, r1 * 1);
        return ret;
      }
      /**
       * @internal
       * @description Retrieve a string from the WASM interface
       */
      resultString() {
        return u8aToString(this.resultU8a());
      }
    };
  }
});

// node_modules/@polkadot/wasm-bridge/init.js
function createWasmFn(root, wasmBytes2, asmFn) {
  return async (wbg) => {
    const result = {
      error: null,
      type: "none",
      wasm: null
    };
    try {
      if (!wasmBytes2?.length) {
        throw new Error("No WebAssembly provided for initialization");
      } else if (typeof WebAssembly !== "object" || typeof WebAssembly.instantiate !== "function") {
        throw new Error("WebAssembly is not available in your environment");
      }
      const source = await WebAssembly.instantiate(wasmBytes2, { wbg });
      result.wasm = source.instance.exports;
      result.type = "wasm";
    } catch (error) {
      if (typeof asmFn === "function") {
        result.wasm = asmFn(wbg);
        result.type = "asm";
      } else {
        result.error = `FATAL: Unable to initialize @polkadot/wasm-${root}:: ${error.message}`;
        console.error(result.error);
      }
    }
    return result;
  };
}
var init_init = __esm({
  "node_modules/@polkadot/wasm-bridge/init.js"() {
  }
});

// node_modules/@polkadot/wasm-bridge/bundle.js
var init_bundle3 = __esm({
  "node_modules/@polkadot/wasm-bridge/bundle.js"() {
    init_bridge();
    init_init();
  }
});

// node_modules/@polkadot/wasm-bridge/index.js
var init_wasm_bridge = __esm({
  "node_modules/@polkadot/wasm-bridge/index.js"() {
    init_packageDetect4();
    init_bundle3();
  }
});

// node_modules/@polkadot/wasm-crypto-wasm/packageDetect.js
var init_packageDetect5 = __esm({
  "node_modules/@polkadot/wasm-crypto-wasm/packageDetect.js"() {
    init_util();
    init_packageInfo20();
    detectPackage(packageInfo20, null, []);
  }
});

// node_modules/@polkadot/wasm-util/packageDetect.js
var init_packageDetect6 = __esm({
  "node_modules/@polkadot/wasm-util/packageDetect.js"() {
    init_util();
    init_packageInfo21();
    detectPackage(packageInfo21, null, []);
  }
});

// node_modules/@polkadot/wasm-util/base64.js
function base64Decode(data, out) {
  let byte = 0;
  let bits2 = 0;
  let pos = -1;
  for (let i = 0, last3 = out.length - 1; pos !== last3; i++) {
    byte = byte << 6 | map[data.charCodeAt(i)];
    if ((bits2 += 6) >= 8) {
      out[++pos] = byte >>> (bits2 -= 8) & 255;
    }
  }
  return out;
}
var CHR2, map;
var init_base64 = __esm({
  "node_modules/@polkadot/wasm-util/base64.js"() {
    CHR2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    map = new Array(256);
    for (let i = 0, count2 = CHR2.length; i < count2; i++) {
      map[CHR2.charCodeAt(i)] = i;
    }
  }
});

// node_modules/@polkadot/wasm-util/fflate.js
function unzlibSync(data, out) {
  return inflt((zlv(data), data.subarray(2, -4)), out);
}
var u8, u16, u322, clim, fleb, fdeb, freb, fl, revfl, fd, rev, hMap, flt, fdt, flrm, fdrm, bits, bits16, shft, slc, max, inflt, zlv;
var init_fflate = __esm({
  "node_modules/@polkadot/wasm-util/fflate.js"() {
    u8 = Uint8Array;
    u16 = Uint16Array;
    u322 = Uint32Array;
    clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
    fleb = new u8([
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      0,
      /* unused */
      0,
      0,
      /* impossible */
      0
    ]);
    fdeb = new u8([
      0,
      0,
      0,
      0,
      1,
      1,
      2,
      2,
      3,
      3,
      4,
      4,
      5,
      5,
      6,
      6,
      7,
      7,
      8,
      8,
      9,
      9,
      10,
      10,
      11,
      11,
      12,
      12,
      13,
      13,
      /* unused */
      0,
      0
    ]);
    freb = (eb, start) => {
      const b2 = new u16(31);
      for (let i = 0; i < 31; ++i) {
        b2[i] = start += 1 << eb[i - 1];
      }
      const r = new u322(b2[30]);
      for (let i = 1; i < 30; ++i) {
        for (let j3 = b2[i]; j3 < b2[i + 1]; ++j3) {
          r[j3] = j3 - b2[i] << 5 | i;
        }
      }
      return [b2, r];
    };
    [fl, revfl] = freb(fleb, 2);
    fl[28] = 258, revfl[258] = 28;
    [fd] = freb(fdeb, 0);
    rev = new u16(32768);
    for (let i = 0; i < 32768; ++i) {
      let x = (i & 43690) >>> 1 | (i & 21845) << 1;
      x = (x & 52428) >>> 2 | (x & 13107) << 2;
      x = (x & 61680) >>> 4 | (x & 3855) << 4;
      rev[i] = ((x & 65280) >>> 8 | (x & 255) << 8) >>> 1;
    }
    hMap = (cd, mb, r) => {
      const s = cd.length;
      let i = 0;
      const l17 = new u16(mb);
      for (; i < s; ++i) {
        if (cd[i])
          ++l17[cd[i] - 1];
      }
      const le2 = new u16(mb);
      for (i = 1; i < mb; ++i) {
        le2[i] = le2[i - 1] + l17[i - 1] << 1;
      }
      let co;
      if (r) {
        co = new u16(1 << mb);
        const rvb = 15 - mb;
        for (i = 0; i < s; ++i) {
          if (cd[i]) {
            const sv = i << 4 | cd[i];
            const r2 = mb - cd[i];
            let v3 = le2[cd[i] - 1]++ << r2;
            for (const m = v3 | (1 << r2) - 1; v3 <= m; ++v3) {
              co[rev[v3] >> rvb] = sv;
            }
          }
        }
      } else {
        co = new u16(s);
        for (i = 0; i < s; ++i) {
          if (cd[i]) {
            co[i] = rev[le2[cd[i] - 1]++] >> 15 - cd[i];
          }
        }
      }
      return co;
    };
    flt = new u8(288);
    for (let i = 0; i < 144; ++i)
      flt[i] = 8;
    for (let i = 144; i < 256; ++i)
      flt[i] = 9;
    for (let i = 256; i < 280; ++i)
      flt[i] = 7;
    for (let i = 280; i < 288; ++i)
      flt[i] = 8;
    fdt = new u8(32);
    for (let i = 0; i < 32; ++i)
      fdt[i] = 5;
    flrm = hMap(flt, 9, 1);
    fdrm = hMap(fdt, 5, 1);
    bits = (d, p, m) => {
      const o = p >>> 3;
      return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
    };
    bits16 = (d, p) => {
      const o = p >>> 3;
      return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
    };
    shft = (p) => (p >>> 3) + (p & 7 && 1);
    slc = (v3, s, e) => {
      if (s == null || s < 0)
        s = 0;
      if (e == null || e > v3.length)
        e = v3.length;
      const n = new (v3 instanceof u16 ? u16 : v3 instanceof u322 ? u322 : u8)(e - s);
      n.set(v3.subarray(s, e));
      return n;
    };
    max = (a) => {
      let m = a[0];
      for (let i = 1, count2 = a.length; i < count2; ++i) {
        if (a[i] > m)
          m = a[i];
      }
      return m;
    };
    inflt = (dat, buf, st2) => {
      const noSt = !st2 || st2.i;
      if (!st2)
        st2 = {};
      const sl = dat.length;
      const noBuf = !buf || !noSt;
      if (!buf)
        buf = new u8(sl * 3);
      const cbuf = (l17) => {
        let bl = buf.length;
        if (l17 > bl) {
          const nbuf = new u8(Math.max(bl << 1, l17));
          nbuf.set(buf);
          buf = nbuf;
        }
      };
      let final = st2.f || 0, pos = st2.p || 0, bt2 = st2.b || 0, lm = st2.l, dm = st2.d, lbt = st2.m, dbt = st2.n;
      if (final && !lm)
        return buf;
      const tbts = sl << 3;
      do {
        if (!lm) {
          st2.f = final = bits(dat, pos, 1);
          const type = bits(dat, pos + 1, 3);
          pos += 3;
          if (!type) {
            const s = shft(pos) + 4, l17 = dat[s - 4] | dat[s - 3] << 8, t = s + l17;
            if (t > sl) {
              if (noSt)
                throw "unexpected EOF";
              break;
            }
            if (noBuf)
              cbuf(bt2 + l17);
            buf.set(dat.subarray(s, t), bt2);
            st2.b = bt2 += l17, st2.p = pos = t << 3;
            continue;
          } else if (type == 1)
            lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
          else if (type == 2) {
            const hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
            const tl = hLit + bits(dat, pos + 5, 31) + 1;
            pos += 14;
            const ldt = new u8(tl);
            const clt = new u8(19);
            for (let i = 0; i < hcLen; ++i) {
              clt[clim[i]] = bits(dat, pos + i * 3, 7);
            }
            pos += hcLen * 3;
            const clb = max(clt), clbmsk = (1 << clb) - 1;
            if (!noSt && pos + tl * (clb + 7) > tbts)
              break;
            const clm = hMap(clt, clb, 1);
            for (let i = 0; i < tl; ) {
              const r = clm[bits(dat, pos, clbmsk)];
              pos += r & 15;
              const s = r >>> 4;
              if (s < 16) {
                ldt[i++] = s;
              } else {
                let c = 0, n = 0;
                if (s == 16)
                  n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
                else if (s == 17)
                  n = 3 + bits(dat, pos, 7), pos += 3;
                else if (s == 18)
                  n = 11 + bits(dat, pos, 127), pos += 7;
                while (n--)
                  ldt[i++] = c;
              }
            }
            const lt2 = ldt.subarray(0, hLit), dt2 = ldt.subarray(hLit);
            lbt = max(lt2);
            dbt = max(dt2);
            lm = hMap(lt2, lbt, 1);
            dm = hMap(dt2, dbt, 1);
          } else
            throw "invalid block type";
          if (pos > tbts)
            throw "unexpected EOF";
        }
        if (noBuf)
          cbuf(bt2 + 131072);
        const lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
        const mxa = lbt + dbt + 18;
        while (noSt || pos + mxa < tbts) {
          const c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
          pos += c & 15;
          if (pos > tbts)
            throw "unexpected EOF";
          if (!c)
            throw "invalid length/literal";
          if (sym < 256)
            buf[bt2++] = sym;
          else if (sym == 256) {
            lm = void 0;
            break;
          } else {
            let add2 = sym - 254;
            if (sym > 264) {
              const i = sym - 257, b2 = fleb[i];
              add2 = bits(dat, pos, (1 << b2) - 1) + fl[i];
              pos += b2;
            }
            const d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
            if (!d)
              throw "invalid distance";
            pos += d & 15;
            let dt2 = fd[dsym];
            if (dsym > 3) {
              const b2 = fdeb[dsym];
              dt2 += bits16(dat, pos) & (1 << b2) - 1, pos += b2;
            }
            if (pos > tbts)
              throw "unexpected EOF";
            if (noBuf)
              cbuf(bt2 + 131072);
            const end = bt2 + add2;
            for (; bt2 < end; bt2 += 4) {
              buf[bt2] = buf[bt2 - dt2];
              buf[bt2 + 1] = buf[bt2 + 1 - dt2];
              buf[bt2 + 2] = buf[bt2 + 2 - dt2];
              buf[bt2 + 3] = buf[bt2 + 3 - dt2];
            }
            bt2 = end;
          }
        }
        st2.l = lm, st2.p = pos, st2.b = bt2;
        if (lm)
          final = 1, st2.m = lbt, st2.d = dm, st2.n = dbt;
      } while (!final);
      return bt2 == buf.length ? buf : slc(buf, 0, bt2);
    };
    zlv = (d) => {
      if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31)
        throw "invalid zlib data";
      if (d[1] & 32)
        throw "invalid zlib data: preset dictionaries not supported";
    };
  }
});

// node_modules/@polkadot/wasm-util/bundle.js
var init_bundle4 = __esm({
  "node_modules/@polkadot/wasm-util/bundle.js"() {
    init_base64();
    init_fflate();
    init_packageInfo21();
  }
});

// node_modules/@polkadot/wasm-util/index.js
var init_wasm_util = __esm({
  "node_modules/@polkadot/wasm-util/index.js"() {
    init_packageDetect6();
    init_bundle4();
  }
});

// node_modules/@polkadot/wasm-crypto-wasm/cjs/bytes.js
var require_bytes = __commonJS({
  "node_modules/@polkadot/wasm-crypto-wasm/cjs/bytes.js"(exports) {
    exports.lenIn = 171008;
    exports.lenOut = 339468;
    exports.bytes = "";
  }
});

// node_modules/@polkadot/wasm-crypto-wasm/bundle.js
var import_bytes, wasmBytes;
var init_bundle5 = __esm({
  "node_modules/@polkadot/wasm-crypto-wasm/bundle.js"() {
    init_wasm_util();
    import_bytes = __toESM(require_bytes(), 1);
    init_packageInfo20();
    wasmBytes = unzlibSync(base64Decode(import_bytes.bytes, new Uint8Array(import_bytes.lenIn)), new Uint8Array(import_bytes.lenOut));
  }
});

// node_modules/@polkadot/wasm-crypto-wasm/index.js
var init_wasm_crypto_wasm = __esm({
  "node_modules/@polkadot/wasm-crypto-wasm/index.js"() {
    init_packageDetect5();
    init_bundle5();
  }
});

// node_modules/@polkadot/wasm-crypto-init/wasm.js
var createWasm;
var init_wasm2 = __esm({
  "node_modules/@polkadot/wasm-crypto-init/wasm.js"() {
    init_wasm_bridge();
    init_wasm_crypto_wasm();
    init_packageInfo19();
    createWasm = createWasmFn("crypto", wasmBytes, null);
  }
});

// node_modules/@polkadot/wasm-crypto/init.js
async function initBridge(createWasm2) {
  return bridge.init(createWasm2);
}
var bridge;
var init_init2 = __esm({
  "node_modules/@polkadot/wasm-crypto/init.js"() {
    init_wasm_bridge();
    init_wasm2();
    bridge = new Bridge(createWasm);
  }
});

// node_modules/@polkadot/wasm-crypto/bundle.js
function withWasm(fn) {
  return (...params) => {
    if (!bridge.wasm) {
      throw new Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");
    }
    return fn(bridge.wasm, ...params);
  };
}
function isReady() {
  return !!bridge.wasm;
}
async function waitReady() {
  try {
    const wasm = await initBridge();
    return !!wasm;
  } catch {
    return false;
  }
}
var bip39Generate, bip39ToEntropy, bip39ToMiniSecret, bip39ToSeed, bip39Validate, ed25519KeypairFromSeed, ed25519Sign, ed25519Verify, secp256k1FromSeed, secp256k1Compress, secp256k1Expand, secp256k1Recover, secp256k1Sign, sr25519DeriveKeypairHard, sr25519DeriveKeypairSoft, sr25519DerivePublicSoft, sr25519KeypairFromSeed, sr25519Sign, sr25519Verify, sr25519Agree, vrfSign, vrfVerify, blake2b, hmacSha256, hmacSha512, keccak256, keccak512, pbkdf2, scrypt, sha2562, sha5122, twox;
var init_bundle6 = __esm({
  "node_modules/@polkadot/wasm-crypto/bundle.js"() {
    init_init2();
    init_packageInfo22();
    bip39Generate = withWasm((wasm, words) => {
      wasm.ext_bip39_generate(8, words);
      return bridge.resultString();
    });
    bip39ToEntropy = withWasm((wasm, phrase) => {
      wasm.ext_bip39_to_entropy(8, ...bridge.allocString(phrase));
      return bridge.resultU8a();
    });
    bip39ToMiniSecret = withWasm((wasm, phrase, password) => {
      wasm.ext_bip39_to_mini_secret(8, ...bridge.allocString(phrase), ...bridge.allocString(password));
      return bridge.resultU8a();
    });
    bip39ToSeed = withWasm((wasm, phrase, password) => {
      wasm.ext_bip39_to_seed(8, ...bridge.allocString(phrase), ...bridge.allocString(password));
      return bridge.resultU8a();
    });
    bip39Validate = withWasm((wasm, phrase) => {
      const ret = wasm.ext_bip39_validate(...bridge.allocString(phrase));
      return ret !== 0;
    });
    ed25519KeypairFromSeed = withWasm((wasm, seed) => {
      wasm.ext_ed_from_seed(8, ...bridge.allocU8a(seed));
      return bridge.resultU8a();
    });
    ed25519Sign = withWasm((wasm, pubkey, seckey, message) => {
      wasm.ext_ed_sign(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(seckey), ...bridge.allocU8a(message));
      return bridge.resultU8a();
    });
    ed25519Verify = withWasm((wasm, signature, message, pubkey) => {
      const ret = wasm.ext_ed_verify(...bridge.allocU8a(signature), ...bridge.allocU8a(message), ...bridge.allocU8a(pubkey));
      return ret !== 0;
    });
    secp256k1FromSeed = withWasm((wasm, seckey) => {
      wasm.ext_secp_from_seed(8, ...bridge.allocU8a(seckey));
      return bridge.resultU8a();
    });
    secp256k1Compress = withWasm((wasm, pubkey) => {
      wasm.ext_secp_pub_compress(8, ...bridge.allocU8a(pubkey));
      return bridge.resultU8a();
    });
    secp256k1Expand = withWasm((wasm, pubkey) => {
      wasm.ext_secp_pub_expand(8, ...bridge.allocU8a(pubkey));
      return bridge.resultU8a();
    });
    secp256k1Recover = withWasm((wasm, msgHash, sig2, recovery) => {
      wasm.ext_secp_recover(8, ...bridge.allocU8a(msgHash), ...bridge.allocU8a(sig2), recovery);
      return bridge.resultU8a();
    });
    secp256k1Sign = withWasm((wasm, msgHash, seckey) => {
      wasm.ext_secp_sign(8, ...bridge.allocU8a(msgHash), ...bridge.allocU8a(seckey));
      return bridge.resultU8a();
    });
    sr25519DeriveKeypairHard = withWasm((wasm, pair, cc) => {
      wasm.ext_sr_derive_keypair_hard(8, ...bridge.allocU8a(pair), ...bridge.allocU8a(cc));
      return bridge.resultU8a();
    });
    sr25519DeriveKeypairSoft = withWasm((wasm, pair, cc) => {
      wasm.ext_sr_derive_keypair_soft(8, ...bridge.allocU8a(pair), ...bridge.allocU8a(cc));
      return bridge.resultU8a();
    });
    sr25519DerivePublicSoft = withWasm((wasm, pubkey, cc) => {
      wasm.ext_sr_derive_public_soft(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(cc));
      return bridge.resultU8a();
    });
    sr25519KeypairFromSeed = withWasm((wasm, seed) => {
      wasm.ext_sr_from_seed(8, ...bridge.allocU8a(seed));
      return bridge.resultU8a();
    });
    sr25519Sign = withWasm((wasm, pubkey, secret, message) => {
      wasm.ext_sr_sign(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(secret), ...bridge.allocU8a(message));
      return bridge.resultU8a();
    });
    sr25519Verify = withWasm((wasm, signature, message, pubkey) => {
      const ret = wasm.ext_sr_verify(...bridge.allocU8a(signature), ...bridge.allocU8a(message), ...bridge.allocU8a(pubkey));
      return ret !== 0;
    });
    sr25519Agree = withWasm((wasm, pubkey, secret) => {
      wasm.ext_sr_agree(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(secret));
      return bridge.resultU8a();
    });
    vrfSign = withWasm((wasm, secret, context2, message, extra) => {
      wasm.ext_vrf_sign(8, ...bridge.allocU8a(secret), ...bridge.allocU8a(context2), ...bridge.allocU8a(message), ...bridge.allocU8a(extra));
      return bridge.resultU8a();
    });
    vrfVerify = withWasm((wasm, pubkey, context2, message, extra, outAndProof) => {
      const ret = wasm.ext_vrf_verify(...bridge.allocU8a(pubkey), ...bridge.allocU8a(context2), ...bridge.allocU8a(message), ...bridge.allocU8a(extra), ...bridge.allocU8a(outAndProof));
      return ret !== 0;
    });
    blake2b = withWasm((wasm, data, key, size) => {
      wasm.ext_blake2b(8, ...bridge.allocU8a(data), ...bridge.allocU8a(key), size);
      return bridge.resultU8a();
    });
    hmacSha256 = withWasm((wasm, key, data) => {
      wasm.ext_hmac_sha256(8, ...bridge.allocU8a(key), ...bridge.allocU8a(data));
      return bridge.resultU8a();
    });
    hmacSha512 = withWasm((wasm, key, data) => {
      wasm.ext_hmac_sha512(8, ...bridge.allocU8a(key), ...bridge.allocU8a(data));
      return bridge.resultU8a();
    });
    keccak256 = withWasm((wasm, data) => {
      wasm.ext_keccak256(8, ...bridge.allocU8a(data));
      return bridge.resultU8a();
    });
    keccak512 = withWasm((wasm, data) => {
      wasm.ext_keccak512(8, ...bridge.allocU8a(data));
      return bridge.resultU8a();
    });
    pbkdf2 = withWasm((wasm, data, salt, rounds) => {
      wasm.ext_pbkdf2(8, ...bridge.allocU8a(data), ...bridge.allocU8a(salt), rounds);
      return bridge.resultU8a();
    });
    scrypt = withWasm((wasm, password, salt, log2n, r, p) => {
      wasm.ext_scrypt(8, ...bridge.allocU8a(password), ...bridge.allocU8a(salt), log2n, r, p);
      return bridge.resultU8a();
    });
    sha2562 = withWasm((wasm, data) => {
      wasm.ext_sha256(8, ...bridge.allocU8a(data));
      return bridge.resultU8a();
    });
    sha5122 = withWasm((wasm, data) => {
      wasm.ext_sha512(8, ...bridge.allocU8a(data));
      return bridge.resultU8a();
    });
    twox = withWasm((wasm, data, rounds) => {
      wasm.ext_twox(8, ...bridge.allocU8a(data), rounds);
      return bridge.resultU8a();
    });
  }
});

// node_modules/@polkadot/wasm-crypto/index.js
var init_wasm_crypto = __esm({
  "node_modules/@polkadot/wasm-crypto/index.js"() {
    init_packageDetect3();
    init_bundle6();
  }
});

// node_modules/@polkadot/util-crypto/crypto.js
function cryptoWaitReady() {
  return waitReady().then(() => {
    if (!isReady()) {
      throw new Error("Unable to initialize @polkadot/util-crypto");
    }
    return true;
  }).catch(() => false);
}
var init_crypto = __esm({
  "node_modules/@polkadot/util-crypto/crypto.js"() {
    init_wasm_crypto();
  }
});

// node_modules/@polkadot/util-crypto/bundleInit.js
var init_bundleInit = __esm({
  "node_modules/@polkadot/util-crypto/bundleInit.js"() {
    init_shim();
    init_crypto();
    cryptoWaitReady().catch(() => {
    });
  }
});

// node_modules/@polkadot/util-crypto/base32/helpers.js
function createDecode({ coder, ipfs }, validate) {
  return (value, ipfsCompat) => {
    validate(value, ipfsCompat);
    return coder.decode(ipfs && ipfsCompat ? value.substring(1) : value);
  };
}
function createEncode({ coder, ipfs }) {
  return (value, ipfsCompat) => {
    const out = coder.encode(u8aToU8a(value));
    return ipfs && ipfsCompat ? `${ipfs}${out}` : out;
  };
}
function createIs(validate) {
  return (value, ipfsCompat) => {
    try {
      return validate(value, ipfsCompat);
    } catch {
      return false;
    }
  };
}
function createValidate({ chars: chars2, ipfs, type, withPadding }) {
  return (value, ipfsCompat) => {
    if (typeof value !== "string") {
      throw new Error(`Expected ${type} string input`);
    } else if (ipfs && ipfsCompat && !value.startsWith(ipfs)) {
      throw new Error(`Expected ipfs-compatible ${type} to start with '${ipfs}'`);
    }
    for (let i = ipfsCompat ? 1 : 0, count2 = value.length; i < count2; i++) {
      if (chars2.includes(value[i])) {
      } else if (withPadding && value[i] === "=") {
        if (i === count2 - 1) {
        } else if (value[i + 1] === "=") {
        } else {
          throw new Error(`Invalid ${type} padding sequence "${value[i]}${value[i + 1]}" at index ${i}`);
        }
      } else {
        throw new Error(`Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
      }
    }
    return true;
  };
}
var init_helpers3 = __esm({
  "node_modules/@polkadot/util-crypto/base32/helpers.js"() {
    init_util();
  }
});

// node_modules/@polkadot/util-crypto/base58/bs58.js
var config, base58Validate, base58Decode, base58Encode, isBase58;
var init_bs58 = __esm({
  "node_modules/@polkadot/util-crypto/base58/bs58.js"() {
    init_esm();
    init_helpers3();
    config = {
      chars: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
      coder: base58,
      ipfs: "z",
      type: "base58"
    };
    base58Validate = createValidate(config);
    base58Decode = createDecode(config, base58Validate);
    base58Encode = createEncode(config);
    isBase58 = createIs(base58Validate);
  }
});

// node_modules/@polkadot/util-crypto/base58/index.js
var init_base58 = __esm({
  "node_modules/@polkadot/util-crypto/base58/index.js"() {
    init_bs58();
  }
});

// node_modules/@noble/hashes/esm/_blake.js
var SIGMA, BLAKE;
var init_blake = __esm({
  "node_modules/@noble/hashes/esm/_blake.js"() {
    init_assert();
    init_utils();
    SIGMA = new Uint8Array([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3
    ]);
    BLAKE = class extends Hash {
      constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.length = 0;
        this.pos = 0;
        this.finished = false;
        this.destroyed = false;
        number(blockLen);
        number(outputLen);
        number(keyLen);
        if (outputLen < 0 || outputLen > keyLen)
          throw new Error("outputLen bigger than keyLen");
        if (opts.key !== void 0 && (opts.key.length < 1 || opts.key.length > keyLen))
          throw new Error(`key must be up 1..${keyLen} byte long or undefined`);
        if (opts.salt !== void 0 && opts.salt.length !== saltLen)
          throw new Error(`salt must be ${saltLen} byte long or undefined`);
        if (opts.personalization !== void 0 && opts.personalization.length !== persLen)
          throw new Error(`personalization must be ${persLen} byte long or undefined`);
        this.buffer32 = u32(this.buffer = new Uint8Array(blockLen));
      }
      update(data) {
        exists(this);
        const { blockLen, buffer: buffer2, buffer32 } = this;
        data = toBytes(data);
        const len = data.length;
        const offset = data.byteOffset;
        const buf = data.buffer;
        for (let pos = 0; pos < len; ) {
          if (this.pos === blockLen) {
            if (!isLE)
              byteSwap32(buffer32);
            this.compress(buffer32, 0, false);
            if (!isLE)
              byteSwap32(buffer32);
            this.pos = 0;
          }
          const take2 = Math.min(blockLen - this.pos, len - pos);
          const dataOffset = offset + pos;
          if (take2 === blockLen && !(dataOffset % 4) && pos + take2 < len) {
            const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
            if (!isLE)
              byteSwap32(data32);
            for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
              this.length += blockLen;
              this.compress(data32, pos32, false);
            }
            if (!isLE)
              byteSwap32(data32);
            continue;
          }
          buffer2.set(data.subarray(pos, pos + take2), this.pos);
          this.pos += take2;
          this.length += take2;
          pos += take2;
        }
        return this;
      }
      digestInto(out) {
        exists(this);
        output(out, this);
        const { pos, buffer32 } = this;
        this.finished = true;
        this.buffer.subarray(pos).fill(0);
        if (!isLE)
          byteSwap32(buffer32);
        this.compress(buffer32, 0, true);
        if (!isLE)
          byteSwap32(buffer32);
        const out32 = u32(out);
        this.get().forEach((v3, i) => out32[i] = byteSwapIfBE(v3));
      }
      digest() {
        const { buffer: buffer2, outputLen } = this;
        this.digestInto(buffer2);
        const res = buffer2.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        const { buffer: buffer2, length, finished, destroyed, outputLen, pos } = this;
        to || (to = new this.constructor({ dkLen: outputLen }));
        to.set(...this.get());
        to.length = length;
        to.finished = finished;
        to.destroyed = destroyed;
        to.outputLen = outputLen;
        to.buffer.set(buffer2);
        to.pos = pos;
        return to;
      }
    };
  }
});

// node_modules/@noble/hashes/esm/_u64.js
function fromBig(n, le2 = false) {
  if (le2)
    return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
  return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
function split(lst, le2 = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i = 0; i < lst.length; i++) {
    const { h: h2, l: l17 } = fromBig(lst[i], le2);
    [Ah[i], Al[i]] = [h2, l17];
  }
  return [Ah, Al];
}
function add(Ah, Al, Bh, Bl) {
  const l17 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l17 / 2 ** 32 | 0) | 0, l: l17 | 0 };
}
var U32_MASK64, _32n, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add3L, add3H, add4L, add4H, add5L, add5H, u64, u64_default;
var init_u64 = __esm({
  "node_modules/@noble/hashes/esm/_u64.js"() {
    U32_MASK64 = BigInt(2 ** 32 - 1);
    _32n = BigInt(32);
    toBig = (h2, l17) => BigInt(h2 >>> 0) << _32n | BigInt(l17 >>> 0);
    shrSH = (h2, _l, s) => h2 >>> s;
    shrSL = (h2, l17, s) => h2 << 32 - s | l17 >>> s;
    rotrSH = (h2, l17, s) => h2 >>> s | l17 << 32 - s;
    rotrSL = (h2, l17, s) => h2 << 32 - s | l17 >>> s;
    rotrBH = (h2, l17, s) => h2 << 64 - s | l17 >>> s - 32;
    rotrBL = (h2, l17, s) => h2 >>> s - 32 | l17 << 64 - s;
    rotr32H = (_h, l17) => l17;
    rotr32L = (h2, _l) => h2;
    rotlSH = (h2, l17, s) => h2 << s | l17 >>> 32 - s;
    rotlSL = (h2, l17, s) => l17 << s | h2 >>> 32 - s;
    rotlBH = (h2, l17, s) => l17 << s - 32 | h2 >>> 64 - s;
    rotlBL = (h2, l17, s) => h2 << s - 32 | l17 >>> 64 - s;
    add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
    add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
    add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    u64 = {
      fromBig,
      split,
      toBig,
      shrSH,
      shrSL,
      rotrSH,
      rotrSL,
      rotrBH,
      rotrBL,
      rotr32H,
      rotr32L,
      rotlSH,
      rotlSL,
      rotlBH,
      rotlBL,
      add,
      add3L,
      add3H,
      add4L,
      add4H,
      add5H,
      add5L
    };
    u64_default = u64;
  }
});

// node_modules/@noble/hashes/esm/blake2b.js
function G1b(a, b2, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1];
  let Bl = BBUF[2 * b2], Bh = BBUF[2 * b2 + 1];
  let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1];
  let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1];
  let ll = u64_default.add3L(Al, Bl, Xl);
  Ah = u64_default.add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: u64_default.rotr32H(Dh, Dl), Dl: u64_default.rotr32L(Dh, Dl) });
  ({ h: Ch, l: Cl } = u64_default.add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: u64_default.rotrSH(Bh, Bl, 24), Bl: u64_default.rotrSL(Bh, Bl, 24) });
  BBUF[2 * a] = Al, BBUF[2 * a + 1] = Ah;
  BBUF[2 * b2] = Bl, BBUF[2 * b2 + 1] = Bh;
  BBUF[2 * c] = Cl, BBUF[2 * c + 1] = Ch;
  BBUF[2 * d] = Dl, BBUF[2 * d + 1] = Dh;
}
function G2b(a, b2, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1];
  let Bl = BBUF[2 * b2], Bh = BBUF[2 * b2 + 1];
  let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1];
  let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1];
  let ll = u64_default.add3L(Al, Bl, Xl);
  Ah = u64_default.add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: u64_default.rotrSH(Dh, Dl, 16), Dl: u64_default.rotrSL(Dh, Dl, 16) });
  ({ h: Ch, l: Cl } = u64_default.add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: u64_default.rotrBH(Bh, Bl, 63), Bl: u64_default.rotrBL(Bh, Bl, 63) });
  BBUF[2 * a] = Al, BBUF[2 * a + 1] = Ah;
  BBUF[2 * b2] = Bl, BBUF[2 * b2 + 1] = Bh;
  BBUF[2 * c] = Cl, BBUF[2 * c + 1] = Ch;
  BBUF[2 * d] = Dl, BBUF[2 * d + 1] = Dh;
}
var B2B_IV, BBUF, BLAKE2b, blake2b2;
var init_blake2b = __esm({
  "node_modules/@noble/hashes/esm/blake2b.js"() {
    init_blake();
    init_u64();
    init_utils();
    B2B_IV = new Uint32Array([
      4089235720,
      1779033703,
      2227873595,
      3144134277,
      4271175723,
      1013904242,
      1595750129,
      2773480762,
      2917565137,
      1359893119,
      725511199,
      2600822924,
      4215389547,
      528734635,
      327033209,
      1541459225
    ]);
    BBUF = new Uint32Array(32);
    BLAKE2b = class extends BLAKE {
      constructor(opts = {}) {
        super(128, opts.dkLen === void 0 ? 64 : opts.dkLen, opts, 64, 16, 16);
        this.v0l = B2B_IV[0] | 0;
        this.v0h = B2B_IV[1] | 0;
        this.v1l = B2B_IV[2] | 0;
        this.v1h = B2B_IV[3] | 0;
        this.v2l = B2B_IV[4] | 0;
        this.v2h = B2B_IV[5] | 0;
        this.v3l = B2B_IV[6] | 0;
        this.v3h = B2B_IV[7] | 0;
        this.v4l = B2B_IV[8] | 0;
        this.v4h = B2B_IV[9] | 0;
        this.v5l = B2B_IV[10] | 0;
        this.v5h = B2B_IV[11] | 0;
        this.v6l = B2B_IV[12] | 0;
        this.v6h = B2B_IV[13] | 0;
        this.v7l = B2B_IV[14] | 0;
        this.v7h = B2B_IV[15] | 0;
        const keyLength = opts.key ? opts.key.length : 0;
        this.v0l ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
        if (opts.salt) {
          const salt = u32(toBytes(opts.salt));
          this.v4l ^= byteSwapIfBE(salt[0]);
          this.v4h ^= byteSwapIfBE(salt[1]);
          this.v5l ^= byteSwapIfBE(salt[2]);
          this.v5h ^= byteSwapIfBE(salt[3]);
        }
        if (opts.personalization) {
          const pers = u32(toBytes(opts.personalization));
          this.v6l ^= byteSwapIfBE(pers[0]);
          this.v6h ^= byteSwapIfBE(pers[1]);
          this.v7l ^= byteSwapIfBE(pers[2]);
          this.v7h ^= byteSwapIfBE(pers[3]);
        }
        if (opts.key) {
          const tmp = new Uint8Array(this.blockLen);
          tmp.set(toBytes(opts.key));
          this.update(tmp);
        }
      }
      // prettier-ignore
      get() {
        let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
        return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
      }
      // prettier-ignore
      set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
        this.v0l = v0l | 0;
        this.v0h = v0h | 0;
        this.v1l = v1l | 0;
        this.v1h = v1h | 0;
        this.v2l = v2l | 0;
        this.v2h = v2h | 0;
        this.v3l = v3l | 0;
        this.v3h = v3h | 0;
        this.v4l = v4l | 0;
        this.v4h = v4h | 0;
        this.v5l = v5l | 0;
        this.v5h = v5h | 0;
        this.v6l = v6l | 0;
        this.v6h = v6h | 0;
        this.v7l = v7l | 0;
        this.v7h = v7h | 0;
      }
      compress(msg, offset, isLast) {
        this.get().forEach((v3, i) => BBUF[i] = v3);
        BBUF.set(B2B_IV, 16);
        let { h: h2, l: l17 } = u64_default.fromBig(BigInt(this.length));
        BBUF[24] = B2B_IV[8] ^ l17;
        BBUF[25] = B2B_IV[9] ^ h2;
        if (isLast) {
          BBUF[28] = ~BBUF[28];
          BBUF[29] = ~BBUF[29];
        }
        let j3 = 0;
        const s = SIGMA;
        for (let i = 0; i < 12; i++) {
          G1b(0, 4, 8, 12, msg, offset + 2 * s[j3++]);
          G2b(0, 4, 8, 12, msg, offset + 2 * s[j3++]);
          G1b(1, 5, 9, 13, msg, offset + 2 * s[j3++]);
          G2b(1, 5, 9, 13, msg, offset + 2 * s[j3++]);
          G1b(2, 6, 10, 14, msg, offset + 2 * s[j3++]);
          G2b(2, 6, 10, 14, msg, offset + 2 * s[j3++]);
          G1b(3, 7, 11, 15, msg, offset + 2 * s[j3++]);
          G2b(3, 7, 11, 15, msg, offset + 2 * s[j3++]);
          G1b(0, 5, 10, 15, msg, offset + 2 * s[j3++]);
          G2b(0, 5, 10, 15, msg, offset + 2 * s[j3++]);
          G1b(1, 6, 11, 12, msg, offset + 2 * s[j3++]);
          G2b(1, 6, 11, 12, msg, offset + 2 * s[j3++]);
          G1b(2, 7, 8, 13, msg, offset + 2 * s[j3++]);
          G2b(2, 7, 8, 13, msg, offset + 2 * s[j3++]);
          G1b(3, 4, 9, 14, msg, offset + 2 * s[j3++]);
          G2b(3, 4, 9, 14, msg, offset + 2 * s[j3++]);
        }
        this.v0l ^= BBUF[0] ^ BBUF[16];
        this.v0h ^= BBUF[1] ^ BBUF[17];
        this.v1l ^= BBUF[2] ^ BBUF[18];
        this.v1h ^= BBUF[3] ^ BBUF[19];
        this.v2l ^= BBUF[4] ^ BBUF[20];
        this.v2h ^= BBUF[5] ^ BBUF[21];
        this.v3l ^= BBUF[6] ^ BBUF[22];
        this.v3h ^= BBUF[7] ^ BBUF[23];
        this.v4l ^= BBUF[8] ^ BBUF[24];
        this.v4h ^= BBUF[9] ^ BBUF[25];
        this.v5l ^= BBUF[10] ^ BBUF[26];
        this.v5h ^= BBUF[11] ^ BBUF[27];
        this.v6l ^= BBUF[12] ^ BBUF[28];
        this.v6h ^= BBUF[13] ^ BBUF[29];
        this.v7l ^= BBUF[14] ^ BBUF[30];
        this.v7h ^= BBUF[15] ^ BBUF[31];
        BBUF.fill(0);
      }
      destroy() {
        this.destroyed = true;
        this.buffer32.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
    };
    blake2b2 = wrapConstructorWithOpts((opts) => new BLAKE2b(opts));
  }
});

// node_modules/@polkadot/util-crypto/helpers.js
function createAsHex(fn) {
  return (...args) => u8aToHex(fn(...args));
}
function createBitHasher(bitLength, fn) {
  return (data, onlyJs) => fn(data, bitLength, onlyJs);
}
function createDualHasher(wa, js) {
  return (value, bitLength = 256, onlyJs) => {
    const u8a = u8aToU8a(value);
    return !hasBigInt || !onlyJs && isReady() ? wa[bitLength](u8a) : js[bitLength](u8a);
  };
}
var init_helpers4 = __esm({
  "node_modules/@polkadot/util-crypto/helpers.js"() {
    init_util();
    init_wasm_crypto();
  }
});

// node_modules/@polkadot/util-crypto/blake2/asU8a.js
function blake2AsU8a(data, bitLength = 256, key, onlyJs) {
  const byteLength = Math.ceil(bitLength / 8);
  const u8a = u8aToU8a(data);
  return !hasBigInt || !onlyJs && isReady() ? blake2b(u8a, u8aToU8a(key), byteLength) : key ? blake2b2(u8a, { dkLen: byteLength, key }) : blake2b2(u8a, { dkLen: byteLength });
}
var blake2AsHex;
var init_asU8a = __esm({
  "node_modules/@polkadot/util-crypto/blake2/asU8a.js"() {
    init_blake2b();
    init_util();
    init_wasm_crypto();
    init_helpers4();
    blake2AsHex = createAsHex(blake2AsU8a);
  }
});

// node_modules/@polkadot/util-crypto/address/sshash.js
function sshash(key) {
  return blake2AsU8a(u8aConcat(SS58_PREFIX, key), 512);
}
var SS58_PREFIX;
var init_sshash = __esm({
  "node_modules/@polkadot/util-crypto/address/sshash.js"() {
    init_util();
    init_asU8a();
    SS58_PREFIX = stringToU8a("SS58PRE");
  }
});

// node_modules/@polkadot/util-crypto/address/checksum.js
function checkAddressChecksum(decoded) {
  const ss58Length = decoded[0] & 64 ? 2 : 1;
  const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 63) << 2 | decoded[1] >> 6 | (decoded[1] & 63) << 8;
  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
  const length = decoded.length - (isPublicKey ? 2 : 1);
  const hash2 = sshash(decoded.subarray(0, length));
  const isValid = (decoded[0] & 128) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash2[0] && decoded[decoded.length - 1] === hash2[1] : decoded[decoded.length - 1] === hash2[0]);
  return [isValid, length, ss58Length, ss58Decoded];
}
var init_checksum = __esm({
  "node_modules/@polkadot/util-crypto/address/checksum.js"() {
    init_sshash();
  }
});

// node_modules/@substrate/ss58-registry/esm/index.js
var esm_default;
var init_esm2 = __esm({
  "node_modules/@substrate/ss58-registry/esm/index.js"() {
    esm_default = [
      {
        "prefix": 0,
        "network": "polkadot",
        "displayName": "Polkadot Relay Chain",
        "symbols": [
          "DOT"
        ],
        "decimals": [
          10
        ],
        "standardAccount": "*25519",
        "website": "https://polkadot.network"
      },
      {
        "prefix": 1,
        "network": "BareSr25519",
        "displayName": "Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",
        "symbols": [],
        "decimals": [],
        "standardAccount": "Sr25519",
        "website": null
      },
      {
        "prefix": 2,
        "network": "kusama",
        "displayName": "Kusama Relay Chain",
        "symbols": [
          "KSM"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://kusama.network"
      },
      {
        "prefix": 3,
        "network": "BareEd25519",
        "displayName": "Bare 32-bit Ed25519 public key.",
        "symbols": [],
        "decimals": [],
        "standardAccount": "Ed25519",
        "website": null
      },
      {
        "prefix": 4,
        "network": "katalchain",
        "displayName": "Katal Chain",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
      },
      {
        "prefix": 5,
        "network": "astar",
        "displayName": "Astar Network",
        "symbols": [
          "ASTR"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://astar.network"
      },
      {
        "prefix": 6,
        "network": "bifrost",
        "displayName": "Bifrost",
        "symbols": [
          "BNC"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://bifrost.finance/"
      },
      {
        "prefix": 7,
        "network": "edgeware",
        "displayName": "Edgeware",
        "symbols": [
          "EDG"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://edgewa.re"
      },
      {
        "prefix": 8,
        "network": "karura",
        "displayName": "Karura",
        "symbols": [
          "KAR"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://karura.network/"
      },
      {
        "prefix": 9,
        "network": "reynolds",
        "displayName": "Laminar Reynolds Canary",
        "symbols": [
          "REY"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "http://laminar.network/"
      },
      {
        "prefix": 10,
        "network": "acala",
        "displayName": "Acala",
        "symbols": [
          "ACA"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://acala.network/"
      },
      {
        "prefix": 11,
        "network": "laminar",
        "displayName": "Laminar",
        "symbols": [
          "LAMI"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "http://laminar.network/"
      },
      {
        "prefix": 12,
        "network": "polymesh",
        "displayName": "Polymesh",
        "symbols": [
          "POLYX"
        ],
        "decimals": [
          6
        ],
        "standardAccount": "*25519",
        "website": "https://polymath.network/"
      },
      {
        "prefix": 13,
        "network": "integritee",
        "displayName": "Integritee",
        "symbols": [
          "TEER"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://integritee.network"
      },
      {
        "prefix": 14,
        "network": "totem",
        "displayName": "Totem",
        "symbols": [
          "TOTEM"
        ],
        "decimals": [
          0
        ],
        "standardAccount": "*25519",
        "website": "https://totemaccounting.com"
      },
      {
        "prefix": 15,
        "network": "synesthesia",
        "displayName": "Synesthesia",
        "symbols": [
          "SYN"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://synesthesia.network/"
      },
      {
        "prefix": 16,
        "network": "kulupu",
        "displayName": "Kulupu",
        "symbols": [
          "KLP"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://kulupu.network/"
      },
      {
        "prefix": 17,
        "network": "dark",
        "displayName": "Dark Mainnet",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
      },
      {
        "prefix": 18,
        "network": "darwinia",
        "displayName": "Darwinia Network",
        "symbols": [
          "RING"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "secp256k1",
        "website": "https://darwinia.network"
      },
      {
        "prefix": 19,
        "network": "watr",
        "displayName": "Watr Protocol",
        "symbols": [
          "WATR"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://www.watr.org"
      },
      {
        "prefix": 20,
        "network": "stafi",
        "displayName": "Stafi",
        "symbols": [
          "FIS"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://stafi.io"
      },
      {
        "prefix": 21,
        "network": "karmachain",
        "displayName": "Karmacoin",
        "symbols": [
          "KCOIN"
        ],
        "decimals": [
          6
        ],
        "standardAccount": "*25519",
        "website": "https://karmaco.in"
      },
      {
        "prefix": 22,
        "network": "dock-pos-mainnet",
        "displayName": "Dock Mainnet",
        "symbols": [
          "DCK"
        ],
        "decimals": [
          6
        ],
        "standardAccount": "*25519",
        "website": "https://dock.io"
      },
      {
        "prefix": 23,
        "network": "shift",
        "displayName": "ShiftNrg",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
      },
      {
        "prefix": 24,
        "network": "zero",
        "displayName": "ZERO",
        "symbols": [
          "ZERO"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://zero.io"
      },
      {
        "prefix": 25,
        "network": "zero-alphaville",
        "displayName": "ZERO Alphaville",
        "symbols": [
          "ZERO"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://zero.io"
      },
      {
        "prefix": 26,
        "network": "jupiter",
        "displayName": "Jupiter",
        "symbols": [
          "jDOT"
        ],
        "decimals": [
          10
        ],
        "standardAccount": "*25519",
        "website": "https://jupiter.patract.io"
      },
      {
        "prefix": 27,
        "network": "kabocha",
        "displayName": "Kabocha",
        "symbols": [
          "KAB"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://kabocha.network"
      },
      {
        "prefix": 28,
        "network": "subsocial",
        "displayName": "Subsocial",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
      },
      {
        "prefix": 29,
        "network": "cord",
        "displayName": "CORD Network",
        "symbols": [
          "DHI",
          "WAY"
        ],
        "decimals": [
          12,
          12
        ],
        "standardAccount": "*25519",
        "website": "https://cord.network/"
      },
      {
        "prefix": 30,
        "network": "phala",
        "displayName": "Phala Network",
        "symbols": [
          "PHA"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://phala.network"
      },
      {
        "prefix": 31,
        "network": "litentry",
        "displayName": "Litentry Network",
        "symbols": [
          "LIT"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://litentry.com/"
      },
      {
        "prefix": 32,
        "network": "robonomics",
        "displayName": "Robonomics",
        "symbols": [
          "XRT"
        ],
        "decimals": [
          9
        ],
        "standardAccount": "*25519",
        "website": "https://robonomics.network"
      },
      {
        "prefix": 33,
        "network": "datahighway",
        "displayName": "DataHighway",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
      },
      {
        "prefix": 34,
        "network": "ares",
        "displayName": "Ares Protocol",
        "symbols": [
          "ARES"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://www.aresprotocol.com/"
      },
      {
        "prefix": 35,
        "network": "vln",
        "displayName": "Valiu Liquidity Network",
        "symbols": [
          "USDv"
        ],
        "decimals": [
          15
        ],
        "standardAccount": "*25519",
        "website": "https://valiu.com/"
      },
      {
        "prefix": 36,
        "network": "centrifuge",
        "displayName": "Centrifuge Chain",
        "symbols": [
          "CFG"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://centrifuge.io/"
      },
      {
        "prefix": 37,
        "network": "nodle",
        "displayName": "Nodle Chain",
        "symbols": [
          "NODL"
        ],
        "decimals": [
          11
        ],
        "standardAccount": "*25519",
        "website": "https://nodle.io/"
      },
      {
        "prefix": 38,
        "network": "kilt",
        "displayName": "KILT Spiritnet",
        "symbols": [
          "KILT"
        ],
        "decimals": [
          15
        ],
        "standardAccount": "*25519",
        "website": "https://kilt.io/"
      },
      {
        "prefix": 39,
        "network": "mathchain",
        "displayName": "MathChain mainnet",
        "symbols": [
          "MATH"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://mathwallet.org"
      },
      {
        "prefix": 40,
        "network": "mathchain-testnet",
        "displayName": "MathChain testnet",
        "symbols": [
          "MATH"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://mathwallet.org"
      },
      {
        "prefix": 41,
        "network": "polimec",
        "displayName": "Polimec Protocol",
        "symbols": [
          "PLMC"
        ],
        "decimals": [
          10
        ],
        "standardAccount": "*25519",
        "website": "https://www.polimec.org/"
      },
      {
        "prefix": 42,
        "network": "substrate",
        "displayName": "Substrate",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": "https://substrate.io/"
      },
      {
        "prefix": 43,
        "network": "BareSecp256k1",
        "displayName": "Bare 32-bit ECDSA SECP-256k1 public key.",
        "symbols": [],
        "decimals": [],
        "standardAccount": "secp256k1",
        "website": null
      },
      {
        "prefix": 44,
        "network": "chainx",
        "displayName": "ChainX",
        "symbols": [
          "PCX"
        ],
        "decimals": [
          8
        ],
        "standardAccount": "*25519",
        "website": "https://chainx.org/"
      },
      {
        "prefix": 45,
        "network": "uniarts",
        "displayName": "UniArts Network",
        "symbols": [
          "UART",
          "UINK"
        ],
        "decimals": [
          12,
          12
        ],
        "standardAccount": "*25519",
        "website": "https://uniarts.me"
      },
      {
        "prefix": 46,
        "network": "reserved46",
        "displayName": "This prefix is reserved.",
        "symbols": [],
        "decimals": [],
        "standardAccount": null,
        "website": null
      },
      {
        "prefix": 47,
        "network": "reserved47",
        "displayName": "This prefix is reserved.",
        "symbols": [],
        "decimals": [],
        "standardAccount": null,
        "website": null
      },
      {
        "prefix": 48,
        "network": "neatcoin",
        "displayName": "Neatcoin Mainnet",
        "symbols": [
          "NEAT"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://neatcoin.org"
      },
      {
        "prefix": 49,
        "network": "picasso",
        "displayName": "Picasso",
        "symbols": [
          "PICA"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://picasso.composable.finance"
      },
      {
        "prefix": 50,
        "network": "composable",
        "displayName": "Composable Finance",
        "symbols": [
          "LAYR"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://composable.finance"
      },
      {
        "prefix": 51,
        "network": "oak",
        "displayName": "OAK Network",
        "symbols": [
          "OAK",
          "TUR"
        ],
        "decimals": [
          10,
          10
        ],
        "standardAccount": "*25519",
        "website": "https://oak.tech"
      },
      {
        "prefix": 52,
        "network": "KICO",
        "displayName": "KICO",
        "symbols": [
          "KICO"
        ],
        "decimals": [
          14
        ],
        "standardAccount": "*25519",
        "website": "https://dico.io"
      },
      {
        "prefix": 53,
        "network": "DICO",
        "displayName": "DICO",
        "symbols": [
          "DICO"
        ],
        "decimals": [
          14
        ],
        "standardAccount": "*25519",
        "website": "https://dico.io"
      },
      {
        "prefix": 54,
        "network": "cere",
        "displayName": "Cere Network",
        "symbols": [
          "CERE"
        ],
        "decimals": [
          10
        ],
        "standardAccount": "*25519",
        "website": "https://cere.network"
      },
      {
        "prefix": 55,
        "network": "xxnetwork",
        "displayName": "xx network",
        "symbols": [
          "XX"
        ],
        "decimals": [
          9
        ],
        "standardAccount": "*25519",
        "website": "https://xx.network"
      },
      {
        "prefix": 56,
        "network": "pendulum",
        "displayName": "Pendulum chain",
        "symbols": [
          "PEN"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://pendulumchain.org/"
      },
      {
        "prefix": 57,
        "network": "amplitude",
        "displayName": "Amplitude chain",
        "symbols": [
          "AMPE"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://pendulumchain.org/"
      },
      {
        "prefix": 58,
        "network": "eternal-civilization",
        "displayName": "Eternal Civilization",
        "symbols": [
          "ECC"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "http://www.ysknfr.cn/"
      },
      {
        "prefix": 63,
        "network": "hydradx",
        "displayName": "Hydration",
        "symbols": [
          "HDX"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://hydration.net"
      },
      {
        "prefix": 65,
        "network": "aventus",
        "displayName": "Aventus Mainnet",
        "symbols": [
          "AVT"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://aventus.io"
      },
      {
        "prefix": 66,
        "network": "crust",
        "displayName": "Crust Network",
        "symbols": [
          "CRU"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://crust.network"
      },
      {
        "prefix": 67,
        "network": "genshiro",
        "displayName": "Genshiro Network",
        "symbols": [
          "GENS",
          "EQD",
          "LPT0"
        ],
        "decimals": [
          9,
          9,
          9
        ],
        "standardAccount": "*25519",
        "website": "https://genshiro.equilibrium.io"
      },
      {
        "prefix": 68,
        "network": "equilibrium",
        "displayName": "Equilibrium Network",
        "symbols": [
          "EQ"
        ],
        "decimals": [
          9
        ],
        "standardAccount": "*25519",
        "website": "https://equilibrium.io"
      },
      {
        "prefix": 69,
        "network": "sora",
        "displayName": "SORA Network",
        "symbols": [
          "XOR"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://sora.org"
      },
      {
        "prefix": 71,
        "network": "p3d",
        "displayName": "3DP network",
        "symbols": [
          "P3D"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://3dpass.org"
      },
      {
        "prefix": 72,
        "network": "p3dt",
        "displayName": "3DP test network",
        "symbols": [
          "P3Dt"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://3dpass.org"
      },
      {
        "prefix": 73,
        "network": "zeitgeist",
        "displayName": "Zeitgeist",
        "symbols": [
          "ZTG"
        ],
        "decimals": [
          10
        ],
        "standardAccount": "*25519",
        "website": "https://zeitgeist.pm"
      },
      {
        "prefix": 77,
        "network": "manta",
        "displayName": "Manta network",
        "symbols": [
          "MANTA"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://manta.network"
      },
      {
        "prefix": 78,
        "network": "calamari",
        "displayName": "Calamari: Manta Canary Network",
        "symbols": [
          "KMA"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://manta.network"
      },
      {
        "prefix": 81,
        "network": "sora_dot_para",
        "displayName": "SORA Polkadot Parachain",
        "symbols": [
          "XOR"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://sora.org"
      },
      {
        "prefix": 88,
        "network": "polkadex",
        "displayName": "Polkadex Mainnet",
        "symbols": [
          "PDEX"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://polkadex.trade"
      },
      {
        "prefix": 89,
        "network": "polkadexparachain",
        "displayName": "Polkadex Parachain",
        "symbols": [
          "PDEX"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://polkadex.trade"
      },
      {
        "prefix": 90,
        "network": "frequency",
        "displayName": "Frequency",
        "symbols": [
          "FRQCY"
        ],
        "decimals": [
          8
        ],
        "standardAccount": "*25519",
        "website": "https://www.frequency.xyz"
      },
      {
        "prefix": 92,
        "network": "anmol",
        "displayName": "Anmol Network",
        "symbols": [
          "ANML"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://anmol.network/"
      },
      {
        "prefix": 93,
        "network": "fragnova",
        "displayName": "Fragnova Network",
        "symbols": [
          "NOVA"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://fragnova.com"
      },
      {
        "prefix": 98,
        "network": "polkasmith",
        "displayName": "PolkaSmith Canary Network",
        "symbols": [
          "PKS"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://polkafoundry.com"
      },
      {
        "prefix": 99,
        "network": "polkafoundry",
        "displayName": "PolkaFoundry Network",
        "symbols": [
          "PKF"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://polkafoundry.com"
      },
      {
        "prefix": 100,
        "network": "ibtida",
        "displayName": "Anmol Network Ibtida Canary network",
        "symbols": [
          "IANML"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://anmol.network/"
      },
      {
        "prefix": 101,
        "network": "origintrail-parachain",
        "displayName": "OriginTrail Parachain",
        "symbols": [
          "OTP"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://parachain.origintrail.io/"
      },
      {
        "prefix": 105,
        "network": "pontem-network",
        "displayName": "Pontem Network",
        "symbols": [
          "PONT"
        ],
        "decimals": [
          10
        ],
        "standardAccount": "*25519",
        "website": "https://pontem.network"
      },
      {
        "prefix": 110,
        "network": "heiko",
        "displayName": "Heiko",
        "symbols": [
          "HKO"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://parallel.fi/"
      },
      {
        "prefix": 113,
        "network": "integritee-incognito",
        "displayName": "Integritee Incognito",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": "https://integritee.network"
      },
      {
        "prefix": 117,
        "network": "tinker",
        "displayName": "Tinker",
        "symbols": [
          "TNKR"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://invarch.network"
      },
      {
        "prefix": 126,
        "network": "joystream",
        "displayName": "Joystream",
        "symbols": [
          "JOY"
        ],
        "decimals": [
          10
        ],
        "standardAccount": "*25519",
        "website": "https://www.joystream.org"
      },
      {
        "prefix": 128,
        "network": "clover",
        "displayName": "Clover Finance",
        "symbols": [
          "CLV"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://clover.finance"
      },
      {
        "prefix": 129,
        "network": "dorafactory-polkadot",
        "displayName": "Dorafactory Polkadot Network",
        "symbols": [
          "DORA"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://dorafactory.org"
      },
      {
        "prefix": 131,
        "network": "litmus",
        "displayName": "Litmus Network",
        "symbols": [
          "LIT"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://litentry.com/"
      },
      {
        "prefix": 136,
        "network": "altair",
        "displayName": "Altair",
        "symbols": [
          "AIR"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://centrifuge.io/"
      },
      {
        "prefix": 137,
        "network": "vara",
        "displayName": "Vara Network",
        "symbols": [
          "VARA"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://vara.network/"
      },
      {
        "prefix": 172,
        "network": "parallel",
        "displayName": "Parallel",
        "symbols": [
          "PARA"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://parallel.fi/"
      },
      {
        "prefix": 252,
        "network": "social-network",
        "displayName": "Social Network",
        "symbols": [
          "NET"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://social.network"
      },
      {
        "prefix": 255,
        "network": "quartz_mainnet",
        "displayName": "QUARTZ by UNIQUE",
        "symbols": [
          "QTZ"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://unique.network"
      },
      {
        "prefix": 268,
        "network": "pioneer_network",
        "displayName": "Pioneer Network by Bit.Country",
        "symbols": [
          "NEER"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://bit.country"
      },
      {
        "prefix": 420,
        "network": "sora_kusama_para",
        "displayName": "SORA Kusama Parachain",
        "symbols": [
          "XOR"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://sora.org"
      },
      {
        "prefix": 440,
        "network": "allfeat_network",
        "displayName": "Allfeat Network",
        "symbols": [
          "AFT"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://allfeat.network"
      },
      {
        "prefix": 666,
        "network": "metaquity_network",
        "displayName": "Metaquity Network",
        "symbols": [
          "MQTY"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://metaquity.xyz/"
      },
      {
        "prefix": 777,
        "network": "curio",
        "displayName": "Curio",
        "symbols": [
          "CGT"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://parachain.capitaldex.exchange/"
      },
      {
        "prefix": 789,
        "network": "geek",
        "displayName": "GEEK Network",
        "symbols": [
          "GEEK"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://geek.gl"
      },
      {
        "prefix": 995,
        "network": "ternoa",
        "displayName": "Ternoa",
        "symbols": [
          "CAPS"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://www.ternoa.network"
      },
      {
        "prefix": 1110,
        "network": "efinity",
        "displayName": "Efinity",
        "symbols": [
          "EFI"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://efinity.io/"
      },
      {
        "prefix": 1221,
        "network": "peaq",
        "displayName": "Peaq Network",
        "symbols": [
          "PEAQ"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "Sr25519",
        "website": "https://www.peaq.network/"
      },
      {
        "prefix": 1222,
        "network": "krest",
        "displayName": "Krest Network",
        "symbols": [
          "KREST"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "Sr25519",
        "website": "https://www.peaq.network/"
      },
      {
        "prefix": 1284,
        "network": "moonbeam",
        "displayName": "Moonbeam",
        "symbols": [
          "GLMR"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "secp256k1",
        "website": "https://moonbeam.network"
      },
      {
        "prefix": 1285,
        "network": "moonriver",
        "displayName": "Moonriver",
        "symbols": [
          "MOVR"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "secp256k1",
        "website": "https://moonbeam.network"
      },
      {
        "prefix": 1328,
        "network": "ajuna",
        "displayName": "Ajuna Network",
        "symbols": [
          "AJUN"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://ajuna.io"
      },
      {
        "prefix": 1337,
        "network": "bajun",
        "displayName": "Bajun Network",
        "symbols": [
          "BAJU"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://ajuna.io"
      },
      {
        "prefix": 1516,
        "network": "societal",
        "displayName": "Societal",
        "symbols": [
          "SCTL"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://www.sctl.xyz"
      },
      {
        "prefix": 1985,
        "network": "seals",
        "displayName": "Seals Network",
        "symbols": [
          "SEAL"
        ],
        "decimals": [
          9
        ],
        "standardAccount": "*25519",
        "website": "https://seals.app"
      },
      {
        "prefix": 2007,
        "network": "kapex",
        "displayName": "Kapex",
        "symbols": [
          "KAPEX"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://totemaccounting.com"
      },
      {
        "prefix": 2009,
        "network": "cloudwalk_mainnet",
        "displayName": "CloudWalk Network Mainnet",
        "symbols": [
          "CWN"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://explorer.mainnet.cloudwalk.io"
      },
      {
        "prefix": 2021,
        "network": "logion",
        "displayName": "logion network",
        "symbols": [
          "LGNT"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://logion.network"
      },
      {
        "prefix": 2024,
        "network": "vow-chain",
        "displayName": "Enigmatic Smile",
        "symbols": [
          "VOW"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://www.vow.foundation/"
      },
      {
        "prefix": 2032,
        "network": "interlay",
        "displayName": "Interlay",
        "symbols": [
          "INTR"
        ],
        "decimals": [
          10
        ],
        "standardAccount": "*25519",
        "website": "https://interlay.io/"
      },
      {
        "prefix": 2092,
        "network": "kintsugi",
        "displayName": "Kintsugi",
        "symbols": [
          "KINT"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://interlay.io/"
      },
      {
        "prefix": 2106,
        "network": "bitgreen",
        "displayName": "Bitgreen",
        "symbols": [
          "BBB"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://bitgreen.org/"
      },
      {
        "prefix": 2112,
        "network": "chainflip",
        "displayName": "Chainflip",
        "symbols": [
          "FLIP"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://chainflip.io/"
      },
      {
        "prefix": 2199,
        "network": "moonsama",
        "displayName": "Moonsama",
        "symbols": [
          "SAMA"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "secp256k1",
        "website": "https://moonsama.com"
      },
      {
        "prefix": 2206,
        "network": "ICE",
        "displayName": "ICE Network",
        "symbols": [
          "ICY"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://icenetwork.io"
      },
      {
        "prefix": 2207,
        "network": "SNOW",
        "displayName": "SNOW: ICE Canary Network",
        "symbols": [
          "ICZ"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://icenetwork.io"
      },
      {
        "prefix": 2254,
        "network": "subspace_testnet",
        "displayName": "Subspace testnet",
        "symbols": [
          "tSSC"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://subspace.network"
      },
      {
        "prefix": 3333,
        "network": "peerplays",
        "displayName": "Peerplays",
        "symbols": [
          "PPY"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "secp256k1",
        "website": "https://www.peerplays.com/"
      },
      {
        "prefix": 4450,
        "network": "g1",
        "displayName": "Ğ1",
        "symbols": [
          "G1"
        ],
        "decimals": [
          2
        ],
        "standardAccount": "*25519",
        "website": "https://duniter.org"
      },
      {
        "prefix": 5234,
        "network": "humanode",
        "displayName": "Humanode Network",
        "symbols": [
          "HMND"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://humanode.io"
      },
      {
        "prefix": 5845,
        "network": "tangle",
        "displayName": "Tangle Network",
        "symbols": [
          "TNT"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://www.tangle.tools/"
      },
      {
        "prefix": 6094,
        "network": "autonomys",
        "displayName": "Autonomys",
        "symbols": [
          "AI3"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://autonomys.xyz"
      },
      {
        "prefix": 7007,
        "network": "tidefi",
        "displayName": "Tidefi",
        "symbols": [
          "TDFY"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://tidefi.com"
      },
      {
        "prefix": 7013,
        "network": "gm",
        "displayName": "GM",
        "symbols": [
          "FREN",
          "GM",
          "GN"
        ],
        "decimals": [
          12,
          0,
          0
        ],
        "standardAccount": "*25519",
        "website": "https://gmordie.com"
      },
      {
        "prefix": 7306,
        "network": "krigan",
        "displayName": "Krigan Network",
        "symbols": [
          "KRGN"
        ],
        "decimals": [
          9
        ],
        "standardAccount": "*25519",
        "website": "https://krigan.network"
      },
      {
        "prefix": 7391,
        "network": "unique_mainnet",
        "displayName": "Unique Network",
        "symbols": [
          "UNQ"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://unique.network"
      },
      {
        "prefix": 8866,
        "network": "golden_gate",
        "displayName": "Golden Gate",
        "symbols": [
          "GGX"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://ggxchain.io/"
      },
      {
        "prefix": 8883,
        "network": "sapphire_mainnet",
        "displayName": "Sapphire by Unique",
        "symbols": [
          "QTZ"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://unique.network"
      },
      {
        "prefix": 8886,
        "network": "golden_gate_sydney",
        "displayName": "Golden Gate Sydney",
        "symbols": [
          "GGXT"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://ggxchain.io/"
      },
      {
        "prefix": 9072,
        "network": "hashed",
        "displayName": "Hashed Network",
        "symbols": [
          "HASH"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://hashed.network"
      },
      {
        "prefix": 9807,
        "network": "dentnet",
        "displayName": "DENTNet",
        "symbols": [
          "DENTX"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://www.dentnet.io"
      },
      {
        "prefix": 9935,
        "network": "t3rn",
        "displayName": "t3rn",
        "symbols": [
          "TRN"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://t3rn.io/"
      },
      {
        "prefix": 10041,
        "network": "basilisk",
        "displayName": "Basilisk",
        "symbols": [
          "BSX"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://bsx.fi"
      },
      {
        "prefix": 11330,
        "network": "cess-testnet",
        "displayName": "CESS Testnet",
        "symbols": [
          "TCESS"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://cess.cloud"
      },
      {
        "prefix": 11331,
        "network": "cess",
        "displayName": "CESS",
        "symbols": [
          "CESS"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://cess.cloud"
      },
      {
        "prefix": 11486,
        "network": "luhn",
        "displayName": "Luhn Network",
        "symbols": [
          "LUHN"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://luhn.network"
      },
      {
        "prefix": 11820,
        "network": "contextfree",
        "displayName": "Automata ContextFree",
        "symbols": [
          "CTX"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://ata.network"
      },
      {
        "prefix": 12155,
        "network": "impact",
        "displayName": "Impact Protocol Network",
        "symbols": [
          "BSTY"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://impactprotocol.network/"
      },
      {
        "prefix": 12191,
        "network": "nftmart",
        "displayName": "NFTMart",
        "symbols": [
          "NMT"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://nftmart.io"
      },
      {
        "prefix": 12850,
        "network": "analog-timechain",
        "displayName": "Analog Timechain",
        "symbols": [
          "ANLOG"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://analog.one"
      },
      {
        "prefix": 13116,
        "network": "bittensor",
        "displayName": "Bittensor",
        "symbols": [
          "TAO"
        ],
        "decimals": [
          9
        ],
        "standardAccount": "*25519",
        "website": "https://bittensor.com"
      },
      {
        "prefix": 14697,
        "network": "goro",
        "displayName": "GORO Network",
        "symbols": [
          "GORO"
        ],
        "decimals": [
          9
        ],
        "standardAccount": "*25519",
        "website": "https://goro.network"
      },
      {
        "prefix": 14998,
        "network": "mosaic-chain",
        "displayName": "Mosaic Chain",
        "symbols": [
          "MOS"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "*25519",
        "website": "https://mosaicchain.io"
      },
      {
        "prefix": 29972,
        "network": "mythos",
        "displayName": "Mythos",
        "symbols": [
          "MYTH"
        ],
        "decimals": [
          18
        ],
        "standardAccount": "secp256k1",
        "website": "https://mythos.foundation"
      },
      {
        "prefix": 8888,
        "network": "xcavate",
        "displayName": "Xcavate Protocol",
        "symbols": [
          "XCAV"
        ],
        "decimals": [
          12
        ],
        "standardAccount": "*25519",
        "website": "https://xcavate.io/"
      }
    ];
  }
});

// node_modules/@polkadot/networks/defaults/genesis.js
var knownGenesis;
var init_genesis = __esm({
  "node_modules/@polkadot/networks/defaults/genesis.js"() {
    knownGenesis = {
      acala: [
        "0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"
      ],
      ajuna: [
        "0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"
      ],
      "aleph-node": [
        "0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"
      ],
      astar: [
        "0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"
      ],
      basilisk: [
        "0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"
      ],
      bifrost: [
        "0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"
      ],
      "bifrost-kusama": [
        "0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"
      ],
      bittensor: [
        "0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03"
      ],
      centrifuge: [
        "0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82",
        "0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"
      ],
      cere: [
        "0x81443836a9a24caaa23f1241897d1235717535711d1d3fe24eae4fdc942c092c"
      ],
      composable: [
        "0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"
      ],
      darwinia: [
        "0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"
      ],
      "dock-mainnet": [
        "0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae",
        "0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"
      ],
      edgeware: [
        "0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"
      ],
      enjin: [
        "0xd8761d3c88f26dc12875c00d3165f7d67243d56fc85b4cf19937601a7916e5a9"
      ],
      equilibrium: [
        "0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"
      ],
      genshiro: [
        "0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"
      ],
      hydradx: [
        "0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d",
        // HydraDX Parachain
        "0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc",
        // Snakenet Gen3-1
        "0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9",
        // Snakenet Gen3
        "0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047",
        // Snakenet Gen2
        "0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"
        // Snakenet Gen1
      ],
      "interlay-parachain": [
        "0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"
      ],
      karura: [
        "0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"
      ],
      khala: [
        "0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"
      ],
      kulupu: [
        "0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"
      ],
      kusama: [
        "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe",
        // Kusama CC3,
        "0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636",
        // Kusama CC2
        "0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"
        // Kusama CC1
      ],
      matrixchain: [
        "0x3af4ff48ec76d2efc8476730f423ac07e25ad48f5f4c9dc39c778b164d808615"
      ],
      nodle: [
        "0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"
      ],
      origintrail: [
        "0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"
      ],
      p3d: [
        "0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66"
      ],
      parallel: [
        "0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"
      ],
      pendulum: [
        "0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86"
      ],
      phala: [
        "0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"
      ],
      picasso: [
        "0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc",
        "0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"
      ],
      polkadex: [
        "0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"
      ],
      polkadot: [
        "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"
      ],
      polymesh: [
        "0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"
      ],
      quartz: [
        "0xcd4d732201ebe5d6b014edda071c4203e16867305332301dc8d092044b28e554"
      ],
      rococo: [
        "0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e",
        "0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897",
        "0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770",
        "0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff",
        "0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a",
        "0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9",
        "0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779",
        "0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215",
        "0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9",
        "0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147",
        "0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd",
        "0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"
      ],
      sora: [
        "0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"
      ],
      stafi: [
        "0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"
      ],
      statemine: [
        "0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"
      ],
      statemint: [
        "0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"
      ],
      subsocial: [
        "0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"
      ],
      ternoa: [
        "0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"
      ],
      unique: [
        "0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"
      ],
      vtb: [
        "0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f",
        "0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"
      ],
      westend: [
        "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"
      ],
      xxnetwork: [
        "0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"
      ],
      zeitgeist: [
        "0x1bf2a2ecb4a868de66ea8610f2ce7c8c43706561b6476031315f6640fe38e060"
      ]
    };
  }
});

// node_modules/@polkadot/networks/defaults/icons.js
var knownIcon;
var init_icons = __esm({
  "node_modules/@polkadot/networks/defaults/icons.js"() {
    knownIcon = {
      centrifuge: "polkadot",
      kusama: "polkadot",
      polkadot: "polkadot",
      sora: "polkadot",
      statemine: "polkadot",
      statemint: "polkadot",
      westmint: "polkadot"
    };
  }
});

// node_modules/@polkadot/networks/defaults/ledger.js
var knownLedger;
var init_ledger = __esm({
  "node_modules/@polkadot/networks/defaults/ledger.js"() {
    knownLedger = {
      acala: 787,
      ajuna: 354,
      "aleph-node": 643,
      astar: 810,
      bifrost: 788,
      "bifrost-kusama": 788,
      centrifuge: 747,
      composable: 354,
      darwinia: 354,
      "dock-mainnet": 594,
      edgeware: 523,
      enjin: 1155,
      equilibrium: 99999997,
      genshiro: 99999996,
      hydradx: 354,
      "interlay-parachain": 354,
      karura: 686,
      khala: 434,
      kusama: 434,
      matrixchain: 1155,
      nodle: 1003,
      origintrail: 354,
      parallel: 354,
      pendulum: 354,
      phala: 354,
      picasso: 434,
      polkadex: 799,
      polkadot: 354,
      polymesh: 595,
      quartz: 631,
      sora: 617,
      stafi: 907,
      statemine: 434,
      // common-good on Kusama, shares derivation
      statemint: 354,
      // common-good on Polkadot, shares derivation
      ternoa: 995,
      unique: 661,
      vtb: 694,
      xxnetwork: 1955,
      zeitgeist: 354
    };
  }
});

// node_modules/@polkadot/networks/defaults/testnets.js
var knownTestnet;
var init_testnets = __esm({
  "node_modules/@polkadot/networks/defaults/testnets.js"() {
    knownTestnet = {
      "": true,
      // this is the default non-network entry
      "cess-testnet": true,
      "dock-testnet": true,
      jupiter: true,
      "mathchain-testnet": true,
      p3dt: true,
      subspace_testnet: true,
      "zero-alphaville": true
    };
  }
});

// node_modules/@polkadot/networks/defaults/index.js
var init_defaults = __esm({
  "node_modules/@polkadot/networks/defaults/index.js"() {
    init_genesis();
    init_icons();
    init_ledger();
    init_testnets();
  }
});

// node_modules/@polkadot/networks/interfaces.js
function toExpanded(o) {
  const network = o.network || "";
  const nameParts = network.replace(/_/g, "-").split("-");
  const n = o;
  n.slip44 = knownLedger[network];
  n.hasLedgerSupport = !!n.slip44;
  n.genesisHash = knownGenesis[network] || [];
  n.icon = knownIcon[network] || "substrate";
  n.isTestnet = !!knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
  n.isIgnored = n.isTestnet || !(o.standardAccount && o.decimals?.length && o.symbols?.length) && o.prefix !== 42;
  return n;
}
function filterSelectable({ genesisHash, prefix: prefix2 }) {
  return !!genesisHash.length || prefix2 === 42;
}
function filterAvailable(n) {
  return !n.isIgnored && !!n.network;
}
function sortNetworks(a, b2) {
  const isUnSortedA = UNSORTED.includes(a.prefix);
  const isUnSortedB = UNSORTED.includes(b2.prefix);
  return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b2.displayName) : isUnSortedA ? -1 : 1;
}
var UNSORTED, TESTNETS, allNetworks, availableNetworks, selectableNetworks;
var init_interfaces = __esm({
  "node_modules/@polkadot/networks/interfaces.js"() {
    init_esm2();
    init_defaults();
    UNSORTED = [0, 2, 42];
    TESTNETS = ["testnet"];
    allNetworks = esm_default.map(toExpanded);
    availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks);
    selectableNetworks = availableNetworks.filter(filterSelectable);
  }
});

// node_modules/@polkadot/networks/index.js
var init_networks = __esm({
  "node_modules/@polkadot/networks/index.js"() {
    init_interfaces();
    init_packageInfo15();
  }
});

// node_modules/@polkadot/util-crypto/networks.js
var init_networks2 = __esm({
  "node_modules/@polkadot/util-crypto/networks.js"() {
    init_networks();
  }
});

// node_modules/@polkadot/util-crypto/address/defaults.js
var defaults;
var init_defaults2 = __esm({
  "node_modules/@polkadot/util-crypto/address/defaults.js"() {
    init_networks2();
    defaults = {
      allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
      // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
      allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
      allowedPrefix: availableNetworks.map(({ prefix: prefix2 }) => prefix2),
      prefix: 42
    };
  }
});

// node_modules/@polkadot/util-crypto/address/decode.js
function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
  if (!encoded) {
    throw new Error("Invalid empty address passed");
  }
  if (isU8a(encoded) || isHex(encoded)) {
    return u8aToU8a(encoded);
  }
  try {
    const decoded = base58Decode(encoded);
    if (!defaults.allowedEncodedLengths.includes(decoded.length)) {
      throw new Error("Invalid decoded address length");
    }
    const [isValid, endPos, ss58Length, ss58Decoded] = checkAddressChecksum(decoded);
    if (!isValid && !ignoreChecksum) {
      throw new Error("Invalid decoded address checksum");
    } else if (ss58Format !== -1 && ss58Format !== ss58Decoded) {
      throw new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
    }
    return decoded.slice(ss58Length, endPos);
  } catch (error) {
    throw new Error(`Decoding ${encoded}: ${error.message}`);
  }
}
var init_decode = __esm({
  "node_modules/@polkadot/util-crypto/address/decode.js"() {
    init_util();
    init_base58();
    init_checksum();
    init_defaults2();
  }
});

// node_modules/@polkadot/util-crypto/address/addressToEvm.js
var init_addressToEvm = __esm({
  "node_modules/@polkadot/util-crypto/address/addressToEvm.js"() {
    init_decode();
  }
});

// node_modules/@polkadot/util-crypto/address/check.js
var init_check = __esm({
  "node_modules/@polkadot/util-crypto/address/check.js"() {
    init_base58();
    init_checksum();
    init_defaults2();
  }
});

// node_modules/@polkadot/util-crypto/bn.js
var BN_BE_OPTS, BN_LE_OPTS, BN_BE_32_OPTS, BN_LE_32_OPTS, BN_BE_256_OPTS, BN_LE_256_OPTS;
var init_bn4 = __esm({
  "node_modules/@polkadot/util-crypto/bn.js"() {
    BN_BE_OPTS = { isLe: false };
    BN_LE_OPTS = { isLe: true };
    BN_BE_32_OPTS = { bitLength: 32, isLe: false };
    BN_LE_32_OPTS = { bitLength: 32, isLe: true };
    BN_BE_256_OPTS = { bitLength: 256, isLe: false };
    BN_LE_256_OPTS = { bitLength: 256, isLe: true };
  }
});

// node_modules/@polkadot/util-crypto/key/DeriveJunction.js
var RE_NUMBER, JUNCTION_ID_LEN, DeriveJunction;
var init_DeriveJunction = __esm({
  "node_modules/@polkadot/util-crypto/key/DeriveJunction.js"() {
    init_util();
    init_asU8a();
    init_bn4();
    RE_NUMBER = /^\d+$/;
    JUNCTION_ID_LEN = 32;
    DeriveJunction = class _DeriveJunction {
      __internal__chainCode = new Uint8Array(32);
      __internal__isHard = false;
      static from(value) {
        const result = new _DeriveJunction();
        const [code, isHard] = value.startsWith("/") ? [value.substring(1), true] : [value, false];
        result.soft(RE_NUMBER.test(code) ? new import_bn.default(code, 10) : code);
        return isHard ? result.harden() : result;
      }
      get chainCode() {
        return this.__internal__chainCode;
      }
      get isHard() {
        return this.__internal__isHard;
      }
      get isSoft() {
        return !this.__internal__isHard;
      }
      hard(value) {
        return this.soft(value).harden();
      }
      harden() {
        this.__internal__isHard = true;
        return this;
      }
      soft(value) {
        if (isNumber(value) || isBn(value) || isBigInt(value)) {
          return this.soft(bnToU8a(value, BN_LE_256_OPTS));
        } else if (isHex(value)) {
          return this.soft(hexToU8a(value));
        } else if (isString(value)) {
          return this.soft(compactAddLength(stringToU8a(value)));
        } else if (value.length > JUNCTION_ID_LEN) {
          return this.soft(blake2AsU8a(value));
        }
        this.__internal__chainCode.fill(0);
        this.__internal__chainCode.set(value, 0);
        return this;
      }
      soften() {
        this.__internal__isHard = false;
        return this;
      }
    };
  }
});

// node_modules/@polkadot/util-crypto/key/extractPath.js
function keyExtractPath(derivePath) {
  const parts = derivePath.match(RE_JUNCTION);
  const path = [];
  let constructed = "";
  if (parts) {
    constructed = parts.join("");
    for (const p of parts) {
      path.push(DeriveJunction.from(p.substring(1)));
    }
  }
  if (constructed !== derivePath) {
    throw new Error(`Re-constructed path "${constructed}" does not match input`);
  }
  return {
    parts,
    path
  };
}
var RE_JUNCTION;
var init_extractPath = __esm({
  "node_modules/@polkadot/util-crypto/key/extractPath.js"() {
    init_DeriveJunction();
    RE_JUNCTION = /\/(\/?)([^/]+)/g;
  }
});

// node_modules/@polkadot/util-crypto/key/extractSuri.js
function keyExtractSuri(suri) {
  const matches = suri.match(RE_CAPTURE);
  if (matches === null) {
    throw new Error("Unable to match provided value to a secret URI");
  }
  const [, phrase, , derivePath, , , password] = matches;
  const { path } = keyExtractPath(derivePath);
  return {
    derivePath,
    password,
    path,
    phrase
  };
}
var RE_CAPTURE;
var init_extractSuri = __esm({
  "node_modules/@polkadot/util-crypto/key/extractSuri.js"() {
    init_extractPath();
    RE_CAPTURE = /^(\w+( \w+)*)((\/\/?[^/]+)*)(\/\/\/(.*))?$/;
  }
});

// node_modules/@polkadot/util-crypto/secp256k1/deriveHard.js
function secp256k1DeriveHard(seed, chainCode) {
  if (!isU8a(chainCode) || chainCode.length !== 32) {
    throw new Error("Invalid chainCode passed to derive");
  }
  return blake2AsU8a(u8aConcat(HDKD, seed, chainCode), 256);
}
var HDKD;
var init_deriveHard = __esm({
  "node_modules/@polkadot/util-crypto/secp256k1/deriveHard.js"() {
    init_util();
    init_asU8a();
    HDKD = compactAddLength(stringToU8a("Secp256k1HDKD"));
  }
});

// node_modules/@polkadot/util-crypto/secp256k1/pair/fromSeed.js
function secp256k1PairFromSeed(seed, onlyJs) {
  if (seed.length !== 32) {
    throw new Error("Expected valid 32-byte private key as a seed");
  }
  if (!hasBigInt || !onlyJs && isReady()) {
    const full = secp256k1FromSeed(seed);
    const publicKey2 = full.slice(32);
    if (u8aEmpty(publicKey2)) {
      throw new Error("Invalid publicKey generated from WASM interface");
    }
    return {
      publicKey: publicKey2,
      secretKey: full.slice(0, 32)
    };
  }
  return {
    publicKey: secp256k1.getPublicKey(seed, true),
    secretKey: seed
  };
}
var init_fromSeed = __esm({
  "node_modules/@polkadot/util-crypto/secp256k1/pair/fromSeed.js"() {
    init_secp256k1();
    init_util();
    init_wasm_crypto();
  }
});

// node_modules/@polkadot/util-crypto/key/hdkdDerive.js
function createSeedDeriveFn(fromSeed, derive2) {
  return (keypair, { chainCode, isHard }) => {
    if (!isHard) {
      throw new Error("A soft key was found in the path and is not supported");
    }
    return fromSeed(derive2(keypair.secretKey.subarray(0, 32), chainCode));
  };
}
var init_hdkdDerive = __esm({
  "node_modules/@polkadot/util-crypto/key/hdkdDerive.js"() {
  }
});

// node_modules/@polkadot/util-crypto/key/hdkdEcdsa.js
var keyHdkdEcdsa;
var init_hdkdEcdsa = __esm({
  "node_modules/@polkadot/util-crypto/key/hdkdEcdsa.js"() {
    init_deriveHard();
    init_fromSeed();
    init_hdkdDerive();
    keyHdkdEcdsa = createSeedDeriveFn(secp256k1PairFromSeed, secp256k1DeriveHard);
  }
});

// node_modules/@polkadot/util-crypto/ed25519/deriveHard.js
function ed25519DeriveHard(seed, chainCode) {
  if (!isU8a(chainCode) || chainCode.length !== 32) {
    throw new Error("Invalid chainCode passed to derive");
  }
  return blake2AsU8a(u8aConcat(HDKD2, seed, chainCode));
}
var HDKD2;
var init_deriveHard2 = __esm({
  "node_modules/@polkadot/util-crypto/ed25519/deriveHard.js"() {
    init_util();
    init_asU8a();
    HDKD2 = compactAddLength(stringToU8a("Ed25519HDKD"));
  }
});

// node_modules/@polkadot/util-crypto/random/asU8a.js
function randomAsU8a(length = 32) {
  return getRandomValues(new Uint8Array(length));
}
var randomAsHex;
var init_asU8a2 = __esm({
  "node_modules/@polkadot/util-crypto/random/asU8a.js"() {
    init_browser3();
    init_helpers4();
    randomAsHex = createAsHex(randomAsU8a);
  }
});

// node_modules/@polkadot/util-crypto/random/asNumber.js
var BN_53;
var init_asNumber = __esm({
  "node_modules/@polkadot/util-crypto/random/asNumber.js"() {
    init_util();
    init_asU8a2();
    BN_53 = new import_bn.default(9007199254740991);
  }
});

// node_modules/@polkadot/util-crypto/random/index.js
var init_random = __esm({
  "node_modules/@polkadot/util-crypto/random/index.js"() {
    init_asNumber();
    init_asU8a2();
  }
});

// node_modules/@noble/curves/esm/abstract/edwards.js
function isEdValidXY(Fp2, CURVE, x, y) {
  const x2 = Fp2.sqr(x);
  const y2 = Fp2.sqr(y);
  const left = Fp2.add(Fp2.mul(CURVE.a, x2), y2);
  const right = Fp2.add(Fp2.ONE, Fp2.mul(CURVE.d, Fp2.mul(x2, y2)));
  return Fp2.eql(left, right);
}
function edwards(CURVE, curveOpts = {}) {
  const { Fp: Fp2, Fn: Fn2 } = _createCurveFields("edwards", CURVE, curveOpts);
  const { h: cofactor, n: CURVE_ORDER } = CURVE;
  _validateObject(curveOpts, {}, { uvRatio: "function" });
  const MASK = _2n2 << BigInt(Fn2.BYTES * 8) - _1n2;
  const modP = (n) => Fp2.create(n);
  const uvRatio2 = curveOpts.uvRatio || ((u, v3) => {
    try {
      return { isValid: true, value: Fp2.sqrt(Fp2.div(u, v3)) };
    } catch (e) {
      return { isValid: false, value: _0n2 };
    }
  });
  if (!isEdValidXY(Fp2, CURVE, CURVE.Gx, CURVE.Gy))
    throw new Error("bad curve params: generator point");
  function acoord(title, n, banZero = false) {
    const min2 = banZero ? _1n2 : _0n2;
    aInRange("coordinate " + title, n, min2, MASK);
    return n;
  }
  function aextpoint(other) {
    if (!(other instanceof Point))
      throw new Error("ExtendedPoint expected");
  }
  const toAffineMemo = memoized((p, iz) => {
    const { X: X2, Y, Z: Z2 } = p;
    const is0 = p.is0();
    if (iz == null)
      iz = is0 ? _8n2 : Fp2.inv(Z2);
    const x = modP(X2 * iz);
    const y = modP(Y * iz);
    const zz = Fp2.mul(Z2, iz);
    if (is0)
      return { x: _0n2, y: _1n2 };
    if (zz !== _1n2)
      throw new Error("invZ was invalid");
    return { x, y };
  });
  const assertValidMemo = memoized((p) => {
    const { a, d } = CURVE;
    if (p.is0())
      throw new Error("bad point: ZERO");
    const { X: X2, Y, Z: Z2, T } = p;
    const X22 = modP(X2 * X2);
    const Y2 = modP(Y * Y);
    const Z22 = modP(Z2 * Z2);
    const Z4 = modP(Z22 * Z22);
    const aX2 = modP(X22 * a);
    const left = modP(Z22 * modP(aX2 + Y2));
    const right = modP(Z4 + modP(d * modP(X22 * Y2)));
    if (left !== right)
      throw new Error("bad point: equation left != right (1)");
    const XY = modP(X2 * Y);
    const ZT = modP(Z2 * T);
    if (XY !== ZT)
      throw new Error("bad point: equation left != right (2)");
    return true;
  });
  class Point {
    constructor(X2, Y, Z2, T) {
      this.X = acoord("x", X2);
      this.Y = acoord("y", Y);
      this.Z = acoord("z", Z2, true);
      this.T = acoord("t", T);
      Object.freeze(this);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    // TODO: remove
    get ex() {
      return this.X;
    }
    get ey() {
      return this.Y;
    }
    get ez() {
      return this.Z;
    }
    get et() {
      return this.T;
    }
    static normalizeZ(points) {
      return normalizeZ(Point, points);
    }
    static msm(points, scalars) {
      return pippenger(Point, Fn2, points, scalars);
    }
    _setWindowSize(windowSize) {
      this.precompute(windowSize);
    }
    static fromAffine(p) {
      if (p instanceof Point)
        throw new Error("extended point not allowed");
      const { x, y } = p || {};
      acoord("x", x);
      acoord("y", y);
      return new Point(x, y, _1n2, modP(x * y));
    }
    precompute(windowSize = 8, isLazy = true) {
      wnaf.createCache(this, windowSize);
      if (!isLazy)
        this.multiply(_2n2);
      return this;
    }
    // Useful in fromAffine() - not for fromBytes(), which always created valid points.
    assertValidity() {
      assertValidMemo(this);
    }
    // Compare one point to another.
    equals(other) {
      aextpoint(other);
      const { X: X1, Y: Y1, Z: Z1 } = this;
      const { X: X2, Y: Y2, Z: Z2 } = other;
      const X1Z2 = modP(X1 * Z2);
      const X2Z1 = modP(X2 * Z1);
      const Y1Z2 = modP(Y1 * Z2);
      const Y2Z1 = modP(Y2 * Z1);
      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
    }
    is0() {
      return this.equals(Point.ZERO);
    }
    negate() {
      return new Point(modP(-this.X), this.Y, this.Z, modP(-this.T));
    }
    // Fast algo for doubling Extended Point.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
    // Cost: 4M + 4S + 1*a + 6add + 1*2.
    double() {
      const { a } = CURVE;
      const { X: X1, Y: Y1, Z: Z1 } = this;
      const A2 = modP(X1 * X1);
      const B = modP(Y1 * Y1);
      const C = modP(_2n2 * modP(Z1 * Z1));
      const D = modP(a * A2);
      const x1y1 = X1 + Y1;
      const E2 = modP(modP(x1y1 * x1y1) - A2 - B);
      const G2 = D + B;
      const F2 = G2 - C;
      const H2 = D - B;
      const X3 = modP(E2 * F2);
      const Y3 = modP(G2 * H2);
      const T3 = modP(E2 * H2);
      const Z3 = modP(F2 * G2);
      return new Point(X3, Y3, Z3, T3);
    }
    // Fast algo for adding 2 Extended Points.
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
    // Cost: 9M + 1*a + 1*d + 7add.
    add(other) {
      aextpoint(other);
      const { a, d } = CURVE;
      const { X: X1, Y: Y1, Z: Z1, T: T1 } = this;
      const { X: X2, Y: Y2, Z: Z2, T: T2 } = other;
      const A2 = modP(X1 * X2);
      const B = modP(Y1 * Y2);
      const C = modP(T1 * d * T2);
      const D = modP(Z1 * Z2);
      const E2 = modP((X1 + Y1) * (X2 + Y2) - A2 - B);
      const F2 = D - C;
      const G2 = D + C;
      const H2 = modP(B - a * A2);
      const X3 = modP(E2 * F2);
      const Y3 = modP(G2 * H2);
      const T3 = modP(E2 * H2);
      const Z3 = modP(F2 * G2);
      return new Point(X3, Y3, Z3, T3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    // Constant-time multiplication.
    multiply(scalar) {
      const n = scalar;
      aInRange("scalar", n, _1n2, CURVE_ORDER);
      const { p, f } = wnaf.cached(this, n, (p2) => normalizeZ(Point, p2));
      return normalizeZ(Point, [p, f])[0];
    }
    // Non-constant-time multiplication. Uses double-and-add algorithm.
    // It's faster, but should only be used when you don't care about
    // an exposed private key e.g. sig verification.
    // Does NOT allow scalars higher than CURVE.n.
    // Accepts optional accumulator to merge with multiply (important for sparse scalars)
    multiplyUnsafe(scalar, acc = Point.ZERO) {
      const n = scalar;
      aInRange("scalar", n, _0n2, CURVE_ORDER);
      if (n === _0n2)
        return Point.ZERO;
      if (this.is0() || n === _1n2)
        return this;
      return wnaf.unsafe(this, n, (p) => normalizeZ(Point, p), acc);
    }
    // Checks if point is of small order.
    // If you add something to small order point, you will have "dirty"
    // point with torsion component.
    // Multiplies point by cofactor and checks if the result is 0.
    isSmallOrder() {
      return this.multiplyUnsafe(cofactor).is0();
    }
    // Multiplies point by curve order and checks if the result is 0.
    // Returns `false` is the point is dirty.
    isTorsionFree() {
      return wnaf.unsafe(this, CURVE_ORDER).is0();
    }
    // Converts Extended point to default (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    toAffine(invertedZ) {
      return toAffineMemo(this, invertedZ);
    }
    clearCofactor() {
      if (cofactor === _1n2)
        return this;
      return this.multiplyUnsafe(cofactor);
    }
    static fromBytes(bytes3, zip215 = false) {
      abytes(bytes3);
      return Point.fromHex(bytes3, zip215);
    }
    // Converts hash string or Uint8Array to Point.
    // Uses algo from RFC8032 5.1.3.
    static fromHex(hex2, zip215 = false) {
      const { d, a } = CURVE;
      const len = Fp2.BYTES;
      hex2 = ensureBytes("pointHex", hex2, len);
      abool("zip215", zip215);
      const normed = hex2.slice();
      const lastByte = hex2[len - 1];
      normed[len - 1] = lastByte & ~128;
      const y = bytesToNumberLE(normed);
      const max3 = zip215 ? MASK : Fp2.ORDER;
      aInRange("pointHex.y", y, _0n2, max3);
      const y2 = modP(y * y);
      const u = modP(y2 - _1n2);
      const v3 = modP(d * y2 - a);
      let { isValid, value: x } = uvRatio2(u, v3);
      if (!isValid)
        throw new Error("Point.fromHex: invalid y coordinate");
      const isXOdd = (x & _1n2) === _1n2;
      const isLastByteOdd = (lastByte & 128) !== 0;
      if (!zip215 && x === _0n2 && isLastByteOdd)
        throw new Error("Point.fromHex: x=0 and x_0=1");
      if (isLastByteOdd !== isXOdd)
        x = modP(-x);
      return Point.fromAffine({ x, y });
    }
    toBytes() {
      const { x, y } = this.toAffine();
      const bytes3 = numberToBytesLE(y, Fp2.BYTES);
      bytes3[bytes3.length - 1] |= x & _1n2 ? 128 : 0;
      return bytes3;
    }
    /** @deprecated use `toBytes` */
    toRawBytes() {
      return this.toBytes();
    }
    toHex() {
      return bytesToHex(this.toBytes());
    }
    toString() {
      return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
    }
  }
  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n2, modP(CURVE.Gx * CURVE.Gy));
  Point.ZERO = new Point(_0n2, _1n2, _1n2, _0n2);
  Point.Fp = Fp2;
  Point.Fn = Fn2;
  const wnaf = new wNAF(Point, Fn2.BYTES * 8);
  return Point;
}
function eddsa(Point, cHash, eddsaOpts) {
  if (typeof cHash !== "function")
    throw new Error('"hash" function param is required');
  _validateObject(eddsaOpts, {}, {
    adjustScalarBytes: "function",
    randomBytes: "function",
    domain: "function",
    prehash: "function",
    mapToCurve: "function"
  });
  const { prehash } = eddsaOpts;
  const { BASE: G2, Fp: Fp2, Fn: Fn2 } = Point;
  const CURVE_ORDER = Fn2.ORDER;
  const randomBytes_ = eddsaOpts.randomBytes || randomBytes;
  const adjustScalarBytes2 = eddsaOpts.adjustScalarBytes || ((bytes3) => bytes3);
  const domain = eddsaOpts.domain || ((data, ctx, phflag) => {
    abool("phflag", phflag);
    if (ctx.length || phflag)
      throw new Error("Contexts/pre-hash are not supported");
    return data;
  });
  function modN(a) {
    return Fn2.create(a);
  }
  function modN_LE(hash2) {
    return modN(bytesToNumberLE(hash2));
  }
  function getPrivateScalar(key) {
    const len = Fp2.BYTES;
    key = ensureBytes("private key", key, len);
    const hashed = ensureBytes("hashed private key", cHash(key), 2 * len);
    const head = adjustScalarBytes2(hashed.slice(0, len));
    const prefix2 = hashed.slice(len, 2 * len);
    const scalar = modN_LE(head);
    return { head, prefix: prefix2, scalar };
  }
  function getExtendedPublicKey(secretKey) {
    const { head, prefix: prefix2, scalar } = getPrivateScalar(secretKey);
    const point = G2.multiply(scalar);
    const pointBytes = point.toBytes();
    return { head, prefix: prefix2, scalar, point, pointBytes };
  }
  function getPublicKey(secretKey) {
    return getExtendedPublicKey(secretKey).pointBytes;
  }
  function hashDomainToScalar(context2 = Uint8Array.of(), ...msgs) {
    const msg = concatBytes(...msgs);
    return modN_LE(cHash(domain(msg, ensureBytes("context", context2), !!prehash)));
  }
  function sign2(msg, secretKey, options = {}) {
    msg = ensureBytes("message", msg);
    if (prehash)
      msg = prehash(msg);
    const { prefix: prefix2, scalar, pointBytes } = getExtendedPublicKey(secretKey);
    const r = hashDomainToScalar(options.context, prefix2, msg);
    const R2 = G2.multiply(r).toBytes();
    const k2 = hashDomainToScalar(options.context, R2, pointBytes, msg);
    const s = modN(r + k2 * scalar);
    aInRange("signature.s", s, _0n2, CURVE_ORDER);
    const L2 = Fp2.BYTES;
    const res = concatBytes(R2, numberToBytesLE(s, L2));
    return ensureBytes("result", res, L2 * 2);
  }
  const verifyOpts = { zip215: true };
  function verify(sig2, msg, publicKey2, options = verifyOpts) {
    const { context: context2, zip215 } = options;
    const len = Fp2.BYTES;
    sig2 = ensureBytes("signature", sig2, 2 * len);
    msg = ensureBytes("message", msg);
    publicKey2 = ensureBytes("publicKey", publicKey2, len);
    if (zip215 !== void 0)
      abool("zip215", zip215);
    if (prehash)
      msg = prehash(msg);
    const s = bytesToNumberLE(sig2.slice(len, 2 * len));
    let A2, R2, SB;
    try {
      A2 = Point.fromHex(publicKey2, zip215);
      R2 = Point.fromHex(sig2.slice(0, len), zip215);
      SB = G2.multiplyUnsafe(s);
    } catch (error) {
      return false;
    }
    if (!zip215 && A2.isSmallOrder())
      return false;
    const k2 = hashDomainToScalar(context2, R2.toBytes(), A2.toBytes(), msg);
    const RkA = R2.add(A2.multiplyUnsafe(k2));
    return RkA.subtract(SB).clearCofactor().is0();
  }
  G2.precompute(8);
  const size = Fp2.BYTES;
  const lengths = {
    secret: size,
    public: size,
    signature: 2 * size,
    seed: size
  };
  function randomSecretKey(seed = randomBytes_(lengths.seed)) {
    return seed;
  }
  const utils2 = {
    getExtendedPublicKey,
    /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */
    randomSecretKey,
    isValidSecretKey,
    isValidPublicKey,
    randomPrivateKey: randomSecretKey,
    /**
     * Converts ed public key to x public key. Uses formula:
     * - ed25519:
     *   - `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`
     *   - `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`
     * - ed448:
     *   - `(u, v) = ((y-1)/(y+1), sqrt(156324)*u/x)`
     *   - `(x, y) = (sqrt(156324)*u/v, (1+u)/(1-u))`
     *
     * There is NO `fromMontgomery`:
     * - There are 2 valid ed25519 points for every x25519, with flipped coordinate
     * - Sometimes there are 0 valid ed25519 points, because x25519 *additionally*
     *   accepts inputs on the quadratic twist, which can't be moved to ed25519
     */
    toMontgomery(publicKey2) {
      const { y } = Point.fromBytes(publicKey2);
      const is25519 = size === 32;
      if (!is25519 && size !== 57)
        throw new Error("only defined for 25519 and 448");
      const u = is25519 ? Fp2.div(_1n2 + y, _1n2 - y) : Fp2.div(y - _1n2, y + _1n2);
      return Fp2.toBytes(u);
    },
    toMontgomeryPriv(privateKey) {
      abytes(privateKey, size);
      const hashed = cHash(privateKey.subarray(0, size));
      return adjustScalarBytes2(hashed).subarray(0, size);
    },
    /**
     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
     * values. This slows down first getPublicKey() by milliseconds (see Speed section),
     * but allows to speed-up subsequent getPublicKey() calls up to 20x.
     * @param windowSize 2, 4, 8, 16
     */
    precompute(windowSize = 8, point = Point.BASE) {
      return point.precompute(windowSize, false);
    }
  };
  function keygen(seed) {
    const secretKey = utils2.randomSecretKey(seed);
    return { secretKey, publicKey: getPublicKey(secretKey) };
  }
  function isValidSecretKey(key) {
    try {
      return !!Fn2.fromBytes(key, false);
    } catch (error) {
      return false;
    }
  }
  function isValidPublicKey(key, zip215) {
    try {
      return !!Point.fromBytes(key, zip215);
    } catch (error) {
      return false;
    }
  }
  return Object.freeze({
    keygen,
    getPublicKey,
    sign: sign2,
    verify,
    utils: utils2,
    Point,
    info: { type: "edwards", lengths }
  });
}
function _eddsa_legacy_opts_to_new(c) {
  const CURVE = {
    a: c.a,
    d: c.d,
    p: c.Fp.ORDER,
    n: c.n,
    h: c.h,
    Gx: c.Gx,
    Gy: c.Gy
  };
  const Fp2 = c.Fp;
  const Fn2 = Field(CURVE.n, c.nBitLength, true);
  const curveOpts = { Fp: Fp2, Fn: Fn2, uvRatio: c.uvRatio };
  const eddsaOpts = {
    randomBytes: c.randomBytes,
    adjustScalarBytes: c.adjustScalarBytes,
    domain: c.domain,
    prehash: c.prehash,
    mapToCurve: c.mapToCurve
  };
  return { CURVE, curveOpts, hash: c.hash, eddsaOpts };
}
function _eddsa_new_output_to_legacy(c, eddsa2) {
  const legacy = Object.assign({}, eddsa2, { ExtendedPoint: eddsa2.Point, CURVE: c });
  return legacy;
}
function twistedEdwards(c) {
  const { CURVE, curveOpts, hash: hash2, eddsaOpts } = _eddsa_legacy_opts_to_new(c);
  const Point = edwards(CURVE, curveOpts);
  const EDDSA = eddsa(Point, hash2, eddsaOpts);
  return _eddsa_new_output_to_legacy(c, EDDSA);
}
var _0n2, _1n2, _2n2, _8n2, PrimeEdwardsPoint;
var init_edwards = __esm({
  "node_modules/@noble/curves/esm/abstract/edwards.js"() {
    init_utils3();
    init_curve();
    init_modular();
    _0n2 = BigInt(0);
    _1n2 = BigInt(1);
    _2n2 = BigInt(2);
    _8n2 = BigInt(8);
    PrimeEdwardsPoint = class {
      constructor(ep) {
        this.ep = ep;
      }
      // Static methods that must be implemented by subclasses
      static fromBytes(_bytes) {
        throw new Error("fromBytes must be implemented by subclass");
      }
      static fromHex(_hex) {
        throw new Error("fromHex must be implemented by subclass");
      }
      get x() {
        return this.toAffine().x;
      }
      get y() {
        return this.toAffine().y;
      }
      // Common implementations
      clearCofactor() {
        return this;
      }
      assertValidity() {
        this.ep.assertValidity();
      }
      toAffine(invertedZ) {
        return this.ep.toAffine(invertedZ);
      }
      /** @deprecated use `toBytes` */
      toRawBytes() {
        return this.toBytes();
      }
      toHex() {
        return bytesToHex(this.toBytes());
      }
      toString() {
        return this.toHex();
      }
      isTorsionFree() {
        return true;
      }
      isSmallOrder() {
        return false;
      }
      add(other) {
        this.assertSame(other);
        return this.init(this.ep.add(other.ep));
      }
      subtract(other) {
        this.assertSame(other);
        return this.init(this.ep.subtract(other.ep));
      }
      multiply(scalar) {
        return this.init(this.ep.multiply(scalar));
      }
      multiplyUnsafe(scalar) {
        return this.init(this.ep.multiplyUnsafe(scalar));
      }
      double() {
        return this.init(this.ep.double());
      }
      negate() {
        return this.init(this.ep.negate());
      }
      precompute(windowSize, isLazy) {
        return this.init(this.ep.precompute(windowSize, isLazy));
      }
    };
  }
});

// node_modules/@noble/curves/esm/abstract/montgomery.js
function validateOpts(curve) {
  _validateObject(curve, {
    adjustScalarBytes: "function",
    powPminus2: "function"
  });
  return Object.freeze({ ...curve });
}
function montgomery(curveDef) {
  const CURVE = validateOpts(curveDef);
  const { P: P2, type, adjustScalarBytes: adjustScalarBytes2, powPminus2, randomBytes: rand } = CURVE;
  const is25519 = type === "x25519";
  if (!is25519 && type !== "x448")
    throw new Error("invalid type");
  const randomBytes_ = rand || randomBytes;
  const montgomeryBits = is25519 ? 255 : 448;
  const fieldLen = is25519 ? 32 : 56;
  const Gu = is25519 ? BigInt(9) : BigInt(5);
  const a24 = is25519 ? BigInt(121665) : BigInt(39081);
  const minScalar = is25519 ? _2n3 ** BigInt(254) : _2n3 ** BigInt(447);
  const maxAdded = is25519 ? BigInt(8) * _2n3 ** BigInt(251) - _1n3 : BigInt(4) * _2n3 ** BigInt(445) - _1n3;
  const maxScalar = minScalar + maxAdded + _1n3;
  const modP = (n) => mod(n, P2);
  const GuBytes = encodeU(Gu);
  function encodeU(u) {
    return numberToBytesLE(modP(u), fieldLen);
  }
  function decodeU(u) {
    const _u = ensureBytes("u coordinate", u, fieldLen);
    if (is25519)
      _u[31] &= 127;
    return modP(bytesToNumberLE(_u));
  }
  function decodeScalar(scalar) {
    return bytesToNumberLE(adjustScalarBytes2(ensureBytes("scalar", scalar, fieldLen)));
  }
  function scalarMult(scalar, u) {
    const pu = montgomeryLadder(decodeU(u), decodeScalar(scalar));
    if (pu === _0n3)
      throw new Error("invalid private or public key received");
    return encodeU(pu);
  }
  function scalarMultBase(scalar) {
    return scalarMult(scalar, GuBytes);
  }
  function cswap(swap, x_2, x_3) {
    const dummy = modP(swap * (x_2 - x_3));
    x_2 = modP(x_2 - dummy);
    x_3 = modP(x_3 + dummy);
    return { x_2, x_3 };
  }
  function montgomeryLadder(u, scalar) {
    aInRange("u", u, _0n3, P2);
    aInRange("scalar", scalar, minScalar, maxScalar);
    const k2 = scalar;
    const x_1 = u;
    let x_2 = _1n3;
    let z_2 = _0n3;
    let x_3 = u;
    let z_3 = _1n3;
    let swap = _0n3;
    for (let t = BigInt(montgomeryBits - 1); t >= _0n3; t--) {
      const k_t = k2 >> t & _1n3;
      swap ^= k_t;
      ({ x_2, x_3 } = cswap(swap, x_2, x_3));
      ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));
      swap = k_t;
      const A2 = x_2 + z_2;
      const AA = modP(A2 * A2);
      const B = x_2 - z_2;
      const BB = modP(B * B);
      const E2 = AA - BB;
      const C = x_3 + z_3;
      const D = x_3 - z_3;
      const DA = modP(D * A2);
      const CB = modP(C * B);
      const dacb = DA + CB;
      const da_cb = DA - CB;
      x_3 = modP(dacb * dacb);
      z_3 = modP(x_1 * modP(da_cb * da_cb));
      x_2 = modP(AA * BB);
      z_2 = modP(E2 * (AA + modP(a24 * E2)));
    }
    ({ x_2, x_3 } = cswap(swap, x_2, x_3));
    ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));
    const z2 = powPminus2(z_2);
    return modP(x_2 * z2);
  }
  const randomSecretKey = (seed = randomBytes_(fieldLen)) => seed;
  const utils2 = {
    randomSecretKey,
    randomPrivateKey: randomSecretKey
  };
  function keygen(seed) {
    const secretKey = utils2.randomSecretKey(seed);
    return { secretKey, publicKey: scalarMultBase(secretKey) };
  }
  const lengths = {
    secret: fieldLen,
    public: fieldLen,
    seed: fieldLen
  };
  return {
    keygen,
    getSharedSecret: (secretKey, publicKey2) => scalarMult(secretKey, publicKey2),
    getPublicKey: (secretKey) => scalarMultBase(secretKey),
    scalarMult,
    scalarMultBase,
    utils: utils2,
    GuBytes: GuBytes.slice(),
    info: { type: "montgomery", lengths }
  };
}
var _0n3, _1n3, _2n3;
var init_montgomery = __esm({
  "node_modules/@noble/curves/esm/abstract/montgomery.js"() {
    init_utils3();
    init_modular();
    _0n3 = BigInt(0);
    _1n3 = BigInt(1);
    _2n3 = BigInt(2);
  }
});

// node_modules/@noble/curves/esm/ed25519.js
function ed25519_pow_2_252_3(x) {
  const _10n2 = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);
  const P2 = ed25519_CURVE.p;
  const x2 = x * x % P2;
  const b2 = x2 * x % P2;
  const b4 = pow2(b2, _2n4, P2) * b2 % P2;
  const b5 = pow2(b4, _1n4, P2) * x % P2;
  const b10 = pow2(b5, _5n2, P2) * b5 % P2;
  const b20 = pow2(b10, _10n2, P2) * b10 % P2;
  const b40 = pow2(b20, _20n, P2) * b20 % P2;
  const b80 = pow2(b40, _40n, P2) * b40 % P2;
  const b160 = pow2(b80, _80n, P2) * b80 % P2;
  const b240 = pow2(b160, _80n, P2) * b80 % P2;
  const b250 = pow2(b240, _10n2, P2) * b10 % P2;
  const pow_p_5_8 = pow2(b250, _2n4, P2) * x % P2;
  return { pow_p_5_8, b2 };
}
function adjustScalarBytes(bytes3) {
  bytes3[0] &= 248;
  bytes3[31] &= 127;
  bytes3[31] |= 64;
  return bytes3;
}
function uvRatio(u, v3) {
  const P2 = ed25519_CURVE.p;
  const v32 = mod(v3 * v3 * v3, P2);
  const v7 = mod(v32 * v32 * v3, P2);
  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;
  let x = mod(u * v32 * pow, P2);
  const vx2 = mod(v3 * x * x, P2);
  const root1 = x;
  const root2 = mod(x * ED25519_SQRT_M1, P2);
  const useRoot1 = vx2 === u;
  const useRoot2 = vx2 === mod(-u, P2);
  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P2);
  if (useRoot1)
    x = root1;
  if (useRoot2 || noRoot)
    x = root2;
  if (isNegativeLE(x, P2))
    x = mod(-x, P2);
  return { isValid: useRoot1 || useRoot2, value: x };
}
function ed25519_domain(data, ctx, phflag) {
  if (ctx.length > 255)
    throw new Error("Context is too big");
  return concatBytes(utf8ToBytes("SigEd25519 no Ed25519 collisions"), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);
}
function map_to_curve_elligator2_curve25519(u) {
  const ELL2_C4 = (Fp.ORDER - _5n2) / _8n3;
  const ELL2_J = BigInt(486662);
  let tv1 = Fp.sqr(u);
  tv1 = Fp.mul(tv1, _2n4);
  let xd = Fp.add(tv1, Fp.ONE);
  let x1n = Fp.neg(ELL2_J);
  let tv2 = Fp.sqr(xd);
  let gxd = Fp.mul(tv2, xd);
  let gx1 = Fp.mul(tv1, ELL2_J);
  gx1 = Fp.mul(gx1, x1n);
  gx1 = Fp.add(gx1, tv2);
  gx1 = Fp.mul(gx1, x1n);
  let tv3 = Fp.sqr(gxd);
  tv2 = Fp.sqr(tv3);
  tv3 = Fp.mul(tv3, gxd);
  tv3 = Fp.mul(tv3, gx1);
  tv2 = Fp.mul(tv2, tv3);
  let y11 = Fp.pow(tv2, ELL2_C4);
  y11 = Fp.mul(y11, tv3);
  let y12 = Fp.mul(y11, ELL2_C3);
  tv2 = Fp.sqr(y11);
  tv2 = Fp.mul(tv2, gxd);
  let e1 = Fp.eql(tv2, gx1);
  let y1 = Fp.cmov(y12, y11, e1);
  let x2n = Fp.mul(x1n, tv1);
  let y21 = Fp.mul(y11, u);
  y21 = Fp.mul(y21, ELL2_C2);
  let y22 = Fp.mul(y21, ELL2_C3);
  let gx2 = Fp.mul(gx1, tv1);
  tv2 = Fp.sqr(y21);
  tv2 = Fp.mul(tv2, gxd);
  let e2 = Fp.eql(tv2, gx2);
  let y2 = Fp.cmov(y22, y21, e2);
  tv2 = Fp.sqr(y1);
  tv2 = Fp.mul(tv2, gxd);
  let e3 = Fp.eql(tv2, gx1);
  let xn = Fp.cmov(x2n, x1n, e3);
  let y = Fp.cmov(y2, y1, e3);
  let e4 = Fp.isOdd(y);
  y = Fp.cmov(y, Fp.neg(y), e3 !== e4);
  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n4 };
}
function map_to_curve_elligator2_edwards25519(u) {
  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u);
  let xn = Fp.mul(xMn, yMd);
  xn = Fp.mul(xn, ELL2_C1_EDWARDS);
  let xd = Fp.mul(xMd, yMn);
  let yn = Fp.sub(xMn, xMd);
  let yd = Fp.add(xMn, xMd);
  let tv1 = Fp.mul(xd, yd);
  let e = Fp.eql(tv1, Fp.ZERO);
  xn = Fp.cmov(xn, Fp.ZERO, e);
  xd = Fp.cmov(xd, Fp.ONE, e);
  yn = Fp.cmov(yn, Fp.ONE, e);
  yd = Fp.cmov(yd, Fp.ONE, e);
  const [xd_inv, yd_inv] = FpInvertBatch(Fp, [xd, yd], true);
  return { x: Fp.mul(xn, xd_inv), y: Fp.mul(yn, yd_inv) };
}
function calcElligatorRistrettoMap(r0) {
  const { d } = ed25519.CURVE;
  const P2 = ed25519.CURVE.Fp.ORDER;
  const mod2 = ed25519.CURVE.Fp.create;
  const r = mod2(SQRT_M1 * r0 * r0);
  const Ns = mod2((r + _1n4) * ONE_MINUS_D_SQ);
  let c = BigInt(-1);
  const D = mod2((c - d * r) * mod2(r + d));
  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);
  let s_ = mod2(s * r0);
  if (!isNegativeLE(s_, P2))
    s_ = mod2(-s_);
  if (!Ns_D_is_sq)
    s = s_;
  if (!Ns_D_is_sq)
    c = r;
  const Nt = mod2(c * (r - _1n4) * D_MINUS_ONE_SQ - D);
  const s2 = s * s;
  const W0 = mod2((s + s) * D);
  const W1 = mod2(Nt * SQRT_AD_MINUS_ONE);
  const W2 = mod2(_1n4 - s2);
  const W3 = mod2(_1n4 + s2);
  return new ed25519.Point(mod2(W0 * W3), mod2(W2 * W1), mod2(W1 * W3), mod2(W0 * W2));
}
function ristretto255_map(bytes3) {
  abytes(bytes3, 64);
  const r1 = bytes255ToNumberLE(bytes3.subarray(0, 32));
  const R1 = calcElligatorRistrettoMap(r1);
  const r2 = bytes255ToNumberLE(bytes3.subarray(32, 64));
  const R2 = calcElligatorRistrettoMap(r2);
  return new _RistrettoPoint(R1.add(R2));
}
var _0n4, _1n4, _2n4, _3n2, _5n2, _8n3, ed25519_CURVE, ED25519_SQRT_M1, Fp, Fn, ed25519Defaults, ed25519, ed25519ctx, ed25519ph, x25519, ELL2_C1, ELL2_C2, ELL2_C3, ELL2_C1_EDWARDS, ed25519_hasher, SQRT_M1, SQRT_AD_MINUS_ONE, INVSQRT_A_MINUS_D, ONE_MINUS_D_SQ, D_MINUS_ONE_SQ, invertSqrt, MAX_255B, bytes255ToNumberLE, _RistrettoPoint, ristretto255_hasher, hashToCurve, encodeToCurve, hashToRistretto255, hash_to_ristretto255;
var init_ed25519 = __esm({
  "node_modules/@noble/curves/esm/ed25519.js"() {
    init_sha2();
    init_utils2();
    init_curve();
    init_edwards();
    init_hash_to_curve();
    init_modular();
    init_montgomery();
    init_utils3();
    _0n4 = BigInt(0);
    _1n4 = BigInt(1);
    _2n4 = BigInt(2);
    _3n2 = BigInt(3);
    _5n2 = BigInt(5);
    _8n3 = BigInt(8);
    ed25519_CURVE = {
      p: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed"),
      n: BigInt("0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed"),
      h: _8n3,
      a: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec"),
      d: BigInt("0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3"),
      Gx: BigInt("0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a"),
      Gy: BigInt("0x6666666666666666666666666666666666666666666666666666666666666658")
    };
    ED25519_SQRT_M1 = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
    Fp = (() => Field(ed25519_CURVE.p, { isLE: true }))();
    Fn = (() => Field(ed25519_CURVE.n, { isLE: true }))();
    ed25519Defaults = (() => ({
      ...ed25519_CURVE,
      Fp,
      hash: sha512,
      adjustScalarBytes,
      // dom2
      // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
      // Constant-time, u/√v
      uvRatio
    }))();
    ed25519 = (() => twistedEdwards(ed25519Defaults))();
    ed25519ctx = (() => twistedEdwards({
      ...ed25519Defaults,
      domain: ed25519_domain
    }))();
    ed25519ph = (() => twistedEdwards(Object.assign({}, ed25519Defaults, {
      domain: ed25519_domain,
      prehash: sha512
    })))();
    x25519 = (() => {
      const P2 = ed25519_CURVE.p;
      return montgomery({
        P: P2,
        type: "x25519",
        powPminus2: (x) => {
          const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);
          return mod(pow2(pow_p_5_8, _3n2, P2) * b2, P2);
        },
        adjustScalarBytes
      });
    })();
    ELL2_C1 = (() => (Fp.ORDER + _3n2) / _8n3)();
    ELL2_C2 = (() => Fp.pow(_2n4, ELL2_C1))();
    ELL2_C3 = (() => Fp.sqrt(Fp.neg(Fp.ONE)))();
    ELL2_C1_EDWARDS = (() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))();
    ed25519_hasher = (() => createHasher(ed25519.Point, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {
      DST: "edwards25519_XMD:SHA-512_ELL2_RO_",
      encodeDST: "edwards25519_XMD:SHA-512_ELL2_NU_",
      p: Fp.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha512
    }))();
    SQRT_M1 = ED25519_SQRT_M1;
    SQRT_AD_MINUS_ONE = BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235");
    INVSQRT_A_MINUS_D = BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578");
    ONE_MINUS_D_SQ = BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838");
    D_MINUS_ONE_SQ = BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952");
    invertSqrt = (number2) => uvRatio(_1n4, number2);
    MAX_255B = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    bytes255ToNumberLE = (bytes3) => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes3) & MAX_255B);
    _RistrettoPoint = class __RistrettoPoint extends PrimeEdwardsPoint {
      constructor(ep) {
        super(ep);
      }
      static fromAffine(ap) {
        return new __RistrettoPoint(ed25519.Point.fromAffine(ap));
      }
      assertSame(other) {
        if (!(other instanceof __RistrettoPoint))
          throw new Error("RistrettoPoint expected");
      }
      init(ep) {
        return new __RistrettoPoint(ep);
      }
      /** @deprecated use `import { ristretto255_hasher } from '@noble/curves/ed25519.js';` */
      static hashToCurve(hex2) {
        return ristretto255_map(ensureBytes("ristrettoHash", hex2, 64));
      }
      static fromBytes(bytes3) {
        abytes(bytes3, 32);
        const { a, d } = ed25519.CURVE;
        const P2 = Fp.ORDER;
        const mod2 = Fp.create;
        const s = bytes255ToNumberLE(bytes3);
        if (!equalBytes(numberToBytesLE(s, 32), bytes3) || isNegativeLE(s, P2))
          throw new Error("invalid ristretto255 encoding 1");
        const s2 = mod2(s * s);
        const u1 = mod2(_1n4 + a * s2);
        const u2 = mod2(_1n4 - a * s2);
        const u1_2 = mod2(u1 * u1);
        const u2_2 = mod2(u2 * u2);
        const v3 = mod2(a * d * u1_2 - u2_2);
        const { isValid, value: I2 } = invertSqrt(mod2(v3 * u2_2));
        const Dx = mod2(I2 * u2);
        const Dy = mod2(I2 * Dx * v3);
        let x = mod2((s + s) * Dx);
        if (isNegativeLE(x, P2))
          x = mod2(-x);
        const y = mod2(u1 * Dy);
        const t = mod2(x * y);
        if (!isValid || isNegativeLE(t, P2) || y === _0n4)
          throw new Error("invalid ristretto255 encoding 2");
        return new __RistrettoPoint(new ed25519.Point(x, y, _1n4, t));
      }
      /**
       * Converts ristretto-encoded string to ristretto point.
       * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-decode).
       * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding
       */
      static fromHex(hex2) {
        return __RistrettoPoint.fromBytes(ensureBytes("ristrettoHex", hex2, 32));
      }
      static msm(points, scalars) {
        return pippenger(__RistrettoPoint, ed25519.Point.Fn, points, scalars);
      }
      /**
       * Encodes ristretto point to Uint8Array.
       * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-encode).
       */
      toBytes() {
        let { X: X2, Y, Z: Z2, T } = this.ep;
        const P2 = Fp.ORDER;
        const mod2 = Fp.create;
        const u1 = mod2(mod2(Z2 + Y) * mod2(Z2 - Y));
        const u2 = mod2(X2 * Y);
        const u2sq = mod2(u2 * u2);
        const { value: invsqrt } = invertSqrt(mod2(u1 * u2sq));
        const D1 = mod2(invsqrt * u1);
        const D2 = mod2(invsqrt * u2);
        const zInv = mod2(D1 * D2 * T);
        let D;
        if (isNegativeLE(T * zInv, P2)) {
          let _x = mod2(Y * SQRT_M1);
          let _y = mod2(X2 * SQRT_M1);
          X2 = _x;
          Y = _y;
          D = mod2(D1 * INVSQRT_A_MINUS_D);
        } else {
          D = D2;
        }
        if (isNegativeLE(X2 * zInv, P2))
          Y = mod2(-Y);
        let s = mod2((Z2 - Y) * D);
        if (isNegativeLE(s, P2))
          s = mod2(-s);
        return numberToBytesLE(s, 32);
      }
      /**
       * Compares two Ristretto points.
       * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-equals).
       */
      equals(other) {
        this.assertSame(other);
        const { X: X1, Y: Y1 } = this.ep;
        const { X: X2, Y: Y2 } = other.ep;
        const mod2 = Fp.create;
        const one = mod2(X1 * Y2) === mod2(Y1 * X2);
        const two = mod2(Y1 * Y2) === mod2(X1 * X2);
        return one || two;
      }
      is0() {
        return this.equals(__RistrettoPoint.ZERO);
      }
    };
    _RistrettoPoint.BASE = (() => new _RistrettoPoint(ed25519.Point.BASE))();
    _RistrettoPoint.ZERO = (() => new _RistrettoPoint(ed25519.Point.ZERO))();
    _RistrettoPoint.Fp = Fp;
    _RistrettoPoint.Fn = Fn;
    ristretto255_hasher = {
      hashToCurve(msg, options) {
        const DST = options?.DST || "ristretto255_XMD:SHA-512_R255MAP_RO_";
        return ristretto255_map(expand_message_xmd(msg, DST, 64, sha512));
      },
      hashToScalar(msg, options = { DST: _DST_scalar }) {
        return Fn.create(bytesToNumberLE(expand_message_xmd(msg, options.DST, 64, sha512)));
      }
    };
    hashToCurve = (() => ed25519_hasher.hashToCurve)();
    encodeToCurve = (() => ed25519_hasher.encodeToCurve)();
    hashToRistretto255 = (() => ristretto255_hasher.hashToCurve)();
    hash_to_ristretto255 = (() => ristretto255_hasher.hashToCurve)();
  }
});

// node_modules/@polkadot/util-crypto/ed25519/pair/fromSeed.js
function ed25519PairFromSeed(seed, onlyJs) {
  if (!hasBigInt || !onlyJs && isReady()) {
    const full = ed25519KeypairFromSeed(seed);
    return {
      publicKey: full.slice(32),
      secretKey: full.slice(0, 64)
    };
  }
  const publicKey2 = ed25519.getPublicKey(seed);
  return {
    publicKey: publicKey2,
    secretKey: u8aConcatStrict([seed, publicKey2])
  };
}
var init_fromSeed2 = __esm({
  "node_modules/@polkadot/util-crypto/ed25519/pair/fromSeed.js"() {
    init_ed25519();
    init_util();
    init_wasm_crypto();
  }
});

// node_modules/@polkadot/util-crypto/ed25519/pair/fromRandom.js
var init_fromRandom = __esm({
  "node_modules/@polkadot/util-crypto/ed25519/pair/fromRandom.js"() {
    init_random();
    init_fromSeed2();
  }
});

// node_modules/@polkadot/util-crypto/ed25519/pair/fromSecret.js
var init_fromSecret = __esm({
  "node_modules/@polkadot/util-crypto/ed25519/pair/fromSecret.js"() {
  }
});

// node_modules/@polkadot/util-crypto/ed25519/pair/fromString.js
var init_fromString = __esm({
  "node_modules/@polkadot/util-crypto/ed25519/pair/fromString.js"() {
    init_util();
    init_asU8a();
    init_fromSeed2();
  }
});

// node_modules/@polkadot/util-crypto/ed25519/sign.js
function ed25519Sign2(message, { publicKey: publicKey2, secretKey }, onlyJs) {
  if (!secretKey) {
    throw new Error("Expected a valid secretKey");
  } else if (!publicKey2) {
    throw new Error("Expected a valid publicKey");
  }
  const messageU8a = u8aToU8a(message);
  const privateU8a = secretKey.subarray(0, 32);
  return !hasBigInt || !onlyJs && isReady() ? ed25519Sign(publicKey2, privateU8a, messageU8a) : ed25519.sign(messageU8a, privateU8a);
}
var init_sign = __esm({
  "node_modules/@polkadot/util-crypto/ed25519/sign.js"() {
    init_ed25519();
    init_util();
    init_wasm_crypto();
  }
});

// node_modules/@polkadot/util-crypto/ed25519/verify.js
function ed25519Verify2(message, signature, publicKey2, onlyJs) {
  const messageU8a = u8aToU8a(message);
  const publicKeyU8a = u8aToU8a(publicKey2);
  const signatureU8a = u8aToU8a(signature);
  if (publicKeyU8a.length !== 32) {
    throw new Error(`Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);
  } else if (signatureU8a.length !== 64) {
    throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  }
  try {
    return !hasBigInt || !onlyJs && isReady() ? ed25519Verify(signatureU8a, messageU8a, publicKeyU8a) : ed25519.verify(signatureU8a, messageU8a, publicKeyU8a);
  } catch {
    return false;
  }
}
var init_verify = __esm({
  "node_modules/@polkadot/util-crypto/ed25519/verify.js"() {
    init_ed25519();
    init_util();
    init_wasm_crypto();
  }
});

// node_modules/@polkadot/util-crypto/ed25519/index.js
var init_ed255192 = __esm({
  "node_modules/@polkadot/util-crypto/ed25519/index.js"() {
    init_deriveHard2();
    init_fromRandom();
    init_fromSecret();
    init_fromSeed2();
    init_fromString();
    init_sign();
    init_verify();
  }
});

// node_modules/@polkadot/util-crypto/key/hdkdEd25519.js
var keyHdkdEd25519;
var init_hdkdEd25519 = __esm({
  "node_modules/@polkadot/util-crypto/key/hdkdEd25519.js"() {
    init_ed255192();
    init_hdkdDerive();
    keyHdkdEd25519 = createSeedDeriveFn(ed25519PairFromSeed, ed25519DeriveHard);
  }
});

// node_modules/@polkadot/util-crypto/sr25519/pair/fromU8a.js
function sr25519PairFromU8a(full) {
  const fullU8a = u8aToU8a(full);
  if (fullU8a.length !== TOT_LEN) {
    throw new Error(`Expected keypair with ${TOT_LEN} bytes, found ${fullU8a.length}`);
  }
  return {
    publicKey: fullU8a.slice(SEC_LEN, TOT_LEN),
    secretKey: fullU8a.slice(0, SEC_LEN)
  };
}
var SEC_LEN, PUB_LEN, TOT_LEN;
var init_fromU8a2 = __esm({
  "node_modules/@polkadot/util-crypto/sr25519/pair/fromU8a.js"() {
    init_util();
    SEC_LEN = 64;
    PUB_LEN = 32;
    TOT_LEN = SEC_LEN + PUB_LEN;
  }
});

// node_modules/@polkadot/util-crypto/sr25519/pair/toU8a.js
function sr25519KeypairToU8a({ publicKey: publicKey2, secretKey }) {
  return u8aConcat(secretKey, publicKey2).slice();
}
var init_toU8a10 = __esm({
  "node_modules/@polkadot/util-crypto/sr25519/pair/toU8a.js"() {
    init_util();
  }
});

// node_modules/@polkadot/util-crypto/sr25519/derive.js
function createDeriveFn(derive2) {
  return (keypair, chainCode) => {
    if (!isU8a(chainCode) || chainCode.length !== 32) {
      throw new Error("Invalid chainCode passed to derive");
    }
    return sr25519PairFromU8a(derive2(sr25519KeypairToU8a(keypair), chainCode));
  };
}
var init_derive = __esm({
  "node_modules/@polkadot/util-crypto/sr25519/derive.js"() {
    init_util();
    init_fromU8a2();
    init_toU8a10();
  }
});

// node_modules/@polkadot/util-crypto/sr25519/deriveHard.js
var sr25519DeriveHard;
var init_deriveHard3 = __esm({
  "node_modules/@polkadot/util-crypto/sr25519/deriveHard.js"() {
    init_wasm_crypto();
    init_derive();
    sr25519DeriveHard = createDeriveFn(sr25519DeriveKeypairHard);
  }
});

// node_modules/@polkadot/util-crypto/sr25519/deriveSoft.js
var sr25519DeriveSoft;
var init_deriveSoft = __esm({
  "node_modules/@polkadot/util-crypto/sr25519/deriveSoft.js"() {
    init_wasm_crypto();
    init_derive();
    sr25519DeriveSoft = createDeriveFn(sr25519DeriveKeypairSoft);
  }
});

// node_modules/@polkadot/util-crypto/key/hdkdSr25519.js
function keyHdkdSr25519(keypair, { chainCode, isSoft }) {
  return isSoft ? sr25519DeriveSoft(keypair, chainCode) : sr25519DeriveHard(keypair, chainCode);
}
var init_hdkdSr25519 = __esm({
  "node_modules/@polkadot/util-crypto/key/hdkdSr25519.js"() {
    init_deriveHard3();
    init_deriveSoft();
  }
});

// node_modules/@polkadot/util-crypto/key/fromPath.js
function keyFromPath(pair, path, type) {
  const keyHdkd = generators[type];
  let result = pair;
  for (const junction of path) {
    result = keyHdkd(result, junction);
  }
  return result;
}
var generators;
var init_fromPath = __esm({
  "node_modules/@polkadot/util-crypto/key/fromPath.js"() {
    init_hdkdEcdsa();
    init_hdkdEd25519();
    init_hdkdSr25519();
    generators = {
      ecdsa: keyHdkdEcdsa,
      ed25519: keyHdkdEd25519,
      // FIXME This is Substrate-compatible, not Ethereum-compatible
      ethereum: keyHdkdEcdsa,
      sr25519: keyHdkdSr25519
    };
  }
});

// node_modules/@polkadot/util-crypto/key/index.js
var init_key = __esm({
  "node_modules/@polkadot/util-crypto/key/index.js"() {
    init_extractPath();
    init_extractSuri();
    init_fromPath();
    init_hdkdEcdsa();
    init_hdkdEd25519();
    init_hdkdSr25519();
  }
});

// node_modules/@polkadot/util-crypto/sr25519/agreement.js
var init_agreement = __esm({
  "node_modules/@polkadot/util-crypto/sr25519/agreement.js"() {
    init_util();
    init_wasm_crypto();
  }
});

// node_modules/@polkadot/util-crypto/sr25519/derivePublic.js
var init_derivePublic = __esm({
  "node_modules/@polkadot/util-crypto/sr25519/derivePublic.js"() {
    init_util();
    init_wasm_crypto();
  }
});

// node_modules/@polkadot/util-crypto/sr25519/pair/fromSeed.js
function sr25519PairFromSeed(seed) {
  const seedU8a = u8aToU8a(seed);
  if (seedU8a.length !== 32) {
    throw new Error(`Expected a seed matching 32 bytes, found ${seedU8a.length}`);
  }
  return sr25519PairFromU8a(sr25519KeypairFromSeed(seedU8a));
}
var init_fromSeed3 = __esm({
  "node_modules/@polkadot/util-crypto/sr25519/pair/fromSeed.js"() {
    init_util();
    init_wasm_crypto();
    init_fromU8a2();
  }
});

// node_modules/@polkadot/util-crypto/sr25519/sign.js
function sr25519Sign2(message, { publicKey: publicKey2, secretKey }) {
  if (publicKey2?.length !== 32) {
    throw new Error("Expected a valid publicKey, 32-bytes");
  } else if (secretKey?.length !== 64) {
    throw new Error("Expected a valid secretKey, 64-bytes");
  }
  return sr25519Sign(publicKey2, secretKey, u8aToU8a(message));
}
var init_sign2 = __esm({
  "node_modules/@polkadot/util-crypto/sr25519/sign.js"() {
    init_util();
    init_wasm_crypto();
  }
});

// node_modules/@polkadot/util-crypto/sr25519/verify.js
function sr25519Verify2(message, signature, publicKey2) {
  const publicKeyU8a = u8aToU8a(publicKey2);
  const signatureU8a = u8aToU8a(signature);
  if (publicKeyU8a.length !== 32) {
    throw new Error(`Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
  } else if (signatureU8a.length !== 64) {
    throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  }
  return sr25519Verify(signatureU8a, u8aToU8a(message), publicKeyU8a);
}
var init_verify2 = __esm({
  "node_modules/@polkadot/util-crypto/sr25519/verify.js"() {
    init_util();
    init_wasm_crypto();
  }
});

// node_modules/@polkadot/util-crypto/sr25519/vrfSign.js
function sr25519VrfSign(message, { secretKey }, context2 = EMPTY_U8A, extra = EMPTY_U8A) {
  if (secretKey?.length !== 64) {
    throw new Error("Invalid secretKey, expected 64-bytes");
  }
  return vrfSign(secretKey, u8aToU8a(context2), u8aToU8a(message), u8aToU8a(extra));
}
var EMPTY_U8A;
var init_vrfSign = __esm({
  "node_modules/@polkadot/util-crypto/sr25519/vrfSign.js"() {
    init_util();
    init_wasm_crypto();
    EMPTY_U8A = new Uint8Array();
  }
});

// node_modules/@polkadot/util-crypto/sr25519/vrfVerify.js
function sr25519VrfVerify(message, signOutput, publicKey2, context2 = EMPTY_U8A2, extra = EMPTY_U8A2) {
  const publicKeyU8a = u8aToU8a(publicKey2);
  const proofU8a = u8aToU8a(signOutput);
  if (publicKeyU8a.length !== 32) {
    throw new Error("Invalid publicKey, expected 32-bytes");
  } else if (proofU8a.length !== 96) {
    throw new Error("Invalid vrfSign output, expected 96 bytes");
  }
  return vrfVerify(publicKeyU8a, u8aToU8a(context2), u8aToU8a(message), u8aToU8a(extra), proofU8a);
}
var EMPTY_U8A2;
var init_vrfVerify = __esm({
  "node_modules/@polkadot/util-crypto/sr25519/vrfVerify.js"() {
    init_util();
    init_wasm_crypto();
    EMPTY_U8A2 = new Uint8Array();
  }
});

// node_modules/@polkadot/util-crypto/sr25519/index.js
var init_sr25519 = __esm({
  "node_modules/@polkadot/util-crypto/sr25519/index.js"() {
    init_agreement();
    init_deriveHard3();
    init_derivePublic();
    init_deriveSoft();
    init_fromSeed3();
    init_sign2();
    init_verify2();
    init_vrfSign();
    init_vrfVerify();
  }
});

// node_modules/@polkadot/util-crypto/address/encode.js
function encodeAddress(key, ss58Format = defaults.prefix) {
  const u8a = decodeAddress(key);
  if (ss58Format < 0 || ss58Format > 16383 || [46, 47].includes(ss58Format)) {
    throw new Error("Out of range ss58Format specified");
  } else if (!defaults.allowedDecodedLengths.includes(u8a.length)) {
    throw new Error(`Expected a valid key to convert, with length ${defaults.allowedDecodedLengths.join(", ")}`);
  }
  const input = u8aConcat(ss58Format < 64 ? [ss58Format] : [
    (ss58Format & 252) >> 2 | 64,
    ss58Format >> 8 | (ss58Format & 3) << 6
  ], u8a);
  return base58Encode(u8aConcat(input, sshash(input).subarray(0, [32, 33].includes(u8a.length) ? 2 : 1)));
}
var init_encode = __esm({
  "node_modules/@polkadot/util-crypto/address/encode.js"() {
    init_util();
    init_base58();
    init_decode();
    init_defaults2();
    init_sshash();
  }
});

// node_modules/@polkadot/util-crypto/address/derive.js
var init_derive2 = __esm({
  "node_modules/@polkadot/util-crypto/address/derive.js"() {
    init_key();
    init_sr25519();
    init_decode();
    init_encode();
  }
});

// node_modules/@polkadot/util-crypto/address/keyDerived.js
var PREFIX;
var init_keyDerived = __esm({
  "node_modules/@polkadot/util-crypto/address/keyDerived.js"() {
    init_util();
    init_asU8a();
    init_bn4();
    init_decode();
    PREFIX = stringToU8a("modlpy/utilisuba");
  }
});

// node_modules/@polkadot/util-crypto/address/encodeDerived.js
var init_encodeDerived = __esm({
  "node_modules/@polkadot/util-crypto/address/encodeDerived.js"() {
    init_decode();
    init_encode();
    init_keyDerived();
  }
});

// node_modules/@polkadot/util-crypto/address/util.js
var init_util2 = __esm({
  "node_modules/@polkadot/util-crypto/address/util.js"() {
    init_decode();
  }
});

// node_modules/@polkadot/util-crypto/address/keyMulti.js
var PREFIX2;
var init_keyMulti = __esm({
  "node_modules/@polkadot/util-crypto/address/keyMulti.js"() {
    init_util();
    init_asU8a();
    init_bn4();
    init_util2();
    PREFIX2 = stringToU8a("modlpy/utilisuba");
  }
});

// node_modules/@polkadot/util-crypto/address/encodeMulti.js
var init_encodeMulti = __esm({
  "node_modules/@polkadot/util-crypto/address/encodeMulti.js"() {
    init_encode();
    init_keyMulti();
  }
});

// node_modules/@polkadot/util-crypto/address/eq.js
var init_eq2 = __esm({
  "node_modules/@polkadot/util-crypto/address/eq.js"() {
    init_util();
    init_decode();
  }
});

// node_modules/@polkadot/util-crypto/blake2/index.js
var init_blake2 = __esm({
  "node_modules/@polkadot/util-crypto/blake2/index.js"() {
    init_asU8a();
  }
});

// node_modules/@noble/hashes/esm/sha3.js
function keccakP(s, rounds = 24) {
  const B = new Uint32Array(5 * 2);
  for (let round = 24 - rounds; round < 24; round++) {
    for (let x = 0; x < 10; x++)
      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
    for (let x = 0; x < 10; x += 2) {
      const idx1 = (x + 8) % 10;
      const idx0 = (x + 2) % 10;
      const B0 = B[idx0];
      const B1 = B[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
      for (let y = 0; y < 50; y += 10) {
        s[x + y] ^= Th;
        s[x + y + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL[t];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y = 0; y < 50; y += 10) {
      for (let x = 0; x < 10; x++)
        B[x] = s[y + x];
      for (let x = 0; x < 10; x++)
        s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H[round];
    s[1] ^= SHA3_IOTA_L[round];
  }
  B.fill(0);
}
var SHA3_PI, SHA3_ROTL, _SHA3_IOTA, _0n5, _1n5, _2n5, _7n2, _256n, _0x71n, SHA3_IOTA_H, SHA3_IOTA_L, rotlH, rotlL, Keccak, gen, sha3_224, sha3_256, sha3_384, sha3_512, keccak_224, keccak_256, keccak_384, keccak_512, genShake, shake128, shake256;
var init_sha3 = __esm({
  "node_modules/@noble/hashes/esm/sha3.js"() {
    init_assert();
    init_u64();
    init_utils();
    SHA3_PI = [];
    SHA3_ROTL = [];
    _SHA3_IOTA = [];
    _0n5 = BigInt(0);
    _1n5 = BigInt(1);
    _2n5 = BigInt(2);
    _7n2 = BigInt(7);
    _256n = BigInt(256);
    _0x71n = BigInt(113);
    for (let round = 0, R2 = _1n5, x = 1, y = 0; round < 24; round++) {
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI.push(2 * (5 * y + x));
      SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
      let t = _0n5;
      for (let j3 = 0; j3 < 7; j3++) {
        R2 = (R2 << _1n5 ^ (R2 >> _7n2) * _0x71n) % _256n;
        if (R2 & _2n5)
          t ^= _1n5 << (_1n5 << BigInt(j3)) - _1n5;
      }
      _SHA3_IOTA.push(t);
    }
    [SHA3_IOTA_H, SHA3_IOTA_L] = split(_SHA3_IOTA, true);
    rotlH = (h2, l17, s) => s > 32 ? rotlBH(h2, l17, s) : rotlSH(h2, l17, s);
    rotlL = (h2, l17, s) => s > 32 ? rotlBL(h2, l17, s) : rotlSL(h2, l17, s);
    Keccak = class _Keccak extends Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        number(outputLen);
        if (0 >= this.blockLen || this.blockLen >= 200)
          throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = u32(this.state);
      }
      keccak() {
        if (!isLE)
          byteSwap32(this.state32);
        keccakP(this.state32, this.rounds);
        if (!isLE)
          byteSwap32(this.state32);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        exists(this);
        const { blockLen, state } = this;
        data = toBytes(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take2 = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take2; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        exists(this, false);
        bytes(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take2 = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take2), pos);
          this.posOut += take2;
          pos += take2;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes3) {
        number(bytes3);
        return this.xofInto(new Uint8Array(bytes3));
      }
      digestInto(out) {
        output(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        this.state.fill(0);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    };
    gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
    sha3_224 = gen(6, 144, 224 / 8);
    sha3_256 = gen(6, 136, 256 / 8);
    sha3_384 = gen(6, 104, 384 / 8);
    sha3_512 = gen(6, 72, 512 / 8);
    keccak_224 = gen(1, 144, 224 / 8);
    keccak_256 = gen(1, 136, 256 / 8);
    keccak_384 = gen(1, 104, 384 / 8);
    keccak_512 = gen(1, 72, 512 / 8);
    genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
    shake128 = genShake(31, 168, 128 / 8);
    shake256 = genShake(31, 136, 256 / 8);
  }
});

// node_modules/@polkadot/util-crypto/keccak/asU8a.js
var keccakAsU8a, keccak256AsU8a, keccak512AsU8a, keccakAsHex;
var init_asU8a3 = __esm({
  "node_modules/@polkadot/util-crypto/keccak/asU8a.js"() {
    init_sha3();
    init_wasm_crypto();
    init_helpers4();
    keccakAsU8a = createDualHasher({ 256: keccak256, 512: keccak512 }, { 256: keccak_256, 512: keccak_512 });
    keccak256AsU8a = createBitHasher(256, keccakAsU8a);
    keccak512AsU8a = createBitHasher(512, keccakAsU8a);
    keccakAsHex = createAsHex(keccakAsU8a);
  }
});

// node_modules/@polkadot/util-crypto/keccak/index.js
var init_keccak = __esm({
  "node_modules/@polkadot/util-crypto/keccak/index.js"() {
    init_asU8a3();
  }
});

// node_modules/@polkadot/util-crypto/secp256k1/hasher.js
function hasher(hashType, data, onlyJs) {
  return hashType === "keccak" ? keccakAsU8a(data, void 0, onlyJs) : blake2AsU8a(data, void 0, void 0, onlyJs);
}
var init_hasher = __esm({
  "node_modules/@polkadot/util-crypto/secp256k1/hasher.js"() {
    init_blake2();
    init_keccak();
  }
});

// node_modules/@polkadot/util-crypto/address/evmToAddress.js
var init_evmToAddress = __esm({
  "node_modules/@polkadot/util-crypto/address/evmToAddress.js"() {
    init_util();
    init_hasher();
    init_encode();
  }
});

// node_modules/@polkadot/util-crypto/address/validate.js
var init_validate = __esm({
  "node_modules/@polkadot/util-crypto/address/validate.js"() {
    init_decode();
  }
});

// node_modules/@polkadot/util-crypto/address/is.js
var init_is2 = __esm({
  "node_modules/@polkadot/util-crypto/address/is.js"() {
    init_validate();
  }
});

// node_modules/@polkadot/util-crypto/address/sort.js
var init_sort = __esm({
  "node_modules/@polkadot/util-crypto/address/sort.js"() {
    init_util();
    init_encode();
    init_util2();
  }
});

// node_modules/@polkadot/util-crypto/address/setSS58Format.js
var l;
var init_setSS58Format = __esm({
  "node_modules/@polkadot/util-crypto/address/setSS58Format.js"() {
    init_util();
    init_defaults2();
    l = logger("setSS58Format");
  }
});

// node_modules/@polkadot/util-crypto/address/index.js
var init_address = __esm({
  "node_modules/@polkadot/util-crypto/address/index.js"() {
    init_addressToEvm();
    init_check();
    init_checksum();
    init_decode();
    init_derive2();
    init_encode();
    init_encodeDerived();
    init_encodeMulti();
    init_eq2();
    init_evmToAddress();
    init_is2();
    init_keyDerived();
    init_keyMulti();
    init_sort();
    init_validate();
    init_setSS58Format();
  }
});

// node_modules/@polkadot/util-crypto/base32/bs32.js
var chars, config2, base32Validate, isBase32, base32Decode, base32Encode;
var init_bs32 = __esm({
  "node_modules/@polkadot/util-crypto/base32/bs32.js"() {
    init_esm();
    init_helpers3();
    chars = "abcdefghijklmnopqrstuvwxyz234567";
    config2 = {
      chars,
      coder: utils.chain(
        // We define our own chain, the default base32 has padding
        utils.radix2(5),
        utils.alphabet(chars),
        {
          decode: (input) => input.split(""),
          encode: (input) => input.join("")
        }
      ),
      ipfs: "b",
      type: "base32"
    };
    base32Validate = createValidate(config2);
    isBase32 = createIs(base32Validate);
    base32Decode = createDecode(config2, base32Validate);
    base32Encode = createEncode(config2);
  }
});

// node_modules/@polkadot/util-crypto/base32/index.js
var init_base32 = __esm({
  "node_modules/@polkadot/util-crypto/base32/index.js"() {
    init_bs32();
  }
});

// node_modules/@polkadot/util-crypto/base64/bs64.js
var config3, base64Validate, isBase64, base64Decode2, base64Encode;
var init_bs64 = __esm({
  "node_modules/@polkadot/util-crypto/base64/bs64.js"() {
    init_esm();
    init_helpers3();
    config3 = {
      chars: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
      coder: base64,
      type: "base64",
      withPadding: true
    };
    base64Validate = createValidate(config3);
    isBase64 = createIs(base64Validate);
    base64Decode2 = createDecode(config3, base64Validate);
    base64Encode = createEncode(config3);
  }
});

// node_modules/@polkadot/util-crypto/base64/pad.js
var init_pad = __esm({
  "node_modules/@polkadot/util-crypto/base64/pad.js"() {
  }
});

// node_modules/@polkadot/util-crypto/base64/trim.js
var init_trim = __esm({
  "node_modules/@polkadot/util-crypto/base64/trim.js"() {
  }
});

// node_modules/@polkadot/util-crypto/base64/index.js
var init_base642 = __esm({
  "node_modules/@polkadot/util-crypto/base64/index.js"() {
    init_bs64();
    init_pad();
    init_trim();
  }
});

// node_modules/@polkadot/util-crypto/secp256k1/compress.js
function secp256k1Compress2(publicKey2, onlyJs) {
  if (![33, 65].includes(publicKey2.length)) {
    throw new Error(`Invalid publicKey provided, received ${publicKey2.length} bytes input`);
  }
  if (publicKey2.length === 33) {
    return publicKey2;
  }
  return !hasBigInt || !onlyJs && isReady() ? secp256k1Compress(publicKey2) : secp256k1.ProjectivePoint.fromHex(publicKey2).toRawBytes(true);
}
var init_compress = __esm({
  "node_modules/@polkadot/util-crypto/secp256k1/compress.js"() {
    init_secp256k1();
    init_util();
    init_wasm_crypto();
  }
});

// node_modules/@polkadot/util-crypto/secp256k1/expand.js
function secp256k1Expand2(publicKey2, onlyJs) {
  if (![33, 65].includes(publicKey2.length)) {
    throw new Error(`Invalid publicKey provided, received ${publicKey2.length} bytes input`);
  }
  if (publicKey2.length === 65) {
    return publicKey2.subarray(1);
  }
  if (!hasBigInt || !onlyJs && isReady()) {
    return secp256k1Expand(publicKey2).subarray(1);
  }
  const { px, py } = secp256k1.ProjectivePoint.fromHex(publicKey2);
  return u8aConcat(bnToU8a(px, BN_BE_256_OPTS), bnToU8a(py, BN_BE_256_OPTS));
}
var init_expand = __esm({
  "node_modules/@polkadot/util-crypto/secp256k1/expand.js"() {
    init_secp256k1();
    init_util();
    init_wasm_crypto();
    init_bn4();
  }
});

// node_modules/@polkadot/util-crypto/secp256k1/recover.js
function secp256k1Recover2(msgHash, signature, recovery, hashType = "blake2", onlyJs) {
  const sig2 = u8aToU8a(signature).subarray(0, 64);
  const msg = u8aToU8a(msgHash);
  const publicKey2 = !hasBigInt || !onlyJs && isReady() ? secp256k1Recover(msg, sig2, recovery) : secp256k1.Signature.fromCompact(sig2).addRecoveryBit(recovery).recoverPublicKey(msg).toRawBytes();
  if (!publicKey2) {
    throw new Error("Unable to recover publicKey from signature");
  }
  return hashType === "keccak" ? secp256k1Expand2(publicKey2, onlyJs) : secp256k1Compress2(publicKey2, onlyJs);
}
var init_recover = __esm({
  "node_modules/@polkadot/util-crypto/secp256k1/recover.js"() {
    init_secp256k1();
    init_util();
    init_wasm_crypto();
    init_compress();
    init_expand();
  }
});

// node_modules/@polkadot/util-crypto/secp256k1/sign.js
function secp256k1Sign2(message, { secretKey }, hashType = "blake2", onlyJs) {
  if (secretKey?.length !== 32) {
    throw new Error("Expected valid secp256k1 secretKey, 32-bytes");
  }
  const data = hasher(hashType, message, onlyJs);
  if (!hasBigInt || !onlyJs && isReady()) {
    return secp256k1Sign(data, secretKey);
  }
  const signature = secp256k1.sign(data, secretKey, { lowS: true });
  return u8aConcat(bnToU8a(signature.r, BN_BE_256_OPTS), bnToU8a(signature.s, BN_BE_256_OPTS), new Uint8Array([signature.recovery || 0]));
}
var init_sign3 = __esm({
  "node_modules/@polkadot/util-crypto/secp256k1/sign.js"() {
    init_secp256k1();
    init_util();
    init_wasm_crypto();
    init_bn4();
    init_hasher();
  }
});

// node_modules/@polkadot/util-crypto/secp256k1/tweakAdd.js
function addBi(seckey, tweak) {
  let res = u8aToBigInt(tweak, BN_BE_OPTS);
  if (res >= N_BI) {
    throw new Error("Tweak parameter is out of range");
  }
  res += u8aToBigInt(seckey, BN_BE_OPTS);
  if (res >= N_BI) {
    res -= N_BI;
  }
  if (res === _0n) {
    throw new Error("Invalid resulting private key");
  }
  return nToU8a(res, BN_BE_256_OPTS);
}
function addBn(seckey, tweak) {
  const res = new import_bn.default(tweak);
  if (res.cmp(N_BN) >= 0) {
    throw new Error("Tweak parameter is out of range");
  }
  res.iadd(new import_bn.default(seckey));
  if (res.cmp(N_BN) >= 0) {
    res.isub(N_BN);
  }
  if (res.isZero()) {
    throw new Error("Invalid resulting private key");
  }
  return bnToU8a(res, BN_BE_256_OPTS);
}
function secp256k1PrivateKeyTweakAdd(seckey, tweak, onlyBn) {
  if (!isU8a(seckey) || seckey.length !== 32) {
    throw new Error("Expected seckey to be an Uint8Array with length 32");
  } else if (!isU8a(tweak) || tweak.length !== 32) {
    throw new Error("Expected tweak to be an Uint8Array with length 32");
  }
  return !hasBigInt || onlyBn ? addBn(seckey, tweak) : addBi(seckey, tweak);
}
var N, N_BI, N_BN;
var init_tweakAdd = __esm({
  "node_modules/@polkadot/util-crypto/secp256k1/tweakAdd.js"() {
    init_util();
    init_x_bigint();
    init_bn4();
    N = "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141".replace(/ /g, "");
    N_BI = BigInt2(`0x${N}`);
    N_BN = new import_bn.default(N, "hex");
  }
});

// node_modules/@polkadot/util-crypto/secp256k1/verify.js
function secp256k1Verify(msgHash, signature, address, hashType = "blake2", onlyJs) {
  const sig2 = u8aToU8a(signature);
  if (sig2.length !== 65) {
    throw new Error(`Expected signature with 65 bytes, ${sig2.length} found instead`);
  }
  const publicKey2 = secp256k1Recover2(hasher(hashType, msgHash), sig2, sig2[64], hashType, onlyJs);
  const signerAddr = hasher(hashType, publicKey2, onlyJs);
  const inputAddr = u8aToU8a(address);
  return u8aEq(publicKey2, inputAddr) || (hashType === "keccak" ? u8aEq(signerAddr.slice(-20), inputAddr.slice(-20)) : u8aEq(signerAddr, inputAddr));
}
var init_verify3 = __esm({
  "node_modules/@polkadot/util-crypto/secp256k1/verify.js"() {
    init_util();
    init_hasher();
    init_recover();
  }
});

// node_modules/@polkadot/util-crypto/secp256k1/index.js
var init_secp256k12 = __esm({
  "node_modules/@polkadot/util-crypto/secp256k1/index.js"() {
    init_compress();
    init_expand();
    init_fromSeed();
    init_recover();
    init_sign3();
    init_tweakAdd();
    init_verify3();
  }
});

// node_modules/@polkadot/util-crypto/ethereum/encode.js
function getH160(u8a) {
  if ([33, 65].includes(u8a.length)) {
    u8a = keccakAsU8a(secp256k1Expand2(u8a));
  }
  return u8a.slice(-20);
}
function ethereumEncode(addressOrPublic) {
  if (!addressOrPublic) {
    return "0x";
  }
  const u8aAddress = u8aToU8a(addressOrPublic);
  if (![20, 32, 33, 65].includes(u8aAddress.length)) {
    throw new Error(`Invalid address or publicKey provided, received ${u8aAddress.length} bytes input`);
  }
  const address = u8aToHex(getH160(u8aAddress), -1, false);
  const hash2 = u8aToHex(keccakAsU8a(address), -1, false);
  let result = "";
  for (let i = 0; i < 40; i++) {
    result = `${result}${parseInt(hash2[i], 16) > 7 ? address[i].toUpperCase() : address[i]}`;
  }
  return `0x${result}`;
}
var init_encode2 = __esm({
  "node_modules/@polkadot/util-crypto/ethereum/encode.js"() {
    init_util();
    init_keccak();
    init_secp256k12();
  }
});

// node_modules/@polkadot/util-crypto/ethereum/isChecksum.js
function isInvalidChar(char, byte) {
  return char !== (byte > 7 ? char.toUpperCase() : char.toLowerCase());
}
function isEthereumChecksum(_address) {
  const address = _address.replace("0x", "");
  const hash2 = u8aToHex(keccakAsU8a(address.toLowerCase()), -1, false);
  for (let i = 0; i < 40; i++) {
    if (isInvalidChar(address[i], parseInt(hash2[i], 16))) {
      return false;
    }
  }
  return true;
}
var init_isChecksum = __esm({
  "node_modules/@polkadot/util-crypto/ethereum/isChecksum.js"() {
    init_util();
    init_keccak();
  }
});

// node_modules/@polkadot/util-crypto/ethereum/isAddress.js
function isEthereumAddress(address) {
  if (!address || address.length !== 42 || !isHex(address)) {
    return false;
  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
    return true;
  }
  return isEthereumChecksum(address);
}
var init_isAddress = __esm({
  "node_modules/@polkadot/util-crypto/ethereum/isAddress.js"() {
    init_util();
    init_isChecksum();
  }
});

// node_modules/@polkadot/util-crypto/ethereum/index.js
var init_ethereum = __esm({
  "node_modules/@polkadot/util-crypto/ethereum/index.js"() {
    init_encode2();
    init_isAddress();
    init_isChecksum();
  }
});

// node_modules/@noble/hashes/esm/hmac.js
var HMAC, hmac;
var init_hmac = __esm({
  "node_modules/@noble/hashes/esm/hmac.js"() {
    init_assert();
    init_utils();
    HMAC = class extends Hash {
      constructor(hash2, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        hash(hash2);
        const key = toBytes(_key);
        this.iHash = hash2.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash2.create();
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        pad.fill(0);
      }
      update(buf) {
        exists(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        exists(this);
        bytes(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    };
    hmac = (hash2, key, message) => new HMAC(hash2, key).update(message).digest();
    hmac.create = (hash2, key) => new HMAC(hash2, key);
  }
});

// node_modules/@noble/hashes/esm/sha512.js
var SHA512_Kh, SHA512_Kl, SHA512_W_H, SHA512_W_L, SHA512, SHA512_224, SHA512_256, SHA384, sha5123, sha512_224, sha512_256, sha384;
var init_sha512 = __esm({
  "node_modules/@noble/hashes/esm/sha512.js"() {
    init_md();
    init_u64();
    init_utils();
    [SHA512_Kh, SHA512_Kl] = (() => u64_default.split([
      "0x428a2f98d728ae22",
      "0x7137449123ef65cd",
      "0xb5c0fbcfec4d3b2f",
      "0xe9b5dba58189dbbc",
      "0x3956c25bf348b538",
      "0x59f111f1b605d019",
      "0x923f82a4af194f9b",
      "0xab1c5ed5da6d8118",
      "0xd807aa98a3030242",
      "0x12835b0145706fbe",
      "0x243185be4ee4b28c",
      "0x550c7dc3d5ffb4e2",
      "0x72be5d74f27b896f",
      "0x80deb1fe3b1696b1",
      "0x9bdc06a725c71235",
      "0xc19bf174cf692694",
      "0xe49b69c19ef14ad2",
      "0xefbe4786384f25e3",
      "0x0fc19dc68b8cd5b5",
      "0x240ca1cc77ac9c65",
      "0x2de92c6f592b0275",
      "0x4a7484aa6ea6e483",
      "0x5cb0a9dcbd41fbd4",
      "0x76f988da831153b5",
      "0x983e5152ee66dfab",
      "0xa831c66d2db43210",
      "0xb00327c898fb213f",
      "0xbf597fc7beef0ee4",
      "0xc6e00bf33da88fc2",
      "0xd5a79147930aa725",
      "0x06ca6351e003826f",
      "0x142929670a0e6e70",
      "0x27b70a8546d22ffc",
      "0x2e1b21385c26c926",
      "0x4d2c6dfc5ac42aed",
      "0x53380d139d95b3df",
      "0x650a73548baf63de",
      "0x766a0abb3c77b2a8",
      "0x81c2c92e47edaee6",
      "0x92722c851482353b",
      "0xa2bfe8a14cf10364",
      "0xa81a664bbc423001",
      "0xc24b8b70d0f89791",
      "0xc76c51a30654be30",
      "0xd192e819d6ef5218",
      "0xd69906245565a910",
      "0xf40e35855771202a",
      "0x106aa07032bbd1b8",
      "0x19a4c116b8d2d0c8",
      "0x1e376c085141ab53",
      "0x2748774cdf8eeb99",
      "0x34b0bcb5e19b48a8",
      "0x391c0cb3c5c95a63",
      "0x4ed8aa4ae3418acb",
      "0x5b9cca4f7763e373",
      "0x682e6ff3d6b2b8a3",
      "0x748f82ee5defb2fc",
      "0x78a5636f43172f60",
      "0x84c87814a1f0ab72",
      "0x8cc702081a6439ec",
      "0x90befffa23631e28",
      "0xa4506cebde82bde9",
      "0xbef9a3f7b2c67915",
      "0xc67178f2e372532b",
      "0xca273eceea26619c",
      "0xd186b8c721c0c207",
      "0xeada7dd6cde0eb1e",
      "0xf57d4f7fee6ed178",
      "0x06f067aa72176fba",
      "0x0a637dc5a2c898a6",
      "0x113f9804bef90dae",
      "0x1b710b35131c471b",
      "0x28db77f523047d84",
      "0x32caab7b40c72493",
      "0x3c9ebe0a15c9bebc",
      "0x431d67c49c100d4c",
      "0x4cc5d4becb3e42b6",
      "0x597f299cfc657e2a",
      "0x5fcb6fab3ad6faec",
      "0x6c44198c4a475817"
    ].map((n) => BigInt(n))))();
    SHA512_W_H = new Uint32Array(80);
    SHA512_W_L = new Uint32Array(80);
    SHA512 = class extends HashMD {
      constructor() {
        super(128, 64, 16, false);
        this.Ah = 1779033703 | 0;
        this.Al = 4089235720 | 0;
        this.Bh = 3144134277 | 0;
        this.Bl = 2227873595 | 0;
        this.Ch = 1013904242 | 0;
        this.Cl = 4271175723 | 0;
        this.Dh = 2773480762 | 0;
        this.Dl = 1595750129 | 0;
        this.Eh = 1359893119 | 0;
        this.El = 2917565137 | 0;
        this.Fh = 2600822924 | 0;
        this.Fl = 725511199 | 0;
        this.Gh = 528734635 | 0;
        this.Gl = 4215389547 | 0;
        this.Hh = 1541459225 | 0;
        this.Hl = 327033209 | 0;
      }
      // prettier-ignore
      get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
      }
      // prettier-ignore
      set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4) {
          SHA512_W_H[i] = view.getUint32(offset);
          SHA512_W_L[i] = view.getUint32(offset += 4);
        }
        for (let i = 16; i < 80; i++) {
          const W15h = SHA512_W_H[i - 15] | 0;
          const W15l = SHA512_W_L[i - 15] | 0;
          const s0h = u64_default.rotrSH(W15h, W15l, 1) ^ u64_default.rotrSH(W15h, W15l, 8) ^ u64_default.shrSH(W15h, W15l, 7);
          const s0l = u64_default.rotrSL(W15h, W15l, 1) ^ u64_default.rotrSL(W15h, W15l, 8) ^ u64_default.shrSL(W15h, W15l, 7);
          const W2h = SHA512_W_H[i - 2] | 0;
          const W2l = SHA512_W_L[i - 2] | 0;
          const s1h = u64_default.rotrSH(W2h, W2l, 19) ^ u64_default.rotrBH(W2h, W2l, 61) ^ u64_default.shrSH(W2h, W2l, 6);
          const s1l = u64_default.rotrSL(W2h, W2l, 19) ^ u64_default.rotrBL(W2h, W2l, 61) ^ u64_default.shrSL(W2h, W2l, 6);
          const SUMl = u64_default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
          const SUMh = u64_default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
          SHA512_W_H[i] = SUMh | 0;
          SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        for (let i = 0; i < 80; i++) {
          const sigma1h = u64_default.rotrSH(Eh, El, 14) ^ u64_default.rotrSH(Eh, El, 18) ^ u64_default.rotrBH(Eh, El, 41);
          const sigma1l = u64_default.rotrSL(Eh, El, 14) ^ u64_default.rotrSL(Eh, El, 18) ^ u64_default.rotrBL(Eh, El, 41);
          const CHIh = Eh & Fh ^ ~Eh & Gh;
          const CHIl = El & Fl ^ ~El & Gl;
          const T1ll = u64_default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
          const T1h = u64_default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
          const T1l = T1ll | 0;
          const sigma0h = u64_default.rotrSH(Ah, Al, 28) ^ u64_default.rotrBH(Ah, Al, 34) ^ u64_default.rotrBH(Ah, Al, 39);
          const sigma0l = u64_default.rotrSL(Ah, Al, 28) ^ u64_default.rotrBL(Ah, Al, 34) ^ u64_default.rotrBL(Ah, Al, 39);
          const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
          const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
          Hh = Gh | 0;
          Hl = Gl | 0;
          Gh = Fh | 0;
          Gl = Fl | 0;
          Fh = Eh | 0;
          Fl = El | 0;
          ({ h: Eh, l: El } = u64_default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
          Dh = Ch | 0;
          Dl = Cl | 0;
          Ch = Bh | 0;
          Cl = Bl | 0;
          Bh = Ah | 0;
          Bl = Al | 0;
          const All = u64_default.add3L(T1l, sigma0l, MAJl);
          Ah = u64_default.add3H(All, T1h, sigma0h, MAJh);
          Al = All | 0;
        }
        ({ h: Ah, l: Al } = u64_default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = u64_default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = u64_default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = u64_default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = u64_default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = u64_default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = u64_default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = u64_default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
      }
      roundClean() {
        SHA512_W_H.fill(0);
        SHA512_W_L.fill(0);
      }
      destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
    };
    SHA512_224 = class extends SHA512 {
      constructor() {
        super();
        this.Ah = 2352822216 | 0;
        this.Al = 424955298 | 0;
        this.Bh = 1944164710 | 0;
        this.Bl = 2312950998 | 0;
        this.Ch = 502970286 | 0;
        this.Cl = 855612546 | 0;
        this.Dh = 1738396948 | 0;
        this.Dl = 1479516111 | 0;
        this.Eh = 258812777 | 0;
        this.El = 2077511080 | 0;
        this.Fh = 2011393907 | 0;
        this.Fl = 79989058 | 0;
        this.Gh = 1067287976 | 0;
        this.Gl = 1780299464 | 0;
        this.Hh = 286451373 | 0;
        this.Hl = 2446758561 | 0;
        this.outputLen = 28;
      }
    };
    SHA512_256 = class extends SHA512 {
      constructor() {
        super();
        this.Ah = 573645204 | 0;
        this.Al = 4230739756 | 0;
        this.Bh = 2673172387 | 0;
        this.Bl = 3360449730 | 0;
        this.Ch = 596883563 | 0;
        this.Cl = 1867755857 | 0;
        this.Dh = 2520282905 | 0;
        this.Dl = 1497426621 | 0;
        this.Eh = 2519219938 | 0;
        this.El = 2827943907 | 0;
        this.Fh = 3193839141 | 0;
        this.Fl = 1401305490 | 0;
        this.Gh = 721525244 | 0;
        this.Gl = 746961066 | 0;
        this.Hh = 246885852 | 0;
        this.Hl = 2177182882 | 0;
        this.outputLen = 32;
      }
    };
    SHA384 = class extends SHA512 {
      constructor() {
        super();
        this.Ah = 3418070365 | 0;
        this.Al = 3238371032 | 0;
        this.Bh = 1654270250 | 0;
        this.Bl = 914150663 | 0;
        this.Ch = 2438529370 | 0;
        this.Cl = 812702999 | 0;
        this.Dh = 355462360 | 0;
        this.Dl = 4144912697 | 0;
        this.Eh = 1731405415 | 0;
        this.El = 4290775857 | 0;
        this.Fh = 2394180231 | 0;
        this.Fl = 1750603025 | 0;
        this.Gh = 3675008525 | 0;
        this.Gl = 1694076839 | 0;
        this.Hh = 1203062813 | 0;
        this.Hl = 3204075428 | 0;
        this.outputLen = 48;
      }
    };
    sha5123 = wrapConstructor(() => new SHA512());
    sha512_224 = wrapConstructor(() => new SHA512_224());
    sha512_256 = wrapConstructor(() => new SHA512_256());
    sha384 = wrapConstructor(() => new SHA384());
  }
});

// node_modules/@polkadot/util-crypto/hmac/shaAsU8a.js
function createSha(bitLength) {
  return (key, data, onlyJs) => hmacShaAsU8a(key, data, bitLength, onlyJs);
}
function hmacShaAsU8a(key, data, bitLength = 256, onlyJs) {
  const u8aKey = u8aToU8a(key);
  return !hasBigInt || !onlyJs && isReady() ? WA_MHAC[bitLength](u8aKey, data) : hmac(JS_HASH[bitLength], u8aKey, data);
}
var JS_HASH, WA_MHAC, hmacSha256AsU8a, hmacSha512AsU8a;
var init_shaAsU8a = __esm({
  "node_modules/@polkadot/util-crypto/hmac/shaAsU8a.js"() {
    init_hmac();
    init_sha256();
    init_sha512();
    init_util();
    init_wasm_crypto();
    JS_HASH = {
      256: sha256,
      512: sha5123
    };
    WA_MHAC = {
      256: hmacSha256,
      512: hmacSha512
    };
    hmacSha256AsU8a = createSha(256);
    hmacSha512AsU8a = createSha(512);
  }
});

// node_modules/@polkadot/util-crypto/hmac/index.js
var init_hmac2 = __esm({
  "node_modules/@polkadot/util-crypto/hmac/index.js"() {
    init_shaAsU8a();
  }
});

// node_modules/@polkadot/util-crypto/hd/validatePath.js
function hdValidatePath(path) {
  if (!path.startsWith("m/")) {
    return false;
  }
  const parts = path.split("/").slice(1);
  for (const p of parts) {
    const n = /^\d+'?$/.test(p) ? parseInt(p.replace(/'$/, ""), 10) : Number.NaN;
    if (isNaN(n) || n >= HARDENED || n < 0) {
      return false;
    }
  }
  return true;
}
var HARDENED;
var init_validatePath = __esm({
  "node_modules/@polkadot/util-crypto/hd/validatePath.js"() {
    HARDENED = 2147483648;
  }
});

// node_modules/@polkadot/util-crypto/hd/ethereum/index.js
function createCoded(secretKey, chainCode) {
  return {
    chainCode,
    publicKey: secp256k1PairFromSeed(secretKey).publicKey,
    secretKey
  };
}
function deriveChild(hd, index) {
  const indexBuffer = bnToU8a(index, BN_BE_32_OPTS);
  const data = index >= HARDENED ? u8aConcat(new Uint8Array(1), hd.secretKey, indexBuffer) : u8aConcat(hd.publicKey, indexBuffer);
  try {
    const I2 = hmacShaAsU8a(hd.chainCode, data, 512);
    return createCoded(secp256k1PrivateKeyTweakAdd(hd.secretKey, I2.slice(0, 32)), I2.slice(32));
  } catch {
    return deriveChild(hd, index + 1);
  }
}
function hdEthereum(seed, path = "") {
  const I2 = hmacShaAsU8a(MASTER_SECRET, seed, 512);
  let hd = createCoded(I2.slice(0, 32), I2.slice(32));
  if (!path || path === "m" || path === "M" || path === "m'" || path === "M'") {
    return hd;
  }
  if (!hdValidatePath(path)) {
    throw new Error("Invalid derivation path");
  }
  const parts = path.split("/").slice(1);
  for (const p of parts) {
    hd = deriveChild(hd, parseInt(p, 10) + (p.length > 1 && p.endsWith("'") ? HARDENED : 0));
  }
  return hd;
}
var MASTER_SECRET;
var init_ethereum2 = __esm({
  "node_modules/@polkadot/util-crypto/hd/ethereum/index.js"() {
    init_util();
    init_bn4();
    init_hmac2();
    init_secp256k12();
    init_validatePath();
    MASTER_SECRET = stringToU8a("Bitcoin seed");
  }
});

// node_modules/@noble/hashes/esm/pbkdf2.js
function pbkdf2Init(hash2, _password, _salt, _opts) {
  hash(hash2);
  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
  const { c, dkLen, asyncTick } = opts;
  number(c);
  number(dkLen);
  number(asyncTick);
  if (c < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const password = toBytes(_password);
  const salt = toBytes(_salt);
  const DK = new Uint8Array(dkLen);
  const PRF = hmac.create(hash2, password);
  const PRFSalt = PRF._cloneInto().update(salt);
  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
  PRF.destroy();
  PRFSalt.destroy();
  if (prfW)
    prfW.destroy();
  u.fill(0);
  return DK;
}
function pbkdf22(hash2, password, salt, opts) {
  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash2, password, salt, opts);
  let prfW;
  const arr = new Uint8Array(4);
  const view = createView(arr);
  const u = new Uint8Array(PRF.outputLen);
  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
    const Ti = DK.subarray(pos, pos + PRF.outputLen);
    view.setInt32(0, ti, false);
    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
    Ti.set(u.subarray(0, Ti.length));
    for (let ui = 1; ui < c; ui++) {
      PRF._cloneInto(prfW).update(u).digestInto(u);
      for (let i = 0; i < Ti.length; i++)
        Ti[i] ^= u[i];
    }
  }
  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}
var init_pbkdf2 = __esm({
  "node_modules/@noble/hashes/esm/pbkdf2.js"() {
    init_assert();
    init_hmac();
    init_utils();
  }
});

// node_modules/@polkadot/util-crypto/pbkdf2/encode.js
function pbkdf2Encode(passphrase, salt = randomAsU8a(), rounds = 2048, onlyJs) {
  const u8aPass = u8aToU8a(passphrase);
  const u8aSalt = u8aToU8a(salt);
  return {
    password: !hasBigInt || !onlyJs && isReady() ? pbkdf2(u8aPass, u8aSalt, rounds) : pbkdf22(sha5123, u8aPass, u8aSalt, { c: rounds, dkLen: 64 }),
    rounds,
    salt
  };
}
var init_encode3 = __esm({
  "node_modules/@polkadot/util-crypto/pbkdf2/encode.js"() {
    init_pbkdf2();
    init_sha512();
    init_util();
    init_wasm_crypto();
    init_asU8a2();
  }
});

// node_modules/@polkadot/util-crypto/pbkdf2/index.js
var init_pbkdf22 = __esm({
  "node_modules/@polkadot/util-crypto/pbkdf2/index.js"() {
    init_encode3();
  }
});

// node_modules/@polkadot/util-crypto/sha/asU8a.js
var shaAsU8a, sha256AsU8a, sha512AsU8a;
var init_asU8a4 = __esm({
  "node_modules/@polkadot/util-crypto/sha/asU8a.js"() {
    init_sha256();
    init_sha512();
    init_wasm_crypto();
    init_helpers4();
    shaAsU8a = createDualHasher({ 256: sha2562, 512: sha5122 }, { 256: sha256, 512: sha5123 });
    sha256AsU8a = createBitHasher(256, shaAsU8a);
    sha512AsU8a = createBitHasher(512, shaAsU8a);
  }
});

// node_modules/@polkadot/util-crypto/sha/index.js
var init_sha = __esm({
  "node_modules/@polkadot/util-crypto/sha/index.js"() {
    init_asU8a4();
  }
});

// node_modules/@polkadot/util-crypto/mnemonic/wordlists/en.js
var en_default;
var init_en = __esm({
  "node_modules/@polkadot/util-crypto/mnemonic/wordlists/en.js"() {
    en_default = "abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo".split("|");
  }
});

// node_modules/@polkadot/util-crypto/mnemonic/bip39.js
function normalize(str) {
  return (str || "").normalize("NFKD");
}
function binaryToByte(bin) {
  return parseInt(bin, 2);
}
function bytesToBinary(bytes3) {
  return bytes3.map((x) => x.toString(2).padStart(8, "0")).join("");
}
function deriveChecksumBits(entropyBuffer) {
  return bytesToBinary(Array.from(sha256AsU8a(entropyBuffer))).slice(0, entropyBuffer.length * 8 / 32);
}
function mnemonicToSeedSync(mnemonic, password) {
  return pbkdf2Encode(stringToU8a(normalize(mnemonic)), stringToU8a(`mnemonic${normalize(password)}`)).password;
}
function mnemonicToEntropy(mnemonic, wordlist = en_default) {
  const words = normalize(mnemonic).split(" ");
  if (words.length % 3 !== 0) {
    throw new Error(INVALID_MNEMONIC);
  }
  const bits2 = words.map((word) => {
    const index = wordlist.indexOf(word);
    if (index === -1) {
      throw new Error(INVALID_MNEMONIC);
    }
    return index.toString(2).padStart(11, "0");
  }).join("");
  const dividerIndex = Math.floor(bits2.length / 33) * 32;
  const entropyBits = bits2.slice(0, dividerIndex);
  const checksumBits = bits2.slice(dividerIndex);
  const matched = entropyBits.match(/(.{1,8})/g);
  const entropyBytes = matched?.map(binaryToByte);
  if (!entropyBytes || entropyBytes.length % 4 !== 0 || entropyBytes.length < 16 || entropyBytes.length > 32) {
    throw new Error(INVALID_ENTROPY);
  }
  const entropy = u8aToU8a(entropyBytes);
  if (deriveChecksumBits(entropy) !== checksumBits) {
    throw new Error(INVALID_CHECKSUM);
  }
  return entropy;
}
function validateMnemonic(mnemonic, wordlist) {
  try {
    mnemonicToEntropy(mnemonic, wordlist);
  } catch {
    return false;
  }
  return true;
}
var INVALID_MNEMONIC, INVALID_ENTROPY, INVALID_CHECKSUM;
var init_bip39 = __esm({
  "node_modules/@polkadot/util-crypto/mnemonic/bip39.js"() {
    init_util();
    init_pbkdf22();
    init_random();
    init_sha();
    init_en();
    INVALID_MNEMONIC = "Invalid mnemonic";
    INVALID_ENTROPY = "Invalid entropy";
    INVALID_CHECKSUM = "Invalid mnemonic checksum";
  }
});

// node_modules/@polkadot/util-crypto/mnemonic/generate.js
var init_generate = __esm({
  "node_modules/@polkadot/util-crypto/mnemonic/generate.js"() {
    init_util();
    init_wasm_crypto();
    init_bip39();
  }
});

// node_modules/@polkadot/util-crypto/mnemonic/toEntropy.js
function mnemonicToEntropy2(mnemonic, wordlist, onlyJs) {
  return !hasBigInt || !wordlist && !onlyJs && isReady() ? bip39ToEntropy(mnemonic) : mnemonicToEntropy(mnemonic, wordlist);
}
var init_toEntropy = __esm({
  "node_modules/@polkadot/util-crypto/mnemonic/toEntropy.js"() {
    init_util();
    init_wasm_crypto();
    init_bip39();
  }
});

// node_modules/@polkadot/util-crypto/mnemonic/validate.js
function mnemonicValidate(mnemonic, wordlist, onlyJs) {
  return !hasBigInt || !wordlist && !onlyJs && isReady() ? bip39Validate(mnemonic) : validateMnemonic(mnemonic, wordlist);
}
var init_validate2 = __esm({
  "node_modules/@polkadot/util-crypto/mnemonic/validate.js"() {
    init_util();
    init_wasm_crypto();
    init_bip39();
  }
});

// node_modules/@polkadot/util-crypto/mnemonic/toLegacySeed.js
function mnemonicToLegacySeed(mnemonic, password = "", onlyJs, byteLength = 32) {
  if (!mnemonicValidate(mnemonic)) {
    throw new Error("Invalid bip39 mnemonic specified");
  } else if (![32, 64].includes(byteLength)) {
    throw new Error(`Invalid seed length ${byteLength}, expected 32 or 64`);
  }
  return byteLength === 32 ? !hasBigInt || !onlyJs && isReady() ? bip39ToSeed(mnemonic, password) : mnemonicToSeedSync(mnemonic, password).subarray(0, 32) : mnemonicToSeedSync(mnemonic, password);
}
var init_toLegacySeed = __esm({
  "node_modules/@polkadot/util-crypto/mnemonic/toLegacySeed.js"() {
    init_util();
    init_wasm_crypto();
    init_bip39();
    init_validate2();
  }
});

// node_modules/@polkadot/util-crypto/mnemonic/toMiniSecret.js
function mnemonicToMiniSecret(mnemonic, password = "", wordlist, onlyJs) {
  if (!mnemonicValidate(mnemonic, wordlist, onlyJs)) {
    throw new Error("Invalid bip39 mnemonic specified");
  } else if (!wordlist && !onlyJs && isReady()) {
    return bip39ToMiniSecret(mnemonic, password);
  }
  const entropy = mnemonicToEntropy2(mnemonic, wordlist);
  const salt = stringToU8a(`mnemonic${password}`);
  return pbkdf2Encode(entropy, salt).password.slice(0, 32);
}
var init_toMiniSecret = __esm({
  "node_modules/@polkadot/util-crypto/mnemonic/toMiniSecret.js"() {
    init_util();
    init_wasm_crypto();
    init_pbkdf22();
    init_toEntropy();
    init_validate2();
  }
});

// node_modules/@polkadot/util-crypto/mnemonic/index.js
var init_mnemonic = __esm({
  "node_modules/@polkadot/util-crypto/mnemonic/index.js"() {
    init_generate();
    init_toEntropy();
    init_toLegacySeed();
    init_toMiniSecret();
    init_validate2();
  }
});

// node_modules/@polkadot/util-crypto/hd/ledger/derivePrivate.js
var init_derivePrivate = __esm({
  "node_modules/@polkadot/util-crypto/hd/ledger/derivePrivate.js"() {
    init_util();
    init_bn4();
    init_hmac2();
  }
});

// node_modules/@polkadot/util-crypto/hd/ledger/master.js
var init_master = __esm({
  "node_modules/@polkadot/util-crypto/hd/ledger/master.js"() {
    init_util();
    init_hmac2();
    init_bip39();
  }
});

// node_modules/@polkadot/util-crypto/hd/ledger/index.js
var init_ledger2 = __esm({
  "node_modules/@polkadot/util-crypto/hd/ledger/index.js"() {
    init_ed255192();
    init_mnemonic();
    init_validatePath();
    init_derivePrivate();
    init_master();
  }
});

// node_modules/@polkadot/util-crypto/hd/index.js
var init_hd = __esm({
  "node_modules/@polkadot/util-crypto/hd/index.js"() {
    init_ethereum2();
    init_ledger2();
    init_validatePath();
  }
});

// node_modules/@polkadot/util-crypto/nacl/tweetnacl.js
function L32(x, c) {
  return x << c | x >>> 32 - c;
}
function ld32(x, i) {
  let u = x[i + 3] & 255;
  u = u << 8 | x[i + 2] & 255;
  u = u << 8 | x[i + 1] & 255;
  return u << 8 | x[i + 0] & 255;
}
function st32(x, j3, u) {
  for (let i = 0; i < 4; i++) {
    x[j3 + i] = u & 255;
    u >>>= 8;
  }
}
function vn(x, xi, y, yi, n) {
  let d = 0;
  for (let i = 0; i < n; i++)
    d |= x[xi + i] ^ y[yi + i];
  return (1 & d - 1 >>> 8) - 1;
}
function core(out, inp, k2, c, h2) {
  const w2 = new Uint32Array(16), x = new Uint32Array(16), y = new Uint32Array(16), t = new Uint32Array(4);
  let i, j3, m;
  for (i = 0; i < 4; i++) {
    x[5 * i] = ld32(c, 4 * i);
    x[1 + i] = ld32(k2, 4 * i);
    x[6 + i] = ld32(inp, 4 * i);
    x[11 + i] = ld32(k2, 16 + 4 * i);
  }
  for (i = 0; i < 16; i++)
    y[i] = x[i];
  for (i = 0; i < 20; i++) {
    for (j3 = 0; j3 < 4; j3++) {
      for (m = 0; m < 4; m++)
        t[m] = x[(5 * j3 + 4 * m) % 16];
      t[1] ^= L32(t[0] + t[3] | 0, 7);
      t[2] ^= L32(t[1] + t[0] | 0, 9);
      t[3] ^= L32(t[2] + t[1] | 0, 13);
      t[0] ^= L32(t[3] + t[2] | 0, 18);
      for (m = 0; m < 4; m++)
        w2[4 * j3 + (j3 + m) % 4] = t[m];
    }
    for (m = 0; m < 16; m++)
      x[m] = w2[m];
  }
  if (h2) {
    for (i = 0; i < 16; i++)
      x[i] = x[i] + y[i] | 0;
    for (i = 0; i < 4; i++) {
      x[5 * i] = x[5 * i] - ld32(c, 4 * i) | 0;
      x[6 + i] = x[6 + i] - ld32(inp, 4 * i) | 0;
    }
    for (i = 0; i < 4; i++) {
      st32(out, 4 * i, x[5 * i]);
      st32(out, 16 + 4 * i, x[6 + i]);
    }
  } else {
    for (i = 0; i < 16; i++)
      st32(out, 4 * i, x[i] + y[i] | 0);
  }
}
function crypto_stream_salsa20_xor(c, cpos, m, mpos, b2, n, k2) {
  const z2 = new Uint8Array(16), x = new Uint8Array(64);
  let u, i;
  if (!b2)
    return 0;
  for (i = 0; i < 16; i++)
    z2[i] = 0;
  for (i = 0; i < 8; i++)
    z2[i] = n[i];
  while (b2 >= 64) {
    core(x, z2, k2, sigma, false);
    for (i = 0; i < 64; i++)
      c[cpos + i] = (m ? m[mpos + i] : 0) ^ x[i];
    u = 1;
    for (i = 8; i < 16; i++) {
      u = u + (z2[i] & 255) | 0;
      z2[i] = u & 255;
      u >>>= 8;
    }
    b2 -= 64;
    cpos += 64;
    if (m)
      mpos += 64;
  }
  if (b2 > 0) {
    core(x, z2, k2, sigma, false);
    for (i = 0; i < b2; i++)
      c[cpos + i] = (m ? m[mpos + i] : 0) ^ x[i];
  }
  return 0;
}
function crypto_stream_xor(c, cpos, m, mpos, d, n, k2) {
  const s = new Uint8Array(32);
  core(s, n, k2, sigma, true);
  return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, n.subarray(16), s);
}
function add1305(h2, c) {
  let u = 0;
  for (let j3 = 0; j3 < 17; j3++) {
    u = u + (h2[j3] + c[j3] | 0) | 0;
    h2[j3] = u & 255;
    u >>>= 8;
  }
}
function crypto_onetimeauth(out, outpos, m, mpos, n, k2) {
  let i, j3, u;
  const x = new Uint32Array(17), r = new Uint32Array(17), h2 = new Uint32Array(17), c = new Uint32Array(17), g2 = new Uint32Array(17);
  for (j3 = 0; j3 < 17; j3++)
    r[j3] = h2[j3] = 0;
  for (j3 = 0; j3 < 16; j3++)
    r[j3] = k2[j3];
  r[3] &= 15;
  r[4] &= 252;
  r[7] &= 15;
  r[8] &= 252;
  r[11] &= 15;
  r[12] &= 252;
  r[15] &= 15;
  while (n > 0) {
    for (j3 = 0; j3 < 17; j3++)
      c[j3] = 0;
    for (j3 = 0; j3 < 16 && j3 < n; ++j3)
      c[j3] = m[mpos + j3];
    c[j3] = 1;
    mpos += j3;
    n -= j3;
    add1305(h2, c);
    for (i = 0; i < 17; i++) {
      x[i] = 0;
      for (j3 = 0; j3 < 17; j3++)
        x[i] = x[i] + h2[j3] * (j3 <= i ? r[i - j3] : 320 * r[i + 17 - j3] | 0) | 0 | 0;
    }
    for (i = 0; i < 17; i++)
      h2[i] = x[i];
    u = 0;
    for (j3 = 0; j3 < 16; j3++) {
      u = u + h2[j3] | 0;
      h2[j3] = u & 255;
      u >>>= 8;
    }
    u = u + h2[16] | 0;
    h2[16] = u & 3;
    u = 5 * (u >>> 2) | 0;
    for (j3 = 0; j3 < 16; j3++) {
      u = u + h2[j3] | 0;
      h2[j3] = u & 255;
      u >>>= 8;
    }
    u = u + h2[16] | 0;
    h2[16] = u;
  }
  for (j3 = 0; j3 < 17; j3++)
    g2[j3] = h2[j3];
  add1305(h2, minusp);
  const s = -(h2[16] >>> 7) | 0;
  for (j3 = 0; j3 < 17; j3++)
    h2[j3] ^= s & (g2[j3] ^ h2[j3]);
  for (j3 = 0; j3 < 16; j3++)
    c[j3] = k2[j3 + 16];
  c[16] = 0;
  add1305(h2, c);
  for (j3 = 0; j3 < 16; j3++)
    out[outpos + j3] = h2[j3];
  return 0;
}
function crypto_onetimeauth_verify(h2, hpos, m, mpos, n, k2) {
  const x = new Uint8Array(16);
  crypto_onetimeauth(x, 0, m, mpos, n, k2);
  return vn(h2, hpos, x, 0, 16);
}
function crypto_secretbox(c, m, d, n, k2) {
  if (d < 32)
    return -1;
  crypto_stream_xor(c, 0, m, 0, d, n, k2);
  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
  for (let i = 0; i < 16; i++)
    c[i] = 0;
  return 0;
}
function crypto_secretbox_open(m, c, d, n, k2) {
  const x = new Uint8Array(32);
  if (d < 32)
    return -1;
  crypto_stream_xor(x, 0, null, 0, 32, n, k2);
  if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0)
    return -1;
  crypto_stream_xor(m, 0, c, 0, d, n, k2);
  for (let i = 0; i < 32; i++)
    m[i] = 0;
  return 0;
}
function checkLengths(k2, n) {
  if (k2.length !== crypto_secretbox_KEYBYTES)
    throw new Error("bad key size");
  if (n.length !== crypto_secretbox_NONCEBYTES)
    throw new Error("bad nonce size");
}
function checkArrayTypes(...args) {
  for (let i = 0, count2 = args.length; i < count2; i++) {
    if (!(args[i] instanceof Uint8Array))
      throw new TypeError("unexpected type, use Uint8Array");
  }
}
function naclSecretbox(msg, nonce, key) {
  checkArrayTypes(msg, nonce, key);
  checkLengths(key, nonce);
  const m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
  const c = new Uint8Array(m.length);
  for (let i = 0; i < msg.length; i++)
    m[i + crypto_secretbox_ZEROBYTES] = msg[i];
  crypto_secretbox(c, m, m.length, nonce, key);
  return c.subarray(crypto_secretbox_BOXZEROBYTES);
}
function naclSecretboxOpen(box, nonce, key) {
  checkArrayTypes(box, nonce, key);
  checkLengths(key, nonce);
  const c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
  const m = new Uint8Array(c.length);
  for (let i = 0; i < box.length; i++)
    c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
  if (c.length < 32)
    return null;
  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0)
    return null;
  return m.subarray(crypto_secretbox_ZEROBYTES);
}
var sigma, minusp, crypto_secretbox_KEYBYTES, crypto_secretbox_NONCEBYTES, crypto_secretbox_ZEROBYTES, crypto_secretbox_BOXZEROBYTES;
var init_tweetnacl = __esm({
  "node_modules/@polkadot/util-crypto/nacl/tweetnacl.js"() {
    sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
    minusp = new Uint32Array([5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252]);
    crypto_secretbox_KEYBYTES = 32;
    crypto_secretbox_NONCEBYTES = 24;
    crypto_secretbox_ZEROBYTES = 32;
    crypto_secretbox_BOXZEROBYTES = 16;
  }
});

// node_modules/@polkadot/util-crypto/nacl/decrypt.js
function naclDecrypt(encrypted, nonce, secret) {
  return naclSecretboxOpen(encrypted, nonce, secret);
}
var init_decrypt = __esm({
  "node_modules/@polkadot/util-crypto/nacl/decrypt.js"() {
    init_tweetnacl();
  }
});

// node_modules/@polkadot/util-crypto/nacl/encrypt.js
function naclEncrypt(message, secret, nonce = randomAsU8a(24)) {
  return {
    encrypted: naclSecretbox(message, nonce, secret),
    nonce
  };
}
var init_encrypt = __esm({
  "node_modules/@polkadot/util-crypto/nacl/encrypt.js"() {
    init_asU8a2();
    init_tweetnacl();
  }
});

// node_modules/@polkadot/util-crypto/nacl/index.js
var init_nacl = __esm({
  "node_modules/@polkadot/util-crypto/nacl/index.js"() {
    init_decrypt();
    init_encrypt();
  }
});

// node_modules/@noble/hashes/esm/scrypt.js
function XorAndSalsa(prev, pi, input, ii, out, oi) {
  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
  let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
  for (let i = 0; i < 8; i += 2) {
    x04 ^= rotl(x00 + x12 | 0, 7);
    x08 ^= rotl(x04 + x00 | 0, 9);
    x12 ^= rotl(x08 + x04 | 0, 13);
    x00 ^= rotl(x12 + x08 | 0, 18);
    x09 ^= rotl(x05 + x01 | 0, 7);
    x13 ^= rotl(x09 + x05 | 0, 9);
    x01 ^= rotl(x13 + x09 | 0, 13);
    x05 ^= rotl(x01 + x13 | 0, 18);
    x14 ^= rotl(x10 + x06 | 0, 7);
    x02 ^= rotl(x14 + x10 | 0, 9);
    x06 ^= rotl(x02 + x14 | 0, 13);
    x10 ^= rotl(x06 + x02 | 0, 18);
    x03 ^= rotl(x15 + x11 | 0, 7);
    x07 ^= rotl(x03 + x15 | 0, 9);
    x11 ^= rotl(x07 + x03 | 0, 13);
    x15 ^= rotl(x11 + x07 | 0, 18);
    x01 ^= rotl(x00 + x03 | 0, 7);
    x02 ^= rotl(x01 + x00 | 0, 9);
    x03 ^= rotl(x02 + x01 | 0, 13);
    x00 ^= rotl(x03 + x02 | 0, 18);
    x06 ^= rotl(x05 + x04 | 0, 7);
    x07 ^= rotl(x06 + x05 | 0, 9);
    x04 ^= rotl(x07 + x06 | 0, 13);
    x05 ^= rotl(x04 + x07 | 0, 18);
    x11 ^= rotl(x10 + x09 | 0, 7);
    x08 ^= rotl(x11 + x10 | 0, 9);
    x09 ^= rotl(x08 + x11 | 0, 13);
    x10 ^= rotl(x09 + x08 | 0, 18);
    x12 ^= rotl(x15 + x14 | 0, 7);
    x13 ^= rotl(x12 + x15 | 0, 9);
    x14 ^= rotl(x13 + x12 | 0, 13);
    x15 ^= rotl(x14 + x13 | 0, 18);
  }
  out[oi++] = y00 + x00 | 0;
  out[oi++] = y01 + x01 | 0;
  out[oi++] = y02 + x02 | 0;
  out[oi++] = y03 + x03 | 0;
  out[oi++] = y04 + x04 | 0;
  out[oi++] = y05 + x05 | 0;
  out[oi++] = y06 + x06 | 0;
  out[oi++] = y07 + x07 | 0;
  out[oi++] = y08 + x08 | 0;
  out[oi++] = y09 + x09 | 0;
  out[oi++] = y10 + x10 | 0;
  out[oi++] = y11 + x11 | 0;
  out[oi++] = y12 + x12 | 0;
  out[oi++] = y13 + x13 | 0;
  out[oi++] = y14 + x14 | 0;
  out[oi++] = y15 + x15 | 0;
}
function BlockMix(input, ii, out, oi, r) {
  let head = oi + 0;
  let tail = oi + 16 * r;
  for (let i = 0; i < 16; i++)
    out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
  for (let i = 0; i < r; i++, head += 16, ii += 16) {
    XorAndSalsa(out, tail, input, ii, out, head);
    if (i > 0)
      tail += 16;
    XorAndSalsa(out, head, input, ii += 16, out, tail);
  }
}
function scryptInit(password, salt, _opts) {
  const opts = checkOpts({
    dkLen: 32,
    asyncTick: 10,
    maxmem: 1024 ** 3 + 1024
  }, _opts);
  const { N: N3, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
  number(N3);
  number(r);
  number(p);
  number(dkLen);
  number(asyncTick);
  number(maxmem);
  if (onProgress !== void 0 && typeof onProgress !== "function")
    throw new Error("progressCb should be function");
  const blockSize = 128 * r;
  const blockSize32 = blockSize / 4;
  if (N3 <= 1 || (N3 & N3 - 1) !== 0 || N3 >= 2 ** (blockSize / 8) || N3 > 2 ** 32) {
    throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
  }
  if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
    throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
  }
  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
    throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
  }
  const memUsed = blockSize * (N3 + p);
  if (memUsed > maxmem) {
    throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
  }
  const B = pbkdf22(sha256, password, salt, { c: 1, dkLen: blockSize * p });
  const B32 = u32(B);
  const V3 = u32(new Uint8Array(blockSize * N3));
  const tmp = u32(new Uint8Array(blockSize));
  let blockMixCb = () => {
  };
  if (onProgress) {
    const totalBlockMix = 2 * N3 * p;
    const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
    let blockMixCnt = 0;
    blockMixCb = () => {
      blockMixCnt++;
      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
        onProgress(blockMixCnt / totalBlockMix);
    };
  }
  return { N: N3, r, p, dkLen, blockSize32, V: V3, B32, B, tmp, blockMixCb, asyncTick };
}
function scryptOutput(password, dkLen, B, V3, tmp) {
  const res = pbkdf22(sha256, password, B, { c: 1, dkLen });
  B.fill(0);
  V3.fill(0);
  tmp.fill(0);
  return res;
}
function scrypt2(password, salt, opts) {
  const { N: N3, r, p, dkLen, blockSize32, V: V3, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
  if (!isLE)
    byteSwap32(B32);
  for (let pi = 0; pi < p; pi++) {
    const Pi = blockSize32 * pi;
    for (let i = 0; i < blockSize32; i++)
      V3[i] = B32[Pi + i];
    for (let i = 0, pos = 0; i < N3 - 1; i++) {
      BlockMix(V3, pos, V3, pos += blockSize32, r);
      blockMixCb();
    }
    BlockMix(V3, (N3 - 1) * blockSize32, B32, Pi, r);
    blockMixCb();
    for (let i = 0; i < N3; i++) {
      const j3 = B32[Pi + blockSize32 - 16] % N3;
      for (let k2 = 0; k2 < blockSize32; k2++)
        tmp[k2] = B32[Pi + k2] ^ V3[j3 * blockSize32 + k2];
      BlockMix(tmp, 0, B32, Pi, r);
      blockMixCb();
    }
  }
  if (!isLE)
    byteSwap32(B32);
  return scryptOutput(password, dkLen, B, V3, tmp);
}
var init_scrypt = __esm({
  "node_modules/@noble/hashes/esm/scrypt.js"() {
    init_assert();
    init_sha256();
    init_pbkdf2();
    init_utils();
  }
});

// node_modules/@polkadot/util-crypto/scrypt/defaults.js
var DEFAULT_PARAMS;
var init_defaults3 = __esm({
  "node_modules/@polkadot/util-crypto/scrypt/defaults.js"() {
    DEFAULT_PARAMS = {
      N: 1 << 15,
      p: 1,
      r: 8
    };
  }
});

// node_modules/@polkadot/util-crypto/scrypt/encode.js
function scryptEncode(passphrase, salt = randomAsU8a(), params = DEFAULT_PARAMS, onlyJs) {
  const u8a = u8aToU8a(passphrase);
  return {
    params,
    password: !hasBigInt || !onlyJs && isReady() ? scrypt(u8a, salt, Math.log2(params.N), params.r, params.p) : scrypt2(u8a, salt, objectSpread({ dkLen: 64 }, params)),
    salt
  };
}
var init_encode4 = __esm({
  "node_modules/@polkadot/util-crypto/scrypt/encode.js"() {
    init_scrypt();
    init_util();
    init_wasm_crypto();
    init_asU8a2();
    init_defaults3();
  }
});

// node_modules/@polkadot/util-crypto/scrypt/fromU8a.js
function scryptFromU8a(data) {
  const salt = data.subarray(0, 32);
  const N3 = u8aToBn(data.subarray(32 + 0, 32 + 4), BN_LE_OPTS).toNumber();
  const p = u8aToBn(data.subarray(32 + 4, 32 + 8), BN_LE_OPTS).toNumber();
  const r = u8aToBn(data.subarray(32 + 8, 32 + 12), BN_LE_OPTS).toNumber();
  if (N3 !== DEFAULT_PARAMS.N || p !== DEFAULT_PARAMS.p || r !== DEFAULT_PARAMS.r) {
    throw new Error("Invalid injected scrypt params found");
  }
  return { params: { N: N3, p, r }, salt };
}
var init_fromU8a3 = __esm({
  "node_modules/@polkadot/util-crypto/scrypt/fromU8a.js"() {
    init_util();
    init_bn4();
    init_defaults3();
  }
});

// node_modules/@polkadot/util-crypto/scrypt/toU8a.js
function scryptToU8a(salt, { N: N3, p, r }) {
  return u8aConcat(salt, bnToU8a(N3, BN_LE_32_OPTS), bnToU8a(p, BN_LE_32_OPTS), bnToU8a(r, BN_LE_32_OPTS));
}
var init_toU8a11 = __esm({
  "node_modules/@polkadot/util-crypto/scrypt/toU8a.js"() {
    init_util();
    init_bn4();
  }
});

// node_modules/@polkadot/util-crypto/scrypt/index.js
var init_scrypt2 = __esm({
  "node_modules/@polkadot/util-crypto/scrypt/index.js"() {
    init_encode4();
    init_fromU8a3();
    init_toU8a11();
  }
});

// node_modules/@polkadot/util-crypto/json/constants.js
var ENCODING, ENCODING_NONE, ENCODING_VERSION, NONCE_LENGTH, SCRYPT_LENGTH;
var init_constants = __esm({
  "node_modules/@polkadot/util-crypto/json/constants.js"() {
    ENCODING = ["scrypt", "xsalsa20-poly1305"];
    ENCODING_NONE = ["none"];
    ENCODING_VERSION = "3";
    NONCE_LENGTH = 24;
    SCRYPT_LENGTH = 32 + 3 * 4;
  }
});

// node_modules/@polkadot/util-crypto/json/decryptData.js
function jsonDecryptData(encrypted, passphrase, encType = ENCODING) {
  if (!encrypted) {
    throw new Error("No encrypted data available to decode");
  } else if (encType.includes("xsalsa20-poly1305") && !passphrase) {
    throw new Error("Password required to decode encrypted data");
  }
  let encoded = encrypted;
  if (passphrase) {
    let password;
    if (encType.includes("scrypt")) {
      const { params, salt } = scryptFromU8a(encrypted);
      password = scryptEncode(passphrase, salt, params).password;
      encrypted = encrypted.subarray(SCRYPT_LENGTH);
    } else {
      password = stringToU8a(passphrase);
    }
    encoded = naclDecrypt(encrypted.subarray(NONCE_LENGTH), encrypted.subarray(0, NONCE_LENGTH), u8aFixLength(password, 256, true));
  }
  if (!encoded) {
    throw new Error("Unable to decode using the supplied passphrase");
  }
  return encoded;
}
var init_decryptData = __esm({
  "node_modules/@polkadot/util-crypto/json/decryptData.js"() {
    init_util();
    init_nacl();
    init_scrypt2();
    init_constants();
  }
});

// node_modules/@polkadot/util-crypto/json/decrypt.js
var init_decrypt2 = __esm({
  "node_modules/@polkadot/util-crypto/json/decrypt.js"() {
    init_util();
    init_base642();
    init_decryptData();
  }
});

// node_modules/@polkadot/util-crypto/json/encryptFormat.js
function jsonEncryptFormat(encoded, contentType, isEncrypted) {
  return {
    encoded: base64Encode(encoded),
    encoding: {
      content: contentType,
      type: isEncrypted ? ENCODING : ENCODING_NONE,
      version: ENCODING_VERSION
    }
  };
}
var init_encryptFormat = __esm({
  "node_modules/@polkadot/util-crypto/json/encryptFormat.js"() {
    init_base642();
    init_constants();
  }
});

// node_modules/@polkadot/util-crypto/json/encrypt.js
var init_encrypt2 = __esm({
  "node_modules/@polkadot/util-crypto/json/encrypt.js"() {
    init_util();
    init_nacl();
    init_scrypt2();
    init_encryptFormat();
  }
});

// node_modules/@polkadot/util-crypto/json/index.js
var init_json = __esm({
  "node_modules/@polkadot/util-crypto/json/index.js"() {
    init_decrypt2();
    init_decryptData();
    init_encrypt2();
    init_encryptFormat();
  }
});

// node_modules/@polkadot/util-crypto/signature/verify.js
function verifyDetect(result, { message, publicKey: publicKey2, signature }, verifiers = VERIFIERS) {
  result.isValid = verifiers.some(([crypto3, verify]) => {
    try {
      if (verify(message, signature, publicKey2)) {
        result.crypto = crypto3;
        return true;
      }
    } catch {
    }
    return false;
  });
  return result;
}
function verifyMultisig(result, { message, publicKey: publicKey2, signature }) {
  if (![0, 1, 2].includes(signature[0])) {
    throw new Error(`Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);
  }
  const type = CRYPTO_TYPES[signature[0]] || "none";
  result.crypto = type;
  try {
    result.isValid = {
      ecdsa: () => verifyDetect(result, { message, publicKey: publicKey2, signature: signature.subarray(1) }, VERIFIERS_ECDSA).isValid,
      ed25519: () => ed25519Verify2(message, signature.subarray(1), publicKey2),
      none: () => {
        throw Error("no verify for `none` crypto type");
      },
      sr25519: () => sr25519Verify2(message, signature.subarray(1), publicKey2)
    }[type]();
  } catch {
  }
  return result;
}
function getVerifyFn(signature) {
  return [0, 1, 2].includes(signature[0]) && [65, 66].includes(signature.length) ? verifyMultisig : verifyDetect;
}
function signatureVerify(message, signature, addressOrPublicKey) {
  const signatureU8a = u8aToU8a(signature);
  if (![64, 65, 66].includes(signatureU8a.length)) {
    throw new Error(`Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);
  }
  const publicKey2 = decodeAddress(addressOrPublicKey);
  const input = { message: u8aToU8a(message), publicKey: publicKey2, signature: signatureU8a };
  const result = { crypto: "none", isValid: false, isWrapped: u8aIsWrapped(input.message, true), publicKey: publicKey2 };
  const isWrappedBytes = u8aIsWrapped(input.message, false);
  const verifyFn = getVerifyFn(signatureU8a);
  verifyFn(result, input);
  if (result.crypto !== "none" || result.isWrapped && !isWrappedBytes) {
    return result;
  }
  input.message = isWrappedBytes ? u8aUnwrapBytes(input.message) : u8aWrapBytes(input.message);
  return verifyFn(result, input);
}
var secp256k1VerifyHasher, VERIFIERS_ECDSA, VERIFIERS, CRYPTO_TYPES;
var init_verify4 = __esm({
  "node_modules/@polkadot/util-crypto/signature/verify.js"() {
    init_util();
    init_decode();
    init_verify();
    init_verify3();
    init_verify2();
    secp256k1VerifyHasher = (hashType) => (message, signature, publicKey2) => secp256k1Verify(message, signature, publicKey2, hashType);
    VERIFIERS_ECDSA = [
      ["ecdsa", secp256k1VerifyHasher("blake2")],
      ["ethereum", secp256k1VerifyHasher("keccak")]
    ];
    VERIFIERS = [
      ["ed25519", ed25519Verify2],
      ["sr25519", sr25519Verify2],
      ...VERIFIERS_ECDSA
    ];
    CRYPTO_TYPES = ["ed25519", "sr25519", "ecdsa"];
  }
});

// node_modules/@polkadot/util-crypto/signature/index.js
var init_signature = __esm({
  "node_modules/@polkadot/util-crypto/signature/index.js"() {
    init_verify4();
  }
});

// node_modules/@polkadot/util-crypto/xxhash/xxhash64.js
function rotl2(a, b2) {
  const c = a & U64;
  return (c << b2 | c >> _64n - b2) & U64;
}
function fromU8a(u8a, p, count2) {
  const bigints = new Array(count2);
  let offset = 0;
  for (let i = 0; i < count2; i++, offset += 2) {
    bigints[i] = BigInt2(u8a[p + offset] | u8a[p + 1 + offset] << 8);
  }
  let result = _0n;
  for (let i = count2 - 1; i >= 0; i--) {
    result = (result << _16n) + bigints[i];
  }
  return result;
}
function init(seed, input) {
  const state = {
    seed,
    u8a: new Uint8Array(32),
    u8asize: 0,
    v1: seed + P64_1 + P64_2,
    v2: seed + P64_2,
    v3: seed,
    v4: seed - P64_1
  };
  if (input.length < 32) {
    state.u8a.set(input);
    state.u8asize = input.length;
    return state;
  }
  const limit = input.length - 32;
  let p = 0;
  if (limit >= 0) {
    const adjustV = (v3) => P64_1 * rotl2(v3 + P64_2 * fromU8a(input, p, 4), _31n);
    do {
      state.v1 = adjustV(state.v1);
      p += 8;
      state.v2 = adjustV(state.v2);
      p += 8;
      state.v3 = adjustV(state.v3);
      p += 8;
      state.v4 = adjustV(state.v4);
      p += 8;
    } while (p <= limit);
  }
  if (p < input.length) {
    state.u8a.set(input.subarray(p, input.length));
    state.u8asize = input.length - p;
  }
  return state;
}
function xxhash64(input, initSeed) {
  const { seed, u8a, u8asize, v1: v17, v2: v22, v3, v4: v42 } = init(BigInt2(initSeed), input);
  let p = 0;
  let h64 = U64 & BigInt2(input.length) + (input.length >= 32 ? ((((rotl2(v17, _1n) + rotl2(v22, _7n3) + rotl2(v3, _12n) + rotl2(v42, _18n) ^ P64_1 * rotl2(v17 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl2(v22 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl2(v3 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl2(v42 * P64_2, _31n)) * P64_1 + P64_4 : seed + P64_5);
  while (p <= u8asize - 8) {
    h64 = U64 & P64_4 + P64_1 * rotl2(h64 ^ P64_1 * rotl2(P64_2 * fromU8a(u8a, p, 4), _31n), _27n);
    p += 8;
  }
  if (p + 4 <= u8asize) {
    h64 = U64 & P64_3 + P64_2 * rotl2(h64 ^ P64_1 * fromU8a(u8a, p, 2), _23n);
    p += 4;
  }
  while (p < u8asize) {
    h64 = U64 & P64_1 * rotl2(h64 ^ P64_5 * BigInt2(u8a[p++]), _11n);
  }
  h64 = U64 & P64_2 * (h64 ^ h64 >> _33n);
  h64 = U64 & P64_3 * (h64 ^ h64 >> _29n);
  h64 = U64 & (h64 ^ h64 >> _32n2);
  const result = new Uint8Array(8);
  for (let i = 7; i >= 0; i--) {
    result[i] = Number(h64 % _256n2);
    h64 = h64 / _256n2;
  }
  return result;
}
var P64_1, P64_2, P64_3, P64_4, P64_5, U64, _7n3, _11n, _12n, _16n, _18n, _23n, _27n, _29n, _31n, _32n2, _33n, _64n, _256n2;
var init_xxhash64 = __esm({
  "node_modules/@polkadot/util-crypto/xxhash/xxhash64.js"() {
    init_util();
    init_x_bigint();
    P64_1 = BigInt2("11400714785074694791");
    P64_2 = BigInt2("14029467366897019727");
    P64_3 = BigInt2("1609587929392839161");
    P64_4 = BigInt2("9650029242287828579");
    P64_5 = BigInt2("2870177450012600261");
    U64 = BigInt2("0xffffffffffffffff");
    _7n3 = BigInt2(7);
    _11n = BigInt2(11);
    _12n = BigInt2(12);
    _16n = BigInt2(16);
    _18n = BigInt2(18);
    _23n = BigInt2(23);
    _27n = BigInt2(27);
    _29n = BigInt2(29);
    _31n = BigInt2(31);
    _32n2 = BigInt2(32);
    _33n = BigInt2(33);
    _64n = BigInt2(64);
    _256n2 = BigInt2(256);
  }
});

// node_modules/@polkadot/util-crypto/xxhash/asU8a.js
function xxhashAsU8a(data, bitLength = 64, onlyJs) {
  const rounds = Math.ceil(bitLength / 64);
  const u8a = u8aToU8a(data);
  if (!hasBigInt || !onlyJs && isReady()) {
    return twox(u8a, rounds);
  }
  const result = new Uint8Array(rounds * 8);
  for (let seed = 0; seed < rounds; seed++) {
    result.set(xxhash64(u8a, seed).reverse(), seed * 8);
  }
  return result;
}
var xxhashAsHex;
var init_asU8a5 = __esm({
  "node_modules/@polkadot/util-crypto/xxhash/asU8a.js"() {
    init_util();
    init_wasm_crypto();
    init_helpers4();
    init_xxhash64();
    xxhashAsHex = createAsHex(xxhashAsU8a);
  }
});

// node_modules/@polkadot/util-crypto/xxhash/index.js
var init_xxhash = __esm({
  "node_modules/@polkadot/util-crypto/xxhash/index.js"() {
    init_asU8a5();
  }
});

// node_modules/@polkadot/util-crypto/bundle.js
var init_bundle7 = __esm({
  "node_modules/@polkadot/util-crypto/bundle.js"() {
    init_bundleInit();
    init_packageInfo13();
    init_address();
    init_base32();
    init_base58();
    init_base642();
    init_blake2();
    init_crypto();
    init_ed255192();
    init_ethereum();
    init_hd();
    init_hmac2();
    init_json();
    init_keccak();
    init_key();
    init_mnemonic();
    init_nacl();
    init_networks2();
    init_pbkdf22();
    init_random();
    init_scrypt2();
    init_secp256k12();
    init_sha();
    init_signature();
    init_sr25519();
    init_xxhash();
  }
});

// node_modules/@polkadot/util-crypto/index.js
var init_util_crypto = __esm({
  "node_modules/@polkadot/util-crypto/index.js"() {
    init_detectPackage3();
    init_bundle7();
  }
});

// node_modules/@polkadot/keyring/pair/defaults.js
var PKCS8_DIVIDER, PKCS8_HEADER, PUB_LENGTH, SEC_LENGTH, SEED_LENGTH;
var init_defaults4 = __esm({
  "node_modules/@polkadot/keyring/pair/defaults.js"() {
    PKCS8_DIVIDER = new Uint8Array([161, 35, 3, 33, 0]);
    PKCS8_HEADER = new Uint8Array([48, 83, 2, 1, 1, 48, 5, 6, 3, 43, 101, 112, 4, 34, 4, 32]);
    PUB_LENGTH = 32;
    SEC_LENGTH = 64;
    SEED_LENGTH = 32;
  }
});

// node_modules/@polkadot/keyring/pair/decode.js
function decodePair(passphrase, encrypted, _encType) {
  const encType = Array.isArray(_encType) || _encType === void 0 ? _encType : [_encType];
  const decrypted = jsonDecryptData(encrypted, passphrase, encType);
  const header = decrypted.subarray(0, PKCS8_HEADER.length);
  if (!u8aEq(header, PKCS8_HEADER)) {
    throw new Error("Invalid Pkcs8 header found in body");
  }
  let secretKey = decrypted.subarray(SEED_OFFSET, SEED_OFFSET + SEC_LENGTH);
  let divOffset = SEED_OFFSET + SEC_LENGTH;
  let divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length);
  if (!u8aEq(divider, PKCS8_DIVIDER)) {
    divOffset = SEED_OFFSET + SEED_LENGTH;
    secretKey = decrypted.subarray(SEED_OFFSET, divOffset);
    divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length);
    if (!u8aEq(divider, PKCS8_DIVIDER)) {
      throw new Error("Invalid Pkcs8 divider found in body");
    }
  }
  const pubOffset = divOffset + PKCS8_DIVIDER.length;
  const publicKey2 = decrypted.subarray(pubOffset, pubOffset + PUB_LENGTH);
  return {
    publicKey: publicKey2,
    secretKey
  };
}
var SEED_OFFSET;
var init_decode2 = __esm({
  "node_modules/@polkadot/keyring/pair/decode.js"() {
    init_util();
    init_util_crypto();
    init_defaults4();
    SEED_OFFSET = PKCS8_HEADER.length;
  }
});

// node_modules/@polkadot/keyring/pair/encode.js
function encodePair({ publicKey: publicKey2, secretKey }, passphrase) {
  if (!secretKey) {
    throw new Error("Expected a valid secretKey to be passed to encode");
  }
  const encoded = u8aConcat(PKCS8_HEADER, secretKey, PKCS8_DIVIDER, publicKey2);
  if (!passphrase) {
    return encoded;
  }
  const { params, password, salt } = scryptEncode(passphrase);
  const { encrypted, nonce } = naclEncrypt(encoded, password.subarray(0, 32));
  return u8aConcat(scryptToU8a(salt, params), nonce, encrypted);
}
var init_encode5 = __esm({
  "node_modules/@polkadot/keyring/pair/encode.js"() {
    init_util();
    init_util_crypto();
    init_defaults4();
  }
});

// node_modules/@polkadot/keyring/pair/toJson.js
function pairToJson(type, { address, meta }, encoded, isEncrypted) {
  return objectSpread(jsonEncryptFormat(encoded, ["pkcs8", type], isEncrypted), {
    address,
    meta
  });
}
var init_toJson = __esm({
  "node_modules/@polkadot/keyring/pair/toJson.js"() {
    init_util();
    init_util_crypto();
  }
});

// node_modules/@polkadot/keyring/pair/index.js
function isLocked(secretKey) {
  return !secretKey || u8aEmpty(secretKey);
}
function vrfHash(proof, context2, extra) {
  return blake2AsU8a(u8aConcat(context2 || "", extra || "", proof));
}
function createPair({ toSS58, type }, { publicKey: publicKey2, secretKey }, meta = {}, encoded = null, encTypes) {
  const decodePkcs8 = (passphrase, userEncoded) => {
    const decoded = decodePair(passphrase, userEncoded || encoded, encTypes);
    if (decoded.secretKey.length === 64) {
      publicKey2 = decoded.publicKey;
      secretKey = decoded.secretKey;
    } else {
      const pair = TYPE_FROM_SEED[type](decoded.secretKey);
      publicKey2 = pair.publicKey;
      secretKey = pair.secretKey;
    }
  };
  const recode = (passphrase) => {
    isLocked(secretKey) && encoded && decodePkcs8(passphrase, encoded);
    encoded = encodePair({ publicKey: publicKey2, secretKey }, passphrase);
    encTypes = void 0;
    return encoded;
  };
  const encodeAddress2 = () => {
    const raw = TYPE_ADDRESS[type](publicKey2);
    return type === "ethereum" ? ethereumEncode(raw) : toSS58(raw);
  };
  return {
    get address() {
      return encodeAddress2();
    },
    get addressRaw() {
      const raw = TYPE_ADDRESS[type](publicKey2);
      return type === "ethereum" ? raw.slice(-20) : raw;
    },
    get isLocked() {
      return isLocked(secretKey);
    },
    get meta() {
      return meta;
    },
    get publicKey() {
      return publicKey2;
    },
    get type() {
      return type;
    },
    // eslint-disable-next-line sort-keys
    decodePkcs8,
    derive: (suri, meta2) => {
      if (type === "ethereum") {
        throw new Error("Unable to derive on this keypair");
      } else if (isLocked(secretKey)) {
        throw new Error("Cannot derive on a locked keypair");
      }
      const { path } = keyExtractPath(suri);
      const derived = keyFromPath({ publicKey: publicKey2, secretKey }, path, type);
      return createPair({ toSS58, type }, derived, meta2, null);
    },
    encodePkcs8: (passphrase) => {
      return recode(passphrase);
    },
    lock: () => {
      secretKey = new Uint8Array();
    },
    setMeta: (additional) => {
      meta = objectSpread({}, meta, additional);
    },
    sign: (message, options = {}) => {
      if (isLocked(secretKey)) {
        throw new Error("Cannot sign with a locked key pair");
      }
      return u8aConcat(options.withType ? TYPE_PREFIX[type] : SIG_TYPE_NONE, TYPE_SIGNATURE[type](u8aToU8a(message), { publicKey: publicKey2, secretKey }));
    },
    toJson: (passphrase) => {
      const address = ["ecdsa", "ethereum"].includes(type) ? publicKey2.length === 20 ? u8aToHex(publicKey2) : u8aToHex(secp256k1Compress2(publicKey2)) : encodeAddress2();
      return pairToJson(type, { address, meta }, recode(passphrase), !!passphrase);
    },
    unlock: (passphrase) => {
      return decodePkcs8(passphrase);
    },
    verify: (message, signature, signerPublic) => {
      return signatureVerify(message, signature, TYPE_ADDRESS[type](u8aToU8a(signerPublic))).isValid;
    },
    vrfSign: (message, context2, extra) => {
      if (isLocked(secretKey)) {
        throw new Error("Cannot sign with a locked key pair");
      }
      if (type === "sr25519") {
        return sr25519VrfSign(message, { secretKey }, context2, extra);
      }
      const proof = TYPE_SIGNATURE[type](u8aToU8a(message), { publicKey: publicKey2, secretKey });
      return u8aConcat(vrfHash(proof, context2, extra), proof);
    },
    vrfVerify: (message, vrfResult, signerPublic, context2, extra) => {
      if (type === "sr25519") {
        return sr25519VrfVerify(message, vrfResult, publicKey2, context2, extra);
      }
      const result = signatureVerify(message, u8aConcat(TYPE_PREFIX[type], vrfResult.subarray(32)), TYPE_ADDRESS[type](u8aToU8a(signerPublic)));
      return result.isValid && u8aEq(vrfResult.subarray(0, 32), vrfHash(vrfResult.subarray(32), context2, extra));
    }
  };
}
var SIG_TYPE_NONE, TYPE_FROM_SEED, TYPE_PREFIX, TYPE_SIGNATURE, TYPE_ADDRESS;
var init_pair = __esm({
  "node_modules/@polkadot/keyring/pair/index.js"() {
    init_util();
    init_util_crypto();
    init_decode2();
    init_encode5();
    init_toJson();
    SIG_TYPE_NONE = new Uint8Array();
    TYPE_FROM_SEED = {
      ecdsa: secp256k1PairFromSeed,
      ed25519: ed25519PairFromSeed,
      ethereum: secp256k1PairFromSeed,
      sr25519: sr25519PairFromSeed
    };
    TYPE_PREFIX = {
      ecdsa: new Uint8Array([2]),
      ed25519: new Uint8Array([0]),
      ethereum: new Uint8Array([2]),
      sr25519: new Uint8Array([1])
    };
    TYPE_SIGNATURE = {
      ecdsa: (m, p) => secp256k1Sign2(m, p, "blake2"),
      ed25519: ed25519Sign2,
      ethereum: (m, p) => secp256k1Sign2(m, p, "keccak"),
      sr25519: sr25519Sign2
    };
    TYPE_ADDRESS = {
      ecdsa: (p) => p.length > 32 ? blake2AsU8a(p) : p,
      ed25519: (p) => p,
      ethereum: (p) => p.length === 20 ? p : keccakAsU8a(secp256k1Expand2(p)),
      sr25519: (p) => p
    };
  }
});

// node_modules/@polkadot/keyring/defaults.js
var DEV_PHRASE;
var init_defaults5 = __esm({
  "node_modules/@polkadot/keyring/defaults.js"() {
    DEV_PHRASE = "bottom drive obey lake curtain smoke basket hold race lonely fit walk";
  }
});

// node_modules/@polkadot/keyring/pairs.js
var Pairs;
var init_pairs = __esm({
  "node_modules/@polkadot/keyring/pairs.js"() {
    init_util();
    init_util_crypto();
    Pairs = class {
      __internal__map = {};
      add(pair) {
        this.__internal__map[decodeAddress(pair.address).toString()] = pair;
        return pair;
      }
      all() {
        return Object.values(this.__internal__map);
      }
      get(address) {
        const pair = this.__internal__map[decodeAddress(address).toString()];
        if (!pair) {
          throw new Error(`Unable to retrieve keypair '${isU8a(address) || isHex(address) ? u8aToHex(u8aToU8a(address)) : address}'`);
        }
        return pair;
      }
      remove(address) {
        delete this.__internal__map[decodeAddress(address).toString()];
      }
    };
  }
});

// node_modules/@polkadot/keyring/keyring.js
function pairToPublic({ publicKey: publicKey2 }) {
  return publicKey2;
}
var PairFromSeed, Keyring;
var init_keyring = __esm({
  "node_modules/@polkadot/keyring/keyring.js"() {
    init_util();
    init_util_crypto();
    init_pair();
    init_defaults5();
    init_pairs();
    PairFromSeed = {
      ecdsa: (seed) => secp256k1PairFromSeed(seed),
      ed25519: (seed) => ed25519PairFromSeed(seed),
      ethereum: (seed) => secp256k1PairFromSeed(seed),
      sr25519: (seed) => sr25519PairFromSeed(seed)
    };
    Keyring = class {
      __internal__pairs;
      __internal__type;
      __internal__ss58;
      decodeAddress = decodeAddress;
      constructor(options = {}) {
        options.type = options.type || "ed25519";
        if (!["ecdsa", "ethereum", "ed25519", "sr25519"].includes(options.type || "undefined")) {
          throw new Error(`Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '${options.type || "unknown"}`);
        }
        this.__internal__pairs = new Pairs();
        this.__internal__ss58 = options.ss58Format;
        this.__internal__type = options.type;
      }
      /**
       * @description retrieve the pairs (alias for getPairs)
       */
      get pairs() {
        return this.getPairs();
      }
      /**
       * @description retrieve the publicKeys (alias for getPublicKeys)
       */
      get publicKeys() {
        return this.getPublicKeys();
      }
      /**
       * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa
       */
      get type() {
        return this.__internal__type;
      }
      /**
       * @name addPair
       * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary
       */
      addPair(pair) {
        return this.__internal__pairs.add(pair);
      }
      /**
       * @name addFromAddress
       * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary
       * @description Allows user to explicitly provide separate inputs including account address or public key, and optionally
       * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file
       * of an account backup), and then generates a keyring pair from them that it passes to
       * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
       */
      addFromAddress(address, meta = {}, encoded = null, type = this.type, ignoreChecksum, encType) {
        const publicKey2 = this.decodeAddress(address, ignoreChecksum);
        return this.addPair(createPair({ toSS58: this.encodeAddress, type }, { publicKey: publicKey2, secretKey: new Uint8Array() }, meta, encoded, encType));
      }
      /**
       * @name addFromJson
       * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
       * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file
       * of an account backup), and then generates a keyring pair from it that it passes to
       * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
       */
      addFromJson(json, ignoreChecksum) {
        return this.addPair(this.createFromJson(json, ignoreChecksum));
      }
      /**
       * @name addFromMnemonic
       * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary
       * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)
       * argument and a metadata argument that contains account information (that may be obtained from the json file
       * of an account backup), and then generates a keyring pair from it that it passes to
       * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
       */
      addFromMnemonic(mnemonic, meta = {}, type = this.type) {
        return this.addFromUri(mnemonic, meta, type);
      }
      /**
       * @name addFromPair
       * @summary Stores an account created from an explicit publicKey/secreteKey combination
       */
      addFromPair(pair, meta = {}, type = this.type) {
        return this.addPair(this.createFromPair(pair, meta, type));
      }
      /**
       * @name addFromSeed
       * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
       * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.
       * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to
       * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
       */
      addFromSeed(seed, meta = {}, type = this.type) {
        return this.addPair(createPair({ toSS58: this.encodeAddress, type }, PairFromSeed[type](seed), meta, null));
      }
      /**
       * @name addFromUri
       * @summary Creates an account via an suri
       * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)
       */
      addFromUri(suri, meta = {}, type = this.type) {
        return this.addPair(this.createFromUri(suri, meta, type));
      }
      /**
       * @name createFromJson
       * @description Creates a pair from a JSON keyfile
       */
      createFromJson({ address, encoded, encoding: { content, type, version: version2 }, meta }, ignoreChecksum) {
        if (version2 === "3" && content[0] !== "pkcs8") {
          throw new Error(`Unable to decode non-pkcs8 type, [${content.join(",")}] found}`);
        }
        const cryptoType = version2 === "0" || !Array.isArray(content) ? this.type : content[1];
        const encType = !Array.isArray(type) ? [type] : type;
        if (!["ed25519", "sr25519", "ecdsa", "ethereum"].includes(cryptoType)) {
          throw new Error(`Unknown crypto type ${cryptoType}`);
        }
        const publicKey2 = isHex(address) ? hexToU8a(address) : this.decodeAddress(address, ignoreChecksum);
        const decoded = isHex(encoded) ? hexToU8a(encoded) : base64Decode2(encoded);
        return createPair({ toSS58: this.encodeAddress, type: cryptoType }, { publicKey: publicKey2, secretKey: new Uint8Array() }, meta, decoded, encType);
      }
      /**
       * @name createFromPair
       * @summary Creates a pair from an explicit publicKey/secreteKey combination
       */
      createFromPair(pair, meta = {}, type = this.type) {
        return createPair({ toSS58: this.encodeAddress, type }, pair, meta, null);
      }
      /**
       * @name createFromUri
       * @summary Creates a Keypair from an suri
       * @description This creates a pair from the suri, but does not add it to the keyring
       */
      createFromUri(_suri, meta = {}, type = this.type) {
        const suri = _suri.startsWith("//") ? `${DEV_PHRASE}${_suri}` : _suri;
        const { derivePath, password, path, phrase } = keyExtractSuri(suri);
        let seed;
        const isPhraseHex = isHex(phrase, 256);
        if (isPhraseHex) {
          seed = hexToU8a(phrase);
        } else {
          const parts = phrase.split(" ");
          if ([12, 15, 18, 21, 24].includes(parts.length)) {
            seed = type === "ethereum" ? mnemonicToLegacySeed(phrase, "", false, 64) : mnemonicToMiniSecret(phrase, password);
          } else {
            if (phrase.length > 32) {
              throw new Error("specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes");
            }
            seed = stringToU8a(phrase.padEnd(32));
          }
        }
        const derived = type === "ethereum" ? isPhraseHex ? PairFromSeed[type](seed) : hdEthereum(seed, derivePath.substring(1)) : keyFromPath(PairFromSeed[type](seed), path, type);
        return createPair({ toSS58: this.encodeAddress, type }, derived, meta, null);
      }
      /**
       * @name encodeAddress
       * @description Encodes the input into an ss58 representation
       */
      encodeAddress = (address, ss58Format) => {
        return this.type === "ethereum" ? ethereumEncode(address) : encodeAddress(address, ss58Format ?? this.__internal__ss58);
      };
      /**
       * @name getPair
       * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address
       * @description Returns a keyring pair value from the keyring pair dictionary by performing
       * a key lookup using the provided account address or public key (after decoding it).
       */
      getPair(address) {
        return this.__internal__pairs.get(address);
      }
      /**
       * @name getPairs
       * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary
       * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.
       */
      getPairs() {
        return this.__internal__pairs.all();
      }
      /**
       * @name getPublicKeys
       * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary
       * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.
       */
      getPublicKeys() {
        return this.__internal__pairs.all().map(pairToPublic);
      }
      /**
       * @name removePair
       * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.
       */
      removePair(address) {
        this.__internal__pairs.remove(address);
      }
      /**
       * @name setSS58Format;
       * @description Sets the ss58 format for the keyring
       */
      setSS58Format(ss58) {
        this.__internal__ss58 = ss58;
      }
      /**
       * @name toJson
       * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account
       * @description Returns a JSON object containing the metadata associated with an account
       * when valid address or public key and when the account passphrase is provided if the account secret
       * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user
       * may backup their account to a JSON file that contains this information.
       */
      toJson(address, passphrase) {
        return this.__internal__pairs.get(address).toJson(passphrase);
      }
    };
  }
});

// node_modules/@polkadot/keyring/testing.js
var init_testing = __esm({
  "node_modules/@polkadot/keyring/testing.js"() {
    init_util();
    init_pair();
    init_keyring();
  }
});

// node_modules/@polkadot/keyring/pair/nobody.js
var publicKey;
var init_nobody = __esm({
  "node_modules/@polkadot/keyring/pair/nobody.js"() {
    publicKey = new Uint8Array(32);
  }
});

// node_modules/@polkadot/keyring/testingPairs.js
var init_testingPairs = __esm({
  "node_modules/@polkadot/keyring/testingPairs.js"() {
    init_nobody();
    init_testing();
  }
});

// node_modules/@polkadot/keyring/bundle.js
var init_bundle8 = __esm({
  "node_modules/@polkadot/keyring/bundle.js"() {
    init_util_crypto();
    init_keyring();
    init_packageInfo14();
    init_pair();
    init_testing();
    init_testingPairs();
    init_defaults5();
  }
});

// node_modules/@polkadot/keyring/index.js
var init_keyring2 = __esm({
  "node_modules/@polkadot/keyring/index.js"() {
    init_detectPackage2();
    init_bundle8();
    init_bundle8();
  }
});

// node_modules/@polkadot/rpc-provider/packageDetect.js
var init_packageDetect7 = __esm({
  "node_modules/@polkadot/rpc-provider/packageDetect.js"() {
    init_packageInfo4();
    init_util();
    init_packageInfo3();
    detectPackage(packageInfo3, null, [packageInfo4]);
  }
});

// node_modules/@polkadot/x-fetch/packageInfo.js
var packageInfo23;
var init_packageInfo23 = __esm({
  "node_modules/@polkadot/x-fetch/packageInfo.js"() {
    packageInfo23 = { name: "@polkadot/x-fetch", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.2" };
  }
});

// node_modules/@polkadot/x-fetch/browser.js
var fetch2;
var init_browser4 = __esm({
  "node_modules/@polkadot/x-fetch/browser.js"() {
    init_x_global();
    init_packageInfo23();
    fetch2 = xglobal.fetch;
  }
});

// node_modules/@polkadot/rpc-provider/coder/error.js
function extend(that, name, value) {
  Object.defineProperty(that, name, {
    configurable: true,
    enumerable: false,
    value
  });
}
var UNKNOWN, RpcError;
var init_error2 = __esm({
  "node_modules/@polkadot/rpc-provider/coder/error.js"() {
    init_util();
    UNKNOWN = -99999;
    RpcError = class extends Error {
      code;
      data;
      message;
      name;
      stack;
      constructor(message = "", code = UNKNOWN, data) {
        super();
        extend(this, "message", String(message));
        extend(this, "name", this.constructor.name);
        extend(this, "data", data);
        extend(this, "code", code);
        if (isFunction(Error.captureStackTrace)) {
          Error.captureStackTrace(this, this.constructor);
        } else {
          const { stack } = new Error(message);
          stack && extend(this, "stack", stack);
        }
      }
      static CODES = {
        ASSERT: -90009,
        INVALID_JSONRPC: -99998,
        METHOD_NOT_FOUND: -32601,
        // Rust client
        UNKNOWN
      };
    };
  }
});

// node_modules/@polkadot/rpc-provider/coder/index.js
function formatErrorData(data) {
  if (isUndefined(data)) {
    return "";
  }
  const formatted = `: ${isString(data) ? data.replace(/Error\("/g, "").replace(/\("/g, "(").replace(/"\)/g, ")").replace(/\(/g, ", ").replace(/\)/g, "") : stringify(data)}`;
  return formatted.length <= 256 ? formatted : `${formatted.substring(0, 255)}…`;
}
function checkError(error) {
  if (error) {
    const { code, data, message } = error;
    throw new RpcError(`${code}: ${message}${formatErrorData(data)}`, code, data);
  }
}
var RpcCoder;
var init_coder = __esm({
  "node_modules/@polkadot/rpc-provider/coder/index.js"() {
    init_util();
    init_error2();
    RpcCoder = class {
      __internal__id = 0;
      decodeResponse(response) {
        if (!response || response.jsonrpc !== "2.0") {
          throw new Error("Invalid jsonrpc field in decoded object");
        }
        const isSubscription2 = !isUndefined(response.params) && !isUndefined(response.method);
        if (!isNumber(response.id) && (!isSubscription2 || !isNumber(response.params.subscription) && !isString(response.params.subscription))) {
          throw new Error("Invalid id field in decoded object");
        }
        checkError(response.error);
        if (response.result === void 0 && !isSubscription2) {
          throw new Error("No result found in jsonrpc response");
        }
        if (isSubscription2) {
          checkError(response.params.error);
          return response.params.result;
        }
        return response.result;
      }
      encodeJson(method, params) {
        const [id, data] = this.encodeObject(method, params);
        return [id, stringify(data)];
      }
      encodeObject(method, params) {
        const id = ++this.__internal__id;
        return [id, {
          id,
          jsonrpc: "2.0",
          method,
          params
        }];
      }
    };
  }
});

// node_modules/@polkadot/rpc-provider/defaults.js
var HTTP_URL, WS_URL, defaults_default;
var init_defaults6 = __esm({
  "node_modules/@polkadot/rpc-provider/defaults.js"() {
    HTTP_URL = "http://127.0.0.1:9933";
    WS_URL = "ws://127.0.0.1:9944";
    defaults_default = {
      HTTP_URL,
      WS_URL
    };
  }
});

// node_modules/@polkadot/rpc-provider/lru.js
var DEFAULT_CAPACITY, LRUNode, LRUCache;
var init_lru = __esm({
  "node_modules/@polkadot/rpc-provider/lru.js"() {
    DEFAULT_CAPACITY = 128;
    LRUNode = class {
      key;
      next;
      prev;
      constructor(key) {
        this.key = key;
        this.next = this.prev = this;
      }
    };
    LRUCache = class {
      capacity;
      __internal__data = /* @__PURE__ */ new Map();
      __internal__refs = /* @__PURE__ */ new Map();
      __internal__length = 0;
      __internal__head;
      __internal__tail;
      constructor(capacity = DEFAULT_CAPACITY) {
        this.capacity = capacity;
        this.__internal__head = this.__internal__tail = new LRUNode("<empty>");
      }
      get length() {
        return this.__internal__length;
      }
      get lengthData() {
        return this.__internal__data.size;
      }
      get lengthRefs() {
        return this.__internal__refs.size;
      }
      entries() {
        const keys2 = this.keys();
        const count2 = keys2.length;
        const entries = new Array(count2);
        for (let i = 0; i < count2; i++) {
          const key = keys2[i];
          entries[i] = [key, this.__internal__data.get(key)];
        }
        return entries;
      }
      keys() {
        const keys2 = [];
        if (this.__internal__length) {
          let curr = this.__internal__head;
          while (curr !== this.__internal__tail) {
            keys2.push(curr.key);
            curr = curr.next;
          }
          keys2.push(curr.key);
        }
        return keys2;
      }
      get(key) {
        const data = this.__internal__data.get(key);
        if (data) {
          this.__internal__toHead(key);
          return data;
        }
        return null;
      }
      set(key, value) {
        if (this.__internal__data.has(key)) {
          this.__internal__toHead(key);
        } else {
          const node = new LRUNode(key);
          this.__internal__refs.set(node.key, node);
          if (this.length === 0) {
            this.__internal__head = this.__internal__tail = node;
          } else {
            this.__internal__head.prev = node;
            node.next = this.__internal__head;
            this.__internal__head = node;
          }
          if (this.__internal__length === this.capacity) {
            this.__internal__data.delete(this.__internal__tail.key);
            this.__internal__refs.delete(this.__internal__tail.key);
            this.__internal__tail = this.__internal__tail.prev;
            this.__internal__tail.next = this.__internal__head;
          } else {
            this.__internal__length += 1;
          }
        }
        this.__internal__data.set(key, value);
      }
      __internal__toHead(key) {
        const ref = this.__internal__refs.get(key);
        if (ref && ref !== this.__internal__head) {
          ref.prev.next = ref.next;
          ref.next.prev = ref.prev;
          ref.next = this.__internal__head;
          this.__internal__head.prev = ref;
          this.__internal__head = ref;
        }
      }
    };
  }
});

// node_modules/@polkadot/rpc-provider/http/index.js
var ERROR_SUBSCRIBE, l2, HttpProvider;
var init_http = __esm({
  "node_modules/@polkadot/rpc-provider/http/index.js"() {
    init_util();
    init_browser4();
    init_coder();
    init_defaults6();
    init_lru();
    ERROR_SUBSCRIBE = "HTTP Provider does not have subscriptions, use WebSockets instead";
    l2 = logger("api-http");
    HttpProvider = class _HttpProvider {
      __internal__callCache = new LRUCache();
      __internal__coder;
      __internal__endpoint;
      __internal__headers;
      __internal__stats;
      /**
       * @param {string} endpoint The endpoint url starting with http://
       */
      constructor(endpoint = defaults_default.HTTP_URL, headers = {}) {
        if (!/^(https|http):\/\//.test(endpoint)) {
          throw new Error(`Endpoint should start with 'http://' or 'https://', received '${endpoint}'`);
        }
        this.__internal__coder = new RpcCoder();
        this.__internal__endpoint = endpoint;
        this.__internal__headers = headers;
        this.__internal__stats = {
          active: { requests: 0, subscriptions: 0 },
          total: { bytesRecv: 0, bytesSent: 0, cached: 0, errors: 0, requests: 0, subscriptions: 0, timeout: 0 }
        };
      }
      /**
       * @summary `true` when this provider supports subscriptions
       */
      get hasSubscriptions() {
        return false;
      }
      /**
       * @description Returns a clone of the object
       */
      clone() {
        return new _HttpProvider(this.__internal__endpoint, this.__internal__headers);
      }
      /**
       * @description Manually connect from the connection
       */
      async connect() {
      }
      /**
       * @description Manually disconnect from the connection
       */
      async disconnect() {
      }
      /**
       * @description Returns the connection stats
       */
      get stats() {
        return this.__internal__stats;
      }
      /**
       * @summary `true` when this provider supports clone()
       */
      get isClonable() {
        return true;
      }
      /**
       * @summary Whether the node is connected or not.
       * @return {boolean} true if connected
       */
      get isConnected() {
        return true;
      }
      /**
       * @summary Events are not supported with the HttpProvider, see [[WsProvider]].
       * @description HTTP Provider does not have 'on' emitters. WebSockets should be used instead.
       */
      on(_type, _sub) {
        l2.error("HTTP Provider does not have 'on' emitters, use WebSockets instead");
        return noop;
      }
      /**
       * @summary Send HTTP POST Request with Body to configured HTTP Endpoint.
       */
      async send(method, params, isCacheable) {
        this.__internal__stats.total.requests++;
        const [, body] = this.__internal__coder.encodeJson(method, params);
        const cacheKey = isCacheable ? `${method}::${stringify(params)}` : "";
        let resultPromise = isCacheable ? this.__internal__callCache.get(cacheKey) : null;
        if (!resultPromise) {
          resultPromise = this.__internal__send(body);
          if (isCacheable) {
            this.__internal__callCache.set(cacheKey, resultPromise);
          }
        } else {
          this.__internal__stats.total.cached++;
        }
        return resultPromise;
      }
      async __internal__send(body) {
        this.__internal__stats.active.requests++;
        this.__internal__stats.total.bytesSent += body.length;
        try {
          const response = await fetch2(this.__internal__endpoint, {
            body,
            headers: {
              Accept: "application/json",
              "Content-Length": `${body.length}`,
              "Content-Type": "application/json",
              ...this.__internal__headers
            },
            method: "POST"
          });
          if (!response.ok) {
            throw new Error(`[${response.status}]: ${response.statusText}`);
          }
          const result = await response.text();
          this.__internal__stats.total.bytesRecv += result.length;
          const decoded = this.__internal__coder.decodeResponse(JSON.parse(result));
          this.__internal__stats.active.requests--;
          return decoded;
        } catch (e) {
          this.__internal__stats.active.requests--;
          this.__internal__stats.total.errors++;
          throw e;
        }
      }
      /**
       * @summary Subscriptions are not supported with the HttpProvider, see [[WsProvider]].
       */
      // eslint-disable-next-line @typescript-eslint/require-await
      async subscribe(_types, _method, _params, _cb) {
        l2.error(ERROR_SUBSCRIBE);
        throw new Error(ERROR_SUBSCRIBE);
      }
      /**
       * @summary Subscriptions are not supported with the HttpProvider, see [[WsProvider]].
       */
      // eslint-disable-next-line @typescript-eslint/require-await
      async unsubscribe(_type, _method, _id) {
        l2.error(ERROR_SUBSCRIBE);
        throw new Error(ERROR_SUBSCRIBE);
      }
    };
  }
});

// node_modules/@polkadot/rpc-provider/substrate-connect/Health.js
function healthChecker() {
  let checker = null;
  let sendJsonRpc = null;
  return {
    responsePassThrough: (jsonRpcResponse) => {
      if (checker === null) {
        return jsonRpcResponse;
      }
      return checker.responsePassThrough(jsonRpcResponse);
    },
    sendJsonRpc: (request) => {
      if (!sendJsonRpc) {
        throw new Error("setSendJsonRpc must be called before sending requests");
      }
      if (checker === null) {
        sendJsonRpc(request);
      } else {
        checker.sendJsonRpc(request);
      }
    },
    setSendJsonRpc: (cb) => {
      sendJsonRpc = cb;
    },
    start: (healthCallback) => {
      if (checker !== null) {
        throw new Error("Can't start the health checker multiple times in parallel");
      } else if (!sendJsonRpc) {
        throw new Error("setSendJsonRpc must be called before starting the health checks");
      }
      checker = new InnerChecker(healthCallback, sendJsonRpc);
      checker.update(true);
    },
    stop: () => {
      if (checker === null) {
        return;
      }
      checker.destroy();
      checker = null;
    }
  };
}
var InnerChecker;
var init_Health = __esm({
  "node_modules/@polkadot/rpc-provider/substrate-connect/Health.js"() {
    init_util();
    InnerChecker = class {
      __internal__healthCallback;
      __internal__currentHealthCheckId = null;
      __internal__currentHealthTimeout = null;
      __internal__currentSubunsubRequestId = null;
      __internal__currentSubscriptionId = null;
      __internal__requestToSmoldot;
      __internal__isSyncing = false;
      __internal__nextRequestId = 0;
      constructor(healthCallback, requestToSmoldot) {
        this.__internal__healthCallback = healthCallback;
        this.__internal__requestToSmoldot = (request) => requestToSmoldot(stringify(request));
      }
      sendJsonRpc = (request) => {
        let parsedRequest;
        try {
          parsedRequest = JSON.parse(request);
        } catch {
          return;
        }
        if (parsedRequest.id) {
          const newId = "extern:" + stringify(parsedRequest.id);
          parsedRequest.id = newId;
        }
        this.__internal__requestToSmoldot(parsedRequest);
      };
      responsePassThrough = (jsonRpcResponse) => {
        let parsedResponse;
        try {
          parsedResponse = JSON.parse(jsonRpcResponse);
        } catch {
          return jsonRpcResponse;
        }
        if (parsedResponse.id && this.__internal__currentHealthCheckId === parsedResponse.id) {
          this.__internal__currentHealthCheckId = null;
          if (!parsedResponse.result) {
            this.update(false);
            return null;
          }
          this.__internal__healthCallback(parsedResponse.result);
          this.__internal__isSyncing = parsedResponse.result.isSyncing;
          this.update(false);
          return null;
        }
        if (parsedResponse.id && this.__internal__currentSubunsubRequestId === parsedResponse.id) {
          this.__internal__currentSubunsubRequestId = null;
          if (!parsedResponse.result) {
            this.update(false);
            return null;
          }
          if (this.__internal__currentSubscriptionId) {
            this.__internal__currentSubscriptionId = null;
          } else {
            this.__internal__currentSubscriptionId = parsedResponse.result;
          }
          this.update(false);
          return null;
        }
        if (parsedResponse.params && this.__internal__currentSubscriptionId && parsedResponse.params.subscription === this.__internal__currentSubscriptionId) {
          this.update(true);
          return null;
        }
        if (parsedResponse.id) {
          const id = parsedResponse.id;
          if (!id.startsWith("extern:")) {
            throw new Error("State inconsistency in health checker");
          }
          const newId = JSON.parse(id.slice("extern:".length));
          parsedResponse.id = newId;
        }
        return stringify(parsedResponse);
      };
      update = (startNow) => {
        if (startNow && this.__internal__currentHealthTimeout) {
          clearTimeout(this.__internal__currentHealthTimeout);
          this.__internal__currentHealthTimeout = null;
        }
        if (!this.__internal__currentHealthTimeout) {
          const startHealthRequest = () => {
            this.__internal__currentHealthTimeout = null;
            if (this.__internal__currentHealthCheckId) {
              return;
            }
            this.__internal__currentHealthCheckId = `health-checker:${this.__internal__nextRequestId}`;
            this.__internal__nextRequestId += 1;
            this.__internal__requestToSmoldot({
              id: this.__internal__currentHealthCheckId,
              jsonrpc: "2.0",
              method: "system_health",
              params: []
            });
          };
          if (startNow) {
            startHealthRequest();
          } else {
            this.__internal__currentHealthTimeout = setTimeout(startHealthRequest, 1e3);
          }
        }
        if (this.__internal__isSyncing && !this.__internal__currentSubscriptionId && !this.__internal__currentSubunsubRequestId) {
          this.startSubscription();
        }
        if (!this.__internal__isSyncing && this.__internal__currentSubscriptionId && !this.__internal__currentSubunsubRequestId) {
          this.endSubscription();
        }
      };
      startSubscription = () => {
        if (this.__internal__currentSubunsubRequestId || this.__internal__currentSubscriptionId) {
          throw new Error("Internal error in health checker");
        }
        this.__internal__currentSubunsubRequestId = `health-checker:${this.__internal__nextRequestId}`;
        this.__internal__nextRequestId += 1;
        this.__internal__requestToSmoldot({
          id: this.__internal__currentSubunsubRequestId,
          jsonrpc: "2.0",
          method: "chain_subscribeNewHeads",
          params: []
        });
      };
      endSubscription = () => {
        if (this.__internal__currentSubunsubRequestId || !this.__internal__currentSubscriptionId) {
          throw new Error("Internal error in health checker");
        }
        this.__internal__currentSubunsubRequestId = `health-checker:${this.__internal__nextRequestId}`;
        this.__internal__nextRequestId += 1;
        this.__internal__requestToSmoldot({
          id: this.__internal__currentSubunsubRequestId,
          jsonrpc: "2.0",
          method: "chain_unsubscribeNewHeads",
          params: [this.__internal__currentSubscriptionId]
        });
      };
      destroy = () => {
        if (this.__internal__currentHealthTimeout) {
          clearTimeout(this.__internal__currentHealthTimeout);
          this.__internal__currentHealthTimeout = null;
        }
      };
    };
  }
});

// node_modules/@polkadot/rpc-provider/substrate-connect/index.js
var l3, subscriptionUnsubscriptionMethods, scClients, ScProvider;
var init_substrate_connect = __esm({
  "node_modules/@polkadot/rpc-provider/substrate-connect/index.js"() {
    init_eventemitter3();
    init_util();
    init_coder();
    init_Health();
    l3 = logger("api-substrate-connect");
    subscriptionUnsubscriptionMethods = /* @__PURE__ */ new Map([
      ["author_submitAndWatchExtrinsic", "author_unwatchExtrinsic"],
      ["chain_subscribeAllHeads", "chain_unsubscribeAllHeads"],
      ["chain_subscribeFinalizedHeads", "chain_unsubscribeFinalizedHeads"],
      ["chain_subscribeFinalisedHeads", "chain_subscribeFinalisedHeads"],
      ["chain_subscribeNewHeads", "chain_unsubscribeNewHeads"],
      ["chain_subscribeNewHead", "chain_unsubscribeNewHead"],
      ["chain_subscribeRuntimeVersion", "chain_unsubscribeRuntimeVersion"],
      ["subscribe_newHead", "unsubscribe_newHead"],
      ["state_subscribeRuntimeVersion", "state_unsubscribeRuntimeVersion"],
      ["state_subscribeStorage", "state_unsubscribeStorage"]
    ]);
    scClients = /* @__PURE__ */ new WeakMap();
    ScProvider = class {
      __internal__Sc;
      __internal__coder = new RpcCoder();
      __internal__spec;
      __internal__sharedSandbox;
      __internal__subscriptions = /* @__PURE__ */ new Map();
      __internal__resubscribeMethods = /* @__PURE__ */ new Map();
      __internal__requests = /* @__PURE__ */ new Map();
      __internal__wellKnownChains;
      __internal__eventemitter = new import_index.default();
      __internal__chain = null;
      __internal__isChainReady = false;
      constructor(Sc, spec2, sharedSandbox) {
        if (!isObject(Sc) || !isObject(Sc.WellKnownChain) || !isFunction(Sc.createScClient)) {
          throw new Error("Expected an @substrate/connect interface as first parameter to ScProvider");
        }
        this.__internal__Sc = Sc;
        this.__internal__spec = spec2;
        this.__internal__sharedSandbox = sharedSandbox;
        this.__internal__wellKnownChains = new Set(Object.values(Sc.WellKnownChain));
      }
      get hasSubscriptions() {
        return true;
      }
      get isClonable() {
        return false;
      }
      get isConnected() {
        return !!this.__internal__chain && this.__internal__isChainReady;
      }
      clone() {
        throw new Error("clone() is not supported.");
      }
      // Config details can be found in @substrate/connect repo following the link:
      // https://github.com/paritytech/substrate-connect/blob/main/packages/connect/src/connector/index.ts
      async connect(config5, checkerFactory = healthChecker) {
        if (this.isConnected) {
          throw new Error("Already connected!");
        }
        if (this.__internal__chain) {
          await this.__internal__chain;
          return;
        }
        if (this.__internal__sharedSandbox && !this.__internal__sharedSandbox.isConnected) {
          await this.__internal__sharedSandbox.connect();
        }
        const client = this.__internal__sharedSandbox ? scClients.get(this.__internal__sharedSandbox) : this.__internal__Sc.createScClient(config5);
        if (!client) {
          throw new Error("Unknown ScProvider!");
        }
        scClients.set(this, client);
        const hc = checkerFactory();
        const onResponse = (res) => {
          const hcRes = hc.responsePassThrough(res);
          if (!hcRes) {
            return;
          }
          const response = JSON.parse(hcRes);
          let decodedResponse;
          try {
            decodedResponse = this.__internal__coder.decodeResponse(response);
          } catch (e) {
            decodedResponse = e;
          }
          if (response.params?.subscription === void 0 || !response.method) {
            return this.__internal__requests.get(response.id)?.(decodedResponse);
          }
          const subscriptionId = `${response.method}::${response.params.subscription}`;
          const callback = this.__internal__subscriptions.get(subscriptionId)?.[0];
          callback?.(decodedResponse);
        };
        const addChain = this.__internal__sharedSandbox ? async (...args) => {
          const source = this.__internal__sharedSandbox;
          return (await source.__internal__chain).addChain(...args);
        } : this.__internal__wellKnownChains.has(this.__internal__spec) ? client.addWellKnownChain : client.addChain;
        this.__internal__chain = addChain(this.__internal__spec, onResponse).then((chain) => {
          hc.setSendJsonRpc(chain.sendJsonRpc);
          this.__internal__isChainReady = false;
          const cleanup = () => {
            const disconnectionError = new Error("Disconnected");
            this.__internal__requests.forEach((cb) => cb(disconnectionError));
            this.__internal__subscriptions.forEach(([cb]) => cb(disconnectionError));
            this.__internal__subscriptions.clear();
          };
          const staleSubscriptions = [];
          const killStaleSubscriptions = () => {
            if (staleSubscriptions.length === 0) {
              return;
            }
            const stale = staleSubscriptions.pop();
            if (!stale) {
              throw new Error("Unable to get stale subscription");
            }
            const { id, unsubscribeMethod } = stale;
            Promise.race([
              this.send(unsubscribeMethod, [id]).catch(noop),
              new Promise((resolve) => setTimeout(resolve, 500))
            ]).then(killStaleSubscriptions).catch(noop);
          };
          hc.start((health) => {
            const isReady2 = !health.isSyncing && (health.peers > 0 || !health.shouldHavePeers);
            if (this.__internal__isChainReady === isReady2) {
              return;
            }
            this.__internal__isChainReady = isReady2;
            if (!isReady2) {
              [...this.__internal__subscriptions.values()].forEach((s) => {
                staleSubscriptions.push(s[1]);
              });
              cleanup();
              this.__internal__eventemitter.emit("disconnected");
            } else {
              killStaleSubscriptions();
              this.__internal__eventemitter.emit("connected");
              if (this.__internal__resubscribeMethods.size) {
                this.__internal__resubscribe();
              }
            }
          });
          return objectSpread({}, chain, {
            remove: () => {
              hc.stop();
              chain.remove();
              cleanup();
            },
            sendJsonRpc: hc.sendJsonRpc.bind(hc)
          });
        });
        try {
          await this.__internal__chain;
        } catch (e) {
          this.__internal__chain = null;
          this.__internal__eventemitter.emit("error", e);
          throw e;
        }
      }
      __internal__resubscribe = () => {
        const promises = [];
        this.__internal__resubscribeMethods.forEach((subDetails) => {
          if (subDetails.type.startsWith("author_")) {
            return;
          }
          try {
            const promise = new Promise((resolve) => {
              this.subscribe(subDetails.type, subDetails.method, subDetails.params, subDetails.callback).catch((error) => console.log(error));
              resolve();
            });
            promises.push(promise);
          } catch (error) {
            l3.error(error);
          }
        });
        Promise.all(promises).catch((err) => l3.log(err));
      };
      async disconnect() {
        if (!this.__internal__chain) {
          return;
        }
        const chain = await this.__internal__chain;
        this.__internal__chain = null;
        this.__internal__isChainReady = false;
        try {
          chain.remove();
        } catch (_2) {
        }
        this.__internal__eventemitter.emit("disconnected");
      }
      on(type, sub) {
        if (type === "connected" && this.isConnected) {
          sub();
        }
        this.__internal__eventemitter.on(type, sub);
        return () => {
          this.__internal__eventemitter.removeListener(type, sub);
        };
      }
      async send(method, params) {
        if (!this.isConnected || !this.__internal__chain) {
          throw new Error("Provider is not connected");
        }
        const chain = await this.__internal__chain;
        const [id, json] = this.__internal__coder.encodeJson(method, params);
        const result = new Promise((resolve, reject) => {
          this.__internal__requests.set(id, (response) => {
            (isError(response) ? reject : resolve)(response);
          });
          try {
            chain.sendJsonRpc(json);
          } catch (e) {
            this.__internal__chain = null;
            try {
              chain.remove();
            } catch (_2) {
            }
            this.__internal__eventemitter.emit("error", e);
          }
        });
        try {
          return await result;
        } finally {
          this.__internal__requests.delete(id);
        }
      }
      async subscribe(type, method, params, callback) {
        if (!subscriptionUnsubscriptionMethods.has(method)) {
          throw new Error(`Unsupported subscribe method: ${method}`);
        }
        const id = await this.send(method, params);
        const subscriptionId = `${type}::${id}`;
        const cb = (response) => {
          if (response instanceof Error) {
            callback(response, void 0);
          } else {
            callback(null, response);
          }
        };
        const unsubscribeMethod = subscriptionUnsubscriptionMethods.get(method);
        if (!unsubscribeMethod) {
          throw new Error("Invalid unsubscribe method found");
        }
        this.__internal__resubscribeMethods.set(subscriptionId, { callback, method, params, type });
        this.__internal__subscriptions.set(subscriptionId, [cb, { id, unsubscribeMethod }]);
        return id;
      }
      unsubscribe(type, method, id) {
        if (!this.isConnected) {
          throw new Error("Provider is not connected");
        }
        const subscriptionId = `${type}::${id}`;
        if (!this.__internal__subscriptions.has(subscriptionId)) {
          return Promise.reject(new Error(`Unable to find active subscription=${subscriptionId}`));
        }
        this.__internal__resubscribeMethods.delete(subscriptionId);
        this.__internal__subscriptions.delete(subscriptionId);
        return this.send(method, [id]);
      }
    };
  }
});

// node_modules/@polkadot/x-ws/packageInfo.js
var packageInfo24;
var init_packageInfo24 = __esm({
  "node_modules/@polkadot/x-ws/packageInfo.js"() {
    packageInfo24 = { name: "@polkadot/x-ws", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "12.6.2" };
  }
});

// node_modules/@polkadot/x-ws/browser.js
var WebSocket2;
var init_browser5 = __esm({
  "node_modules/@polkadot/x-ws/browser.js"() {
    init_x_global();
    init_packageInfo24();
    WebSocket2 = xglobal.WebSocket;
  }
});

// node_modules/@polkadot/rpc-provider/ws/errors.js
function getWSErrorString(code) {
  if (code >= 0 && code <= 999) {
    return "(Unused)";
  } else if (code >= 1016) {
    if (code <= 1999) {
      return "(For WebSocket standard)";
    } else if (code <= 2999) {
      return "(For WebSocket extensions)";
    } else if (code <= 3999) {
      return "(For libraries and frameworks)";
    } else if (code <= 4999) {
      return "(For applications)";
    }
  }
  return known[code] || "(Unknown)";
}
var known;
var init_errors = __esm({
  "node_modules/@polkadot/rpc-provider/ws/errors.js"() {
    known = {
      1e3: "Normal Closure",
      1001: "Going Away",
      1002: "Protocol Error",
      1003: "Unsupported Data",
      1004: "(For future)",
      1005: "No Status Received",
      1006: "Abnormal Closure",
      1007: "Invalid frame payload data",
      1008: "Policy Violation",
      1009: "Message too big",
      1010: "Missing Extension",
      1011: "Internal Error",
      1012: "Service Restart",
      1013: "Try Again Later",
      1014: "Bad Gateway",
      1015: "TLS Handshake"
    };
  }
});

// node_modules/@polkadot/rpc-provider/ws/index.js
function eraseRecord(record, cb) {
  Object.keys(record).forEach((key) => {
    if (cb) {
      cb(record[key]);
    }
    delete record[key];
  });
}
function defaultEndpointStats() {
  return { bytesRecv: 0, bytesSent: 0, cached: 0, errors: 0, requests: 0, subscriptions: 0, timeout: 0 };
}
var ALIASES, RETRY_DELAY, DEFAULT_TIMEOUT_MS, TIMEOUT_INTERVAL, l4, WsProvider;
var init_ws = __esm({
  "node_modules/@polkadot/rpc-provider/ws/index.js"() {
    init_eventemitter3();
    init_util();
    init_x_global();
    init_browser5();
    init_coder();
    init_defaults6();
    init_lru();
    init_errors();
    ALIASES = {
      chain_finalisedHead: "chain_finalizedHead",
      chain_subscribeFinalisedHeads: "chain_subscribeFinalizedHeads",
      chain_unsubscribeFinalisedHeads: "chain_unsubscribeFinalizedHeads"
    };
    RETRY_DELAY = 2500;
    DEFAULT_TIMEOUT_MS = 60 * 1e3;
    TIMEOUT_INTERVAL = 5e3;
    l4 = logger("api-ws");
    WsProvider = class _WsProvider {
      __internal__callCache;
      __internal__coder;
      __internal__endpoints;
      __internal__headers;
      __internal__eventemitter;
      __internal__handlers = {};
      __internal__isReadyPromise;
      __internal__stats;
      __internal__waitingForId = {};
      __internal__autoConnectMs;
      __internal__endpointIndex;
      __internal__endpointStats;
      __internal__isConnected = false;
      __internal__subscriptions = {};
      __internal__timeoutId = null;
      __internal__websocket;
      __internal__timeout;
      /**
       * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
       * @param {number | false} autoConnectMs Whether to connect automatically or not (default). Provided value is used as a delay between retries.
       * @param {Record<string, string>} headers The headers provided to the underlying WebSocket
       * @param {number} [timeout] Custom timeout value used per request . Defaults to `DEFAULT_TIMEOUT_MS`
       */
      constructor(endpoint = defaults_default.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}, timeout2, cacheCapacity) {
        const endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];
        if (endpoints.length === 0) {
          throw new Error("WsProvider requires at least one Endpoint");
        }
        endpoints.forEach((endpoint2) => {
          if (!/^(wss|ws):\/\//.test(endpoint2)) {
            throw new Error(`Endpoint should start with 'ws://', received '${endpoint2}'`);
          }
        });
        this.__internal__callCache = new LRUCache(cacheCapacity || DEFAULT_CAPACITY);
        this.__internal__eventemitter = new import_index.default();
        this.__internal__autoConnectMs = autoConnectMs || 0;
        this.__internal__coder = new RpcCoder();
        this.__internal__endpointIndex = -1;
        this.__internal__endpoints = endpoints;
        this.__internal__headers = headers;
        this.__internal__websocket = null;
        this.__internal__stats = {
          active: { requests: 0, subscriptions: 0 },
          total: defaultEndpointStats()
        };
        this.__internal__endpointStats = defaultEndpointStats();
        this.__internal__timeout = timeout2 || DEFAULT_TIMEOUT_MS;
        if (autoConnectMs && autoConnectMs > 0) {
          this.connectWithRetry().catch(noop);
        }
        this.__internal__isReadyPromise = new Promise((resolve) => {
          this.__internal__eventemitter.once("connected", () => {
            resolve(this);
          });
        });
      }
      /**
       * @summary `true` when this provider supports subscriptions
       */
      get hasSubscriptions() {
        return true;
      }
      /**
       * @summary `true` when this provider supports clone()
       */
      get isClonable() {
        return true;
      }
      /**
       * @summary Whether the node is connected or not.
       * @return {boolean} true if connected
       */
      get isConnected() {
        return this.__internal__isConnected;
      }
      /**
       * @description Promise that resolves the first time we are connected and loaded
       */
      get isReady() {
        return this.__internal__isReadyPromise;
      }
      get endpoint() {
        return this.__internal__endpoints[this.__internal__endpointIndex];
      }
      /**
       * @description Returns a clone of the object
       */
      clone() {
        return new _WsProvider(this.__internal__endpoints);
      }
      selectEndpointIndex(endpoints) {
        return (this.__internal__endpointIndex + 1) % endpoints.length;
      }
      /**
       * @summary Manually connect
       * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
       * connect manually using this method.
       */
      // eslint-disable-next-line @typescript-eslint/require-await
      async connect() {
        if (this.__internal__websocket) {
          throw new Error("WebSocket is already connected");
        }
        try {
          this.__internal__endpointIndex = this.selectEndpointIndex(this.__internal__endpoints);
          this.__internal__websocket = typeof xglobal.WebSocket !== "undefined" && isChildClass(xglobal.WebSocket, WebSocket2) ? new WebSocket2(this.endpoint) : new WebSocket2(this.endpoint, void 0, {
            headers: this.__internal__headers
          });
          if (this.__internal__websocket) {
            this.__internal__websocket.onclose = this.__internal__onSocketClose;
            this.__internal__websocket.onerror = this.__internal__onSocketError;
            this.__internal__websocket.onmessage = this.__internal__onSocketMessage;
            this.__internal__websocket.onopen = this.__internal__onSocketOpen;
          }
          this.__internal__timeoutId = setInterval(() => this.__internal__timeoutHandlers(), TIMEOUT_INTERVAL);
        } catch (error) {
          l4.error(error);
          this.__internal__emit("error", error);
          throw error;
        }
      }
      /**
       * @description Connect, never throwing an error, but rather forcing a retry
       */
      async connectWithRetry() {
        if (this.__internal__autoConnectMs > 0) {
          try {
            await this.connect();
          } catch {
            setTimeout(() => {
              this.connectWithRetry().catch(noop);
            }, this.__internal__autoConnectMs);
          }
        }
      }
      /**
       * @description Manually disconnect from the connection, clearing auto-connect logic
       */
      // eslint-disable-next-line @typescript-eslint/require-await
      async disconnect() {
        this.__internal__autoConnectMs = 0;
        try {
          if (this.__internal__websocket) {
            this.__internal__websocket.close(1e3);
          }
        } catch (error) {
          l4.error(error);
          this.__internal__emit("error", error);
          throw error;
        }
      }
      /**
       * @description Returns the connection stats
       */
      get stats() {
        return {
          active: {
            requests: Object.keys(this.__internal__handlers).length,
            subscriptions: Object.keys(this.__internal__subscriptions).length
          },
          total: this.__internal__stats.total
        };
      }
      get endpointStats() {
        return this.__internal__endpointStats;
      }
      /**
       * @summary Listens on events after having subscribed using the [[subscribe]] function.
       * @param  {ProviderInterfaceEmitted} type Event
       * @param  {ProviderInterfaceEmitCb}  sub  Callback
       * @return unsubscribe function
       */
      on(type, sub) {
        this.__internal__eventemitter.on(type, sub);
        return () => {
          this.__internal__eventemitter.removeListener(type, sub);
        };
      }
      /**
       * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
       * @param method The RPC methods to execute
       * @param params Encoded parameters as applicable for the method
       * @param subscription Subscription details (internally used)
       */
      send(method, params, isCacheable, subscription) {
        this.__internal__endpointStats.requests++;
        this.__internal__stats.total.requests++;
        const [id, body] = this.__internal__coder.encodeJson(method, params);
        const cacheKey = isCacheable ? `${method}::${stringify(params)}` : "";
        let resultPromise = isCacheable ? this.__internal__callCache.get(cacheKey) : null;
        if (!resultPromise) {
          resultPromise = this.__internal__send(id, body, method, params, subscription);
          if (isCacheable) {
            this.__internal__callCache.set(cacheKey, resultPromise);
          }
        } else {
          this.__internal__endpointStats.cached++;
          this.__internal__stats.total.cached++;
        }
        return resultPromise;
      }
      async __internal__send(id, body, method, params, subscription) {
        return new Promise((resolve, reject) => {
          try {
            if (!this.isConnected || this.__internal__websocket === null) {
              throw new Error("WebSocket is not connected");
            }
            const callback = (error, result) => {
              error ? reject(error) : resolve(result);
            };
            l4.debug(() => ["calling", method, body]);
            this.__internal__handlers[id] = {
              callback,
              method,
              params,
              start: Date.now(),
              subscription
            };
            const bytesSent = body.length;
            this.__internal__endpointStats.bytesSent += bytesSent;
            this.__internal__stats.total.bytesSent += bytesSent;
            this.__internal__websocket.send(body);
          } catch (error) {
            this.__internal__endpointStats.errors++;
            this.__internal__stats.total.errors++;
            reject(error);
          }
        });
      }
      /**
       * @name subscribe
       * @summary Allows subscribing to a specific event.
       *
       * @example
       * <BR>
       *
       * ```javascript
       * const provider = new WsProvider('ws://127.0.0.1:9944');
       * const rpc = new Rpc(provider);
       *
       * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
       *   console.log(values)
       * }).then((subscriptionId) => {
       *   console.log('balance changes subscription id: ', subscriptionId)
       * })
       * ```
       */
      subscribe(type, method, params, callback) {
        this.__internal__endpointStats.subscriptions++;
        this.__internal__stats.total.subscriptions++;
        return this.send(method, params, false, { callback, type });
      }
      /**
       * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
       */
      async unsubscribe(type, method, id) {
        const subscription = `${type}::${id}`;
        if (isUndefined(this.__internal__subscriptions[subscription])) {
          l4.debug(() => `Unable to find active subscription=${subscription}`);
          return false;
        }
        delete this.__internal__subscriptions[subscription];
        try {
          return this.isConnected && !isNull(this.__internal__websocket) ? this.send(method, [id]) : true;
        } catch {
          return false;
        }
      }
      __internal__emit = (type, ...args) => {
        this.__internal__eventemitter.emit(type, ...args);
      };
      __internal__onSocketClose = (event) => {
        const error = new Error(`disconnected from ${this.endpoint}: ${event.code}:: ${event.reason || getWSErrorString(event.code)}`);
        if (this.__internal__autoConnectMs > 0) {
          l4.error(error.message);
        }
        this.__internal__isConnected = false;
        if (this.__internal__websocket) {
          this.__internal__websocket.onclose = null;
          this.__internal__websocket.onerror = null;
          this.__internal__websocket.onmessage = null;
          this.__internal__websocket.onopen = null;
          this.__internal__websocket = null;
        }
        if (this.__internal__timeoutId) {
          clearInterval(this.__internal__timeoutId);
          this.__internal__timeoutId = null;
        }
        eraseRecord(this.__internal__handlers, (h2) => {
          try {
            h2.callback(error, void 0);
          } catch (err) {
            l4.error(err);
          }
        });
        eraseRecord(this.__internal__waitingForId);
        this.__internal__endpointStats = defaultEndpointStats();
        this.__internal__emit("disconnected");
        if (this.__internal__autoConnectMs > 0) {
          setTimeout(() => {
            this.connectWithRetry().catch(noop);
          }, this.__internal__autoConnectMs);
        }
      };
      __internal__onSocketError = (error) => {
        l4.debug(() => ["socket error", error]);
        this.__internal__emit("error", error);
      };
      __internal__onSocketMessage = (message) => {
        l4.debug(() => ["received", message.data]);
        const bytesRecv = message.data.length;
        this.__internal__endpointStats.bytesRecv += bytesRecv;
        this.__internal__stats.total.bytesRecv += bytesRecv;
        const response = JSON.parse(message.data);
        return isUndefined(response.method) ? this.__internal__onSocketMessageResult(response) : this.__internal__onSocketMessageSubscribe(response);
      };
      __internal__onSocketMessageResult = (response) => {
        const handler = this.__internal__handlers[response.id];
        if (!handler) {
          l4.debug(() => `Unable to find handler for id=${response.id}`);
          return;
        }
        try {
          const { method, params, subscription } = handler;
          const result = this.__internal__coder.decodeResponse(response);
          handler.callback(null, result);
          if (subscription) {
            const subId = `${subscription.type}::${result}`;
            this.__internal__subscriptions[subId] = objectSpread({}, subscription, {
              method,
              params
            });
            if (this.__internal__waitingForId[subId]) {
              this.__internal__onSocketMessageSubscribe(this.__internal__waitingForId[subId]);
            }
          }
        } catch (error) {
          this.__internal__endpointStats.errors++;
          this.__internal__stats.total.errors++;
          handler.callback(error, void 0);
        }
        delete this.__internal__handlers[response.id];
      };
      __internal__onSocketMessageSubscribe = (response) => {
        if (!response.method) {
          throw new Error("No method found in JSONRPC response");
        }
        const method = ALIASES[response.method] || response.method;
        const subId = `${method}::${response.params.subscription}`;
        const handler = this.__internal__subscriptions[subId];
        if (!handler) {
          this.__internal__waitingForId[subId] = response;
          l4.debug(() => `Unable to find handler for subscription=${subId}`);
          return;
        }
        delete this.__internal__waitingForId[subId];
        try {
          const result = this.__internal__coder.decodeResponse(response);
          handler.callback(null, result);
        } catch (error) {
          this.__internal__endpointStats.errors++;
          this.__internal__stats.total.errors++;
          handler.callback(error, void 0);
        }
      };
      __internal__onSocketOpen = () => {
        if (this.__internal__websocket === null) {
          throw new Error("WebSocket cannot be null in onOpen");
        }
        l4.debug(() => ["connected to", this.endpoint]);
        this.__internal__isConnected = true;
        this.__internal__resubscribe();
        this.__internal__emit("connected");
        return true;
      };
      __internal__resubscribe = () => {
        const subscriptions = this.__internal__subscriptions;
        this.__internal__subscriptions = {};
        Promise.all(Object.keys(subscriptions).map(async (id) => {
          const { callback, method, params, type } = subscriptions[id];
          if (type.startsWith("author_")) {
            return;
          }
          try {
            await this.subscribe(type, method, params, callback);
          } catch (error) {
            l4.error(error);
          }
        })).catch(l4.error);
      };
      __internal__timeoutHandlers = () => {
        const now = Date.now();
        const ids = Object.keys(this.__internal__handlers);
        for (let i = 0, count2 = ids.length; i < count2; i++) {
          const handler = this.__internal__handlers[ids[i]];
          if (now - handler.start > this.__internal__timeout) {
            try {
              handler.callback(new Error(`No response received from RPC endpoint in ${this.__internal__timeout / 1e3}s`), void 0);
            } catch {
            }
            this.__internal__endpointStats.timeout++;
            this.__internal__stats.total.timeout++;
            delete this.__internal__handlers[ids[i]];
          }
        }
      };
    };
  }
});

// node_modules/@polkadot/rpc-provider/bundle.js
var init_bundle9 = __esm({
  "node_modules/@polkadot/rpc-provider/bundle.js"() {
    init_http();
    init_packageInfo3();
    init_substrate_connect();
    init_ws();
  }
});

// node_modules/@polkadot/rpc-provider/index.js
var init_rpc_provider = __esm({
  "node_modules/@polkadot/rpc-provider/index.js"() {
    init_packageDetect7();
    init_bundle9();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function isFunction2(value) {
  return typeof value === "function";
}
var init_isFunction = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isFunction.js"() {
  }
});

// node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
  var _super = function(instance) {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}
var init_createErrorClass = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js"() {
  }
});

// node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
var UnsubscriptionError;
var init_UnsubscriptionError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js"() {
    init_createErrorClass();
    UnsubscriptionError = createErrorClass(function(_super) {
      return function UnsubscriptionErrorImpl(errors) {
        _super(this);
        this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
          return i + 1 + ") " + err.toString();
        }).join("\n  ") : "";
        this.name = "UnsubscriptionError";
        this.errors = errors;
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}
var init_arrRemove = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/arrRemove.js"() {
  }
});

// node_modules/rxjs/dist/esm5/internal/Subscription.js
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction2(value.remove) && isFunction2(value.add) && isFunction2(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction2(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}
var Subscription, EMPTY_SUBSCRIPTION;
var init_Subscription = __esm({
  "node_modules/rxjs/dist/esm5/internal/Subscription.js"() {
    init_tslib_es6();
    init_isFunction();
    init_UnsubscriptionError();
    init_arrRemove();
    Subscription = function() {
      function Subscription2(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
      }
      Subscription2.prototype.unsubscribe = function() {
        var e_1, _a, e_2, _b;
        var errors;
        if (!this.closed) {
          this.closed = true;
          var _parentage = this._parentage;
          if (_parentage) {
            this._parentage = null;
            if (Array.isArray(_parentage)) {
              try {
                for (var _parentage_1 = __values2(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                  var parent_1 = _parentage_1_1.value;
                  parent_1.remove(this);
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                } finally {
                  if (e_1) throw e_1.error;
                }
              }
            } else {
              _parentage.remove(this);
            }
          }
          var initialFinalizer = this.initialTeardown;
          if (isFunction2(initialFinalizer)) {
            try {
              initialFinalizer();
            } catch (e) {
              errors = e instanceof UnsubscriptionError ? e.errors : [e];
            }
          }
          var _finalizers = this._finalizers;
          if (_finalizers) {
            this._finalizers = null;
            try {
              for (var _finalizers_1 = __values2(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                var finalizer = _finalizers_1_1.value;
                try {
                  execFinalizer(finalizer);
                } catch (err) {
                  errors = errors !== null && errors !== void 0 ? errors : [];
                  if (err instanceof UnsubscriptionError) {
                    errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                  } else {
                    errors.push(err);
                  }
                }
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
              } finally {
                if (e_2) throw e_2.error;
              }
            }
          }
          if (errors) {
            throw new UnsubscriptionError(errors);
          }
        }
      };
      Subscription2.prototype.add = function(teardown) {
        var _a;
        if (teardown && teardown !== this) {
          if (this.closed) {
            execFinalizer(teardown);
          } else {
            if (teardown instanceof Subscription2) {
              if (teardown.closed || teardown._hasParent(this)) {
                return;
              }
              teardown._addParent(this);
            }
            (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
          }
        }
      };
      Subscription2.prototype._hasParent = function(parent) {
        var _parentage = this._parentage;
        return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
      };
      Subscription2.prototype._addParent = function(parent) {
        var _parentage = this._parentage;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
      };
      Subscription2.prototype._removeParent = function(parent) {
        var _parentage = this._parentage;
        if (_parentage === parent) {
          this._parentage = null;
        } else if (Array.isArray(_parentage)) {
          arrRemove(_parentage, parent);
        }
      };
      Subscription2.prototype.remove = function(teardown) {
        var _finalizers = this._finalizers;
        _finalizers && arrRemove(_finalizers, teardown);
        if (teardown instanceof Subscription2) {
          teardown._removeParent(this);
        }
      };
      Subscription2.EMPTY = function() {
        var empty3 = new Subscription2();
        empty3.closed = true;
        return empty3;
      }();
      return Subscription2;
    }();
    EMPTY_SUBSCRIPTION = Subscription.EMPTY;
  }
});

// node_modules/rxjs/dist/esm5/internal/config.js
var config4;
var init_config = __esm({
  "node_modules/rxjs/dist/esm5/internal/config.js"() {
    config4 = {
      onUnhandledError: null,
      onStoppedNotification: null,
      Promise: void 0,
      useDeprecatedSynchronousErrorHandling: false,
      useDeprecatedNextContext: false
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
var timeoutProvider;
var init_timeoutProvider = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js"() {
    init_tslib_es6();
    timeoutProvider = {
      setTimeout: function(handler, timeout2) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
        }
        var delegate = timeoutProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
          return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
        }
        return setTimeout.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
      },
      clearTimeout: function(handle) {
        var delegate = timeoutProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function() {
    var onUnhandledError = config4.onUnhandledError;
    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}
var init_reportUnhandledError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js"() {
    init_config();
    init_timeoutProvider();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/noop.js
function noop2() {
}
var init_noop2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/noop.js"() {
  }
});

// node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}
var COMPLETE_NOTIFICATION;
var init_NotificationFactories = __esm({
  "node_modules/rxjs/dist/esm5/internal/NotificationFactories.js"() {
    COMPLETE_NOTIFICATION = function() {
      return createNotification("C", void 0, void 0);
    }();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/errorContext.js
function errorContext(cb) {
  if (config4.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot) {
      context = { errorThrown: false, error: null };
    }
    cb();
    if (isRoot) {
      var _a = context, errorThrown = _a.errorThrown, error = _a.error;
      context = null;
      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}
function captureError(err) {
  if (config4.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}
var context;
var init_errorContext = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/errorContext.js"() {
    init_config();
    context = null;
  }
});

// node_modules/rxjs/dist/esm5/internal/Subscriber.js
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
function handleUnhandledError(error) {
  if (config4.useDeprecatedSynchronousErrorHandling) {
    captureError(error);
  } else {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = config4.onStoppedNotification;
  onStoppedNotification && timeoutProvider.setTimeout(function() {
    return onStoppedNotification(notification, subscriber);
  });
}
var Subscriber, _bind, ConsumerObserver, SafeSubscriber, EMPTY_OBSERVER;
var init_Subscriber = __esm({
  "node_modules/rxjs/dist/esm5/internal/Subscriber.js"() {
    init_tslib_es6();
    init_isFunction();
    init_Subscription();
    init_config();
    init_reportUnhandledError();
    init_noop2();
    init_NotificationFactories();
    init_timeoutProvider();
    init_errorContext();
    Subscriber = function(_super) {
      __extends(Subscriber2, _super);
      function Subscriber2(destination) {
        var _this = _super.call(this) || this;
        _this.isStopped = false;
        if (destination) {
          _this.destination = destination;
          if (isSubscription(destination)) {
            destination.add(_this);
          }
        } else {
          _this.destination = EMPTY_OBSERVER;
        }
        return _this;
      }
      Subscriber2.create = function(next, error, complete) {
        return new SafeSubscriber(next, error, complete);
      };
      Subscriber2.prototype.next = function(value) {
        if (this.isStopped) {
          handleStoppedNotification(nextNotification(value), this);
        } else {
          this._next(value);
        }
      };
      Subscriber2.prototype.error = function(err) {
        if (this.isStopped) {
          handleStoppedNotification(errorNotification(err), this);
        } else {
          this.isStopped = true;
          this._error(err);
        }
      };
      Subscriber2.prototype.complete = function() {
        if (this.isStopped) {
          handleStoppedNotification(COMPLETE_NOTIFICATION, this);
        } else {
          this.isStopped = true;
          this._complete();
        }
      };
      Subscriber2.prototype.unsubscribe = function() {
        if (!this.closed) {
          this.isStopped = true;
          _super.prototype.unsubscribe.call(this);
          this.destination = null;
        }
      };
      Subscriber2.prototype._next = function(value) {
        this.destination.next(value);
      };
      Subscriber2.prototype._error = function(err) {
        try {
          this.destination.error(err);
        } finally {
          this.unsubscribe();
        }
      };
      Subscriber2.prototype._complete = function() {
        try {
          this.destination.complete();
        } finally {
          this.unsubscribe();
        }
      };
      return Subscriber2;
    }(Subscription);
    _bind = Function.prototype.bind;
    ConsumerObserver = function() {
      function ConsumerObserver2(partialObserver) {
        this.partialObserver = partialObserver;
      }
      ConsumerObserver2.prototype.next = function(value) {
        var partialObserver = this.partialObserver;
        if (partialObserver.next) {
          try {
            partialObserver.next(value);
          } catch (error) {
            handleUnhandledError(error);
          }
        }
      };
      ConsumerObserver2.prototype.error = function(err) {
        var partialObserver = this.partialObserver;
        if (partialObserver.error) {
          try {
            partialObserver.error(err);
          } catch (error) {
            handleUnhandledError(error);
          }
        } else {
          handleUnhandledError(err);
        }
      };
      ConsumerObserver2.prototype.complete = function() {
        var partialObserver = this.partialObserver;
        if (partialObserver.complete) {
          try {
            partialObserver.complete();
          } catch (error) {
            handleUnhandledError(error);
          }
        }
      };
      return ConsumerObserver2;
    }();
    SafeSubscriber = function(_super) {
      __extends(SafeSubscriber2, _super);
      function SafeSubscriber2(observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        var partialObserver;
        if (isFunction2(observerOrNext) || !observerOrNext) {
          partialObserver = {
            next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
            error: error !== null && error !== void 0 ? error : void 0,
            complete: complete !== null && complete !== void 0 ? complete : void 0
          };
        } else {
          var context_1;
          if (_this && config4.useDeprecatedNextContext) {
            context_1 = Object.create(observerOrNext);
            context_1.unsubscribe = function() {
              return _this.unsubscribe();
            };
            partialObserver = {
              next: observerOrNext.next && bind(observerOrNext.next, context_1),
              error: observerOrNext.error && bind(observerOrNext.error, context_1),
              complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
            };
          } else {
            partialObserver = observerOrNext;
          }
        }
        _this.destination = new ConsumerObserver(partialObserver);
        return _this;
      }
      return SafeSubscriber2;
    }(Subscriber);
    EMPTY_OBSERVER = {
      closed: true,
      next: noop2,
      error: defaultErrorHandler,
      complete: noop2
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var observable;
var init_observable2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/symbol/observable.js"() {
    observable = function() {
      return typeof Symbol === "function" && Symbol.observable || "@@observable";
    }();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/identity.js
function identity2(x) {
  return x;
}
var init_identity = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/identity.js"() {
  }
});

// node_modules/rxjs/dist/esm5/internal/util/pipe.js
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity2;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function(prev, fn) {
      return fn(prev);
    }, input);
  };
}
var init_pipe = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/pipe.js"() {
    init_identity();
  }
});

// node_modules/rxjs/dist/esm5/internal/Observable.js
function getPromiseCtor(promiseCtor) {
  var _a;
  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config4.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
  return value && isFunction2(value.next) && isFunction2(value.error) && isFunction2(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}
var Observable;
var init_Observable = __esm({
  "node_modules/rxjs/dist/esm5/internal/Observable.js"() {
    init_Subscriber();
    init_Subscription();
    init_observable2();
    init_pipe();
    init_config();
    init_isFunction();
    init_errorContext();
    Observable = function() {
      function Observable2(subscribe) {
        if (subscribe) {
          this._subscribe = subscribe;
        }
      }
      Observable2.prototype.lift = function(operator) {
        var observable2 = new Observable2();
        observable2.source = this;
        observable2.operator = operator;
        return observable2;
      };
      Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
        var _this = this;
        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
        errorContext(function() {
          var _a = _this, operator = _a.operator, source = _a.source;
          subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
        });
        return subscriber;
      };
      Observable2.prototype._trySubscribe = function(sink) {
        try {
          return this._subscribe(sink);
        } catch (err) {
          sink.error(err);
        }
      };
      Observable2.prototype.forEach = function(next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function(resolve, reject) {
          var subscriber = new SafeSubscriber({
            next: function(value) {
              try {
                next(value);
              } catch (err) {
                reject(err);
                subscriber.unsubscribe();
              }
            },
            error: reject,
            complete: resolve
          });
          _this.subscribe(subscriber);
        });
      };
      Observable2.prototype._subscribe = function(subscriber) {
        var _a;
        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
      };
      Observable2.prototype[observable] = function() {
        return this;
      };
      Observable2.prototype.pipe = function() {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          operations[_i] = arguments[_i];
        }
        return pipeFromArray(operations)(this);
      };
      Observable2.prototype.toPromise = function(promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function(resolve, reject) {
          var value;
          _this.subscribe(function(x) {
            return value = x;
          }, function(err) {
            return reject(err);
          }, function() {
            return resolve(value);
          });
        });
      };
      Observable2.create = function(subscribe) {
        return new Observable2(subscribe);
      };
      return Observable2;
    }();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/lift.js
function hasLift(source) {
  return isFunction2(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init2) {
  return function(source) {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init2(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}
var init_lift = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/lift.js"() {
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber;
var init_OperatorSubscriber = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"() {
    init_tslib_es6();
    init_Subscriber();
    OperatorSubscriber = function(_super) {
      __extends(OperatorSubscriber2, _super);
      function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        var _this = _super.call(this, destination) || this;
        _this.onFinalize = onFinalize;
        _this.shouldUnsubscribe = shouldUnsubscribe;
        _this._next = onNext ? function(value) {
          try {
            onNext(value);
          } catch (err) {
            destination.error(err);
          }
        } : _super.prototype._next;
        _this._error = onError ? function(err) {
          try {
            onError(err);
          } catch (err2) {
            destination.error(err2);
          } finally {
            this.unsubscribe();
          }
        } : _super.prototype._error;
        _this._complete = onComplete ? function() {
          try {
            onComplete();
          } catch (err) {
            destination.error(err);
          } finally {
            this.unsubscribe();
          }
        } : _super.prototype._complete;
        return _this;
      }
      OperatorSubscriber2.prototype.unsubscribe = function() {
        var _a;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
          var closed_1 = this.closed;
          _super.prototype.unsubscribe.call(this);
          !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
        }
      };
      return OperatorSubscriber2;
    }(Subscriber);
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/refCount.js
function refCount() {
  return operate(function(source, subscriber) {
    var connection = null;
    source._refCount++;
    var refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      var sharedConnection = source._connection;
      var conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}
var init_refCount = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/refCount.js"() {
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
var ConnectableObservable;
var init_ConnectableObservable = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js"() {
    init_tslib_es6();
    init_Observable();
    init_Subscription();
    init_refCount();
    init_OperatorSubscriber();
    init_lift();
    ConnectableObservable = function(_super) {
      __extends(ConnectableObservable2, _super);
      function ConnectableObservable2(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._subject = null;
        _this._refCount = 0;
        _this._connection = null;
        if (hasLift(source)) {
          _this.lift = source.lift;
        }
        return _this;
      }
      ConnectableObservable2.prototype._subscribe = function(subscriber) {
        return this.getSubject().subscribe(subscriber);
      };
      ConnectableObservable2.prototype.getSubject = function() {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
          this._subject = this.subjectFactory();
        }
        return this._subject;
      };
      ConnectableObservable2.prototype._teardown = function() {
        this._refCount = 0;
        var _connection = this._connection;
        this._subject = this._connection = null;
        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
      };
      ConnectableObservable2.prototype.connect = function() {
        var _this = this;
        var connection = this._connection;
        if (!connection) {
          connection = this._connection = new Subscription();
          var subject_1 = this.getSubject();
          connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, void 0, function() {
            _this._teardown();
            subject_1.complete();
          }, function(err) {
            _this._teardown();
            subject_1.error(err);
          }, function() {
            return _this._teardown();
          })));
          if (connection.closed) {
            this._connection = null;
            connection = Subscription.EMPTY;
          }
        }
        return connection;
      };
      ConnectableObservable2.prototype.refCount = function() {
        return refCount()(this);
      };
      return ConnectableObservable2;
    }(Observable);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/performanceTimestampProvider.js
var performanceTimestampProvider;
var init_performanceTimestampProvider = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/performanceTimestampProvider.js"() {
    performanceTimestampProvider = {
      now: function() {
        return (performanceTimestampProvider.delegate || performance).now();
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/animationFrameProvider.js
var animationFrameProvider;
var init_animationFrameProvider = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/animationFrameProvider.js"() {
    init_tslib_es6();
    init_Subscription();
    animationFrameProvider = {
      schedule: function(callback) {
        var request = requestAnimationFrame;
        var cancel = cancelAnimationFrame;
        var delegate = animationFrameProvider.delegate;
        if (delegate) {
          request = delegate.requestAnimationFrame;
          cancel = delegate.cancelAnimationFrame;
        }
        var handle = request(function(timestamp2) {
          cancel = void 0;
          callback(timestamp2);
        });
        return new Subscription(function() {
          return cancel === null || cancel === void 0 ? void 0 : cancel(handle);
        });
      },
      requestAnimationFrame: function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var delegate = animationFrameProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
      },
      cancelAnimationFrame: function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var delegate = animationFrameProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js
function animationFramesFactory(timestampProvider) {
  return new Observable(function(subscriber) {
    var provider = timestampProvider || performanceTimestampProvider;
    var start = provider.now();
    var id = 0;
    var run = function() {
      if (!subscriber.closed) {
        id = animationFrameProvider.requestAnimationFrame(function(timestamp2) {
          id = 0;
          var now = provider.now();
          subscriber.next({
            timestamp: timestampProvider ? now : timestamp2,
            elapsed: now - start
          });
          run();
        });
      }
    };
    run();
    return function() {
      if (id) {
        animationFrameProvider.cancelAnimationFrame(id);
      }
    };
  });
}
var DEFAULT_ANIMATION_FRAMES;
var init_animationFrames = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js"() {
    init_Observable();
    init_performanceTimestampProvider();
    init_animationFrameProvider();
    DEFAULT_ANIMATION_FRAMES = animationFramesFactory();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
var ObjectUnsubscribedError;
var init_ObjectUnsubscribedError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js"() {
    init_createErrorClass();
    ObjectUnsubscribedError = createErrorClass(function(_super) {
      return function ObjectUnsubscribedErrorImpl() {
        _super(this);
        this.name = "ObjectUnsubscribedError";
        this.message = "object unsubscribed";
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/Subject.js
var Subject, AnonymousSubject;
var init_Subject = __esm({
  "node_modules/rxjs/dist/esm5/internal/Subject.js"() {
    init_tslib_es6();
    init_Observable();
    init_Subscription();
    init_ObjectUnsubscribedError();
    init_arrRemove();
    init_errorContext();
    Subject = function(_super) {
      __extends(Subject2, _super);
      function Subject2() {
        var _this = _super.call(this) || this;
        _this.closed = false;
        _this.currentObservers = null;
        _this.observers = [];
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
      }
      Subject2.prototype.lift = function(operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
      };
      Subject2.prototype._throwIfClosed = function() {
        if (this.closed) {
          throw new ObjectUnsubscribedError();
        }
      };
      Subject2.prototype.next = function(value) {
        var _this = this;
        errorContext(function() {
          var e_1, _a;
          _this._throwIfClosed();
          if (!_this.isStopped) {
            if (!_this.currentObservers) {
              _this.currentObservers = Array.from(_this.observers);
            }
            try {
              for (var _b = __values2(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                var observer = _c.value;
                observer.next(value);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              } finally {
                if (e_1) throw e_1.error;
              }
            }
          }
        });
      };
      Subject2.prototype.error = function(err) {
        var _this = this;
        errorContext(function() {
          _this._throwIfClosed();
          if (!_this.isStopped) {
            _this.hasError = _this.isStopped = true;
            _this.thrownError = err;
            var observers = _this.observers;
            while (observers.length) {
              observers.shift().error(err);
            }
          }
        });
      };
      Subject2.prototype.complete = function() {
        var _this = this;
        errorContext(function() {
          _this._throwIfClosed();
          if (!_this.isStopped) {
            _this.isStopped = true;
            var observers = _this.observers;
            while (observers.length) {
              observers.shift().complete();
            }
          }
        });
      };
      Subject2.prototype.unsubscribe = function() {
        this.isStopped = this.closed = true;
        this.observers = this.currentObservers = null;
      };
      Object.defineProperty(Subject2.prototype, "observed", {
        get: function() {
          var _a;
          return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
        },
        enumerable: false,
        configurable: true
      });
      Subject2.prototype._trySubscribe = function(subscriber) {
        this._throwIfClosed();
        return _super.prototype._trySubscribe.call(this, subscriber);
      };
      Subject2.prototype._subscribe = function(subscriber) {
        this._throwIfClosed();
        this._checkFinalizedStatuses(subscriber);
        return this._innerSubscribe(subscriber);
      };
      Subject2.prototype._innerSubscribe = function(subscriber) {
        var _this = this;
        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
        if (hasError || isStopped) {
          return EMPTY_SUBSCRIPTION;
        }
        this.currentObservers = null;
        observers.push(subscriber);
        return new Subscription(function() {
          _this.currentObservers = null;
          arrRemove(observers, subscriber);
        });
      };
      Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
        if (hasError) {
          subscriber.error(thrownError);
        } else if (isStopped) {
          subscriber.complete();
        }
      };
      Subject2.prototype.asObservable = function() {
        var observable2 = new Observable();
        observable2.source = this;
        return observable2;
      };
      Subject2.create = function(destination, source) {
        return new AnonymousSubject(destination, source);
      };
      return Subject2;
    }(Observable);
    AnonymousSubject = function(_super) {
      __extends(AnonymousSubject2, _super);
      function AnonymousSubject2(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
      }
      AnonymousSubject2.prototype.next = function(value) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
      };
      AnonymousSubject2.prototype.error = function(err) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
      };
      AnonymousSubject2.prototype.complete = function() {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
      };
      AnonymousSubject2.prototype._subscribe = function(subscriber) {
        var _a, _b;
        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
      };
      return AnonymousSubject2;
    }(Subject);
  }
});

// node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js
var BehaviorSubject;
var init_BehaviorSubject = __esm({
  "node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js"() {
    init_tslib_es6();
    init_Subject();
    BehaviorSubject = function(_super) {
      __extends(BehaviorSubject2, _super);
      function BehaviorSubject2(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
      }
      Object.defineProperty(BehaviorSubject2.prototype, "value", {
        get: function() {
          return this.getValue();
        },
        enumerable: false,
        configurable: true
      });
      BehaviorSubject2.prototype._subscribe = function(subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        !subscription.closed && subscriber.next(this._value);
        return subscription;
      };
      BehaviorSubject2.prototype.getValue = function() {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
        if (hasError) {
          throw thrownError;
        }
        this._throwIfClosed();
        return _value;
      };
      BehaviorSubject2.prototype.next = function(value) {
        _super.prototype.next.call(this, this._value = value);
      };
      return BehaviorSubject2;
    }(Subject);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
var dateTimestampProvider;
var init_dateTimestampProvider = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js"() {
    dateTimestampProvider = {
      now: function() {
        return (dateTimestampProvider.delegate || Date).now();
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
var ReplaySubject;
var init_ReplaySubject = __esm({
  "node_modules/rxjs/dist/esm5/internal/ReplaySubject.js"() {
    init_tslib_es6();
    init_Subject();
    init_dateTimestampProvider();
    ReplaySubject = function(_super) {
      __extends(ReplaySubject2, _super);
      function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
        if (_bufferSize === void 0) {
          _bufferSize = Infinity;
        }
        if (_windowTime === void 0) {
          _windowTime = Infinity;
        }
        if (_timestampProvider === void 0) {
          _timestampProvider = dateTimestampProvider;
        }
        var _this = _super.call(this) || this;
        _this._bufferSize = _bufferSize;
        _this._windowTime = _windowTime;
        _this._timestampProvider = _timestampProvider;
        _this._buffer = [];
        _this._infiniteTimeWindow = true;
        _this._infiniteTimeWindow = _windowTime === Infinity;
        _this._bufferSize = Math.max(1, _bufferSize);
        _this._windowTime = Math.max(1, _windowTime);
        return _this;
      }
      ReplaySubject2.prototype.next = function(value) {
        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
        if (!isStopped) {
          _buffer.push(value);
          !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
        }
        this._trimBuffer();
        _super.prototype.next.call(this, value);
      };
      ReplaySubject2.prototype._subscribe = function(subscriber) {
        this._throwIfClosed();
        this._trimBuffer();
        var subscription = this._innerSubscribe(subscriber);
        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
        var copy = _buffer.slice();
        for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
          subscriber.next(copy[i]);
        }
        this._checkFinalizedStatuses(subscriber);
        return subscription;
      };
      ReplaySubject2.prototype._trimBuffer = function() {
        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
        if (!_infiniteTimeWindow) {
          var now = _timestampProvider.now();
          var last3 = 0;
          for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
            last3 = i;
          }
          last3 && _buffer.splice(0, last3 + 1);
        }
      };
      return ReplaySubject2;
    }(Subject);
  }
});

// node_modules/rxjs/dist/esm5/internal/AsyncSubject.js
var AsyncSubject;
var init_AsyncSubject = __esm({
  "node_modules/rxjs/dist/esm5/internal/AsyncSubject.js"() {
    init_tslib_es6();
    init_Subject();
    AsyncSubject = function(_super) {
      __extends(AsyncSubject2, _super);
      function AsyncSubject2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._value = null;
        _this._hasValue = false;
        _this._isComplete = false;
        return _this;
      }
      AsyncSubject2.prototype._checkFinalizedStatuses = function(subscriber) {
        var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
        if (hasError) {
          subscriber.error(thrownError);
        } else if (isStopped || _isComplete) {
          _hasValue && subscriber.next(_value);
          subscriber.complete();
        }
      };
      AsyncSubject2.prototype.next = function(value) {
        if (!this.isStopped) {
          this._value = value;
          this._hasValue = true;
        }
      };
      AsyncSubject2.prototype.complete = function() {
        var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
        if (!_isComplete) {
          this._isComplete = true;
          _hasValue && _super.prototype.next.call(this, _value);
          _super.prototype.complete.call(this);
        }
      };
      return AsyncSubject2;
    }(Subject);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/Action.js
var Action;
var init_Action = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/Action.js"() {
    init_tslib_es6();
    init_Subscription();
    Action = function(_super) {
      __extends(Action2, _super);
      function Action2(scheduler, work) {
        return _super.call(this) || this;
      }
      Action2.prototype.schedule = function(state, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        return this;
      };
      return Action2;
    }(Subscription);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js
var intervalProvider;
var init_intervalProvider = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js"() {
    init_tslib_es6();
    intervalProvider = {
      setInterval: function(handler, timeout2) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
        }
        var delegate = intervalProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
          return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
        }
        return setInterval.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
      },
      clearInterval: function(handle) {
        var delegate = intervalProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
var AsyncAction;
var init_AsyncAction = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js"() {
    init_tslib_es6();
    init_Action();
    init_intervalProvider();
    init_arrRemove();
    AsyncAction = function(_super) {
      __extends(AsyncAction2, _super);
      function AsyncAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
      }
      AsyncAction2.prototype.schedule = function(state, delay2) {
        var _a;
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (this.closed) {
          return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
          this.id = this.recycleAsyncId(scheduler, id, delay2);
        }
        this.pending = true;
        this.delay = delay2;
        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay2);
        return this;
      };
      AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay2);
      };
      AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (delay2 != null && this.delay === delay2 && this.pending === false) {
          return id;
        }
        if (id != null) {
          intervalProvider.clearInterval(id);
        }
        return void 0;
      };
      AsyncAction2.prototype.execute = function(state, delay2) {
        if (this.closed) {
          return new Error("executing a cancelled action");
        }
        this.pending = false;
        var error = this._execute(state, delay2);
        if (error) {
          return error;
        } else if (this.pending === false && this.id != null) {
          this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
      };
      AsyncAction2.prototype._execute = function(state, _delay) {
        var errored = false;
        var errorValue;
        try {
          this.work(state);
        } catch (e) {
          errored = true;
          errorValue = e ? e : new Error("Scheduled action threw falsy error");
        }
        if (errored) {
          this.unsubscribe();
          return errorValue;
        }
      };
      AsyncAction2.prototype.unsubscribe = function() {
        if (!this.closed) {
          var _a = this, id = _a.id, scheduler = _a.scheduler;
          var actions = scheduler.actions;
          this.work = this.state = this.scheduler = null;
          this.pending = false;
          arrRemove(actions, this);
          if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
          }
          this.delay = null;
          _super.prototype.unsubscribe.call(this);
        }
      };
      return AsyncAction2;
    }(Action);
  }
});

// node_modules/rxjs/dist/esm5/internal/util/Immediate.js
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
var nextHandle, resolved, activeHandles, Immediate;
var init_Immediate = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/Immediate.js"() {
    nextHandle = 1;
    activeHandles = {};
    Immediate = {
      setImmediate: function(cb) {
        var handle = nextHandle++;
        activeHandles[handle] = true;
        if (!resolved) {
          resolved = Promise.resolve();
        }
        resolved.then(function() {
          return findAndClearHandle(handle) && cb();
        });
        return handle;
      },
      clearImmediate: function(handle) {
        findAndClearHandle(handle);
      }
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
var setImmediate, clearImmediate, immediateProvider;
var init_immediateProvider = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js"() {
    init_tslib_es6();
    init_Immediate();
    setImmediate = Immediate.setImmediate;
    clearImmediate = Immediate.clearImmediate;
    immediateProvider = {
      setImmediate: function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var delegate = immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
      },
      clearImmediate: function(handle) {
        var delegate = immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
      },
      delegate: void 0
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
var AsapAction;
var init_AsapAction = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js"() {
    init_tslib_es6();
    init_AsyncAction();
    init_immediateProvider();
    AsapAction = function(_super) {
      __extends(AsapAction2, _super);
      function AsapAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
      }
      AsapAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (delay2 !== null && delay2 > 0) {
          return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
      };
      AsapAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
        var _a;
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (delay2 != null ? delay2 > 0 : this.delay > 0) {
          return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
        }
        var actions = scheduler.actions;
        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
          immediateProvider.clearImmediate(id);
          if (scheduler._scheduled === id) {
            scheduler._scheduled = void 0;
          }
        }
        return void 0;
      };
      return AsapAction2;
    }(AsyncAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/Scheduler.js
var Scheduler;
var init_Scheduler = __esm({
  "node_modules/rxjs/dist/esm5/internal/Scheduler.js"() {
    init_dateTimestampProvider();
    Scheduler = function() {
      function Scheduler2(schedulerActionCtor, now) {
        if (now === void 0) {
          now = Scheduler2.now;
        }
        this.schedulerActionCtor = schedulerActionCtor;
        this.now = now;
      }
      Scheduler2.prototype.schedule = function(work, delay2, state) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        return new this.schedulerActionCtor(this, work).schedule(state, delay2);
      };
      Scheduler2.now = dateTimestampProvider.now;
      return Scheduler2;
    }();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
var AsyncScheduler;
var init_AsyncScheduler = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js"() {
    init_tslib_es6();
    init_Scheduler();
    AsyncScheduler = function(_super) {
      __extends(AsyncScheduler2, _super);
      function AsyncScheduler2(SchedulerAction, now) {
        if (now === void 0) {
          now = Scheduler.now;
        }
        var _this = _super.call(this, SchedulerAction, now) || this;
        _this.actions = [];
        _this._active = false;
        return _this;
      }
      AsyncScheduler2.prototype.flush = function(action) {
        var actions = this.actions;
        if (this._active) {
          actions.push(action);
          return;
        }
        var error;
        this._active = true;
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while (action = actions.shift());
        this._active = false;
        if (error) {
          while (action = actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      return AsyncScheduler2;
    }(Scheduler);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
var AsapScheduler;
var init_AsapScheduler = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js"() {
    init_tslib_es6();
    init_AsyncScheduler();
    AsapScheduler = function(_super) {
      __extends(AsapScheduler2, _super);
      function AsapScheduler2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AsapScheduler2.prototype.flush = function(action) {
        this._active = true;
        var flushId = this._scheduled;
        this._scheduled = void 0;
        var actions = this.actions;
        var error;
        action = action || actions.shift();
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
          while ((action = actions[0]) && action.id === flushId && actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      return AsapScheduler2;
    }(AsyncScheduler);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
var asapScheduler;
var init_asap = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/asap.js"() {
    init_AsapAction();
    init_AsapScheduler();
    asapScheduler = new AsapScheduler(AsapAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/async.js
var asyncScheduler;
var init_async = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/async.js"() {
    init_AsyncAction();
    init_AsyncScheduler();
    asyncScheduler = new AsyncScheduler(AsyncAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/QueueAction.js
var QueueAction;
var init_QueueAction = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/QueueAction.js"() {
    init_tslib_es6();
    init_AsyncAction();
    QueueAction = function(_super) {
      __extends(QueueAction2, _super);
      function QueueAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
      }
      QueueAction2.prototype.schedule = function(state, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (delay2 > 0) {
          return _super.prototype.schedule.call(this, state, delay2);
        }
        this.delay = delay2;
        this.state = state;
        this.scheduler.flush(this);
        return this;
      };
      QueueAction2.prototype.execute = function(state, delay2) {
        return delay2 > 0 || this.closed ? _super.prototype.execute.call(this, state, delay2) : this._execute(state, delay2);
      };
      QueueAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
          return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
        }
        scheduler.flush(this);
        return 0;
      };
      return QueueAction2;
    }(AsyncAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/QueueScheduler.js
var QueueScheduler;
var init_QueueScheduler = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/QueueScheduler.js"() {
    init_tslib_es6();
    init_AsyncScheduler();
    QueueScheduler = function(_super) {
      __extends(QueueScheduler2, _super);
      function QueueScheduler2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      return QueueScheduler2;
    }(AsyncScheduler);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/queue.js
var queueScheduler;
var init_queue = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/queue.js"() {
    init_QueueAction();
    init_QueueScheduler();
    queueScheduler = new QueueScheduler(QueueAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameAction.js
var AnimationFrameAction;
var init_AnimationFrameAction = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameAction.js"() {
    init_tslib_es6();
    init_AsyncAction();
    init_animationFrameProvider();
    AnimationFrameAction = function(_super) {
      __extends(AnimationFrameAction2, _super);
      function AnimationFrameAction2(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
      }
      AnimationFrameAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (delay2 !== null && delay2 > 0) {
          return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function() {
          return scheduler.flush(void 0);
        }));
      };
      AnimationFrameAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
        var _a;
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (delay2 != null ? delay2 > 0 : this.delay > 0) {
          return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
        }
        var actions = scheduler.actions;
        if (id != null && id === scheduler._scheduled && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
          animationFrameProvider.cancelAnimationFrame(id);
          scheduler._scheduled = void 0;
        }
        return void 0;
      };
      return AnimationFrameAction2;
    }(AsyncAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameScheduler.js
var AnimationFrameScheduler;
var init_AnimationFrameScheduler = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameScheduler.js"() {
    init_tslib_es6();
    init_AsyncScheduler();
    AnimationFrameScheduler = function(_super) {
      __extends(AnimationFrameScheduler2, _super);
      function AnimationFrameScheduler2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AnimationFrameScheduler2.prototype.flush = function(action) {
        this._active = true;
        var flushId;
        if (action) {
          flushId = action.id;
        } else {
          flushId = this._scheduled;
          this._scheduled = void 0;
        }
        var actions = this.actions;
        var error;
        action = action || actions.shift();
        do {
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
          while ((action = actions[0]) && action.id === flushId && actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      return AnimationFrameScheduler2;
    }(AsyncScheduler);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js
var animationFrameScheduler;
var init_animationFrame = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js"() {
    init_AnimationFrameAction();
    init_AnimationFrameScheduler();
    animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduler/VirtualTimeScheduler.js
var VirtualTimeScheduler, VirtualAction;
var init_VirtualTimeScheduler = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduler/VirtualTimeScheduler.js"() {
    init_tslib_es6();
    init_AsyncAction();
    init_Subscription();
    init_AsyncScheduler();
    VirtualTimeScheduler = function(_super) {
      __extends(VirtualTimeScheduler2, _super);
      function VirtualTimeScheduler2(schedulerActionCtor, maxFrames) {
        if (schedulerActionCtor === void 0) {
          schedulerActionCtor = VirtualAction;
        }
        if (maxFrames === void 0) {
          maxFrames = Infinity;
        }
        var _this = _super.call(this, schedulerActionCtor, function() {
          return _this.frame;
        }) || this;
        _this.maxFrames = maxFrames;
        _this.frame = 0;
        _this.index = -1;
        return _this;
      }
      VirtualTimeScheduler2.prototype.flush = function() {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error;
        var action;
        while ((action = actions[0]) && action.delay <= maxFrames) {
          actions.shift();
          this.frame = action.delay;
          if (error = action.execute(action.state, action.delay)) {
            break;
          }
        }
        if (error) {
          while (action = actions.shift()) {
            action.unsubscribe();
          }
          throw error;
        }
      };
      VirtualTimeScheduler2.frameTimeFactor = 10;
      return VirtualTimeScheduler2;
    }(AsyncScheduler);
    VirtualAction = function(_super) {
      __extends(VirtualAction2, _super);
      function VirtualAction2(scheduler, work, index) {
        if (index === void 0) {
          index = scheduler.index += 1;
        }
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.index = index;
        _this.active = true;
        _this.index = scheduler.index = index;
        return _this;
      }
      VirtualAction2.prototype.schedule = function(state, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        if (Number.isFinite(delay2)) {
          if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay2);
          }
          this.active = false;
          var action = new VirtualAction2(this.scheduler, this.work);
          this.add(action);
          return action.schedule(state, delay2);
        } else {
          return Subscription.EMPTY;
        }
      };
      VirtualAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        this.delay = scheduler.frame + delay2;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction2.sortActions);
        return 1;
      };
      VirtualAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
        if (delay2 === void 0) {
          delay2 = 0;
        }
        return void 0;
      };
      VirtualAction2.prototype._execute = function(state, delay2) {
        if (this.active === true) {
          return _super.prototype._execute.call(this, state, delay2);
        }
      };
      VirtualAction2.sortActions = function(a, b2) {
        if (a.delay === b2.delay) {
          if (a.index === b2.index) {
            return 0;
          } else if (a.index > b2.index) {
            return 1;
          } else {
            return -1;
          }
        } else if (a.delay > b2.delay) {
          return 1;
        } else {
          return -1;
        }
      };
      return VirtualAction2;
    }(AsyncAction);
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/empty.js
var EMPTY;
var init_empty2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/empty.js"() {
    init_Observable();
    EMPTY = new Observable(function(subscriber) {
      return subscriber.complete();
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
function isScheduler(value) {
  return value && isFunction2(value.schedule);
}
var init_isScheduler = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isScheduler.js"() {
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/args.js
function last(arr) {
  return arr[arr.length - 1];
}
function popResultSelector(args) {
  return isFunction2(last(args)) ? args.pop() : void 0;
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}
var init_args = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/args.js"() {
    init_isFunction();
    init_isScheduler();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
var isArrayLike;
var init_isArrayLike = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js"() {
    isArrayLike = function(x) {
      return x && typeof x.length === "number" && typeof x !== "function";
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isPromise.js
function isPromise2(value) {
  return isFunction2(value === null || value === void 0 ? void 0 : value.then);
}
var init_isPromise = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isPromise.js"() {
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
function isInteropObservable(input) {
  return isFunction2(input[observable]);
}
var init_isInteropObservable = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js"() {
    init_observable2();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction2(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}
var init_isAsyncIterable = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js"() {
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
function createInvalidObservableTypeError(input) {
  return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}
var init_throwUnobservableError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js"() {
  }
});

// node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator;
var init_iterator = __esm({
  "node_modules/rxjs/dist/esm5/internal/symbol/iterator.js"() {
    iterator = getSymbolIterator();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isIterable.js
function isIterable(input) {
  return isFunction2(input === null || input === void 0 ? void 0 : input[iterator]);
}
var init_isIterable = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isIterable.js"() {
    init_iterator();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
    var reader, _a, value, done;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          reader = readableStream.getReader();
          _b.label = 1;
        case 1:
          _b.trys.push([1, , 9, 10]);
          _b.label = 2;
        case 2:
          if (false) return [3, 8];
          return [4, __await(reader.read())];
        case 3:
          _a = _b.sent(), value = _a.value, done = _a.done;
          if (!done) return [3, 5];
          return [4, __await(void 0)];
        case 4:
          return [2, _b.sent()];
        case 5:
          return [4, __await(value)];
        case 6:
          return [4, _b.sent()];
        case 7:
          _b.sent();
          return [3, 2];
        case 8:
          return [3, 10];
        case 9:
          reader.releaseLock();
          return [7];
        case 10:
          return [2];
      }
    });
  });
}
function isReadableStreamLike(obj) {
  return isFunction2(obj === null || obj === void 0 ? void 0 : obj.getReader);
}
var init_isReadableStreamLike = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js"() {
    init_tslib_es6();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
function innerFrom(input) {
  if (input instanceof Observable) {
    return input;
  }
  if (input != null) {
    if (isInteropObservable(input)) {
      return fromInteropObservable(input);
    }
    if (isArrayLike(input)) {
      return fromArrayLike(input);
    }
    if (isPromise2(input)) {
      return fromPromise(input);
    }
    if (isAsyncIterable(input)) {
      return fromAsyncIterable(input);
    }
    if (isIterable(input)) {
      return fromIterable(input);
    }
    if (isReadableStreamLike(input)) {
      return fromReadableStreamLike(input);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
  return new Observable(function(subscriber) {
    var obs = obj[observable]();
    if (isFunction2(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable(function(subscriber) {
    for (var i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable(function(subscriber) {
    promise.then(function(value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function(err) {
      return subscriber.error(err);
    }).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable(function(subscriber) {
    var e_1, _a;
    try {
      for (var iterable_1 = __values2(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
        var value = iterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable(function(subscriber) {
    process2(asyncIterable, subscriber).catch(function(err) {
      return subscriber.error(err);
    });
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process2(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_2, _a;
  return __awaiter(this, void 0, void 0, function() {
    var value, e_2_1;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          _b.trys.push([0, 5, 6, 11]);
          asyncIterable_1 = __asyncValues(asyncIterable);
          _b.label = 1;
        case 1:
          return [4, asyncIterable_1.next()];
        case 2:
          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
          value = asyncIterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return [2];
          }
          _b.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [3, 11];
        case 5:
          e_2_1 = _b.sent();
          e_2 = { error: e_2_1 };
          return [3, 11];
        case 6:
          _b.trys.push([6, , 9, 10]);
          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
          return [4, _a.call(asyncIterable_1)];
        case 7:
          _b.sent();
          _b.label = 8;
        case 8:
          return [3, 10];
        case 9:
          if (e_2) throw e_2.error;
          return [7];
        case 10:
          return [7];
        case 11:
          subscriber.complete();
          return [2];
      }
    });
  });
}
var init_innerFrom = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js"() {
    init_tslib_es6();
    init_isArrayLike();
    init_isPromise();
    init_Observable();
    init_isInteropObservable();
    init_isAsyncIterable();
    init_throwUnobservableError();
    init_isIterable();
    init_isReadableStreamLike();
    init_isFunction();
    init_reportUnhandledError();
    init_observable2();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
function executeSchedule(parentSubscription, scheduler, work, delay2, repeat2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  if (repeat2 === void 0) {
    repeat2 = false;
  }
  var scheduleSubscription = scheduler.schedule(function() {
    work();
    if (repeat2) {
      parentSubscription.add(this.schedule(null, delay2));
    } else {
      this.unsubscribe();
    }
  }, delay2);
  parentSubscription.add(scheduleSubscription);
  if (!repeat2) {
    return scheduleSubscription;
  }
}
var init_executeSchedule = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js"() {
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
function observeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.next(value);
      }, delay2);
    }, function() {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.complete();
      }, delay2);
    }, function(err) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.error(err);
      }, delay2);
    }));
  });
}
var init_observeOn = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/observeOn.js"() {
    init_executeSchedule();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
function subscribeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    subscriber.add(scheduler.schedule(function() {
      return source.subscribe(subscriber);
    }, delay2));
  });
}
var init_subscribeOn = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js"() {
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
function scheduleObservable(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}
var init_scheduleObservable = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js"() {
    init_innerFrom();
    init_observeOn();
    init_subscribeOn();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
function schedulePromise(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}
var init_schedulePromise = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js"() {
    init_innerFrom();
    init_observeOn();
    init_subscribeOn();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
function scheduleArray(input, scheduler) {
  return new Observable(function(subscriber) {
    var i = 0;
    return scheduler.schedule(function() {
      if (i === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}
var init_scheduleArray = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js"() {
    init_Observable();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
function scheduleIterable(input, scheduler) {
  return new Observable(function(subscriber) {
    var iterator2;
    executeSchedule(subscriber, scheduler, function() {
      iterator2 = input[iterator]();
      executeSchedule(subscriber, scheduler, function() {
        var _a;
        var value;
        var done;
        try {
          _a = iterator2.next(), value = _a.value, done = _a.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return function() {
      return isFunction2(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
    };
  });
}
var init_scheduleIterable = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js"() {
    init_Observable();
    init_iterator();
    init_isFunction();
    init_executeSchedule();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
function scheduleAsyncIterable(input, scheduler) {
  if (!input) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable(function(subscriber) {
    executeSchedule(subscriber, scheduler, function() {
      var iterator2 = input[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, function() {
        iterator2.next().then(function(result) {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}
var init_scheduleAsyncIterable = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js"() {
    init_Observable();
    init_executeSchedule();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
function scheduleReadableStreamLike(input, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}
var init_scheduleReadableStreamLike = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js"() {
    init_scheduleAsyncIterable();
    init_isReadableStreamLike();
  }
});

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
function scheduled(input, scheduler) {
  if (input != null) {
    if (isInteropObservable(input)) {
      return scheduleObservable(input, scheduler);
    }
    if (isArrayLike(input)) {
      return scheduleArray(input, scheduler);
    }
    if (isPromise2(input)) {
      return schedulePromise(input, scheduler);
    }
    if (isAsyncIterable(input)) {
      return scheduleAsyncIterable(input, scheduler);
    }
    if (isIterable(input)) {
      return scheduleIterable(input, scheduler);
    }
    if (isReadableStreamLike(input)) {
      return scheduleReadableStreamLike(input, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input);
}
var init_scheduled = __esm({
  "node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js"() {
    init_scheduleObservable();
    init_schedulePromise();
    init_scheduleArray();
    init_scheduleIterable();
    init_scheduleAsyncIterable();
    init_isInteropObservable();
    init_isPromise();
    init_isArrayLike();
    init_isIterable();
    init_isAsyncIterable();
    init_throwUnobservableError();
    init_isReadableStreamLike();
    init_scheduleReadableStreamLike();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/from.js
function from(input, scheduler) {
  return scheduler ? scheduled(input, scheduler) : innerFrom(input);
}
var init_from = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/from.js"() {
    init_scheduled();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/of.js
function of() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  return from(args, scheduler);
}
var init_of = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/of.js"() {
    init_args();
    init_from();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/throwError.js
function throwError(errorOrErrorFactory, scheduler) {
  var errorFactory = isFunction2(errorOrErrorFactory) ? errorOrErrorFactory : function() {
    return errorOrErrorFactory;
  };
  var init2 = function(subscriber) {
    return subscriber.error(errorFactory());
  };
  return new Observable(scheduler ? function(subscriber) {
    return scheduler.schedule(init2, 0, subscriber);
  } : init2);
}
var init_throwError = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/throwError.js"() {
    init_Observable();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/Notification.js
function observeNotification(notification, observer) {
  var _a, _b, _c;
  var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
  if (typeof kind !== "string") {
    throw new TypeError('Invalid notification, missing "kind"');
  }
  kind === "N" ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === "E" ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
}
var NotificationKind, Notification;
var init_Notification = __esm({
  "node_modules/rxjs/dist/esm5/internal/Notification.js"() {
    init_empty2();
    init_of();
    init_throwError();
    init_isFunction();
    (function(NotificationKind2) {
      NotificationKind2["NEXT"] = "N";
      NotificationKind2["ERROR"] = "E";
      NotificationKind2["COMPLETE"] = "C";
    })(NotificationKind || (NotificationKind = {}));
    Notification = function() {
      function Notification2(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === "N";
      }
      Notification2.prototype.observe = function(observer) {
        return observeNotification(this, observer);
      };
      Notification2.prototype.do = function(nextHandler, errorHandler, completeHandler) {
        var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
        return kind === "N" ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === "E" ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
      };
      Notification2.prototype.accept = function(nextOrObserver, error, complete) {
        var _a;
        return isFunction2((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);
      };
      Notification2.prototype.toObservable = function() {
        var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
        var result = kind === "N" ? of(value) : kind === "E" ? throwError(function() {
          return error;
        }) : kind === "C" ? EMPTY : 0;
        if (!result) {
          throw new TypeError("Unexpected notification kind " + kind);
        }
        return result;
      };
      Notification2.createNext = function(value) {
        return new Notification2("N", value);
      };
      Notification2.createError = function(err) {
        return new Notification2("E", void 0, err);
      };
      Notification2.createComplete = function() {
        return Notification2.completeNotification;
      };
      Notification2.completeNotification = new Notification2("C");
      return Notification2;
    }();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isObservable.js
var init_isObservable = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isObservable.js"() {
    init_Observable();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
var EmptyError;
var init_EmptyError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/EmptyError.js"() {
    init_createErrorClass();
    EmptyError = createErrorClass(function(_super) {
      return function EmptyErrorImpl() {
        _super(this);
        this.name = "EmptyError";
        this.message = "no elements in sequence";
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/lastValueFrom.js
var init_lastValueFrom = __esm({
  "node_modules/rxjs/dist/esm5/internal/lastValueFrom.js"() {
    init_EmptyError();
  }
});

// node_modules/rxjs/dist/esm5/internal/firstValueFrom.js
function firstValueFrom(source, config5) {
  var hasConfig = typeof config5 === "object";
  return new Promise(function(resolve, reject) {
    var subscriber = new SafeSubscriber({
      next: function(value) {
        resolve(value);
        subscriber.unsubscribe();
      },
      error: reject,
      complete: function() {
        if (hasConfig) {
          resolve(config5.defaultValue);
        } else {
          reject(new EmptyError());
        }
      }
    });
    source.subscribe(subscriber);
  });
}
var init_firstValueFrom = __esm({
  "node_modules/rxjs/dist/esm5/internal/firstValueFrom.js"() {
    init_EmptyError();
    init_Subscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/ArgumentOutOfRangeError.js
var ArgumentOutOfRangeError;
var init_ArgumentOutOfRangeError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/ArgumentOutOfRangeError.js"() {
    init_createErrorClass();
    ArgumentOutOfRangeError = createErrorClass(function(_super) {
      return function ArgumentOutOfRangeErrorImpl() {
        _super(this);
        this.name = "ArgumentOutOfRangeError";
        this.message = "argument out of range";
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/util/NotFoundError.js
var NotFoundError;
var init_NotFoundError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/NotFoundError.js"() {
    init_createErrorClass();
    NotFoundError = createErrorClass(function(_super) {
      return function NotFoundErrorImpl(message) {
        _super(this);
        this.name = "NotFoundError";
        this.message = message;
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/util/SequenceError.js
var SequenceError;
var init_SequenceError = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/SequenceError.js"() {
    init_createErrorClass();
    SequenceError = createErrorClass(function(_super) {
      return function SequenceErrorImpl(message) {
        _super(this);
        this.name = "SequenceError";
        this.message = message;
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/util/isDate.js
var init_isDate = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/isDate.js"() {
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/timeout.js
var TimeoutError;
var init_timeout = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/timeout.js"() {
    init_async();
    init_isDate();
    init_lift();
    init_innerFrom();
    init_createErrorClass();
    init_OperatorSubscriber();
    init_executeSchedule();
    TimeoutError = createErrorClass(function(_super) {
      return function TimeoutErrorImpl(info6) {
        if (info6 === void 0) {
          info6 = null;
        }
        _super(this);
        this.message = "Timeout has occurred";
        this.name = "TimeoutError";
        this.info = info6;
      };
    });
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/map.js
function map2(project, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
}
var init_map = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/map.js"() {
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
function callOrApply(fn, args) {
  return isArray2(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
}
function mapOneOrManyArgs(fn) {
  return map2(function(args) {
    return callOrApply(fn, args);
  });
}
var isArray2;
var init_mapOneOrManyArgs = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js"() {
    init_tslib_es6();
    init_map();
    isArray2 = Array.isArray;
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/bindCallbackInternals.js
var init_bindCallbackInternals = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/bindCallbackInternals.js"() {
    init_tslib_es6();
    init_isScheduler();
    init_Observable();
    init_subscribeOn();
    init_mapOneOrManyArgs();
    init_observeOn();
    init_AsyncSubject();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/bindCallback.js
var init_bindCallback = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/bindCallback.js"() {
    init_bindCallbackInternals();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/bindNodeCallback.js
var init_bindNodeCallback = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/bindNodeCallback.js"() {
    init_bindCallbackInternals();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
function argsArgArrayOrObject(args) {
  if (args.length === 1) {
    var first_1 = args[0];
    if (isArray3(first_1)) {
      return { args: first_1, keys: null };
    }
    if (isPOJO(first_1)) {
      var keys2 = getKeys(first_1);
      return {
        args: keys2.map(function(key) {
          return first_1[key];
        }),
        keys: keys2
      };
    }
  }
  return { args, keys: null };
}
function isPOJO(obj) {
  return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
}
var isArray3, getPrototypeOf, objectProto, getKeys;
var init_argsArgArrayOrObject = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js"() {
    isArray3 = Array.isArray;
    getPrototypeOf = Object.getPrototypeOf;
    objectProto = Object.prototype;
    getKeys = Object.keys;
  }
});

// node_modules/rxjs/dist/esm5/internal/util/createObject.js
function createObject(keys2, values) {
  return keys2.reduce(function(result, key, i) {
    return result[key] = values[i], result;
  }, {});
}
var init_createObject = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/createObject.js"() {
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js
function combineLatest() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  var resultSelector = popResultSelector(args);
  var _a = argsArgArrayOrObject(args), observables = _a.args, keys2 = _a.keys;
  if (observables.length === 0) {
    return from([], scheduler);
  }
  var result = new Observable(combineLatestInit(observables, scheduler, keys2 ? function(values) {
    return createObject(keys2, values);
  } : identity2));
  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform) {
  if (valueTransform === void 0) {
    valueTransform = identity2;
  }
  return function(subscriber) {
    maybeSchedule(scheduler, function() {
      var length = observables.length;
      var values = new Array(length);
      var active = length;
      var remainingFirstValues = length;
      var _loop_1 = function(i2) {
        maybeSchedule(scheduler, function() {
          var source = from(observables[i2], scheduler);
          var hasFirstValue = false;
          source.subscribe(createOperatorSubscriber(subscriber, function(value) {
            values[i2] = value;
            if (!hasFirstValue) {
              hasFirstValue = true;
              remainingFirstValues--;
            }
            if (!remainingFirstValues) {
              subscriber.next(valueTransform(values.slice()));
            }
          }, function() {
            if (!--active) {
              subscriber.complete();
            }
          }));
        }, subscriber);
      };
      for (var i = 0; i < length; i++) {
        _loop_1(i);
      }
    }, subscriber);
  };
}
function maybeSchedule(scheduler, execute, subscription) {
  if (scheduler) {
    executeSchedule(subscription, scheduler, execute);
  } else {
    execute();
  }
}
var init_combineLatest = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js"() {
    init_Observable();
    init_argsArgArrayOrObject();
    init_from();
    init_identity();
    init_mapOneOrManyArgs();
    init_args();
    init_createObject();
    init_OperatorSubscriber();
    init_executeSchedule();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js
function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand3, innerSubScheduler, additionalFinalizer) {
  var buffer2 = [];
  var active = 0;
  var index = 0;
  var isComplete = false;
  var checkComplete = function() {
    if (isComplete && !buffer2.length && !active) {
      subscriber.complete();
    }
  };
  var outerNext = function(value) {
    return active < concurrent ? doInnerSub(value) : buffer2.push(value);
  };
  var doInnerSub = function(value) {
    expand3 && subscriber.next(value);
    active++;
    var innerComplete = false;
    innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function(innerValue) {
      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
      if (expand3) {
        outerNext(innerValue);
      } else {
        subscriber.next(innerValue);
      }
    }, function() {
      innerComplete = true;
    }, void 0, function() {
      if (innerComplete) {
        try {
          active--;
          var _loop_1 = function() {
            var bufferedValue = buffer2.shift();
            if (innerSubScheduler) {
              executeSchedule(subscriber, innerSubScheduler, function() {
                return doInnerSub(bufferedValue);
              });
            } else {
              doInnerSub(bufferedValue);
            }
          };
          while (buffer2.length && active < concurrent) {
            _loop_1();
          }
          checkComplete();
        } catch (err) {
          subscriber.error(err);
        }
      }
    }));
  };
  source.subscribe(createOperatorSubscriber(subscriber, outerNext, function() {
    isComplete = true;
    checkComplete();
  }));
  return function() {
    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
  };
}
var init_mergeInternals = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js"() {
    init_innerFrom();
    init_executeSchedule();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js
function mergeMap(project, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  if (isFunction2(resultSelector)) {
    return mergeMap(function(a, i) {
      return map2(function(b2, ii) {
        return resultSelector(a, b2, i, ii);
      })(innerFrom(project(a, i)));
    }, concurrent);
  } else if (typeof resultSelector === "number") {
    concurrent = resultSelector;
  }
  return operate(function(source, subscriber) {
    return mergeInternals(source, subscriber, project, concurrent);
  });
}
var init_mergeMap = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js"() {
    init_map();
    init_innerFrom();
    init_lift();
    init_mergeInternals();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js
function mergeAll(concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  return mergeMap(identity2, concurrent);
}
var init_mergeAll = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js"() {
    init_mergeMap();
    init_identity();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/concatAll.js
function concatAll() {
  return mergeAll(1);
}
var init_concatAll = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/concatAll.js"() {
    init_mergeAll();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/concat.js
function concat() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return concatAll()(from(args, popScheduler(args)));
}
var init_concat2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/concat.js"() {
    init_concatAll();
    init_args();
    init_from();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/defer.js
var init_defer = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/defer.js"() {
    init_Observable();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/connectable.js
var init_connectable = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/connectable.js"() {
    init_Subject();
    init_Observable();
    init_defer();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js
var init_forkJoin = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js"() {
    init_Observable();
    init_argsArgArrayOrObject();
    init_innerFrom();
    init_args();
    init_OperatorSubscriber();
    init_mapOneOrManyArgs();
    init_createObject();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js
var init_fromEvent = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js"() {
    init_tslib_es6();
    init_innerFrom();
    init_Observable();
    init_mergeMap();
    init_isArrayLike();
    init_isFunction();
    init_mapOneOrManyArgs();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js
var init_fromEventPattern = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js"() {
    init_Observable();
    init_isFunction();
    init_mapOneOrManyArgs();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/generate.js
var init_generate2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/generate.js"() {
    init_tslib_es6();
    init_identity();
    init_isScheduler();
    init_defer();
    init_scheduleIterable();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/iif.js
var init_iif = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/iif.js"() {
    init_defer();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/timer.js
var init_timer = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/timer.js"() {
    init_Observable();
    init_async();
    init_isScheduler();
    init_isDate();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/interval.js
var init_interval = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/interval.js"() {
    init_async();
    init_timer();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/merge.js
var init_merge = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/merge.js"() {
    init_mergeAll();
    init_innerFrom();
    init_empty2();
    init_args();
    init_from();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/never.js
var NEVER;
var init_never = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/never.js"() {
    init_Observable();
    init_noop2();
    NEVER = new Observable(noop2);
  }
});

// node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js
var isArray4;
var init_argsOrArgArray = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js"() {
    isArray4 = Array.isArray;
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/onErrorResumeNext.js
var init_onErrorResumeNext = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/onErrorResumeNext.js"() {
    init_Observable();
    init_argsOrArgArray();
    init_OperatorSubscriber();
    init_noop2();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/pairs.js
var init_pairs2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/pairs.js"() {
    init_from();
  }
});

// node_modules/rxjs/dist/esm5/internal/util/not.js
var init_not = __esm({
  "node_modules/rxjs/dist/esm5/internal/util/not.js"() {
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/filter.js
function filter(predicate, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return predicate.call(thisArg, value, index++) && subscriber.next(value);
    }));
  });
}
var init_filter2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/filter.js"() {
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/partition.js
var init_partition = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/partition.js"() {
    init_not();
    init_filter2();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/race.js
var init_race = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/race.js"() {
    init_Observable();
    init_innerFrom();
    init_argsOrArgArray();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/range.js
var init_range2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/range.js"() {
    init_Observable();
    init_empty2();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/using.js
var init_using = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/using.js"() {
    init_Observable();
    init_innerFrom();
    init_empty2();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/zip.js
var init_zip2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/zip.js"() {
    init_tslib_es6();
    init_Observable();
    init_innerFrom();
    init_argsOrArgArray();
    init_empty2();
    init_OperatorSubscriber();
    init_args();
  }
});

// node_modules/rxjs/dist/esm5/internal/types.js
var init_types = __esm({
  "node_modules/rxjs/dist/esm5/internal/types.js"() {
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/audit.js
var init_audit = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/audit.js"() {
    init_lift();
    init_innerFrom();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/auditTime.js
var init_auditTime = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/auditTime.js"() {
    init_async();
    init_audit();
    init_timer();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/buffer.js
var init_buffer3 = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/buffer.js"() {
    init_lift();
    init_noop2();
    init_OperatorSubscriber();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/bufferCount.js
var init_bufferCount = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/bufferCount.js"() {
    init_tslib_es6();
    init_lift();
    init_OperatorSubscriber();
    init_arrRemove();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/bufferTime.js
var init_bufferTime = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/bufferTime.js"() {
    init_tslib_es6();
    init_Subscription();
    init_lift();
    init_OperatorSubscriber();
    init_arrRemove();
    init_async();
    init_args();
    init_executeSchedule();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/bufferToggle.js
var init_bufferToggle = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/bufferToggle.js"() {
    init_tslib_es6();
    init_Subscription();
    init_lift();
    init_innerFrom();
    init_OperatorSubscriber();
    init_noop2();
    init_arrRemove();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/bufferWhen.js
var init_bufferWhen = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/bufferWhen.js"() {
    init_lift();
    init_noop2();
    init_OperatorSubscriber();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/catchError.js
function catchError(selector) {
  return operate(function(source, subscriber) {
    var innerSub = null;
    var syncUnsub = false;
    var handledResult;
    innerSub = source.subscribe(createOperatorSubscriber(subscriber, void 0, void 0, function(err) {
      handledResult = innerFrom(selector(err, catchError(selector)(source)));
      if (innerSub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      } else {
        syncUnsub = true;
      }
    }));
    if (syncUnsub) {
      innerSub.unsubscribe();
      innerSub = null;
      handledResult.subscribe(subscriber);
    }
  });
}
var init_catchError = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/catchError.js"() {
    init_innerFrom();
    init_OperatorSubscriber();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js
function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
  return function(source, subscriber) {
    var hasState = hasSeed;
    var state = seed;
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var i = index++;
      state = hasState ? accumulator(state, value, i) : (hasState = true, value);
      emitOnNext && subscriber.next(state);
    }, emitBeforeComplete && function() {
      hasState && subscriber.next(state);
      subscriber.complete();
    }));
  };
}
var init_scanInternals = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js"() {
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/reduce.js
function reduce(accumulator, seed) {
  return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
}
var init_reduce = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/reduce.js"() {
    init_scanInternals();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/toArray.js
function toArray() {
  return operate(function(source, subscriber) {
    reduce(arrReducer, [])(source).subscribe(subscriber);
  });
}
var arrReducer;
var init_toArray = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/toArray.js"() {
    init_reduce();
    init_lift();
    arrReducer = function(arr, value) {
      return arr.push(value), arr;
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/joinAllInternals.js
var init_joinAllInternals = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/joinAllInternals.js"() {
    init_identity();
    init_mapOneOrManyArgs();
    init_pipe();
    init_mergeMap();
    init_toArray();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/combineLatestAll.js
var init_combineLatestAll = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/combineLatestAll.js"() {
    init_combineLatest();
    init_joinAllInternals();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/combineAll.js
var init_combineAll = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/combineAll.js"() {
    init_combineLatestAll();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/combineLatest.js
var init_combineLatest2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/combineLatest.js"() {
    init_tslib_es6();
    init_combineLatest();
    init_lift();
    init_argsOrArgArray();
    init_mapOneOrManyArgs();
    init_pipe();
    init_args();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/combineLatestWith.js
var init_combineLatestWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/combineLatestWith.js"() {
    init_tslib_es6();
    init_combineLatest2();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/concatMap.js
var init_concatMap = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/concatMap.js"() {
    init_mergeMap();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/concatMapTo.js
var init_concatMapTo = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/concatMapTo.js"() {
    init_concatMap();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/concat.js
var init_concat3 = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/concat.js"() {
    init_tslib_es6();
    init_lift();
    init_concatAll();
    init_args();
    init_from();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/concatWith.js
var init_concatWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/concatWith.js"() {
    init_tslib_es6();
    init_concat3();
  }
});

// node_modules/rxjs/dist/esm5/internal/observable/fromSubscribable.js
function fromSubscribable(subscribable) {
  return new Observable(function(subscriber) {
    return subscribable.subscribe(subscriber);
  });
}
var init_fromSubscribable = __esm({
  "node_modules/rxjs/dist/esm5/internal/observable/fromSubscribable.js"() {
    init_Observable();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/connect.js
function connect2(selector, config5) {
  if (config5 === void 0) {
    config5 = DEFAULT_CONFIG;
  }
  var connector = config5.connector;
  return operate(function(source, subscriber) {
    var subject = connector();
    innerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);
    subscriber.add(source.subscribe(subject));
  });
}
var DEFAULT_CONFIG;
var init_connect = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/connect.js"() {
    init_Subject();
    init_innerFrom();
    init_lift();
    init_fromSubscribable();
    DEFAULT_CONFIG = {
      connector: function() {
        return new Subject();
      }
    };
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/count.js
var init_count = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/count.js"() {
    init_reduce();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/debounce.js
var init_debounce = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/debounce.js"() {
    init_lift();
    init_noop2();
    init_OperatorSubscriber();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js
var init_debounceTime = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js"() {
    init_async();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js
function defaultIfEmpty(defaultValue) {
  return operate(function(source, subscriber) {
    var hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      hasValue = true;
      subscriber.next(value);
    }, function() {
      if (!hasValue) {
        subscriber.next(defaultValue);
      }
      subscriber.complete();
    }));
  });
}
var init_defaultIfEmpty = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js"() {
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/take.js
function take(count2) {
  return count2 <= 0 ? function() {
    return EMPTY;
  } : operate(function(source, subscriber) {
    var seen = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      if (++seen <= count2) {
        subscriber.next(value);
        if (count2 <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
}
var init_take = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/take.js"() {
    init_empty2();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/ignoreElements.js
var init_ignoreElements = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/ignoreElements.js"() {
    init_lift();
    init_OperatorSubscriber();
    init_noop2();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/mapTo.js
var init_mapTo = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/mapTo.js"() {
    init_map();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/delayWhen.js
var init_delayWhen = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/delayWhen.js"() {
    init_concat2();
    init_take();
    init_ignoreElements();
    init_mapTo();
    init_mergeMap();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/delay.js
var init_delay = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/delay.js"() {
    init_async();
    init_delayWhen();
    init_timer();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/dematerialize.js
var init_dematerialize = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/dematerialize.js"() {
    init_Notification();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/distinct.js
var init_distinct = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/distinct.js"() {
    init_lift();
    init_OperatorSubscriber();
    init_noop2();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js
function distinctUntilChanged(comparator, keySelector) {
  if (keySelector === void 0) {
    keySelector = identity2;
  }
  comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
  return operate(function(source, subscriber) {
    var previousKey;
    var first2 = true;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var currentKey = keySelector(value);
      if (first2 || !comparator(previousKey, currentKey)) {
        first2 = false;
        previousKey = currentKey;
        subscriber.next(value);
      }
    }));
  });
}
function defaultCompare(a, b2) {
  return a === b2;
}
var init_distinctUntilChanged = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js"() {
    init_identity();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/distinctUntilKeyChanged.js
var init_distinctUntilKeyChanged = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/distinctUntilKeyChanged.js"() {
    init_distinctUntilChanged();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js
function throwIfEmpty(errorFactory) {
  if (errorFactory === void 0) {
    errorFactory = defaultErrorFactory;
  }
  return operate(function(source, subscriber) {
    var hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      hasValue = true;
      subscriber.next(value);
    }, function() {
      return hasValue ? subscriber.complete() : subscriber.error(errorFactory());
    }));
  });
}
function defaultErrorFactory() {
  return new EmptyError();
}
var init_throwIfEmpty = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js"() {
    init_EmptyError();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/elementAt.js
var init_elementAt = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/elementAt.js"() {
    init_ArgumentOutOfRangeError();
    init_filter2();
    init_throwIfEmpty();
    init_defaultIfEmpty();
    init_take();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/endWith.js
var init_endWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/endWith.js"() {
    init_tslib_es6();
    init_concat2();
    init_of();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/every.js
var init_every = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/every.js"() {
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/exhaustMap.js
var init_exhaustMap = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/exhaustMap.js"() {
    init_map();
    init_innerFrom();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/exhaustAll.js
var init_exhaustAll = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/exhaustAll.js"() {
    init_exhaustMap();
    init_identity();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/exhaust.js
var init_exhaust = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/exhaust.js"() {
    init_exhaustAll();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/expand.js
var init_expand2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/expand.js"() {
    init_lift();
    init_mergeInternals();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/finalize.js
var init_finalize = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/finalize.js"() {
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/find.js
var init_find = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/find.js"() {
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/findIndex.js
var init_findIndex = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/findIndex.js"() {
    init_lift();
    init_find();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/first.js
function first(predicate, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function(source) {
    return source.pipe(predicate ? filter(function(v3, i) {
      return predicate(v3, i, source);
    }) : identity2, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function() {
      return new EmptyError();
    }));
  };
}
var init_first = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/first.js"() {
    init_EmptyError();
    init_filter2();
    init_take();
    init_defaultIfEmpty();
    init_throwIfEmpty();
    init_identity();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/groupBy.js
var init_groupBy = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/groupBy.js"() {
    init_Observable();
    init_innerFrom();
    init_Subject();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/isEmpty.js
var init_isEmpty = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/isEmpty.js"() {
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/takeLast.js
var init_takeLast = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/takeLast.js"() {
    init_tslib_es6();
    init_empty2();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/last.js
var init_last = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/last.js"() {
    init_EmptyError();
    init_filter2();
    init_takeLast();
    init_throwIfEmpty();
    init_defaultIfEmpty();
    init_identity();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/materialize.js
var init_materialize = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/materialize.js"() {
    init_Notification();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/max.js
var init_max = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/max.js"() {
    init_reduce();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/flatMap.js
var init_flatMap = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/flatMap.js"() {
    init_mergeMap();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/mergeMapTo.js
var init_mergeMapTo = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/mergeMapTo.js"() {
    init_mergeMap();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/mergeScan.js
var init_mergeScan = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/mergeScan.js"() {
    init_lift();
    init_mergeInternals();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/merge.js
var init_merge2 = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/merge.js"() {
    init_tslib_es6();
    init_lift();
    init_mergeAll();
    init_args();
    init_from();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/mergeWith.js
var init_mergeWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/mergeWith.js"() {
    init_tslib_es6();
    init_merge2();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/min.js
var init_min3 = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/min.js"() {
    init_reduce();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/multicast.js
function multicast(subjectOrSubjectFactory, selector) {
  var subjectFactory = isFunction2(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function() {
    return subjectOrSubjectFactory;
  };
  if (isFunction2(selector)) {
    return connect2(selector, {
      connector: subjectFactory
    });
  }
  return function(source) {
    return new ConnectableObservable(source, subjectFactory);
  };
}
var init_multicast = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/multicast.js"() {
    init_ConnectableObservable();
    init_isFunction();
    init_connect();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/onErrorResumeNextWith.js
var init_onErrorResumeNextWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/onErrorResumeNextWith.js"() {
    init_tslib_es6();
    init_argsOrArgArray();
    init_onErrorResumeNext();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/pairwise.js
var init_pairwise = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/pairwise.js"() {
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/pluck.js
var init_pluck = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/pluck.js"() {
    init_map();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/publish.js
var init_publish = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/publish.js"() {
    init_Subject();
    init_multicast();
    init_connect();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/publishBehavior.js
var init_publishBehavior = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/publishBehavior.js"() {
    init_BehaviorSubject();
    init_ConnectableObservable();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/publishLast.js
var init_publishLast = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/publishLast.js"() {
    init_AsyncSubject();
    init_ConnectableObservable();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/publishReplay.js
function publishReplay(bufferSize, windowTime2, selectorOrScheduler, timestampProvider) {
  if (selectorOrScheduler && !isFunction2(selectorOrScheduler)) {
    timestampProvider = selectorOrScheduler;
  }
  var selector = isFunction2(selectorOrScheduler) ? selectorOrScheduler : void 0;
  return function(source) {
    return multicast(new ReplaySubject(bufferSize, windowTime2, timestampProvider), selector)(source);
  };
}
var init_publishReplay = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/publishReplay.js"() {
    init_ReplaySubject();
    init_multicast();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/raceWith.js
var init_raceWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/raceWith.js"() {
    init_tslib_es6();
    init_race();
    init_lift();
    init_identity();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/repeat.js
var init_repeat = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/repeat.js"() {
    init_empty2();
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
    init_timer();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/repeatWhen.js
var init_repeatWhen = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/repeatWhen.js"() {
    init_innerFrom();
    init_Subject();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/retry.js
var init_retry = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/retry.js"() {
    init_lift();
    init_OperatorSubscriber();
    init_identity();
    init_timer();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/retryWhen.js
var init_retryWhen = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/retryWhen.js"() {
    init_innerFrom();
    init_Subject();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/sample.js
var init_sample = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/sample.js"() {
    init_innerFrom();
    init_lift();
    init_noop2();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/sampleTime.js
var init_sampleTime = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/sampleTime.js"() {
    init_async();
    init_sample();
    init_interval();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/scan.js
var init_scan = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/scan.js"() {
    init_lift();
    init_scanInternals();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/sequenceEqual.js
var init_sequenceEqual = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/sequenceEqual.js"() {
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/share.js
var init_share = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/share.js"() {
    init_tslib_es6();
    init_innerFrom();
    init_Subject();
    init_Subscriber();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js
var init_shareReplay = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js"() {
    init_ReplaySubject();
    init_share();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/single.js
var init_single = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/single.js"() {
    init_EmptyError();
    init_SequenceError();
    init_NotFoundError();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/skip.js
var init_skip = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/skip.js"() {
    init_filter2();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/skipLast.js
var init_skipLast = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/skipLast.js"() {
    init_identity();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js
var init_skipUntil = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js"() {
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
    init_noop2();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/skipWhile.js
var init_skipWhile = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/skipWhile.js"() {
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/startWith.js
function startWith() {
  var values = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }
  var scheduler = popScheduler(values);
  return operate(function(source, subscriber) {
    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
  });
}
var init_startWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/startWith.js"() {
    init_concat2();
    init_args();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/switchMap.js
function switchMap(project, resultSelector) {
  return operate(function(source, subscriber) {
    var innerSubscriber = null;
    var index = 0;
    var isComplete = false;
    var checkComplete = function() {
      return isComplete && !innerSubscriber && subscriber.complete();
    };
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
      var innerIndex = 0;
      var outerIndex = index++;
      innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, function(innerValue) {
        return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);
      }, function() {
        innerSubscriber = null;
        checkComplete();
      }));
    }, function() {
      isComplete = true;
      checkComplete();
    }));
  });
}
var init_switchMap = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/switchMap.js"() {
    init_innerFrom();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/switchAll.js
var init_switchAll = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/switchAll.js"() {
    init_switchMap();
    init_identity();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/switchMapTo.js
var init_switchMapTo = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/switchMapTo.js"() {
    init_switchMap();
    init_isFunction();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/switchScan.js
var init_switchScan = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/switchScan.js"() {
    init_switchMap();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js
var init_takeUntil = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js"() {
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
    init_noop2();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js
var init_takeWhile = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js"() {
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/tap.js
function tap(observerOrNext, error, complete) {
  var tapObserver = isFunction2(observerOrNext) || error || complete ? { next: observerOrNext, error, complete } : observerOrNext;
  return tapObserver ? operate(function(source, subscriber) {
    var _a;
    (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
    var isUnsub = true;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var _a2;
      (_a2 = tapObserver.next) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, value);
      subscriber.next(value);
    }, function() {
      var _a2;
      isUnsub = false;
      (_a2 = tapObserver.complete) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
      subscriber.complete();
    }, function(err) {
      var _a2;
      isUnsub = false;
      (_a2 = tapObserver.error) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, err);
      subscriber.error(err);
    }, function() {
      var _a2, _b;
      if (isUnsub) {
        (_a2 = tapObserver.unsubscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
      }
      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
    }));
  }) : identity2;
}
var init_tap = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/tap.js"() {
    init_isFunction();
    init_lift();
    init_OperatorSubscriber();
    init_identity();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/throttle.js
var init_throttle = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/throttle.js"() {
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/throttleTime.js
var init_throttleTime = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/throttleTime.js"() {
    init_async();
    init_throttle();
    init_timer();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/timeInterval.js
var init_timeInterval = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/timeInterval.js"() {
    init_async();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/timeoutWith.js
var init_timeoutWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/timeoutWith.js"() {
    init_async();
    init_isDate();
    init_timeout();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/timestamp.js
var init_timestamp = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/timestamp.js"() {
    init_dateTimestampProvider();
    init_map();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/window.js
var init_window = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/window.js"() {
    init_Subject();
    init_lift();
    init_OperatorSubscriber();
    init_noop2();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/windowCount.js
var init_windowCount = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/windowCount.js"() {
    init_tslib_es6();
    init_Subject();
    init_lift();
    init_OperatorSubscriber();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/windowTime.js
var init_windowTime = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/windowTime.js"() {
    init_Subject();
    init_async();
    init_Subscription();
    init_lift();
    init_OperatorSubscriber();
    init_arrRemove();
    init_args();
    init_executeSchedule();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/windowToggle.js
var init_windowToggle = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/windowToggle.js"() {
    init_tslib_es6();
    init_Subject();
    init_Subscription();
    init_lift();
    init_innerFrom();
    init_OperatorSubscriber();
    init_noop2();
    init_arrRemove();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/windowWhen.js
var init_windowWhen = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/windowWhen.js"() {
    init_Subject();
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js
var init_withLatestFrom = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js"() {
    init_tslib_es6();
    init_lift();
    init_OperatorSubscriber();
    init_innerFrom();
    init_identity();
    init_noop2();
    init_args();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/zipAll.js
var init_zipAll = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/zipAll.js"() {
    init_zip2();
    init_joinAllInternals();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/zip.js
var init_zip3 = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/zip.js"() {
    init_tslib_es6();
    init_zip2();
    init_lift();
  }
});

// node_modules/rxjs/dist/esm5/internal/operators/zipWith.js
var init_zipWith = __esm({
  "node_modules/rxjs/dist/esm5/internal/operators/zipWith.js"() {
    init_tslib_es6();
    init_zip3();
  }
});

// node_modules/rxjs/dist/esm5/index.js
var init_esm5 = __esm({
  "node_modules/rxjs/dist/esm5/index.js"() {
    init_Observable();
    init_ConnectableObservable();
    init_observable2();
    init_animationFrames();
    init_Subject();
    init_BehaviorSubject();
    init_ReplaySubject();
    init_AsyncSubject();
    init_asap();
    init_async();
    init_queue();
    init_animationFrame();
    init_VirtualTimeScheduler();
    init_Scheduler();
    init_Subscription();
    init_Subscriber();
    init_Notification();
    init_pipe();
    init_noop2();
    init_identity();
    init_isObservable();
    init_lastValueFrom();
    init_firstValueFrom();
    init_ArgumentOutOfRangeError();
    init_EmptyError();
    init_NotFoundError();
    init_ObjectUnsubscribedError();
    init_SequenceError();
    init_timeout();
    init_UnsubscriptionError();
    init_bindCallback();
    init_bindNodeCallback();
    init_combineLatest();
    init_concat2();
    init_connectable();
    init_defer();
    init_empty2();
    init_forkJoin();
    init_from();
    init_fromEvent();
    init_fromEventPattern();
    init_generate2();
    init_iif();
    init_interval();
    init_merge();
    init_never();
    init_of();
    init_onErrorResumeNext();
    init_pairs2();
    init_partition();
    init_race();
    init_range2();
    init_throwError();
    init_timer();
    init_using();
    init_zip2();
    init_scheduled();
    init_empty2();
    init_never();
    init_types();
    init_config();
    init_audit();
    init_auditTime();
    init_buffer3();
    init_bufferCount();
    init_bufferTime();
    init_bufferToggle();
    init_bufferWhen();
    init_catchError();
    init_combineAll();
    init_combineLatestAll();
    init_combineLatestWith();
    init_concatAll();
    init_concatMap();
    init_concatMapTo();
    init_concatWith();
    init_connect();
    init_count();
    init_debounce();
    init_debounceTime();
    init_defaultIfEmpty();
    init_delay();
    init_delayWhen();
    init_dematerialize();
    init_distinct();
    init_distinctUntilChanged();
    init_distinctUntilKeyChanged();
    init_elementAt();
    init_endWith();
    init_every();
    init_exhaust();
    init_exhaustAll();
    init_exhaustMap();
    init_expand2();
    init_filter2();
    init_finalize();
    init_find();
    init_findIndex();
    init_first();
    init_groupBy();
    init_ignoreElements();
    init_isEmpty();
    init_last();
    init_map();
    init_mapTo();
    init_materialize();
    init_max();
    init_mergeAll();
    init_flatMap();
    init_mergeMap();
    init_mergeMapTo();
    init_mergeScan();
    init_mergeWith();
    init_min3();
    init_multicast();
    init_observeOn();
    init_onErrorResumeNextWith();
    init_pairwise();
    init_pluck();
    init_publish();
    init_publishBehavior();
    init_publishLast();
    init_publishReplay();
    init_raceWith();
    init_reduce();
    init_repeat();
    init_repeatWhen();
    init_retry();
    init_retryWhen();
    init_refCount();
    init_sample();
    init_sampleTime();
    init_scan();
    init_sequenceEqual();
    init_share();
    init_shareReplay();
    init_single();
    init_skip();
    init_skipLast();
    init_skipUntil();
    init_skipWhile();
    init_startWith();
    init_subscribeOn();
    init_switchAll();
    init_switchMap();
    init_switchMapTo();
    init_switchScan();
    init_take();
    init_takeLast();
    init_takeUntil();
    init_takeWhile();
    init_tap();
    init_throttle();
    init_throttleTime();
    init_throwIfEmpty();
    init_timeInterval();
    init_timeout();
    init_timeoutWith();
    init_timestamp();
    init_toArray();
    init_window();
    init_windowCount();
    init_windowTime();
    init_windowToggle();
    init_windowWhen();
    init_withLatestFrom();
    init_zipAll();
    init_zipWith();
  }
});

// node_modules/@polkadot/api/util/logging.js
var l5;
var init_logging = __esm({
  "node_modules/@polkadot/api/util/logging.js"() {
    init_util();
    l5 = logger("api/util");
  }
});

// node_modules/@polkadot/api/util/filterEvents.js
function filterEvents(txHash, { block: { extrinsics, header } }, allEvents, status) {
  for (const [txIndex, x] of extrinsics.entries()) {
    if (x.hash.eq(txHash)) {
      return {
        blockNumber: isCompact(header.number) ? header.number.unwrap() : header.number,
        events: allEvents.filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(txIndex)),
        txIndex
      };
    }
  }
  if (status.isInBlock) {
    const allHashes = extrinsics.map((x) => x.hash.toHex());
    l5.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(", ")}`);
  }
  return {};
}
var init_filterEvents = __esm({
  "node_modules/@polkadot/api/util/filterEvents.js"() {
    init_util();
    init_logging();
  }
});

// node_modules/@polkadot/api/util/isKeyringPair.js
function isKeyringPair(account3) {
  return isFunction(account3.sign);
}
var init_isKeyringPair = __esm({
  "node_modules/@polkadot/api/util/isKeyringPair.js"() {
    init_util();
  }
});

// node_modules/@polkadot/api-derive/packageDetect.js
var init_packageDetect8 = __esm({
  "node_modules/@polkadot/api-derive/packageDetect.js"() {
    init_util();
    init_packageInfo();
    detectPackage(packageInfo, null, []);
  }
});

// node_modules/@polkadot/rpc-core/packageDetect.js
var init_packageDetect9 = __esm({
  "node_modules/@polkadot/rpc-core/packageDetect.js"() {
    init_packageInfo3();
    init_packageInfo4();
    init_util();
    init_packageInfo2();
    detectPackage(packageInfo2, null, [packageInfo3, packageInfo4]);
  }
});

// node_modules/@polkadot/types-codec/packageInfo.js
var packageInfo25;
var init_packageInfo25 = __esm({
  "node_modules/@polkadot/types-codec/packageInfo.js"() {
    packageInfo25 = { name: "@polkadot/types-codec", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.13.1" };
  }
});

// node_modules/@polkadot/types-create/packageInfo.js
var packageInfo26;
var init_packageInfo26 = __esm({
  "node_modules/@polkadot/types-create/packageInfo.js"() {
    packageInfo26 = { name: "@polkadot/types-create", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "10.13.1" };
  }
});

// node_modules/@polkadot/types/packageDetect.js
var init_packageDetect10 = __esm({
  "node_modules/@polkadot/types/packageDetect.js"() {
    init_packageInfo25();
    init_packageInfo26();
    init_util();
    init_packageInfo4();
    detectPackage(packageInfo4, null, [packageInfo25, packageInfo26]);
  }
});

// node_modules/@polkadot/types/interfaces/metadata/hashers.js
var AllHashers;
var init_hashers = __esm({
  "node_modules/@polkadot/types/interfaces/metadata/hashers.js"() {
    AllHashers = {
      Blake2_128: null,
      // eslint-disable-line camelcase
      Blake2_256: null,
      // eslint-disable-line camelcase
      Blake2_128Concat: null,
      // eslint-disable-line camelcase
      Twox128: null,
      Twox256: null,
      Twox64Concat: null,
      // new in v11
      Identity: null
    };
  }
});

// node_modules/@polkadot/types/interfaces/metadata/runtime.js
var META_V1_TO_V2, runtime;
var init_runtime = __esm({
  "node_modules/@polkadot/types/interfaces/metadata/runtime.js"() {
    META_V1_TO_V2 = {
      metadata: {
        description: "Returns the metadata of a runtime",
        params: [],
        type: "OpaqueMetadata"
      }
    };
    runtime = {
      Metadata: [
        {
          methods: {
            metadata_at_version: {
              description: "Returns the metadata at a given version.",
              params: [
                {
                  name: "version",
                  type: "u32"
                }
              ],
              type: "Option<OpaqueMetadata>"
            },
            metadata_versions: {
              description: "Returns the supported metadata versions.",
              params: [],
              type: "Vec<u32>"
            },
            ...META_V1_TO_V2
          },
          version: 2
        },
        {
          methods: {
            ...META_V1_TO_V2
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/metadata/v9.js
var v9;
var init_v9 = __esm({
  "node_modules/@polkadot/types/interfaces/metadata/v9.js"() {
    v9 = {
      // v9
      ErrorMetadataV9: {
        name: "Text",
        docs: "Vec<Text>"
      },
      EventMetadataV9: {
        name: "Text",
        args: "Vec<Type>",
        docs: "Vec<Text>"
      },
      FunctionArgumentMetadataV9: {
        name: "Text",
        type: "Type"
      },
      FunctionMetadataV9: {
        name: "Text",
        args: "Vec<FunctionArgumentMetadataV9>",
        docs: "Vec<Text>"
      },
      MetadataV9: {
        modules: "Vec<ModuleMetadataV9>"
      },
      ModuleConstantMetadataV9: {
        name: "Text",
        type: "Type",
        value: "Bytes",
        docs: "Vec<Text>"
      },
      ModuleMetadataV9: {
        name: "Text",
        storage: "Option<StorageMetadataV9>",
        calls: "Option<Vec<FunctionMetadataV9>>",
        events: "Option<Vec<EventMetadataV9>>",
        constants: "Vec<ModuleConstantMetadataV9>",
        errors: "Vec<ErrorMetadataV9>"
      },
      StorageEntryMetadataV9: {
        name: "Text",
        modifier: "StorageEntryModifierV9",
        type: "StorageEntryTypeV9",
        fallback: "Bytes",
        docs: "Vec<Text>"
      },
      StorageEntryModifierV9: {
        _enum: ["Optional", "Default", "Required"]
      },
      StorageEntryTypeV9: {
        _enum: {
          Plain: "Type",
          Map: {
            hasher: "StorageHasherV9",
            key: "Type",
            value: "Type",
            linked: "bool"
          },
          DoubleMap: {
            hasher: "StorageHasherV9",
            key1: "Type",
            key2: "Type",
            value: "Type",
            key2Hasher: "StorageHasherV9"
          }
        }
      },
      StorageHasherV9: {
        _enum: {
          Blake2_128: null,
          // eslint-disable-line camelcase
          Blake2_256: null,
          // eslint-disable-line camelcase
          Twox128: null,
          Twox256: null,
          Twox64Concat: null
        }
      },
      StorageMetadataV9: {
        prefix: "Text",
        items: "Vec<StorageEntryMetadataV9>"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/metadata/v10.js
var v10;
var init_v10 = __esm({
  "node_modules/@polkadot/types/interfaces/metadata/v10.js"() {
    v10 = {
      // v10
      ErrorMetadataV10: "ErrorMetadataV9",
      EventMetadataV10: "EventMetadataV9",
      FunctionArgumentMetadataV10: "FunctionArgumentMetadataV9",
      FunctionMetadataV10: "FunctionMetadataV9",
      MetadataV10: {
        modules: "Vec<ModuleMetadataV10>"
      },
      ModuleConstantMetadataV10: "ModuleConstantMetadataV9",
      ModuleMetadataV10: {
        name: "Text",
        storage: "Option<StorageMetadataV10>",
        calls: "Option<Vec<FunctionMetadataV10>>",
        events: "Option<Vec<EventMetadataV10>>",
        constants: "Vec<ModuleConstantMetadataV10>",
        errors: "Vec<ErrorMetadataV10>"
      },
      StorageEntryModifierV10: "StorageEntryModifierV9",
      StorageEntryMetadataV10: {
        name: "Text",
        modifier: "StorageEntryModifierV10",
        type: "StorageEntryTypeV10",
        fallback: "Bytes",
        docs: "Vec<Text>"
      },
      StorageEntryTypeV10: {
        _enum: {
          Plain: "Type",
          Map: {
            hasher: "StorageHasherV10",
            key: "Type",
            value: "Type",
            linked: "bool"
          },
          DoubleMap: {
            hasher: "StorageHasherV10",
            key1: "Type",
            key2: "Type",
            value: "Type",
            key2Hasher: "StorageHasherV10"
          }
        }
      },
      StorageMetadataV10: {
        prefix: "Text",
        items: "Vec<StorageEntryMetadataV10>"
      },
      StorageHasherV10: {
        _enum: {
          Blake2_128: null,
          // eslint-disable-line camelcase
          Blake2_256: null,
          // eslint-disable-line camelcase
          Blake2_128Concat: null,
          // eslint-disable-line camelcase
          Twox128: null,
          Twox256: null,
          Twox64Concat: null
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/metadata/v11.js
var v11;
var init_v11 = __esm({
  "node_modules/@polkadot/types/interfaces/metadata/v11.js"() {
    init_hashers();
    v11 = {
      // v11
      ErrorMetadataV11: "ErrorMetadataV10",
      EventMetadataV11: "EventMetadataV10",
      ExtrinsicMetadataV11: {
        version: "u8",
        signedExtensions: "Vec<Text>"
      },
      FunctionArgumentMetadataV11: "FunctionArgumentMetadataV10",
      FunctionMetadataV11: "FunctionMetadataV10",
      MetadataV11: {
        modules: "Vec<ModuleMetadataV11>",
        extrinsic: "ExtrinsicMetadataV11"
      },
      ModuleConstantMetadataV11: "ModuleConstantMetadataV10",
      ModuleMetadataV11: {
        name: "Text",
        storage: "Option<StorageMetadataV11>",
        calls: "Option<Vec<FunctionMetadataV11>>",
        events: "Option<Vec<EventMetadataV11>>",
        constants: "Vec<ModuleConstantMetadataV11>",
        errors: "Vec<ErrorMetadataV11>"
      },
      StorageEntryModifierV11: "StorageEntryModifierV10",
      StorageEntryMetadataV11: {
        name: "Text",
        modifier: "StorageEntryModifierV11",
        type: "StorageEntryTypeV11",
        fallback: "Bytes",
        docs: "Vec<Text>"
      },
      StorageEntryTypeV11: {
        _enum: {
          Plain: "Type",
          Map: {
            hasher: "StorageHasherV11",
            key: "Type",
            value: "Type",
            linked: "bool"
          },
          DoubleMap: {
            hasher: "StorageHasherV11",
            key1: "Type",
            key2: "Type",
            value: "Type",
            key2Hasher: "StorageHasherV11"
          }
        }
      },
      StorageMetadataV11: {
        prefix: "Text",
        items: "Vec<StorageEntryMetadataV11>"
      },
      StorageHasherV11: {
        _enum: AllHashers
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/metadata/v12.js
var v12;
var init_v12 = __esm({
  "node_modules/@polkadot/types/interfaces/metadata/v12.js"() {
    v12 = {
      // v12
      ErrorMetadataV12: "ErrorMetadataV11",
      EventMetadataV12: "EventMetadataV11",
      ExtrinsicMetadataV12: "ExtrinsicMetadataV11",
      FunctionArgumentMetadataV12: "FunctionArgumentMetadataV11",
      FunctionMetadataV12: "FunctionMetadataV11",
      MetadataV12: {
        modules: "Vec<ModuleMetadataV12>",
        extrinsic: "ExtrinsicMetadataV12"
      },
      ModuleConstantMetadataV12: "ModuleConstantMetadataV11",
      ModuleMetadataV12: {
        name: "Text",
        storage: "Option<StorageMetadataV12>",
        calls: "Option<Vec<FunctionMetadataV12>>",
        events: "Option<Vec<EventMetadataV12>>",
        constants: "Vec<ModuleConstantMetadataV12>",
        errors: "Vec<ErrorMetadataV12>",
        index: "u8"
      },
      StorageEntryModifierV12: "StorageEntryModifierV11",
      StorageEntryMetadataV12: "StorageEntryMetadataV11",
      StorageEntryTypeV12: "StorageEntryTypeV11",
      StorageMetadataV12: "StorageMetadataV11",
      StorageHasherV12: "StorageHasherV11"
    };
  }
});

// node_modules/@polkadot/types/interfaces/metadata/v13.js
var v13;
var init_v13 = __esm({
  "node_modules/@polkadot/types/interfaces/metadata/v13.js"() {
    v13 = {
      // v13
      ErrorMetadataV13: "ErrorMetadataV12",
      EventMetadataV13: "EventMetadataV12",
      ExtrinsicMetadataV13: "ExtrinsicMetadataV12",
      FunctionArgumentMetadataV13: "FunctionArgumentMetadataV12",
      FunctionMetadataV13: "FunctionMetadataV12",
      MetadataV13: {
        modules: "Vec<ModuleMetadataV13>",
        extrinsic: "ExtrinsicMetadataV13"
      },
      ModuleConstantMetadataV13: "ModuleConstantMetadataV12",
      ModuleMetadataV13: {
        name: "Text",
        storage: "Option<StorageMetadataV13>",
        calls: "Option<Vec<FunctionMetadataV13>>",
        events: "Option<Vec<EventMetadataV13>>",
        constants: "Vec<ModuleConstantMetadataV13>",
        errors: "Vec<ErrorMetadataV13>",
        index: "u8"
      },
      StorageEntryModifierV13: "StorageEntryModifierV12",
      StorageEntryMetadataV13: {
        name: "Text",
        modifier: "StorageEntryModifierV13",
        type: "StorageEntryTypeV13",
        fallback: "Bytes",
        docs: "Vec<Text>"
      },
      StorageEntryTypeV13: {
        _enum: {
          Plain: "Type",
          Map: {
            hasher: "StorageHasherV13",
            key: "Type",
            value: "Type",
            linked: "bool"
          },
          DoubleMap: {
            hasher: "StorageHasherV13",
            key1: "Type",
            key2: "Type",
            value: "Type",
            key2Hasher: "StorageHasherV13"
          },
          NMap: {
            keyVec: "Vec<Type>",
            hashers: "Vec<StorageHasherV13>",
            value: "Type"
          }
        }
      },
      StorageMetadataV13: {
        prefix: "Text",
        items: "Vec<StorageEntryMetadataV13>"
      },
      StorageHasherV13: "StorageHasherV12"
    };
  }
});

// node_modules/@polkadot/types/interfaces/scaleInfo/v1.js
var Si1Variant, v1;
var init_v1 = __esm({
  "node_modules/@polkadot/types/interfaces/scaleInfo/v1.js"() {
    Si1Variant = {
      name: "Text",
      fields: "Vec<Si1Field>",
      index: "u8",
      docs: "Vec<Text>"
    };
    v1 = {
      Si1Field: {
        name: "Option<Text>",
        type: "Si1LookupTypeId",
        typeName: "Option<Text>",
        docs: "Vec<Text>"
      },
      Si1LookupTypeId: "Compact<u32>",
      Si1Path: "Si0Path",
      Si1Type: {
        path: "Si1Path",
        params: "Vec<Si1TypeParameter>",
        def: "Si1TypeDef",
        docs: "Vec<Text>"
      },
      Si1TypeDef: {
        _enum: {
          Composite: "Si1TypeDefComposite",
          Variant: "Si1TypeDefVariant",
          Sequence: "Si1TypeDefSequence",
          Array: "Si1TypeDefArray",
          Tuple: "Si1TypeDefTuple",
          Primitive: "Si1TypeDefPrimitive",
          Compact: "Si1TypeDefCompact",
          BitSequence: "Si1TypeDefBitSequence",
          // NOTE: This is specific to the implementation for pre-v14 metadata
          // compatibility (always keep this as the last entry in the enum)
          HistoricMetaCompat: "Type"
        }
      },
      Si1TypeDefArray: {
        len: "u32",
        type: "Si1LookupTypeId"
      },
      Si1TypeDefBitSequence: {
        bitStoreType: "Si1LookupTypeId",
        bitOrderType: "Si1LookupTypeId"
      },
      Si1TypeDefCompact: {
        type: "Si1LookupTypeId"
      },
      Si1TypeDefComposite: {
        fields: "Vec<Si1Field>"
      },
      Si1TypeDefPrimitive: "Si0TypeDefPrimitive",
      Si1TypeDefSequence: {
        type: "Si1LookupTypeId"
      },
      Si1TypeDefTuple: "Vec<Si1LookupTypeId>",
      Si1TypeParameter: {
        name: "Text",
        type: "Option<Si1LookupTypeId>"
      },
      Si1TypeDefVariant: {
        variants: "Vec<Si1Variant>"
      },
      Si1Variant
    };
  }
});

// node_modules/@polkadot/types/interfaces/metadata/v14.js
var v14;
var init_v14 = __esm({
  "node_modules/@polkadot/types/interfaces/metadata/v14.js"() {
    init_v1();
    v14 = {
      // registry
      PortableTypeV14: {
        id: "Si1LookupTypeId",
        type: "Si1Type"
      },
      // compatibility with earlier layouts, i.e. don't break previous users
      ErrorMetadataV14: {
        ...Si1Variant,
        args: "Vec<Type>"
      },
      EventMetadataV14: {
        ...Si1Variant,
        args: "Vec<Type>"
      },
      FunctionArgumentMetadataV14: {
        name: "Text",
        type: "Type",
        typeName: "Option<Type>"
      },
      FunctionMetadataV14: {
        ...Si1Variant,
        args: "Vec<FunctionArgumentMetadataV14>"
      },
      // V14
      ExtrinsicMetadataV14: {
        type: "SiLookupTypeId",
        version: "u8",
        signedExtensions: "Vec<SignedExtensionMetadataV14>"
      },
      MetadataV14: {
        lookup: "PortableRegistry",
        pallets: "Vec<PalletMetadataV14>",
        extrinsic: "ExtrinsicMetadataV14",
        type: "SiLookupTypeId"
      },
      PalletCallMetadataV14: {
        type: "SiLookupTypeId"
      },
      PalletConstantMetadataV14: {
        name: "Text",
        type: "SiLookupTypeId",
        value: "Bytes",
        docs: "Vec<Text>"
      },
      PalletErrorMetadataV14: {
        type: "SiLookupTypeId"
      },
      PalletEventMetadataV14: {
        type: "SiLookupTypeId"
      },
      PalletMetadataV14: {
        name: "Text",
        storage: "Option<PalletStorageMetadataV14>",
        calls: "Option<PalletCallMetadataV14>",
        events: "Option<PalletEventMetadataV14>",
        constants: "Vec<PalletConstantMetadataV14>",
        errors: "Option<PalletErrorMetadataV14>",
        index: "u8"
      },
      PalletStorageMetadataV14: {
        prefix: "Text",
        // NOTE: Renamed from entries
        items: "Vec<StorageEntryMetadataV14>"
      },
      SignedExtensionMetadataV14: {
        identifier: "Text",
        type: "SiLookupTypeId",
        additionalSigned: "SiLookupTypeId"
      },
      StorageEntryMetadataV14: {
        name: "Text",
        modifier: "StorageEntryModifierV14",
        type: "StorageEntryTypeV14",
        fallback: "Bytes",
        docs: "Vec<Text>"
      },
      StorageEntryModifierV14: "StorageEntryModifierV13",
      StorageEntryTypeV14: {
        _enum: {
          Plain: "SiLookupTypeId",
          Map: {
            hashers: "Vec<StorageHasherV14>",
            key: "SiLookupTypeId",
            // NOTE: Renamed from "keys"
            value: "SiLookupTypeId"
          }
        }
      },
      StorageHasherV14: "StorageHasherV13"
    };
  }
});

// node_modules/@polkadot/types/interfaces/metadata/v15.js
var v15;
var init_v15 = __esm({
  "node_modules/@polkadot/types/interfaces/metadata/v15.js"() {
    v15 = {
      // new/adjusted in v15
      CustomMetadata15: {
        map: "BTreeMap<Text, CustomValueMetadata15>"
      },
      CustomValueMetadata15: {
        type: "SiLookupTypeId",
        value: "Bytes"
      },
      ExtrinsicMetadataV15: {
        version: "u8",
        addressType: "SiLookupTypeId",
        callType: "SiLookupTypeId",
        signatureType: "SiLookupTypeId",
        extraType: "SiLookupTypeId",
        signedExtensions: "Vec<SignedExtensionMetadataV14>"
      },
      OuterEnums15: {
        callType: "SiLookupTypeId",
        eventType: "SiLookupTypeId",
        errorType: "SiLookupTypeId"
      },
      PalletMetadataV15: {
        name: "Text",
        storage: "Option<PalletStorageMetadataV14>",
        calls: "Option<PalletCallMetadataV14>",
        events: "Option<PalletEventMetadataV14>",
        constants: "Vec<PalletConstantMetadataV14>",
        errors: "Option<PalletErrorMetadataV14>",
        index: "u8",
        docs: "Vec<Text>"
      },
      RuntimeApiMetadataV15: {
        name: "Text",
        methods: "Vec<RuntimeApiMethodMetadataV15>",
        docs: "Vec<Text>"
      },
      RuntimeApiMethodMetadataV15: {
        name: "Text",
        inputs: "Vec<RuntimeApiMethodParamMetadataV15>",
        output: "SiLookupTypeId",
        docs: "Vec<Text>"
      },
      RuntimeApiMethodParamMetadataV15: {
        name: "Text",
        type: "SiLookupTypeId"
      },
      // actual v15 definition
      MetadataV15: {
        lookup: "PortableRegistry",
        pallets: "Vec<PalletMetadataV15>",
        extrinsic: "ExtrinsicMetadataV15",
        type: "SiLookupTypeId",
        apis: "Vec<RuntimeApiMetadataV15>",
        outerEnums: "OuterEnums15",
        custom: "CustomMetadata15"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/metadata/definitions.js
var definitions_default;
var init_definitions = __esm({
  "node_modules/@polkadot/types/interfaces/metadata/definitions.js"() {
    init_hashers();
    init_runtime();
    init_v9();
    init_v10();
    init_v11();
    init_v12();
    init_v13();
    init_v14();
    init_v15();
    definitions_default = {
      rpc: {},
      runtime,
      types: {
        // all known
        ...v9,
        ...v10,
        ...v11,
        ...v12,
        ...v13,
        ...v14,
        ...v15,
        // latest mappings
        // NOTE: For v15, we only added the runtime defintions,
        // hence latest for most pointing to the previous V14
        ErrorMetadataLatest: "ErrorMetadataV14",
        EventMetadataLatest: "EventMetadataV14",
        ExtrinsicMetadataLatest: "ExtrinsicMetadataV15",
        FunctionArgumentMetadataLatest: "FunctionArgumentMetadataV14",
        FunctionMetadataLatest: "FunctionMetadataV14",
        MetadataLatest: "MetadataV15",
        PalletCallMetadataLatest: "PalletCallMetadataV14",
        PalletConstantMetadataLatest: "PalletConstantMetadataV14",
        PalletErrorMetadataLatest: "PalletErrorMetadataV14",
        PalletEventMetadataLatest: "PalletEventMetadataV14",
        PalletMetadataLatest: "PalletMetadataV15",
        PalletStorageMetadataLatest: "PalletStorageMetadataV14",
        PortableType: "PortableTypeV14",
        RuntimeApiMetadataLatest: "RuntimeApiMetadataV15",
        SignedExtensionMetadataLatest: "SignedExtensionMetadataV14",
        StorageEntryMetadataLatest: "StorageEntryMetadataV14",
        StorageEntryModifierLatest: "StorageEntryModifierV14",
        StorageEntryTypeLatest: "StorageEntryTypeV14",
        StorageHasher: "StorageHasherV14",
        // additional types
        OpaqueMetadata: "Opaque<Bytes>",
        // the enum containing all the mappings
        MetadataAll: {
          _enum: {
            V0: "DoNotConstruct<MetadataV0>",
            V1: "DoNotConstruct<MetadataV1>",
            V2: "DoNotConstruct<MetadataV2>",
            V3: "DoNotConstruct<MetadataV3>",
            V4: "DoNotConstruct<MetadataV4>",
            V5: "DoNotConstruct<MetadataV5>",
            V6: "DoNotConstruct<MetadataV6>",
            V7: "DoNotConstruct<MetadataV7>",
            V8: "DoNotConstruct<MetadataV8>",
            // First version on Kusama in V9, dropping will be problematic
            V9: "MetadataV9",
            V10: "MetadataV10",
            V11: "MetadataV11",
            V12: "MetadataV12",
            V13: "MetadataV13",
            V14: "MetadataV14",
            V15: "MetadataV15"
          }
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/runtime/runtime.js
var CORE_V1_TO_V4, CORE_V1_TO_V2, CORE_V2_TO_V4, CORE_V4_VERSION, CORE_V4_TO_V5, runtime2;
var init_runtime2 = __esm({
  "node_modules/@polkadot/types/interfaces/runtime/runtime.js"() {
    CORE_V1_TO_V4 = {
      execute_block: {
        description: "Execute the given block.",
        params: [
          {
            name: "block",
            type: "Block"
          }
        ],
        type: "Null"
      }
    };
    CORE_V1_TO_V2 = {
      version: {
        description: "Returns the version of the runtime.",
        params: [],
        type: "RuntimeVersionPre3"
      }
    };
    CORE_V2_TO_V4 = {
      initialize_block: {
        description: "Initialize a block with the given header.",
        params: [
          {
            name: "header",
            type: "Header"
          }
        ],
        type: "Null"
      }
    };
    CORE_V4_VERSION = {
      version: {
        description: "Returns the version of the runtime.",
        params: [],
        type: "RuntimeVersion"
      }
    };
    CORE_V4_TO_V5 = {
      ...CORE_V1_TO_V4,
      initialize_block: {
        description: "Initialize a block with the given header.",
        params: [
          {
            name: "header",
            type: "Header"
          }
        ],
        type: "ExtrinsicInclusionMode"
      }
    };
    runtime2 = {
      Core: [
        {
          methods: {
            ...CORE_V4_VERSION,
            ...CORE_V4_TO_V5
          },
          version: 5
        },
        {
          methods: {
            ...CORE_V4_VERSION,
            ...CORE_V1_TO_V4,
            ...CORE_V2_TO_V4
          },
          version: 4
        },
        {
          methods: {
            version: {
              description: "Returns the version of the runtime.",
              params: [],
              type: "RuntimeVersionPre4"
            },
            ...CORE_V1_TO_V4,
            ...CORE_V2_TO_V4
          },
          version: 3
        },
        {
          methods: {
            ...CORE_V1_TO_V2,
            ...CORE_V1_TO_V4,
            ...CORE_V2_TO_V4
          },
          version: 2
        },
        {
          methods: {
            initialise_block: {
              description: "Initialize a block with the given header.",
              params: [
                {
                  name: "header",
                  type: "Header"
                }
              ],
              type: "Null"
            },
            ...CORE_V1_TO_V2,
            ...CORE_V1_TO_V4
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/runtime/definitions.js
var numberTypes, knownOrigins, definitions_default2;
var init_definitions2 = __esm({
  "node_modules/@polkadot/types/interfaces/runtime/definitions.js"() {
    init_runtime2();
    numberTypes = {
      Fixed64: "Int<64, Fixed64>",
      FixedI64: "Int<64, FixedI64>",
      FixedU64: "UInt<64, FixedU64>",
      Fixed128: "Int<128, Fixed128>",
      FixedI128: "Int<128, FixedI128>",
      FixedU128: "UInt<128, FixedU128>",
      I32F32: "Int<64, I32F32>",
      U32F32: "UInt<64, U32F32>",
      PerU16: "UInt<16, PerU16>",
      Perbill: "UInt<32, Perbill>",
      Percent: "UInt<8, Percent>",
      Permill: "UInt<32, Permill>",
      Perquintill: "UInt<64, Perquintill>"
    };
    knownOrigins = {
      //
      // (1) Defaults from Substrate
      //
      Council: "CollectiveOrigin",
      System: "SystemOrigin",
      TechnicalCommittee: "CollectiveOrigin",
      //
      // (2) Defaults from Polkadot
      //
      Xcm: "XcmOrigin",
      XcmPallet: "XcmOrigin",
      //
      // (3) Defaults from Acala
      //
      Authority: "AuthorityOrigin",
      GeneralCouncil: "CollectiveOrigin"
    };
    definitions_default2 = {
      rpc: {},
      runtime: runtime2,
      types: {
        ...numberTypes,
        AccountId: "AccountId32",
        AccountId20: "GenericEthereumAccountId",
        AccountId32: "GenericAccountId32",
        AccountId33: "GenericAccountId33",
        AccountIdOf: "AccountId",
        AccountIndex: "GenericAccountIndex",
        Address: "MultiAddress",
        AssetId: "u32",
        Balance: "UInt<128, Balance>",
        BalanceOf: "Balance",
        Block: "GenericBlock",
        BlockNumber: "u32",
        BlockNumberFor: "BlockNumber",
        BlockNumberOf: "BlockNumber",
        Call: "GenericCall",
        CallHash: "Hash",
        CallHashOf: "CallHash",
        ChangesTrieConfiguration: {
          digestInterval: "u32",
          digestLevels: "u32"
        },
        ChangesTrieSignal: {
          _enum: {
            NewConfiguration: "Option<ChangesTrieConfiguration>"
          }
        },
        ConsensusEngineId: "GenericConsensusEngineId",
        CodecHash: "Hash",
        CrateVersion: {
          major: "u16",
          minor: "u8",
          patch: "u8"
        },
        Digest: {
          logs: "Vec<DigestItem>"
        },
        DigestItem: {
          _enum: {
            Other: "Bytes",
            // 0
            AuthoritiesChange: "Vec<AuthorityId>",
            // 1
            ChangesTrieRoot: "Hash",
            // 2
            SealV0: "SealV0",
            // 3
            Consensus: "Consensus",
            // 4
            Seal: "Seal",
            // 5
            PreRuntime: "PreRuntime",
            // 6
            ChangesTrieSignal: "ChangesTrieSignal",
            // 7
            RuntimeEnvironmentUpdated: "Null"
            // 8
          }
        },
        ExtrinsicsWeight: {
          normal: "Weight",
          operational: "Weight"
        },
        H32: "[u8; 4; H32]",
        H64: "[u8; 8; H64]",
        H128: "[u8; 16; H128]",
        H160: "[u8; 20; H160]",
        H256: "[u8; 32; H256]",
        H512: "[u8; 64; H512]",
        H1024: "[u8; 128; H1024]",
        H2048: "[u8; 256; H2048]",
        Hash: "H256",
        Header: {
          parentHash: "Hash",
          number: "Compact<BlockNumber>",
          stateRoot: "Hash",
          extrinsicsRoot: "Hash",
          digest: "Digest"
        },
        HeaderPartial: {
          parentHash: "Hash",
          // since we only parse JSON with this, having non-compact works
          number: "BlockNumber"
        },
        IndicesLookupSource: "GenericLookupSource",
        Index: "u32",
        Justification: "(ConsensusEngineId, EncodedJustification)",
        EncodedJustification: "Bytes",
        Justifications: "Vec<Justification>",
        KeyValue: "(StorageKey, StorageData)",
        KeyTypeId: "u32",
        LockIdentifier: "[u8; 8]",
        LookupSource: "MultiAddress",
        LookupTarget: "AccountId",
        ModuleId: "LockIdentifier",
        MultiAddress: "GenericMultiAddress",
        MultiSigner: {
          _enum: {
            Ed25519: "[u8; 32]",
            Sr25519: "[u8; 32]",
            Ecdsa: "[u8; 33]"
          }
        },
        Moment: "UInt<64, Moment>",
        OpaqueCall: "Bytes",
        Origin: "DoNotConstruct<Origin>",
        OriginCaller: {
          _enum: {
            // this should be dynamically built from the actual modules, based on index
            System: "SystemOrigin"
          }
        },
        PalletId: "LockIdentifier",
        PalletsOrigin: "OriginCaller",
        PalletVersion: {
          major: "u16",
          minor: "u8",
          patch: "u8"
        },
        Pays: {
          _enum: ["Yes", "No"]
        },
        Phantom: "Null",
        PhantomData: "Null",
        Releases: {
          _enum: ["V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10"]
        },
        RuntimeCall: "Call",
        RuntimeEvent: "Event",
        RuntimeDbWeight: {
          read: "Weight",
          write: "Weight"
        },
        SignedBlock: "SignedBlockWithJustifications",
        SignedBlockWithJustification: {
          block: "Block",
          justification: "Option<EncodedJustification>"
        },
        SignedBlockWithJustifications: {
          block: "Block",
          justifications: "Option<Justifications>"
        },
        Slot: "u64",
        SlotDuration: "u64",
        StorageData: "Bytes",
        StorageInfo: {
          palletName: "Bytes",
          storage_name: "Bytes",
          prefix: "Bytes",
          maxValues: "Option<u32>",
          maxSize: "Option<u32>"
        },
        StorageProof: {
          trieNodes: "Vec<Bytes>"
        },
        TransactionPriority: "u64",
        TransactionLongevity: "u64",
        TransactionTag: "Bytes",
        TransactionInfo: {
          _alias: {
            dataSize: "size"
          },
          chunkRoot: "H256",
          contentHash: "H256",
          dataSize: "u32",
          blockChunks: "u32"
        },
        TransactionStorageProof: {
          chunk: "Vec<u8>",
          proof: "Vec<Vec<u8>>"
        },
        ValidatorId: "AccountId",
        ValidatorIdOf: "ValidatorId",
        WeightV0: "u32",
        WeightV1: "u64",
        WeightV2: {
          refTime: "Compact<u64>",
          proofSize: "Compact<u64>"
        },
        Weight: "WeightV2",
        WeightMultiplier: "Fixed64",
        // digest
        PreRuntime: "(ConsensusEngineId, Bytes)",
        SealV0: "(u64, Signature)",
        Seal: "(ConsensusEngineId, Bytes)",
        Consensus: "(ConsensusEngineId, Bytes)",
        // Type when core initialize_block went from v4 to v5
        ExtrinsicInclusionMode: {
          _enum: ["AllExtrinsics", "OnlyInherents"]
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/scaleInfo/v0.js
var v0;
var init_v0 = __esm({
  "node_modules/@polkadot/types/interfaces/scaleInfo/v0.js"() {
    v0 = {
      Si0Field: {
        name: "Option<Text>",
        type: "Si0LookupTypeId",
        typeName: "Option<Text>",
        docs: "Vec<Text>"
      },
      Si0LookupTypeId: "u32",
      Si0Path: "Vec<Text>",
      Si0Type: {
        path: "Si0Path",
        params: "Vec<Si0LookupTypeId>",
        def: "Si0TypeDef"
      },
      Si0TypeDef: {
        _enum: {
          Composite: "Si0TypeDefComposite",
          Variant: "Si0TypeDefVariant",
          Sequence: "Si0TypeDefSequence",
          Array: "Si0TypeDefArray",
          Tuple: "Si0TypeDefTuple",
          Primitive: "Si0TypeDefPrimitive",
          Compact: "Si0TypeDefCompact",
          Phantom: "Si0TypeDefPhantom",
          BitSequence: "Si0TypeDefBitSequence"
        }
      },
      Si0TypeDefArray: {
        len: "u32",
        type: "Si0LookupTypeId"
      },
      Si0TypeDefBitSequence: {
        bitStoreType: "Si0LookupTypeId",
        bitOrderType: "Si0LookupTypeId"
      },
      Si0TypeDefCompact: {
        type: "Si0LookupTypeId"
      },
      Si0TypeDefComposite: {
        fields: "Vec<Si0Field>"
      },
      Si0TypeDefPhantom: "Null",
      Si0TypeDefVariant: {
        variants: "Vec<Si0Variant>"
      },
      Si0TypeDefPrimitive: {
        _enum: ["Bool", "Char", "Str", "U8", "U16", "U32", "U64", "U128", "U256", "I8", "I16", "I32", "I64", "I128", "I256"]
      },
      Si0TypeDefSequence: {
        type: "Si0LookupTypeId"
      },
      Si0TypeDefTuple: "Vec<Si0LookupTypeId>",
      Si0TypeParameter: {
        name: "Text",
        type: "Option<Si0LookupTypeId>"
      },
      Si0Variant: {
        name: "Text",
        fields: "Vec<Si0Field>",
        index: "Option<u8>",
        discriminant: "Option<u64>",
        docs: "Vec<Text>"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/scaleInfo/definitions.js
var definitions_default3;
var init_definitions3 = __esm({
  "node_modules/@polkadot/types/interfaces/scaleInfo/definitions.js"() {
    init_v0();
    init_v1();
    definitions_default3 = {
      rpc: {},
      types: {
        ...v0,
        ...v1,
        // latest mappings
        SiField: "Si1Field",
        SiLookupTypeId: "Si1LookupTypeId",
        SiPath: "Si1Path",
        SiType: "Si1Type",
        SiTypeDef: "Si1TypeDef",
        SiTypeDefArray: "Si1TypeDefArray",
        SiTypeDefBitSequence: "Si1TypeDefBitSequence",
        SiTypeDefCompact: "Si1TypeDefCompact",
        SiTypeDefComposite: "Si1TypeDefComposite",
        SiTypeDefPrimitive: "Si1TypeDefPrimitive",
        SiTypeDefSequence: "Si1TypeDefSequence",
        SiTypeDefTuple: "Si1TypeDefTuple",
        SiTypeParameter: "Si1TypeParameter",
        SiTypeDefVariant: "Si1TypeDefVariant",
        SiVariant: "Si1Variant"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/essentials.js
var init_essentials = __esm({
  "node_modules/@polkadot/types/interfaces/essentials.js"() {
    init_definitions();
    init_definitions2();
    init_definitions3();
  }
});

// node_modules/@polkadot/types/interfaces/assetConversion/runtime.js
var runtime3;
var init_runtime3 = __esm({
  "node_modules/@polkadot/types/interfaces/assetConversion/runtime.js"() {
    runtime3 = {
      AssetConversionApi: [
        {
          methods: {
            get_reserves: {
              description: "Get pool reserves",
              params: [
                {
                  name: "asset1",
                  type: "StagingXcmV3MultiLocation"
                },
                {
                  name: "asset2",
                  type: "StagingXcmV3MultiLocation"
                }
              ],
              type: "Option<(Balance,Balance)>"
            },
            quote_price_exact_tokens_for_tokens: {
              description: "Quote price: exact tokens for tokens",
              params: [
                {
                  name: "asset1",
                  type: "StagingXcmV3MultiLocation"
                },
                {
                  name: "asset2",
                  type: "StagingXcmV3MultiLocation"
                },
                {
                  name: "amount",
                  type: "u128"
                },
                {
                  name: "include_fee",
                  type: "bool"
                }
              ],
              type: "Option<(Balance)>"
            },
            quote_price_tokens_for_exact_tokens: {
              description: "Quote price: tokens for exact tokens",
              params: [
                {
                  name: "asset1",
                  type: "StagingXcmV3MultiLocation"
                },
                {
                  name: "asset2",
                  type: "StagingXcmV3MultiLocation"
                },
                {
                  name: "amount",
                  type: "u128"
                },
                {
                  name: "include_fee",
                  type: "bool"
                }
              ],
              type: "Option<(Balance)>"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/assetConversion/definitions.js
var definitions_default4;
var init_definitions4 = __esm({
  "node_modules/@polkadot/types/interfaces/assetConversion/definitions.js"() {
    init_runtime3();
    definitions_default4 = {
      rpc: {},
      runtime: runtime3,
      types: {
        TAssetConversion: "Option<MultiLocation>"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/assets/runtime.js
var runtime4;
var init_runtime4 = __esm({
  "node_modules/@polkadot/types/interfaces/assets/runtime.js"() {
    runtime4 = {
      AssetsApi: [
        {
          methods: {
            account_balances: {
              description: "Return the current set of authorities.",
              params: [
                {
                  name: "account",
                  type: "AccountId"
                }
              ],
              type: "Vec<(u32, TAssetBalance)>"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/assets/definitions.js
var definitions_default5;
var init_definitions5 = __esm({
  "node_modules/@polkadot/types/interfaces/assets/definitions.js"() {
    init_runtime4();
    definitions_default5 = {
      rpc: {},
      runtime: runtime4,
      types: {
        AssetApprovalKey: {
          owner: "AccountId",
          delegate: "AccountId"
        },
        AssetApproval: {
          amount: "TAssetBalance",
          deposit: "TAssetDepositBalance"
        },
        AssetBalance: {
          balance: "TAssetBalance",
          isFrozen: "bool",
          isSufficient: "bool"
        },
        AssetDestroyWitness: {
          accounts: "Compact<u32>",
          sufficients: "Compact<u32>",
          approvals: "Compact<u32>"
        },
        AssetDetails: {
          owner: "AccountId",
          issuer: "AccountId",
          admin: "AccountId",
          freezer: "AccountId",
          supply: "TAssetBalance",
          deposit: "TAssetDepositBalance",
          minBalance: "TAssetBalance",
          isSufficient: "bool",
          accounts: "u32",
          sufficients: "u32",
          approvals: "u32",
          isFrozen: "bool"
        },
        AssetMetadata: {
          deposit: "TAssetDepositBalance",
          name: "Vec<u8>",
          symbol: "Vec<u8>",
          decimals: "u8",
          isFrozen: "bool"
        },
        TAssetBalance: "u64",
        TAssetDepositBalance: "BalanceOf"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/aura/runtime.js
var runtime5;
var init_runtime5 = __esm({
  "node_modules/@polkadot/types/interfaces/aura/runtime.js"() {
    runtime5 = {
      AuraApi: [
        {
          methods: {
            authorities: {
              description: "Return the current set of authorities.",
              params: [],
              type: "Vec<AuthorityId>"
            },
            slot_duration: {
              description: "Returns the slot duration for Aura.",
              params: [],
              type: "SlotDuration"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/aura/definitions.js
var definitions_default6;
var init_definitions6 = __esm({
  "node_modules/@polkadot/types/interfaces/aura/definitions.js"() {
    init_runtime5();
    definitions_default6 = {
      rpc: {},
      runtime: runtime5,
      types: {
        RawAuraPreDigest: {
          slotNumber: "u64"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/authorship/definitions.js
var definitions_default7;
var init_definitions7 = __esm({
  "node_modules/@polkadot/types/interfaces/authorship/definitions.js"() {
    definitions_default7 = {
      rpc: {},
      types: {
        UncleEntryItem: {
          _enum: {
            InclusionHeight: "BlockNumber",
            Uncle: "(Hash, Option<AccountId>)"
          }
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/babe/rpc.js
var rpc;
var init_rpc = __esm({
  "node_modules/@polkadot/types/interfaces/babe/rpc.js"() {
    rpc = {
      epochAuthorship: {
        description: "Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore",
        isUnsafe: true,
        params: [],
        type: "HashMap<AuthorityId, EpochAuthorship>"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/babe/runtime.js
var V1_V2_SHARED, runtime6;
var init_runtime6 = __esm({
  "node_modules/@polkadot/types/interfaces/babe/runtime.js"() {
    V1_V2_SHARED = {
      current_epoch: {
        description: "Returns information regarding the current epoch.",
        params: [],
        type: "Epoch"
      },
      current_epoch_start: {
        description: "Returns the slot that started the current epoch.",
        params: [],
        type: "Slot"
      },
      generate_key_ownership_proof: {
        description: "Generates a proof of key ownership for the given authority in the current epoch.",
        params: [
          {
            name: "slot",
            type: "Slot"
          },
          {
            name: "authorityId",
            type: "AuthorityId"
          }
        ],
        type: "Option<OpaqueKeyOwnershipProof>"
      },
      next_epoch: {
        description: "Returns information regarding the next epoch (which was already previously announced).",
        params: [],
        type: "Epoch"
      },
      submit_report_equivocation_unsigned_extrinsic: {
        description: "Submits an unsigned extrinsic to report an equivocation.",
        params: [
          {
            name: "equivocationProof",
            type: "BabeEquivocationProof"
          },
          {
            name: "keyOwnerProof",
            type: "OpaqueKeyOwnershipProof"
          }
        ],
        type: "Option<Null>"
      }
    };
    runtime6 = {
      BabeApi: [
        {
          methods: {
            configuration: {
              description: "Return the genesis configuration for BABE. The configuration is only read on genesis.",
              params: [],
              type: "BabeGenesisConfiguration"
            },
            ...V1_V2_SHARED
          },
          version: 2
        },
        {
          methods: {
            configuration: {
              description: "Return the configuration for BABE. Version 1.",
              params: [],
              type: "BabeGenesisConfigurationV1"
            },
            ...V1_V2_SHARED
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/babe/definitions.js
var definitions_default8;
var init_definitions8 = __esm({
  "node_modules/@polkadot/types/interfaces/babe/definitions.js"() {
    init_rpc();
    init_runtime6();
    definitions_default8 = {
      rpc,
      runtime: runtime6,
      types: {
        AllowedSlots: {
          _enum: ["PrimarySlots", "PrimaryAndSecondaryPlainSlots", "PrimaryAndSecondaryVRFSlots"]
        },
        BabeAuthorityWeight: "u64",
        BabeEpochConfiguration: {
          c: "(u64, u64)",
          allowedSlots: "AllowedSlots"
        },
        BabeBlockWeight: "u32",
        BabeEquivocationProof: {
          offender: "AuthorityId",
          slotNumber: "SlotNumber",
          firstHeader: "Header",
          secondHeader: "Header"
        },
        BabeGenesisConfiguration: {
          slotDuration: "u64",
          epochLength: "u64",
          c: "(u64, u64)",
          genesisAuthorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
          randomness: "Randomness",
          allowedSlots: "AllowedSlots"
        },
        BabeGenesisConfigurationV1: {
          slotDuration: "u64",
          epochLength: "u64",
          c: "(u64, u64)",
          genesisAuthorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
          randomness: "Randomness",
          secondarySlots: "bool"
        },
        BabeWeight: "u64",
        MaybeRandomness: "Option<Randomness>",
        MaybeVrf: "Option<VrfData>",
        Epoch: {
          epochIndex: "u64",
          startSlot: "Slot",
          duration: "u64",
          authorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
          randomness: "Hash",
          // [u8; VRF_OUTPUT_LENGTH],
          config: "BabeEpochConfiguration"
        },
        EpochAuthorship: {
          primary: "Vec<u64>",
          secondary: "Vec<u64>",
          secondary_vrf: "Vec<u64>"
        },
        NextConfigDescriptor: {
          _enum: {
            V0: "Null",
            V1: "NextConfigDescriptorV1"
          }
        },
        NextConfigDescriptorV1: {
          c: "(u64, u64)",
          allowedSlots: "AllowedSlots"
        },
        OpaqueKeyOwnershipProof: "Bytes",
        Randomness: "Hash",
        // [u8; RANDOMNESS_LENGTH],
        RawBabePreDigest: {
          _enum: {
            Phantom: "Null",
            // index starts at 1... empty slot at 0
            Primary: "RawBabePreDigestPrimary",
            SecondaryPlain: "RawBabePreDigestSecondaryPlain",
            SecondaryVRF: "RawBabePreDigestSecondaryVRF"
          }
        },
        RawBabePreDigestPrimary: {
          authorityIndex: "u32",
          // AuthorityIndex (also in aura)
          slotNumber: "SlotNumber",
          vrfOutput: "VrfOutput",
          vrfProof: "VrfProof"
        },
        RawBabePreDigestSecondaryPlain: {
          authorityIndex: "u32",
          // AuthorityIndex (also in aura)
          slotNumber: "SlotNumber"
        },
        RawBabePreDigestSecondaryVRF: {
          authorityIndex: "u32",
          slotNumber: "SlotNumber",
          vrfOutput: "VrfOutput",
          vrfProof: "VrfProof"
        },
        RawBabePreDigestTo159: {
          _enum: {
            Primary: "RawBabePreDigestPrimaryTo159",
            Secondary: "RawBabePreDigestSecondaryTo159"
          }
        },
        RawBabePreDigestPrimaryTo159: {
          authorityIndex: "u32",
          slotNumber: "SlotNumber",
          weight: "BabeBlockWeight",
          vrfOutput: "VrfOutput",
          vrfProof: "VrfProof"
        },
        RawBabePreDigestSecondaryTo159: {
          authorityIndex: "u32",
          slotNumber: "SlotNumber",
          weight: "BabeBlockWeight"
        },
        // a cross old/new compatible version of the digest, that is _only_ useful
        // for partial parsing and extraction of the author. This assumes that all
        // entries has the authorityIndex in the first position - and that it is all
        // we are interested in
        RawBabePreDigestCompat: {
          _enum: {
            Zero: "u32",
            One: "u32",
            Two: "u32",
            Three: "u32"
          }
        },
        SlotNumber: "u64",
        VrfData: "[u8; 32]",
        VrfOutput: "[u8; 32]",
        VrfProof: "[u8; 64]"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/balances/definitions.js
var definitions_default9;
var init_definitions9 = __esm({
  "node_modules/@polkadot/types/interfaces/balances/definitions.js"() {
    definitions_default9 = {
      rpc: {},
      types: {
        AccountData: {
          free: "Balance",
          reserved: "Balance",
          miscFrozen: "Balance",
          feeFrozen: "Balance"
        },
        BalanceLockTo212: {
          id: "LockIdentifier",
          amount: "Balance",
          until: "BlockNumber",
          reasons: "WithdrawReasons"
        },
        BalanceLock: {
          id: "LockIdentifier",
          amount: "Balance",
          reasons: "Reasons"
        },
        BalanceStatus: {
          _enum: ["Free", "Reserved"]
        },
        Reasons: {
          _enum: ["Fee", "Misc", "All"]
        },
        ReserveData: {
          id: "ReserveIdentifier",
          amount: "Balance"
        },
        ReserveIdentifier: "[u8; 8]",
        VestingSchedule: {
          offset: "Balance",
          perBlock: "Balance",
          startingBlock: "BlockNumber"
        },
        WithdrawReasons: {
          _set: {
            TransactionPayment: 1,
            Transfer: 2,
            Reserve: 4,
            Fee: 8,
            Tip: 16
          }
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/beefy/rpc.js
var rpc2;
var init_rpc2 = __esm({
  "node_modules/@polkadot/types/interfaces/beefy/rpc.js"() {
    rpc2 = {
      getFinalizedHead: {
        description: "Returns hash of the latest BEEFY finalized block as seen by this client.",
        params: [],
        type: "H256"
      },
      subscribeJustifications: {
        description: "Returns the block most recently finalized by BEEFY, alongside its justification.",
        params: [],
        pubsub: [
          "justifications",
          "subscribeJustifications",
          "unsubscribeJustifications"
        ],
        type: "BeefyVersionedFinalityProof"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/beefy/runtime.js
var BEEFY_V1_V3, BEEFY_MMR_V1, runtime7;
var init_runtime7 = __esm({
  "node_modules/@polkadot/types/interfaces/beefy/runtime.js"() {
    BEEFY_V1_V3 = {
      beefy_genesis: {
        description: "Return the block number where BEEFY consensus is enabled/started",
        params: [],
        type: "Option<BlockNumber>"
      },
      generate_key_ownership_proof: {
        description: "Generates a proof of key ownership for the given authority in the given set.",
        params: [
          {
            name: "setId",
            type: "ValidatorSetId"
          },
          {
            name: "authorityId",
            type: "AuthorityId"
          }
        ],
        type: "Option<OpaqueKeyOwnershipProof>"
      },
      submit_report_equivocation_unsigned_extrinsic: {
        description: "Submits an unsigned extrinsic to report an equivocation.",
        params: [
          {
            name: "equivocationProof",
            type: "BeefyEquivocationProof"
          },
          {
            name: "keyOwnerProof",
            type: "OpaqueKeyOwnershipProof"
          }
        ],
        type: "Option<Null>"
      },
      validator_set: {
        description: "Return the current active BEEFY validator set",
        params: [],
        type: "Option<ValidatorSet>"
      }
    };
    BEEFY_MMR_V1 = {
      authority_set_proof: {
        description: "Return the currently active BEEFY authority set proof.",
        params: [],
        type: "BeefyAuthoritySet"
      },
      next_authority_set_proof: {
        description: "Return the next/queued BEEFY authority set proof.",
        params: [],
        type: "BeefyNextAuthoritySet"
      }
    };
    runtime7 = {
      BeefyApi: [
        {
          methods: BEEFY_V1_V3,
          version: 3
        },
        {
          methods: BEEFY_V1_V3,
          version: 2
        },
        {
          methods: BEEFY_V1_V3,
          version: 1
        }
      ],
      BeefyMmrApi: [
        {
          methods: BEEFY_MMR_V1,
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/beefy/definitions.js
var definitions_default10;
var init_definitions10 = __esm({
  "node_modules/@polkadot/types/interfaces/beefy/definitions.js"() {
    init_rpc2();
    init_runtime7();
    definitions_default10 = {
      rpc: rpc2,
      runtime: runtime7,
      types: {
        BeefyAuthoritySet: {
          id: "u64",
          len: "u32",
          root: "H256"
        },
        BeefyCommitment: {
          payload: "BeefyPayload",
          blockNumber: "BlockNumber",
          validatorSetId: "ValidatorSetId"
        },
        BeefyId: "[u8; 33]",
        BeefyEquivocationProof: {
          first: "BeefyVoteMessage",
          second: "BeefyVoteMessage"
        },
        BeefyCompactSignedCommitment: {
          commitment: "BeefyCommitment",
          signaturesFrom: "Vec<u8>",
          validatorSetLen: "u32",
          signaturesCompact: "Vec<EcdsaSignature>"
        },
        BeefySignedCommitment: {
          commitment: "BeefyCommitment",
          signatures: "Vec<Option<EcdsaSignature>>"
        },
        BeefyVersionedFinalityProof: {
          _enum: {
            V0: "Null",
            V1: "BeefyCompactSignedCommitment"
          }
        },
        BeefyNextAuthoritySet: {
          id: "u64",
          len: "u32",
          root: "H256"
        },
        BeefyPayload: "Vec<(BeefyPayloadId, Bytes)>",
        BeefyPayloadId: "[u8;2]",
        BeefyVoteMessage: {
          commitment: "BeefyCommitment",
          id: "AuthorityId",
          signature: "Signature"
        },
        MmrRootHash: "H256",
        ValidatorSetId: "u64",
        ValidatorSet: {
          validators: "Vec<AuthorityId>",
          id: "ValidatorSetId"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/benchmark/runtime.js
var runtime8;
var init_runtime8 = __esm({
  "node_modules/@polkadot/types/interfaces/benchmark/runtime.js"() {
    runtime8 = {
      Benchmark: [
        {
          methods: {
            benchmark_metadata: {
              description: "Get the benchmark metadata available for this runtime.",
              params: [
                {
                  name: "extra",
                  type: "bool"
                }
              ],
              type: "(Vec<BenchmarkList>, Vec<StorageInfo>)"
            },
            dispatch_benchmark: {
              description: "Dispatch the given benchmark.",
              params: [
                {
                  name: "config",
                  type: "BenchmarkConfig"
                }
              ],
              type: "Result<Vec<BenchmarkBatch>, Text>"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/benchmark/definitions.js
var definitions_default11;
var init_definitions11 = __esm({
  "node_modules/@polkadot/types/interfaces/benchmark/definitions.js"() {
    init_runtime8();
    definitions_default11 = {
      rpc: {},
      runtime: runtime8,
      types: {
        BenchmarkBatch: {
          pallet: "Text",
          instance: "Text",
          benchmark: "Text",
          results: "Vec<BenchmarkResult>"
        },
        BenchmarkConfig: {
          pallet: "Bytes",
          benchmark: "Bytes",
          selectedComponents: "Vec<(BenchmarkParameter, u32)>",
          verify: "bool",
          internalRepeats: "u32"
        },
        BenchmarkList: {
          pallet: "Bytes",
          instance: "Bytes",
          benchmarks: "Vec<BenchmarkMetadata>"
        },
        BenchmarkMetadata: {
          name: "Bytes",
          components: "Vec<(BenchmarkParameter, u32, u32)>"
        },
        BenchmarkParameter: {
          _enum: ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
        },
        BenchmarkResult: {
          components: "Vec<(BenchmarkParameter, u32)>",
          extrinsicTime: "u128",
          storageRootTime: "u128",
          reads: "u32",
          repeatReads: "u32",
          writes: "u32",
          repeatWrites: "u32",
          proofSize: "u32",
          benchKeys: "Vec<(Vec<u8>, u32, u32, bool)>"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/blockbuilder/runtime.js
var BB_V2_TO_V4, BB_V2_TO_V5, BB_V2_TO_V6, BB_V3_TO_V6, runtime9;
var init_runtime9 = __esm({
  "node_modules/@polkadot/types/interfaces/blockbuilder/runtime.js"() {
    BB_V2_TO_V4 = {
      // this was removed after V4
      random_seed: {
        description: "Generate a random seed.",
        params: [],
        type: "Hash"
      }
    };
    BB_V2_TO_V5 = {
      apply_extrinsic: {
        description: "Apply the given extrinsic.",
        params: [
          {
            name: "extrinsic",
            type: "Extrinsic"
          }
        ],
        type: "ApplyExtrinsicResultPre6"
      }
    };
    BB_V2_TO_V6 = {
      check_inherents: {
        description: "Check that the inherents are valid.",
        params: [
          {
            name: "block",
            type: "Block"
          },
          {
            name: "data",
            type: "InherentData"
          }
        ],
        type: "CheckInherentsResult"
      },
      inherent_extrinsics: {
        description: "Generate inherent extrinsics.",
        params: [
          {
            name: "inherent",
            type: "InherentData"
          }
        ],
        type: "Vec<Extrinsic>"
      }
    };
    BB_V3_TO_V6 = {
      // renamed in v3 from finalize_block
      finalize_block: {
        description: "Finish the current block.",
        params: [],
        type: "Header"
      }
    };
    runtime9 = {
      BlockBuilder: [
        {
          methods: {
            apply_extrinsic: {
              description: "Apply the given extrinsic.",
              params: [
                {
                  name: "extrinsic",
                  type: "Extrinsic"
                }
              ],
              type: "ApplyExtrinsicResult"
            },
            ...BB_V2_TO_V6,
            ...BB_V3_TO_V6
          },
          version: 6
        },
        {
          methods: {
            // apply_extrinsic result changed in 6
            ...BB_V2_TO_V5,
            ...BB_V2_TO_V6,
            ...BB_V3_TO_V6
          },
          version: 5
        },
        {
          methods: {
            // random_seed removed
            ...BB_V2_TO_V4,
            ...BB_V2_TO_V5,
            ...BB_V2_TO_V6,
            ...BB_V3_TO_V6
          },
          version: 4
        },
        {
          methods: {
            // finalize_block renamed
            ...BB_V2_TO_V4,
            ...BB_V2_TO_V6,
            ...BB_V3_TO_V6
          },
          version: 3
        },
        {
          methods: {
            finalise_block: {
              description: "Finish the current block.",
              params: [],
              type: "Header"
            },
            ...BB_V2_TO_V4,
            ...BB_V2_TO_V6
          },
          version: 2
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/blockbuilder/definitions.js
var definitions_default12;
var init_definitions12 = __esm({
  "node_modules/@polkadot/types/interfaces/blockbuilder/definitions.js"() {
    init_runtime9();
    definitions_default12 = {
      rpc: {},
      runtime: runtime9,
      types: {
        CheckInherentsResult: {
          okay: "bool",
          fatalError: "bool",
          errors: "InherentData"
        },
        InherentData: {
          data: "BTreeMap<InherentIdentifier, Bytes>"
        },
        InherentIdentifier: "[u8; 8]"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/collective/definitions.js
var definitions_default13;
var init_definitions13 = __esm({
  "node_modules/@polkadot/types/interfaces/collective/definitions.js"() {
    definitions_default13 = {
      rpc: {},
      types: {
        CollectiveOrigin: {
          _enum: {
            Members: "(MemberCount, MemberCount)",
            Member: "AccountId"
          }
        },
        MemberCount: "u32",
        ProposalIndex: "u32",
        VotesTo230: {
          index: "ProposalIndex",
          threshold: "MemberCount",
          ayes: "Vec<AccountId>",
          nays: "Vec<AccountId>"
        },
        Votes: {
          index: "ProposalIndex",
          threshold: "MemberCount",
          ayes: "Vec<AccountId>",
          nays: "Vec<AccountId>",
          end: "BlockNumber"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/consensus/definitions.js
var definitions_default14;
var init_definitions14 = __esm({
  "node_modules/@polkadot/types/interfaces/consensus/definitions.js"() {
    definitions_default14 = {
      rpc: {},
      types: {
        AuthorityId: "AccountId",
        RawVRFOutput: "[u8; 32]"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/contracts/rpc.js
var rpc3;
var init_rpc3 = __esm({
  "node_modules/@polkadot/types/interfaces/contracts/rpc.js"() {
    rpc3 = {
      call: {
        deprecated: "Use the runtime interface `api.call.contractsApi.call` instead",
        description: "Executes a call to a contract",
        params: [
          {
            name: "callRequest",
            type: "ContractCallRequest"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "ContractExecResult"
      },
      getStorage: {
        deprecated: "Use the runtime interface `api.call.contractsApi.getStorage` instead",
        description: "Returns the value under a specified storage key in a contract",
        params: [
          {
            name: "address",
            type: "AccountId"
          },
          {
            name: "key",
            type: "H256"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "Option<Bytes>"
      },
      instantiate: {
        deprecated: "Use the runtime interface `api.call.contractsApi.instantiate` instead",
        description: "Instantiate a new contract",
        params: [
          {
            name: "request",
            type: "InstantiateRequestV1"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "ContractInstantiateResult"
      },
      rentProjection: {
        deprecated: "Not available in newer versions of the contracts interfaces",
        description: "Returns the projected time a given contract will be able to sustain paying its rent",
        params: [
          {
            name: "address",
            type: "AccountId"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "Option<BlockNumber>"
      },
      uploadCode: {
        deprecated: "Use the runtime interface `api.call.contractsApi.uploadCode` instead",
        description: "Upload new code without instantiating a contract from it",
        // The RPC here is terribly misnamed - somebody forgot how the RPCs
        // are actually done, ie. <module>_<camelCasedMethod>
        endpoint: "contracts_upload_code",
        params: [
          {
            name: "uploadRequest",
            type: "CodeUploadRequest"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "CodeUploadResult"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/contracts/runtime.js
var SHARED_V1_V2, runtime10;
var init_runtime10 = __esm({
  "node_modules/@polkadot/types/interfaces/contracts/runtime.js"() {
    SHARED_V1_V2 = {
      get_storage: {
        description: "Query a given storage key in a given contract.",
        params: [
          {
            name: "address",
            type: "AccountId"
          },
          {
            name: "key",
            type: "Bytes"
          }
        ],
        type: "Option<Bytes>"
      },
      upload_code: {
        description: "Upload new code without instantiating a contract from it.",
        params: [
          {
            name: "origin",
            type: "AccountId"
          },
          {
            name: "code",
            type: "Bytes"
          },
          {
            name: "storageDepositLimit",
            type: "Option<Balance>"
          }
        ],
        type: "CodeUploadResult"
      }
    };
    runtime10 = {
      ContractsApi: [
        {
          methods: {
            call: {
              description: "Perform a call from a specified account to a given contract.",
              params: [
                {
                  name: "origin",
                  type: "AccountId"
                },
                {
                  name: "dest",
                  type: "AccountId"
                },
                {
                  name: "value",
                  type: "Balance"
                },
                {
                  name: "gasLimit",
                  type: "Option<WeightV2>"
                },
                {
                  name: "storageDepositLimit",
                  type: "Option<Balance>"
                },
                {
                  name: "inputData",
                  type: "Vec<u8>"
                }
              ],
              type: "ContractExecResult"
            },
            instantiate: {
              description: "Instantiate a new contract.",
              params: [
                {
                  name: "origin",
                  type: "AccountId"
                },
                {
                  name: "value",
                  type: "Balance"
                },
                {
                  name: "gasLimit",
                  type: "Option<WeightV2>"
                },
                {
                  name: "storageDepositLimit",
                  type: "Option<Balance>"
                },
                {
                  name: "code",
                  type: "CodeSource"
                },
                {
                  name: "data",
                  type: "Bytes"
                },
                {
                  name: "salt",
                  type: "Bytes"
                }
              ],
              type: "ContractInstantiateResult"
            },
            ...SHARED_V1_V2
          },
          version: 2
        },
        {
          methods: {
            call: {
              description: "Perform a call from a specified account to a given contract.",
              params: [
                {
                  name: "origin",
                  type: "AccountId"
                },
                {
                  name: "dest",
                  type: "AccountId"
                },
                {
                  name: "value",
                  type: "Balance"
                },
                {
                  name: "gasLimit",
                  type: "u64"
                },
                {
                  name: "storageDepositLimit",
                  type: "Option<Balance>"
                },
                {
                  name: "inputData",
                  type: "Vec<u8>"
                }
              ],
              type: "ContractExecResultU64"
            },
            instantiate: {
              description: "Instantiate a new contract.",
              params: [
                {
                  name: "origin",
                  type: "AccountId"
                },
                {
                  name: "value",
                  type: "Balance"
                },
                {
                  name: "gasLimit",
                  type: "u64"
                },
                {
                  name: "storageDepositLimit",
                  type: "Option<Balance>"
                },
                {
                  name: "code",
                  type: "CodeSource"
                },
                {
                  name: "data",
                  type: "Bytes"
                },
                {
                  name: "salt",
                  type: "Bytes"
                }
              ],
              type: "ContractInstantiateResultU64"
            },
            ...SHARED_V1_V2
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/contracts/definitions.js
var definitions_default15;
var init_definitions15 = __esm({
  "node_modules/@polkadot/types/interfaces/contracts/definitions.js"() {
    init_rpc3();
    init_runtime10();
    definitions_default15 = {
      rpc: rpc3,
      runtime: runtime10,
      types: {
        AliveContractInfo: {
          trieId: "TrieId",
          storageSize: "u32",
          pairCount: "u32",
          codeHash: "CodeHash",
          rentAllowance: "Balance",
          rentPaid: "Balance",
          deductBlock: "BlockNumber",
          lastWrite: "Option<BlockNumber>",
          _reserved: "Option<Null>"
        },
        CodeHash: "Hash",
        CodeSource: {
          _enum: {
            Upload: "Bytes",
            Existing: "Hash"
          }
        },
        CodeUploadRequest: {
          origin: "AccountId",
          code: "Bytes",
          storageDepositLimit: "Option<Balance>"
        },
        CodeUploadResult: "Result<CodeUploadResultValue, DispatchError>",
        CodeUploadResultValue: {
          codeHash: "CodeHash",
          deposit: "Balance"
        },
        ContractCallRequest: {
          origin: "AccountId",
          dest: "AccountId",
          value: "Balance",
          gasLimit: "u64",
          storageDepositLimit: "Option<Balance>",
          inputData: "Bytes"
        },
        ContractExecResultSuccessTo255: {
          status: "u8",
          data: "Raw"
        },
        ContractExecResultTo255: {
          _enum: {
            Success: "ContractExecResultSuccessTo255",
            Error: "Null"
          }
        },
        ContractExecResultSuccessTo260: {
          flags: "ContractReturnFlags",
          data: "Bytes",
          gasConsumed: "u64"
        },
        ContractExecResultTo260: {
          _enum: {
            Success: "ContractExecResultSuccessTo260",
            Error: "Null"
          }
        },
        ContractExecResultOk: {
          flags: "ContractReturnFlags",
          data: "Bytes"
        },
        ContractExecResultResult: "Result<ContractExecResultOk, DispatchError>",
        ContractExecResultTo267: {
          gasConsumed: "u64",
          debugMessage: "Text",
          result: "ContractExecResultResult"
        },
        ContractExecResult: {
          gasConsumed: "Weight",
          gasRequired: "Weight",
          storageDeposit: "StorageDeposit",
          debugMessage: "Text",
          result: "ContractExecResultResult"
        },
        ContractExecResultU64: {
          gasConsumed: "u64",
          gasRequired: "u64",
          storageDeposit: "StorageDeposit",
          debugMessage: "Text",
          result: "ContractExecResultResult"
        },
        ContractInfo: {
          _enum: {
            Alive: "AliveContractInfo",
            Tombstone: "TombstoneContractInfo"
          }
        },
        ContractCallFlags: {
          _set: {
            _bitLength: 32,
            ForwardInput: 1,
            CloneInput: 2,
            TailCall: 4,
            AllowReentry: 8
          }
        },
        ContractReturnFlags: {
          _set: {
            _bitLength: 32,
            Revert: 1
          }
        },
        ContractStorageKey: "[u8; 32]",
        DeletedContract: {
          pairCount: "u32",
          trieId: "TrieId"
        },
        ExecReturnValue: {
          flags: "ContractReturnFlags",
          data: "Bytes"
        },
        Gas: "u64",
        HostFnWeightsTo264: {
          caller: "Weight",
          address: "Weight",
          gasLeft: "Weight",
          balance: "Weight",
          valueTransferred: "Weight",
          minimumBalance: "Weight",
          tombstoneDeposit: "Weight",
          rentAllowance: "Weight",
          blockNumber: "Weight",
          now: "Weight",
          weightToFee: "Weight",
          gas: "Weight",
          input: "Weight",
          inputPerByte: "Weight",
          return: "Weight",
          returnPerByte: "Weight",
          terminate: "Weight",
          restoreTo: "Weight",
          restoreToPerDelta: "Weight",
          random: "Weight",
          depositEvent: "Weight",
          depositEventPerTopic: "Weight",
          depositEventPerByte: "Weight",
          setRentAllowance: "Weight",
          setStorage: "Weight",
          setStoragePerByte: "Weight",
          clearStorage: "Weight",
          getStorage: "Weight",
          getStoragePerByte: "Weight",
          transfer: "Weight",
          call: "Weight",
          callTransferSurcharge: "Weight",
          callPerInputByte: "Weight",
          callPerOutputByte: "Weight",
          instantiate: "Weight",
          instantiatePerInputByte: "Weight",
          instantiatePerOutputByte: "Weight",
          hashSha2256: "Weight",
          hashSha2256PerByte: "Weight",
          hashKeccak256: "Weight",
          hashKeccak256PerByte: "Weight",
          hashBlake2256: "Weight",
          hashBlake2256PerByte: "Weight",
          hashBlake2128: "Weight",
          hashBlake2128PerByte: "Weight"
        },
        HostFnWeights: {
          caller: "Weight",
          address: "Weight",
          gasLeft: "Weight",
          balance: "Weight",
          valueTransferred: "Weight",
          minimumBalance: "Weight",
          tombstoneDeposit: "Weight",
          rentAllowance: "Weight",
          blockNumber: "Weight",
          now: "Weight",
          weightToFee: "Weight",
          gas: "Weight",
          input: "Weight",
          inputPerByte: "Weight",
          return: "Weight",
          returnPerByte: "Weight",
          terminate: "Weight",
          terminatePerCodeByte: "Weight",
          restoreTo: "Weight",
          restoreToPerCallerCodeByte: "Weight",
          restoreToPerTombstoneCodeByte: "Weight",
          restoreToPerDelta: "Weight",
          random: "Weight",
          depositEvent: "Weight",
          depositEventPerTopic: "Weight",
          depositEventPerByte: "Weight",
          setRentAllowance: "Weight",
          setStorage: "Weight",
          setStoragePerByte: "Weight",
          clearStorage: "Weight",
          getStorage: "Weight",
          getStoragePerByte: "Weight",
          transfer: "Weight",
          call: "Weight",
          callPerCodeByte: "Weight",
          callTransferSurcharge: "Weight",
          callPerInputByte: "Weight",
          callPerOutputByte: "Weight",
          instantiate: "Weight",
          instantiatePerCodeByte: "Weight",
          instantiatePerInputByte: "Weight",
          instantiatePerOutputByte: "Weight",
          instantiatePerSaltByte: "Weight",
          hashSha2256: "Weight",
          hashSha2256PerByte: "Weight",
          hashKeccak256: "Weight",
          hashKeccak256PerByte: "Weight",
          hashBlake2256: "Weight",
          hashBlake2256PerByte: "Weight",
          hashBlake2128: "Weight",
          hashBlake2128PerByte: "Weight",
          rentParams: "Weight"
        },
        InstantiateRequestV1: {
          origin: "AccountId",
          value: "Balance",
          gasLimit: "Gas",
          code: "Bytes",
          data: "Bytes",
          salt: "Bytes"
        },
        InstantiateRequestV2: {
          _fallback: "InstantiateRequestV1",
          origin: "AccountId",
          value: "Balance",
          gasLimit: "Gas",
          storageDepositLimit: "Option<Balance>",
          code: "Bytes",
          data: "Bytes",
          salt: "Bytes"
        },
        InstantiateRequest: {
          _fallback: "InstantiateRequestV2",
          origin: "AccountId",
          value: "Balance",
          gasLimit: "Gas",
          storageDepositLimit: "Option<Balance>",
          code: "CodeSource",
          data: "Bytes",
          salt: "Bytes"
        },
        ContractInstantiateResultTo267: "Result<InstantiateReturnValueTo267, Null>",
        ContractInstantiateResultTo299: "Result<InstantiateReturnValueOk, Null>",
        ContractInstantiateResult: {
          gasConsumed: "WeightV2",
          gasRequired: "WeightV2",
          storageDeposit: "StorageDeposit",
          debugMessage: "Text",
          result: "InstantiateReturnValue"
        },
        ContractInstantiateResultU64: {
          // only this one can fail, the current version (above) _should_ be correctly
          // versioned now, aka no more deprecated RPCs involved, only runtime calls
          _fallback: "ContractInstantiateResultTo299",
          gasConsumed: "u64",
          gasRequired: "u64",
          storageDeposit: "StorageDeposit",
          debugMessage: "Text",
          result: "InstantiateReturnValue"
        },
        InstantiateReturnValueTo267: {
          result: "ExecReturnValue",
          accountId: "AccountId",
          rentProjection: "Option<RentProjection>"
        },
        InstantiateReturnValueOk: {
          result: "ExecReturnValue",
          accountId: "AccountId"
        },
        InstantiateReturnValue: "Result<InstantiateReturnValueOk, DispatchError>",
        InstructionWeights: {
          i64const: "u32",
          i64load: "u32",
          i64store: "u32",
          select: "u32",
          rIf: "u32",
          br: "u32",
          brIf: "u32",
          brIable: "u32",
          brIablePerEntry: "u32",
          call: "u32",
          callIndirect: "u32",
          callIndirectPerParam: "u32",
          localGet: "u32",
          localSet: "u32",
          local_tee: "u32",
          globalGet: "u32",
          globalSet: "u32",
          memoryCurrent: "u32",
          memoryGrow: "u32",
          i64clz: "u32",
          i64ctz: "u32",
          i64popcnt: "u32",
          i64eqz: "u32",
          i64extendsi32: "u32",
          i64extendui32: "u32",
          i32wrapi64: "u32",
          i64eq: "u32",
          i64ne: "u32",
          i64lts: "u32",
          i64ltu: "u32",
          i64gts: "u32",
          i64gtu: "u32",
          i64les: "u32",
          i64leu: "u32",
          i64ges: "u32",
          i64geu: "u32",
          i64add: "u32",
          i64sub: "u32",
          i64mul: "u32",
          i64divs: "u32",
          i64divu: "u32",
          i64rems: "u32",
          i64remu: "u32",
          i64and: "u32",
          i64or: "u32",
          i64xor: "u32",
          i64shl: "u32",
          i64shrs: "u32",
          i64shru: "u32",
          i64rotl: "u32",
          i64rotr: "u32"
        },
        LimitsTo264: {
          eventTopics: "u32",
          stackHeight: "u32",
          globals: "u32",
          parameters: "u32",
          memoryPages: "u32",
          tableSize: "u32",
          brTableSize: "u32",
          subjectLen: "u32",
          codeSize: "u32"
        },
        Limits: {
          eventTopics: "u32",
          stackHeight: "u32",
          globals: "u32",
          parameters: "u32",
          memoryPages: "u32",
          tableSize: "u32",
          brTableSize: "u32",
          subjectLen: "u32"
        },
        PrefabWasmModule: {
          scheduleVersion: "Compact<u32>",
          initial: "Compact<u32>",
          maximum: "Compact<u32>",
          refcount: "Compact<u64>",
          _reserved: "Option<Null>",
          code: "Bytes",
          originalCodeLen: "u32"
        },
        RentProjection: {
          _enum: {
            EvictionAt: "BlockNumber",
            NoEviction: "Null"
          }
        },
        ScheduleTo212: {
          version: "u32",
          putCodePerByteCost: "Gas",
          growMemCost: "Gas",
          regularOpCost: "Gas",
          returnDataPerByteCost: "Gas",
          eventDataPerByteCost: "Gas",
          eventPerTopicCost: "Gas",
          eventBaseCost: "Gas",
          sandboxDataReadCost: "Gas",
          sandboxDataWriteCost: "Gas",
          maxEventTopics: "u32",
          maxStackHeight: "u32",
          maxMemoryPages: "u32",
          enablePrintln: "bool",
          maxSubjectLen: "u32"
        },
        ScheduleTo258: {
          version: "u32",
          putCodePerByteCost: "Gas",
          growMemCost: "Gas",
          regularOpCost: "Gas",
          returnDataPerByteCost: "Gas",
          eventDataPerByteCost: "Gas",
          eventPerTopicCost: "Gas",
          eventBaseCost: "Gas",
          sandboxDataReadCost: "Gas",
          sandboxDataWriteCost: "Gas",
          transferCost: "Gas",
          maxEventTopics: "u32",
          maxStackHeight: "u32",
          maxMemoryPages: "u32",
          enablePrintln: "bool",
          maxSubjectLen: "u32"
        },
        ScheduleTo264: {
          version: "u32",
          enablePrintln: "bool",
          limits: "LimitsTo264",
          instructionWeights: "InstructionWeights",
          hostFnWeights: "HostFnWeightsTo264"
        },
        Schedule: {
          version: "u32",
          enablePrintln: "bool",
          limits: "Limits",
          instructionWeights: "InstructionWeights",
          hostFnWeights: "HostFnWeights"
        },
        SeedOf: "Hash",
        StorageDeposit: {
          _enum: {
            Refund: "Balance",
            Charge: "Balance"
          }
        },
        TombstoneContractInfo: "Hash",
        TrieId: "Bytes"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/democracy/definitions.js
var AllConvictions, definitions_default16;
var init_definitions16 = __esm({
  "node_modules/@polkadot/types/interfaces/democracy/definitions.js"() {
    AllConvictions = [
      // 0.1x votes, unlocked.
      "None",
      // 1x votes, locked for an enactment period following a successful vote.
      "Locked1x",
      // 2x votes, locked for 2x enactment periods following a successful vote.
      "Locked2x",
      // 3x votes, locked for 4x...
      "Locked3x",
      // 4x votes, locked for 8x...
      "Locked4x",
      // 5x votes, locked for 16x...
      "Locked5x",
      // 6x votes, locked for 32x...
      "Locked6x"
    ];
    definitions_default16 = {
      rpc: {},
      types: {
        AccountVote: {
          _enum: {
            Standard: "AccountVoteStandard",
            Split: "AccountVoteSplit"
          }
        },
        AccountVoteSplit: {
          aye: "Balance",
          nay: "Balance"
        },
        AccountVoteStandard: {
          vote: "Vote",
          balance: "Balance"
        },
        Conviction: {
          _enum: AllConvictions
        },
        Delegations: {
          votes: "Balance",
          capital: "Balance"
        },
        PreimageStatus: {
          _enum: {
            Missing: "BlockNumber",
            Available: "PreimageStatusAvailable"
          }
        },
        PreimageStatusAvailable: {
          data: "Bytes",
          provider: "AccountId",
          deposit: "Balance",
          since: "BlockNumber",
          expiry: "Option<BlockNumber>"
        },
        PriorLock: "(BlockNumber, Balance)",
        PropIndex: "u32",
        Proposal: "Call",
        ProxyState: {
          _enum: {
            Open: "AccountId",
            Active: "AccountId"
          }
        },
        ReferendumIndex: "u32",
        ReferendumInfoTo239: {
          end: "BlockNumber",
          proposalHash: "Hash",
          threshold: "VoteThreshold",
          delay: "BlockNumber"
        },
        ReferendumInfo: {
          _enum: {
            Ongoing: "ReferendumStatus",
            Finished: "ReferendumInfoFinished"
          }
        },
        ReferendumInfoFinished: {
          approved: "bool",
          end: "BlockNumber"
        },
        ReferendumStatus: {
          end: "BlockNumber",
          proposalHash: "Hash",
          threshold: "VoteThreshold",
          delay: "BlockNumber",
          tally: "Tally"
        },
        Tally: {
          ayes: "Balance",
          nays: "Balance",
          turnout: "Balance"
        },
        Voting: {
          _enum: {
            Direct: "VotingDirect",
            Delegating: "VotingDelegating"
          }
        },
        VotingDirect: {
          votes: "Vec<VotingDirectVote>",
          delegations: "Delegations",
          prior: "PriorLock"
        },
        VotingDirectVote: "(ReferendumIndex, AccountVote)",
        VotingDelegating: {
          balance: "Balance",
          target: "AccountId",
          conviction: "Conviction",
          delegations: "Delegations",
          prior: "PriorLock"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/dev/rpc.js
var rpc4;
var init_rpc4 = __esm({
  "node_modules/@polkadot/types/interfaces/dev/rpc.js"() {
    rpc4 = {
      getBlockStats: {
        description: "Reexecute the specified `block_hash` and gather statistics while doing so",
        isUnsafe: true,
        params: [
          {
            isHistoric: true,
            name: "at",
            type: "Hash"
          }
        ],
        type: "Option<BlockStats>"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/dev/definitions.js
var definitions_default17;
var init_definitions17 = __esm({
  "node_modules/@polkadot/types/interfaces/dev/definitions.js"() {
    init_rpc4();
    definitions_default17 = {
      rpc: rpc4,
      types: {
        BlockStats: {
          witnessLen: "u64",
          witnessCompactLen: "u64",
          blockLen: "u64",
          blockNumExtrinsics: "u64"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/discovery/runtime.js
var runtime11;
var init_runtime11 = __esm({
  "node_modules/@polkadot/types/interfaces/discovery/runtime.js"() {
    runtime11 = {
      AuthorityDiscoveryApi: [
        {
          methods: {
            authorities: {
              description: "Retrieve authority identifiers of the current and next authority set.",
              params: [],
              type: "Vec<AuthorityId>"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/discovery/definitions.js
var definitions_default18;
var init_definitions18 = __esm({
  "node_modules/@polkadot/types/interfaces/discovery/definitions.js"() {
    init_runtime11();
    definitions_default18 = {
      rpc: {},
      runtime: runtime11,
      types: {}
    };
  }
});

// node_modules/@polkadot/types/interfaces/elections/definitions.js
var definitions_default19;
var init_definitions19 = __esm({
  "node_modules/@polkadot/types/interfaces/elections/definitions.js"() {
    definitions_default19 = {
      rpc: {},
      types: {
        ApprovalFlag: "u32",
        DefunctVoter: {
          who: "AccountId",
          voteCount: "Compact<u32>",
          candidateCount: "Compact<u32>"
        },
        Renouncing: {
          _enum: {
            Member: "Null",
            RunnerUp: "Null",
            Candidate: "Compact<u32>"
          }
        },
        SetIndex: "u32",
        Vote: "GenericVote",
        VoteIndex: "u32",
        VoterInfo: {
          lastActive: "VoteIndex",
          lastWin: "VoteIndex",
          pot: "Balance",
          stake: "Balance"
        },
        VoteThreshold: {
          _enum: [
            "Super Majority Approve",
            "Super Majority Against",
            "Simple Majority"
          ]
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/engine/rpc.js
var rpc5;
var init_rpc5 = __esm({
  "node_modules/@polkadot/types/interfaces/engine/rpc.js"() {
    rpc5 = {
      createBlock: {
        description: "Instructs the manual-seal authorship task to create a new block",
        params: [
          {
            name: "createEmpty",
            type: "bool"
          },
          {
            name: "finalize",
            type: "bool"
          },
          {
            isOptional: true,
            name: "parentHash",
            type: "BlockHash"
          }
        ],
        type: "CreatedBlock"
      },
      finalizeBlock: {
        description: "Instructs the manual-seal authorship task to finalize a block",
        params: [
          {
            name: "hash",
            type: "BlockHash"
          },
          {
            isOptional: true,
            name: "justification",
            type: "Justification"
          }
        ],
        type: "bool"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/engine/definitions.js
var definitions_default20;
var init_definitions20 = __esm({
  "node_modules/@polkadot/types/interfaces/engine/definitions.js"() {
    init_rpc5();
    definitions_default20 = {
      rpc: rpc5,
      types: {
        CreatedBlock: {
          _alias: {
            blockHash: "hash"
          },
          blockHash: "BlockHash",
          aux: "ImportedAux"
        },
        ImportedAux: {
          headerOnly: "bool",
          clearJustificationRequests: "bool",
          needsJustification: "bool",
          badJustification: "bool",
          needsFinalityProof: "bool",
          isNewBest: "bool"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/evm/definitions.js
var definitions_default21;
var init_definitions21 = __esm({
  "node_modules/@polkadot/types/interfaces/evm/definitions.js"() {
    definitions_default21 = {
      rpc: {},
      types: {
        EvmAccount: {
          nonce: "u256",
          balance: "u256"
        },
        EvmCallInfo: {
          exitReason: "ExitReason",
          value: "Bytes",
          usedGas: "U256",
          logs: "Vec<EvmLog>"
        },
        EvmCreateInfo: {
          exitReason: "ExitReason",
          value: "H160",
          usedGas: "U256",
          logs: "Vec<EvmLog>"
        },
        EvmCallInfoV2: {
          exitReason: "ExitReason",
          value: "Bytes",
          usedGas: "U256",
          weightInfo: "Option<EvmWeightInfo>",
          logs: "Vec<EvmLog>"
        },
        EvmCreateInfoV2: {
          exitReason: "ExitReason",
          value: "H160",
          usedGas: "U256",
          weightInfo: "Option<EvmWeightInfo>",
          logs: "Vec<EvmLog>"
        },
        EvmLog: {
          address: "H160",
          topics: "Vec<H256>",
          data: "Bytes"
        },
        EvmVicinity: {
          gasPrice: "u256",
          origin: "H160"
        },
        EvmWeightInfo: {
          refTimeLimit: "Option<u64>",
          proofSizeLimit: "Option<u64>",
          refTimeUsage: "Option<u64>",
          proofSizeUsage: "Option<u64>"
        },
        ExitError: {
          _enum: {
            StackUnderflow: "Null",
            StackOverflow: "Null",
            InvalidJump: "Null",
            InvalidRange: "Null",
            DesignatedInvalid: "Null",
            CallTooDeep: "Null",
            CreateCollision: "Null",
            CreateContractLimit: "Null",
            OutOfOffset: "Null",
            OutOfGas: "Null",
            OutOfFund: "Null",
            PCUnderflow: "Null",
            CreateEmpty: "Null",
            Other: "Text"
          }
        },
        ExitFatal: {
          _enum: {
            NotSupported: "Null",
            UnhandledInterrupt: "Null",
            CallErrorAsFatal: "ExitError",
            Other: "Text"
          }
        },
        ExitReason: {
          _enum: {
            Succeed: "ExitSucceed",
            Error: "ExitError",
            Revert: "ExitRevert",
            Fatal: "ExitFatal"
          }
        },
        ExitRevert: {
          _enum: ["Reverted"]
        },
        ExitSucceed: {
          _enum: ["Stopped", "Returned", "Suicided"]
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/extrinsics/definitions.js
var definitions_default22;
var init_definitions22 = __esm({
  "node_modules/@polkadot/types/interfaces/extrinsics/definitions.js"() {
    definitions_default22 = {
      rpc: {},
      types: {
        Extrinsic: "GenericExtrinsic",
        ExtrinsicEra: "GenericExtrinsicEra",
        ExtrinsicPayload: "GenericExtrinsicPayload",
        ExtrinsicSignature: "MultiSignature",
        ExtrinsicV4: "GenericExtrinsicV4",
        ExtrinsicPayloadV4: "GenericExtrinsicPayloadV4",
        ExtrinsicSignatureV4: "GenericExtrinsicSignatureV4",
        ExtrinsicUnknown: "GenericExtrinsicUnknown",
        ExtrinsicPayloadUnknown: "GenericExtrinsicPayloadUnknown",
        // eras
        Era: "ExtrinsicEra",
        ImmortalEra: "GenericImmortalEra",
        MortalEra: "GenericMortalEra",
        // signatures & signer
        AnySignature: "H512",
        MultiSignature: {
          _enum: {
            Ed25519: "Ed25519Signature",
            Sr25519: "Sr25519Signature",
            Ecdsa: "EcdsaSignature"
          }
        },
        Signature: "H512",
        SignerPayload: "GenericSignerPayload",
        EcdsaSignature: "[u8; 65]",
        Ed25519Signature: "H512",
        Sr25519Signature: "H512"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/fungibles/runtime.js
var runtime12;
var init_runtime12 = __esm({
  "node_modules/@polkadot/types/interfaces/fungibles/runtime.js"() {
    runtime12 = {
      FungiblesApi: [
        {
          methods: {
            query_account_balances: {
              description: "Returns the list of all `MultiAsset` that an `AccountId` has",
              params: [
                {
                  name: "account",
                  type: "AccountId"
                }
              ],
              type: "Result<Vec<XcmV3MultiAsset>, FungiblesAccessError>"
            }
          },
          version: 1
        },
        {
          methods: {
            query_account_balances: {
              description: "Returns the list of all `MultiAsset` that an `AccountId` has",
              params: [
                {
                  name: "account",
                  type: "AccountId"
                }
              ],
              type: "Result<XcmVersionedMultiAssets, FungiblesAccessError>"
            }
          },
          version: 2
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/fungibles/definitions.js
var definitions_default23;
var init_definitions23 = __esm({
  "node_modules/@polkadot/types/interfaces/fungibles/definitions.js"() {
    init_runtime12();
    definitions_default23 = {
      rpc: {},
      runtime: runtime12,
      types: {
        FungiblesAccessError: {
          _enum: ["AssetIdConversionFailed", "AmountToBalanceConversionFailed"]
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/genericAsset/definitions.js
var definitions_default24;
var init_definitions24 = __esm({
  "node_modules/@polkadot/types/interfaces/genericAsset/definitions.js"() {
    definitions_default24 = {
      rpc: {},
      types: {
        AssetOptions: {
          initalIssuance: "Compact<Balance>",
          permissions: "PermissionLatest"
        },
        Owner: {
          _enum: {
            None: "Null",
            Address: "AccountId"
          }
        },
        PermissionsV1: {
          update: "Owner",
          mint: "Owner",
          burn: "Owner"
        },
        PermissionVersions: {
          _enum: {
            V1: "PermissionsV1"
          }
        },
        PermissionLatest: "PermissionsV1"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/genesisBuilder/runtime.js
var runtime13;
var init_runtime13 = __esm({
  "node_modules/@polkadot/types/interfaces/genesisBuilder/runtime.js"() {
    runtime13 = {
      GenesisBuilder: [
        {
          methods: {
            build_config: {
              description: "Build `RuntimeGenesisConfig` from a JSON blob not using any defaults and store it in the storage.",
              params: [
                {
                  name: "json",
                  type: "Vec<u8>"
                }
              ],
              type: "Result<(), GenesisBuildErr>"
            },
            create_default_config: {
              description: "Creates the default `RuntimeGenesisConfig` and returns it as a JSON blob.",
              params: [],
              type: "Vec<u8>"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/genesisBuilder/definitions.js
var definitions_default25;
var init_definitions25 = __esm({
  "node_modules/@polkadot/types/interfaces/genesisBuilder/definitions.js"() {
    init_runtime13();
    definitions_default25 = {
      rpc: {},
      runtime: runtime13,
      types: {
        GenesisBuildErr: "Text"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/gilt/definitions.js
var definitions_default26;
var init_definitions26 = __esm({
  "node_modules/@polkadot/types/interfaces/gilt/definitions.js"() {
    definitions_default26 = {
      rpc: {},
      types: {
        ActiveGilt: {
          proportion: "Perquintill",
          amount: "Balance",
          who: "AccountId",
          expiry: "BlockNumber"
        },
        ActiveGiltsTotal: {
          frozen: "Balance",
          proportion: "Perquintill",
          index: "ActiveIndex",
          target: "Perquintill"
        },
        ActiveIndex: "u32",
        GiltBid: {
          amount: "Balance",
          who: "AccountId"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/grandpa/rpc.js
var rpc6;
var init_rpc6 = __esm({
  "node_modules/@polkadot/types/interfaces/grandpa/rpc.js"() {
    rpc6 = {
      proveFinality: {
        description: "Prove finality for the given block number, returning the Justification for the last block in the set.",
        params: [
          {
            name: "blockNumber",
            type: "BlockNumber"
          }
        ],
        type: "Option<EncodedFinalityProofs>"
      },
      roundState: {
        description: "Returns the state of the current best round state as well as the ongoing background rounds",
        params: [],
        type: "ReportedRoundStates"
      },
      subscribeJustifications: {
        description: "Subscribes to grandpa justifications",
        params: [],
        pubsub: [
          "justifications",
          "subscribeJustifications",
          "unsubscribeJustifications"
        ],
        type: "JustificationNotification"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/grandpa/runtime.js
var GRANDPA_V2_V3, runtime14;
var init_runtime14 = __esm({
  "node_modules/@polkadot/types/interfaces/grandpa/runtime.js"() {
    GRANDPA_V2_V3 = {
      generate_key_ownership_proof: {
        description: "Generates a proof of key ownership for the given authority in the given set.",
        params: [
          {
            name: "setId",
            type: "SetId"
          },
          {
            name: "authorityId",
            type: "AuthorityId"
          }
        ],
        type: "Option<OpaqueKeyOwnershipProof>"
      },
      grandpa_authorities: {
        description: "Get the current GRANDPA authorities and weights. This should not change except for when changes are scheduled and the corresponding delay has passed.",
        params: [],
        type: "AuthorityList"
      },
      submit_report_equivocation_unsigned_extrinsic: {
        description: "Submits an unsigned extrinsic to report an equivocation.",
        params: [
          {
            name: "equivocationProof",
            type: "GrandpaEquivocationProof"
          },
          {
            name: "keyOwnerProof",
            type: "OpaqueKeyOwnershipProof"
          }
        ],
        type: "Option<Null>"
      }
    };
    runtime14 = {
      GrandpaApi: [
        {
          methods: {
            current_set_id: {
              description: "Get current GRANDPA authority set id.",
              params: [],
              type: "SetId"
            },
            ...GRANDPA_V2_V3
          },
          version: 3
        },
        {
          methods: GRANDPA_V2_V3,
          version: 2
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/grandpa/definitions.js
var definitions_default27;
var init_definitions27 = __esm({
  "node_modules/@polkadot/types/interfaces/grandpa/definitions.js"() {
    init_rpc6();
    init_runtime14();
    definitions_default27 = {
      rpc: rpc6,
      runtime: runtime14,
      types: {
        AuthorityIndex: "u64",
        AuthorityList: "Vec<NextAuthority>",
        AuthoritySet: {
          currentAuthorities: "AuthorityList",
          setId: "u64",
          pendingStandardChanges: "ForkTreePendingChange",
          pendingForcedChanges: "Vec<PendingChange>",
          authoritySetChanges: "AuthoritySetChanges"
        },
        ForkTreePendingChange: {
          roots: "Vec<ForkTreePendingChangeNode>",
          bestFinalizedNumber: "Option<BlockNumber>"
        },
        ForkTreePendingChangeNode: {
          hash: "BlockHash",
          number: "BlockNumber",
          data: "PendingChange",
          // actual data, here PendingChange
          children: "Vec<ForkTreePendingChangeNode>"
        },
        AuthoritySetChange: "(U64, BlockNumber)",
        AuthoritySetChanges: "Vec<AuthoritySetChange>",
        AuthorityWeight: "u64",
        DelayKind: {
          _enum: {
            Finalized: "Null",
            Best: "DelayKindBest"
          }
        },
        DelayKindBest: {
          medianLastFinalized: "BlockNumber"
        },
        EncodedFinalityProofs: "Bytes",
        GrandpaEquivocation: {
          _enum: {
            Prevote: "GrandpaEquivocationValue",
            Precommit: "GrandpaEquivocationValue"
          }
        },
        GrandpaEquivocationProof: {
          setId: "SetId",
          equivocation: "GrandpaEquivocation"
        },
        GrandpaEquivocationValue: {
          roundNumber: "u64",
          identity: "AuthorityId",
          first: "(GrandpaPrevote, AuthoritySignature)",
          second: "(GrandpaPrevote, AuthoritySignature)"
        },
        GrandpaPrevote: {
          targetHash: "Hash",
          targetNumber: "BlockNumber"
        },
        GrandpaCommit: {
          targetHash: "BlockHash",
          targetNumber: "BlockNumber",
          precommits: "Vec<GrandpaSignedPrecommit>"
        },
        GrandpaPrecommit: {
          targetHash: "BlockHash",
          targetNumber: "BlockNumber"
        },
        GrandpaSignedPrecommit: {
          precommit: "GrandpaPrecommit",
          signature: "AuthoritySignature",
          id: "AuthorityId"
        },
        GrandpaJustification: {
          round: "u64",
          commit: "GrandpaCommit",
          votesAncestries: "Vec<Header>"
        },
        JustificationNotification: "Bytes",
        KeyOwnerProof: "MembershipProof",
        NextAuthority: "(AuthorityId, AuthorityWeight)",
        PendingChange: {
          nextAuthorities: "AuthorityList",
          delay: "BlockNumber",
          canonHeight: "BlockNumber",
          canonHash: "BlockHash",
          delayKind: "DelayKind"
        },
        PendingPause: {
          scheduledAt: "BlockNumber",
          delay: "BlockNumber"
        },
        PendingResume: {
          scheduledAt: "BlockNumber",
          delay: "BlockNumber"
        },
        Precommits: {
          currentWeight: "u32",
          missing: "BTreeSet<AuthorityId>"
        },
        Prevotes: {
          currentWeight: "u32",
          missing: "BTreeSet<AuthorityId>"
        },
        ReportedRoundStates: {
          setId: "u32",
          best: "RoundState",
          background: "Vec<RoundState>"
        },
        RoundState: {
          round: "u32",
          totalWeight: "u32",
          thresholdWeight: "u32",
          prevotes: "Prevotes",
          precommits: "Precommits"
        },
        SetId: "u64",
        StoredPendingChange: {
          scheduledAt: "BlockNumber",
          delay: "BlockNumber",
          nextAuthorities: "AuthorityList"
        },
        StoredState: {
          _enum: {
            Live: "Null",
            PendingPause: "PendingPause",
            Paused: "Null",
            PendingResume: "PendingResume"
          }
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/identity/definitions.js
var definitions_default28;
var init_definitions28 = __esm({
  "node_modules/@polkadot/types/interfaces/identity/definitions.js"() {
    definitions_default28 = {
      rpc: {},
      types: {
        IdentityFields: {
          _set: {
            _bitLength: 64,
            // Mapped here to 32 bits, in Rust these are 64-bit values
            Display: 1,
            Legal: 2,
            Web: 4,
            Riot: 8,
            Email: 16,
            PgpFingerprint: 32,
            Image: 64,
            Twitter: 128
          }
        },
        IdentityInfoAdditional: "(Data, Data)",
        IdentityInfoTo198: {
          additional: "Vec<IdentityInfoAdditional>",
          display: "Data",
          legal: "Data",
          web: "Data",
          riot: "Data",
          email: "Data",
          pgpFingerprint: "Option<H160>",
          image: "Data"
        },
        IdentityInfo: {
          _fallback: "IdentityInfoTo198",
          additional: "Vec<IdentityInfoAdditional>",
          display: "Data",
          legal: "Data",
          web: "Data",
          riot: "Data",
          email: "Data",
          pgpFingerprint: "Option<H160>",
          image: "Data",
          twitter: "Data"
        },
        IdentityJudgement: {
          _enum: {
            Unknown: "Null",
            FeePaid: "Balance",
            Reasonable: "Null",
            KnownGood: "Null",
            OutOfDate: "Null",
            LowQuality: "Null",
            Erroneous: "Null"
          }
        },
        RegistrationJudgement: "(RegistrarIndex, IdentityJudgement)",
        RegistrationTo198: {
          judgements: "Vec<RegistrationJudgement>",
          deposit: "Balance",
          info: "IdentityInfoTo198"
        },
        Registration: {
          _fallback: "RegistrationTo198",
          judgements: "Vec<RegistrationJudgement>",
          deposit: "Balance",
          info: "IdentityInfo"
        },
        RegistrarIndex: "u32",
        RegistrarInfo: {
          account: "AccountId",
          fee: "Balance",
          fields: "IdentityFields"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/imOnline/definitions.js
var definitions_default29;
var init_definitions29 = __esm({
  "node_modules/@polkadot/types/interfaces/imOnline/definitions.js"() {
    definitions_default29 = {
      rpc: {},
      types: {
        AuthIndex: "u32",
        AuthoritySignature: "Signature",
        Heartbeat: {
          blockNumber: "BlockNumber",
          networkState: "OpaqueNetworkState",
          sessionIndex: "SessionIndex",
          authorityIndex: "AuthIndex",
          validatorsLen: "u32"
        },
        HeartbeatTo244: {
          blockNumber: "BlockNumber",
          networkState: "OpaqueNetworkState",
          sessionIndex: "SessionIndex",
          authorityIndex: "AuthIndex"
        },
        OpaqueMultiaddr: "Opaque<Bytes>",
        OpaquePeerId: "Opaque<Bytes>",
        OpaqueNetworkState: {
          peerId: "OpaquePeerId",
          externalAddresses: "Vec<OpaqueMultiaddr>"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/lottery/definitions.js
var definitions_default30;
var init_definitions30 = __esm({
  "node_modules/@polkadot/types/interfaces/lottery/definitions.js"() {
    definitions_default30 = {
      rpc: {},
      types: {
        CallIndex: "(u8, u8)",
        LotteryConfig: {
          price: "Balance",
          start: "BlockNumber",
          length: "BlockNumber",
          delay: "BlockNumber",
          repeat: "bool"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/mixnet/runtime.js
var runtime15;
var init_runtime15 = __esm({
  "node_modules/@polkadot/types/interfaces/mixnet/runtime.js"() {
    runtime15 = {
      MixnetApi: [
        {
          methods: {
            current_mixnodes: {
              description: "Get the index and phase of the current session.",
              params: [],
              type: "Result<Mixnode, MixnodesErr>"
            },
            maybe_register: {
              description: "Try to register a mixnode for the next session.",
              params: [
                {
                  name: "session_index",
                  type: "u32"
                },
                {
                  name: "mixnode",
                  type: "Mixnode"
                }
              ],
              type: "bool"
            },
            prev_mixnodes: {
              description: "Get the index and phase of the current session.",
              params: [],
              type: "Result<Mixnode, MixnodesErr>"
            },
            session_status: {
              description: "Get the index and phase of the current session.",
              params: [],
              type: "SessionStatus"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/mixnet/definitions.js
var definitions_default31;
var init_definitions31 = __esm({
  "node_modules/@polkadot/types/interfaces/mixnet/definitions.js"() {
    init_runtime15();
    definitions_default31 = {
      rpc: {},
      runtime: runtime15,
      types: {
        Mixnode: {
          externalAddresses: "Vec<Bytes>",
          kxPublic: "[u8; 32]",
          peerId: "[u8; 32]"
        },
        MixnodesErr: {
          _enum: {
            InsufficientRegistrations: {
              min: "u32",
              num: "u32"
            }
          }
        },
        SessionPhase: {
          _enum: ["CoverToCurrent", "RequestsToCurrent", "CoverToPrev", "DisconnectFromPrev"]
        },
        SessionStatus: {
          currentIndex: "u32",
          phase: "SessionPhase"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/mmr/rpc.js
var rpc7;
var init_rpc7 = __esm({
  "node_modules/@polkadot/types/interfaces/mmr/rpc.js"() {
    rpc7 = {
      generateProof: {
        description: "Generate MMR proof for the given block numbers.",
        params: [
          {
            name: "blockNumbers",
            type: "Vec<u64>"
          },
          {
            isOptional: true,
            name: "bestKnownBlockNumber",
            type: "u64"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "MmrLeafBatchProof"
      },
      root: {
        description: "Get the MMR root hash for the current best block.",
        params: [
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "MmrHash"
      },
      verifyProof: {
        description: "Verify an MMR proof",
        params: [
          {
            name: "proof",
            type: "MmrLeafBatchProof"
          }
        ],
        type: "bool"
      },
      verifyProofStateless: {
        description: "Verify an MMR proof statelessly given an mmr_root",
        params: [
          {
            name: "root",
            type: "MmrHash"
          },
          {
            name: "proof",
            type: "MmrLeafBatchProof"
          }
        ],
        type: "bool"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/mmr/runtime.js
var MMR_V2, MMR_V1, runtime16;
var init_runtime16 = __esm({
  "node_modules/@polkadot/types/interfaces/mmr/runtime.js"() {
    MMR_V2 = {
      generate_proof: {
        description: "Generate MMR proof for the given block numbers.",
        params: [
          {
            name: "blockNumbers",
            type: "Vec<BlockNumber>"
          },
          {
            name: "bestKnownBlockNumber",
            type: "Option<BlockNumber>"
          }
        ],
        type: "Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"
      },
      mmr_leaf_count: {
        description: "Return the number of MMR blocks in the chain.",
        params: [],
        type: "Result<U64, MmrError>"
      },
      mmr_root: {
        description: "Return the on-chain MMR root hash.",
        params: [],
        type: "Result<Hash, MmrError>"
      },
      verify_proof: {
        description: "Verify MMR proof against on-chain MMR.",
        params: [
          {
            name: "leaves",
            type: "Vec<MmrEncodableOpaqueLeaf>"
          },
          {
            name: "proof",
            type: "MmrBatchProof"
          }
        ],
        type: "Result<(), MmrError>"
      },
      verify_proof_stateless: {
        description: "Verify MMR proof against given root hash.",
        params: [
          {
            name: "root",
            type: "Hash"
          },
          {
            name: "leaves",
            type: "Vec<MmrEncodableOpaqueLeaf>"
          },
          {
            name: "proof",
            type: "MmrBatchProof"
          }
        ],
        type: "Result<(), MmrError>"
      }
    };
    MMR_V1 = {
      generate_batch_proof: {
        description: "Generate MMR proof for a series of leaves under given indices.",
        params: [
          {
            name: "leafIndices",
            type: "Vec<MmrLeafIndex>"
          }
        ],
        type: "Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"
      },
      generate_proof: {
        description: "Generate MMR proof for a leaf under given index.",
        params: [
          {
            name: "leafIndex",
            type: "MmrLeafIndex"
          }
        ],
        type: "Result<(MmrEncodableOpaqueLeaf, MmrProof), MmrError>"
      },
      mmr_root: {
        description: "Return the on-chain MMR root hash.",
        params: [],
        type: "Result<Hash, MmrError>"
      },
      verify_batch_proof: {
        description: "Verify MMR proof against on-chain MMR for a batch of leaves.",
        params: [
          {
            name: "leaves",
            type: "Vec<MmrEncodableOpaqueLeaf>"
          },
          {
            name: "proof",
            type: "MmrBatchProof"
          }
        ],
        type: "Result<(), MmrError>"
      },
      verify_batch_proof_stateless: {
        description: "Verify MMR proof against given root hash or a batch of leaves.",
        params: [
          {
            name: "root",
            type: "Hash"
          },
          {
            name: "leaves",
            type: "Vec<MmrEncodableOpaqueLeaf>"
          },
          {
            name: "proof",
            type: "MmrBatchProof"
          }
        ],
        type: "Result<(), MmrError>"
      },
      verify_proof: {
        description: "Verify MMR proof against on-chain MMR.",
        params: [
          {
            name: "leaf",
            type: "MmrEncodableOpaqueLeaf"
          },
          {
            name: "proof",
            type: "MmrProof"
          }
        ],
        type: "Result<(), MmrError>"
      },
      verify_proof_stateless: {
        description: "Verify MMR proof against given root hash.",
        params: [
          {
            name: "root",
            type: "Hash"
          },
          {
            name: "leaf",
            type: "MmrEncodableOpaqueLeaf"
          },
          {
            name: "proof",
            type: "MmrProof"
          }
        ],
        type: "Result<(), MmrError>"
      }
    };
    runtime16 = {
      MmrApi: [
        {
          methods: MMR_V2,
          version: 2
        },
        {
          methods: MMR_V1,
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/mmr/definitions.js
var definitions_default32;
var init_definitions32 = __esm({
  "node_modules/@polkadot/types/interfaces/mmr/definitions.js"() {
    init_rpc7();
    init_runtime16();
    definitions_default32 = {
      rpc: rpc7,
      runtime: runtime16,
      types: {
        MmrBatchProof: {
          leafIndices: "Vec<MmrLeafIndex>",
          leafCount: "MmrNodeIndex",
          items: "Vec<Hash>"
        },
        MmrEncodableOpaqueLeaf: "Bytes",
        MmrError: {
          _enum: ["InvalidNumericOp", "Push", "GetRoot", "Commit", "GenerateProof", "Verify", "LeafNotFound", " PalletNotIncluded", "InvalidLeafIndex", "InvalidBestKnownBlock"]
        },
        MmrHash: "Hash",
        MmrLeafBatchProof: {
          blockHash: "BlockHash",
          leaves: "Bytes",
          proof: "Bytes"
        },
        MmrLeafIndex: "u64",
        MmrLeafProof: {
          blockHash: "BlockHash",
          leaf: "Bytes",
          proof: "Bytes"
        },
        MmrNodeIndex: "u64",
        MmrProof: {
          leafIndex: "MmrLeafIndex",
          leafCount: "MmrNodeIndex",
          items: "Vec<Hash>"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/nfts/runtime.js
var runtime17;
var init_runtime17 = __esm({
  "node_modules/@polkadot/types/interfaces/nfts/runtime.js"() {
    runtime17 = {
      NftsApi: [
        {
          methods: {
            attribute: {
              description: "An attribute",
              params: [
                {
                  name: "collection",
                  type: "NftCollectionId"
                },
                {
                  name: "item",
                  type: "NftItemId"
                },
                {
                  name: "key",
                  type: "Bytes"
                }
              ],
              type: "Option<Bytes>"
            },
            collection_attribute: {
              description: "A collection attribute",
              params: [
                {
                  name: "collection",
                  type: "NftCollectionId"
                },
                {
                  name: "key",
                  type: "Bytes"
                }
              ],
              type: "Option<Bytes>"
            },
            collection_owner: {
              description: "A collection owner",
              params: [
                {
                  name: "collection",
                  type: "NftCollectionId"
                }
              ],
              type: "Option<AccountId>"
            },
            custom_attribute: {
              description: "A custom attribute",
              params: [
                {
                  name: "account",
                  type: "AccountId"
                },
                {
                  name: "collection",
                  type: "NftCollectionId"
                },
                {
                  name: "item",
                  type: "NftItemId"
                },
                {
                  name: "key",
                  type: "Bytes"
                }
              ],
              type: "Option<Bytes>"
            },
            owner: {
              description: "Collection owner",
              params: [
                {
                  name: "collection",
                  type: "NftCollectionId"
                },
                {
                  name: "item",
                  type: "NftItemId"
                }
              ],
              type: "Option<AccountId>"
            },
            system_attribute: {
              description: "System attribute",
              params: [
                {
                  name: "collection",
                  type: "NftCollectionId"
                },
                {
                  name: "item",
                  type: "NftItemId"
                },
                {
                  name: "key",
                  type: "Bytes"
                }
              ],
              type: "Option<Bytes>"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/nfts/definitions.js
var definitions_default33;
var init_definitions33 = __esm({
  "node_modules/@polkadot/types/interfaces/nfts/definitions.js"() {
    init_runtime17();
    definitions_default33 = {
      rpc: {},
      runtime: runtime17,
      types: {
        NftCollectionId: "u32",
        NftItemId: "u32"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/nompools/runtime.js
var runtime18;
var init_runtime18 = __esm({
  "node_modules/@polkadot/types/interfaces/nompools/runtime.js"() {
    runtime18 = {
      NominationPoolsApi: [
        {
          methods: {
            balance_to_points: {
              description: "Returns the equivalent points of `new_funds` for a given pool.",
              params: [
                {
                  name: "poolId",
                  type: "NpPoolId"
                },
                {
                  name: "newFunds",
                  type: "Balance"
                }
              ],
              type: "Balance"
            },
            pending_rewards: {
              description: "Returns the pending rewards for the given member.",
              params: [
                {
                  name: "member",
                  type: "AccountId"
                }
              ],
              type: "Balance"
            },
            points_to_balance: {
              description: "Returns the equivalent balance of `points` for a given pool.",
              params: [
                {
                  name: "poolId",
                  type: "NpPoolId"
                },
                {
                  name: "points",
                  type: "Balance"
                }
              ],
              type: "Balance"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/nompools/definitions.js
var definitions_default34;
var init_definitions34 = __esm({
  "node_modules/@polkadot/types/interfaces/nompools/definitions.js"() {
    init_runtime18();
    definitions_default34 = {
      rpc: {},
      runtime: runtime18,
      types: {
        NpApiError: {
          _enum: ["MemberNotFound", "OverflowInPendingRewards"]
        },
        NpPoolId: "u32"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/offences/definitions.js
var definitions_default35;
var init_definitions35 = __esm({
  "node_modules/@polkadot/types/interfaces/offences/definitions.js"() {
    definitions_default35 = {
      rpc: {},
      types: {
        DeferredOffenceOf: "(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)",
        Kind: "[u8; 16]",
        OffenceDetails: {
          offender: "Offender",
          reporters: "Vec<Reporter>"
        },
        Offender: "IdentificationTuple",
        OpaqueTimeSlot: "Bytes",
        ReportIdOf: "Hash",
        Reporter: "AccountId"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/pow/runtime.js
var runtime19;
var init_runtime19 = __esm({
  "node_modules/@polkadot/types/interfaces/pow/runtime.js"() {
    runtime19 = {
      DifficultyApi: [
        {
          methods: {
            difficulty: {
              description: "Return the target difficulty of the next block.",
              params: [],
              // This is Difficulty in the original, however this is chain-specific
              type: "Raw"
            }
          },
          version: 1
        }
      ],
      TimestampApi: [
        {
          methods: {
            timestamp: {
              description: "API necessary for timestamp-based difficulty adjustment algorithms.",
              params: [],
              type: "Moment"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/pow/definitions.js
var definitions_default36;
var init_definitions36 = __esm({
  "node_modules/@polkadot/types/interfaces/pow/definitions.js"() {
    init_runtime19();
    definitions_default36 = {
      rpc: {},
      runtime: runtime19,
      types: {}
    };
  }
});

// node_modules/@polkadot/types/interfaces/proxy/definitions.js
var definitions_default37;
var init_definitions37 = __esm({
  "node_modules/@polkadot/types/interfaces/proxy/definitions.js"() {
    definitions_default37 = {
      rpc: {},
      types: {
        ProxyDefinition: {
          delegate: "AccountId",
          proxyType: "ProxyType",
          delay: "BlockNumber"
        },
        ProxyType: {
          _enum: ["Any", "NonTransfer", "Governance", "Staking"]
        },
        ProxyAnnouncement: {
          real: "AccountId",
          callHash: "Hash",
          height: "BlockNumber"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/recovery/definitions.js
var definitions_default38;
var init_definitions38 = __esm({
  "node_modules/@polkadot/types/interfaces/recovery/definitions.js"() {
    definitions_default38 = {
      rpc: {},
      types: {
        ActiveRecovery: {
          created: "BlockNumber",
          deposit: "Balance",
          friends: "Vec<AccountId>"
        },
        RecoveryConfig: {
          delayPeriod: "BlockNumber",
          deposit: "Balance",
          friends: "Vec<AccountId>",
          threshold: "u16"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/scheduler/definitions.js
var definitions_default39;
var init_definitions39 = __esm({
  "node_modules/@polkadot/types/interfaces/scheduler/definitions.js"() {
    definitions_default39 = {
      rpc: {},
      types: {
        Period: "(BlockNumber, u32)",
        Priority: "u8",
        SchedulePeriod: "Period",
        SchedulePriority: "Priority",
        Scheduled: {
          maybeId: "Option<Bytes>",
          priority: "SchedulePriority",
          call: "Call",
          maybePeriodic: "Option<SchedulePeriod>",
          origin: "PalletsOrigin"
        },
        ScheduledTo254: {
          maybeId: "Option<Bytes>",
          priority: "SchedulePriority",
          call: "Call",
          maybePeriodic: "Option<SchedulePeriod>"
        },
        TaskAddress: "(BlockNumber, u32)"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/session/runtime.js
var runtime20;
var init_runtime20 = __esm({
  "node_modules/@polkadot/types/interfaces/session/runtime.js"() {
    runtime20 = {
      SessionKeys: [
        {
          methods: {
            decode_session_keys: {
              description: "Decode the given public session keys.",
              params: [
                {
                  name: "encoded",
                  type: "Bytes"
                }
              ],
              type: "Option<Vec<(Bytes, KeyTypeId)>>"
            },
            generate_session_keys: {
              description: "Generate a set of session keys with optionally using the given seed.",
              params: [
                {
                  name: "seed",
                  type: "Option<Bytes>"
                }
              ],
              type: "Bytes"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/session/definitions.js
var keyTypes, definitions_default40;
var init_definitions40 = __esm({
  "node_modules/@polkadot/types/interfaces/session/definitions.js"() {
    init_runtime20();
    keyTypes = {
      // key for beefy
      BeefyKey: "[u8; 33]",
      // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
      Keys: "SessionKeys4",
      SessionKeys1: "(AccountId)",
      SessionKeys2: "(AccountId, AccountId)",
      SessionKeys3: "(AccountId, AccountId, AccountId)",
      SessionKeys4: "(AccountId, AccountId, AccountId, AccountId)",
      SessionKeys5: "(AccountId, AccountId, AccountId, AccountId, AccountId)",
      SessionKeys6: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
      SessionKeys6B: "(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
      SessionKeys7: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
      SessionKeys7B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
      SessionKeys8: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
      SessionKeys8B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
      SessionKeys9: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
      SessionKeys9B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
      SessionKeys10: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
      SessionKeys10B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)"
    };
    definitions_default40 = {
      rpc: {},
      runtime: runtime20,
      types: {
        ...keyTypes,
        FullIdentification: "Exposure",
        IdentificationTuple: "(ValidatorId, FullIdentification)",
        MembershipProof: {
          session: "SessionIndex",
          trieNodes: "Vec<Bytes>",
          validatorCount: "ValidatorCount"
        },
        SessionIndex: "u32",
        ValidatorCount: "u32"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/society/definitions.js
var definitions_default41;
var init_definitions41 = __esm({
  "node_modules/@polkadot/types/interfaces/society/definitions.js"() {
    definitions_default41 = {
      rpc: {},
      types: {
        Bid: {
          who: "AccountId",
          kind: "BidKind",
          value: "Balance"
        },
        BidKind: {
          _enum: {
            Deposit: "Balance",
            Vouch: "(AccountId, Balance)"
          }
        },
        // a society-specific Judgement (not the same as identity Judgement)
        SocietyJudgement: {
          _enum: ["Rebid", "Reject", "Approve"]
        },
        // a society-specific Vote
        SocietyVote: {
          _enum: ["Skeptic", "Reject", "Approve"]
        },
        StrikeCount: "u32",
        VouchingStatus: {
          _enum: ["Vouching", "Banned"]
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/staking/runtime.js
var runtime21;
var init_runtime21 = __esm({
  "node_modules/@polkadot/types/interfaces/staking/runtime.js"() {
    runtime21 = {
      StakingApi: [
        {
          methods: {
            nominations_quota: {
              description: "Returns the nominations quota for a nominator with a given balance.",
              params: [
                {
                  name: "balance",
                  type: "Balance"
                }
              ],
              type: "u32"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/staking/definitions.js
var deprecated, phragmen, definitions_default42;
var init_definitions42 = __esm({
  "node_modules/@polkadot/types/interfaces/staking/definitions.js"() {
    init_runtime21();
    deprecated = {
      Points: "u32",
      EraPoints: {
        total: "Points",
        individual: "Vec<Points>"
      }
    };
    phragmen = {
      CompactAssignments: "CompactAssignmentsWith16",
      CompactAssignmentsWith16: {
        votes1: "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",
        votes2: "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",
        votes3: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",
        votes4: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",
        votes5: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",
        votes6: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",
        votes7: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",
        votes8: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",
        votes9: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",
        votes10: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",
        votes11: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",
        votes12: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",
        votes13: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",
        votes14: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",
        votes15: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",
        votes16: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>"
      },
      CompactAssignmentsWith24: {
        votes1: "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",
        votes2: "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",
        votes3: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",
        votes4: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",
        votes5: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",
        votes6: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",
        votes7: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",
        votes8: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",
        votes9: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",
        votes10: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",
        votes11: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",
        votes12: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",
        votes13: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",
        votes14: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",
        votes15: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",
        votes16: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>",
        votes17: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>",
        votes18: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>",
        votes19: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>",
        votes20: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>",
        votes21: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>",
        votes22: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>",
        votes23: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>",
        votes24: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>"
      },
      CompactAssignmentsTo265: "CompactAssignmentsWith16",
      CompactAssignmentsTo257: {
        votes1: "Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>",
        votes2: "Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>",
        votes3: "Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>",
        votes4: "Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>",
        votes5: "Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>",
        votes6: "Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>",
        votes7: "Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>",
        votes8: "Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>",
        votes9: "Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>",
        votes10: "Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>",
        votes11: "Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>",
        votes12: "Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>",
        votes13: "Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>",
        votes14: "Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>",
        votes15: "Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>",
        votes16: "Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>"
      },
      CompactScore: "(ValidatorIndex, OffchainAccuracy)",
      CompactScoreCompact: "(ValidatorIndexCompact, OffchainAccuracyCompact)",
      ElectionCompute: {
        // in previous versions the last entry was "AuthorityId"
        // (since no data attached, and it is via SCALE can rename)
        _enum: ["OnChain", "Signed", "Unsigned"]
      },
      ElectionPhase: {
        _enum: {
          Off: null,
          Signed: null,
          Unsigned: "(bool, BlockNumber)",
          Emergency: null
        }
      },
      ElectionResult: {
        compute: "ElectionCompute",
        slotStake: "Balance",
        electedStashes: "Vec<AccountId>",
        exposures: "Vec<(AccountId, Exposure)>"
      },
      ElectionScore: "[u128; 3]",
      ElectionSize: {
        validators: "Compact<ValidatorIndex>",
        nominators: "Compact<NominatorIndex>"
      },
      ElectionStatus: {
        _enum: {
          Close: "Null",
          Open: "BlockNumber"
        }
      },
      ExtendedBalance: "u128",
      RawSolution: "RawSolutionWith16",
      RawSolutionWith16: {
        compact: "CompactAssignmentsWith16",
        score: "ElectionScore",
        round: "u32"
      },
      RawSolutionWith24: {
        compact: "CompactAssignmentsWith24",
        score: "ElectionScore",
        round: "u32"
      },
      RawSolutionTo265: "RawSolutionWith16",
      ReadySolution: {
        supports: "SolutionSupports",
        score: "ElectionScore",
        compute: "ElectionCompute"
      },
      RoundSnapshot: {
        voters: "Vec<(AccountId, VoteWeight, Vec<AccountId>)>",
        targets: "Vec<AccountId>"
      },
      SeatHolder: {
        who: "AccountId",
        stake: "Balance",
        deposit: "Balance"
      },
      SignedSubmission: {
        _fallback: "SignedSubmissionTo276",
        who: "AccountId",
        deposit: "Balance",
        solution: "RawSolution",
        reward: "Balance"
      },
      SignedSubmissionTo276: {
        who: "AccountId",
        deposit: "Balance",
        solution: "RawSolution"
      },
      SignedSubmissionOf: "SignedSubmission",
      SolutionOrSnapshotSize: {
        voters: "Compact<u32>",
        targets: "Compact<u32>"
      },
      SolutionSupport: {
        total: "ExtendedBalance",
        voters: "Vec<(AccountId, ExtendedBalance)>"
      },
      SolutionSupports: "Vec<(AccountId, SolutionSupport)>",
      Supports: "SolutionSupports",
      SubmissionIndicesOf: "BTreeMap<ElectionScore, u32>",
      Voter: {
        votes: "Vec<AccountId>",
        stake: "Balance",
        deposit: "Balance"
      },
      VoteWeight: "u64"
    };
    definitions_default42 = {
      rpc: {},
      runtime: runtime21,
      types: {
        ...deprecated,
        ...phragmen,
        ActiveEraInfo: {
          index: "EraIndex",
          start: "Option<Moment>"
        },
        EraIndex: "u32",
        EraRewardPoints: {
          total: "RewardPoint",
          individual: "BTreeMap<AccountId, RewardPoint>"
        },
        EraRewards: {
          total: "u32",
          rewards: "Vec<u32>"
        },
        Exposure: {
          total: "Compact<Balance>",
          own: "Compact<Balance>",
          others: "Vec<IndividualExposure>"
        },
        Forcing: {
          _enum: [
            "NotForcing",
            "ForceNew",
            "ForceNone",
            "ForceAlways"
          ]
        },
        IndividualExposure: {
          who: "AccountId",
          value: "Compact<Balance>"
        },
        KeyType: "AccountId",
        MomentOf: "Moment",
        Nominations: {
          targets: "Vec<AccountId>",
          submittedIn: "EraIndex",
          suppressed: "bool"
        },
        NominatorIndex: "u32",
        NominatorIndexCompact: "Compact<NominatorIndex>",
        OffchainAccuracy: "PerU16",
        OffchainAccuracyCompact: "Compact<OffchainAccuracy>",
        PhragmenScore: "[u128; 3]",
        Points: "u32",
        RewardDestination: {
          _enum: {
            Staked: "Null",
            Stash: "Null",
            Controller: "Null",
            Account: "AccountId",
            None: "Null"
          }
        },
        RewardPoint: "u32",
        SlashJournalEntry: {
          who: "AccountId",
          amount: "Balance",
          ownSlash: "Balance"
        },
        SlashingSpansTo204: {
          spanIndex: "SpanIndex",
          lastStart: "EraIndex",
          prior: "Vec<EraIndex>"
        },
        SlashingSpans: {
          spanIndex: "SpanIndex",
          lastStart: "EraIndex",
          lastNonzeroSlash: "EraIndex",
          prior: "Vec<EraIndex>"
        },
        SpanIndex: "u32",
        SpanRecord: {
          slashed: "Balance",
          paidOut: "Balance"
        },
        StakingLedgerTo223: {
          stash: "AccountId",
          total: "Compact<Balance>",
          active: "Compact<Balance>",
          unlocking: "Vec<UnlockChunk>"
        },
        StakingLedgerTo240: {
          _fallback: "StakingLedgerTo223",
          stash: "AccountId",
          total: "Compact<Balance>",
          active: "Compact<Balance>",
          unlocking: "Vec<UnlockChunk>",
          lastReward: "Option<EraIndex>"
        },
        StakingLedger: {
          stash: "AccountId",
          total: "Compact<Balance>",
          active: "Compact<Balance>",
          unlocking: "Vec<UnlockChunk>",
          claimedRewards: "Vec<EraIndex>"
        },
        UnappliedSlashOther: "(AccountId, Balance)",
        UnappliedSlash: {
          validator: "AccountId",
          own: "Balance",
          others: "Vec<UnappliedSlashOther>",
          reporters: "Vec<AccountId>",
          payout: "Balance"
        },
        UnlockChunk: {
          value: "Compact<Balance>",
          era: "Compact<BlockNumber>"
        },
        ValidatorIndex: "u16",
        ValidatorIndexCompact: "Compact<ValidatorIndex>",
        ValidatorPrefs: "ValidatorPrefsWithBlocked",
        ValidatorPrefsWithCommission: {
          commission: "Compact<Perbill>"
        },
        ValidatorPrefsWithBlocked: {
          commission: "Compact<Perbill>",
          blocked: "bool"
        },
        ValidatorPrefsTo196: {
          validatorPayment: "Compact<Balance>"
        },
        ValidatorPrefsTo145: {
          unstakeThreshold: "Compact<u32>",
          validatorPayment: "Compact<Balance>"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/statement/runtime.js
var runtime22;
var init_runtime22 = __esm({
  "node_modules/@polkadot/types/interfaces/statement/runtime.js"() {
    runtime22 = {
      ValidateStatement: [
        {
          methods: {
            valdate_statement: {
              description: "Validate the statement.",
              params: [
                {
                  name: "source",
                  type: "StatementStoreStatementSource"
                },
                {
                  name: "statement",
                  type: "SpStatementStoreStatement"
                }
              ],
              type: "Result<StatementStoreValidStatement, StatementStoreInvalidStatement>"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/statement/definitions.js
var definitions_default43;
var init_definitions43 = __esm({
  "node_modules/@polkadot/types/interfaces/statement/definitions.js"() {
    init_runtime22();
    definitions_default43 = {
      rpc: {},
      runtime: runtime22,
      types: {
        StatementStoreStatementSource: {
          _enum: ["Chain", "Network", "Local"]
        },
        StatementStoreValidStatement: {
          maxCount: "u32",
          maxSize: "u32"
        },
        StatementStoreInvalidStatement: {
          _enum: ["BadProof", "NoProof", "InternalError"]
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/support/definitions.js
var definitions_default44;
var init_definitions44 = __esm({
  "node_modules/@polkadot/types/interfaces/support/definitions.js"() {
    definitions_default44 = {
      rpc: {},
      types: {
        WeightToFeeCoefficient: {
          coeffInteger: "Balance",
          coeffFrac: "Perbill",
          negative: "bool",
          degree: "u8"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/syncstate/rpc.js
var rpc8;
var init_rpc8 = __esm({
  "node_modules/@polkadot/types/interfaces/syncstate/rpc.js"() {
    rpc8 = {
      genSyncSpec: {
        description: "Returns the json-serialized chainspec running the node, with a sync state.",
        endpoint: "sync_state_genSyncSpec",
        params: [
          {
            name: "raw",
            type: "bool"
          }
        ],
        type: "Json"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/syncstate/definitions.js
var definitions_default45;
var init_definitions45 = __esm({
  "node_modules/@polkadot/types/interfaces/syncstate/definitions.js"() {
    init_rpc8();
    definitions_default45 = {
      rpc: rpc8,
      types: {}
    };
  }
});

// node_modules/@polkadot/types/interfaces/system/rpc.js
var rpc9;
var init_rpc9 = __esm({
  "node_modules/@polkadot/types/interfaces/system/rpc.js"() {
    rpc9 = {
      accountNextIndex: {
        alias: ["account_nextIndex"],
        description: "Retrieves the next accountIndex as available on the node",
        params: [
          {
            name: "accountId",
            type: "AccountId"
          }
        ],
        type: "Index"
      },
      addLogFilter: {
        description: "Adds the supplied directives to the current log filter",
        isUnsafe: true,
        params: [
          {
            name: "directives",
            type: "Text"
          }
        ],
        type: "Null"
      },
      addReservedPeer: {
        description: "Adds a reserved peer",
        isUnsafe: true,
        params: [
          {
            name: "peer",
            type: "Text"
          }
        ],
        type: "Text"
      },
      chain: {
        description: "Retrieves the chain",
        params: [],
        type: "Text"
      },
      chainType: {
        description: "Retrieves the chain type",
        params: [],
        type: "ChainType"
      },
      dryRun: {
        alias: ["system_dryRunAt"],
        description: "Dry run an extrinsic at a given block",
        isUnsafe: true,
        params: [
          {
            name: "extrinsic",
            type: "Bytes"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "ApplyExtrinsicResult"
      },
      health: {
        description: "Return health status of the node",
        noErrorLog: true,
        params: [],
        type: "Health"
      },
      localListenAddresses: {
        description: "The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example",
        params: [],
        type: "Vec<Text>"
      },
      localPeerId: {
        description: "Returns the base58-encoded PeerId of the node",
        params: [],
        type: "Text"
      },
      name: {
        description: "Retrieves the node name",
        params: [],
        type: "Text"
      },
      networkState: {
        alias: ["system_unstable_networkState"],
        description: "Returns current state of the network",
        isUnsafe: true,
        params: [],
        type: "NetworkState"
      },
      nodeRoles: {
        description: "Returns the roles the node is running as",
        params: [],
        type: "Vec<NodeRole>"
      },
      peers: {
        description: "Returns the currently connected peers",
        isUnsafe: true,
        params: [],
        type: "Vec<PeerInfo>"
      },
      properties: {
        description: "Get a custom set of properties as a JSON object, defined in the chain spec",
        params: [],
        type: "ChainProperties"
      },
      removeReservedPeer: {
        description: "Remove a reserved peer",
        isUnsafe: true,
        params: [
          {
            name: "peerId",
            type: "Text"
          }
        ],
        type: "Text"
      },
      reservedPeers: {
        description: "Returns the list of reserved peers",
        params: [],
        type: "Vec<Text>"
      },
      resetLogFilter: {
        description: "Resets the log filter to Substrate defaults",
        isUnsafe: true,
        params: [],
        type: "Null"
      },
      syncState: {
        description: "Returns the state of the syncing of the node",
        params: [],
        type: "SyncState"
      },
      version: {
        description: "Retrieves the version of the node",
        params: [],
        type: "Text"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/system/runtime.js
var runtime23;
var init_runtime23 = __esm({
  "node_modules/@polkadot/types/interfaces/system/runtime.js"() {
    runtime23 = {
      AccountNonceApi: [
        {
          methods: {
            account_nonce: {
              description: "The API to query account nonce (aka transaction index)",
              params: [
                {
                  name: "accountId",
                  type: "AccountId"
                }
              ],
              type: "Index"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/system/definitions.js
var definitions_default46;
var init_definitions46 = __esm({
  "node_modules/@polkadot/types/interfaces/system/definitions.js"() {
    init_rpc9();
    init_runtime23();
    definitions_default46 = {
      rpc: rpc9,
      runtime: runtime23,
      types: {
        AccountInfo: "AccountInfoWithTripleRefCount",
        AccountInfoWithRefCountU8: {
          nonce: "Index",
          refcount: "u8",
          data: "AccountData"
        },
        AccountInfoWithRefCount: {
          _fallback: "AccountInfoWithRefCountU8",
          nonce: "Index",
          refcount: "RefCount",
          data: "AccountData"
        },
        AccountInfoWithDualRefCount: {
          _fallback: "AccountInfoWithRefCount",
          nonce: "Index",
          consumers: "RefCount",
          providers: "RefCount",
          data: "AccountData"
        },
        // original naming
        AccountInfoWithProviders: "AccountInfoWithDualRefCount",
        AccountInfoWithTripleRefCount: {
          _fallback: "AccountInfoWithDualRefCount",
          nonce: "Index",
          consumers: "RefCount",
          providers: "RefCount",
          sufficients: "RefCount",
          data: "AccountData"
        },
        ApplyExtrinsicResult: "Result<DispatchOutcome, TransactionValidityError>",
        ApplyExtrinsicResultPre6: "Result<DispatchOutcomePre6, TransactionValidityError>",
        ArithmeticError: {
          _enum: [
            "Underflow",
            "Overflow",
            "DivisionByZero"
          ]
        },
        BlockLength: {
          max: "PerDispatchClassU32"
        },
        BlockWeights: {
          baseBlock: "Weight",
          maxBlock: "Weight",
          perClass: "PerDispatchClassWeightsPerClass"
        },
        ChainProperties: "GenericChainProperties",
        ChainType: {
          _enum: {
            Development: "Null",
            Local: "Null",
            Live: "Null",
            Custom: "Text"
          }
        },
        ConsumedWeight: "PerDispatchClassWeight",
        DigestOf: "Digest",
        DispatchClass: {
          _enum: ["Normal", "Operational", "Mandatory"]
        },
        DispatchError: {
          _enum: {
            Other: "Null",
            CannotLookup: "Null",
            BadOrigin: "Null",
            Module: "DispatchErrorModule",
            ConsumerRemaining: "Null",
            NoProviders: "Null",
            TooManyConsumers: "Null",
            Token: "TokenError",
            Arithmetic: "ArithmeticError",
            Transactional: "TransactionalError",
            Exhausted: "Null",
            Corruption: "Null",
            Unavailable: "Null"
          }
        },
        DispatchErrorPre6: {
          _enum: {
            Other: "Null",
            CannotLookup: "Null",
            BadOrigin: "Null",
            Module: "DispatchErrorModulePre6",
            ConsumerRemaining: "Null",
            NoProviders: "Null",
            TooManyConsumers: "Null",
            Token: "TokenError",
            Arithmetic: "ArithmeticError",
            Transactional: "TransactionalError"
          }
        },
        DispatchErrorPre6First: {
          // The enum was modified mid-flight, affecting asset chains -
          // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
          _enum: {
            Other: "Null",
            CannotLookup: "Null",
            BadOrigin: "Null",
            Module: "DispatchErrorModulePre6",
            ConsumerRemaining: "Null",
            NoProviders: "Null",
            Token: "TokenError",
            Arithmetic: "ArithmeticError",
            Transactional: "TransactionalError"
          }
        },
        DispatchErrorModuleU8: {
          index: "u8",
          error: "u8"
        },
        DispatchErrorModuleU8a: {
          index: "u8",
          error: "[u8; 4]"
        },
        DispatchErrorModule: "DispatchErrorModuleU8a",
        DispatchErrorModulePre6: "DispatchErrorModuleU8",
        DispatchErrorTo198: {
          module: "Option<u8>",
          error: "u8"
        },
        DispatchInfo: {
          weight: "Weight",
          class: "DispatchClass",
          paysFee: "Pays"
        },
        DispatchInfoTo190: {
          weight: "Weight",
          class: "DispatchClass"
        },
        DispatchInfoTo244: {
          weight: "Weight",
          class: "DispatchClass",
          paysFee: "bool"
        },
        DispatchOutcome: "Result<(), DispatchError>",
        DispatchOutcomePre6: "Result<(), DispatchErrorPre6>",
        DispatchResult: "Result<(), DispatchError>",
        DispatchResultOf: "DispatchResult",
        DispatchResultTo198: "Result<(), Text>",
        Event: "GenericEvent",
        EventId: "[u8; 2]",
        EventIndex: "u32",
        EventRecord: {
          phase: "Phase",
          event: "Event",
          topics: "Vec<Hash>"
        },
        Health: {
          peers: "u64",
          isSyncing: "bool",
          shouldHavePeers: "bool"
        },
        InvalidTransaction: {
          _enum: {
            Call: "Null",
            Payment: "Null",
            Future: "Null",
            Stale: "Null",
            BadProof: "Null",
            AncientBirthBlock: "Null",
            ExhaustsResources: "Null",
            Custom: "u8",
            BadMandatory: "Null",
            MandatoryDispatch: "Null",
            BadSigner: "Null"
          }
        },
        Key: "Bytes",
        LastRuntimeUpgradeInfo: {
          specVersion: "Compact<u32>",
          specName: "Text"
        },
        NetworkState: {
          peerId: "Text",
          listenedAddresses: "Vec<Text>",
          externalAddresses: "Vec<Text>",
          connectedPeers: "HashMap<Text, Peer>",
          notConnectedPeers: "HashMap<Text, NotConnectedPeer>",
          averageDownloadPerSec: "u64",
          averageUploadPerSec: "u64",
          peerset: "NetworkStatePeerset"
        },
        NetworkStatePeerset: {
          messageQueue: "u64",
          nodes: "HashMap<Text, NetworkStatePeersetInfo>"
        },
        NetworkStatePeersetInfo: {
          connected: "bool",
          reputation: "i32"
        },
        NodeRole: {
          _enum: {
            Full: "Null",
            LightClient: "Null",
            Authority: "Null",
            UnknownRole: "u8"
          }
        },
        NotConnectedPeer: {
          knownAddresses: "Vec<Text>",
          latestPingTime: "Option<PeerPing>",
          versionString: "Option<Text>"
        },
        Peer: {
          enabled: "bool",
          endpoint: "PeerEndpoint",
          knownAddresses: "Vec<Text>",
          latestPingTime: "PeerPing",
          open: "bool",
          versionString: "Text"
        },
        PeerEndpoint: {
          listening: "PeerEndpointAddr"
        },
        PeerEndpointAddr: {
          _alias: {
            localAddr: "local_addr",
            sendBackAddr: "send_back_addr"
          },
          localAddr: "Text",
          sendBackAddr: "Text"
        },
        PeerPing: {
          nanos: "u64",
          secs: "u64"
        },
        PeerInfo: {
          peerId: "Text",
          roles: "Text",
          protocolVersion: "u32",
          bestHash: "Hash",
          bestNumber: "BlockNumber"
        },
        PerDispatchClassU32: {
          normal: "u32",
          operational: "u32",
          mandatory: "u32"
        },
        PerDispatchClassWeight: {
          normal: "Weight",
          operational: "Weight",
          mandatory: "Weight"
        },
        PerDispatchClassWeightsPerClass: {
          normal: "WeightPerClass",
          operational: "WeightPerClass",
          mandatory: "WeightPerClass"
        },
        Phase: {
          _enum: {
            ApplyExtrinsic: "u32",
            Finalization: "Null",
            Initialization: "Null"
          }
        },
        RawOrigin: {
          _enum: {
            Root: "Null",
            Signed: "AccountId",
            None: "Null"
          }
        },
        RefCount: "u32",
        RefCountTo259: "u8",
        SyncState: {
          startingBlock: "BlockNumber",
          currentBlock: "BlockNumber",
          highestBlock: "Option<BlockNumber>"
        },
        SystemOrigin: "RawOrigin",
        TokenError: {
          _enum: [
            "NoFunds",
            "WouldDie",
            "BelowMinimum",
            "CannotCreate",
            "UnknownAsset",
            "Frozen",
            "Unsupported",
            // these are dropped, but still in older versions
            // (if this adjusts, will need to take a re-look)
            "Underflow",
            "Overflow"
          ]
        },
        TransactionValidityError: {
          _enum: {
            Invalid: "InvalidTransaction",
            Unknown: "UnknownTransaction"
          }
        },
        TransactionalError: {
          _enum: [
            "LimitReached",
            "NoLayer"
          ]
        },
        UnknownTransaction: {
          _enum: {
            CannotLookup: "Null",
            NoUnsignedValidator: "Null",
            Custom: "u8"
          }
        },
        WeightPerClass: {
          baseExtrinsic: "Weight",
          maxExtrinsic: "Option<Weight>",
          maxTotal: "Option<Weight>",
          reserved: "Option<Weight>"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/treasury/definitions.js
var definitions_default47;
var init_definitions47 = __esm({
  "node_modules/@polkadot/types/interfaces/treasury/definitions.js"() {
    definitions_default47 = {
      rpc: {},
      types: {
        Bounty: {
          proposer: "AccountId",
          value: "Balance",
          fee: "Balance",
          curatorDeposit: "Balance",
          bond: "Balance",
          status: "BountyStatus"
        },
        BountyIndex: "u32",
        BountyStatus: {
          _enum: {
            Proposed: "Null",
            Approved: "Null",
            Funded: "Null",
            CuratorProposed: "BountyStatusCuratorProposed",
            Active: "BountyStatusActive",
            PendingPayout: "BountyStatusPendingPayout"
          }
        },
        BountyStatusActive: {
          curator: "AccountId",
          updateDue: "BlockNumber"
        },
        BountyStatusCuratorProposed: {
          curator: "AccountId"
        },
        BountyStatusPendingPayout: {
          curator: "AccountId",
          beneficiary: "AccountId",
          unlockAt: "BlockNumber"
        },
        OpenTip: {
          reason: "Hash",
          who: "AccountId",
          finder: "AccountId",
          deposit: "Balance",
          closes: "Option<BlockNumber>",
          tips: "Vec<OpenTipTip>",
          findersFee: "bool"
        },
        OpenTipTo225: {
          reason: "Hash",
          who: "AccountId",
          finder: "Option<OpenTipFinderTo225>",
          closes: "Option<BlockNumber>",
          tips: "Vec<OpenTipTip>"
        },
        OpenTipFinderTo225: "(AccountId, Balance)",
        OpenTipTip: "(AccountId, Balance)",
        TreasuryProposal: {
          proposer: "AccountId",
          value: "Balance",
          beneficiary: "AccountId",
          bond: "Balance"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/txpayment/definitions.js
var definitions_default48;
var init_definitions48 = __esm({
  "node_modules/@polkadot/types/interfaces/txpayment/definitions.js"() {
    definitions_default48 = {
      rpc: {},
      types: {
        Multiplier: "Fixed128"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/txqueue/runtime.js
var runtime24;
var init_runtime24 = __esm({
  "node_modules/@polkadot/types/interfaces/txqueue/runtime.js"() {
    runtime24 = {
      TaggedTransactionQueue: [
        {
          methods: {
            validate_transaction: {
              description: "Validate the transaction.",
              params: [
                {
                  name: "source",
                  type: "TransactionSource"
                },
                {
                  name: "tx",
                  type: "Extrinsic"
                },
                {
                  name: "blockHash",
                  type: "BlockHash"
                }
              ],
              type: "TransactionValidity"
            }
          },
          version: 3
        },
        {
          methods: {
            validate_transaction: {
              description: "Validate the transaction.",
              params: [
                {
                  name: "source",
                  type: "TransactionSource"
                },
                {
                  name: "tx",
                  type: "Extrinsic"
                }
              ],
              type: "TransactionValidity"
            }
          },
          version: 2
        },
        {
          methods: {
            validate_transaction: {
              description: "Validate the transaction.",
              params: [
                {
                  name: "tx",
                  type: "Extrinsic"
                }
              ],
              type: "TransactionValidity"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/txqueue/definitions.js
var definitions_default49;
var init_definitions49 = __esm({
  "node_modules/@polkadot/types/interfaces/txqueue/definitions.js"() {
    init_runtime24();
    definitions_default49 = {
      rpc: {},
      runtime: runtime24,
      types: {
        TransactionSource: {
          _enum: ["InBlock", "Local", "External"]
        },
        TransactionValidity: "Result<ValidTransaction, TransactionValidityError>",
        ValidTransaction: {
          priority: "TransactionPriority",
          requires: "Vec<TransactionTag>",
          provides: "Vec<TransactionTag>",
          longevity: "TransactionLongevity",
          propagate: "bool"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/uniques/definitions.js
var definitions_default50;
var init_definitions50 = __esm({
  "node_modules/@polkadot/types/interfaces/uniques/definitions.js"() {
    definitions_default50 = {
      rpc: {},
      types: {
        ClassId: "u32",
        InstanceId: "u32",
        DepositBalance: "Balance",
        DepositBalanceOf: "Balance",
        ClassDetails: {
          owner: "AccountId",
          issuer: "AccountId",
          admin: "AccountId",
          freezer: "AccountId",
          totalDeposit: "DepositBalance",
          freeHolding: "bool",
          instances: "u32",
          instanceMetadatas: "u32",
          attributes: "u32",
          isFrozen: "bool"
        },
        DestroyWitness: {
          instances: "Compact<u32>",
          instanceMetadatas: "Compact<u32>",
          attributes: "Compact<u32>"
        },
        InstanceDetails: {
          owner: "AccountId",
          approved: "Option<AccountId>",
          isFrozen: "bool",
          deposit: "DepositBalance"
        },
        ClassMetadata: {
          deposit: "DepositBalance",
          data: "Vec<u8>",
          isFrozen: "bool"
        },
        InstanceMetadata: {
          deposit: "DepositBalance",
          data: "Vec<u8>",
          isFrozen: "bool"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/utility/definitions.js
var definitions_default51;
var init_definitions51 = __esm({
  "node_modules/@polkadot/types/interfaces/utility/definitions.js"() {
    definitions_default51 = {
      rpc: {},
      types: {
        Multisig: {
          when: "Timepoint",
          deposit: "Balance",
          depositor: "AccountId",
          approvals: "Vec<AccountId>"
        },
        Timepoint: {
          height: "BlockNumber",
          index: "u32"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/vesting/definitions.js
var definitions_default52;
var init_definitions52 = __esm({
  "node_modules/@polkadot/types/interfaces/vesting/definitions.js"() {
    definitions_default52 = {
      rpc: {},
      types: {
        VestingInfo: {
          locked: "Balance",
          perBlock: "Balance",
          startingBlock: "BlockNumber"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/attestations/definitions.js
var definitions_default53;
var init_definitions53 = __esm({
  "node_modules/@polkadot/types/interfaces/attestations/definitions.js"() {
    definitions_default53 = {
      rpc: {},
      types: {
        BlockAttestations: {
          receipt: "CandidateReceipt",
          valid: "Vec<AccountId>",
          invalid: "Vec<AccountId>"
        },
        IncludedBlocks: {
          actualNumber: "BlockNumber",
          session: "SessionIndex",
          randomSeed: "H256",
          activeParachains: "Vec<ParaId>",
          paraBlocks: "Vec<Hash>"
        },
        MoreAttestations: {}
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/bridges/definitions.js
var definitions_default54;
var init_definitions54 = __esm({
  "node_modules/@polkadot/types/interfaces/bridges/definitions.js"() {
    definitions_default54 = {
      rpc: {},
      types: {
        BridgedBlockHash: "H256",
        BridgedBlockNumber: "BlockNumber",
        BridgedHeader: "Header",
        BridgeMessageId: "(LaneId, MessageNonce)",
        CallOrigin: {
          _enum: {
            SourceRoot: "Null",
            TargetAccount: "(AccountId, MultiSigner, MultiSignature)",
            SourceAccount: "AccountId"
          }
        },
        ChainId: "[u8; 4]",
        DeliveredMessages: {
          begin: "MessageNonce",
          end: "MessageNonce",
          // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;
          dispatchResults: "BitVec"
        },
        DispatchFeePayment: {
          _enum: ["AtSourceChain", "AtTargetChain"]
        },
        InboundLaneData: {
          relayers: "Vec<UnrewardedRelayer>",
          lastConfirmedNonce: "MessageNonce"
        },
        InboundRelayer: "AccountId",
        InitializationData: {
          header: "Header",
          authorityList: "AuthorityList",
          setId: "SetId",
          isHalted: "bool"
        },
        LaneId: "[u8; 4]",
        MessageData: {
          payload: "Bytes",
          fee: "Balance"
        },
        MessagesDeliveryProofOf: {
          bridgedHeaderHash: "BlockHash",
          storageProof: "Vec<Bytes>",
          lane: "LaneId"
        },
        MessageKey: {
          laneId: "LaneId",
          nonce: "MessageNonce"
        },
        MessageNonce: "u64",
        MessagesProofOf: {
          bridgedHeaderHash: "BridgedBlockHash",
          storageProof: "Vec<Bytes>",
          lane: "LaneId",
          noncesStart: "MessageNonce",
          noncesEnd: "MessageNonce"
        },
        OperatingMode: {
          _enum: ["Normal", "RejectingOutboundMessages", "Halted"]
        },
        OutboundLaneData: {
          oldestUnprunedNonce: "MessageNonce",
          latestReceivedNonce: "MessageNonce",
          latestGeneratedNonce: "MessageNonce"
        },
        OutboundMessageFee: "Balance",
        OutboundPayload: {
          specVersion: "u32",
          weight: "Weight",
          origin: "CallOrigin",
          dispatchFeePayment: "DispatchFeePayment",
          call: "Bytes"
        },
        Parameter: "Null",
        RelayerId: "AccountId",
        UnrewardedRelayer: {
          relayer: "RelayerId",
          messages: "DeliveredMessages"
        },
        UnrewardedRelayersState: {
          unrewardedRelayer_Entries: "MessageNonce",
          messagesInOldestEntry: "MessageNonce",
          totalMessages: "MessageNonce"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/claims/definitions.js
var definitions_default55;
var init_definitions55 = __esm({
  "node_modules/@polkadot/types/interfaces/claims/definitions.js"() {
    definitions_default55 = {
      rpc: {},
      types: {
        StatementKind: {
          _enum: ["Regular", "Saft"]
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/crowdloan/definitions.js
var definitions_default56;
var init_definitions56 = __esm({
  "node_modules/@polkadot/types/interfaces/crowdloan/definitions.js"() {
    definitions_default56 = {
      rpc: {},
      types: {
        FundIndex: "u32",
        LastContribution: {
          _enum: {
            Never: "Null",
            PreEnding: "u32",
            Ending: "BlockNumber"
          }
        },
        FundInfo: {
          depositor: "AccountId",
          verifier: "Option<MultiSigner>",
          deposit: "Balance",
          raised: "Balance",
          end: "BlockNumber",
          cap: "Balance",
          lastContribution: "LastContribution",
          firstPeriod: "LeasePeriod",
          lastPeriod: "LeasePeriod",
          trieIndex: "TrieIndex"
        },
        TrieIndex: "u32"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/cumulus/runtime.js
var runtime25;
var init_runtime25 = __esm({
  "node_modules/@polkadot/types/interfaces/cumulus/runtime.js"() {
    runtime25 = {
      CollectCollationInfo: [
        {
          methods: {
            collect_collation_info: {
              description: "Collect information about a collation.",
              params: [
                {
                  name: "header",
                  type: "Header"
                }
              ],
              type: "CollationInfo"
            }
          },
          version: 2
        },
        {
          methods: {
            collect_collation_info: {
              description: "Collect information about a collation.",
              params: [],
              type: "CollationInfoV1"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/cumulus/definitions.js
var dmpQueue, definitions_default57;
var init_definitions57 = __esm({
  "node_modules/@polkadot/types/interfaces/cumulus/definitions.js"() {
    init_runtime25();
    dmpQueue = {
      CollationInfo: {
        upwardMessages: "Vec<UpwardMessage>",
        horizontalMessages: "Vec<OutboundHrmpMessage>",
        newValidationCode: "Option<ValidationCode>",
        processedDownwardMessages: "u32",
        hrmpWatermark: "RelayBlockNumber",
        headData: "HeadData"
      },
      CollationInfoV1: {
        upwardMessages: "Vec<UpwardMessage>",
        horizontalMessages: "Vec<OutboundHrmpMessage>",
        newValidationCode: "Option<ValidationCode>",
        processedDownwardMessages: "u32",
        hrmpWatermark: "RelayBlockNumber"
      },
      ConfigData: {
        maxIndividual: "Weight"
      },
      MessageId: "[u8; 32]",
      OverweightIndex: "u64",
      PageCounter: "u32",
      PageIndexData: {
        beginUsed: "PageCounter",
        endUsed: "PageCounter",
        overweightCount: "OverweightIndex"
      }
    };
    definitions_default57 = {
      rpc: {},
      runtime: runtime25,
      types: dmpQueue
    };
  }
});

// node_modules/@polkadot/types/interfaces/finality/runtime.js
var finalityV1, runtime26;
var init_runtime26 = __esm({
  "node_modules/@polkadot/types/interfaces/finality/runtime.js"() {
    finalityV1 = {
      methods: {
        best_finalized: {
          description: "Returns number and hash of the best finalized header known to the bridge module.",
          params: [],
          type: "(BlockNumber, Hash)"
        }
      },
      version: 1
    };
    runtime26 = {
      KusamaFinalityApi: [finalityV1],
      PolkadotFinalityApi: [finalityV1],
      RococoFinalityApi: [finalityV1],
      WestendFinalityApi: [finalityV1]
    };
  }
});

// node_modules/@polkadot/types/interfaces/finality/definitions.js
var definitions_default58;
var init_definitions58 = __esm({
  "node_modules/@polkadot/types/interfaces/finality/definitions.js"() {
    init_runtime26();
    definitions_default58 = {
      rpc: {},
      runtime: runtime26,
      types: {}
    };
  }
});

// node_modules/@polkadot/types/interfaces/parachains/hrmp.js
var hrmp_default;
var init_hrmp = __esm({
  "node_modules/@polkadot/types/interfaces/parachains/hrmp.js"() {
    hrmp_default = {
      HrmpChannel: {
        maxCapacity: "u32",
        maxTotalSize: "u32",
        maxMessageSize: "u32",
        msgCount: "u32",
        totalSize: "u32",
        mqcHead: "Option<Hash>",
        senderDeposit: "Balance",
        recipientDeposit: "Balance"
      },
      HrmpChannelId: {
        sender: "u32",
        receiver: "u32"
      },
      HrmpOpenChannelRequest: {
        confirmed: "bool",
        age: "SessionIndex",
        senderDeposit: "Balance",
        maxMessageSize: "u32",
        maxCapacity: "u32",
        maxTotalSize: "u32"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/parachains/runtime.js
var PH_V1_TO_V2, PH_V2_TO_V3, PH_V3, PH_V4, PH_V5, PH_V6, PH_V7, PH_V8, PH_V9, PH_V10, runtime27;
var init_runtime27 = __esm({
  "node_modules/@polkadot/types/interfaces/parachains/runtime.js"() {
    PH_V1_TO_V2 = {
      assumed_validation_data: {
        description: "Returns the persisted validation data for the given `ParaId` along with the corresponding validation code hash.",
        params: [
          {
            name: "paraId",
            type: "ParaId"
          },
          {
            name: "hash",
            type: "Hash"
          }
        ],
        type: "Option<(PersistedValidationData, ValidationCodeHash)>"
      },
      availability_cores: {
        description: "Yields information on all availability cores as relevant to the child block.",
        params: [],
        type: "Vec<CoreState>"
      },
      candidate_events: {
        description: "Get a vector of events concerning candidates that occurred within a block.",
        params: [],
        type: "Vec<CandidateEvent>"
      },
      candidate_pending_availability: {
        description: "Get the receipt of a candidate pending availability.",
        params: [
          {
            name: "paraId",
            type: "ParaId"
          }
        ],
        type: "Option<CommittedCandidateReceipt>"
      },
      check_validation_outputs: {
        description: "Checks if the given validation outputs pass the acceptance criteria.",
        params: [
          {
            name: "paraId",
            type: "ParaId"
          },
          {
            name: "outputs",
            type: "CandidateCommitments"
          }
        ],
        type: "bool"
      },
      dmq_contents: {
        description: "Get all the pending inbound messages in the downward message queue for a para.",
        params: [
          {
            name: "paraId",
            type: "ParaId"
          }
        ],
        type: "Vec<InboundDownwardMessage>"
      },
      inbound_hrmp_channels_contents: {
        description: "Get the contents of all channels addressed to the given recipient.",
        params: [
          {
            name: "paraId",
            type: "ParaId"
          }
        ],
        type: "Vec<InboundHrmpMessage>"
      },
      on_chain_votes: {
        description: "Scrape dispute relevant from on-chain, backing votes and resolved disputes.",
        params: [],
        type: "Option<ScrapedOnChainVotes>"
      },
      persisted_validation_data: {
        description: "Yields the persisted validation data for the given `ParaId` along with an assumption that should be used if the para currently occupies a core.",
        params: [
          {
            name: "paraId",
            type: "ParaId"
          },
          {
            name: "assumption",
            type: "OccupiedCoreAssumption"
          }
        ],
        type: "Option<PersistedValidationData>"
      },
      session_index_for_child: {
        description: "Returns the session index expected at a child of the block.",
        params: [],
        type: "SessionIndex"
      },
      validation_code: {
        description: "Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.",
        params: [
          {
            name: "paraId",
            type: "ParaId"
          },
          {
            name: "assumption",
            type: "OccupiedCoreAssumption"
          }
        ],
        type: "Option<ValidationCode>"
      },
      validation_code_by_hash: {
        description: "Get the validation code from its hash.",
        params: [
          {
            name: "hash",
            type: "ValidationCodeHash"
          }
        ],
        type: "Option<ValidationCode>"
      },
      validator_groups: {
        description: "Returns the validator groups and rotation info localized based on the hypothetical child of a block whose state  this is invoked on",
        params: [],
        type: "(Vec<Vec<ParaValidatorIndex>>, GroupRotationInfo)"
      },
      validators: {
        description: "Get the current validators.",
        params: [],
        type: "Vec<ValidatorId>"
      }
    };
    PH_V2_TO_V3 = {
      pvfs_require_precheck: {
        description: "Returns code hashes of PVFs that require pre-checking by validators in the active set.",
        params: [],
        type: "Vec<ValidationCodeHash>"
      },
      session_info: {
        description: "Get the session info for the given session, if stored.",
        params: [
          {
            name: "index",
            type: "SessionIndex"
          }
        ],
        type: "Option<SessionInfo>"
      },
      submit_pvf_check_statement: {
        description: "Submits a PVF pre-checking statement into the transaction pool.",
        params: [
          {
            name: "stmt",
            type: "PvfCheckStatement"
          },
          {
            name: "signature",
            type: "ValidatorSignature"
          }
        ],
        type: "Null"
      },
      validation_code_hash: {
        description: "Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.",
        params: [
          {
            name: "paraId",
            type: "ParaId"
          },
          {
            name: "assumption",
            type: "OccupiedCoreAssumption"
          }
        ],
        type: "Option<ValidationCodeHash>"
      }
    };
    PH_V3 = {
      disputes: {
        description: "Returns all onchain disputes.",
        params: [],
        type: "Vec<(SessionIndex, CandidateHash, DisputeState)>"
      }
    };
    PH_V4 = {
      session_executor_params: {
        description: "Returns execution parameters for the session.",
        params: [
          {
            name: "sessionIndex",
            type: "SessionIndex"
          }
        ],
        type: "Option<ExecutorParams>"
      }
    };
    PH_V5 = {
      key_ownership_proof: {
        description: "Returns a merkle proof of a validator session key",
        params: [
          {
            name: "validatorId",
            type: "ValidatorId"
          }
        ],
        type: "Option<OpaqueKeyOwnershipProof>"
      },
      submit_report_dispute_lost: {
        description: "Submit an unsigned extrinsic to slash validators who lost a dispute about a candidate of a past session",
        params: [
          {
            name: "disputeProof",
            type: "DisputeProof"
          },
          {
            name: "keyOwnershipProof",
            type: "OpaqueKeyOwnershipProof"
          }
        ],
        type: "Option<Null>"
      },
      unapplied_slashes: {
        description: "Returns a list of validators that lost a past session dispute and need to be slashed",
        params: [],
        type: "Vec<(SessionIndex, CandidateHash, PendingSlashes)>"
      }
    };
    PH_V6 = {
      minimum_backing_votes: {
        description: "Get the minimum number of backing votes for a parachain candidate. This is a staging method! Do not use on production runtimes!",
        params: [],
        type: "u32"
      }
    };
    PH_V7 = {
      async_backing_params: {
        description: "Returns candidate's acceptance limitations for asynchronous backing for a relay parent",
        params: [],
        type: "AsyncBackingParams"
      },
      para_backing_state: {
        description: "Returns the state of parachain backing for a given para",
        params: [
          {
            name: "paraId",
            type: "ParaId"
          }
        ],
        type: "Option<BackingState>"
      }
    };
    PH_V8 = {
      disabled_validators: {
        description: "Returns a list of all disabled validators at the given block",
        params: [],
        type: "ValidatorIndex"
      }
    };
    PH_V9 = {
      node_features: {
        description: "Get node features. This is a staging method! Do not use on production runtimes!",
        params: [],
        type: "NodeFeatures"
      }
    };
    PH_V10 = {
      approval_voting_params: {
        description: "Approval voting configuration parameters",
        params: [],
        type: "ApprovalVotingParams"
      }
    };
    runtime27 = {
      ParachainHost: [
        {
          methods: {
            ...PH_V1_TO_V2,
            ...PH_V2_TO_V3,
            ...PH_V3,
            ...PH_V4,
            ...PH_V5,
            ...PH_V6,
            ...PH_V7,
            ...PH_V8,
            ...PH_V9,
            ...PH_V10
          },
          version: 10
        },
        {
          methods: {
            ...PH_V1_TO_V2,
            ...PH_V2_TO_V3,
            ...PH_V3,
            ...PH_V4,
            ...PH_V5,
            ...PH_V6,
            ...PH_V7,
            ...PH_V8,
            ...PH_V9
          },
          version: 9
        },
        {
          methods: {
            ...PH_V1_TO_V2,
            ...PH_V2_TO_V3,
            ...PH_V3,
            ...PH_V4,
            ...PH_V5,
            ...PH_V6,
            ...PH_V7,
            ...PH_V8
          },
          version: 8
        },
        {
          methods: {
            ...PH_V1_TO_V2,
            ...PH_V2_TO_V3,
            ...PH_V3,
            ...PH_V4,
            ...PH_V5,
            ...PH_V6,
            ...PH_V7
          },
          version: 7
        },
        {
          methods: {
            ...PH_V1_TO_V2,
            ...PH_V2_TO_V3,
            ...PH_V3,
            ...PH_V4,
            ...PH_V5,
            ...PH_V6
          },
          version: 6
        },
        {
          methods: {
            ...PH_V1_TO_V2,
            ...PH_V2_TO_V3,
            ...PH_V3,
            ...PH_V4,
            ...PH_V5
          },
          version: 5
        },
        {
          methods: {
            ...PH_V1_TO_V2,
            ...PH_V2_TO_V3,
            ...PH_V3,
            ...PH_V4
          },
          version: 4
        },
        {
          methods: {
            ...PH_V1_TO_V2,
            ...PH_V2_TO_V3,
            ...PH_V3
          },
          version: 3
        },
        {
          methods: {
            ...PH_V1_TO_V2,
            ...PH_V2_TO_V3
          },
          version: 2
        },
        {
          methods: {
            session_info: {
              description: "Get the session info for the given session, if stored.",
              params: [
                {
                  name: "index",
                  type: "SessionIndex"
                }
              ],
              type: "Option<OldV1SessionInfo>"
            },
            ...PH_V1_TO_V2
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/parachains/slots.js
var SlotRange10, SlotRange, oldTypes, slots_default;
var init_slots = __esm({
  "node_modules/@polkadot/types/interfaces/parachains/slots.js"() {
    SlotRange10 = {
      _enum: ["ZeroZero", "ZeroOne", "ZeroTwo", "ZeroThree", "OneOne", "OneTwo", "OneThree", "TwoTwo", "TwoThree", "ThreeThree"]
    };
    SlotRange = {
      _enum: ["ZeroZero", "ZeroOne", "ZeroTwo", "ZeroThree", "ZeroFour", "ZeroFive", "ZeroSix", "ZeroSeven", "OneOne", "OneTwo", "OneThree", "OneFour", "OneFive", "OneSix", "OneSeven", "TwoTwo", "TwoThree", "TwoFour", "TwoFive", "TwoSix", "TwoSeven", "ThreeThree", "ThreeFour", "ThreeFive", "ThreeSix", "ThreeSeven", "FourFour", "FourFive", "FourSix", "FourSeven", "FiveFive", "FiveSix", "FiveSeven", "SixSix", "SixSeven", "SevenSeven"]
    };
    oldTypes = {
      Bidder: {
        _enum: {
          New: "NewBidder",
          Existing: "ParaId"
        }
      },
      IncomingParachain: {
        _enum: {
          Unset: "NewBidder",
          Fixed: "IncomingParachainFixed",
          Deploy: "IncomingParachainDeploy"
        }
      },
      IncomingParachainDeploy: {
        code: "ValidationCode",
        initialHeadData: "HeadData"
      },
      IncomingParachainFixed: {
        codeHash: "Hash",
        codeSize: "u32",
        initialHeadData: "HeadData"
      },
      NewBidder: {
        who: "AccountId",
        sub: "SubId"
      },
      SubId: "u32"
    };
    slots_default = {
      ...oldTypes,
      AuctionIndex: "u32",
      LeasePeriod: "BlockNumber",
      LeasePeriodOf: "BlockNumber",
      SlotRange10,
      SlotRange,
      WinningData10: `[WinningDataEntry; ${SlotRange10._enum.length}]`,
      WinningData: `[WinningDataEntry; ${SlotRange._enum.length}]`,
      WinningDataEntry: "Option<(AccountId, ParaId, BalanceOf)>",
      WinnersData10: "Vec<WinnersDataTuple10>",
      WinnersData: "Vec<WinnersDataTuple>",
      WinnersDataTuple10: "(AccountId, ParaId, BalanceOf, SlotRange10)",
      WinnersDataTuple: "(AccountId, ParaId, BalanceOf, SlotRange)"
    };
  }
});

// node_modules/@polkadot/types/interfaces/parachains/definitions.js
var proposeTypes, cumulusTypes, disputeTypes, definitions_default59;
var init_definitions59 = __esm({
  "node_modules/@polkadot/types/interfaces/parachains/definitions.js"() {
    init_hrmp();
    init_runtime27();
    init_slots();
    proposeTypes = {
      ParachainProposal: {
        proposer: "AccountId",
        genesisHead: "HeadData",
        validators: "Vec<ValidatorId>",
        name: "Bytes",
        balance: "Balance"
      },
      RegisteredParachainInfo: {
        validators: "Vec<ValidatorId>",
        proposer: "AccountId"
      }
    };
    cumulusTypes = {
      ServiceQuality: {
        _enum: ["Ordered", "Fast"]
      }
    };
    disputeTypes = {
      DisputeLocation: {
        _enum: ["Local", "Remote"]
      },
      DisputeResult: {
        _enum: ["Valid", "Invalid"]
      },
      DisputeState: {
        validatorsFor: "BitVec",
        validatorsAgainst: "BitVec",
        start: "BlockNumber",
        concludedAt: "Option<BlockNumber>"
      },
      DisputeStatement: {
        _enum: {
          Valid: "ValidDisputeStatementKind",
          Invalid: "InvalidDisputeStatementKind"
        }
      },
      DisputeStatementSet: {
        candidateHash: "CandidateHash",
        session: "SessionIndex",
        statements: "Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>"
      },
      ExecutorParam: {
        _enum: {
          Phantom: "Null",
          // index starts at 1... empty slot at 0
          MaxMemoryPages: "u32",
          StackLogicalMax: "u32",
          StackNativeMax: "u32",
          PrecheckingMaxMemory: "u64",
          PvfPrepTimeout: "(PvfPrepTimeoutKind, u64)",
          PvfExecTimeout: "(PvfExecTimeoutKind, u64)"
        }
      },
      ExecutorParamsHash: "Hash",
      ExecutorParams: "Vec<ExecutorParam>",
      ExplicitDisputeStatement: {
        valid: "bool",
        candidateHash: "CandidateHash",
        session: "SessionIndex"
      },
      InvalidDisputeStatementKind: {
        _enum: ["Explicit"]
      },
      MultiDisputeStatementSet: "Vec<DisputeStatementSet>",
      PvfExecTimeoutKind: {
        _enum: ["Backing", "Approval"]
      },
      PvfPrepTimeoutKind: {
        _enum: ["Precheck", "Lenient"]
      },
      ValidDisputeStatementKind: {
        _enum: {
          Explicit: "Null",
          BackingSeconded: "Hash",
          BackingValid: "Hash",
          ApprovalChecking: "Null"
        }
      }
    };
    definitions_default59 = {
      rpc: {},
      runtime: runtime27,
      types: {
        ...cumulusTypes,
        ...disputeTypes,
        ...hrmp_default,
        ...proposeTypes,
        ...slots_default,
        AbridgedCandidateReceipt: {
          parachainIndex: "ParaId",
          relayParent: "Hash",
          headData: "HeadData",
          collator: "CollatorId",
          signature: "CollatorSignature",
          povBlockHash: "Hash",
          commitments: "CandidateCommitments"
        },
        AbridgedHostConfiguration: {
          maxCodeSize: "u32",
          maxHeadDataSize: "u32",
          maxUpwardQueueCount: "u32",
          maxUpwardQueueSize: "u32",
          maxUpwardMessageSize: "u32",
          maxUpwardMessageNumPerCandidate: "u32",
          hrmpMaxMessageNumPerCandidate: "u32",
          validationUpgradeFrequency: "BlockNumber",
          validationUpgradeDelay: "BlockNumber"
        },
        AbridgedHrmpChannel: {
          maxCapacity: "u32",
          maxTotalSize: "u32",
          maxMessageSize: "u32",
          msgCount: "u32",
          totalSize: "u32",
          mqcHead: "Option<Hash>"
        },
        ApprovalVotingParams: {
          maxApprovalCoalesceCount: "u32"
        },
        AssignmentId: "AccountId",
        AssignmentKind: {
          _enum: {
            Parachain: "Null",
            Parathread: "(CollatorId, u32)"
          }
        },
        AsyncBackingParams: {
          maxCandidateDepth: "u32",
          allowedAncestryLen: "u32"
        },
        AttestedCandidate: {
          candidate: "AbridgedCandidateReceipt",
          validityVotes: "Vec<ValidityAttestation>",
          validatorIndices: "BitVec"
        },
        AuthorityDiscoveryId: "AccountId",
        AvailabilityBitfield: "BitVec",
        AvailabilityBitfieldRecord: {
          bitfield: "AvailabilityBitfield",
          submittedTt: "BlockNumber"
        },
        BackedCandidate: {
          candidate: "CommittedCandidateReceipt",
          validityVotes: "Vec<ValidityAttestation>",
          validatorIndices: "BitVec"
        },
        BackingState: {
          constraints: "Constraints",
          pendingAvailability: "Vec<CandidatePendingAvailability>"
        },
        BufferedSessionChange: {
          applyAt: "BlockNumber",
          validators: "Vec<ValidatorId>",
          queued: "Vec<ValidatorId>",
          sessionIndex: "SessionIndex"
        },
        CandidateCommitments: {
          upwardMessages: "Vec<UpwardMessage>",
          horizontalMessages: "Vec<OutboundHrmpMessage>",
          newValidationCode: "Option<ValidationCode>",
          headData: "HeadData",
          processedDownwardMessages: "u32",
          hrmpWatermark: "BlockNumber"
        },
        CandidateDescriptor: {
          paraId: "ParaId",
          relayParent: "RelayChainHash",
          collatorId: "CollatorId",
          persistedValidationDataHash: "Hash",
          povHash: "Hash",
          erasureRoot: "Hash",
          signature: "CollatorSignature",
          paraHead: "Hash",
          validationCodeHash: "ValidationCodeHash"
        },
        CandidateEvent: {
          _enum: {
            CandidateBacked: "(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",
            CandidateIncluded: "(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",
            CandidateTimedOut: "(CandidateReceipt, HeadData, CoreIndex)"
          }
        },
        CandidateHash: "Hash",
        CandidateInfo: {
          who: "AccountId",
          deposit: "Balance"
        },
        CandidatePendingAvailability: {
          core: "CoreIndex",
          hash: "CandidateHash",
          descriptor: "CandidateDescriptor",
          availabilityVotes: "BitVec",
          backers: "BitVec",
          relayParentNumber: "BlockNumber",
          backedInNumber: "BlockNumber",
          backingGroup: "GroupIndex"
        },
        CandidateReceipt: {
          descriptor: "CandidateDescriptor",
          commitmentsHash: "Hash"
        },
        GlobalValidationData: {
          maxCodeSize: "u32",
          maxHeadDataSize: "u32",
          blockNumber: "BlockNumber"
        },
        CollatorId: "H256",
        CollatorSignature: "Signature",
        CommittedCandidateReceipt: {
          descriptor: "CandidateDescriptor",
          commitments: "CandidateCommitments"
        },
        Constraints: {
          minRelayParentNumber: "BlockNumber",
          maxPovSize: "u32",
          maxCodeSize: "u32",
          umpRemaining: "u32",
          umpRemainingBytes: "u32",
          maxUmpNumPerCandidate: "u32",
          dmpRemainingMessages: "Vec<BlockNumber>",
          hrmpInbound: "InboundHrmpLimitations",
          hrmpChannelsOut: "HashMap<ParaId, OutboundHrmpChannelLimitations>",
          maxHrmpNumPerCandidate: "u32",
          requiredParent: "HeadData",
          validationCodeHash: "ValidationCodeHash",
          upgradeRestriction: "Option<UpgradeRestriction>",
          futureValidationCode: "Option<(BlockNumber, ValidationCodeHash)>"
        },
        CoreAssignment: {
          core: "CoreIndex",
          paraId: "ParaId",
          kind: "AssignmentKind",
          groupIdx: "GroupIndex"
        },
        CoreIndex: "u32",
        CoreOccupied: {
          _enum: {
            Parathread: "ParathreadEntry",
            Parachain: "Null"
          }
        },
        CoreState: {
          _enum: {
            Occupied: "OccupiedCore",
            Scheduled: "ScheduledCore",
            Free: "Null"
          }
        },
        DisputeProof: {
          timeSlot: "DisputesTimeSlot",
          kind: "SlashingOffenceKind",
          validatorIndex: "ValidatorIndex",
          validatorId: "ValidatorId"
        },
        DisputesTimeSlot: {
          sessionIndex: "SessionIndex",
          candidateHash: "CandidateHash"
        },
        DoubleVoteReport: {
          identity: "ValidatorId",
          first: "(Statement, ValidatorSignature)",
          second: "(Statement, ValidatorSignature)",
          proof: "MembershipProof",
          signingContext: "SigningContext"
        },
        DownwardMessage: "Bytes",
        GroupIndex: "u32",
        GroupRotationInfo: {
          sessionStartBlock: "BlockNumber",
          groupRotationFrequency: "BlockNumber",
          now: "BlockNumber"
        },
        GlobalValidationSchedule: {
          maxCodeSize: "u32",
          maxHeadDataSize: "u32",
          blockNumber: "BlockNumber"
        },
        HeadData: "Bytes",
        HostConfiguration: {
          maxCodeSize: "u32",
          maxHeadDataSize: "u32",
          maxUpwardQueueCount: "u32",
          maxUpwardQueueSize: "u32",
          maxUpwardMessageSize: "u32",
          maxUpwardMessageNumPerCandidate: "u32",
          hrmpMaxMessageNumPerCandidate: "u32",
          validationUpgradeFrequency: "BlockNumber",
          validationUpgradeDelay: "BlockNumber",
          maxPovSize: "u32",
          maxDownwardMessageSize: "u32",
          preferredDispatchableUpwardMessagesStepWeight: "Weight",
          hrmpMaxParachainOutboundChannels: "u32",
          hrmpMaxParathreadOutboundChannels: "u32",
          hrmpOpenRequestTtl: "u32",
          hrmpSenderDeposit: "Balance",
          hrmpRecipientDeposit: "Balance",
          hrmpChannelMaxCapacity: "u32",
          hrmpChannelMaxTotalSize: "u32",
          hrmpMaxParachainInboundChannels: "u32",
          hrmpMaxParathreadInboundChannels: "u32",
          hrmpChannelMaxMessageSize: "u32",
          codeRetentionPeriod: "BlockNumber",
          parathreadCores: "u32",
          parathreadRetries: "u32",
          groupRotationFrequency: "BlockNumber",
          chainAvailabilityPeriod: "BlockNumber",
          threadAvailabilityPeriod: "BlockNumber",
          schedulingLookahead: "u32",
          maxValidatorsPerCore: "Option<u32>",
          maxValidators: "Option<u32>",
          disputePeriod: "SessionIndex",
          disputePostConclusionAcceptancePeriod: "BlockNumber",
          disputeMaxSpamSlots: "u32",
          disputeConclusionByTimeOutPeriod: "BlockNumber",
          noShowSlots: "u32",
          nDelayTranches: "u32",
          zerothDelayTrancheWidth: "u32",
          neededApprovals: "u32",
          relayVrfModuloSamples: "u32"
        },
        InboundDownwardMessage: {
          pubSentAt: "BlockNumber",
          pubMsg: "DownwardMessage"
        },
        InboundHrmpMessage: {
          sentAt: "BlockNumber",
          data: "Bytes"
        },
        InboundHrmpLimitations: {
          validWatermarks: "Vec<BlockNumber>"
        },
        InboundHrmpMessages: "Vec<InboundHrmpMessage>",
        LocalValidationData: {
          parentHead: "HeadData",
          balance: "Balance",
          codeUpgradeAllowed: "Option<BlockNumber>"
        },
        MessageIngestionType: {
          downwardMessages: "Vec<InboundDownwardMessage>",
          horizontalMessages: "BTreeMap<ParaId, InboundHrmpMessages>"
        },
        MessageQueueChain: "RelayChainHash",
        NodeFeatures: "BitVec",
        OccupiedCore: {
          nextUpOnAvailable: "Option<ScheduledCore>",
          occupiedSince: "BlockNumber",
          timeOutAt: "BlockNumber",
          nextUpOnTimeOut: "Option<ScheduledCore>",
          availability: "BitVec",
          groupResponsible: "GroupIndex",
          candidateHash: "CandidateHash",
          candidateDescriptor: "CandidateDescriptor"
        },
        OccupiedCoreAssumption: {
          _enum: ["Included,", "TimedOut", "Free"]
        },
        OutboundHrmpChannelLimitations: {
          bytesRemaining: "u32",
          messagesRemaining: "u32"
        },
        OutboundHrmpMessage: {
          recipient: "u32",
          data: "Bytes"
        },
        PendingSlashes: {
          _alias: {
            slashKeys: "keys"
          },
          slashKeys: "BTreeMap<ValidatorIndex, ValidatorId>",
          kind: "SlashingOffenceKind"
        },
        ParachainDispatchOrigin: {
          _enum: ["Signed", "Parachain", "Root"]
        },
        ParachainInherentData: {
          validationData: "PersistedValidationData",
          relayChainState: "StorageProof",
          downwardMessages: "Vec<InboundDownwardMessage>",
          horizontalMessages: "BTreeMap<ParaId, VecInboundHrmpMessage>"
        },
        ParachainsInherentData: {
          bitfields: "SignedAvailabilityBitfields",
          backedCandidates: "Vec<BackedCandidate>",
          disputes: "MultiDisputeStatementSet",
          parentHeader: "Header"
        },
        ParaGenesisArgs: {
          genesisHead: "Bytes",
          validationCode: "Bytes",
          parachain: "bool"
        },
        ParaId: "u32",
        ParaInfo: {
          manager: "AccountId",
          deposit: "Balance",
          locked: "bool"
        },
        ParaLifecycle: {
          _enum: ["Onboarding", "Parathread", "Parachain", "UpgradingToParachain", "DowngradingToParathread", "OutgoingParathread", "OutgoingParachain"]
        },
        ParaPastCodeMeta: {
          upgradeTimes: "Vec<ReplacementTimes>",
          lastPruned: "Option<BlockNumber>"
        },
        ParaScheduling: {
          _enum: ["Always", "Dynamic"]
        },
        ParathreadClaim: "(ParaId, CollatorId)",
        ParathreadClaimQueue: {
          queue: "Vec<QueuedParathread>",
          nextCoreOffset: "u32"
        },
        ParathreadEntry: {
          claim: "ParathreadClaim",
          retries: "u32"
        },
        ParaValidatorIndex: "u32",
        PersistedValidationData: {
          parentHead: "HeadData",
          relayParentNumber: "RelayChainBlockNumber",
          relayParentStorageRoot: "Hash",
          maxPovSize: "u32"
        },
        PvfCheckStatement: {
          accept: "bool",
          subject: "ValidationCodeHash",
          sessionIndex: "SessionIndex",
          validatorIndex: "ParaValidatorIndex"
        },
        QueuedParathread: {
          claim: "ParathreadEntry",
          coreOffset: "u32"
        },
        RelayBlockNumber: "u32",
        RelayChainBlockNumber: "RelayBlockNumber",
        RelayHash: "Hash",
        RelayChainHash: "RelayHash",
        Remark: "[u8; 32]",
        ReplacementTimes: {
          expectedAt: "BlockNumber",
          activatedAt: "BlockNumber"
        },
        Retriable: {
          _enum: {
            Never: "Null",
            WithRetries: "u32"
          }
        },
        ScheduledCore: {
          paraId: "ParaId",
          collator: "Option<CollatorId>"
        },
        Scheduling: {
          _enum: ["Always", "Dynamic"]
        },
        ScrapedOnChainVotes: {
          session: "SessionIndex",
          backingValidatorsPerCandidate: "Vec<(CandidateReceipt, Vec<(ParaValidatorIndex, ValidityAttestation)>)>",
          disputes: "MultiDisputeStatementSet"
        },
        SessionInfo: {
          activeValidatorIndices: "Vec<ParaValidatorIndex>",
          randomSeed: "[u8; 32]",
          disputePeriod: "SessionIndex",
          validators: "Vec<ValidatorId>",
          discoveryKeys: "Vec<AuthorityDiscoveryId>",
          assignmentKeys: "Vec<AssignmentId>",
          validatorGroups: "Vec<Vec<ValidatorIndex>>",
          nCores: "u32",
          zerothDelayTrancheWidth: "u32",
          relayVrfModuloSamples: "u32",
          nDelayTranches: "u32",
          noShowSlots: "u32",
          neededApprovals: "u32"
        },
        OldV1SessionInfo: {
          validators: "Vec<ValidatorId>",
          discoveryKeys: "Vec<AuthorityDiscoveryId>",
          assignmentKeys: "Vec<AssignmentId>",
          validatorGroups: "Vec<Vec<ParaValidatorIndex>>",
          nCores: "u32",
          zerothDelayTrancheWidth: "u32",
          relayVrfModuloSamples: "u32",
          nDelayTranches: "u32",
          noShowSlots: "u32",
          neededApprovals: "u32"
        },
        SessionInfoValidatorGroup: "Vec<ParaValidatorIndex>",
        SignedAvailabilityBitfield: {
          payload: "BitVec",
          validatorIndex: "ParaValidatorIndex",
          signature: "ValidatorSignature"
        },
        SignedAvailabilityBitfields: "Vec<SignedAvailabilityBitfield>",
        SigningContext: {
          sessionIndex: "SessionIndex",
          parentHash: "Hash"
        },
        SlashingOffenceKind: {
          _enum: ["ForInvalid", "AgainstValid"]
        },
        Statement: {
          _enum: {
            Never: "Null",
            // starts at 1
            Candidate: "Hash",
            Valid: "Hash",
            Invalid: "Hash"
          }
        },
        TransientValidationData: {
          maxCodeSize: "u32",
          maxHeadDataSize: "u32",
          balance: "Balance",
          codeUpgradeAllowed: "Option<BlockNumber>",
          dmqLength: "u32"
        },
        UpgradeGoAhead: {
          _enum: ["Abort", "GoAhead"]
        },
        UpgradeRestriction: {
          _enum: ["Present"]
        },
        UpwardMessage: "Bytes",
        ValidationFunctionParams: {
          maxCodeSize: "u32",
          relayChainHeight: "RelayChainBlockNumber",
          codeUpgradeAllowed: "Option<RelayChainBlockNumber>"
        },
        ValidationCode: "Bytes",
        ValidationCodeHash: "Hash",
        ValidationData: {
          persisted: "PersistedValidationData",
          transient: "TransientValidationData"
        },
        ValidationDataType: {
          validationData: "ValidationData",
          relayChainState: "Vec<Bytes>"
        },
        ValidatorSignature: "Signature",
        ValidityAttestation: {
          _enum: {
            Never: "Null",
            // starts at 1
            Implicit: "ValidatorSignature",
            Explicit: "ValidatorSignature"
          }
        },
        MessagingStateSnapshot: {
          relayDispatchQueueSize: "(u32, u32)",
          egressChannels: "Vec<MessagingStateSnapshotEgressEntry>"
        },
        MessagingStateSnapshotEgressEntry: "(ParaId, AbridgedHrmpChannel)",
        SystemInherentData: "ParachainInherentData",
        VecInboundHrmpMessage: "Vec<InboundHrmpMessage>"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/poll/definitions.js
var definitions_default60;
var init_definitions60 = __esm({
  "node_modules/@polkadot/types/interfaces/poll/definitions.js"() {
    definitions_default60 = {
      rpc: {},
      types: {
        Approvals: "[bool; 4]"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/purchase/definitions.js
var definitions_default61;
var init_definitions61 = __esm({
  "node_modules/@polkadot/types/interfaces/purchase/definitions.js"() {
    definitions_default61 = {
      rpc: {},
      types: {
        AccountStatus: {
          validity: "AccountValidity",
          freeBalance: "Balance",
          lockedBalance: "Balance",
          signature: "Vec<u8>",
          vat: "Permill"
        },
        AccountValidity: {
          _enum: ["Invalid", "Initiated", "Pending", "ValidLow", "ValidHigh", "Completed"]
        }
      }
    };
  }
});

// node_modules/@polkadot/types-create/packageDetect.js
var init_packageDetect11 = __esm({
  "node_modules/@polkadot/types-create/packageDetect.js"() {
    init_packageInfo25();
    init_util();
    init_packageInfo26();
    detectPackage(packageInfo26, null, [packageInfo25]);
  }
});

// node_modules/@polkadot/types-codec/types/registry.js
var init_registry = __esm({
  "node_modules/@polkadot/types-codec/types/registry.js"() {
  }
});

// node_modules/@polkadot/types-create/types/augmentRegistry.js
var init_augmentRegistry = __esm({
  "node_modules/@polkadot/types-create/types/augmentRegistry.js"() {
    init_registry();
  }
});

// node_modules/@polkadot/types-create/types/lookup.js
var init_lookup = __esm({
  "node_modules/@polkadot/types-create/types/lookup.js"() {
  }
});

// node_modules/@polkadot/types-create/types/types.js
var TypeDefInfo;
var init_types2 = __esm({
  "node_modules/@polkadot/types-create/types/types.js"() {
    (function(TypeDefInfo2) {
      TypeDefInfo2[TypeDefInfo2["BTreeMap"] = 0] = "BTreeMap";
      TypeDefInfo2[TypeDefInfo2["BTreeSet"] = 1] = "BTreeSet";
      TypeDefInfo2[TypeDefInfo2["Compact"] = 2] = "Compact";
      TypeDefInfo2[TypeDefInfo2["DoNotConstruct"] = 3] = "DoNotConstruct";
      TypeDefInfo2[TypeDefInfo2["Enum"] = 4] = "Enum";
      TypeDefInfo2[TypeDefInfo2["HashMap"] = 5] = "HashMap";
      TypeDefInfo2[TypeDefInfo2["Int"] = 6] = "Int";
      TypeDefInfo2[TypeDefInfo2["Linkage"] = 7] = "Linkage";
      TypeDefInfo2[TypeDefInfo2["Null"] = 8] = "Null";
      TypeDefInfo2[TypeDefInfo2["Option"] = 9] = "Option";
      TypeDefInfo2[TypeDefInfo2["Plain"] = 10] = "Plain";
      TypeDefInfo2[TypeDefInfo2["Range"] = 11] = "Range";
      TypeDefInfo2[TypeDefInfo2["RangeInclusive"] = 12] = "RangeInclusive";
      TypeDefInfo2[TypeDefInfo2["Result"] = 13] = "Result";
      TypeDefInfo2[TypeDefInfo2["Set"] = 14] = "Set";
      TypeDefInfo2[TypeDefInfo2["Si"] = 15] = "Si";
      TypeDefInfo2[TypeDefInfo2["Struct"] = 16] = "Struct";
      TypeDefInfo2[TypeDefInfo2["Tuple"] = 17] = "Tuple";
      TypeDefInfo2[TypeDefInfo2["UInt"] = 18] = "UInt";
      TypeDefInfo2[TypeDefInfo2["Vec"] = 19] = "Vec";
      TypeDefInfo2[TypeDefInfo2["VecFixed"] = 20] = "VecFixed";
      TypeDefInfo2[TypeDefInfo2["WrapperKeepOpaque"] = 21] = "WrapperKeepOpaque";
      TypeDefInfo2[TypeDefInfo2["WrapperOpaque"] = 22] = "WrapperOpaque";
    })(TypeDefInfo || (TypeDefInfo = {}));
  }
});

// node_modules/@polkadot/types-create/types/index.js
var init_types3 = __esm({
  "node_modules/@polkadot/types-create/types/index.js"() {
    init_augmentRegistry();
    init_lookup();
    init_types2();
  }
});

// node_modules/@polkadot/types-codec/packageDetect.js
var init_packageDetect12 = __esm({
  "node_modules/@polkadot/types-codec/packageDetect.js"() {
    init_util();
    init_packageInfo25();
    detectPackage(packageInfo25, null, []);
  }
});

// node_modules/@polkadot/types-codec/utils/util.js
function hasEq(o) {
  return isFunction(o.eq);
}
var init_util3 = __esm({
  "node_modules/@polkadot/types-codec/utils/util.js"() {
    init_util();
  }
});

// node_modules/@polkadot/types-codec/utils/compareArray.js
function compareArray(a, b2) {
  if (Array.isArray(b2)) {
    return a.length === b2.length && isUndefined(a.find((v3, index) => hasEq(v3) ? !v3.eq(b2[index]) : v3 !== b2[index]));
  }
  return false;
}
var init_compareArray = __esm({
  "node_modules/@polkadot/types-codec/utils/compareArray.js"() {
    init_util();
    init_util3();
  }
});

// node_modules/@polkadot/types-codec/abstract/Array.js
var AbstractArray;
var init_Array = __esm({
  "node_modules/@polkadot/types-codec/abstract/Array.js"() {
    init_util();
    init_compareArray();
    AbstractArray = class extends Array {
      registry;
      createdAtHash;
      initialU8aLength;
      isStorageFallback;
      /**
       * @description This ensures that operators such as clice, filter, map, etc. return
       * new Array instances (without this we need to apply overrides)
       */
      static get [Symbol.species]() {
        return Array;
      }
      constructor(registry, length) {
        super(length);
        this.registry = registry;
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        const count2 = this.length;
        let total = compactToU8a(count2).length;
        for (let i = 0; i < count2; i++) {
          total += this[i].encodedLength;
        }
        return total;
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description Checks if the value is an empty value
       */
      get isEmpty() {
        return this.length === 0;
      }
      /**
       * @description The length of the value
       */
      get length() {
        return super.length;
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        return compareArray(this, other);
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return {
          inner: this.inspectInner(),
          outer: [compactToU8a(this.length)]
        };
      }
      /**
       * @internal
       * @description Internal per-item inspection of internal values
       */
      inspectInner() {
        const count2 = this.length;
        const inner = new Array(count2);
        for (let i = 0; i < count2; i++) {
          inner[i] = this[i].inspect();
        }
        return inner;
      }
      /**
       * @description Converts the Object to an standard JavaScript Array
       */
      toArray() {
        return Array.from(this);
      }
      /**
       * @description Returns a hex string representation of the value
       */
      toHex() {
        return u8aToHex(this.toU8a());
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExtended, disableAscii) {
        const count2 = this.length;
        const result = new Array(count2);
        for (let i = 0; i < count2; i++) {
          result[i] = this[i] && this[i].toHuman(isExtended, disableAscii);
        }
        return result;
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        const count2 = this.length;
        const result = new Array(count2);
        for (let i = 0; i < count2; i++) {
          result[i] = this[i] && this[i].toJSON();
        }
        return result;
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive(disableAscii) {
        const count2 = this.length;
        const result = new Array(count2);
        for (let i = 0; i < count2; i++) {
          result[i] = this[i] && this[i].toPrimitive(disableAscii);
        }
        return result;
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        const count2 = this.length;
        const result = new Array(count2);
        for (let i = 0; i < count2; i++) {
          result[i] = this[i].toString();
        }
        return `[${result.join(", ")}]`;
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        const encoded = this.toU8aInner();
        return isBare ? u8aConcatStrict(encoded) : u8aConcatStrict([compactToU8a(this.length), ...encoded]);
      }
      /**
       * @internal
       * @description Internal per-item SCALE encoding of contained values
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8aInner(isBare) {
        const count2 = this.length;
        const encoded = new Array(count2);
        for (let i = 0; i < count2; i++) {
          encoded[i] = this[i].toU8a(isBare);
        }
        return encoded;
      }
    };
  }
});

// node_modules/@polkadot/types-codec/abstract/Base.js
var AbstractBase;
var init_Base = __esm({
  "node_modules/@polkadot/types-codec/abstract/Base.js"() {
    AbstractBase = class {
      registry;
      createdAtHash;
      initialU8aLength;
      isStorageFallback;
      __internal__raw;
      constructor(registry, value, initialU8aLength) {
        this.initialU8aLength = initialU8aLength;
        this.__internal__raw = value;
        this.registry = registry;
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        return this.toU8a().length;
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description returns the inner (wrapped value)
       */
      get inner() {
        return this.__internal__raw;
      }
      /**
       * @description Checks if the value is an empty value
       */
      get isEmpty() {
        return this.__internal__raw.isEmpty;
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        return this.__internal__raw.eq(other);
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return this.__internal__raw.inspect();
      }
      /**
       * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
       */
      toHex(isLe) {
        return this.__internal__raw.toHex(isLe);
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExtended, disableAscii) {
        return this.__internal__raw.toHuman(isExtended, disableAscii);
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return this.__internal__raw.toJSON();
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive(disableAscii) {
        return this.__internal__raw.toPrimitive(disableAscii);
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return this.__internal__raw.toString();
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        return this.__internal__raw.toU8a(isBare);
      }
      /**
       * @description Returns the inner wrapped value (equivalent to valueOf)
       */
      unwrap() {
        return this.__internal__raw;
      }
      /**
       * @description Returns the inner wrapped value
       */
      valueOf() {
        return this.__internal__raw;
      }
    };
  }
});

// node_modules/@polkadot/types-codec/abstract/Int.js
function isToBn2(value) {
  return isFunction(value.toBn);
}
function toPercentage(value, divisor) {
  return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
}
function decodeAbstractInt(value, isNegative) {
  if (isNumber(value)) {
    if (!Number.isInteger(value) || value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER) {
      throw new Error("Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1");
    }
    return value;
  } else if (isString(value)) {
    if (isHex(value, -1, true)) {
      return hexToBn(value, { isLe: false, isNegative }).toString();
    }
    if (value.includes(".") || value.includes(",") || value.includes("e")) {
      throw new Error("String should not contain decimal points or scientific notation");
    }
    return value;
  } else if (isBn(value) || isBigInt(value)) {
    return value.toString();
  } else if (isObject(value)) {
    if (isToBn2(value)) {
      return value.toBn().toString();
    }
    const keys2 = Object.keys(value);
    if (keys2.length !== 1) {
      throw new Error("Unable to construct number from multi-key object");
    }
    return decodeAbstractInt(value[keys2[0]], isNegative);
  } else if (!value) {
    return 0;
  }
  throw new Error(`Unable to create BN from unknown type ${typeof value}`);
}
var DEFAULT_UINT_BITS, MAX_NUMBER_BITS, MUL_P, FORMATTERS, AbstractInt;
var init_Int = __esm({
  "node_modules/@polkadot/types-codec/abstract/Int.js"() {
    init_util();
    DEFAULT_UINT_BITS = 64;
    MAX_NUMBER_BITS = 52;
    MUL_P = new import_bn.default(1e4);
    FORMATTERS = [
      ["Perquintill", BN_QUINTILL],
      ["Perbill", BN_BILLION],
      ["Permill", BN_MILLION],
      ["Percent", BN_HUNDRED]
    ];
    AbstractInt = class extends import_bn.default {
      registry;
      encodedLength;
      isUnsigned;
      createdAtHash;
      initialU8aLength;
      isStorageFallback;
      __internal__bitLength;
      constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
        super(
          // shortcut isU8a as used in SCALE decoding
          isU8a(value) ? bitLength <= 48 ? u8aToNumber(value.subarray(0, bitLength / 8), { isNegative: isSigned }) : u8aToBn(value.subarray(0, bitLength / 8), { isLe: true, isNegative: isSigned }).toString() : decodeAbstractInt(value, isSigned)
        );
        this.registry = registry;
        this.__internal__bitLength = bitLength;
        this.encodedLength = this.__internal__bitLength / 8;
        this.initialU8aLength = this.__internal__bitLength / 8;
        this.isUnsigned = !isSigned;
        const isNegative = this.isNeg();
        const maxBits = bitLength - (isSigned && !isNegative ? 1 : 0);
        if (isNegative && !isSigned) {
          throw new Error(`${this.toRawType()}: Negative number passed to unsigned type`);
        } else if (super.bitLength() > maxBits) {
          throw new Error(`${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
        }
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description Checks if the value is a zero value (align elsewhere)
       */
      get isEmpty() {
        return this.isZero();
      }
      /**
       * @description Returns the number of bits in the value
       */
      bitLength() {
        return this.__internal__bitLength;
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      eq(other) {
        return super.eq(isHex(other) ? hexToBn(other.toString(), { isLe: false, isNegative: !this.isUnsigned }) : bnToBn(other));
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return {
          outer: [this.toU8a()]
        };
      }
      /**
       * @description True if this value is the max of the type
       */
      isMax() {
        const u8a = this.toU8a().filter((b2) => b2 === 255);
        return u8a.length === this.__internal__bitLength / 8;
      }
      /**
       * @description Returns a BigInt representation of the number
       */
      toBigInt() {
        return BigInt(this.toString());
      }
      /**
       * @description Returns the BN representation of the number. (Compatibility)
       */
      toBn() {
        return this;
      }
      /**
       * @description Returns a hex string representation of the value
       */
      toHex(isLe = false) {
        return bnToHex(this, {
          bitLength: this.bitLength(),
          isLe,
          isNegative: !this.isUnsigned
        });
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(_isExpanded) {
        const rawType = this.toRawType();
        if (rawType === "Balance") {
          return this.isMax() ? "everything" : formatBalance(this, { decimals: this.registry.chainDecimals[0], withSi: true, withUnit: this.registry.chainTokens[0] });
        }
        const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
        return divisor ? toPercentage(this, divisor) : formatNumber(this);
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON(onlyHex = false) {
        return onlyHex || this.__internal__bitLength > 128 || super.bitLength() > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();
      }
      /**
       * @description Returns the value in a primitive form, either number when <= 52 bits, or string otherwise
       */
      toPrimitive() {
        return super.bitLength() > MAX_NUMBER_BITS ? this.toString() : this.toNumber();
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return this instanceof this.registry.createClassUnsafe("Balance") ? "Balance" : `${this.isUnsigned ? "u" : "i"}${this.bitLength()}`;
      }
      /**
       * @description Returns the string representation of the value
       * @param base The base to use for the conversion
       */
      toString(base) {
        return super.toString(base);
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       */
      toU8a(_isBare) {
        return bnToU8a(this, {
          bitLength: this.bitLength(),
          isLe: true,
          isNegative: !this.isUnsigned
        });
      }
    };
  }
});

// node_modules/@polkadot/types-codec/abstract/index.js
var init_abstract = __esm({
  "node_modules/@polkadot/types-codec/abstract/index.js"() {
    init_Array();
    init_Base();
    init_Int();
  }
});

// node_modules/@polkadot/types-codec/utils/compareMap.js
function hasMismatch(a, b2) {
  return isUndefined(a) || (hasEq(a) ? !a.eq(b2) : a !== b2);
}
function notEntry(value) {
  return !Array.isArray(value) || value.length !== 2;
}
function compareMapArray(a, b2) {
  return a.size === b2.length && !b2.some((e) => notEntry(e) || hasMismatch(a.get(e[0]), e[1]));
}
function compareMap(a, b2) {
  if (Array.isArray(b2)) {
    return compareMapArray(a, b2);
  } else if (b2 instanceof Map) {
    return compareMapArray(a, [...b2.entries()]);
  } else if (isObject(b2)) {
    return compareMapArray(a, Object.entries(b2));
  }
  return false;
}
var init_compareMap = __esm({
  "node_modules/@polkadot/types-codec/utils/compareMap.js"() {
    init_util();
    init_util3();
  }
});

// node_modules/@polkadot/types-codec/utils/compareSet.js
function compareSetArray(a, b2) {
  return a.size === b2.length && !b2.some((e) => !a.has(e));
}
function compareSet(a, b2) {
  if (Array.isArray(b2)) {
    return compareSetArray(a, b2);
  } else if (b2 instanceof Set) {
    return compareSetArray(a, [...b2.values()]);
  } else if (isObject(b2)) {
    return compareSetArray(a, Object.values(b2));
  }
  return false;
}
var init_compareSet = __esm({
  "node_modules/@polkadot/types-codec/utils/compareSet.js"() {
    init_util();
  }
});

// node_modules/@polkadot/types-codec/utils/decodeU8a.js
function formatFailure(registry, fn, _result, { message }, u8a, i, count2, Type2, key) {
  let type = "";
  try {
    type = `: ${new Type2(registry).toRawType()}`;
  } catch {
  }
  return `${fn}: failed at ${u8aToHex(u8a.subarray(0, 16))}…${key ? ` on ${key}` : ""} (index ${i + 1}/${count2})${type}:: ${message}`;
}
function decodeU8a(registry, result, u8a, [Types, keys2]) {
  const count2 = result.length;
  let offset = 0;
  let i = 0;
  try {
    while (i < count2) {
      const value = new Types[i](registry, u8a.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = value;
      i++;
    }
  } catch (error) {
    throw new Error(formatFailure(registry, "decodeU8a", result, error, u8a.subarray(offset), i, count2, Types[i], keys2[i]));
  }
  return [result, offset];
}
function decodeU8aStruct(registry, result, u8a, [Types, keys2]) {
  const count2 = result.length;
  let offset = 0;
  let i = 0;
  try {
    while (i < count2) {
      const value = new Types[i](registry, u8a.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = [keys2[i], value];
      i++;
    }
  } catch (error) {
    throw new Error(formatFailure(registry, "decodeU8aStruct", result, error, u8a.subarray(offset), i, count2, Types[i], keys2[i]));
  }
  return [result, offset];
}
function decodeU8aVec(registry, result, u8a, startAt, Type2) {
  const count2 = result.length;
  let offset = startAt;
  let i = 0;
  try {
    while (i < count2) {
      const value = new Type2(registry, u8a.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = value;
      i++;
    }
  } catch (error) {
    throw new Error(formatFailure(registry, "decodeU8aVec", result, error, u8a.subarray(offset), i, count2, Type2));
  }
  return [offset, offset - startAt];
}
var init_decodeU8a = __esm({
  "node_modules/@polkadot/types-codec/utils/decodeU8a.js"() {
    init_util();
  }
});

// node_modules/@polkadot/types-codec/utils/sanitize.js
function trim() {
  return (value) => value.trim();
}
function findClosing(value, start) {
  let depth = 0;
  for (let i = start, count2 = value.length; i < count2; i++) {
    if (value[i] === ">") {
      if (!depth) {
        return i;
      }
      depth--;
    } else if (value[i] === "<") {
      depth++;
    }
  }
  throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
}
function alias(src, dest, withChecks = true) {
  const from2 = new RegExp(`(^${src}|${BOX_PRECEDING.map((box) => `\\${box}${src}`).join("|")})`, "g");
  const to = (src2) => {
    from2.lastIndex = 0;
    return withChecks && BOX_PRECEDING.includes(src2[0]) ? `${src2[0]}${dest}` : dest;
  };
  return (value) => value.replace(from2, to);
}
function cleanupCompact() {
  return (value) => {
    if (value.includes(" as HasCompact")) {
      for (let i = 0, count2 = value.length; i < count2; i++) {
        if (value[i] === "<") {
          const end = findClosing(value, i + 1) - 14;
          if (value.substring(end, end + 14) === " as HasCompact") {
            value = `Compact<${value.substring(i + 1, end)}>`;
          }
        }
      }
    }
    return value;
  };
}
function flattenSingleTuple() {
  const from1 = /,\)/g;
  const from2 = /\(([^,]+)\)/;
  return (value) => {
    from1.lastIndex = 0;
    return value.replace(from1, ")").replace(from2, "$1");
  };
}
function replaceTagWith(value, matcher, replacer2) {
  let index = -1;
  while (true) {
    index = value.indexOf(matcher, index + 1);
    if (index === -1) {
      return value;
    }
    const start = index + matcher.length;
    const end = findClosing(value, start);
    value = `${value.substring(0, index)}${replacer2(value.substring(start, end))}${value.substring(end + 1)}`;
  }
}
function removeExtensions(type, isSized) {
  return (value) => {
    for (let i = 0, count2 = BOUNDED.length; i < count2; i++) {
      const tag = BOUNDED[i];
      value = replaceTagWith(value, `${type}${tag}<`, (v3) => {
        const parts = v3.split(",").map((s) => s.trim()).filter((s) => s);
        if (isSized) {
          parts.pop();
        }
        return `${tag}<${parts.join(",")}>`;
      });
    }
    return value;
  };
}
function removeColons() {
  return (value) => {
    let index = 0;
    while (index !== -1) {
      index = value.indexOf("::");
      if (index === 0) {
        value = value.substring(2);
      } else if (index !== -1) {
        let start = index;
        while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
          start--;
        }
        value = `${value.substring(0, start + 1)}${value.substring(index + 2)}`;
      }
    }
    return value;
  };
}
function removeGenerics() {
  return (value) => {
    for (let i = 0, count2 = value.length; i < count2; i++) {
      if (value[i] === "<") {
        const box = ALLOWED_BOXES.find((box2) => {
          const start = i - box2.length;
          return start >= 0 && value.substring(start, i) === box2 && // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
          (start === 0 || BOX_PRECEDING.includes(value[start - 1]));
        });
        if (!box) {
          const end = findClosing(value, i + 1);
          value = `${value.substring(0, i)}${value.substring(end + 1)}`;
        }
      }
    }
    return value;
  };
}
function removePairOf() {
  const replacer2 = (v3) => `(${v3},${v3})`;
  return (value) => replaceTagWith(value, "PairOf<", replacer2);
}
function removeTraits() {
  const from1 = /\s/g;
  const from2 = /(T|Self)::/g;
  const from3 = /<(T|Self)asTrait>::/g;
  const from4 = /<Tas[a-z]+::Trait>::/g;
  const from5 = /<LookupasStaticLookup>/g;
  const from6 = /::Type/g;
  return (value) => {
    from1.lastIndex = 0;
    from2.lastIndex = 0;
    from3.lastIndex = 0;
    from4.lastIndex = 0;
    from5.lastIndex = 0;
    from6.lastIndex = 0;
    return value.replace(from1, "").replace(from2, "").replace(from3, "").replace(from4, "").replace(from5, "Lookup").replace(from6, "");
  };
}
function removeWrap(check) {
  const replacer2 = (v3) => v3;
  return (value) => replaceTagWith(value, check, replacer2);
}
function sanitize(value) {
  const startValue = value.toString();
  const memoized2 = sanitizeMap.get(startValue);
  if (memoized2) {
    return memoized2;
  }
  let result = startValue;
  for (let i = 0, count2 = mappings.length; i < count2; i++) {
    result = mappings[i](result);
  }
  sanitizeMap.set(startValue, result);
  return result;
}
var BOUNDED, ALLOWED_BOXES, BOX_PRECEDING, mappings, sanitizeMap;
var init_sanitize = __esm({
  "node_modules/@polkadot/types-codec/utils/sanitize.js"() {
    BOUNDED = ["BTreeMap", "BTreeSet", "HashMap", "Vec"];
    ALLOWED_BOXES = BOUNDED.concat(["Compact", "DoNotConstruct", "Int", "Linkage", "Range", "RangeInclusive", "Result", "Opaque", "Option", "UInt", "WrapperKeepOpaque", "WrapperOpaque"]);
    BOX_PRECEDING = ["<", "(", "[", '"', ",", " "];
    mappings = [
      // alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
      alias("<T::InherentOfflineReport as InherentOfflineReport>::Inherent", "InherentOfflineReport", false),
      alias("VecDeque<", "Vec<", false),
      // <T::Balance as HasCompact>
      cleanupCompact(),
      // Change BoundedVec<Type, Size> to Vec<Type>
      removeExtensions("Bounded", true),
      // Change WeakVec<Type> to Vec<Type>
      removeExtensions("Weak", false),
      // Remove all the trait prefixes
      removeTraits(),
      // remove PairOf<T> -> (T, T)
      removePairOf(),
      // remove boxing, `Box<Proposal>` -> `Proposal`
      removeWrap("Box<"),
      // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
      removeGenerics(),
      // alias String -> Text (compat with jsonrpc methods)
      alias("String", "Text"),
      // alias Vec<u8> -> Bytes
      alias("Vec<u8>", "Bytes"),
      alias("&\\[u8\\]", "Bytes"),
      alias("&'static\\[u8\\]", "Bytes"),
      // alias RawAddress -> Address
      alias("RawAddress", "Address"),
      // lookups, mapped to Address/AccountId as appropriate in runtime
      alias("Lookup::Source", "LookupSource"),
      alias("Lookup::Target", "LookupTarget"),
      // HACK duplication between contracts & primitives, however contracts prefixed with exec
      alias("exec::StorageKey", "ContractStorageKey"),
      // flattens tuples with one value, `(AccountId)` -> `AccountId`
      flattenSingleTuple(),
      // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
      removeColons(),
      // remove all trailing spaces - this should always be the last
      trim()
    ];
    sanitizeMap = /* @__PURE__ */ new Map();
  }
});

// node_modules/@polkadot/types-codec/utils/sortValues.js
function isArrayLike2(arg) {
  return arg instanceof Uint8Array || Array.isArray(arg);
}
function isEnum(arg) {
  return isCodec(arg) && isNumber(arg.index) && isCodec(arg.value);
}
function isOption(arg) {
  return isCodec(arg) && isBoolean(arg.isSome) && isCodec(arg.value);
}
function isNumberLike(arg) {
  return isNumber(arg) || isBn(arg) || isBigInt(arg);
}
function sortArray(a, b2) {
  let sortRes = 0;
  const minLen = Math.min(a.length, b2.length);
  for (let i = 0; i < minLen; ++i) {
    sortRes = sortAsc(a[i], b2[i]);
    if (sortRes !== 0) {
      return sortRes;
    }
  }
  return a.length - b2.length;
}
function checkForDuplicates(container, seen, arg) {
  if (isCodec(arg)) {
    const hex2 = arg.toHex();
    if (seen.has(hex2)) {
      throw new Error(`Duplicate value in ${container}: ${stringify(arg)}`);
    }
    seen.add(hex2);
  }
  return true;
}
function sortAsc(a, b2) {
  if (isNumberLike(a) && isNumberLike(b2)) {
    return bnToBn(a).cmp(bnToBn(b2));
  } else if (a instanceof Map && b2 instanceof Map) {
    return sortAsc(Array.from(a.values()), Array.from(b2.values()));
  } else if (isEnum(a) && isEnum(b2)) {
    return sortAsc(a.index, b2.index) || sortAsc(a.value, b2.value);
  } else if (isOption(a) && isOption(b2)) {
    return sortAsc(a.isNone ? 0 : 1, b2.isNone ? 0 : 1) || sortAsc(a.value, b2.value);
  } else if (isArrayLike2(a) && isArrayLike2(b2)) {
    return sortArray(a, b2);
  } else if (isCodec(a) && isCodec(b2)) {
    return sortAsc(a.toU8a(true), b2.toU8a(true));
  }
  throw new Error(`Attempting to sort unrecognized values: ${stringify(a)} (typeof ${typeof a}) <-> ${stringify(b2)} (typeof ${typeof b2})`);
}
function sortSet(set) {
  const seen = /* @__PURE__ */ new Set();
  return new Set(Array.from(set).filter((value) => checkForDuplicates("BTreeSet", seen, value)).sort(sortAsc));
}
function sortMap(map3) {
  const seen = /* @__PURE__ */ new Set();
  return new Map(Array.from(map3.entries()).filter(([key]) => checkForDuplicates("BTreeMap", seen, key)).sort(([keyA], [keyB]) => sortAsc(keyA, keyB)));
}
var init_sortValues = __esm({
  "node_modules/@polkadot/types-codec/utils/sortValues.js"() {
    init_util();
  }
});

// node_modules/@polkadot/types-codec/utils/toConstructors.js
function typeToConstructor(registry, type) {
  return typeof type === "function" ? type : registry.createClassUnsafe(type);
}
function typesToConstructors(registry, types2) {
  const count2 = types2.length;
  const result = new Array(count2);
  for (let i = 0; i < count2; i++) {
    result[i] = typeToConstructor(registry, types2[i]);
  }
  return result;
}
function mapToTypeMap(registry, input) {
  const entries = Object.entries(input);
  const count2 = entries.length;
  const output2 = [new Array(count2), new Array(count2)];
  for (let i = 0; i < count2; i++) {
    output2[1][i] = entries[i][0];
    output2[0][i] = typeToConstructor(registry, entries[i][1]);
  }
  return output2;
}
var init_toConstructors = __esm({
  "node_modules/@polkadot/types-codec/utils/toConstructors.js"() {
  }
});

// node_modules/@polkadot/types-codec/utils/typesToMap.js
function typesToMap(registry, [Types, keys2]) {
  const result = {};
  for (let i = 0, count2 = keys2.length; i < count2; i++) {
    result[keys2[i]] = registry.getClassName(Types[i]) || new Types[i](registry).toRawType();
  }
  return result;
}
var init_typesToMap = __esm({
  "node_modules/@polkadot/types-codec/utils/typesToMap.js"() {
  }
});

// node_modules/@polkadot/types-codec/utils/index.js
var init_utils4 = __esm({
  "node_modules/@polkadot/types-codec/utils/index.js"() {
    init_compareArray();
    init_compareMap();
    init_compareSet();
    init_decodeU8a();
    init_sanitize();
    init_sortValues();
    init_toConstructors();
    init_typesToMap();
  }
});

// node_modules/@polkadot/types-codec/base/Compact.js
function decodeCompact(registry, Type2, value) {
  if (isU8a(value)) {
    const [decodedLength, bn] = (value[0] & 3) < 3 ? compactFromU8aLim(value) : compactFromU8a(value);
    return [new Type2(registry, bn), decodedLength];
  } else if (value instanceof Compact) {
    const raw = value.unwrap();
    return raw instanceof Type2 ? [raw, 0] : [new Type2(registry, raw), 0];
  } else if (value instanceof Type2) {
    return [value, 0];
  }
  return [new Type2(registry, value), 0];
}
var Compact;
var init_Compact = __esm({
  "node_modules/@polkadot/types-codec/base/Compact.js"() {
    init_util();
    init_utils4();
    Compact = class _Compact {
      registry;
      createdAtHash;
      initialU8aLength;
      isStorageFallback;
      __internal__Type;
      __internal__raw;
      constructor(registry, Type2, value = 0, { definition, setDefinition = identity } = {}) {
        this.registry = registry;
        this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
        const [raw, decodedLength] = decodeCompact(registry, this.__internal__Type, value);
        this.initialU8aLength = decodedLength;
        this.__internal__raw = raw;
      }
      static with(Type2) {
        let definition;
        const setDefinition = (d) => definition = d;
        return class extends _Compact {
          constructor(registry, value) {
            super(registry, Type2, value, { definition, setDefinition });
          }
        };
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        return this.toU8a().length;
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description Checks if the value is an empty value
       */
      get isEmpty() {
        return this.__internal__raw.isEmpty;
      }
      /**
       * @description Returns the number of bits in the value
       */
      bitLength() {
        return this.__internal__raw.bitLength();
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        return this.__internal__raw.eq(other instanceof _Compact ? other.__internal__raw : other);
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return {
          outer: [this.toU8a()]
        };
      }
      /**
       * @description Returns a BigInt representation of the number
       */
      toBigInt() {
        return this.__internal__raw.toBigInt();
      }
      /**
       * @description Returns the BN representation of the number
       */
      toBn() {
        return this.__internal__raw.toBn();
      }
      /**
       * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
       */
      toHex(isLe) {
        return this.__internal__raw.toHex(isLe);
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExtended, disableAscii) {
        return this.__internal__raw.toHuman(isExtended, disableAscii);
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return this.__internal__raw.toJSON();
      }
      /**
       * @description Returns the number representation for the value
       */
      toNumber() {
        return this.__internal__raw.toNumber();
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive(disableAscii) {
        return this.__internal__raw.toPrimitive(disableAscii);
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return `Compact<${this.registry.getClassName(this.__internal__Type) || this.__internal__raw.toRawType()}>`;
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return this.__internal__raw.toString();
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       */
      toU8a(_isBare) {
        return compactToU8a(this.__internal__raw.toBn());
      }
      /**
       * @description Returns the embedded [[UInt]] or [[Moment]] value
       */
      unwrap() {
        return this.__internal__raw;
      }
    };
  }
});

// node_modules/@polkadot/types-codec/base/DoNotConstruct.js
var DoNotConstruct;
var init_DoNotConstruct = __esm({
  "node_modules/@polkadot/types-codec/base/DoNotConstruct.js"() {
    DoNotConstruct = class _DoNotConstruct {
      registry;
      createdAtHash;
      isStorageFallback;
      __internal__neverError;
      constructor(registry, typeName = "DoNotConstruct") {
        this.registry = registry;
        this.__internal__neverError = new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`);
        throw this.__internal__neverError;
      }
      static with(typeName) {
        return class extends _DoNotConstruct {
          constructor(registry) {
            super(registry, typeName);
          }
        };
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        throw this.__internal__neverError;
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        throw this.__internal__neverError;
      }
      /**
       * @description Checks if the value is an empty value (always true)
       */
      get isEmpty() {
        throw this.__internal__neverError;
      }
      /**
       * @description Unimplemented
       */
      eq() {
        throw this.__internal__neverError;
      }
      /**
       * @description Unimplemented
       */
      inspect() {
        throw this.__internal__neverError;
      }
      /**
       * @description Unimplemented
       */
      toHex() {
        throw this.__internal__neverError;
      }
      /**
       * @description Unimplemented
       */
      toHuman() {
        throw this.__internal__neverError;
      }
      /**
       * @description Unimplemented
       */
      toJSON() {
        throw this.__internal__neverError;
      }
      /**
       * @description Unimplemented
       */
      toPrimitive() {
        throw this.__internal__neverError;
      }
      /**
       * @description Unimplemented
       */
      toRawType() {
        throw this.__internal__neverError;
      }
      /**
       * @description Unimplemented
       */
      toString() {
        throw this.__internal__neverError;
      }
      /**
       * @description Unimplemented
       */
      toU8a() {
        throw this.__internal__neverError;
      }
    };
  }
});

// node_modules/@polkadot/types-codec/base/Null.js
var Null;
var init_Null = __esm({
  "node_modules/@polkadot/types-codec/base/Null.js"() {
    init_util();
    Null = class _Null {
      encodedLength = 0;
      isEmpty = true;
      registry;
      createdAtHash;
      initialU8aLength = 0;
      isStorageFallback;
      constructor(registry) {
        this.registry = registry;
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        throw new Error(".hash is not implemented on Null");
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        return other instanceof _Null || isNull(other);
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return {};
      }
      /**
       * @description Returns a hex string representation of the value
       */
      toHex() {
        return "0x";
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman() {
        return this.toJSON();
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return null;
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive() {
        return null;
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "Null";
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return "";
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       */
      toU8a(_isBare) {
        return new Uint8Array();
      }
    };
  }
});

// node_modules/@polkadot/types-codec/base/Enum.js
function isRustEnum(def) {
  const defValues = Object.values(def);
  if (defValues.some((v3) => isNumber(v3))) {
    if (!defValues.every((v3) => isNumber(v3) && v3 >= 0 && v3 <= 255)) {
      throw new Error("Invalid number-indexed enum definition");
    }
    return false;
  }
  return true;
}
function extractDef(registry, _def) {
  const def = {};
  let isBasic;
  let isIndexed;
  if (Array.isArray(_def)) {
    for (let i = 0, count2 = _def.length; i < count2; i++) {
      def[_def[i]] = { Type: Null, index: i };
    }
    isBasic = true;
    isIndexed = false;
  } else if (isRustEnum(_def)) {
    const [Types, keys2] = mapToTypeMap(registry, _def);
    for (let i = 0, count2 = keys2.length; i < count2; i++) {
      def[keys2[i]] = { Type: Types[i], index: i };
    }
    isBasic = !Object.values(def).some(({ Type: Type2 }) => Type2 !== Null);
    isIndexed = false;
  } else {
    const entries = Object.entries(_def);
    for (let i = 0, count2 = entries.length; i < count2; i++) {
      const [key, index] = entries[i];
      def[key] = { Type: Null, index };
    }
    isBasic = true;
    isIndexed = true;
  }
  return {
    def,
    isBasic,
    isIndexed
  };
}
function getEntryType(def, checkIdx) {
  const values = Object.values(def);
  for (let i = 0, count2 = values.length; i < count2; i++) {
    const { Type: Type2, index } = values[i];
    if (index === checkIdx) {
      return Type2;
    }
  }
  throw new Error(`Unable to create Enum via index ${checkIdx}, in ${Object.keys(def).join(", ")}`);
}
function createFromU8a(registry, def, index, value) {
  const Type2 = getEntryType(def, index);
  return {
    index,
    value: new Type2(registry, value)
  };
}
function createFromValue(registry, def, index = 0, value) {
  const Type2 = getEntryType(def, index);
  return {
    index,
    value: value instanceof Type2 ? value : new Type2(registry, value)
  };
}
function decodeFromJSON(registry, def, key, value) {
  const keys2 = Object.keys(def).map((k2) => k2.toLowerCase());
  const keyLower = key.toLowerCase();
  const index = keys2.indexOf(keyLower);
  if (index === -1) {
    throw new Error(`Cannot map Enum JSON, unable to find '${key}' in ${keys2.join(", ")}`);
  }
  try {
    return createFromValue(registry, def, Object.values(def)[index].index, value);
  } catch (error) {
    throw new Error(`Enum(${key}):: ${error.message}`);
  }
}
function decodeEnum(registry, def, value, index) {
  if (isNumber(index)) {
    return createFromValue(registry, def, index, value);
  } else if (isU8a(value) || isHex(value)) {
    const u8a = u8aToU8a(value);
    if (u8a.length) {
      return createFromU8a(registry, def, u8a[0], u8a.subarray(1));
    }
  } else if (value instanceof Enum) {
    return createFromValue(registry, def, value.index, value.value);
  } else if (isNumber(value)) {
    return createFromValue(registry, def, value);
  } else if (isString(value)) {
    return decodeFromJSON(registry, def, value.toString());
  } else if (isObject(value)) {
    const key = Object.keys(value)[0];
    return decodeFromJSON(registry, def, key, value[key]);
  }
  return createFromValue(registry, def, Object.values(def)[0].index);
}
var Enum;
var init_Enum = __esm({
  "node_modules/@polkadot/types-codec/base/Enum.js"() {
    init_util();
    init_utils4();
    init_Null();
    Enum = class _Enum {
      registry;
      createdAtHash;
      initialU8aLength;
      isStorageFallback;
      __internal__def;
      __internal__entryIndex;
      __internal__indexes;
      __internal__isBasic;
      __internal__isIndexed;
      __internal__raw;
      constructor(registry, Types, value, index, { definition, setDefinition = identity } = {}) {
        const { def, isBasic, isIndexed } = definition || setDefinition(extractDef(registry, Types));
        const decoded = isU8a(value) && value.length && !isNumber(index) ? createFromU8a(registry, def, value[0], value.subarray(1)) : decodeEnum(registry, def, value, index);
        this.registry = registry;
        this.__internal__def = def;
        this.__internal__isBasic = isBasic;
        this.__internal__isIndexed = isIndexed;
        this.__internal__indexes = Object.values(def).map(({ index: index2 }) => index2);
        this.__internal__entryIndex = this.__internal__indexes.indexOf(decoded.index);
        this.__internal__raw = decoded.value;
        if (this.__internal__raw.initialU8aLength) {
          this.initialU8aLength = 1 + this.__internal__raw.initialU8aLength;
        }
      }
      static with(Types) {
        var _a;
        let definition;
        const setDefinition = (d) => definition = d;
        return _a = class extends _Enum {
          constructor(registry, value, index) {
            super(registry, Types, value, index, { definition, setDefinition });
          }
        }, (() => {
          const keys2 = Array.isArray(Types) ? Types : Object.keys(Types);
          const count2 = keys2.length;
          const asKeys = new Array(count2);
          const isKeys = new Array(count2);
          for (let i = 0; i < count2; i++) {
            const name = stringPascalCase(keys2[i]);
            asKeys[i] = `as${name}`;
            isKeys[i] = `is${name}`;
          }
          objectProperties(_a.prototype, isKeys, (_2, i, self2) => self2.type === keys2[i]);
          objectProperties(_a.prototype, asKeys, (k2, i, self2) => {
            if (self2.type !== keys2[i]) {
              throw new Error(`Cannot convert '${self2.type}' via ${k2}`);
            }
            return self2.value;
          });
        })(), _a;
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        return 1 + this.__internal__raw.encodedLength;
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description The index of the enum value
       */
      get index() {
        return this.__internal__indexes[this.__internal__entryIndex];
      }
      /**
       * @description The value of the enum
       */
      get inner() {
        return this.__internal__raw;
      }
      /**
       * @description true if this is a basic enum (no values)
       */
      get isBasic() {
        return this.__internal__isBasic;
      }
      /**
       * @description Checks if the value is an empty value
       */
      get isEmpty() {
        return this.__internal__raw.isEmpty;
      }
      /**
       * @description Checks if the Enum points to a [[Null]] type
       */
      get isNone() {
        return this.__internal__raw instanceof Null;
      }
      /**
       * @description The available keys for this enum
       */
      get defIndexes() {
        return this.__internal__indexes;
      }
      /**
       * @description The available keys for this enum
       */
      get defKeys() {
        return Object.keys(this.__internal__def);
      }
      /**
       * @description The name of the type this enum value represents
       */
      get type() {
        return this.defKeys[this.__internal__entryIndex];
      }
      /**
       * @description The value of the enum
       */
      get value() {
        return this.__internal__raw;
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        if (isU8a(other)) {
          return !this.toU8a().some((entry, index) => entry !== other[index]);
        } else if (isNumber(other)) {
          return this.toNumber() === other;
        } else if (this.__internal__isBasic && isString(other)) {
          return this.type === other;
        } else if (isHex(other)) {
          return this.toHex() === other;
        } else if (other instanceof _Enum) {
          return this.index === other.index && this.value.eq(other.value);
        } else if (isObject(other)) {
          return this.value.eq(other[this.type]);
        }
        return this.value.eq(other);
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        if (this.__internal__isBasic) {
          return { outer: [new Uint8Array([this.index])] };
        }
        const { inner, outer = [] } = this.__internal__raw.inspect();
        return {
          inner,
          outer: [new Uint8Array([this.index]), ...outer]
        };
      }
      /**
       * @description Returns a hex string representation of the value
       */
      toHex() {
        return u8aToHex(this.toU8a());
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExtended, disableAscii) {
        return this.__internal__isBasic || this.isNone ? this.type : { [this.type]: this.__internal__raw.toHuman(isExtended, disableAscii) };
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return this.__internal__isBasic ? this.type : { [stringCamelCase(this.type)]: this.__internal__raw.toJSON() };
      }
      /**
       * @description Returns the number representation for the value
       */
      toNumber() {
        return this.index;
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive(disableAscii) {
        return this.__internal__isBasic ? this.type : { [stringCamelCase(this.type)]: this.__internal__raw.toPrimitive(disableAscii) };
      }
      /**
       * @description Returns a raw struct representation of the enum types
       */
      _toRawStruct() {
        if (this.__internal__isBasic) {
          return this.__internal__isIndexed ? this.defKeys.reduce((out, key, index) => {
            out[key] = this.__internal__indexes[index];
            return out;
          }, {}) : this.defKeys;
        }
        const entries = Object.entries(this.__internal__def);
        return typesToMap(this.registry, entries.reduce((out, [key, { Type: Type2 }], i) => {
          out[0][i] = Type2;
          out[1][i] = key;
          return out;
        }, [new Array(entries.length), new Array(entries.length)]));
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return stringify({ _enum: this._toRawStruct() });
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return this.isNone ? this.type : stringify(this.toJSON());
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        return isBare ? this.__internal__raw.toU8a(isBare) : u8aConcatStrict([
          new Uint8Array([this.index]),
          this.__internal__raw.toU8a(isBare)
        ]);
      }
    };
  }
});

// node_modules/@polkadot/types-codec/base/Int.js
var Int;
var init_Int2 = __esm({
  "node_modules/@polkadot/types-codec/base/Int.js"() {
    init_Int();
    Int = class _Int extends AbstractInt {
      constructor(registry, value = 0, bitLength) {
        super(registry, value, bitLength, true);
      }
      static with(bitLength, typeName) {
        return class extends _Int {
          constructor(registry, value) {
            super(registry, value, bitLength);
          }
          toRawType() {
            return typeName || super.toRawType();
          }
        };
      }
    };
  }
});

// node_modules/@polkadot/types-codec/base/Option.js
function decodeOption(registry, Type2, value) {
  if (value instanceof Type2) {
    return value;
  } else if (value instanceof Option) {
    if (value.value instanceof Type2) {
      return value.value;
    } else if (value.isNone) {
      return new None(registry);
    }
    return new Type2(registry, value.value);
  } else if (isNull(value) || isUndefined(value) || value === "0x" || value instanceof None) {
    return new None(registry);
  } else if (isU8a(value)) {
    return !value.length || value[0] === 0 ? new None(registry) : new Type2(registry, value.subarray(1));
  }
  return new Type2(registry, value);
}
var None, Option;
var init_Option = __esm({
  "node_modules/@polkadot/types-codec/base/Option.js"() {
    init_util();
    init_utils4();
    init_Null();
    None = class extends Null {
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "None";
      }
    };
    Option = class _Option {
      registry;
      createdAtHash;
      initialU8aLength;
      isStorageFallback;
      __internal__Type;
      __internal__raw;
      constructor(registry, typeName, value, { definition, setDefinition = identity } = {}) {
        const Type2 = definition || setDefinition(typeToConstructor(registry, typeName));
        const decoded = isU8a(value) && value.length && !isCodec(value) ? value[0] === 0 ? new None(registry) : new Type2(registry, value.subarray(1)) : decodeOption(registry, Type2, value);
        this.registry = registry;
        this.__internal__Type = Type2;
        this.__internal__raw = decoded;
        if (decoded?.initialU8aLength) {
          this.initialU8aLength = 1 + decoded.initialU8aLength;
        }
      }
      static with(Type2) {
        let definition;
        const setDefinition = (d) => {
          definition = d;
          return d;
        };
        return class extends _Option {
          constructor(registry, value) {
            super(registry, Type2, value, { definition, setDefinition });
          }
        };
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        return 1 + this.__internal__raw.encodedLength;
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description Checks if the Option has no value
       */
      get isEmpty() {
        return this.isNone;
      }
      /**
       * @description Checks if the Option has no value
       */
      get isNone() {
        return this.__internal__raw instanceof None;
      }
      /**
       * @description Checks if the Option has a value
       */
      get isSome() {
        return !this.isNone;
      }
      /**
       * @description The actual value for the Option
       */
      get value() {
        return this.__internal__raw;
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        if (other instanceof _Option) {
          return this.isSome === other.isSome && this.value.eq(other.value);
        }
        return this.value.eq(other);
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        if (this.isNone) {
          return { outer: [new Uint8Array([0])] };
        }
        const { inner, outer = [] } = this.__internal__raw.inspect();
        return {
          inner,
          outer: [new Uint8Array([1]), ...outer]
        };
      }
      /**
       * @description Returns a hex string representation of the value
       */
      toHex() {
        return this.isNone ? "0x" : u8aToHex(this.toU8a().subarray(1));
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExtended, disableAscii) {
        return this.__internal__raw.toHuman(isExtended, disableAscii);
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return this.isNone ? null : this.__internal__raw.toJSON();
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive(disableAscii) {
        return this.isNone ? null : this.__internal__raw.toPrimitive(disableAscii);
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType(isBare) {
        const wrapped = this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType();
        return isBare ? wrapped : `Option<${wrapped}>`;
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return this.__internal__raw.toString();
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        if (isBare) {
          return this.__internal__raw.toU8a(true);
        }
        const u8a = new Uint8Array(this.encodedLength);
        if (this.isSome) {
          u8a.set([1]);
          u8a.set(this.__internal__raw.toU8a(), 1);
        }
        return u8a;
      }
      /**
       * @description Returns the value that the Option represents (if available), throws if null
       */
      unwrap() {
        if (this.isNone) {
          throw new Error("Option: unwrapping a None value");
        }
        return this.__internal__raw;
      }
      /**
       * @description Returns the value that the Option represents (if available) or defaultValue if none
       * @param defaultValue The value to return if the option isNone
       */
      unwrapOr(defaultValue) {
        return this.isSome ? this.unwrap() : defaultValue;
      }
      /**
       * @description Returns the value that the Option represents (if available) or defaultValue if none
       * @param defaultValue The value to return if the option isNone
       */
      unwrapOrDefault() {
        return this.isSome ? this.unwrap() : new this.__internal__Type(this.registry);
      }
    };
  }
});

// node_modules/@polkadot/types-codec/base/Result.js
var Result;
var init_Result = __esm({
  "node_modules/@polkadot/types-codec/base/Result.js"() {
    init_Enum();
    Result = class _Result extends Enum {
      constructor(registry, Ok, Err, value) {
        super(registry, { Ok, Err }, value);
      }
      static with(Types) {
        return class extends _Result {
          constructor(registry, value) {
            super(registry, Types.Ok, Types.Err, value);
          }
        };
      }
      /**
       * @description Returns the wrapper Err value (if isErr)
       */
      get asErr() {
        if (!this.isErr) {
          throw new Error("Cannot extract Err value from Ok result, check isErr first");
        }
        return this.value;
      }
      /**
       * @description Returns the wrapper Ok value (if isOk)
       */
      get asOk() {
        if (!this.isOk) {
          throw new Error("Cannot extract Ok value from Err result, check isOk first");
        }
        return this.value;
      }
      /**
       * @description Checks if the Result has no value
       */
      get isEmpty() {
        return this.isOk && this.value.isEmpty;
      }
      /**
       * @description Checks if the Result wraps an Err value
       */
      get isErr() {
        return !this.isOk;
      }
      /**
       * @description Checks if the Result wraps an Ok value
       */
      get isOk() {
        return this.index === 0;
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        const Types = this._toRawStruct();
        return `Result<${Types.Ok},${Types.Err}>`;
      }
    };
  }
});

// node_modules/@polkadot/types-codec/base/Tuple.js
function decodeTuple(registry, result, value, Classes) {
  if (Array.isArray(value)) {
    const Types = Classes[0];
    for (let i = 0, count2 = Types.length; i < count2; i++) {
      try {
        const entry = value?.[i];
        result[i] = entry instanceof Types[i] ? entry : new Types[i](registry, entry);
      } catch (error) {
        throw new Error(`Tuple: failed on ${i}:: ${error.message}`);
      }
    }
    return [result, 0];
  } else if (isHex(value)) {
    return decodeU8a(registry, result, u8aToU8a(value), Classes);
  } else if (!value || !result.length) {
    const Types = Classes[0];
    for (let i = 0, count2 = Types.length; i < count2; i++) {
      result[i] = new Types[i](registry);
    }
    return [result, 0];
  }
  throw new Error(`Expected array input to Tuple decoding, found ${typeof value}: ${stringify(value)}`);
}
var Tuple;
var init_Tuple = __esm({
  "node_modules/@polkadot/types-codec/base/Tuple.js"() {
    init_util();
    init_Array();
    init_utils4();
    Tuple = class _Tuple extends AbstractArray {
      __internal__Types;
      constructor(registry, Types, value, { definition, setDefinition = identity } = {}) {
        const Classes = definition || setDefinition(Array.isArray(Types) ? [typesToConstructors(registry, Types), []] : isFunction(Types) || isString(Types) ? [[typeToConstructor(registry, Types)], []] : mapToTypeMap(registry, Types));
        super(registry, Classes[0].length);
        this.initialU8aLength = (isU8a(value) ? decodeU8a(registry, this, value, Classes) : decodeTuple(registry, this, value, Classes))[1];
        this.__internal__Types = Classes;
      }
      static with(Types) {
        let definition;
        const setDefinition = (d) => definition = d;
        return class extends _Tuple {
          constructor(registry, value) {
            super(registry, Types, value, { definition, setDefinition });
          }
        };
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        let total = 0;
        for (let i = 0, count2 = this.length; i < count2; i++) {
          total += this[i].encodedLength;
        }
        return total;
      }
      /**
       * @description The types definition of the tuple
       */
      get Types() {
        return this.__internal__Types[1].length ? this.__internal__Types[1] : this.__internal__Types[0].map((T) => new T(this.registry).toRawType());
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return {
          inner: this.inspectInner()
        };
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        const types2 = this.__internal__Types[0].map((T) => this.registry.getClassName(T) || new T(this.registry).toRawType());
        return `(${types2.join(",")})`;
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return stringify(this.toJSON());
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        return u8aConcatStrict(this.toU8aInner(isBare));
      }
    };
  }
});

// node_modules/@polkadot/types-codec/base/UInt.js
var UInt;
var init_UInt = __esm({
  "node_modules/@polkadot/types-codec/base/UInt.js"() {
    init_Int();
    UInt = class _UInt extends AbstractInt {
      static with(bitLength, typeName) {
        return class extends _UInt {
          constructor(registry, value) {
            super(registry, value, bitLength);
          }
          toRawType() {
            return typeName || super.toRawType();
          }
        };
      }
    };
  }
});

// node_modules/@polkadot/types-codec/base/Vec.js
function decodeVecLength(value) {
  if (Array.isArray(value)) {
    return [value, value.length, 0];
  } else if (isU8a(value) || isHex(value)) {
    const u8a = u8aToU8a(value);
    const [startAt, length] = compactFromU8aLim(u8a);
    if (length > MAX_LENGTH) {
      throw new Error(`Vec length ${length.toString()} exceeds ${MAX_LENGTH}`);
    }
    return [u8a, length, startAt];
  } else if (!value) {
    return [null, 0, 0];
  }
  throw new Error(`Expected array/hex input to Vec<*> decoding, found ${typeof value}: ${stringify(value)}`);
}
function decodeVec(registry, result, value, startAt, Type2) {
  if (Array.isArray(value)) {
    const count2 = result.length;
    for (let i = 0; i < count2; i++) {
      const entry = value[i];
      try {
        result[i] = entry instanceof Type2 ? entry : new Type2(registry, entry);
      } catch (error) {
        l6.error(`Unable to decode on index ${i}`, error.message);
        throw error;
      }
    }
    return [0, 0];
  } else if (!value) {
    return [0, 0];
  }
  return decodeU8aVec(registry, result, u8aToU8a(value), startAt, Type2);
}
var MAX_LENGTH, l6, Vec;
var init_Vec = __esm({
  "node_modules/@polkadot/types-codec/base/Vec.js"() {
    init_util();
    init_Array();
    init_utils4();
    MAX_LENGTH = 64 * 1024;
    l6 = logger("Vec");
    Vec = class _Vec extends AbstractArray {
      __internal__Type;
      constructor(registry, Type2, value = [], { definition, setDefinition = identity } = {}) {
        const [decodeFrom, length, startAt] = decodeVecLength(value);
        super(registry, length);
        this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
        this.initialU8aLength = (isU8a(decodeFrom) ? decodeU8aVec(registry, this, decodeFrom, startAt, this.__internal__Type) : decodeVec(registry, this, decodeFrom, startAt, this.__internal__Type))[0];
      }
      static with(Type2) {
        let definition;
        const setDefinition = (d) => definition = d;
        return class extends _Vec {
          constructor(registry, value) {
            super(registry, Type2, value, { definition, setDefinition });
          }
        };
      }
      /**
       * @description The type for the items
       */
      get Type() {
        return this.__internal__Type.name;
      }
      /**
       * @description Finds the index of the value in the array
       */
      indexOf(other) {
        const check = other instanceof this.__internal__Type ? other : new this.__internal__Type(this.registry, other);
        for (let i = 0, count2 = this.length; i < count2; i++) {
          if (check.eq(this[i])) {
            return i;
          }
        }
        return -1;
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return `Vec<${this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType()}>`;
      }
    };
  }
});

// node_modules/@polkadot/types-codec/base/VecAny.js
var init_VecAny = __esm({
  "node_modules/@polkadot/types-codec/base/VecAny.js"() {
    init_Array();
  }
});

// node_modules/@polkadot/types-codec/base/VecFixed.js
var VecFixed;
var init_VecFixed = __esm({
  "node_modules/@polkadot/types-codec/base/VecFixed.js"() {
    init_util();
    init_Array();
    init_utils4();
    init_Vec();
    VecFixed = class _VecFixed extends AbstractArray {
      __internal__Type;
      constructor(registry, Type2, length, value = [], { definition, setDefinition = identity } = {}) {
        super(registry, length);
        this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
        this.initialU8aLength = (isU8a(value) ? decodeU8aVec(registry, this, value, 0, this.__internal__Type) : decodeVec(registry, this, value, 0, this.__internal__Type))[1];
      }
      static with(Type2, length) {
        let definition;
        const setDefinition = (d) => definition = d;
        return class extends _VecFixed {
          constructor(registry, value) {
            super(registry, Type2, length, value, { definition, setDefinition });
          }
        };
      }
      /**
       * @description The type for the items
       */
      get Type() {
        return new this.__internal__Type(this.registry).toRawType();
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        let total = 0;
        for (let i = 0, count2 = this.length; i < count2; i++) {
          total += this[i].encodedLength;
        }
        return total;
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return {
          inner: this.inspectInner()
        };
      }
      toU8a() {
        const encoded = this.toU8aInner();
        return encoded.length ? u8aConcatStrict(encoded) : new Uint8Array([]);
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return `[${this.Type};${this.length}]`;
      }
    };
  }
});

// node_modules/@polkadot/types-codec/base/index.js
var init_base = __esm({
  "node_modules/@polkadot/types-codec/base/index.js"() {
    init_Compact();
    init_DoNotConstruct();
    init_Enum();
    init_Int2();
    init_Null();
    init_Option();
    init_Result();
    init_Tuple();
    init_UInt();
    init_Vec();
    init_VecAny();
    init_VecFixed();
  }
});

// node_modules/@polkadot/types-codec/native/Raw.js
var Raw;
var init_Raw = __esm({
  "node_modules/@polkadot/types-codec/native/Raw.js"() {
    init_util();
    Raw = class extends Uint8Array {
      registry;
      createdAtHash;
      initialU8aLength;
      isStorageFallback;
      /**
       * @description This ensures that operators such as clice, filter, map, etc. return
       * new Array instances (without this we need to apply overrides)
       */
      static get [Symbol.species]() {
        return Uint8Array;
      }
      constructor(registry, value, initialU8aLength) {
        super(u8aToU8a(value));
        this.registry = registry;
        this.initialU8aLength = initialU8aLength;
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        return this.length;
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description Returns true if the wrapped value contains only ASCII printable characters
       */
      get isAscii() {
        return isAscii(this);
      }
      /**
       * @description Returns true if the type wraps an empty/default all-0 value
       */
      get isEmpty() {
        return !this.length || isUndefined(this.find((b2) => !!b2));
      }
      /**
       * @description Returns true if the wrapped value contains only utf8 characters
       */
      get isUtf8() {
        return isUtf8(this);
      }
      /**
       * @description Returns the number of bits in the value
       */
      bitLength() {
        return this.length * 8;
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        if (other instanceof Uint8Array) {
          return this.length === other.length && !this.some((b2, index) => b2 !== other[index]);
        }
        return this.eq(u8aToU8a(other));
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return {
          outer: [this.toU8a()]
        };
      }
      /**
       * @description Returns a hex string representation of the value
       */
      toHex() {
        return u8aToHex(this);
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(_isExtended, disableAscii) {
        return this.toPrimitive(disableAscii);
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return this.toHex();
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive(disableAscii) {
        if (!disableAscii && this.isAscii) {
          const text = this.toUtf8();
          if (isAscii(text)) {
            return text;
          }
        }
        return this.toJSON();
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "Raw";
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return this.toHex();
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       */
      toU8a(_isBare) {
        return Uint8Array.from(this);
      }
      /**
       * @description Returns the wrapped data as a UTF-8 string
       */
      toUtf8() {
        if (!this.isUtf8) {
          throw new Error("The character sequence is not a valid Utf8 string");
        }
        return u8aToString(this);
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/BitVec.js
function decodeBitVecU8a(value) {
  if (!value?.length) {
    return [0, new Uint8Array()];
  }
  const [offset, length] = compactFromU8aLim(value);
  const total = offset + Math.ceil(length / 8);
  if (total > value.length) {
    throw new Error(`BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
  }
  return [length, value.subarray(offset, total)];
}
function decodeBitVec(value) {
  if (Array.isArray(value) || isString(value)) {
    const u8a = u8aToU8a(value);
    return [u8a.length / 8, u8a];
  }
  return decodeBitVecU8a(value);
}
var BitVec;
var init_BitVec = __esm({
  "node_modules/@polkadot/types-codec/extended/BitVec.js"() {
    init_util();
    init_Raw();
    BitVec = class extends Raw {
      __internal__decodedLength;
      __internal__isMsb;
      // In lieu of having the Msb/Lsb identifiers passed through, we default to assuming
      // we are dealing with Lsb, which is the default (as of writing) BitVec format used
      // in the Polkadot code (this only affects the toHuman displays)
      constructor(registry, value, isMsb = false) {
        const [decodedLength, u8a] = decodeBitVec(value);
        super(registry, u8a);
        this.__internal__decodedLength = decodedLength;
        this.__internal__isMsb = isMsb;
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        return this.length + compactToU8a(this.__internal__decodedLength).length;
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return {
          outer: [compactToU8a(this.__internal__decodedLength), super.toU8a()]
        };
      }
      /**
       * @description Creates a boolean array of the bit values
       */
      toBoolArray() {
        const map3 = [...this.toU8a(true)].map((v3) => [
          !!(v3 & 128),
          !!(v3 & 64),
          !!(v3 & 32),
          !!(v3 & 16),
          !!(v3 & 8),
          !!(v3 & 4),
          !!(v3 & 2),
          !!(v3 & 1)
        ]);
        const count2 = map3.length;
        const result = new Array(8 * count2);
        for (let i = 0; i < count2; i++) {
          const off = i * 8;
          const v3 = map3[i];
          for (let j3 = 0; j3 < 8; j3++) {
            result[off + j3] = this.__internal__isMsb ? v3[j3] : v3[7 - j3];
          }
        }
        return result;
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman() {
        return `0b${[...this.toU8a(true)].map((d) => `00000000${d.toString(2)}`.slice(-8)).map((s) => this.__internal__isMsb ? s : s.split("").reverse().join("")).join("_")}`;
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "BitVec";
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        const bitVec = super.toU8a(isBare);
        return isBare ? bitVec : u8aConcatStrict([compactToU8a(this.__internal__decodedLength), bitVec]);
      }
    };
  }
});

// node_modules/@polkadot/types-codec/native/Struct.js
function noopSetDefinition(d) {
  return d;
}
function decodeStructFromObject(registry, [Types, keys2], value, jsonMap) {
  let jsonObj;
  const typeofArray = Array.isArray(value);
  const typeofMap = value instanceof Map;
  const count2 = keys2.length;
  if (!typeofArray && !typeofMap && !isObject(value)) {
    throw new Error(`Struct: Cannot decode value ${stringify(value)} (typeof ${typeof value}), expected an input object, map or array`);
  } else if (typeofArray && value.length !== count2) {
    throw new Error(`Struct: Unable to map ${stringify(value)} array to object with known keys ${keys2.join(", ")}`);
  }
  const raw = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const key = keys2[i];
    const jsonKey = jsonMap.get(key) || key;
    const Type2 = Types[i];
    let assign;
    try {
      if (typeofArray) {
        assign = value[i];
      } else if (typeofMap) {
        assign = jsonKey && value.get(jsonKey);
      } else {
        assign = jsonKey && value[jsonKey];
        if (isUndefined(assign)) {
          if (isUndefined(jsonObj)) {
            const entries = Object.entries(value);
            jsonObj = {};
            for (let e = 0, ecount = entries.length; e < ecount; e++) {
              jsonObj[stringCamelCase(entries[e][0])] = entries[e][1];
            }
          }
          assign = jsonKey && jsonObj[jsonKey];
        }
      }
      raw[i] = [
        key,
        assign instanceof Type2 ? assign : new Type2(registry, assign)
      ];
    } catch (error) {
      let type = Type2.name;
      try {
        type = new Type2(registry).toRawType();
      } catch {
      }
      throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
    }
  }
  return [raw, 0];
}
var Struct;
var init_Struct = __esm({
  "node_modules/@polkadot/types-codec/native/Struct.js"() {
    init_util();
    init_utils4();
    Struct = class _Struct extends Map {
      registry;
      createdAtHash;
      initialU8aLength;
      isStorageFallback;
      __internal__jsonMap;
      __internal__Types;
      constructor(registry, Types, value, jsonMap = /* @__PURE__ */ new Map(), { definition, setDefinition = noopSetDefinition } = {}) {
        const typeMap = definition || setDefinition(mapToTypeMap(registry, Types));
        const [decoded, decodedLength] = isU8a(value) || isHex(value) ? decodeU8aStruct(registry, new Array(typeMap[0].length), u8aToU8a(value), typeMap) : value instanceof _Struct ? [value, 0] : decodeStructFromObject(registry, typeMap, value || {}, jsonMap);
        super(decoded);
        this.initialU8aLength = decodedLength;
        this.registry = registry;
        this.__internal__jsonMap = jsonMap;
        this.__internal__Types = typeMap;
      }
      static with(Types, jsonMap) {
        var _a;
        let definition;
        const setDefinition = (d) => definition = d;
        return _a = class extends _Struct {
          constructor(registry, value) {
            super(registry, Types, value, jsonMap, { definition, setDefinition });
          }
        }, (() => {
          const keys2 = Object.keys(Types);
          objectProperties(_a.prototype, keys2, (k2, _2, self2) => self2.get(k2));
        })(), _a;
      }
      /**
       * @description The available keys for this struct
       */
      get defKeys() {
        return this.__internal__Types[1];
      }
      /**
       * @description Checks if the value is an empty value
       */
      get isEmpty() {
        for (const v3 of this.values()) {
          if (!v3.isEmpty) {
            return false;
          }
        }
        return true;
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        let total = 0;
        for (const v3 of this.values()) {
          total += v3.encodedLength;
        }
        return total;
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description Returns the Type description of the structure
       */
      get Type() {
        const result = {};
        const [Types, keys2] = this.__internal__Types;
        for (let i = 0, count2 = keys2.length; i < count2; i++) {
          result[keys2[i]] = new Types[i](this.registry).toRawType();
        }
        return result;
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        return compareMap(this, other);
      }
      /**
       * @description Returns a specific names entry in the structure
       * @param key The name of the entry to retrieve
       */
      get(key) {
        return super.get(key);
      }
      /**
       * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
       */
      getAtIndex(index) {
        return this.toArray()[index];
      }
      /**
       * @description Returns the a types value by name
       */
      getT(key) {
        return super.get(key);
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect(isBare) {
        const inner = [];
        for (const [k2, v3] of this.entries()) {
          inner.push({
            ...v3.inspect(!isBare || isBoolean(isBare) ? isBare : isBare[k2]),
            name: stringCamelCase(k2)
          });
        }
        return {
          inner
        };
      }
      /**
       * @description Converts the Object to an standard JavaScript Array
       */
      toArray() {
        return [...this.values()];
      }
      /**
       * @description Returns a hex string representation of the value
       */
      toHex() {
        return u8aToHex(this.toU8a());
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExtended, disableAscii) {
        const json = {};
        for (const [k2, v3] of this.entries()) {
          json[k2] = v3.toHuman(isExtended, disableAscii);
        }
        return json;
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        const json = {};
        for (const [k2, v3] of this.entries()) {
          json[this.__internal__jsonMap.get(k2) || k2] = v3.toJSON();
        }
        return json;
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive(disableAscii) {
        const json = {};
        for (const [k2, v3] of this.entries()) {
          json[k2] = v3.toPrimitive(disableAscii);
        }
        return json;
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return stringify(typesToMap(this.registry, this.__internal__Types));
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return stringify(this.toJSON());
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        const encoded = [];
        for (const [k2, v3] of this.entries()) {
          encoded.push(v3.toU8a(!isBare || isBoolean(isBare) ? isBare : isBare[k2]));
        }
        return u8aConcatStrict(encoded);
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/Map.js
function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
  const output2 = /* @__PURE__ */ new Map();
  const [offset, count2] = compactFromU8aLim(u8a);
  const types2 = [];
  for (let i = 0; i < count2; i++) {
    types2.push(KeyClass, ValClass);
  }
  const [values, decodedLength] = decodeU8a(registry, new Array(types2.length), u8a.subarray(offset), [types2, []]);
  for (let i = 0, count3 = values.length; i < count3; i += 2) {
    output2.set(values[i], values[i + 1]);
  }
  return [KeyClass, ValClass, output2, offset + decodedLength];
}
function decodeMapFromMap(registry, KeyClass, ValClass, value) {
  const output2 = /* @__PURE__ */ new Map();
  for (const [key, val] of value.entries()) {
    const isComplex = KeyClass.prototype instanceof AbstractArray || KeyClass.prototype instanceof Struct || KeyClass.prototype instanceof Enum;
    try {
      output2.set(key instanceof KeyClass ? key : new KeyClass(registry, isComplex && typeof key === "string" ? JSON.parse(key) : key), val instanceof ValClass ? val : new ValClass(registry, val));
    } catch (error) {
      l7.error("Failed to decode key or value:", error.message);
      throw error;
    }
  }
  return [KeyClass, ValClass, output2, 0];
}
function decodeMap(registry, keyType, valType, value) {
  const KeyClass = typeToConstructor(registry, keyType);
  const ValClass = typeToConstructor(registry, valType);
  if (!value) {
    return [KeyClass, ValClass, /* @__PURE__ */ new Map(), 0];
  } else if (isU8a(value) || isHex(value)) {
    return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a(value));
  } else if (value instanceof Map) {
    return decodeMapFromMap(registry, KeyClass, ValClass, value);
  } else if (isObject(value)) {
    return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
  }
  throw new Error("Map: cannot decode type");
}
var l7, CodecMap;
var init_Map = __esm({
  "node_modules/@polkadot/types-codec/extended/Map.js"() {
    init_util();
    init_Array();
    init_Enum();
    init_Raw();
    init_Struct();
    init_utils4();
    l7 = logger("Map");
    CodecMap = class extends Map {
      registry;
      createdAtHash;
      initialU8aLength;
      isStorageFallback;
      __internal__KeyClass;
      __internal__ValClass;
      __internal__type;
      constructor(registry, keyType, valType, rawValue, type = "HashMap") {
        const [KeyClass, ValClass, decoded, decodedLength] = decodeMap(registry, keyType, valType, rawValue);
        super(type === "BTreeMap" ? sortMap(decoded) : decoded);
        this.registry = registry;
        this.initialU8aLength = decodedLength;
        this.__internal__KeyClass = KeyClass;
        this.__internal__ValClass = ValClass;
        this.__internal__type = type;
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        let len = compactToU8a(this.size).length;
        for (const [k2, v3] of this.entries()) {
          len += k2.encodedLength + v3.encodedLength;
        }
        return len;
      }
      /**
       * @description Returns a hash of the value
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description Checks if the value is an empty value
       */
      get isEmpty() {
        return this.size === 0;
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        return compareMap(this, other);
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        const inner = [];
        for (const [k2, v3] of this.entries()) {
          inner.push(k2.inspect());
          inner.push(v3.inspect());
        }
        return {
          inner,
          outer: [compactToU8a(this.size)]
        };
      }
      /**
       * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
       */
      toHex() {
        return u8aToHex(this.toU8a());
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExtended, disableAscii) {
        const json = {};
        for (const [k2, v3] of this.entries()) {
          json[k2 instanceof Raw && !disableAscii && k2.isAscii ? k2.toUtf8() : k2.toString()] = v3.toHuman(isExtended, disableAscii);
        }
        return json;
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        const json = {};
        for (const [k2, v3] of this.entries()) {
          json[k2.toString()] = v3.toJSON();
        }
        return json;
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive(disableAscii) {
        const json = {};
        for (const [k2, v3] of this.entries()) {
          json[k2 instanceof Raw && !disableAscii && k2.isAscii ? k2.toUtf8() : k2.toString()] = v3.toPrimitive(disableAscii);
        }
        return json;
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return `${this.__internal__type}<${this.registry.getClassName(this.__internal__KeyClass) || new this.__internal__KeyClass(this.registry).toRawType()},${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return stringify(this.toJSON());
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        const encoded = [];
        if (!isBare) {
          encoded.push(compactToU8a(this.size));
        }
        for (const [k2, v3] of this.entries()) {
          encoded.push(k2.toU8a(isBare), v3.toU8a(isBare));
        }
        return u8aConcatStrict(encoded);
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/BTreeMap.js
var BTreeMap;
var init_BTreeMap = __esm({
  "node_modules/@polkadot/types-codec/extended/BTreeMap.js"() {
    init_Map();
    BTreeMap = class _BTreeMap extends CodecMap {
      static with(keyType, valType) {
        return class extends _BTreeMap {
          constructor(registry, value) {
            super(registry, keyType, valType, value, "BTreeMap");
          }
        };
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/BTreeSet.js
function decodeSetFromU8a(registry, ValClass, u8a) {
  const output2 = /* @__PURE__ */ new Set();
  const [offset, count2] = compactFromU8aLim(u8a);
  const result = new Array(count2);
  const [decodedLength] = decodeU8aVec(registry, result, u8a, offset, ValClass);
  for (let i = 0; i < count2; i++) {
    output2.add(result[i]);
  }
  return [ValClass, output2, decodedLength];
}
function decodeSetFromSet(registry, ValClass, value) {
  const output2 = /* @__PURE__ */ new Set();
  value.forEach((val) => {
    try {
      output2.add(val instanceof ValClass ? val : new ValClass(registry, val));
    } catch (error) {
      l8.error("Failed to decode key or value:", error.message);
      throw error;
    }
  });
  return [ValClass, output2, 0];
}
function decodeSet(registry, valType, value) {
  const ValClass = typeToConstructor(registry, valType);
  if (!value) {
    return [ValClass, /* @__PURE__ */ new Set(), 0];
  } else if (isU8a(value) || isHex(value)) {
    return decodeSetFromU8a(registry, ValClass, u8aToU8a(value));
  } else if (Array.isArray(value) || value instanceof Set) {
    return decodeSetFromSet(registry, ValClass, value);
  }
  throw new Error("BTreeSet: cannot decode type");
}
var l8, BTreeSet;
var init_BTreeSet = __esm({
  "node_modules/@polkadot/types-codec/extended/BTreeSet.js"() {
    init_util();
    init_utils4();
    l8 = logger("BTreeSet");
    BTreeSet = class _BTreeSet extends Set {
      registry;
      createdAtHash;
      initialU8aLength;
      isStorageFallback;
      __internal__ValClass;
      constructor(registry, valType, rawValue) {
        const [ValClass, values, decodedLength] = decodeSet(registry, valType, rawValue);
        super(sortSet(values));
        this.registry = registry;
        this.initialU8aLength = decodedLength;
        this.__internal__ValClass = ValClass;
      }
      static with(valType) {
        return class extends _BTreeSet {
          constructor(registry, value) {
            super(registry, valType, value);
          }
        };
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        let len = compactToU8a(this.size).length;
        for (const v3 of this.values()) {
          len += v3.encodedLength;
        }
        return len;
      }
      /**
       * @description Returns a hash of the value
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description Checks if the value is an empty value
       */
      get isEmpty() {
        return this.size === 0;
      }
      /**
       * @description The actual set values as a string[]
       */
      get strings() {
        return [...super.values()].map((v3) => v3.toString());
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        return compareSet(this, other);
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        const inner = [];
        for (const v3 of this.values()) {
          inner.push(v3.inspect());
        }
        return {
          inner,
          outer: [compactToU8a(this.size)]
        };
      }
      /**
       * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
       */
      toHex() {
        return u8aToHex(this.toU8a());
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExtended, disableAscii) {
        const json = [];
        for (const v3 of this.values()) {
          json.push(v3.toHuman(isExtended, disableAscii));
        }
        return json;
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        const json = [];
        for (const v3 of this.values()) {
          json.push(v3.toJSON());
        }
        return json;
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return `BTreeSet<${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive(disableAscii) {
        const json = [];
        for (const v3 of this.values()) {
          json.push(v3.toPrimitive(disableAscii));
        }
        return json;
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return stringify(this.toJSON());
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        const encoded = [];
        if (!isBare) {
          encoded.push(compactToU8a(this.size));
        }
        for (const v3 of this.values()) {
          encoded.push(v3.toU8a(isBare));
        }
        return u8aConcatStrict(encoded);
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/Bytes.js
function decodeBytesU8a(value) {
  if (!value.length) {
    return [new Uint8Array(), 0];
  }
  const [offset, length] = compactFromU8aLim(value);
  const total = offset + length;
  if (length > MAX_LENGTH2) {
    throw new Error(`Bytes length ${length.toString()} exceeds ${MAX_LENGTH2}`);
  } else if (total > value.length) {
    throw new Error(`Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
  }
  return [value.subarray(offset, total), total];
}
var MAX_LENGTH2, Bytes;
var init_Bytes = __esm({
  "node_modules/@polkadot/types-codec/extended/Bytes.js"() {
    init_util();
    init_Raw();
    MAX_LENGTH2 = 10 * 1024 * 1024;
    Bytes = class extends Raw {
      constructor(registry, value) {
        const [u8a, decodedLength] = isU8a(value) && !(value instanceof Raw) ? decodeBytesU8a(value) : Array.isArray(value) || isString(value) ? [u8aToU8a(value), 0] : [value, 0];
        super(registry, u8a, decodedLength);
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        return this.length + compactToU8a(this.length).length;
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect(isBare) {
        const clength = compactToU8a(this.length);
        return {
          outer: isBare ? [super.toU8a()] : this.length ? [clength, super.toU8a()] : [clength]
        };
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "Bytes";
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        return isBare ? super.toU8a(isBare) : compactAddLength(this);
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/HashMap.js
var HashMap;
var init_HashMap = __esm({
  "node_modules/@polkadot/types-codec/extended/HashMap.js"() {
    init_Map();
    HashMap = class _HashMap extends CodecMap {
      static with(keyType, valType) {
        return class extends _HashMap {
          constructor(registry, value) {
            super(registry, keyType, valType, value);
          }
        };
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/Linkage.js
var EMPTY2;
var init_Linkage = __esm({
  "node_modules/@polkadot/types-codec/extended/Linkage.js"() {
    init_Option();
    init_Tuple();
    init_Vec();
    init_Struct();
    EMPTY2 = new Uint8Array();
  }
});

// node_modules/@polkadot/types-codec/native/Bool.js
var bool;
var init_Bool = __esm({
  "node_modules/@polkadot/types-codec/native/Bool.js"() {
    init_util();
    bool = class extends Boolean {
      registry;
      createdAtHash;
      initialU8aLength = 1;
      isStorageFallback;
      constructor(registry, value = false) {
        super(isU8a(value) ? value[0] === 1 : value instanceof Boolean ? value.valueOf() : !!value);
        this.registry = registry;
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        return 1 | 0;
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description Checks if the value is an empty value (true when it wraps false/default)
       */
      get isEmpty() {
        return this.isFalse;
      }
      /**
       * @description Checks if the value is an empty value (always false)
       */
      get isFalse() {
        return !this.isTrue;
      }
      /**
       * @description Checks if the value is an empty value (always false)
       */
      get isTrue() {
        return this.valueOf();
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return {
          outer: [this.toU8a()]
        };
      }
      /**
       * @description Returns a hex string representation of the value
       */
      toHex() {
        return u8aToHex(this.toU8a());
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman() {
        return this.toJSON();
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return this.valueOf();
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive() {
        return this.toJSON();
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "bool";
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return this.toJSON().toString();
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       */
      toU8a(_isBare) {
        return new Uint8Array([this.valueOf() ? 1 : 0]);
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/OptionBool.js
function decodeU8a2(registry, value) {
  return value[0] === 0 ? null : new bool(registry, value[0] === 1);
}
var OptionBool;
var init_OptionBool = __esm({
  "node_modules/@polkadot/types-codec/extended/OptionBool.js"() {
    init_util();
    init_Option();
    init_Bool();
    OptionBool = class extends Option {
      constructor(registry, value) {
        super(registry, bool, isU8a(value) || isHex(value) ? decodeU8a2(registry, u8aToU8a(value)) : value);
        this.initialU8aLength = 1;
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        return 1 | 0;
      }
      /**
       * @description Checks if the value is an empty value (always false)
       */
      get isFalse() {
        return this.isSome ? !this.value.valueOf() : false;
      }
      /**
       * @description Checks if the value is an empty value (always false)
       */
      get isTrue() {
        return this.isSome ? this.value.valueOf() : false;
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return { outer: [this.toU8a()] };
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType(isBare) {
        return isBare ? "bool" : "Option<bool>";
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        if (isBare) {
          return super.toU8a(true);
        }
        return this.isSome ? new Uint8Array([this.isTrue ? 1 : 2]) : new Uint8Array([0]);
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/Range.js
var Range;
var init_Range = __esm({
  "node_modules/@polkadot/types-codec/extended/Range.js"() {
    init_Tuple();
    Range = class _Range extends Tuple {
      __internal__rangeName;
      constructor(registry, Type2, value, { rangeName = "Range" } = {}) {
        super(registry, [Type2, Type2], value);
        this.__internal__rangeName = rangeName;
      }
      static with(Type2) {
        return class extends _Range {
          constructor(registry, value) {
            super(registry, Type2, value);
          }
        };
      }
      /**
       * @description Returns the starting range value
       */
      get start() {
        return this[0];
      }
      /**
       * @description Returns the ending range value
       */
      get end() {
        return this[1];
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return `${this.__internal__rangeName}<${this.start.toRawType()}>`;
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/RangeInclusive.js
var RangeInclusive;
var init_RangeInclusive = __esm({
  "node_modules/@polkadot/types-codec/extended/RangeInclusive.js"() {
    init_Range();
    RangeInclusive = class _RangeInclusive extends Range {
      constructor(registry, Type2, value) {
        super(registry, Type2, value, { rangeName: "RangeInclusive" });
      }
      static with(Type2) {
        return class extends _RangeInclusive {
          constructor(registry, value) {
            super(registry, Type2, value);
          }
        };
      }
    };
  }
});

// node_modules/@polkadot/types-codec/native/Text.js
function decodeText(value) {
  if (isU8a(value)) {
    if (!value.length) {
      return ["", 0];
    }
    if (value instanceof Raw) {
      return [u8aToString(value), 0];
    }
    const [offset, length] = compactFromU8aLim(value);
    const total = offset + length;
    if (length > MAX_LENGTH3) {
      throw new Error(`Text: length ${length.toString()} exceeds ${MAX_LENGTH3}`);
    } else if (total > value.length) {
      throw new Error(`Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    return [u8aToString(value.subarray(offset, total)), total];
  } else if (isHex(value)) {
    return [u8aToString(hexToU8a(value)), 0];
  }
  return [value ? value.toString() : "", 0];
}
var MAX_LENGTH3, Text;
var init_Text = __esm({
  "node_modules/@polkadot/types-codec/native/Text.js"() {
    init_util();
    init_Raw();
    MAX_LENGTH3 = 128 * 1024;
    Text = class extends String {
      registry;
      createdAtHash;
      initialU8aLength;
      isStorageFallback;
      __internal__override = null;
      constructor(registry, value) {
        const [str, decodedLength] = decodeText(value);
        super(str);
        this.registry = registry;
        this.initialU8aLength = decodedLength;
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        return this.toU8a().length;
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description Checks if the value is an empty value
       */
      get isEmpty() {
        return this.length === 0;
      }
      /**
       * @description The length of the value
       */
      get length() {
        return super.length;
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        return isString(other) ? this.toString() === other.toString() : false;
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        const value = stringToU8a(super.toString());
        return {
          outer: value.length ? [compactToU8a(value.length), value] : [compactToU8a(value.length)]
        };
      }
      /**
       * @description Set an override value for this
       */
      setOverride(override) {
        this.__internal__override = override;
      }
      /**
       * @description Returns a hex string representation of the value
       */
      toHex() {
        return u8aToHex(this.toU8a(true));
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman() {
        return this.toJSON();
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return this.toString();
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive() {
        return this.toJSON();
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "Text";
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return this.__internal__override || super.toString();
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        const encoded = stringToU8a(super.toString());
        return isBare ? encoded : compactAddLength(encoded);
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/Type.js
var Type;
var init_Type = __esm({
  "node_modules/@polkadot/types-codec/extended/Type.js"() {
    init_Text();
    init_utils4();
    Type = class extends Text {
      constructor(registry, value = "") {
        super(registry, value);
        this.setOverride(sanitize(this.toString()));
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "Type";
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/U8aFixed.js
function decodeU8aFixed(value, bitLength) {
  const u8a = u8aToU8a(value);
  const byteLength = bitLength / 8;
  if (!u8a.length) {
    return [new Uint8Array(byteLength), 0];
  }
  if (isU8a(value) ? u8a.length < byteLength : u8a.length !== byteLength) {
    throw new Error(`Expected input with ${byteLength} bytes (${bitLength} bits), found ${u8a.length} bytes`);
  }
  return [u8a.subarray(0, byteLength), byteLength];
}
var U8aFixed;
var init_U8aFixed = __esm({
  "node_modules/@polkadot/types-codec/extended/U8aFixed.js"() {
    init_util();
    init_Raw();
    U8aFixed = class _U8aFixed extends Raw {
      constructor(registry, value = new Uint8Array(), bitLength = 256) {
        const [u8a, decodedLength] = decodeU8aFixed(value, bitLength);
        super(registry, u8a, decodedLength);
      }
      static with(bitLength, typeName) {
        return class extends _U8aFixed {
          constructor(registry, value) {
            super(registry, value, bitLength);
          }
          toRawType() {
            return typeName || super.toRawType();
          }
        };
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return `[u8;${this.length}]`;
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/WrapperKeepOpaque.js
function decodeRaw(registry, typeName, value) {
  const Type2 = typeToConstructor(registry, typeName);
  if (isU8a(value) || isHex(value)) {
    try {
      const [, u8a] = isHex(value) ? [0, u8aToU8a(value)] : value instanceof Raw ? [0, value.subarray()] : compactStripLength(value);
      return [Type2, new Type2(registry, u8a), value];
    } catch {
      return [Type2, null, value];
    }
  }
  const instance = new Type2(registry, value);
  return [Type2, instance, compactAddLength(instance.toU8a())];
}
var WrapperKeepOpaque;
var init_WrapperKeepOpaque = __esm({
  "node_modules/@polkadot/types-codec/extended/WrapperKeepOpaque.js"() {
    init_util();
    init_Raw();
    init_utils4();
    init_Bytes();
    WrapperKeepOpaque = class _WrapperKeepOpaque extends Bytes {
      __internal__Type;
      __internal__decoded;
      __internal__opaqueName;
      constructor(registry, typeName, value, { opaqueName = "WrapperKeepOpaque" } = {}) {
        const [Type2, decoded, u8a] = decodeRaw(registry, typeName, value);
        super(registry, u8a);
        this.__internal__Type = Type2;
        this.__internal__decoded = decoded;
        this.__internal__opaqueName = opaqueName;
      }
      static with(Type2) {
        return class extends _WrapperKeepOpaque {
          constructor(registry, value) {
            super(registry, Type2, value);
          }
        };
      }
      /**
       * @description Checks if the wrapper is decodable
       */
      get isDecoded() {
        return !!this.__internal__decoded;
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return this.__internal__decoded ? {
          inner: [this.__internal__decoded.inspect()],
          outer: [compactToU8a(this.length)]
        } : {
          outer: [compactToU8a(this.length), this.toU8a(true)]
        };
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExtended, disableAscii) {
        return this.__internal__decoded ? this.__internal__decoded.toHuman(isExtended, disableAscii) : super.toHuman(isExtended, disableAscii);
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive(disableAscii) {
        return this.__internal__decoded ? this.__internal__decoded.toPrimitive(disableAscii) : super.toPrimitive(disableAscii);
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return `${this.__internal__opaqueName}<${this.registry.getClassName(this.__internal__Type) || (this.__internal__decoded ? this.__internal__decoded.toRawType() : new this.__internal__Type(this.registry).toRawType())}>`;
      }
      /**
       * @description Converts the Object to to a string (either decoded or bytes)
       */
      toString() {
        return this.__internal__decoded ? this.__internal__decoded.toString() : super.toString();
      }
      /**
       * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
       */
      unwrap() {
        if (!this.__internal__decoded) {
          throw new Error(`${this.__internal__opaqueName}: unwrapping an undecodable value`);
        }
        return this.__internal__decoded;
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/WrapperOpaque.js
var WrapperOpaque;
var init_WrapperOpaque = __esm({
  "node_modules/@polkadot/types-codec/extended/WrapperOpaque.js"() {
    init_WrapperKeepOpaque();
    WrapperOpaque = class _WrapperOpaque extends WrapperKeepOpaque {
      constructor(registry, typeName, value) {
        super(registry, typeName, value, { opaqueName: "WrapperOpaque" });
      }
      static with(Type2) {
        return class extends _WrapperOpaque {
          constructor(registry, value) {
            super(registry, Type2, value);
          }
        };
      }
      /**
       * @description The inner value for this wrapper, in all cases it _should_ be decodable (unlike KeepOpaque)
       */
      get inner() {
        return this.unwrap();
      }
    };
  }
});

// node_modules/@polkadot/types-codec/extended/index.js
var init_extended = __esm({
  "node_modules/@polkadot/types-codec/extended/index.js"() {
    init_BitVec();
    init_BTreeMap();
    init_BTreeSet();
    init_Bytes();
    init_HashMap();
    init_Linkage();
    init_Map();
    init_OptionBool();
    init_Range();
    init_RangeInclusive();
    init_Type();
    init_U8aFixed();
    init_WrapperKeepOpaque();
    init_WrapperOpaque();
  }
});

// node_modules/@polkadot/types-codec/native/Date.js
var init_Date = __esm({
  "node_modules/@polkadot/types-codec/native/Date.js"() {
    init_util();
  }
});

// node_modules/@polkadot/types-codec/native/Float.js
var Float;
var init_Float = __esm({
  "node_modules/@polkadot/types-codec/native/Float.js"() {
    init_util();
    Float = class _Float extends Number {
      encodedLength;
      registry;
      createdAtHash;
      initialU8aLength;
      isStorageFallback;
      __internal__bitLength;
      constructor(registry, value, { bitLength = 32 } = {}) {
        super(isU8a(value) || isHex(value) ? value.length === 0 ? 0 : u8aToFloat(u8aToU8a(value), { bitLength }) : value || 0);
        this.__internal__bitLength = bitLength;
        this.encodedLength = bitLength / 8;
        this.initialU8aLength = this.encodedLength;
        this.registry = registry;
      }
      static with(bitLength) {
        return class extends _Float {
          constructor(registry, value) {
            super(registry, value, { bitLength });
          }
        };
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description Returns true if the type wraps an empty/default all-0 value
       */
      get isEmpty() {
        return this.valueOf() === 0;
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        return this.valueOf() === Number(other);
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return {
          outer: [this.toU8a()]
        };
      }
      /**
       * @description Returns a hex string representation of the value
       */
      toHex() {
        return u8aToHex(this.toU8a());
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman() {
        return this.toString();
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return this.toHex();
      }
      /**
       * @description Returns the number representation (Same as valueOf)
       */
      toNumber() {
        return this.valueOf();
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive() {
        return this.toNumber();
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return `f${this.__internal__bitLength}`;
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       */
      toU8a(_isBare) {
        return floatToU8a(this, {
          bitLength: this.__internal__bitLength
        });
      }
    };
  }
});

// node_modules/@polkadot/types-codec/native/Json.js
function decodeJson(value) {
  return Object.entries(value || {});
}
var Json;
var init_Json = __esm({
  "node_modules/@polkadot/types-codec/native/Json.js"() {
    init_util();
    init_utils4();
    Json = class extends Map {
      registry;
      createdAtHash;
      initialU8aLength;
      isStorageFallback;
      constructor(registry, value) {
        const decoded = decodeJson(value);
        super(decoded);
        this.registry = registry;
        objectProperties(this, decoded.map(([k2]) => k2), (k2) => this.get(k2));
      }
      /**
       * @description Always 0, never encodes as a Uint8Array
       */
      get encodedLength() {
        return 0 | 0;
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description Checks if the value is an empty value
       */
      get isEmpty() {
        return [...this.keys()].length === 0;
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        return compareMap(this, other);
      }
      /**
       * @description Returns a typed value from the internal map
       */
      getT(key) {
        return this.get(key);
      }
      /**
       * @description Unimplemented, will throw
       */
      inspect() {
        throw new Error("Unimplemented");
      }
      /**
       * @description Unimplemented, will throw
       */
      toHex() {
        throw new Error("Unimplemented");
      }
      /**
       * @description Converts the Object to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman() {
        return [...this.entries()].reduce((json, [key, value]) => {
          json[key] = isFunction(value?.toHuman) ? value.toHuman() : value;
          return json;
        }, {});
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return [...this.entries()].reduce((json, [key, value]) => {
          json[key] = value;
          return json;
        }, {});
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive(disableAscii) {
        return [...this.entries()].reduce((json, [key, value]) => {
          json[key] = isFunction(value.toPrimitive) ? value.toPrimitive(disableAscii) : value;
          return json;
        }, {});
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "Json";
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return stringify(this.toJSON());
      }
      /**
       * @description Unimplemented, will throw
       */
      toU8a(_isBare) {
        throw new Error("Unimplemented");
      }
    };
  }
});

// node_modules/@polkadot/types-codec/native/Set.js
function encodeSet(setValues, values) {
  const encoded = new import_bn.default(0);
  for (let i = 0, count2 = values.length; i < count2; i++) {
    encoded.ior(bnToBn(setValues[values[i]] || 0));
  }
  return encoded;
}
function decodeSetArray(setValues, values) {
  const count2 = values.length;
  const result = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const key = values[i];
    if (isUndefined(setValues[key])) {
      throw new Error(`Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(", ")}`);
    }
    result[i] = key;
  }
  return result;
}
function decodeSetNumber(setValues, _value) {
  const bn = bnToBn(_value);
  const keys2 = Object.keys(setValues);
  const result = [];
  for (let i = 0, count2 = keys2.length; i < count2; i++) {
    const key = keys2[i];
    if (bn.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {
      result.push(key);
    }
  }
  const computed = encodeSet(setValues, result);
  if (!bn.eq(computed)) {
    throw new Error(`Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(", ")}`);
  }
  return result;
}
function decodeSet2(setValues, value = 0, bitLength) {
  if (bitLength % 8 !== 0) {
    throw new Error(`Expected valid bitLength, power of 8, found ${bitLength}`);
  }
  const byteLength = bitLength / 8;
  if (isU8a(value)) {
    return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), { isLe: true }));
  } else if (isString(value)) {
    return decodeSet2(setValues, u8aToU8a(value), byteLength);
  } else if (value instanceof Set || Array.isArray(value)) {
    const input = Array.isArray(value) ? value : [...value.values()];
    return decodeSetArray(setValues, input);
  }
  return decodeSetNumber(setValues, value);
}
var CodecSet;
var init_Set = __esm({
  "node_modules/@polkadot/types-codec/native/Set.js"() {
    init_util();
    init_utils4();
    CodecSet = class _CodecSet extends Set {
      registry;
      createdAtHash;
      initialU8aLength;
      isStorageFallback;
      __internal__allowed;
      __internal__byteLength;
      constructor(registry, setValues, value, bitLength = 8) {
        super(decodeSet2(setValues, value, bitLength));
        this.registry = registry;
        this.__internal__allowed = setValues;
        this.__internal__byteLength = bitLength / 8;
      }
      static with(values, bitLength) {
        var _a;
        return _a = class extends _CodecSet {
          constructor(registry, value) {
            super(registry, values, value, bitLength);
          }
        }, (() => {
          const keys2 = Object.keys(values);
          const count2 = keys2.length;
          const isKeys = new Array(count2);
          for (let i = 0; i < count2; i++) {
            isKeys[i] = `is${stringPascalCase(keys2[i])}`;
          }
          objectProperties(_a.prototype, isKeys, (_2, i, self2) => self2.strings.includes(keys2[i]));
        })(), _a;
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        return this.__internal__byteLength;
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description true is the Set contains no values
       */
      get isEmpty() {
        return this.size === 0;
      }
      /**
       * @description The actual set values as a string[]
       */
      get strings() {
        return [...super.values()];
      }
      /**
       * @description The encoded value for the set members
       */
      get valueEncoded() {
        return encodeSet(this.__internal__allowed, this.strings);
      }
      /**
       * @description adds a value to the Set (extended to allow for validity checking)
       */
      add = (key) => {
        if (this.__internal__allowed && isUndefined(this.__internal__allowed[key])) {
          throw new Error(`Set: Invalid key '${key}' on add`);
        }
        super.add(key);
        return this;
      };
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        if (Array.isArray(other)) {
          return compareArray(this.strings.sort(), other.sort());
        } else if (other instanceof Set) {
          return this.eq([...other.values()]);
        } else if (isNumber(other) || isBn(other)) {
          return this.valueEncoded.eq(bnToBn(other));
        }
        return false;
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return {
          outer: [this.toU8a()]
        };
      }
      /**
       * @description Returns a hex string representation of the value
       */
      toHex() {
        return u8aToHex(this.toU8a());
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman() {
        return this.toJSON();
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return this.strings;
      }
      /**
       * @description The encoded value for the set members
       */
      toNumber() {
        return this.valueEncoded.toNumber();
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive() {
        return this.toJSON();
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return stringify({ _set: this.__internal__allowed });
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return `[${this.strings.join(", ")}]`;
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       */
      toU8a(_isBare) {
        return bnToU8a(this.valueEncoded, {
          bitLength: this.__internal__byteLength * 8,
          isLe: true
        });
      }
    };
  }
});

// node_modules/@polkadot/types-codec/native/index.js
var init_native = __esm({
  "node_modules/@polkadot/types-codec/native/index.js"() {
    init_Bool();
    init_Date();
    init_Float();
    init_Json();
    init_Raw();
    init_Set();
    init_Struct();
    init_Text();
  }
});

// node_modules/@polkadot/types-codec/primitive/F32.js
var f32;
var init_F32 = __esm({
  "node_modules/@polkadot/types-codec/primitive/F32.js"() {
    init_Float();
    f32 = class extends Float.with(32) {
      // NOTE without this, we cannot properly determine extensions
      __FloatType = "f32";
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/F64.js
var f64;
var init_F64 = __esm({
  "node_modules/@polkadot/types-codec/primitive/F64.js"() {
    init_Float();
    f64 = class extends Float.with(64) {
      // NOTE without this, we cannot properly determine extensions
      __FloatType = "f64";
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/I8.js
var i8;
var init_I8 = __esm({
  "node_modules/@polkadot/types-codec/primitive/I8.js"() {
    init_Int2();
    i8 = class extends Int.with(8) {
      // NOTE without this, we cannot properly determine extensions
      __IntType = "i8";
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/I16.js
var i16;
var init_I16 = __esm({
  "node_modules/@polkadot/types-codec/primitive/I16.js"() {
    init_Int2();
    i16 = class extends Int.with(16) {
      // NOTE without this, we cannot properly determine extensions
      __IntType = "i16";
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/I32.js
var i32;
var init_I32 = __esm({
  "node_modules/@polkadot/types-codec/primitive/I32.js"() {
    init_Int2();
    i32 = class extends Int.with(32) {
      // NOTE without this, we cannot properly determine extensions
      __IntType = "i32";
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/I64.js
var i64;
var init_I64 = __esm({
  "node_modules/@polkadot/types-codec/primitive/I64.js"() {
    init_Int2();
    i64 = class extends Int.with(64) {
      // NOTE without this, we cannot properly determine extensions
      __IntType = "i64";
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/I128.js
var i128;
var init_I128 = __esm({
  "node_modules/@polkadot/types-codec/primitive/I128.js"() {
    init_Int2();
    i128 = class extends Int.with(128) {
      // NOTE without this, we cannot properly determine extensions
      __IntType = "i128";
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/I256.js
var i256;
var init_I256 = __esm({
  "node_modules/@polkadot/types-codec/primitive/I256.js"() {
    init_Int2();
    i256 = class extends Int.with(256) {
      // NOTE without this, we cannot properly determine extensions
      __IntType = "i256";
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/ISize.js
var isize;
var init_ISize = __esm({
  "node_modules/@polkadot/types-codec/primitive/ISize.js"() {
    init_I32();
    isize = class extends i32 {
      constructor(registry, value) {
        super(registry, value);
        throw new Error("The `isize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally i64) and WASM (always i32) code. Use one of the `i32` or `i64` types explicitly.");
      }
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/U8.js
var u82;
var init_U8 = __esm({
  "node_modules/@polkadot/types-codec/primitive/U8.js"() {
    init_UInt();
    u82 = class extends UInt.with(8) {
      // NOTE without this, we cannot properly determine extensions
      __UIntType = "u8";
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/U16.js
var u162;
var init_U16 = __esm({
  "node_modules/@polkadot/types-codec/primitive/U16.js"() {
    init_UInt();
    u162 = class extends UInt.with(16) {
      // NOTE without this, we cannot properly determine extensions
      __UIntType = "u16";
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/U32.js
var u323;
var init_U32 = __esm({
  "node_modules/@polkadot/types-codec/primitive/U32.js"() {
    init_UInt();
    u323 = class extends UInt.with(32) {
      // NOTE without this, we cannot properly determine extensions
      __UIntType = "u32";
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/U64.js
var u642;
var init_U64 = __esm({
  "node_modules/@polkadot/types-codec/primitive/U64.js"() {
    init_UInt();
    u642 = class extends UInt.with(64) {
      // NOTE without this, we cannot properly determine extensions
      __UIntType = "u64";
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/U128.js
var u128;
var init_U128 = __esm({
  "node_modules/@polkadot/types-codec/primitive/U128.js"() {
    init_UInt();
    u128 = class extends UInt.with(128) {
      // NOTE without this, we cannot properly determine extensions
      __UIntType = "u128";
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/U256.js
var u256;
var init_U256 = __esm({
  "node_modules/@polkadot/types-codec/primitive/U256.js"() {
    init_UInt();
    u256 = class extends UInt.with(256) {
      // NOTE without this, we cannot properly determine extensions
      __UIntType = "u256";
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/USize.js
var usize;
var init_USize = __esm({
  "node_modules/@polkadot/types-codec/primitive/USize.js"() {
    init_U32();
    usize = class extends u323 {
      constructor(registry, value) {
        super(registry, value);
        throw new Error("The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.");
      }
    };
  }
});

// node_modules/@polkadot/types-codec/primitive/index.js
var init_primitive = __esm({
  "node_modules/@polkadot/types-codec/primitive/index.js"() {
    init_F32();
    init_F64();
    init_I8();
    init_I16();
    init_I32();
    init_I64();
    init_I128();
    init_I256();
    init_ISize();
    init_U8();
    init_U16();
    init_U32();
    init_U64();
    init_U128();
    init_U256();
    init_USize();
  }
});

// node_modules/@polkadot/types-codec/bundle.js
var init_bundle10 = __esm({
  "node_modules/@polkadot/types-codec/bundle.js"() {
    init_packageInfo25();
    init_abstract();
    init_base();
    init_extended();
    init_native();
    init_primitive();
    init_utils4();
  }
});

// node_modules/@polkadot/types-codec/index.js
var init_types_codec = __esm({
  "node_modules/@polkadot/types-codec/index.js"() {
    init_packageDetect12();
    init_bundle10();
  }
});

// node_modules/@polkadot/types-create/util/typeSplit.js
function typeSplit(type) {
  const result = [];
  let c = 0;
  let f = 0;
  let s = 0;
  let t = 0;
  let start = 0;
  for (let i = 0, count2 = type.length; i < count2; i++) {
    switch (type[i]) {
      // if we are not nested, add the type
      case ",": {
        if (!(c || f || s || t)) {
          result.push(type.substring(start, i).trim());
          start = i + 1;
        }
        break;
      }
      // adjust compact/vec (and friends) depth
      case "<":
        c++;
        break;
      case ">":
        c--;
        break;
      // adjust fixed vec depths
      case "[":
        f++;
        break;
      case "]":
        f--;
        break;
      // adjust struct depth
      case "{":
        s++;
        break;
      case "}":
        s--;
        break;
      // adjust tuple depth
      case "(":
        t++;
        break;
      case ")":
        t--;
        break;
    }
  }
  if (c || f || s || t) {
    throw new Error(`Invalid definition (missing terminators) found in ${type}`);
  }
  result.push(type.substring(start, type.length).trim());
  return result;
}
var init_typeSplit = __esm({
  "node_modules/@polkadot/types-create/util/typeSplit.js"() {
  }
});

// node_modules/@polkadot/types-create/util/getTypeDef.js
function getTypeString(typeOrObj) {
  return isString(typeOrObj) ? typeOrObj.toString() : stringify(typeOrObj);
}
function isRustEnum2(details) {
  const values = Object.values(details);
  if (values.some((v3) => isNumber(v3))) {
    if (!values.every((v3) => isNumber(v3) && v3 >= 0 && v3 <= 255)) {
      throw new Error("Invalid number-indexed enum definition");
    }
    return false;
  }
  return true;
}
function _decodeEnum(value, details, count2, fallbackType) {
  value.info = TypeDefInfo.Enum;
  value.fallbackType = fallbackType;
  if (Array.isArray(details)) {
    value.sub = details.map((name, index) => ({
      index,
      info: TypeDefInfo.Plain,
      name,
      type: "Null"
    }));
  } else if (isRustEnum2(details)) {
    value.sub = Object.entries(details).map(([name, typeOrObj], index) => objectSpread({}, getTypeDef(getTypeString(typeOrObj || "Null"), { name }, count2), { index }));
  } else {
    value.sub = Object.entries(details).map(([name, index]) => ({
      index,
      info: TypeDefInfo.Plain,
      name,
      type: "Null"
    }));
  }
  return value;
}
function _decodeSet(value, details, fallbackType) {
  value.info = TypeDefInfo.Set;
  value.fallbackType = fallbackType;
  value.length = details._bitLength;
  value.sub = Object.entries(details).filter(([name]) => !name.startsWith("_")).map(([name, index]) => ({
    index,
    info: TypeDefInfo.Plain,
    name,
    type: "Null"
  }));
  return value;
}
function _decodeStruct(value, type, _2, count2) {
  const parsed = JSON.parse(type);
  const keys2 = Object.keys(parsed);
  if (parsed._enum) {
    return _decodeEnum(value, parsed._enum, count2, parsed._fallback);
  } else if (parsed._set) {
    return _decodeSet(value, parsed._set, parsed._fallback);
  }
  value.alias = parsed._alias ? new Map(Object.entries(parsed._alias)) : void 0;
  value.fallbackType = parsed._fallback;
  value.sub = keys2.filter((name) => !KNOWN_INTERNALS.includes(name)).map((name) => getTypeDef(getTypeString(parsed[name]), { name }, count2));
  return value;
}
function _decodeFixedVec(value, type, _2, count2) {
  const max3 = type.length - 1;
  let index = -1;
  let inner = 0;
  for (let i = 1; i < max3 && index === -1; i++) {
    switch (type[i]) {
      case ";": {
        if (inner === 0) {
          index = i;
        }
        break;
      }
      case "[":
      case "(":
      case "<":
        inner++;
        break;
      case "]":
      case ")":
      case ">":
        inner--;
        break;
    }
  }
  if (index === -1) {
    throw new Error(`${type}: Unable to extract location of ';'`);
  }
  const vecType = type.substring(1, index);
  const [strLength, displayName] = type.substring(index + 1, max3).split(";");
  const length = parseInt(strLength.trim(), 10);
  if (length > 2048) {
    throw new Error(`${type}: Only support for [Type; <length>], where length <= 2048`);
  }
  value.displayName = displayName;
  value.length = length;
  value.sub = getTypeDef(vecType, {}, count2);
  return value;
}
function _decodeTuple(value, _2, subType, count2) {
  value.sub = subType.length === 0 ? [] : typeSplit(subType).map((inner) => getTypeDef(inner, {}, count2));
  return value;
}
function _decodeAnyInt(value, type, _2, clazz) {
  const [strLength, displayName] = type.substring(clazz.length + 1, type.length - 1).split(",");
  const length = parseInt(strLength.trim(), 10);
  if (length > 8192 || length % 8) {
    throw new Error(`${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
  }
  value.displayName = displayName;
  value.length = length;
  return value;
}
function _decodeInt(value, type, subType) {
  return _decodeAnyInt(value, type, subType, "Int");
}
function _decodeUInt(value, type, subType) {
  return _decodeAnyInt(value, type, subType, "UInt");
}
function _decodeDoNotConstruct(value, type, _2) {
  const NAME_LENGTH = "DoNotConstruct".length;
  value.displayName = type.substring(NAME_LENGTH + 1, type.length - 1);
  return value;
}
function hasWrapper(type, [start, end]) {
  return type.startsWith(start) && type.slice(-1 * end.length) === end;
}
function extractSubType(type, [start, end]) {
  return type.substring(start.length, type.length - end.length);
}
function getTypeDef(_type, { displayName, name } = {}, count2 = 0) {
  const type = sanitize(_type);
  const value = { displayName, info: TypeDefInfo.Plain, name, type };
  if (++count2 > 64) {
    throw new Error("getTypeDef: Maximum nested limit reached");
  }
  const nested = nestedExtraction.find((nested2) => hasWrapper(type, nested2));
  if (nested) {
    value.info = nested[2];
    return nested[3](value, type, extractSubType(type, nested), count2);
  }
  const wrapped = wrappedExtraction.find((wrapped2) => hasWrapper(type, wrapped2));
  if (wrapped) {
    value.info = wrapped[2];
    value.sub = getTypeDef(extractSubType(type, wrapped), {}, count2);
  }
  return value;
}
var KNOWN_INTERNALS, nestedExtraction, wrappedExtraction;
var init_getTypeDef = __esm({
  "node_modules/@polkadot/types-create/util/getTypeDef.js"() {
    init_types_codec();
    init_util();
    init_types3();
    init_typeSplit();
    KNOWN_INTERNALS = ["_alias", "_fallback"];
    nestedExtraction = [
      ["[", "]", TypeDefInfo.VecFixed, _decodeFixedVec],
      ["{", "}", TypeDefInfo.Struct, _decodeStruct],
      ["(", ")", TypeDefInfo.Tuple, _decodeTuple],
      // the inner for these are the same as tuple, multiple values
      ["BTreeMap<", ">", TypeDefInfo.BTreeMap, _decodeTuple],
      ["HashMap<", ">", TypeDefInfo.HashMap, _decodeTuple],
      ["Int<", ">", TypeDefInfo.Int, _decodeInt],
      ["Result<", ">", TypeDefInfo.Result, _decodeTuple],
      ["UInt<", ">", TypeDefInfo.UInt, _decodeUInt],
      ["DoNotConstruct<", ">", TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]
    ];
    wrappedExtraction = [
      ["BTreeSet<", ">", TypeDefInfo.BTreeSet],
      ["Compact<", ">", TypeDefInfo.Compact],
      ["Linkage<", ">", TypeDefInfo.Linkage],
      ["Opaque<", ">", TypeDefInfo.WrapperOpaque],
      ["Option<", ">", TypeDefInfo.Option],
      ["Range<", ">", TypeDefInfo.Range],
      ["RangeInclusive<", ">", TypeDefInfo.RangeInclusive],
      ["Vec<", ">", TypeDefInfo.Vec],
      ["WrapperKeepOpaque<", ">", TypeDefInfo.WrapperKeepOpaque],
      ["WrapperOpaque<", ">", TypeDefInfo.WrapperOpaque]
    ];
  }
});

// node_modules/@polkadot/types-create/create/class.js
function getTypeDefType({ lookupName, type }) {
  return lookupName || type;
}
function getSubDefArray(value) {
  if (!Array.isArray(value.sub)) {
    throw new Error(`Expected subtype as TypeDef[] in ${stringify(value)}`);
  }
  return value.sub;
}
function getSubDef(value) {
  if (!value.sub || Array.isArray(value.sub)) {
    throw new Error(`Expected subtype as TypeDef in ${stringify(value)}`);
  }
  return value.sub;
}
function getSubType(value) {
  return getTypeDefType(getSubDef(value));
}
function getTypeClassMap(value) {
  const subs = getSubDefArray(value);
  const map3 = {};
  for (let i = 0, count2 = subs.length; i < count2; i++) {
    const sub = subs[i];
    if (!sub.name) {
      throw new Error(`No name found in definition ${stringify(sub)}`);
    }
    map3[sub.name] = getTypeDefType(sub);
  }
  return map3;
}
function getTypeClassArray(value) {
  return getSubDefArray(value).map(getTypeDefType);
}
function createInt(Clazz, { displayName, length }) {
  if (!isNumber(length)) {
    throw new Error(`Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
  }
  return Clazz.with(length, displayName);
}
function createHashMap(Clazz, value) {
  const [keyType, valueType] = getTypeClassArray(value);
  return Clazz.with(keyType, valueType);
}
function createWithSub(Clazz, value) {
  return Clazz.with(getSubType(value));
}
function constructTypeClass(registry, typeDef) {
  try {
    const Type2 = infoMapping[typeDef.info](registry, typeDef);
    if (!Type2) {
      throw new Error("No class created");
    }
    if (!Type2.__fallbackType && typeDef.fallbackType) {
      Type2.__fallbackType = typeDef.fallbackType;
    }
    return Type2;
  } catch (error) {
    throw new Error(`Unable to construct class from ${stringify(typeDef)}: ${error.message}`);
  }
}
function getTypeClass(registry, typeDef) {
  return registry.getUnsafe(typeDef.type, false, typeDef);
}
function createClassUnsafe(registry, type) {
  return (
    // just retrieve via name, no creation via typeDef
    registry.getUnsafe(type) || // we don't have an existing type, create the class via typeDef
    getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : getTypeDef(type))
  );
}
var infoMapping;
var init_class2 = __esm({
  "node_modules/@polkadot/types-create/create/class.js"() {
    init_types_codec();
    init_util();
    init_types3();
    init_getTypeDef();
    infoMapping = {
      [TypeDefInfo.BTreeMap]: (_registry, value) => createHashMap(BTreeMap, value),
      [TypeDefInfo.BTreeSet]: (_registry, value) => createWithSub(BTreeSet, value),
      [TypeDefInfo.Compact]: (_registry, value) => createWithSub(Compact, value),
      [TypeDefInfo.DoNotConstruct]: (_registry, value) => DoNotConstruct.with(value.displayName || value.type),
      [TypeDefInfo.Enum]: (_registry, value) => {
        const subs = getSubDefArray(value);
        return Enum.with(subs.every(({ type }) => type === "Null") ? subs.reduce((out, { index, name }, count2) => {
          if (!name) {
            throw new Error("No name found in sub definition");
          }
          out[name] = index || count2;
          return out;
        }, {}) : getTypeClassMap(value));
      },
      [TypeDefInfo.HashMap]: (_registry, value) => createHashMap(HashMap, value),
      [TypeDefInfo.Int]: (_registry, value) => createInt(Int, value),
      // We have circular deps between Linkage & Struct
      [TypeDefInfo.Linkage]: (_registry, value) => {
        const type = `Option<${getSubType(value)}>`;
        const Clazz = Struct.with({ previous: type, next: type });
        Clazz.prototype.toRawType = function() {
          return `Linkage<${this.next.toRawType(true)}>`;
        };
        return Clazz;
      },
      [TypeDefInfo.Null]: (_registry, _value) => Null,
      [TypeDefInfo.Option]: (_registry, value) => {
        if (!value.sub || Array.isArray(value.sub)) {
          throw new Error("Expected type information for Option");
        }
        return createWithSub(Option, value);
      },
      [TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
      [TypeDefInfo.Range]: (_registry, value) => createWithSub(Range, value),
      [TypeDefInfo.RangeInclusive]: (_registry, value) => createWithSub(RangeInclusive, value),
      [TypeDefInfo.Result]: (_registry, value) => {
        const [Ok, Err] = getTypeClassArray(value);
        return Result.with({ Err, Ok });
      },
      [TypeDefInfo.Set]: (_registry, value) => CodecSet.with(getSubDefArray(value).reduce((result, { index, name }) => {
        if (!name || !isNumber(index)) {
          throw new Error("No name found in sub definition");
        }
        result[name] = index;
        return result;
      }, {}), value.length),
      [TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
      [TypeDefInfo.Struct]: (_registry, value) => Struct.with(getTypeClassMap(value), value.alias),
      [TypeDefInfo.Tuple]: (_registry, value) => Tuple.with(getTypeClassArray(value)),
      [TypeDefInfo.UInt]: (_registry, value) => createInt(UInt, value),
      [TypeDefInfo.Vec]: (_registry, { sub }) => {
        if (!sub || Array.isArray(sub)) {
          throw new Error("Expected type information for vector");
        }
        return sub.type === "u8" ? Bytes : Vec.with(getTypeDefType(sub));
      },
      [TypeDefInfo.VecFixed]: (_registry, { displayName, length, sub }) => {
        if (!isNumber(length) || !sub || Array.isArray(sub)) {
          throw new Error("Expected length & type information for fixed vector");
        }
        return sub.type === "u8" ? U8aFixed.with(length * 8, displayName) : VecFixed.with(getTypeDefType(sub), length);
      },
      [TypeDefInfo.WrapperKeepOpaque]: (_registry, value) => createWithSub(WrapperKeepOpaque, value),
      [TypeDefInfo.WrapperOpaque]: (_registry, value) => createWithSub(WrapperOpaque, value)
    };
  }
});

// node_modules/@polkadot/types-create/create/type.js
function checkInstance(created, matcher) {
  const u8a = created.toU8a();
  const rawType = created.toRawType();
  const isOk = (
    // full match, all ok
    u8aEq(u8a, matcher) || // on a length-prefixed type, just check the actual length
    ["Bytes", "Text", "Type"].includes(rawType) && matcher.length === created.length || // when the created is empty and matcher is also empty, let it slide...
    created.isEmpty && matcher.every((v3) => !v3)
  );
  if (!isOk) {
    throw new Error(`${rawType}:: Decoded input doesn't match input, received ${u8aToHex(matcher, 512)} (${matcher.length} bytes), created ${u8aToHex(u8a, 512)} (${u8a.length} bytes)`);
  }
}
function checkPedantic(created, [value]) {
  if (isU8a(value)) {
    checkInstance(created, value);
  } else if (isHex(value)) {
    checkInstance(created, u8aToU8a(value));
  }
}
function initType(registry, Type2, params = [], { blockHash, isFallback, isOptional, isPedantic } = {}) {
  const created = new (isOptional ? Option.with(Type2) : Type2)(registry, ...params);
  isPedantic && checkPedantic(created, params);
  if (blockHash) {
    created.createdAtHash = createTypeUnsafe(registry, "BlockHash", [blockHash]);
  }
  if (isFallback) {
    created.isStorageFallback = true;
  }
  return created;
}
function createTypeUnsafe(registry, type, params = [], options = {}) {
  let Clazz = null;
  let firstError = null;
  try {
    Clazz = createClassUnsafe(registry, type);
    return initType(registry, Clazz, params, options);
  } catch (error) {
    firstError = new Error(`createType(${type}):: ${error.message}`);
  }
  if (Clazz?.__fallbackType) {
    try {
      Clazz = createClassUnsafe(registry, Clazz.__fallbackType);
      return initType(registry, Clazz, params, options);
    } catch {
    }
  }
  throw firstError;
}
var init_type = __esm({
  "node_modules/@polkadot/types-create/create/type.js"() {
    init_types_codec();
    init_util();
    init_class2();
  }
});

// node_modules/@polkadot/types-create/create/index.js
var init_create = __esm({
  "node_modules/@polkadot/types-create/create/index.js"() {
    init_class2();
    init_type();
  }
});

// node_modules/@polkadot/types-create/util/encodeTypes.js
function paramsNotation(outer, inner, transform = stringIdentity) {
  return `${outer}${inner ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(", ")}>` : ""}`;
}
function encodeWithParams(registry, typeDef, outer) {
  const { info: info6, sub } = typeDef;
  switch (info6) {
    case TypeDefInfo.BTreeMap:
    case TypeDefInfo.BTreeSet:
    case TypeDefInfo.Compact:
    case TypeDefInfo.HashMap:
    case TypeDefInfo.Linkage:
    case TypeDefInfo.Option:
    case TypeDefInfo.Range:
    case TypeDefInfo.RangeInclusive:
    case TypeDefInfo.Result:
    case TypeDefInfo.Vec:
    case TypeDefInfo.WrapperKeepOpaque:
    case TypeDefInfo.WrapperOpaque:
      return paramsNotation(outer, sub, (p) => encodeTypeDef(registry, p));
  }
  throw new Error(`Unable to encode ${stringify(typeDef)} with params`);
}
function encodeSubTypes(registry, sub, asEnum, extra) {
  const names = sub.map(({ name }) => name);
  if (!names.every((n) => !!n)) {
    throw new Error(`Subtypes does not have consistent names, ${names.join(", ")}`);
  }
  const inner = objectSpread({}, extra);
  for (let i = 0, count2 = sub.length; i < count2; i++) {
    const def = sub[i];
    if (!def.name) {
      throw new Error(`No name found in ${stringify(def)}`);
    }
    inner[def.name] = encodeTypeDef(registry, def);
  }
  return stringify(asEnum ? { _enum: inner } : inner);
}
function encodeType(registry, typeDef, withLookup = true) {
  return withLookup && typeDef.lookupName ? typeDef.lookupName : encoders[typeDef.info](registry, typeDef);
}
function encodeTypeDef(registry, typeDef) {
  return typeDef.displayName && !INFO_WRAP.some((i) => typeDef.displayName === i) ? typeDef.displayName : encodeType(registry, typeDef);
}
function withTypeString(registry, typeDef) {
  return objectSpread({}, typeDef, {
    type: encodeType(registry, typeDef, false)
  });
}
var stringIdentity, INFO_WRAP, encoders;
var init_encodeTypes = __esm({
  "node_modules/@polkadot/types-create/util/encodeTypes.js"() {
    init_util();
    init_types3();
    stringIdentity = (value) => value.toString();
    INFO_WRAP = ["BTreeMap", "BTreeSet", "Compact", "HashMap", "Option", "Result", "Vec"];
    encoders = {
      [TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, "BTreeMap"),
      [TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, "BTreeSet"),
      [TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Compact"),
      [TypeDefInfo.DoNotConstruct]: (registry, { displayName, lookupIndex, lookupName }) => `DoNotConstruct<${lookupName || displayName || (isUndefined(lookupIndex) ? "Unknown" : registry.createLookupType(lookupIndex))}>`,
      [TypeDefInfo.Enum]: (registry, { sub }) => {
        if (!Array.isArray(sub)) {
          throw new Error("Unable to encode Enum type");
        }
        return sub.every(({ type }) => type === "Null") ? stringify({ _enum: sub.map(({ name }, index) => `${name || `Empty${index}`}`) }) : encodeSubTypes(registry, sub, true);
      },
      [TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, "HashMap"),
      [TypeDefInfo.Int]: (_registry, { length = 32 }) => `Int<${length}>`,
      [TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Linkage"),
      [TypeDefInfo.Null]: (_registry, _typeDef) => "Null",
      [TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Option"),
      [TypeDefInfo.Plain]: (_registry, { displayName, type }) => displayName || type,
      [TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Range"),
      [TypeDefInfo.RangeInclusive]: (registry, typeDef) => encodeWithParams(registry, typeDef, "RangeInclusive"),
      [TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Result"),
      [TypeDefInfo.Set]: (_registry, { length = 8, sub }) => {
        if (!Array.isArray(sub)) {
          throw new Error("Unable to encode Set type");
        }
        return stringify({
          _set: sub.reduce((all3, { index, name }, count2) => objectSpread(all3, { [`${name || `Unknown${index || count2}`}`]: index || count2 }), { _bitLength: length || 8 })
        });
      },
      [TypeDefInfo.Si]: (_registry, { lookupName, type }) => lookupName || type,
      [TypeDefInfo.Struct]: (registry, { alias: alias2, sub }) => {
        if (!Array.isArray(sub)) {
          throw new Error("Unable to encode Struct type");
        }
        return encodeSubTypes(registry, sub, false, alias2 ? {
          _alias: [...alias2.entries()].reduce((all3, [k2, v3]) => objectSpread(all3, { [k2]: v3 }), {})
        } : {});
      },
      [TypeDefInfo.Tuple]: (registry, { sub }) => {
        if (!Array.isArray(sub)) {
          throw new Error("Unable to encode Tuple type");
        }
        return `(${sub.map((type) => encodeTypeDef(registry, type)).join(",")})`;
      },
      [TypeDefInfo.UInt]: (_registry, { length = 32 }) => `UInt<${length}>`,
      [TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Vec"),
      [TypeDefInfo.VecFixed]: (_registry, { length, sub }) => {
        if (!isNumber(length) || !sub || Array.isArray(sub)) {
          throw new Error("Unable to encode VecFixed type");
        }
        return `[${sub.type};${length}]`;
      },
      [TypeDefInfo.WrapperKeepOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, "WrapperKeepOpaque"),
      [TypeDefInfo.WrapperOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, "WrapperOpaque")
    };
  }
});

// node_modules/@polkadot/types-create/util/xcm.js
function mapXcmTypes(version2) {
  return XCM_MAPPINGS.reduce((all3, key) => objectSpread(all3, { [key]: `${key}${version2}` }), {});
}
var XCM_MAPPINGS;
var init_xcm = __esm({
  "node_modules/@polkadot/types-create/util/xcm.js"() {
    init_util();
    XCM_MAPPINGS = ["AssetInstance", "Fungibility", "Junction", "Junctions", "MultiAsset", "MultiAssetFilter", "MultiLocation", "Response", "WildFungibility", "WildMultiAsset", "Xcm", "XcmError", "XcmOrder"];
  }
});

// node_modules/@polkadot/types-create/util/index.js
var init_util4 = __esm({
  "node_modules/@polkadot/types-create/util/index.js"() {
    init_encodeTypes();
    init_getTypeDef();
    init_typeSplit();
    init_xcm();
  }
});

// node_modules/@polkadot/types-create/exports.js
var init_exports = __esm({
  "node_modules/@polkadot/types-create/exports.js"() {
    init_create();
    init_util4();
  }
});

// node_modules/@polkadot/types-create/bundle.js
var init_bundle11 = __esm({
  "node_modules/@polkadot/types-create/bundle.js"() {
    init_packageInfo26();
    init_types3();
    init_exports();
  }
});

// node_modules/@polkadot/types-create/index.js
var init_types_create = __esm({
  "node_modules/@polkadot/types-create/index.js"() {
    init_packageDetect11();
    init_bundle11();
  }
});

// node_modules/@polkadot/types/interfaces/xcm/v0.js
var v02;
var init_v02 = __esm({
  "node_modules/@polkadot/types/interfaces/xcm/v0.js"() {
    v02 = {
      FungibilityV0: "FungibilityV1",
      WildFungibilityV0: "WildFungibilityV1",
      AssetInstanceV0: {
        _enum: {
          Undefined: "Null",
          Index8: "u8",
          Index16: "Compact<u16>",
          Index32: "Compact<u32>",
          Index64: "Compact<u64>",
          Index128: "Compact<u128>",
          Array4: "[u8; 4]",
          Array8: "[u8; 8]",
          Array16: "[u8; 16]",
          Array32: "[u8; 32]",
          Blob: "Vec<u8>"
        }
      },
      JunctionV0: {
        _enum: {
          Parent: "Null",
          Parachain: "Compact<u32>",
          AccountId32: {
            network: "NetworkId",
            id: "AccountId"
          },
          AccountIndex64: {
            network: "NetworkId",
            index: "Compact<u64>"
          },
          AccountKey20: {
            network: "NetworkId",
            key: "[u8; 20]"
          },
          PalletInstance: "u8",
          GeneralIndex: "Compact<u128>",
          GeneralKey: "Vec<u8>",
          OnlyChild: "Null",
          Plurality: {
            id: "BodyId",
            part: "BodyPart"
          }
        }
      },
      MultiAssetV0: {
        _enum: {
          None: "Null",
          All: "Null",
          AllFungible: "Null",
          AllNonFungible: "Null",
          AllAbstractFungible: "Vec<u8>",
          AllAbstractNonFungible: "Vec<u8>",
          AllConcreteFungible: "MultiLocationV0",
          AllConcreteNonFungible: "MultiLocationV0",
          AbstractFungible: {
            id: "Vec<u8>",
            instance: "Compact<u128>"
          },
          AbstractNonFungible: {
            class: "Vec<u8>",
            instance: "AssetInstanceV0"
          },
          ConcreteFungible: {
            id: "MultiLocationV0",
            amount: "Compact<u128>"
          },
          ConcreteNonFungible: {
            class: "MultiLocationV0",
            instance: "AssetInstanceV0"
          }
        }
      },
      MultiLocationV0: {
        _enum: {
          Here: "Null",
          X1: "JunctionV0",
          X2: "(JunctionV0, JunctionV0)",
          X3: "(JunctionV0, JunctionV0, JunctionV0)",
          X4: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
          X5: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
          X6: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
          X7: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
          X8: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)"
        }
      },
      OriginKindV0: {
        _enum: ["Native", "SovereignAccount", "Superuser", "Xcm"]
      },
      ResponseV0: {
        _enum: {
          Assets: "Vec<MultiAssetV0>"
        }
      },
      XcmV0: {
        _enum: {
          WithdrawAsset: {
            assets: "Vec<MultiAssetV0>",
            effects: "Vec<XcmOrderV0>"
          },
          ReserveAssetDeposit: {
            assets: "Vec<MultiAssetV0>",
            effects: "Vec<XcmOrderV0>"
          },
          ReceiveTeleportedAsset: {
            assets: "Vec<MultiAssetV0>",
            effects: "Vec<XcmOrderV0>"
          },
          QueryResponse: {
            queryId: "Compact<u64>",
            response: "ResponseV0"
          },
          TransferAsset: {
            assets: "Vec<MultiAssetV0>",
            dest: "MultiLocationV0"
          },
          TransferReserveAsset: {
            assets: "Vec<MultiAssetV0>",
            dest: "MultiLocationV0",
            effects: "Vec<XcmOrderV0>"
          },
          Transact: {
            originType: "XcmOriginKind",
            requireWeightAtMost: "u64",
            call: "DoubleEncodedCall"
          },
          HrmpNewChannelOpenRequest: {
            sender: "Compact<u32>",
            maxMessageSize: "Compact<u32>",
            maxCapacity: "Compact<u32>"
          },
          HrmpChannelAccepted: {
            recipient: "Compact<u32>"
          },
          HrmpChannelClosing: {
            initiator: "Compact<u32>",
            sender: "Compact<u32>",
            recipient: "Compact<u32>"
          },
          RelayedFrom: {
            who: "MultiLocationV0",
            message: "XcmV0"
          }
        }
      },
      XcmErrorV0: {
        _enum: {
          Undefined: "Null",
          Overflow: "Null",
          Unimplemented: "Null",
          UnhandledXcmVersion: "Null",
          UnhandledXcmMessage: "Null",
          UnhandledEffect: "Null",
          EscalationOfPrivilege: "Null",
          UntrustedReserveLocation: "Null",
          UntrustedTeleportLocation: "Null",
          DestinationBufferOverflow: "Null",
          SendFailed: "Null",
          CannotReachDestination: "(MultiLocation, Xcm)",
          MultiLocationFull: "Null",
          FailedToDecode: "Null",
          BadOrigin: "Null",
          ExceedsMaxMessageSize: "Null",
          FailedToTransactAsset: "Null",
          WeightLimitReached: "Weight",
          Wildcard: "Null",
          TooMuchWeightRequired: "Null",
          NotHoldingFees: "Null",
          WeightNotComputable: "Null",
          Barrier: "Null",
          NotWithdrawable: "Null",
          LocationCannotHold: "Null",
          TooExpensive: "Null",
          AssetNotFound: "Null",
          RecursionLimitReached: "Null"
        }
      },
      XcmOrderV0: {
        _enum: {
          Null: "Null",
          DepositAsset: {
            assets: "Vec<MultiAssetV0>",
            dest: "MultiLocationV0"
          },
          DepositReserveAsset: {
            assets: "Vec<MultiAssetV0>",
            dest: "MultiLocationV0",
            effects: "Vec<XcmOrderV0>"
          },
          ExchangeAsset: {
            give: "Vec<MultiAssetV0>",
            receive: "Vec<MultiAssetV0>"
          },
          InitiateReserveWithdraw: {
            assets: "Vec<MultiAssetV0>",
            reserve: "MultiLocationV0",
            effects: "Vec<XcmOrderV0>"
          },
          InitiateTeleport: {
            assets: "Vec<MultiAssetV0>",
            dest: "MultiLocationV0",
            effects: "Vec<XcmOrderV0>"
          },
          QueryHolding: {
            queryId: "Compact<u64>",
            dest: "MultiLocationV0",
            assets: "Vec<MultiAssetV0>"
          },
          BuyExecution: {
            fees: "MultiAssetV0",
            weight: "u64",
            debt: "u64",
            haltOnError: "bool",
            xcm: "Vec<XcmV0>"
          }
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/xcm/v1.js
var v16;
var init_v16 = __esm({
  "node_modules/@polkadot/types/interfaces/xcm/v1.js"() {
    v16 = {
      AssetInstanceV1: {
        _enum: {
          Undefined: "Null",
          Index: "Compact<u128>",
          Array4: "[u8; 4]",
          Array8: "[u8; 8]",
          Array16: "[u8; 16]",
          Array32: "[u8; 32]",
          Blob: "Bytes"
        }
      },
      FungibilityV1: {
        _enum: {
          Fungible: "Compact<u128>",
          NonFungible: "AssetInstanceV1"
        }
      },
      JunctionV1: {
        _enum: {
          Parachain: "Compact<u32>",
          AccountId32: {
            network: "NetworkId",
            id: "AccountId"
          },
          AccountIndex64: {
            network: "NetworkId",
            index: "Compact<u64>"
          },
          AccountKey20: {
            network: "NetworkId",
            key: "[u8; 20]"
          },
          PalletInstance: "u8",
          GeneralIndex: "Compact<u128>",
          GeneralKey: "Vec<u8>",
          OnlyChild: "Null",
          Plurality: {
            id: "BodyId",
            part: "BodyPart"
          }
        }
      },
      JunctionsV1: {
        _enum: {
          Here: "Null",
          X1: "JunctionV1",
          X2: "(JunctionV1, JunctionV1)",
          X3: "(JunctionV1, JunctionV1, JunctionV1)",
          X4: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
          X5: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
          X6: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
          X7: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
          X8: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)"
        }
      },
      MultiAssetsV1: "Vec<MultiAssetV1>",
      MultiAssetV1: {
        id: "XcmAssetId",
        fungibility: "FungibilityV1"
      },
      MultiAssetFilterV1: {
        _enum: {
          Definite: "MultiAssetsV1",
          Wild: "WildMultiAssetV1"
        }
      },
      MultiLocationV1: {
        parents: "u8",
        interior: "JunctionsV1"
      },
      OriginKindV1: "OriginKindV0",
      ResponseV1: {
        _enum: {
          Assets: "MultiAssetsV1"
        }
      },
      WildFungibilityV1: {
        _enum: ["Fungible", "NonFungible"]
      },
      WildMultiAssetV1: {
        _enum: {
          All: "Null",
          AllOf: {
            id: "XcmAssetId",
            fungibility: "WildFungibilityV1"
          }
        }
      },
      XcmV1: {
        _enum: {
          WithdrawAsset: {
            assets: "MultiAssetsV1",
            effects: "Vec<XcmOrderV1>"
          },
          ReserveAssetDeposit: {
            assets: "MultiAssetsV1",
            effects: "Vec<XcmOrderV1>"
          },
          ReceiveTeleportedAsset: {
            assets: "MultiAssetsV1",
            effects: "Vec<XcmOrderV1>"
          },
          QueryResponse: {
            queryId: "Compact<u64>",
            response: "ResponseV1"
          },
          TransferAsset: {
            assets: "MultiAssetsV1",
            dest: "MultiLocationV1"
          },
          TransferReserveAsset: {
            assets: "MultiAssetsV1",
            dest: "MultiLocationV1",
            effects: "Vec<XcmOrderV1>"
          },
          Transact: {
            originType: "XcmOriginKind",
            requireWeightAtMost: "u64",
            call: "DoubleEncodedCall"
          },
          HrmpNewChannelOpenRequest: {
            sender: "Compact<u32>",
            maxMessageSize: "Compact<u32>",
            maxCapacity: "Compact<u32>"
          },
          HrmpChannelAccepted: {
            recipient: "Compact<u32>"
          },
          HrmpChannelClosing: {
            initiator: "Compact<u32>",
            sender: "Compact<u32>",
            recipient: "Compact<u32>"
          },
          RelayedFrom: {
            who: "MultiLocationV1",
            message: "XcmV1"
          }
        }
      },
      XcmErrorV1: {
        _enum: {
          Undefined: "Null",
          Overflow: "Null",
          Unimplemented: "Null",
          UnhandledXcmVersion: "Null",
          UnhandledXcmMessage: "Null",
          UnhandledEffect: "Null",
          EscalationOfPrivilege: "Null",
          UntrustedReserveLocation: "Null",
          UntrustedTeleportLocation: "Null",
          DestinationBufferOverflow: "Null",
          SendFailed: "Null",
          CannotReachDestination: "(MultiLocationV1, XcmV1)",
          MultiLocationFull: "Null",
          FailedToDecode: "Null",
          BadOrigin: "Null",
          ExceedsMaxMessageSize: "Null",
          FailedToTransactAsset: "Null",
          WeightLimitReached: "Weight",
          Wildcard: "Null",
          TooMuchWeightRequired: "Null",
          NotHoldingFees: "Null",
          WeightNotComputable: "Null",
          Barrier: "Null",
          NotWithdrawable: "Null",
          LocationCannotHold: "Null",
          TooExpensive: "Null",
          AssetNotFound: "Null",
          DestinationUnsupported: "Null",
          RecursionLimitReached: "Null"
        }
      },
      XcmOrderV1: {
        _enum: {
          Noop: "Null",
          DepositAsset: {
            assets: "MultiAssetFilterV1",
            maxAssets: "u32",
            beneficiary: "MultiLocationV1"
          },
          DepositReserveAsset: {
            assets: "MultiAssetFilterV1",
            maxAssets: "u32",
            dest: "MultiLocationV1",
            effects: "Vec<XcmOrderV1>"
          },
          ExchangeAsset: {
            give: "MultiAssetFilterV1",
            receive: "MultiAssetsV1"
          },
          InitiateReserveWithdraw: {
            assets: "MultiAssetFilterV1",
            reserve: "MultiLocationV1",
            effects: "Vec<XcmOrderV1>"
          },
          InitiateTeleport: {
            assets: "MultiAssetFilterV1",
            dest: "MultiLocationV1",
            effects: "Vec<XcmOrderV1>"
          },
          QueryHolding: {
            queryId: "Compact<u64>",
            dest: "MultiLocationV1",
            assets: "MultiAssetFilterV1"
          },
          BuyExecution: {
            fees: "MultiAssetV1",
            weight: "u64",
            debt: "u64",
            haltOnError: "bool",
            instructions: "Vec<XcmV1>"
          }
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/xcm/v2.js
var v2;
var init_v2 = __esm({
  "node_modules/@polkadot/types/interfaces/xcm/v2.js"() {
    v2 = {
      AssetInstanceV2: "AssetInstanceV1",
      FungibilityV2: "FungibilityV1",
      JunctionV2: "JunctionV1",
      JunctionsV2: "JunctionsV1",
      MultiAssetsV2: "MultiAssetsV1",
      MultiAssetV2: "MultiAssetV1",
      MultiAssetFilterV2: "MultiAssetFilterV1",
      MultiLocationV2: "MultiLocationV1",
      OriginKindV2: "OriginKindV1",
      WildFungibilityV2: "WildFungibilityV1",
      ResponseV2: {
        _enum: {
          Null: "Null",
          Assets: "MultiAssetsV2",
          ExecutionResult: "ResponseV2Result"
        }
      },
      ResponseV2Error: "(u32, XcmErrorV2)",
      ResponseV2Result: "Result<Null, ResponseV2Error>",
      WeightLimitV2: {
        _enum: {
          Unlimited: "Null",
          Limited: "Compact<u64>"
        }
      },
      InstructionV2: {
        _enum: {
          WithdrawAsset: "MultiAssetsV2",
          ReserveAssetDeposited: "MultiAssetsV2",
          ReceiveTeleportedAsset: "MultiAssetsV2",
          QueryResponse: {
            queryId: "Compact<u64>",
            response: "ResponseV2",
            maxWeight: "Compact<u64>"
          },
          TransferAsset: {
            assets: "MultiAssetsV2",
            beneficiary: "MultiLocationV2"
          },
          TransferReserveAsset: {
            assets: "MultiAssetsV2",
            dest: "MultiLocationV2",
            xcm: "XcmV2"
          },
          Transact: {
            originType: "OriginKindV2",
            requireWeightAtMost: "u64",
            call: "DoubleEncodedCall"
          },
          HrmpNewChannelOpenRequest: {
            sender: "Compact<u32>",
            maxMessageSize: "Compact<u32>",
            maxCapacity: "Compact<u32>"
          },
          HrmpChannelAccepted: {
            recipient: "Compact<u32>"
          },
          HrmpChannelClosing: {
            initiator: "Compact<u32>",
            sender: "Compact<u32>",
            recipient: "Compact<u32>"
          },
          ClearOrigin: "Null",
          DescendOrigin: "InteriorMultiLocation",
          ReportError: {
            queryId: "Compact<u64>",
            dest: "MultiLocationV2",
            maxResponseWeight: "Compact<u64>"
          },
          DepositAsset: {
            assets: "MultiAssetFilterV2",
            maxAssets: "u32",
            beneficiary: "MultiLocationV2"
          },
          DepositReserveAsset: {
            assets: "MultiAssetFilterV2",
            maxAssets: "u32",
            dest: "MultiLocationV2",
            xcm: "XcmV2"
          },
          ExchangeAsset: {
            give: "MultiAssetFilterV2",
            receive: "MultiAssetsV2"
          },
          InitiateReserveWithdraw: {
            assets: "MultiAssetFilterV2",
            reserve: "MultiLocationV2",
            xcm: "XcmV2"
          },
          InitiateTeleport: {
            assets: "MultiAssetFilterV2",
            dest: "MultiLocationV2",
            xcm: "XcmV2"
          },
          QueryHolding: {
            query_id: "Compact<u64>",
            dest: "MultiLocationV2",
            assets: "MultiAssetFilterV2",
            maxResponse_Weight: "Compact<u64>"
          },
          BuyExecution: {
            fees: "MultiAssetV2",
            weightLimit: "WeightLimitV2"
          },
          RefundSurplus: "Null",
          SetErrorHandler: "XcmV2",
          SetAppendix: "XcmV2",
          ClearError: "Null",
          ClaimAsset: {
            assets: "MultiAssetsV2",
            ticket: "MultiLocationV2"
          },
          Trap: "u64"
        }
      },
      WildMultiAssetV2: "WildMultiAssetV1",
      XcmV2: "Vec<InstructionV2>",
      XcmErrorV2: {
        _enum: {
          Undefined: "Null",
          Overflow: "Null",
          Unimplemented: "Null",
          UnhandledXcmVersion: "Null",
          UnhandledXcmMessage: "Null",
          UnhandledEffect: "Null",
          EscalationOfPrivilege: "Null",
          UntrustedReserveLocation: "Null",
          UntrustedTeleportLocation: "Null",
          DestinationBufferOverflow: "Null",
          MultiLocationFull: "Null",
          MultiLocationNotInvertible: "Null",
          FailedToDecode: "Null",
          BadOrigin: "Null",
          ExceedsMaxMessageSize: "Null",
          FailedToTransactAsset: "Null",
          WeightLimitReached: "Weight",
          Wildcard: "Null",
          TooMuchWeightRequired: "Null",
          NotHoldingFees: "Null",
          WeightNotComputable: "Null",
          Barrier: "Null",
          NotWithdrawable: "Null",
          LocationCannotHold: "Null",
          TooExpensive: "Null",
          AssetNotFound: "Null",
          DestinationUnsupported: "Null",
          RecursionLimitReached: "Null",
          Transport: "Null",
          Unroutable: "Null",
          UnknownWeightRequired: "Null",
          Trap: "u64",
          UnknownClaim: "Null",
          InvalidLocation: "Null"
        }
      },
      XcmOrderV2: "XcmOrderV1"
    };
  }
});

// node_modules/@polkadot/types/interfaces/xcm/definitions.js
var XCM_LATEST, xcm, location2, definitions_default62;
var init_definitions62 = __esm({
  "node_modules/@polkadot/types/interfaces/xcm/definitions.js"() {
    init_types_create();
    init_v02();
    init_v16();
    init_v2();
    XCM_LATEST = "V2";
    xcm = {
      XcmOrigin: {
        _enum: {
          Xcm: "MultiLocation"
        }
      },
      XcmpMessageFormat: {
        _enum: ["ConcatenatedVersionedXcm", "ConcatenatedEncodedBlob", "Signals"]
      },
      XcmAssetId: {
        _enum: {
          Concrete: "MultiLocation",
          Abstract: "Bytes"
        }
      },
      InboundStatus: {
        _enum: ["Ok", "Suspended"]
      },
      OutboundStatus: {
        _enum: ["Ok", "Suspended"]
      },
      MultiAssets: "Vec<MultiAsset>"
    };
    location2 = {
      BodyId: {
        _enum: {
          Unit: "Null",
          Named: "Vec<u8>",
          Index: "Compact<u32>",
          Executive: "Null",
          Technical: "Null",
          Legislative: "Null",
          Judicial: "Null"
        }
      },
      BodyPart: {
        _enum: {
          Voice: "Null",
          Members: "Compact<u32>",
          Fraction: {
            nom: "Compact<u32>",
            denom: "Compact<u32>"
          },
          AtLeastProportion: {
            nom: "Compact<u32>",
            denom: "Compact<u32>"
          },
          MoreThanProportion: {
            nom: "Compact<u32>",
            denom: "Compact<u32>"
          }
        }
      },
      InteriorMultiLocation: "Junctions",
      NetworkId: {
        _enum: {
          Any: "Null",
          Named: "Vec<u8>",
          Polkadot: "Null",
          Kusama: "Null"
        }
      }
    };
    definitions_default62 = {
      rpc: {},
      types: {
        ...location2,
        ...xcm,
        ...v02,
        ...v16,
        ...v2,
        ...mapXcmTypes(XCM_LATEST),
        DoubleEncodedCall: {
          encoded: "Vec<u8>"
        },
        XcmOriginKind: {
          _enum: ["Native", "SovereignAccount", "Superuser", "Xcm"]
        },
        Outcome: {
          _enum: {
            Complete: "Weight",
            Incomplete: "(Weight, XcmErrorV0)",
            Error: "XcmErrorV0"
          }
        },
        QueryId: "u64",
        QueryStatus: {
          _enum: {
            Pending: {
              responder: "VersionedMultiLocation",
              maybeNotify: "Option<(u8, u8)>",
              timeout: "BlockNumber"
            },
            Ready: {
              response: "VersionedResponse",
              at: "BlockNumber"
            }
          }
        },
        QueueConfigData: {
          suspendThreshold: "u32",
          dropThreshold: "u32",
          resumeThreshold: "u32",
          thresholdWeight: "Weight",
          weightRestrictDecay: "Weight"
        },
        VersionMigrationStage: {
          _enum: {
            MigrateSupportedVersion: "Null",
            MigrateVersionNotifiers: "Null",
            NotifyCurrentTargets: "Option<Bytes>",
            MigrateAndNotifyOldTargets: "Null"
          }
        },
        VersionedMultiAsset: {
          _enum: {
            V0: "MultiAssetV0",
            V1: "MultiAssetV1",
            V2: "MultiAssetV2"
          }
        },
        VersionedMultiAssets: {
          _enum: {
            V0: "Vec<MultiAssetV0>",
            V1: "MultiAssetsV1",
            V2: "MultiAssetsV2"
          }
        },
        VersionedMultiLocation: {
          _enum: {
            V0: "MultiLocationV0",
            V1: "MultiLocationV1",
            V2: "MultiLocationV2"
          }
        },
        VersionedResponse: {
          V0: "ResponseV0",
          V1: "ResponseV1",
          V2: "ResponseV2"
        },
        VersionedXcm: {
          _enum: {
            V0: "XcmV0",
            V1: "XcmV1",
            V2: "XcmV2"
          }
        },
        XcmVersion: "u32"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/contractsAbi/definitions.js
var layout, spec, latest, definitions_default63;
var init_definitions63 = __esm({
  "node_modules/@polkadot/types/interfaces/contractsAbi/definitions.js"() {
    layout = {
      ContractCryptoHasher: {
        _enum: ["Blake2x256", "Sha2x256", "Keccak256"]
      },
      ContractDiscriminant: "u32",
      ContractLayoutArray: {
        offset: "ContractLayoutKey",
        len: "u32",
        cellsPerElem: "u64",
        layout: "ContractStorageLayout"
      },
      ContractLayoutCell: {
        key: "ContractLayoutKey",
        ty: "SiLookupTypeId"
      },
      ContractLayoutEnum: {
        dispatchKey: "ContractLayoutKey",
        variants: "BTreeMap<ContractDiscriminant, ContractLayoutStruct>"
      },
      ContractLayoutHash: {
        offset: "ContractLayoutKey",
        strategy: "ContractLayoutHashingStrategy",
        layout: "ContractStorageLayout"
      },
      ContractLayoutHashingStrategy: {
        hasher: "ContractCryptoHasher",
        postfix: "Vec<u8>",
        prefix: "Vec<u8>"
      },
      ContractLayoutKey: "[u8; 32]",
      ContractLayoutStruct: {
        fields: "Vec<ContractLayoutStructField>"
      },
      ContractLayoutStructField: {
        layout: "ContractStorageLayout",
        name: "Text"
      },
      ContractStorageLayout: {
        _enum: {
          Cell: "ContractLayoutCell",
          Hash: "ContractLayoutHash",
          Array: "ContractLayoutArray",
          Struct: "ContractLayoutStruct",
          Enum: "ContractLayoutEnum"
        }
      }
    };
    spec = {
      ContractConstructorSpecV0: {
        name: "Text",
        selector: "ContractSelector",
        args: "Vec<ContractMessageParamSpecV0>",
        docs: "Vec<Text>"
      },
      ContractConstructorSpecV1: {
        name: "Vec<Text>",
        selector: "ContractSelector",
        args: "Vec<ContractMessageParamSpecV0>",
        docs: "Vec<Text>"
      },
      ContractConstructorSpecV2: {
        label: "Text",
        selector: "ContractSelector",
        args: "Vec<ContractMessageParamSpecV2>",
        docs: "Vec<Text>"
      },
      ContractConstructorSpecV3: {
        label: "Text",
        selector: "ContractSelector",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV2>",
        docs: "Vec<Text>"
      },
      ContractConstructorSpecV4: {
        label: "Text",
        selector: "ContractSelector",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV2>",
        docs: "Vec<Text>",
        default: "bool",
        returnType: "Option<ContractTypeSpec>"
      },
      ContractContractSpecV0: {
        constructors: "Vec<ContractConstructorSpecV0>",
        messages: "Vec<ContractMessageSpecV0>",
        events: "Vec<ContractEventSpecV0>",
        docs: "Vec<Text>"
      },
      ContractContractSpecV1: {
        constructors: "Vec<ContractConstructorSpecV1>",
        messages: "Vec<ContractMessageSpecV1>",
        events: "Vec<ContractEventSpecV1>",
        docs: "Vec<Text>"
      },
      ContractContractSpecV2: {
        constructors: "Vec<ContractConstructorSpecV2>",
        messages: "Vec<ContractMessageSpecV2>",
        events: "Vec<ContractEventSpecV2>",
        docs: "Vec<Text>"
      },
      ContractContractSpecV3: {
        constructors: "Vec<ContractConstructorSpecV3>",
        messages: "Vec<ContractMessageSpecV2>",
        events: "Vec<ContractEventSpecV2>",
        docs: "Vec<Text>"
      },
      ContractContractSpecV4: {
        constructors: "Vec<ContractConstructorSpecV4>",
        messages: "Vec<ContractMessageSpecV3>",
        events: "Vec<ContractEventSpecV2>",
        docs: "Vec<Text>",
        environment: "ContractEnvironmentV4"
      },
      ContractContractSpecV5: {
        constructors: "Vec<ContractConstructorSpecV4>",
        messages: "Vec<ContractMessageSpecV3>",
        events: "Vec<ContractEventSpecV3>",
        docs: "Vec<Text>",
        environment: "ContractEnvironmentV4"
      },
      ContractDisplayName: "SiPath",
      ContractEventParamSpecV0: {
        name: "Text",
        indexed: "bool",
        type: "ContractTypeSpec",
        docs: "Vec<Text>"
      },
      ContractEventParamSpecV2: {
        label: "Text",
        indexed: "bool",
        type: "ContractTypeSpec",
        docs: "Vec<Text>"
      },
      ContractEventSpecV0: {
        name: "Text",
        args: "Vec<ContractEventParamSpecV0>",
        docs: "Vec<Text>"
      },
      ContractEventSpecV1: {
        name: "Text",
        args: "Vec<ContractEventParamSpecV0>",
        docs: "Vec<Text>"
      },
      ContractEventSpecV2: {
        label: "Text",
        args: "Vec<ContractEventParamSpecV2>",
        docs: "Vec<Text>"
      },
      ContractEventSpecV3: {
        label: "Text",
        args: "Vec<ContractEventParamSpecV2>",
        docs: "Vec<Text>",
        module_path: "Text",
        signature_topic: "Option<[u8; 32]>"
      },
      ContractMessageParamSpecV0: {
        name: "Text",
        type: "ContractTypeSpec"
      },
      ContractMessageParamSpecV2: {
        label: "Text",
        type: "ContractTypeSpec"
      },
      ContractMessageSpecV0: {
        name: "Text",
        selector: "ContractSelector",
        mutates: "bool",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV0>",
        returnType: "Option<ContractTypeSpec>",
        docs: "Vec<Text>"
      },
      ContractMessageSpecV1: {
        name: "Vec<Text>",
        selector: "ContractSelector",
        mutates: "bool",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV0>",
        returnType: "Option<ContractTypeSpec>",
        docs: "Vec<Text>"
      },
      ContractMessageSpecV2: {
        label: "Text",
        selector: "ContractSelector",
        mutates: "bool",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV2>",
        returnType: "Option<ContractTypeSpec>",
        docs: "Vec<Text>"
      },
      ContractMessageSpecV3: {
        label: "Text",
        selector: "ContractSelector",
        mutates: "bool",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV2>",
        returnType: "Option<ContractTypeSpec>",
        docs: "Vec<Text>",
        default: "bool"
      },
      ContractSelector: "[u8; 4]",
      ContractTypeSpec: {
        type: "SiLookupTypeId",
        displayName: "ContractDisplayName"
      }
    };
    latest = {
      ContractConstructorSpecLatest: "ContractConstructorSpecV4",
      ContractEventSpecLatest: "ContractEventSpecV3",
      ContractEventParamSpecLatest: "ContractEventParamSpecV2",
      ContractMessageParamSpecLatest: "ContractMessageParamSpecV2",
      ContractMessageSpecLatest: "ContractMessageSpecV3",
      ContractMetadataLatest: "ContractMetadataV5"
    };
    definitions_default63 = {
      rpc: {},
      types: {
        ...layout,
        ...spec,
        ...latest,
        ContractProjectInfo: {
          source: "ContractProjectSource",
          contract: "ContractProjectContract"
        },
        ContractMetadataV0: {
          metadataVersion: "Text",
          types: "Vec<Si0Type>",
          spec: "ContractContractSpecV0"
        },
        ContractMetadataV1: {
          types: "Vec<PortableType>",
          spec: "ContractContractSpecV1"
        },
        ContractMetadataV2: {
          types: "Vec<PortableType>",
          spec: "ContractContractSpecV2"
        },
        ContractMetadataV3: {
          types: "Vec<PortableType>",
          spec: "ContractContractSpecV3"
        },
        ContractMetadataV4: {
          types: "Vec<PortableType>",
          spec: "ContractContractSpecV4",
          version: "Text"
        },
        ContractMetadataV5: {
          types: "Vec<PortableType>",
          spec: "ContractContractSpecV5",
          version: "u64"
        },
        ContractMetadata: {
          _enum: {
            V0: "ContractMetadataV0",
            V1: "ContractMetadataV1",
            V2: "ContractMetadataV2",
            V3: "ContractMetadataV3",
            V4: "ContractMetadataV4",
            V5: "ContractMetadataV5"
          }
        },
        ContractProjectV0: {
          metadataVersion: "Text",
          source: "ContractProjectSource",
          contract: "ContractProjectContract",
          types: "Vec<Si0Type>",
          spec: "ContractContractSpecV0"
        },
        ContractProject: "(ContractProjectInfo, ContractMetadata)",
        ContractProjectContract: {
          _alias: {
            docs: "documentation"
          },
          name: "Text",
          version: "Text",
          authors: "Vec<Text>",
          description: "Option<Text>",
          docs: "Option<Text>",
          repository: "Option<Text>",
          homepage: "Option<Text>",
          license: "Option<Text>"
        },
        ContractProjectSource: {
          _alias: {
            wasmHash: "hash"
          },
          wasmHash: "[u8; 32]",
          language: "Text",
          compiler: "Text",
          wasm: "Raw"
        },
        ContractEnvironmentV4: {
          _alias: {
            hashType: "hash"
          },
          // NOTE These are not marked optional in the Rust code, however since we
          // convert from older versions to newer, we may not have these fields.
          // The Option<...> works since our inputs are always JSON, so it will
          // be None when not specified.
          //
          // Additionally we don't mark the full structure as Option, rather we
          // do it on a per-field basis since fields may be added as the versions
          // progress.
          accountId: "Option<ContractTypeSpec>",
          balance: "Option<ContractTypeSpec>",
          blockNumber: "Option<ContractTypeSpec>",
          hashType: "Option<ContractTypeSpec>",
          timestamp: "Option<ContractTypeSpec>",
          maxEventTopics: "Option<u32>"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/eth/rpc.js
var netRpc, web3Rpc, rpc10;
var init_rpc10 = __esm({
  "node_modules/@polkadot/types/interfaces/eth/rpc.js"() {
    netRpc = {
      listening: {
        aliasSection: "net",
        description: "Returns true if client is actively listening for network connections. Otherwise false.",
        params: [],
        type: "bool"
      },
      peerCount: {
        aliasSection: "net",
        description: "Returns number of peers connected to node.",
        params: [],
        type: "Text"
      },
      version: {
        aliasSection: "net",
        description: "Returns protocol version.",
        params: [],
        type: "Text"
      }
    };
    web3Rpc = {
      clientVersion: {
        aliasSection: "web3",
        description: "Returns current client version.",
        params: [],
        type: "Text"
      },
      sha3: {
        aliasSection: "web3",
        description: "Returns sha3 of the given data",
        params: [{ name: "data", type: "Bytes" }],
        type: "H256"
      }
    };
    rpc10 = {
      ...netRpc,
      ...web3Rpc,
      accounts: {
        description: "Returns accounts list.",
        params: [],
        type: "Vec<H160>"
      },
      blockNumber: {
        description: "Returns the blockNumber",
        params: [],
        type: "U256"
      },
      call: {
        description: "Call contract, returning the output data.",
        params: [
          {
            name: "request",
            type: "EthCallRequest"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "number",
            type: "BlockNumber"
          }
        ],
        type: "Bytes"
      },
      chainId: {
        description: "Returns the chain ID used for transaction signing at the current best block. None is returned if not available.",
        params: [],
        type: "U64"
      },
      coinbase: {
        description: "Returns block author.",
        params: [],
        type: "H160"
      },
      estimateGas: {
        description: "Estimate gas needed for execution of given contract.",
        params: [
          {
            name: "request",
            type: "EthCallRequest"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "number",
            type: "BlockNumber"
          }
        ],
        type: "U256"
      },
      feeHistory: {
        description: "Returns fee history for given block count & reward percentiles",
        params: [
          {
            name: "blockCount",
            type: "U256"
          },
          {
            name: "newestBlock",
            type: "BlockNumber"
          },
          {
            name: "rewardPercentiles",
            type: "Option<Vec<f64>>"
          }
        ],
        type: "EthFeeHistory"
      },
      gasPrice: {
        description: "Returns current gas price.",
        params: [],
        type: "U256"
      },
      getBalance: {
        description: "Returns balance of the given account.",
        params: [
          {
            name: "address",
            type: "H160"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "number",
            type: "BlockNumber"
          }
        ],
        type: "U256"
      },
      getBlockByHash: {
        description: "Returns block with given hash.",
        params: [
          {
            name: "hash",
            type: "H256"
          },
          {
            name: "full",
            type: "bool"
          }
        ],
        type: "Option<EthRichBlock>"
      },
      getBlockByNumber: {
        description: "Returns block with given number.",
        params: [
          {
            name: "block",
            type: "BlockNumber"
          },
          { name: "full", type: "bool" }
        ],
        type: "Option<EthRichBlock>"
      },
      getBlockTransactionCountByHash: {
        description: "Returns the number of transactions in a block with given hash.",
        params: [
          {
            name: "hash",
            type: "H256"
          }
        ],
        type: "U256"
      },
      getBlockTransactionCountByNumber: {
        description: "Returns the number of transactions in a block with given block number.",
        params: [
          {
            name: "block",
            type: "BlockNumber"
          }
        ],
        type: "U256"
      },
      getCode: {
        description: "Returns the code at given address at given time (block number).",
        params: [
          {
            name: "address",
            type: "H160"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "number",
            type: "BlockNumber"
          }
        ],
        type: "Bytes"
      },
      getFilterChanges: {
        description: "Returns filter changes since last poll.",
        params: [
          {
            name: "index",
            type: "U256"
          }
        ],
        type: "EthFilterChanges"
      },
      getFilterLogs: {
        description: "Returns all logs matching given filter (in a range 'from' - 'to').",
        params: [
          {
            name: "index",
            type: "U256"
          }
        ],
        type: "Vec<EthLog>"
      },
      getLogs: {
        description: "Returns logs matching given filter object.",
        params: [
          {
            name: "filter",
            type: "EthFilter"
          }
        ],
        type: "Vec<EthLog>"
      },
      getProof: {
        description: "Returns proof for account and storage.",
        params: [
          {
            name: "address",
            type: "H160"
          },
          {
            name: "storageKeys",
            type: "Vec<H256>"
          },
          {
            name: "number",
            type: "BlockNumber"
          }
        ],
        type: "EthAccount"
      },
      getStorageAt: {
        description: "Returns content of the storage at given address.",
        params: [
          {
            name: "address",
            type: "H160"
          },
          {
            name: "index",
            type: "U256"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "number",
            type: "BlockNumber"
          }
        ],
        type: "H256"
      },
      getTransactionByBlockHashAndIndex: {
        description: "Returns transaction at given block hash and index.",
        params: [
          {
            name: "hash",
            type: "H256"
          },
          {
            name: "index",
            type: "U256"
          }
        ],
        type: "EthTransaction"
      },
      getTransactionByBlockNumberAndIndex: {
        description: "Returns transaction by given block number and index.",
        params: [
          {
            name: "number",
            type: "BlockNumber"
          },
          {
            name: "index",
            type: "U256"
          }
        ],
        type: "EthTransaction"
      },
      getTransactionByHash: {
        description: "Get transaction by its hash.",
        params: [
          {
            name: "hash",
            type: "H256"
          }
        ],
        type: "EthTransaction"
      },
      getTransactionCount: {
        description: "Returns the number of transactions sent from given address at given time (block number).",
        params: [
          {
            name: "address",
            type: "H160"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "number",
            type: "BlockNumber"
          }
        ],
        type: "U256"
      },
      getTransactionReceipt: {
        description: "Returns transaction receipt by transaction hash.",
        params: [
          {
            name: "hash",
            type: "H256"
          }
        ],
        type: "EthReceipt"
      },
      getUncleByBlockHashAndIndex: {
        description: "Returns an uncles at given block and index.",
        params: [
          {
            name: "hash",
            type: "H256"
          },
          {
            name: "index",
            type: "U256"
          }
        ],
        type: "EthRichBlock"
      },
      getUncleByBlockNumberAndIndex: {
        description: "Returns an uncles at given block and index.",
        params: [
          {
            name: "number",
            type: "BlockNumber"
          },
          {
            name: "index",
            type: "U256"
          }
        ],
        type: "EthRichBlock"
      },
      getUncleCountByBlockHash: {
        description: "Returns the number of uncles in a block with given hash.",
        params: [
          {
            name: "hash",
            type: "H256"
          }
        ],
        type: "U256"
      },
      getUncleCountByBlockNumber: {
        description: "Returns the number of uncles in a block with given block number.",
        params: [
          {
            name: "number",
            type: "BlockNumber"
          }
        ],
        type: "U256"
      },
      getWork: {
        description: "Returns the hash of the current block, the seedHash, and the boundary condition to be met.",
        params: [],
        type: "EthWork"
      },
      hashrate: {
        description: "Returns the number of hashes per second that the node is mining with.",
        params: [],
        type: "U256"
      },
      maxPriorityFeePerGas: {
        description: "Returns max priority fee per gas",
        params: [],
        type: "U256"
      },
      mining: {
        description: "Returns true if client is actively mining new blocks.",
        params: [],
        type: "bool"
      },
      newBlockFilter: {
        description: "Returns id of new block filter.",
        params: [],
        type: "U256"
      },
      newFilter: {
        description: "Returns id of new filter.",
        params: [
          {
            name: "filter",
            type: "EthFilter"
          }
        ],
        type: "U256"
      },
      newPendingTransactionFilter: {
        description: "Returns id of new block filter.",
        params: [],
        type: "U256"
      },
      protocolVersion: {
        description: "Returns protocol version encoded as a string (quotes are necessary).",
        params: [],
        type: "u64"
      },
      sendRawTransaction: {
        description: "Sends signed transaction, returning its hash.",
        params: [
          {
            name: "bytes",
            type: "Bytes"
          }
        ],
        type: "H256"
      },
      sendTransaction: {
        description: "Sends transaction; will block waiting for signer to return the transaction hash",
        params: [
          {
            name: "tx",
            type: "EthTransactionRequest"
          }
        ],
        type: "H256"
      },
      submitHashrate: {
        description: "Used for submitting mining hashrate.",
        params: [
          {
            name: "index",
            type: "U256"
          },
          {
            name: "hash",
            type: "H256"
          }
        ],
        type: "bool"
      },
      submitWork: {
        description: "Used for submitting a proof-of-work solution.",
        params: [
          {
            name: "nonce",
            type: "H64"
          },
          {
            name: "headerHash",
            type: "H256"
          },
          {
            name: "mixDigest",
            type: "H256"
          }
        ],
        type: "bool"
      },
      subscribe: {
        description: "Subscribe to Eth subscription.",
        params: [
          { name: "kind", type: "EthSubKind" },
          {
            isOptional: true,
            name: "params",
            type: "EthSubParams"
          }
        ],
        pubsub: [
          "subscription",
          "subscribe",
          "unsubscribe"
        ],
        type: "Null"
      },
      syncing: {
        description: "Returns an object with data about the sync status or false.",
        params: [],
        type: "EthSyncStatus"
      },
      uninstallFilter: {
        description: "Uninstalls filter.",
        params: [
          {
            name: "index",
            type: "U256"
          }
        ],
        type: "bool"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/eth/runtime.js
var ethMethodsV4, ethMethodsV5, runtime28;
var init_runtime28 = __esm({
  "node_modules/@polkadot/types/interfaces/eth/runtime.js"() {
    ethMethodsV4 = {
      account_basic: {
        description: "Returns pallet_evm::Accounts by address.",
        params: [
          {
            name: "address",
            type: "H160"
          }
        ],
        type: "EvmAccount"
      },
      account_code_at: {
        description: "For a given account address, returns pallet_evm::AccountCodes.",
        params: [
          {
            name: "address",
            type: "H160"
          }
        ],
        type: "Bytes"
      },
      author: {
        description: "Returns the converted FindAuthor::find_author authority id.",
        params: [],
        type: "H160"
      },
      call: {
        description: "Returns a frame_ethereum::call response. If `estimate` is true,",
        params: [
          {
            name: "from",
            type: "H160"
          },
          {
            name: "to",
            type: "H160"
          },
          {
            name: "data",
            type: "Vec<u8>"
          },
          {
            name: "value",
            type: "U256"
          },
          {
            name: "gasLimit",
            type: "U256"
          },
          {
            name: "maxFeePerGas",
            type: "Option<U256>"
          },
          {
            name: "maxPriorityFeePerGas",
            type: "Option<U256>"
          },
          {
            name: "nonce",
            type: "Option<U256>"
          },
          {
            name: "estimate",
            type: "bool"
          },
          {
            name: "accessList",
            type: "Option<Vec<(H160, Vec<H256>)>>"
          }
        ],
        type: "Result<EvmCallInfo, DispatchError>"
      },
      chain_id: {
        description: "Returns runtime defined pallet_evm::ChainId.",
        params: [],
        type: "u64"
      },
      create: {
        description: "Returns a frame_ethereum::call response. If `estimate` is true,",
        params: [
          {
            name: "from",
            type: "H160"
          },
          {
            name: "data",
            type: "Vec<u8>"
          },
          {
            name: "value",
            type: "U256"
          },
          {
            name: "gasLimit",
            type: "U256"
          },
          {
            name: "maxFeePerGas",
            type: "Option<U256>"
          },
          {
            name: "maxPriorityFeePerGas",
            type: "Option<U256>"
          },
          {
            name: "nonce",
            type: "Option<U256>"
          },
          {
            name: "estimate",
            type: "bool"
          },
          {
            name: "accessList",
            type: "Option<Vec<(H160, Vec<H256>)>>"
          }
        ],
        type: "Result<EvmCreateInfo, DispatchError>"
      },
      current_all: {
        description: "Return all the current data for a block in a single runtime call.",
        params: [],
        type: "(Option<BlockV2>, Option<Vec<EthReceiptV3>>, Option<Vec<EthTransactionStatus>>)"
      },
      current_block: {
        description: "Return the current block.",
        params: [],
        type: "BlockV2"
      },
      current_receipts: {
        description: "Return the current receipt.",
        params: [],
        type: "Option<Vec<EthReceiptV3>>"
      },
      current_transaction_statuses: {
        description: "Return the current transaction status.",
        params: [],
        type: "Option<Vec<EthTransactionStatus>>"
      },
      elasticity: {
        description: "Return the elasticity multiplier.",
        params: [],
        type: "Option<Permill>"
      },
      extrinsic_filter: {
        description: "Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.",
        params: [
          {
            name: "xts",
            type: "Vec<Extrinsic>"
          }
        ],
        type: "Vec<TransactionV2>"
      },
      gas_price: {
        description: "Returns FixedGasPrice::min_gas_price",
        params: [],
        type: "u256"
      },
      storage_at: {
        description: "For a given account address and index, returns pallet_evm::AccountStorages.",
        params: [
          {
            name: "address",
            type: "H160"
          },
          {
            name: "index",
            type: "u256"
          }
        ],
        type: "H256"
      }
    };
    ethMethodsV5 = {
      call: {
        description: "Returns a frame_ethereum::call response. If `estimate` is true,",
        params: [
          {
            name: "from",
            type: "H160"
          },
          {
            name: "to",
            type: "H160"
          },
          {
            name: "data",
            type: "Vec<u8>"
          },
          {
            name: "value",
            type: "U256"
          },
          {
            name: "gasLimit",
            type: "U256"
          },
          {
            name: "maxFeePerGas",
            type: "Option<U256>"
          },
          {
            name: "maxPriorityFeePerGas",
            type: "Option<U256>"
          },
          {
            name: "nonce",
            type: "Option<U256>"
          },
          {
            name: "estimate",
            type: "bool"
          },
          {
            name: "accessList",
            type: "Option<Vec<(H160, Vec<H256>)>>"
          }
        ],
        type: "Result<EvmCallInfoV2, DispatchError>"
      },
      create: {
        description: "Returns a frame_ethereum::call response. If `estimate` is true,",
        params: [
          {
            name: "from",
            type: "H160"
          },
          {
            name: "data",
            type: "Vec<u8>"
          },
          {
            name: "value",
            type: "U256"
          },
          {
            name: "gasLimit",
            type: "U256"
          },
          {
            name: "maxFeePerGas",
            type: "Option<U256>"
          },
          {
            name: "maxPriorityFeePerGas",
            type: "Option<U256>"
          },
          {
            name: "nonce",
            type: "Option<U256>"
          },
          {
            name: "estimate",
            type: "bool"
          },
          {
            name: "accessList",
            type: "Option<Vec<(H160, Vec<H256>)>>"
          }
        ],
        type: "Result<EvmCreateInfoV2, DispatchError>"
      }
    };
    runtime28 = {
      ConvertTransactionRuntimeApi: [
        {
          methods: {
            convert_transaction: {
              description: "Converts an Ethereum-style transaction to Extrinsic",
              params: [
                {
                  name: "transaction",
                  type: "TransactionV2"
                }
              ],
              type: "Extrinsic"
            }
          },
          version: 2
        }
      ],
      DebugRuntimeApi: [
        {
          methods: {
            trace_block: {
              description: "Trace all block extrinsics",
              params: [
                {
                  name: "extrinsics",
                  type: "Vec<Extrinsic>"
                },
                {
                  name: "knownTransactions",
                  type: "Vec<H256>"
                }
              ],
              type: "Result<(), DispatchError>"
            },
            trace_transaction: {
              description: "Trace transaction extrinsics",
              params: [
                {
                  name: "extrinsics",
                  type: "Vec<Extrinsic>"
                },
                {
                  name: "transaction",
                  type: "EthTransaction"
                }
              ],
              type: "Result<(), DispatchError>"
            }
          },
          version: 4
        }
      ],
      EthereumRuntimeRPCApi: [
        {
          methods: {
            ...ethMethodsV4
          },
          version: 4
        },
        {
          methods: {
            ...ethMethodsV4,
            ...ethMethodsV5
          },
          version: 5
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/eth/definitions.js
var V0, V1, V2, types, definitions_default64;
var init_definitions64 = __esm({
  "node_modules/@polkadot/types/interfaces/eth/definitions.js"() {
    init_rpc10();
    init_runtime28();
    V0 = {
      BlockV0: {
        header: "EthHeader",
        transactions: "Vec<TransactionV0>",
        ommers: "Vec<EthHeader>"
      },
      LegacyTransaction: {
        nonce: "U256",
        gasPrice: "U256",
        gasLimit: "U256",
        action: "EthTransactionAction",
        value: "U256",
        input: "Bytes",
        signature: "EthTransactionSignature"
      },
      TransactionV0: "LegacyTransaction"
    };
    V1 = {
      BlockV1: {
        header: "EthHeader",
        transactions: "Vec<TransactionV1>",
        ommers: "Vec<EthHeader>"
      },
      EIP2930Transaction: {
        chainId: "u64",
        nonce: "U256",
        gasPrice: "U256",
        gasLimit: "U256",
        action: "EthTransactionAction",
        value: "U256",
        input: "Bytes",
        accessList: "EthAccessList",
        oddYParity: "bool",
        r: "H256",
        s: "H256"
      },
      TransactionV1: {
        _enum: {
          Legacy: "LegacyTransaction",
          EIP2930: "EIP2930Transaction"
        }
      }
    };
    V2 = {
      BlockV2: {
        header: "EthHeader",
        transactions: "Vec<TransactionV2>",
        ommers: "Vec<EthHeader>"
      },
      EIP1559Transaction: {
        chainId: "u64",
        nonce: "U256",
        maxPriorityFeePerGas: "U256",
        maxFeePerGas: "U256",
        gasLimit: "U256",
        action: "EthTransactionAction",
        value: "U256",
        input: "Bytes",
        accessList: "EthAccessList",
        oddYParity: "bool",
        r: "H256",
        s: "H256"
      },
      TransactionV2: {
        _enum: {
          Legacy: "LegacyTransaction",
          EIP2930: "EIP2930Transaction",
          EIP1559: "EIP1559Transaction"
        }
      }
    };
    types = {
      ...V0,
      ...V1,
      ...V2,
      EthereumAccountId: "GenericEthereumAccountId",
      EthereumAddress: "GenericEthereumAccountId",
      EthereumLookupSource: "GenericEthereumLookupSource",
      EthereumSignature: "[u8; 65]",
      EthAccessListItem: {
        address: "EthAddress",
        slots: "Vec<H256>"
      },
      EthAccessList: "Vec<EthAccessListItem>",
      EthAccount: {
        address: "EthAddress",
        balance: "U256",
        nonce: "U256",
        codeHash: "H256",
        storageHash: "H256",
        accountProof: "Vec<Bytes>",
        storageProof: "Vec<EthStorageProof>"
      },
      EthAddress: "H160",
      EthBlock: {
        header: "EthHeader",
        transactions: "Vec<EthTransaction>",
        ommers: "Vec<EthHeader>"
      },
      EthHeader: {
        parentHash: "H256",
        ommersHash: "H256",
        beneficiary: "EthAddress",
        stateRoot: "H256",
        transactionsRoot: "H256",
        receiptsRoot: "H256",
        logsBloom: "EthBloom",
        difficulty: "U256",
        number: "U256",
        gasLimit: "U256",
        gasUsed: "U256",
        timestamp: "u64",
        extraData: "Bytes",
        mixMash: "H256",
        nonce: "H64"
      },
      EthRichBlock: {
        _alias: {
          blockHash: "hash",
          blockSize: "size"
        },
        blockHash: "Option<H256>",
        parentHash: "H256",
        sha3Uncles: "H256",
        author: "EthAddress",
        miner: "EthAddress",
        stateRoot: "H256",
        transactionsRoot: "H256",
        receiptsRoot: "H256",
        number: "Option<U256>",
        gasUsed: "U256",
        gasLimit: "U256",
        extraData: "Bytes",
        logsBloom: "EthBloom",
        timestamp: "U256",
        difficulty: "U256",
        totalDifficulty: "Option<U256>",
        sealFields: "Vec<Bytes>",
        uncles: "Vec<H256>",
        transactions: "Vec<EthTransaction>",
        blockSize: "Option<U256>"
      },
      EthBloom: "H2048",
      EthCallRequest: {
        from: "Option<EthAddress>",
        to: "Option<EthAddress>",
        gasPrice: "Option<U256>",
        gas: "Option<U256>",
        value: "Option<U256>",
        data: "Option<Bytes>",
        nonce: "Option<U256>"
      },
      EthFeeHistory: {
        oldestBlock: "U256",
        baseFeePerGas: "Vec<U256>",
        gasUsedRatio: "Vec<f64>",
        reward: "Option<Vec<Vec<U256>>>"
      },
      EthFilter: {
        fromBlock: "Option<BlockNumber>",
        toBlock: "Option<BlockNumber>",
        blockHash: "Option<H256>",
        address: "Option<EthFilterAddress>",
        topics: "Option<EthFilterTopic>"
      },
      EthFilterAddress: {
        _enum: {
          Single: "EthAddress",
          Multiple: "Vec<EthAddress>",
          Null: "Null"
        }
      },
      EthFilterChanges: {
        _enum: {
          Logs: "Vec<EthLog>",
          Hashes: "Vec<H256>",
          Empty: "Null"
        }
      },
      EthFilterTopic: {
        _enum: {
          Single: "EthFilterTopicInner",
          Multiple: "Vec<EthFilterTopicInner>",
          Null: "Null"
        }
      },
      EthFilterTopicEntry: "Option<H256>",
      EthFilterTopicInner: {
        _enum: {
          Single: "EthFilterTopicEntry",
          Multiple: "Vec<EthFilterTopicEntry>",
          Null: "Null"
        }
      },
      EthRichHeader: {
        _alias: {
          blockHash: "hash",
          blockSize: "size"
        },
        blockHash: "Option<H256>",
        parentHash: "H256",
        sha3Uncles: "H256",
        author: "EthAddress",
        miner: "EthAddress",
        stateRoot: "H256",
        transactionsRoot: "H256",
        receiptsRoot: "H256",
        number: "Option<U256>",
        gasUsed: "U256",
        gasLimit: "U256",
        extraData: "Bytes",
        logsBloom: "EthBloom",
        timestamp: "U256",
        difficulty: "U256",
        sealFields: "Vec<Bytes>",
        blockSize: "Option<U256>"
      },
      EthLog: {
        address: "EthAddress",
        topics: "Vec<H256>",
        data: "Bytes",
        blockHash: "Option<H256>",
        blockNumber: "Option<U256>",
        transactionHash: "Option<H256>",
        transactionIndex: "Option<U256>",
        logIndex: "Option<U256>",
        transactionLogIndex: "Option<U256>",
        removed: "bool"
      },
      EthReceipt: {
        transactionHash: "Option<H256>",
        transactionIndex: "Option<U256>",
        blockHash: "Option<H256>",
        from: "Option<EthAddress>",
        to: "Option<EthAddress>",
        blockNumber: "Option<U256>",
        cumulativeGasUsed: "U256",
        gasUsed: "Option<U256>",
        contractAddress: "Option<EthAddress>",
        logs: "Vec<EthLog>",
        root: "Option<H256>",
        logsBloom: "EthBloom",
        statusCode: "Option<U64>"
      },
      // not convinced, however the original commit matches, so... (maybe V3 is incorrect?)
      EthReceiptV0: "EthReceipt",
      EthReceiptV3: "EthReceipt",
      EthStorageProof: {
        key: "U256",
        value: "U256",
        proof: "Vec<Bytes>"
      },
      EthSubKind: {
        _enum: ["newHeads", "logs", "newPendingTransactions", "syncing"]
      },
      EthSubParams: {
        _enum: {
          None: "Null",
          Logs: "EthFilter"
        }
      },
      EthSubResult: {
        _enum: {
          Header: "EthRichHeader",
          Log: "EthLog",
          TransactionHash: "H256",
          SyncState: "EthSyncStatus"
        }
      },
      EthSyncInfo: {
        startingBlock: "U256",
        currentBlock: "U256",
        highestBlock: "U256",
        warpChunksAmount: "Option<U256>",
        warpChunksProcessed: "Option<U256>"
      },
      EthSyncStatus: {
        _enum: {
          Info: "EthSyncInfo",
          None: "Null"
        }
      },
      EthTransaction: {
        hash: "H256",
        nonce: "U256",
        blockHash: "Option<H256>",
        blockNumber: "Option<U256>",
        transactionIndex: "Option<U256>",
        from: "H160",
        to: "Option<H160>",
        value: "U256",
        gasPrice: "Option<U256>",
        maxFeePerGas: "Option<U256>",
        maxPriorityFeePerGas: "Option<U256>",
        gas: "U256",
        input: "Bytes",
        creates: "Option<H160>",
        raw: "Bytes",
        publicKey: "Option<H512>",
        chainId: "Option<U64>",
        standardV: "U256",
        v: "U256",
        r: "U256",
        s: "U256",
        accessList: "Option<Vec<EthAccessListItem>>",
        transactionType: "Option<U256>"
      },
      EthTransactionSignature: {
        v: "u64",
        r: "H256",
        s: "H256"
      },
      EthTransactionAction: {
        _enum: {
          Call: "H160",
          Create: "Null"
        }
      },
      EthTransactionCondition: {
        _enum: {
          block: "u64",
          time: "u64"
        }
      },
      EthTransactionRequest: {
        from: "Option<EthAddress>",
        to: "Option<EthAddress>",
        gasPrice: "Option<U256>",
        gas: "Option<U256>",
        value: "Option<U256>",
        data: "Option<Bytes>",
        nonce: "Option<U256>"
      },
      EthTransactionStatus: {
        transactionHash: "H256",
        transactionIndex: "u32",
        from: "EthAddress",
        to: "Option<EthAddress>",
        contractAddress: "Option<EthAddress>",
        logs: "Vec<EthLog>",
        logsBloom: "EthBloom"
      },
      EthWork: {
        powHash: "H256",
        seedHash: "H256",
        target: "H256",
        number: "Option<u64>"
      }
    };
    definitions_default64 = { rpc: rpc10, runtime: runtime28, types };
  }
});

// node_modules/@polkadot/types/interfaces/nimbus/runtime.js
var runtime29;
var init_runtime29 = __esm({
  "node_modules/@polkadot/types/interfaces/nimbus/runtime.js"() {
    runtime29 = {
      // deprecated, the NimbusApi is current - this is for backwards compat
      AuthorFilterAPI: [
        {
          methods: {
            can_author: {
              description: "The runtime api used to predict whether an author will be eligible in the given slot",
              params: [
                {
                  name: "author",
                  type: "AccountId"
                },
                {
                  name: "relayParent",
                  type: "u32"
                },
                {
                  name: "parentHeader",
                  type: "Header"
                }
              ],
              type: "bool"
            }
          },
          version: 2
        },
        {
          methods: {
            can_author: {
              description: "The runtime api used to predict whether an author will be eligible in the given slot",
              params: [
                {
                  name: "author",
                  type: "AccountId"
                },
                {
                  name: "relayParent",
                  type: "u32"
                }
              ],
              type: "bool"
            }
          },
          version: 1
        }
      ],
      NimbusApi: [
        {
          methods: {
            can_author: {
              description: "The runtime api used to predict whether a Nimbus author will be eligible in the given slot",
              params: [
                {
                  name: "author",
                  type: "AccountId"
                },
                {
                  name: "relayParent",
                  type: "u32"
                },
                {
                  name: "parentHeader",
                  type: "Header"
                }
              ],
              type: "bool"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/nimbus/definitions.js
var definitions_default65;
var init_definitions65 = __esm({
  "node_modules/@polkadot/types/interfaces/nimbus/definitions.js"() {
    init_runtime29();
    definitions_default65 = {
      rpc: {},
      runtime: runtime29,
      types: {}
    };
  }
});

// node_modules/@polkadot/types/interfaces/ormlOracle/runtime.js
var runtime30;
var init_runtime30 = __esm({
  "node_modules/@polkadot/types/interfaces/ormlOracle/runtime.js"() {
    runtime30 = {
      // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/oracle/rpc/runtime-api/src/lib.rs#L12-L21
      OracleApi: [
        {
          methods: {
            get_all_values: {
              description: "Retrieves all values",
              params: [
                {
                  name: "providerId",
                  // This is a Codec type
                  type: "Raw"
                }
              ],
              // This won't actually work as expected - since we have
              // no information about the actual Raw sizes, we cannot
              // handle it in this format (it would need an override
              // for the specific Codec). So return the Raw value.
              // type: 'Vec<(Raw, Option<Raw>)>'
              type: "Raw"
            },
            get_value: {
              description: "Retrieves a single value",
              params: [
                {
                  name: "providerId",
                  // This is a Codec type
                  type: "Raw"
                },
                {
                  name: "key",
                  // This is a Codec type
                  type: "Raw"
                }
              ],
              // This is an Option<Codec> type
              type: "Option<Raw>"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/ormlOracle/definitions.js
var definitions_default66;
var init_definitions66 = __esm({
  "node_modules/@polkadot/types/interfaces/ormlOracle/definitions.js"() {
    init_runtime30();
    definitions_default66 = {
      rpc: {},
      runtime: runtime30,
      types: {}
    };
  }
});

// node_modules/@polkadot/types/interfaces/ormlTokens/runtime.js
var runtime31;
var init_runtime31 = __esm({
  "node_modules/@polkadot/types/interfaces/ormlTokens/runtime.js"() {
    runtime31 = {
      // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/tokens/rpc/runtime-api/src/lib.rs#L11-L18
      TokensApi: [
        {
          methods: {
            query_existential_deposit: {
              description: "Query the existential amount for a specific currency",
              params: [
                {
                  name: "currencyId",
                  // This is CurrencyId, as per the return value, we are unsure
                  // if this is specialized and/or global to the chain or not
                  type: "Raw"
                }
              ],
              // This is Balance - since we don't understand enough about the way
              // in which this is used, we default to u128 here (it certainly could
              // be a specialized type that doesn't map to the on-chain Balance)
              type: "u128"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/ormlTokens/definitions.js
var definitions_default67;
var init_definitions67 = __esm({
  "node_modules/@polkadot/types/interfaces/ormlTokens/definitions.js"() {
    init_runtime31();
    definitions_default67 = {
      rpc: {},
      runtime: runtime31,
      types: {}
    };
  }
});

// node_modules/@polkadot/types/interfaces/rpc/rpc.js
var rpc11;
var init_rpc11 = __esm({
  "node_modules/@polkadot/types/interfaces/rpc/rpc.js"() {
    rpc11 = {
      methods: {
        description: "Retrieves the list of RPC methods that are exposed by the node",
        params: [],
        type: "RpcMethods"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/rpc/definitions.js
var definitions_default68;
var init_definitions68 = __esm({
  "node_modules/@polkadot/types/interfaces/rpc/definitions.js"() {
    init_rpc11();
    definitions_default68 = {
      rpc: rpc11,
      types: {
        RpcMethods: {
          version: "u32",
          methods: "Vec<Text>"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/author/rpc.js
var rpc12;
var init_rpc12 = __esm({
  "node_modules/@polkadot/types/interfaces/author/rpc.js"() {
    rpc12 = {
      hasKey: {
        description: "Returns true if the keystore has private keys for the given public key and key type.",
        isUnsafe: true,
        params: [
          {
            name: "publicKey",
            type: "Bytes"
          },
          {
            name: "keyType",
            type: "Text"
          }
        ],
        type: "bool"
      },
      hasSessionKeys: {
        description: "Returns true if the keystore has private keys for the given session public keys.",
        isUnsafe: true,
        params: [
          {
            name: "sessionKeys",
            type: "Bytes"
          }
        ],
        type: "bool"
      },
      insertKey: {
        description: "Insert a key into the keystore.",
        isUnsafe: true,
        params: [
          {
            name: "keyType",
            type: "Text"
          },
          {
            name: "suri",
            type: "Text"
          },
          {
            name: "publicKey",
            type: "Bytes"
          }
        ],
        type: "Bytes"
      },
      pendingExtrinsics: {
        description: "Returns all pending extrinsics, potentially grouped by sender",
        params: [],
        type: "Vec<Extrinsic>"
      },
      removeExtrinsic: {
        description: "Remove given extrinsic from the pool and temporarily ban it to prevent reimporting",
        isUnsafe: true,
        params: [
          {
            name: "bytesOrHash",
            type: "Vec<ExtrinsicOrHash>"
          }
        ],
        type: "Vec<Hash>"
      },
      rotateKeys: {
        description: "Generate new session keys and returns the corresponding public keys",
        isUnsafe: true,
        params: [],
        type: "Bytes"
      },
      submitAndWatchExtrinsic: {
        description: "Submit and subscribe to watch an extrinsic until unsubscribed",
        isSigned: true,
        params: [
          {
            name: "extrinsic",
            type: "Extrinsic"
          }
        ],
        pubsub: [
          "extrinsicUpdate",
          "submitAndWatchExtrinsic",
          "unwatchExtrinsic"
        ],
        type: "ExtrinsicStatus"
      },
      submitExtrinsic: {
        description: "Submit a fully formatted extrinsic for block inclusion",
        isSigned: true,
        params: [
          {
            name: "extrinsic",
            type: "Extrinsic"
          }
        ],
        type: "Hash"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/author/definitions.js
var definitions_default69;
var init_definitions69 = __esm({
  "node_modules/@polkadot/types/interfaces/author/definitions.js"() {
    init_rpc12();
    definitions_default69 = {
      rpc: rpc12,
      types: {
        ExtrinsicOrHash: {
          _enum: {
            Hash: "Hash",
            Extrinsic: "Bytes"
          }
        },
        ExtrinsicStatus: {
          _enum: {
            Future: "Null",
            Ready: "Null",
            Broadcast: "Vec<Text>",
            InBlock: "Hash",
            Retracted: "Hash",
            FinalityTimeout: "Hash",
            Finalized: "Hash",
            Usurped: "Hash",
            Dropped: "Null",
            Invalid: "Null"
          }
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/chain/rpc.js
var rpc13;
var init_rpc13 = __esm({
  "node_modules/@polkadot/types/interfaces/chain/rpc.js"() {
    rpc13 = {
      getBlock: {
        description: "Get header and body of a relay chain block",
        params: [
          {
            isHistoric: true,
            isOptional: true,
            name: "hash",
            type: "BlockHash"
          }
        ],
        type: "SignedBlock"
      },
      getBlockHash: {
        description: "Get the block hash for a specific block",
        params: [
          {
            isOptional: true,
            name: "blockNumber",
            type: "BlockNumber"
          }
        ],
        type: "BlockHash"
      },
      getFinalizedHead: {
        alias: ["chain_getFinalisedHead"],
        description: "Get hash of the last finalized block in the canon chain",
        params: [],
        type: "BlockHash"
      },
      getHeader: {
        alias: ["chain_getHead"],
        description: "Retrieves the header for a specific block",
        params: [
          {
            isHistoric: true,
            isOptional: true,
            name: "hash",
            type: "BlockHash"
          }
        ],
        type: "Header"
      },
      subscribeAllHeads: {
        description: "Retrieves the newest header via subscription",
        params: [],
        pubsub: [
          "allHead",
          "subscribeAllHeads",
          "unsubscribeAllHeads"
        ],
        type: "Header"
      },
      subscribeFinalizedHeads: {
        alias: ["chain_subscribeFinalisedHeads", "chain_unsubscribeFinalisedHeads"],
        description: "Retrieves the best finalized header via subscription",
        params: [],
        pubsub: [
          "finalizedHead",
          "subscribeFinalizedHeads",
          "unsubscribeFinalizedHeads"
        ],
        type: "Header"
      },
      subscribeNewHeads: {
        alias: ["chain_unsubscribeNewHeads", "subscribe_newHead", "unsubscribe_newHead"],
        description: "Retrieves the best header via subscription",
        params: [],
        // NOTE These still has the aliassed version, compatible with 1.x
        pubsub: [
          "newHead",
          "subscribeNewHead",
          "unsubscribeNewHead"
        ],
        type: "Header"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/chain/definitions.js
var definitions_default70;
var init_definitions70 = __esm({
  "node_modules/@polkadot/types/interfaces/chain/definitions.js"() {
    init_rpc13();
    definitions_default70 = {
      rpc: rpc13,
      types: {
        BlockHash: "Hash"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/childstate/rpc.js
var rpc14;
var init_rpc14 = __esm({
  "node_modules/@polkadot/types/interfaces/childstate/rpc.js"() {
    rpc14 = {
      getKeys: {
        description: "Returns the keys with prefix from a child storage, leave empty to get all the keys",
        params: [
          {
            name: "childKey",
            type: "PrefixedStorageKey"
          },
          {
            name: "prefix",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "Hash"
          }
        ],
        type: "Vec<StorageKey>"
      },
      getKeysPaged: {
        alias: ["childstate_getKeysPagedAt"],
        description: "Returns the keys with prefix from a child storage with pagination support",
        params: [
          {
            name: "childKey",
            type: "PrefixedStorageKey"
          },
          {
            name: "prefix",
            type: "StorageKey"
          },
          {
            name: "count",
            type: "u32"
          },
          {
            isOptional: true,
            name: "startKey",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "Hash"
          }
        ],
        type: "Vec<StorageKey>"
      },
      getStorage: {
        description: "Returns a child storage entry at a specific block state",
        params: [
          {
            name: "childKey",
            type: "PrefixedStorageKey"
          },
          {
            name: "key",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "Hash"
          }
        ],
        type: "Option<StorageData>"
      },
      getStorageEntries: {
        description: "Returns child storage entries for multiple keys at a specific block state",
        params: [
          {
            name: "childKey",
            type: "PrefixedStorageKey"
          },
          {
            name: "keys",
            type: "Vec<StorageKey>"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "Hash"
          }
        ],
        type: "Vec<Option<StorageData>>"
      },
      getStorageHash: {
        description: "Returns the hash of a child storage entry at a block state",
        params: [
          {
            name: "childKey",
            type: "PrefixedStorageKey"
          },
          {
            name: "key",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "Hash"
          }
        ],
        type: "Option<Hash>"
      },
      getStorageSize: {
        description: "Returns the size of a child storage entry at a block state",
        params: [
          {
            name: "childKey",
            type: "PrefixedStorageKey"
          },
          {
            name: "key",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "Hash"
          }
        ],
        type: "Option<u64>"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/childstate/definitions.js
var definitions_default71;
var init_definitions71 = __esm({
  "node_modules/@polkadot/types/interfaces/childstate/definitions.js"() {
    init_rpc14();
    definitions_default71 = {
      rpc: rpc14,
      types: {
        // StorageKey extends Bytes
        PrefixedStorageKey: "StorageKey"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/offchain/rpc.js
var rpc15;
var init_rpc15 = __esm({
  "node_modules/@polkadot/types/interfaces/offchain/rpc.js"() {
    rpc15 = {
      localStorageGet: {
        description: "Get offchain local storage under given key and prefix",
        isUnsafe: true,
        params: [
          {
            name: "kind",
            type: "StorageKind"
          },
          {
            name: "key",
            type: "Bytes"
          }
        ],
        type: "Option<Bytes>"
      },
      localStorageSet: {
        description: "Set offchain local storage under given key and prefix",
        isUnsafe: true,
        params: [
          {
            name: "kind",
            type: "StorageKind"
          },
          {
            name: "key",
            type: "Bytes"
          },
          {
            name: "value",
            type: "Bytes"
          }
        ],
        type: "Null"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/offchain/runtime.js
var runtime32;
var init_runtime32 = __esm({
  "node_modules/@polkadot/types/interfaces/offchain/runtime.js"() {
    runtime32 = {
      OffchainWorkerApi: [
        {
          methods: {
            offchain_worker: {
              description: "Starts the off-chain task for given block header.",
              params: [
                {
                  name: "header",
                  type: "Header"
                }
              ],
              type: "Null"
            }
          },
          version: 2
        },
        {
          methods: {
            offchain_worker: {
              description: "Starts the off-chain task for given block header.",
              params: [
                {
                  name: "number",
                  type: "BlockNumber"
                }
              ],
              type: "Null"
            }
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/offchain/definitions.js
var definitions_default72;
var init_definitions72 = __esm({
  "node_modules/@polkadot/types/interfaces/offchain/definitions.js"() {
    init_rpc15();
    init_runtime32();
    definitions_default72 = {
      rpc: rpc15,
      runtime: runtime32,
      types: {
        StorageKind: {
          _enum: {
            PERSISTENT: 1,
            LOCAL: 2
          }
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/payment/rpc.js
var rpc16;
var init_rpc16 = __esm({
  "node_modules/@polkadot/types/interfaces/payment/rpc.js"() {
    rpc16 = {
      queryFeeDetails: {
        // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
        deprecated: "Use `api.call.transactionPaymentApi.queryFeeDetails` instead",
        description: "Query the detailed fee of a given encoded extrinsic",
        params: [
          {
            name: "extrinsic",
            type: "Bytes"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "FeeDetails"
      },
      queryInfo: {
        // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
        deprecated: "Use `api.call.transactionPaymentApi.queryInfo` instead",
        description: "Retrieves the fee information for an encoded extrinsic",
        params: [
          {
            name: "extrinsic",
            type: "Bytes"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        // NOTE: Stuck on V1 forever (at least for the time being)
        type: "RuntimeDispatchInfoV1"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/payment/runtime.js
var V1_TO_V4_SHARED_PAY, V1_TO_V3_SHARED_CALL, V2_TO_V4_SHARED_PAY, V2_V3_SHARED_CALL, V3_SHARED_PAY_CALL, runtime33;
var init_runtime33 = __esm({
  "node_modules/@polkadot/types/interfaces/payment/runtime.js"() {
    V1_TO_V4_SHARED_PAY = {
      query_fee_details: {
        description: "The transaction fee details",
        params: [
          {
            name: "uxt",
            type: "Extrinsic"
          },
          {
            name: "len",
            type: "u32"
          }
        ],
        type: "FeeDetails"
      }
    };
    V1_TO_V3_SHARED_CALL = {
      query_call_fee_details: {
        description: "The call fee details",
        params: [
          {
            name: "call",
            type: "Call"
          },
          {
            name: "len",
            type: "u32"
          }
        ],
        type: "FeeDetails"
      }
    };
    V2_TO_V4_SHARED_PAY = {
      query_info: {
        description: "The transaction info",
        params: [
          {
            name: "uxt",
            type: "Extrinsic"
          },
          {
            name: "len",
            type: "u32"
          }
        ],
        type: "RuntimeDispatchInfo"
      }
    };
    V2_V3_SHARED_CALL = {
      query_call_info: {
        description: "The call info",
        params: [
          {
            name: "call",
            type: "Call"
          },
          {
            name: "len",
            type: "u32"
          }
        ],
        type: "RuntimeDispatchInfo"
      }
    };
    V3_SHARED_PAY_CALL = {
      query_length_to_fee: {
        description: "Query the output of the current LengthToFee given some input",
        params: [
          {
            name: "length",
            type: "u32"
          }
        ],
        type: "Balance"
      },
      query_weight_to_fee: {
        description: "Query the output of the current WeightToFee given some input",
        params: [
          {
            name: "weight",
            type: "Weight"
          }
        ],
        type: "Balance"
      }
    };
    runtime33 = {
      TransactionPaymentApi: [
        {
          // V4 is equivalent to V3 (V4 just dropped all V1 references)
          methods: {
            ...V3_SHARED_PAY_CALL,
            ...V2_TO_V4_SHARED_PAY,
            ...V1_TO_V4_SHARED_PAY
          },
          version: 4
        },
        {
          methods: {
            ...V3_SHARED_PAY_CALL,
            ...V2_TO_V4_SHARED_PAY,
            ...V1_TO_V4_SHARED_PAY
          },
          version: 3
        },
        {
          methods: {
            ...V2_TO_V4_SHARED_PAY,
            ...V1_TO_V4_SHARED_PAY
          },
          version: 2
        },
        {
          methods: {
            query_info: {
              description: "The transaction info",
              params: [
                {
                  name: "uxt",
                  type: "Extrinsic"
                },
                {
                  name: "len",
                  type: "u32"
                }
              ],
              // NOTE: _Should_ be V1 (as per current Substrate), however the interface was
              // changed mid-flight between versions. So we have some of each depending on
              // runtime. (We do detect the weight type, so correct)
              type: "RuntimeDispatchInfo"
            },
            ...V1_TO_V4_SHARED_PAY
          },
          version: 1
        }
      ],
      TransactionPaymentCallApi: [
        {
          methods: {
            ...V3_SHARED_PAY_CALL,
            ...V2_V3_SHARED_CALL,
            ...V1_TO_V3_SHARED_CALL
          },
          version: 3
        },
        {
          methods: {
            ...V2_V3_SHARED_CALL,
            ...V1_TO_V3_SHARED_CALL
          },
          version: 2
        },
        {
          methods: {
            CALL: {
              description: "The call info",
              params: [
                {
                  name: "call",
                  type: "Call"
                },
                {
                  name: "len",
                  type: "u32"
                }
              ],
              // NOTE: As per the above comment, the below is correct according to Substrate, but
              // _may_ yield fallback decoding on some versions of the runtime
              type: "RuntimeDispatchInfo"
            },
            ...V1_TO_V3_SHARED_CALL
          },
          version: 1
        }
      ]
    };
  }
});

// node_modules/@polkadot/types/interfaces/payment/definitions.js
var definitions_default73;
var init_definitions73 = __esm({
  "node_modules/@polkadot/types/interfaces/payment/definitions.js"() {
    init_rpc16();
    init_runtime33();
    definitions_default73 = {
      rpc: rpc16,
      runtime: runtime33,
      types: {
        FeeDetails: {
          inclusionFee: "Option<InclusionFee>"
          // skipped in serde
          // tip: 'Balance'
        },
        InclusionFee: {
          baseFee: "Balance",
          lenFee: "Balance",
          adjustedWeightFee: "Balance"
        },
        RuntimeDispatchInfo: {
          weight: "Weight",
          class: "DispatchClass",
          partialFee: "Balance"
        },
        RuntimeDispatchInfoV1: {
          weight: "WeightV1",
          class: "DispatchClass",
          partialFee: "Balance"
        },
        RuntimeDispatchInfoV2: {
          weight: "WeightV2",
          class: "DispatchClass",
          partialFee: "Balance"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/state/rpc.js
var rpc17;
var init_rpc17 = __esm({
  "node_modules/@polkadot/types/interfaces/state/rpc.js"() {
    rpc17 = {
      call: {
        alias: ["state_callAt"],
        description: "Perform a call to a builtin on the chain",
        params: [
          {
            name: "method",
            type: "Text"
          },
          {
            name: "data",
            type: "Bytes"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "Bytes"
      },
      getChildKeys: {
        description: "Retrieves the keys with prefix of a specific child storage",
        params: [
          {
            name: "childStorageKey",
            type: "StorageKey"
          },
          {
            name: "childDefinition",
            type: "StorageKey"
          },
          {
            name: "childType",
            type: "u32"
          },
          {
            name: "key",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "Vec<StorageKey>"
      },
      getChildReadProof: {
        description: "Returns proof of storage for child key entries at a specific block state.",
        params: [
          {
            name: "childStorageKey",
            type: "PrefixedStorageKey"
          },
          {
            name: "keys",
            type: "Vec<StorageKey>"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "ReadProof"
      },
      getChildStorage: {
        description: "Retrieves the child storage for a key",
        params: [
          {
            name: "childStorageKey",
            type: "StorageKey"
          },
          {
            name: "childDefinition",
            type: "StorageKey"
          },
          {
            name: "childType",
            type: "u32"
          },
          {
            name: "key",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "StorageData"
      },
      getChildStorageHash: {
        description: "Retrieves the child storage hash",
        params: [
          {
            name: "childStorageKey",
            type: "StorageKey"
          },
          {
            name: "childDefinition",
            type: "StorageKey"
          },
          {
            name: "childType",
            type: "u32"
          },
          {
            name: "key",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "Hash"
      },
      getChildStorageSize: {
        description: "Retrieves the child storage size",
        params: [
          {
            name: "childStorageKey",
            type: "StorageKey"
          },
          {
            name: "childDefinition",
            type: "StorageKey"
          },
          {
            name: "childType",
            type: "u32"
          },
          {
            name: "key",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "u64"
      },
      getKeys: {
        deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
        description: "Retrieves the keys with a certain prefix",
        params: [
          {
            name: "key",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "Vec<StorageKey>"
      },
      getKeysPaged: {
        alias: ["state_getKeysPagedAt"],
        description: "Returns the keys with prefix with pagination support.",
        params: [
          {
            name: "key",
            type: "StorageKey"
          },
          {
            name: "count",
            type: "u32"
          },
          {
            isOptional: true,
            name: "startKey",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "Vec<StorageKey>"
      },
      getMetadata: {
        description: "Returns the runtime metadata",
        params: [
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "Metadata"
      },
      getPairs: {
        deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
        description: "Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)",
        isUnsafe: true,
        params: [
          {
            name: "prefix",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "Vec<KeyValue>"
      },
      getReadProof: {
        description: "Returns proof of storage entries at a specific block state",
        params: [
          {
            name: "keys",
            type: "Vec<StorageKey>"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "ReadProof"
      },
      getRuntimeVersion: {
        alias: ["chain_getRuntimeVersion"],
        description: "Get the runtime version",
        params: [
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "RuntimeVersion"
      },
      getStorage: {
        alias: ["state_getStorageAt"],
        description: "Retrieves the storage for a key",
        params: [
          {
            name: "key",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "StorageData"
      },
      getStorageHash: {
        alias: ["state_getStorageHashAt"],
        description: "Retrieves the storage hash",
        params: [
          {
            name: "key",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "Hash"
      },
      getStorageSize: {
        alias: ["state_getStorageSizeAt"],
        description: "Retrieves the storage size",
        params: [
          {
            name: "key",
            type: "StorageKey"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "u64"
      },
      queryStorage: {
        description: "Query historical storage entries (by key) starting from a start block",
        isUnsafe: true,
        params: [
          {
            name: "keys",
            type: "Vec<StorageKey>"
          },
          {
            name: "fromBlock",
            type: "Hash"
          },
          {
            isOptional: true,
            name: "toBlock",
            type: "BlockHash"
          }
        ],
        type: "Vec<StorageChangeSet>"
      },
      queryStorageAt: {
        description: "Query storage entries (by key) starting at block hash given as the second parameter",
        params: [
          {
            name: "keys",
            type: "Vec<StorageKey>"
          },
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "Vec<StorageChangeSet>"
      },
      subscribeRuntimeVersion: {
        alias: ["chain_subscribeRuntimeVersion", "chain_unsubscribeRuntimeVersion"],
        description: "Retrieves the runtime version via subscription",
        params: [],
        pubsub: [
          "runtimeVersion",
          "subscribeRuntimeVersion",
          "unsubscribeRuntimeVersion"
        ],
        type: "RuntimeVersion"
      },
      subscribeStorage: {
        description: "Subscribes to storage changes for the provided keys",
        // NOTE Just marking it here to follow the logic - this is unsafe when no
        // keys are provided (i.e. subscribing to all), generally this is used
        // extensively with normal subscriptions
        // isUnsafe: true,
        params: [
          {
            isOptional: true,
            name: "keys",
            type: "Vec<StorageKey>"
          }
        ],
        pubsub: [
          "storage",
          "subscribeStorage",
          "unsubscribeStorage"
        ],
        type: "StorageChangeSet"
      },
      traceBlock: {
        description: "Provides a way to trace the re-execution of a single block",
        isUnsafe: true,
        params: [
          {
            name: "block",
            type: "Hash"
          },
          {
            name: "targets",
            type: "Option<Text>"
          },
          {
            name: "storageKeys",
            type: "Option<Text>"
          },
          {
            name: "methods",
            type: "Option<Text>"
          }
        ],
        type: "TraceBlockResponse"
      },
      trieMigrationStatus: {
        description: "Check current migration state",
        isUnsafe: true,
        params: [
          {
            isHistoric: true,
            isOptional: true,
            name: "at",
            type: "BlockHash"
          }
        ],
        type: "MigrationStatusResult"
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/state/definitions.js
var definitions_default74;
var init_definitions74 = __esm({
  "node_modules/@polkadot/types/interfaces/state/definitions.js"() {
    init_rpc17();
    definitions_default74 = {
      rpc: rpc17,
      types: {
        ApiId: "[u8; 8]",
        BlockTrace: {
          blockHash: "Text",
          parentHash: "Text",
          tracingTargets: "Text",
          storageKeys: "Text",
          spans: "Vec<BlockTraceSpan>",
          events: "Vec<BlockTraceEvent>"
        },
        BlockTraceEvent: {
          target: "Text",
          data: "BlockTraceEventData",
          parentId: "Option<u64>"
        },
        BlockTraceEventData: {
          stringValues: "HashMap<Text, Text>"
        },
        BlockTraceSpan: {
          id: "u64",
          parentId: "Option<u64>",
          name: "Text",
          target: "Text",
          wasm: "bool"
        },
        KeyValueOption: "(StorageKey, Option<StorageData>)",
        MigrationStatusResult: {
          topRemainingToMigrate: "u64",
          childRemainingToMigrate: "u64"
        },
        ReadProof: {
          at: "Hash",
          proof: "Vec<Bytes>"
        },
        RuntimeVersionApi: "(ApiId, u32)",
        RuntimeVersion: {
          specName: "Text",
          implName: "Text",
          authoringVersion: "u32",
          specVersion: "u32",
          implVersion: "u32",
          apis: "Vec<RuntimeVersionApi>",
          transactionVersion: "u32",
          stateVersion: "u8"
        },
        RuntimeVersionPre4: {
          specName: "Text",
          implName: "Text",
          authoringVersion: "u32",
          specVersion: "u32",
          implVersion: "u32",
          apis: "Vec<RuntimeVersionApi>",
          transactionVersion: "u32"
        },
        RuntimeVersionPre3: {
          specName: "Text",
          implName: "Text",
          authoringVersion: "u32",
          specVersion: "u32",
          implVersion: "u32",
          apis: "Vec<RuntimeVersionApi>"
        },
        RuntimeVersionPartial: {
          specName: "Text",
          specVersion: "u32",
          apis: "Vec<RuntimeVersionApi>"
        },
        SpecVersion: "u32",
        StorageChangeSet: {
          block: "Hash",
          changes: "Vec<KeyValueOption>"
        },
        TraceBlockResponse: {
          _enum: {
            TraceError: "TraceError",
            BlockTrace: "BlockTrace"
          }
        },
        TraceError: {
          error: "Text"
        }
      }
    };
  }
});

// node_modules/@polkadot/types/interfaces/definitions.js
var definitions_exports = {};
__export(definitions_exports, {
  assetConversion: () => definitions_default4,
  assets: () => definitions_default5,
  attestations: () => definitions_default53,
  aura: () => definitions_default6,
  author: () => definitions_default69,
  authorship: () => definitions_default7,
  babe: () => definitions_default8,
  balances: () => definitions_default9,
  beefy: () => definitions_default10,
  benchmark: () => definitions_default11,
  blockbuilder: () => definitions_default12,
  bridges: () => definitions_default54,
  chain: () => definitions_default70,
  childstate: () => definitions_default71,
  claims: () => definitions_default55,
  collective: () => definitions_default13,
  consensus: () => definitions_default14,
  contracts: () => definitions_default15,
  contractsAbi: () => definitions_default63,
  crowdloan: () => definitions_default56,
  cumulus: () => definitions_default57,
  democracy: () => definitions_default16,
  dev: () => definitions_default17,
  discovery: () => definitions_default18,
  elections: () => definitions_default19,
  engine: () => definitions_default20,
  eth: () => definitions_default64,
  evm: () => definitions_default21,
  extrinsics: () => definitions_default22,
  finality: () => definitions_default58,
  fungibles: () => definitions_default23,
  genericAsset: () => definitions_default24,
  genesisBuilder: () => definitions_default25,
  gilt: () => definitions_default26,
  grandpa: () => definitions_default27,
  identity: () => definitions_default28,
  imOnline: () => definitions_default29,
  lottery: () => definitions_default30,
  metadata: () => definitions_default,
  mixnet: () => definitions_default31,
  mmr: () => definitions_default32,
  nfts: () => definitions_default33,
  nimbus: () => definitions_default65,
  nompools: () => definitions_default34,
  offchain: () => definitions_default72,
  offences: () => definitions_default35,
  ormlOracle: () => definitions_default66,
  ormlTokens: () => definitions_default67,
  parachains: () => definitions_default59,
  payment: () => definitions_default73,
  poll: () => definitions_default60,
  pow: () => definitions_default36,
  proxy: () => definitions_default37,
  purchase: () => definitions_default61,
  recovery: () => definitions_default38,
  rpc: () => definitions_default68,
  runtime: () => definitions_default2,
  scaleInfo: () => definitions_default3,
  scheduler: () => definitions_default39,
  session: () => definitions_default40,
  society: () => definitions_default41,
  staking: () => definitions_default42,
  state: () => definitions_default74,
  statement: () => definitions_default43,
  support: () => definitions_default44,
  syncstate: () => definitions_default45,
  system: () => definitions_default46,
  treasury: () => definitions_default47,
  txpayment: () => definitions_default48,
  txqueue: () => definitions_default49,
  uniques: () => definitions_default50,
  utility: () => definitions_default51,
  vesting: () => definitions_default52,
  xcm: () => definitions_default62
});
var init_definitions75 = __esm({
  "node_modules/@polkadot/types/interfaces/definitions.js"() {
    init_essentials();
    init_definitions4();
    init_definitions5();
    init_definitions6();
    init_definitions7();
    init_definitions8();
    init_definitions9();
    init_definitions10();
    init_definitions11();
    init_definitions12();
    init_definitions13();
    init_definitions14();
    init_definitions15();
    init_definitions16();
    init_definitions17();
    init_definitions18();
    init_definitions19();
    init_definitions20();
    init_definitions21();
    init_definitions22();
    init_definitions23();
    init_definitions24();
    init_definitions25();
    init_definitions26();
    init_definitions27();
    init_definitions28();
    init_definitions29();
    init_definitions30();
    init_definitions31();
    init_definitions32();
    init_definitions33();
    init_definitions34();
    init_definitions35();
    init_definitions36();
    init_definitions37();
    init_definitions38();
    init_definitions39();
    init_definitions40();
    init_definitions41();
    init_definitions42();
    init_definitions43();
    init_definitions44();
    init_definitions45();
    init_definitions46();
    init_definitions47();
    init_definitions48();
    init_definitions49();
    init_definitions50();
    init_definitions51();
    init_definitions52();
    init_definitions53();
    init_definitions54();
    init_definitions55();
    init_definitions56();
    init_definitions57();
    init_definitions58();
    init_definitions59();
    init_definitions60();
    init_definitions61();
    init_definitions62();
    init_definitions63();
    init_definitions64();
    init_definitions65();
    init_definitions66();
    init_definitions67();
    init_definitions68();
    init_definitions69();
    init_definitions70();
    init_definitions71();
    init_definitions72();
    init_definitions73();
    init_definitions74();
  }
});

// node_modules/@polkadot/types/interfaces/jsonrpc.js
var jsonrpc, jsonrpc_default;
var init_jsonrpc3 = __esm({
  "node_modules/@polkadot/types/interfaces/jsonrpc.js"() {
    init_util();
    init_definitions75();
    jsonrpc = {};
    Object.keys(definitions_exports).forEach((s) => Object.entries(definitions_exports[s].rpc || {}).forEach(([method, def]) => {
      const section2 = def.aliasSection || s;
      if (!jsonrpc[section2]) {
        jsonrpc[section2] = {};
      }
      jsonrpc[section2][method] = objectSpread({}, def, {
        isSubscription: !!def.pubsub,
        jsonrpc: `${section2}_${method}`,
        method,
        section: section2
      });
    }));
    jsonrpc_default = jsonrpc;
  }
});

// node_modules/@polkadot/types/metadata/PortableRegistry/PortableRegistry.js
function sanitizeDocs(docs) {
  const count2 = docs.length;
  const result = new Array(count2);
  for (let i = 0; i < count2; i++) {
    result[i] = docs[i].toString();
  }
  return result;
}
function splitNamespace(values) {
  const count2 = values.length;
  const result = new Array(count2);
  for (let i = 0; i < count2; i++) {
    result[i] = values[i].split("::");
  }
  return result;
}
function matchParts(first2, second) {
  return first2.length === second.length && first2.every((a, index) => {
    const b2 = second[index].toString();
    if (a === "*" || a === b2) {
      return true;
    }
    if (a.includes("*") && a.includes("_") && b2.includes("_")) {
      let suba = a.split("_");
      let subb = b2.split("_");
      if (suba[0] === "*") {
        const indexOf = subb.indexOf(suba[1]);
        if (indexOf !== -1) {
          suba = suba.slice(1);
          subb = subb.slice(indexOf);
        }
      }
      if (suba.length === 2 && suba[1] === "*" && suba[0] === subb[0]) {
        return true;
      }
      return matchParts(suba, subb);
    }
    return false;
  });
}
function getAliasPath({ def, path }) {
  if (["frame_support::weights::weight_v2::Weight", "sp_weights::weight_v2::Weight"].includes(path.join("::"))) {
    return !def.isComposite || def.asComposite.fields.length === 1 ? "WeightV1" : null;
  }
  return path.length && PATHS_ALIAS.some((a) => matchParts(a, path)) ? path[path.length - 1].toString() : null;
}
function extractNameFlat(portable, lookupIndex, params, path, isInternal = false) {
  const count2 = path.length;
  if (count2 === 0 || WRAPPERS.includes(path[count2 - 1].toString())) {
    return null;
  }
  const camels = new Array(count2);
  const lowers = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const c = stringPascalCase(isInternal ? path[i].replace("pallet_", "") : path[i]);
    const l17 = c.toLowerCase();
    camels[i] = c;
    lowers[i] = l17;
  }
  let name = "";
  for (let i = 0; i < count2; i++) {
    const l17 = lowers[i];
    if (i !== 1 || !PATH_RM_INDEX_1.includes(l17)) {
      if (l17 !== lowers[i + 1]) {
        name += camels[i];
      }
    }
  }
  if (camels[1] === "RawOrigin" && count2 === 2 && params.length === 2 && params[1].type.isSome) {
    const instanceType = portable[params[1].type.unwrap().toNumber()];
    if (instanceType.type.path.length === 2) {
      name = `${name}${instanceType.type.path[1].toString()}`;
    }
  }
  return { lookupIndex, name, params };
}
function extractName(portable, lookupIndex, { type: { params, path } }) {
  return extractNameFlat(portable, lookupIndex, params, path);
}
function nextDupeMatches(name, startAt, names) {
  const result = [names[startAt]];
  for (let i = startAt + 1, count2 = names.length; i < count2; i++) {
    const v3 = names[i];
    if (v3.name === name) {
      result.push(v3);
    }
  }
  return result;
}
function rewriteDupes(input, rewrite) {
  const count2 = input.length;
  for (let i = 0; i < count2; i++) {
    const a = input[i];
    for (let j3 = i + 1; j3 < count2; j3++) {
      const b2 = input[j3];
      if (a.lookupIndex !== b2.lookupIndex && a.name === b2.name) {
        return false;
      }
    }
  }
  for (let i = 0; i < count2; i++) {
    const p = input[i];
    rewrite[p.lookupIndex] = p.name;
  }
  return true;
}
function removeDupeNames(lookup, portable, names) {
  const rewrite = {};
  return names.map((original, startAt) => {
    const { lookupIndex, name, params } = original;
    if (!name) {
      return null;
    } else if (rewrite[lookupIndex]) {
      return original;
    }
    const allSame = nextDupeMatches(name, startAt, names);
    if (allSame.length === 1) {
      return original;
    }
    const anyDiff = allSame.some((o) => params.length !== o.params.length || params.some((p, index) => !p.name.eq(o.params[index].name) || p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== o.params[index].type.unwrapOr(TYPE_UNWRAP).toNumber()));
    if (!anyDiff) {
      return original;
    }
    const paramIdx = params.findIndex(({ type }, index) => allSame.every(({ params: params2 }, aIndex) => params2[index].type.isSome && (aIndex === 0 || !params2[index].type.eq(type))));
    if (paramIdx === -1) {
      return original;
    }
    const sameCount = allSame.length;
    const adjusted = new Array(sameCount);
    for (let i = 0; i < sameCount; i++) {
      const { lookupIndex: lookupIndex2, name: name2, params: params2 } = allSame[i];
      const { def, path } = lookup.getSiType(params2[paramIdx].type.unwrap());
      if (!def.isPrimitive && !path.length) {
        return null;
      }
      adjusted[i] = {
        lookupIndex: lookupIndex2,
        name: def.isPrimitive ? `${name2}${def.asPrimitive.toString()}` : `${name2}${path[path.length - 1].toString()}`
      };
    }
    if (rewriteDupes(adjusted, rewrite)) {
      return original;
    }
    for (let i = 0; i < sameCount; i++) {
      const { lookupIndex: lookupIndex2, name: name2, params: params2 } = allSame[i];
      const { def, path } = lookup.getSiType(params2[paramIdx].type.unwrap());
      const flat = extractNameFlat(portable, lookupIndex2, params2, path, true);
      if (def.isPrimitive || !flat) {
        return null;
      }
      adjusted[i] = {
        lookupIndex: lookupIndex2,
        name: `${name2}${flat.name}`
      };
    }
    if (rewriteDupes(adjusted, rewrite)) {
      return original;
    }
    return null;
  }).filter((n) => !!n).map(({ lookupIndex, name, params }) => ({
    lookupIndex,
    name: rewrite[lookupIndex] || name,
    params
  }));
}
function registerTypes(lookup, lookups, names, params) {
  lookup.registry.register(lookups);
  if (params.SpRuntimeUncheckedExtrinsic) {
    const [addrParam, , sigParam] = params.SpRuntimeUncheckedExtrinsic;
    const siAddress = lookup.getSiType(addrParam.type.unwrap());
    const siSignature = lookup.getSiType(sigParam.type.unwrap());
    const nsSignature = siSignature.path.join("::");
    let nsAccountId = siAddress.path.join("::");
    const isMultiAddress = nsAccountId === "sp_runtime::multiaddress::MultiAddress";
    if (isMultiAddress) {
      const [idParam] = siAddress.params;
      nsAccountId = lookup.getSiType(idParam.type.unwrap()).path.join("::");
    }
    lookup.registry.register({
      // known: account::AccountId20, fp_account::AccountId20, primitive_types::H160
      AccountId: nsAccountId.endsWith("::AccountId20") || nsAccountId.endsWith("::H160") ? "AccountId20" : "AccountId32",
      Address: isMultiAddress ? "MultiAddress" : "AccountId",
      ExtrinsicSignature: ["sp_runtime::MultiSignature"].includes(nsSignature) ? "MultiSignature" : names[sigParam.type.unwrap().toNumber()] || "MultiSignature"
    });
  }
}
function extractAliases(params, isContract) {
  const hasParams = Object.keys(params).some((k2) => !k2.startsWith("Pallet"));
  const alias2 = {};
  if (params.SpRuntimeUncheckedExtrinsic) {
    const [, { type }] = params.SpRuntimeUncheckedExtrinsic;
    alias2[type.unwrap().toNumber()] = "Call";
  } else if (hasParams && !isContract) {
    l9.warn("Unable to determine runtime Call type, cannot inspect sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic");
  }
  if (params.FrameSystemEventRecord) {
    const [{ type }] = params.FrameSystemEventRecord;
    alias2[type.unwrap().toNumber()] = "Event";
  } else if (hasParams && !isContract) {
    l9.warn("Unable to determine runtime Event type, cannot inspect frame_system::EventRecord");
  }
  return alias2;
}
function extractTypeInfo(lookup, portable) {
  const nameInfo = [];
  const types2 = {};
  for (let i = 0, count2 = portable.length; i < count2; i++) {
    const type = portable[i];
    const lookupIndex = type.id.toNumber();
    const extracted = extractName(portable, lookupIndex, portable[i]);
    if (extracted) {
      nameInfo.push(extracted);
    }
    types2[lookupIndex] = type;
  }
  const lookups = {};
  const names = {};
  const params = {};
  const dedup = removeDupeNames(lookup, portable, nameInfo);
  for (let i = 0, count2 = dedup.length; i < count2; i++) {
    const { lookupIndex, name, params: p } = dedup[i];
    names[lookupIndex] = name;
    lookups[name] = lookup.registry.createLookupType(lookupIndex);
    params[name] = p;
  }
  return { lookups, names, params, types: types2 };
}
var l9, TYPE_UNWRAP, PRIMITIVE_ALIAS, PATHS_ALIAS, PATHS_SET, BITVEC_NS_LSB, BITVEC_NS_MSB, BITVEC_NS, WRAPPERS, RESERVED, PATH_RM_INDEX_1, PortableRegistry;
var init_PortableRegistry = __esm({
  "node_modules/@polkadot/types/metadata/PortableRegistry/PortableRegistry.js"() {
    init_types_codec();
    init_types_create();
    init_util();
    l9 = logger("PortableRegistry");
    TYPE_UNWRAP = { toNumber: () => -1 };
    PRIMITIVE_ALIAS = {
      Char: "u32",
      // Rust char is 4-bytes
      Str: "Text"
    };
    PATHS_ALIAS = splitNamespace([
      // full matching on exact names...
      // these are well-known types with additional encoding
      "sp_core::crypto::AccountId32",
      "sp_runtime::generic::era::Era",
      "sp_runtime::multiaddress::MultiAddress",
      // ethereum overrides (Frontier, Moonbeam, Polkadot claims)
      "fp_account::AccountId20",
      "account::AccountId20",
      "polkadot_runtime_common::claims::EthereumAddress",
      // weights 2 is a structure, however for 1.5. with a single field it
      // should be flatenned (can appear in Compact<Weight> extrinsics)
      "frame_support::weights::weight_v2::Weight",
      "sp_weights::weight_v2::Weight",
      // wildcard matching in place...
      // these have a specific encoding or logic, use a wildcard for {pallet, darwinia}_democracy
      "*_democracy::vote::Vote",
      "*_conviction_voting::vote::Vote",
      "*_identity::types::Data",
      // these are opaque Vec<u8> wrappers
      "sp_core::OpaqueMetadata",
      "sp_core::OpaquePeerId",
      "sp_core::offchain::OpaqueMultiaddr",
      // shorten some well-known types
      "primitive_types::*",
      "sp_arithmetic::per_things::*",
      // runtime
      "*_runtime::RuntimeCall",
      "*_runtime::RuntimeEvent",
      // ink!
      "ink::env::types::*",
      "ink::primitives::types::*",
      "ink_env::types::*",
      "ink_primitives::types::*",
      // noir
      "np_runtime::accountname::AccountName",
      "np_runtime::universaladdress::UniversalAddress"
    ]);
    PATHS_SET = splitNamespace([
      "pallet_identity::types::BitFlags"
    ]);
    BITVEC_NS_LSB = ["bitvec::order::Lsb0", "BitOrderLsb0"];
    BITVEC_NS_MSB = ["bitvec::order::Msb0", "BitOrderMsb0"];
    BITVEC_NS = [...BITVEC_NS_LSB, ...BITVEC_NS_MSB];
    WRAPPERS = ["BoundedBTreeMap", "BoundedBTreeSet", "BoundedVec", "Box", "BTreeMap", "BTreeSet", "Cow", "Option", "Range", "RangeInclusive", "Result", "WeakBoundedVec", "WrapperKeepOpaque", "WrapperOpaque"];
    RESERVED = [
      // JS reserved words
      "entries",
      "keys",
      "new",
      "size",
      // exposed by all Codec objects
      "hash",
      "registry"
    ];
    PATH_RM_INDEX_1 = ["generic", "misc", "pallet", "traits", "types"];
    PortableRegistry = class extends Struct {
      __internal__alias;
      __internal__lookups;
      __internal__names;
      __internal__params;
      __internal__typeDefs = {};
      __internal__types;
      constructor(registry, value, isContract) {
        super(registry, {
          types: "Vec<PortableType>"
        }, value);
        const { lookups, names, params, types: types2 } = extractTypeInfo(this, this.types);
        this.__internal__alias = extractAliases(params, isContract);
        this.__internal__lookups = lookups;
        this.__internal__names = names;
        this.__internal__params = params;
        this.__internal__types = types2;
      }
      /**
       * @description Returns all the available type names for this chain
       **/
      get names() {
        return Object.values(this.__internal__names).sort();
      }
      /**
       * @description Returns all the available parameterized types for this chain
       **/
      get paramTypes() {
        return this.__internal__params;
      }
      /**
       * @description The types of the registry
       */
      get types() {
        return this.getT("types");
      }
      /**
       * @description Register all available types into the registry (generally for internal usage)
       */
      register() {
        registerTypes(this, this.__internal__lookups, this.__internal__names, this.__internal__params);
      }
      /**
       * @description Returns the name for a specific lookup
       */
      getName(lookupId) {
        return this.__internal__names[this.__internal__getLookupId(lookupId)];
      }
      /**
       * @description Finds a specific type in the registry
       */
      getSiType(lookupId) {
        const found = (this.__internal__types || this.types)[this.__internal__getLookupId(lookupId)];
        if (!found) {
          throw new Error(`PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
        }
        return found.type;
      }
      /**
       * @description Lookup the type definition for the index
       */
      getTypeDef(lookupId) {
        const lookupIndex = this.__internal__getLookupId(lookupId);
        if (!this.__internal__typeDefs[lookupIndex]) {
          const lookupName = this.__internal__names[lookupIndex];
          const empty3 = {
            info: TypeDefInfo.DoNotConstruct,
            lookupIndex,
            lookupName,
            type: this.registry.createLookupType(lookupIndex)
          };
          if (lookupName) {
            this.__internal__typeDefs[lookupIndex] = empty3;
          }
          const extracted = this.__internal__extract(this.getSiType(lookupId), lookupIndex);
          if (!lookupName) {
            this.__internal__typeDefs[lookupIndex] = empty3;
          }
          Object.keys(extracted).forEach((k2) => {
            if (k2 !== "lookupName" || extracted[k2]) {
              this.__internal__typeDefs[lookupIndex][k2] = extracted[k2];
            }
          });
          if (extracted.info === TypeDefInfo.Plain) {
            this.__internal__typeDefs[lookupIndex].lookupNameRoot = this.__internal__typeDefs[lookupIndex].lookupName;
            delete this.__internal__typeDefs[lookupIndex].lookupName;
          }
        }
        return this.__internal__typeDefs[lookupIndex];
      }
      /**
       * @description For a specific field, perform adjustments to not have built-in conflicts
       */
      sanitizeField(name) {
        let nameField = null;
        let nameOrig = null;
        if (name.isSome) {
          nameField = stringCamelCase(name.unwrap());
          if (nameField.includes("#")) {
            nameOrig = nameField;
            nameField = nameOrig.replace(/#/g, "_");
          } else if (RESERVED.includes(nameField)) {
            nameOrig = nameField;
            nameField = `${nameField}_`;
          }
        }
        return [nameField, nameOrig];
      }
      /** @internal Creates a TypeDef based on an internal lookupId */
      __internal__createSiDef(lookupId) {
        const typeDef = this.getTypeDef(lookupId);
        const lookupIndex = lookupId.toNumber();
        return [TypeDefInfo.DoNotConstruct, TypeDefInfo.Enum, TypeDefInfo.Struct].includes(typeDef.info) && typeDef.lookupName ? {
          docs: typeDef.docs,
          info: TypeDefInfo.Si,
          lookupIndex,
          lookupName: this.__internal__names[lookupIndex],
          type: this.registry.createLookupType(lookupId)
        } : typeDef;
      }
      /** @internal Converts a lookupId input to the actual lookup index */
      __internal__getLookupId(lookupId) {
        if (isString(lookupId)) {
          if (!this.registry.isLookupType(lookupId)) {
            throw new Error(`PortableRegistry: Expected a lookup string type, found ${lookupId}`);
          }
          return parseInt(lookupId.replace("Lookup", ""), 10);
        } else if (isNumber(lookupId)) {
          return lookupId;
        }
        return lookupId.toNumber();
      }
      /** @internal Converts a type into a TypeDef for Codec usage */
      __internal__extract(type, lookupIndex) {
        const namespace = type.path.join("::");
        let typeDef;
        const aliasType = this.__internal__alias[lookupIndex] || getAliasPath(type);
        try {
          if (aliasType) {
            typeDef = this.__internal__extractAliasPath(lookupIndex, aliasType);
          } else {
            switch (type.def.type) {
              case "Array":
                typeDef = this.__internal__extractArray(lookupIndex, type.def.asArray);
                break;
              case "BitSequence":
                typeDef = this.__internal__extractBitSequence(lookupIndex, type.def.asBitSequence);
                break;
              case "Compact":
                typeDef = this.__internal__extractCompact(lookupIndex, type.def.asCompact);
                break;
              case "Composite":
                typeDef = this.__internal__extractComposite(lookupIndex, type, type.def.asComposite);
                break;
              case "HistoricMetaCompat":
                typeDef = this.__internal__extractHistoric(lookupIndex, type.def.asHistoricMetaCompat);
                break;
              case "Primitive":
                typeDef = this.__internal__extractPrimitive(lookupIndex, type);
                break;
              case "Sequence":
                typeDef = this.__internal__extractSequence(lookupIndex, type.def.asSequence);
                break;
              case "Tuple":
                typeDef = this.__internal__extractTuple(lookupIndex, type.def.asTuple);
                break;
              case "Variant":
                typeDef = this.__internal__extractVariant(lookupIndex, type, type.def.asVariant);
                break;
              default:
                assertUnreachable(type.def.type);
            }
          }
        } catch (error) {
          throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ""}: Error extracting ${stringify(type)}: ${error.message}`);
        }
        return objectSpread({
          docs: sanitizeDocs(type.docs),
          namespace
        }, typeDef);
      }
      /** @internal Extracts a ScaleInfo Array into TypeDef.VecFixed */
      __internal__extractArray(_2, { len, type }) {
        const length = len.toNumber();
        if (length > 2048) {
          throw new Error("Only support for [Type; <length>], where length <= 2048");
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.VecFixed,
          length,
          sub: this.__internal__createSiDef(type)
        });
      }
      /** @internal Extracts a ScaleInfo BitSequence into TypeDef.Plain */
      __internal__extractBitSequence(_2, { bitOrderType, bitStoreType }) {
        const a = this.__internal__createSiDef(bitOrderType);
        const b2 = this.__internal__createSiDef(bitStoreType);
        const [bitOrder, bitStore] = BITVEC_NS.includes(a.namespace || "") ? [a, b2] : [b2, a];
        if (!bitOrder.namespace || !BITVEC_NS.includes(bitOrder.namespace)) {
          throw new Error(`Unexpected bitOrder found as ${bitOrder.namespace || "<unknown>"}`);
        } else if (bitStore.info !== TypeDefInfo.Plain || bitStore.type !== "u8") {
          throw new Error(`Only u8 bitStore is currently supported, found ${bitStore.type}`);
        }
        const isLsb = BITVEC_NS_LSB.includes(bitOrder.namespace);
        if (!isLsb) {
        }
        return {
          info: TypeDefInfo.Plain,
          type: "BitVec"
        };
      }
      /** @internal Extracts a ScaleInfo Compact into TypeDef.Compact */
      __internal__extractCompact(_2, { type }) {
        return withTypeString(this.registry, {
          info: TypeDefInfo.Compact,
          sub: this.__internal__createSiDef(type)
        });
      }
      /** @internal Extracts a ScaleInfo Composite into TypeDef.{BTree*, Range*, Wrapper*} */
      __internal__extractComposite(lookupIndex, { params, path }, { fields }) {
        if (path.length) {
          const pathFirst = path[0].toString();
          const pathLast = path[path.length - 1].toString();
          if (path.length === 1 && pathFirst === "BTreeMap") {
            if (params.length !== 2) {
              throw new Error(`BTreeMap requires 2 parameters, found ${params.length}`);
            }
            return withTypeString(this.registry, {
              info: TypeDefInfo.BTreeMap,
              sub: params.map(({ type }) => this.__internal__createSiDef(type.unwrap()))
            });
          } else if (path.length === 1 && pathFirst === "BTreeSet") {
            if (params.length !== 1) {
              throw new Error(`BTreeSet requires 1 parameter, found ${params.length}`);
            }
            return withTypeString(this.registry, {
              info: TypeDefInfo.BTreeSet,
              sub: this.__internal__createSiDef(params[0].type.unwrap())
            });
          } else if (["Range", "RangeInclusive"].includes(pathFirst)) {
            if (params.length !== 1) {
              throw new Error(`Range requires 1 parameter, found ${params.length}`);
            }
            return withTypeString(this.registry, {
              info: pathFirst === "Range" ? TypeDefInfo.Range : TypeDefInfo.RangeInclusive,
              sub: this.__internal__createSiDef(params[0].type.unwrap()),
              type: pathFirst
            });
          } else if (["WrapperKeepOpaque", "WrapperOpaque"].includes(pathLast)) {
            if (params.length !== 1) {
              throw new Error(`WrapperOpaque requires 1 parameter, found ${params.length}`);
            }
            return withTypeString(this.registry, {
              info: pathLast === "WrapperKeepOpaque" ? TypeDefInfo.WrapperKeepOpaque : TypeDefInfo.WrapperOpaque,
              sub: this.__internal__createSiDef(params[0].type.unwrap()),
              type: pathLast
            });
          }
        }
        return PATHS_SET.some((p) => matchParts(p, path)) ? this.__internal__extractCompositeSet(lookupIndex, params, fields) : this.__internal__extractFields(lookupIndex, fields);
      }
      /** @internal Extracts a ScaleInfo CompositeSet into TypeDef.Set */
      __internal__extractCompositeSet(_2, params, fields) {
        if (params.length !== 1 || fields.length !== 1) {
          throw new Error("Set handling expects param/field as single entries");
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.Set,
          length: this.registry.createTypeUnsafe(this.registry.createLookupType(fields[0].type), []).bitLength(),
          sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({ index, name }) => ({
            // This will be an issue > 2^53 - 1 ... don't have those (yet)
            index: index.toNumber(),
            info: TypeDefInfo.Plain,
            name: name.toString(),
            type: "Null"
          }))
        });
      }
      /** @internal Extracts ScaleInfo enum/struct fields into TypeDef.{Struct, Tuple} */
      __internal__extractFields(lookupIndex, fields) {
        let isStruct = true;
        let isTuple = true;
        const count2 = fields.length;
        for (let f = 0; f < count2; f++) {
          const { name } = fields[f];
          isStruct = isStruct && name.isSome;
          isTuple = isTuple && name.isNone;
        }
        if (!isTuple && !isStruct) {
          throw new Error("Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)");
        }
        if (count2 === 0) {
          return {
            info: TypeDefInfo.Null,
            type: "Null"
          };
        } else if (isTuple && count2 === 1) {
          const typeDef = this.__internal__createSiDef(fields[0].type);
          return objectSpread({}, typeDef, lookupIndex === -1 ? null : {
            lookupIndex,
            lookupName: this.__internal__names[lookupIndex],
            lookupNameRoot: typeDef.lookupName
          }, fields[0].typeName.isSome ? { typeName: sanitize(fields[0].typeName.unwrap()) } : null);
        }
        const [sub, alias2] = this.__internal__extractFieldsAlias(fields);
        return withTypeString(this.registry, objectSpread({
          info: isTuple ? TypeDefInfo.Tuple : TypeDefInfo.Struct,
          sub
        }, alias2.size ? { alias: alias2 } : null, lookupIndex === -1 ? null : {
          lookupIndex,
          lookupName: this.__internal__names[lookupIndex]
        }));
      }
      /** @internal Apply field aliassed (with no JS conflicts) */
      __internal__extractFieldsAlias(fields) {
        const alias2 = /* @__PURE__ */ new Map();
        const count2 = fields.length;
        const sub = new Array(count2);
        for (let i = 0; i < count2; i++) {
          const { docs, name, type, typeName } = fields[i];
          const typeDef = this.__internal__createSiDef(type);
          if (name.isNone) {
            sub[i] = typeDef;
          } else {
            const [nameField, nameOrig] = this.sanitizeField(name);
            if (nameField && nameOrig) {
              alias2.set(nameField, nameOrig);
            }
            sub[i] = objectSpread({
              docs: sanitizeDocs(docs),
              name: nameField
            }, typeDef, typeName.isSome ? { typeName: sanitize(typeName.unwrap()) } : null);
          }
        }
        return [sub, alias2];
      }
      /** @internal Extracts an internal Historic (pre V14) type  */
      __internal__extractHistoric(_2, type) {
        return objectSpread({
          displayName: type.toString(),
          isFromSi: true
        }, getTypeDef(type));
      }
      /** @internal Extracts a ScaleInfo Primitive into TypeDef.Plain */
      __internal__extractPrimitive(_2, type) {
        const typeStr = type.def.asPrimitive.type.toString();
        return {
          info: TypeDefInfo.Plain,
          type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
        };
      }
      /** @internal Applies an alias path onto the TypeDef */
      __internal__extractAliasPath(_2, type) {
        return {
          info: TypeDefInfo.Plain,
          type
        };
      }
      /** @internal Extracts a ScaleInfo Sequence into TypeDef.Vec (with Bytes shortcut) */
      __internal__extractSequence(lookupIndex, { type }) {
        const sub = this.__internal__createSiDef(type);
        if (sub.type === "u8") {
          return {
            info: TypeDefInfo.Plain,
            type: "Bytes"
          };
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.Vec,
          lookupIndex,
          lookupName: this.__internal__names[lookupIndex],
          sub
        });
      }
      /** @internal Extracts a ScaleInfo Tuple into TypeDef.Tuple */
      __internal__extractTuple(lookupIndex, ids) {
        if (ids.length === 0) {
          return {
            info: TypeDefInfo.Null,
            type: "Null"
          };
        } else if (ids.length === 1) {
          return this.getTypeDef(ids[0]);
        }
        const sub = ids.map((t) => this.__internal__createSiDef(t));
        return withTypeString(this.registry, {
          info: TypeDefInfo.Tuple,
          lookupIndex,
          lookupName: this.__internal__names[lookupIndex],
          sub
        });
      }
      /** @internal Extracts a ScaleInfo Variant into TypeDef.{Option, Result, Enum} */
      __internal__extractVariant(lookupIndex, { params, path }, { variants }) {
        if (path.length) {
          const specialVariant = path[0].toString();
          if (specialVariant === "Option") {
            if (params.length !== 1) {
              throw new Error(`Option requires 1 parameter, found ${params.length}`);
            }
            return withTypeString(this.registry, {
              info: TypeDefInfo.Option,
              sub: this.__internal__createSiDef(params[0].type.unwrap())
            });
          } else if (specialVariant === "Result") {
            if (params.length !== 2) {
              throw new Error(`Result requires 2 parameters, found ${params.length}`);
            }
            return withTypeString(this.registry, {
              info: TypeDefInfo.Result,
              sub: params.map(({ type }, index) => objectSpread({
                name: ["Ok", "Error"][index]
              }, this.__internal__createSiDef(type.unwrap())))
            });
          }
        }
        if (variants.length === 0) {
          return {
            info: TypeDefInfo.Null,
            type: "Null"
          };
        }
        return this.__internal__extractVariantEnum(lookupIndex, variants);
      }
      /** @internal Extracts a ScaleInfo Variant into TypeDef.Enum */
      __internal__extractVariantEnum(lookupIndex, variants) {
        const sub = [];
        variants.slice().sort((a, b2) => a.index.cmp(b2.index)).forEach(({ fields, index: bnIndex, name }) => {
          const index = bnIndex.toNumber();
          while (sub.length !== index) {
            sub.push({
              index: sub.length,
              info: TypeDefInfo.Null,
              name: `__Unused${sub.length}`,
              type: "Null"
            });
          }
          sub.push(objectSpread(this.__internal__extractFields(-1, fields), {
            index,
            name: name.toString()
          }));
        });
        return withTypeString(this.registry, {
          info: TypeDefInfo.Enum,
          lookupIndex,
          lookupName: this.__internal__names[lookupIndex],
          sub
        });
      }
    };
  }
});

// node_modules/@polkadot/types/metadata/PortableRegistry/toV1.js
function convertType(key) {
  return (registry, { type }) => registry.createType("Si1TypeDef", {
    [key]: {
      type: type.toNumber()
    }
  });
}
var convertCompact, convertSequence;
var init_toV1 = __esm({
  "node_modules/@polkadot/types/metadata/PortableRegistry/toV1.js"() {
    init_util();
    convertCompact = convertType("Compact");
    convertSequence = convertType("Sequence");
  }
});

// node_modules/@polkadot/types/metadata/PortableRegistry/index.js
var init_PortableRegistry2 = __esm({
  "node_modules/@polkadot/types/metadata/PortableRegistry/index.js"() {
    init_PortableRegistry();
    init_toV1();
  }
});

// node_modules/@polkadot/types/metadata/util/flattenUniq.js
function flattenUniq(list, result = []) {
  for (let i = 0, count2 = list.length; i < count2; i++) {
    const entry = list[i];
    if (Array.isArray(entry)) {
      flattenUniq(entry, result);
    } else {
      result.push(entry);
    }
  }
  return [...new Set(result)];
}
var init_flattenUniq = __esm({
  "node_modules/@polkadot/types/metadata/util/flattenUniq.js"() {
  }
});

// node_modules/@polkadot/types/metadata/util/getSiName.js
function getSiName(lookup, type) {
  const typeDef = lookup.getTypeDef(type);
  return typeDef.lookupName || typeDef.type;
}
var init_getSiName = __esm({
  "node_modules/@polkadot/types/metadata/util/getSiName.js"() {
  }
});

// node_modules/@polkadot/types/metadata/util/extractTypes.js
function extractSubSingle(_2, { sub }) {
  const { lookupName, type } = sub;
  return extractTypes([lookupName || type]);
}
function extractSubArray(_2, { sub }) {
  return extractTypes(sub.map(({ lookupName, type }) => lookupName || type));
}
function unhandled(type, { info: info6 }) {
  throw new Error(`Unhandled: Unable to create and validate type from ${type} (info=${TypeDefInfo[info6]})`);
}
function extractTypes(types2) {
  const count2 = types2.length;
  const result = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const type = types2[i];
    const typeDef = getTypeDef(type);
    result[i] = mapping[typeDef.info](type, typeDef);
  }
  return result;
}
var mapping;
var init_extractTypes = __esm({
  "node_modules/@polkadot/types/metadata/util/extractTypes.js"() {
    init_types_create();
    mapping = {
      [TypeDefInfo.BTreeMap]: extractSubArray,
      [TypeDefInfo.BTreeSet]: extractSubSingle,
      [TypeDefInfo.Compact]: extractSubSingle,
      [TypeDefInfo.DoNotConstruct]: unhandled,
      [TypeDefInfo.Enum]: extractSubArray,
      [TypeDefInfo.HashMap]: extractSubArray,
      [TypeDefInfo.Int]: unhandled,
      [TypeDefInfo.Linkage]: extractSubSingle,
      [TypeDefInfo.Null]: unhandled,
      [TypeDefInfo.Option]: extractSubSingle,
      [TypeDefInfo.Plain]: (_2, typeDef) => typeDef.lookupName || typeDef.type,
      [TypeDefInfo.Range]: extractSubSingle,
      [TypeDefInfo.RangeInclusive]: extractSubSingle,
      [TypeDefInfo.Result]: extractSubArray,
      [TypeDefInfo.Set]: extractSubArray,
      [TypeDefInfo.Si]: unhandled,
      [TypeDefInfo.Struct]: extractSubArray,
      [TypeDefInfo.Tuple]: extractSubArray,
      [TypeDefInfo.UInt]: unhandled,
      [TypeDefInfo.Vec]: extractSubSingle,
      [TypeDefInfo.VecFixed]: extractSubSingle,
      [TypeDefInfo.WrapperKeepOpaque]: extractSubSingle,
      [TypeDefInfo.WrapperOpaque]: extractSubSingle
    };
  }
});

// node_modules/@polkadot/types/metadata/util/validateTypes.js
function validateTypes(registry, throwError2, types2) {
  const missing = flattenUniq(extractTypes(types2)).filter((type) => !registry.hasType(type) && !registry.isLookupType(type)).sort();
  if (missing.length !== 0) {
    const message = `Unknown types found, no types for ${missing.join(", ")}`;
    if (throwError2) {
      throw new Error(message);
    } else {
      l10.warn(message);
    }
  }
  return types2;
}
var l10;
var init_validateTypes = __esm({
  "node_modules/@polkadot/types/metadata/util/validateTypes.js"() {
    init_util();
    init_extractTypes();
    init_flattenUniq();
    l10 = logger("metadata");
  }
});

// node_modules/@polkadot/types/metadata/util/getUniqTypes.js
function extractTypes2(lookup, types2) {
  return types2.map(({ type }) => lookup.getTypeDef(type).type);
}
function extractFieldTypes(lookup, type) {
  return lookup.getSiType(type).def.asVariant.variants.map(({ fields }) => extractTypes2(lookup, fields));
}
function getPalletNames({ lookup, pallets }) {
  return pallets.reduce((all3, { calls, constants, events: events2, storage }) => {
    all3.push([extractTypes2(lookup, constants)]);
    if (calls.isSome) {
      all3.push(extractFieldTypes(lookup, calls.unwrap().type));
    }
    if (events2.isSome) {
      all3.push(extractFieldTypes(lookup, events2.unwrap().type));
    }
    if (storage.isSome) {
      all3.push(storage.unwrap().items.map(({ type }) => {
        if (type.isPlain) {
          return [lookup.getTypeDef(type.asPlain).type];
        }
        const { hashers, key, value } = type.asMap;
        return hashers.length === 1 ? [
          lookup.getTypeDef(value).type,
          lookup.getTypeDef(key).type
        ] : [
          lookup.getTypeDef(value).type,
          ...lookup.getSiType(key).def.asTuple.map((t) => lookup.getTypeDef(t).type)
        ];
      }));
    }
    return all3;
  }, []);
}
function getUniqTypes(registry, meta, throwError2) {
  return validateTypes(registry, throwError2, flattenUniq(getPalletNames(meta)));
}
var init_getUniqTypes = __esm({
  "node_modules/@polkadot/types/metadata/util/getUniqTypes.js"() {
    init_flattenUniq();
    init_validateTypes();
  }
});

// node_modules/@polkadot/types/metadata/util/toCallsOnly.js
function trimDocs(docs) {
  const strings = docs.map((d) => d.toString().trim());
  const firstEmpty = strings.findIndex((d) => !d.length);
  return firstEmpty === -1 ? strings : strings.slice(0, firstEmpty);
}
function toCallsOnly(registry, { extrinsic, lookup, pallets }) {
  return registry.createTypeUnsafe("MetadataLatest", [{
    extrinsic,
    lookup: {
      types: lookup.types.map(({ id, type }) => registry.createTypeUnsafe("PortableType", [{
        id,
        type: objectSpread({}, type, { docs: trimDocs(type.docs) })
      }]))
    },
    pallets: pallets.map(({ calls, index, name }) => ({
      calls: registry.createTypeUnsafe("Option<PalletCallMetadataLatest>", [calls.unwrapOr(null)]),
      index,
      name
    }))
  }]).toJSON();
}
var init_toCallsOnly = __esm({
  "node_modules/@polkadot/types/metadata/util/toCallsOnly.js"() {
    init_util();
  }
});

// node_modules/@polkadot/types/metadata/util/index.js
var init_util5 = __esm({
  "node_modules/@polkadot/types/metadata/util/index.js"() {
    init_flattenUniq();
    init_getSiName();
    init_getUniqTypes();
    init_toCallsOnly();
    init_validateTypes();
  }
});

// node_modules/@polkadot/types/util/storage.js
function unwrapStorageSi(type) {
  return type.isPlain ? type.asPlain : type.asMap.value;
}
function unwrapStorageType(registry, type, isOptional) {
  const outputType = getSiName(registry.lookup, unwrapStorageSi(type));
  return isOptional ? `Option<${outputType}>` : outputType;
}
var init_storage = __esm({
  "node_modules/@polkadot/types/util/storage.js"() {
    init_util5();
  }
});

// node_modules/@polkadot/types/util/index.js
var init_util6 = __esm({
  "node_modules/@polkadot/types/util/index.js"() {
    init_storage();
  }
});

// node_modules/@polkadot/types/codec/index.js
var init_codec2 = __esm({
  "node_modules/@polkadot/types/codec/index.js"() {
    init_types_codec();
  }
});

// node_modules/@polkadot/types/create/createClass.js
var init_createClass = __esm({
  "node_modules/@polkadot/types/create/createClass.js"() {
    init_types_create();
  }
});

// node_modules/@polkadot/types/create/createType.js
var init_createType = __esm({
  "node_modules/@polkadot/types/create/createType.js"() {
    init_types_create();
  }
});

// node_modules/@polkadot/types/create/lazy.js
function lazyVariants(lookup, { type }, getName, creator) {
  const result = {};
  const variants = lookup.getSiType(type).def.asVariant.variants;
  for (let i = 0, count2 = variants.length; i < count2; i++) {
    lazyMethod(result, variants[i], creator, getName, i);
  }
  return result;
}
var init_lazy2 = __esm({
  "node_modules/@polkadot/types/create/lazy.js"() {
    init_util();
  }
});

// node_modules/@polkadot/types/extrinsic/signedExtensions/emptyCheck.js
var emptyCheck;
var init_emptyCheck = __esm({
  "node_modules/@polkadot/types/extrinsic/signedExtensions/emptyCheck.js"() {
    emptyCheck = {
      extrinsic: {},
      payload: {}
    };
  }
});

// node_modules/@polkadot/types/extrinsic/signedExtensions/polkadot.js
var polkadot;
var init_polkadot = __esm({
  "node_modules/@polkadot/types/extrinsic/signedExtensions/polkadot.js"() {
    init_emptyCheck();
    polkadot = {
      LimitParathreadCommits: emptyCheck,
      OnlyStakingAndClaims: emptyCheck,
      PrevalidateAttests: emptyCheck,
      RestrictFunctionality: emptyCheck,
      TransactionCallFilter: emptyCheck,
      ValidateDoubleVoteReports: emptyCheck
    };
  }
});

// node_modules/@polkadot/types/extrinsic/signedExtensions/shell.js
var shell;
var init_shell = __esm({
  "node_modules/@polkadot/types/extrinsic/signedExtensions/shell.js"() {
    init_emptyCheck();
    shell = {
      DisallowSigned: emptyCheck
    };
  }
});

// node_modules/@polkadot/types/extrinsic/signedExtensions/statemint.js
var statemint;
var init_statemint = __esm({
  "node_modules/@polkadot/types/extrinsic/signedExtensions/statemint.js"() {
    statemint = {
      ChargeAssetTxPayment: {
        extrinsic: {
          tip: "Compact<Balance>",
          // eslint-disable-next-line sort-keys
          assetId: "TAssetConversion"
        },
        payload: {}
      }
    };
  }
});

// node_modules/@polkadot/types/extrinsic/signedExtensions/substrate.js
var CheckMortality, ChargeTransactionPayment, substrate;
var init_substrate = __esm({
  "node_modules/@polkadot/types/extrinsic/signedExtensions/substrate.js"() {
    init_emptyCheck();
    CheckMortality = {
      extrinsic: {
        era: "ExtrinsicEra"
      },
      payload: {
        blockHash: "Hash"
      }
    };
    ChargeTransactionPayment = {
      extrinsic: {
        tip: "Compact<Balance>"
      },
      payload: {}
    };
    substrate = {
      ChargeTransactionPayment,
      CheckBlockGasLimit: emptyCheck,
      CheckEra: CheckMortality,
      CheckGenesis: {
        extrinsic: {},
        payload: {
          genesisHash: "Hash"
        }
      },
      CheckMortality,
      CheckNonZeroSender: emptyCheck,
      CheckNonce: {
        extrinsic: {
          nonce: "Compact<Index>"
        },
        payload: {}
      },
      CheckSpecVersion: {
        extrinsic: {},
        payload: {
          specVersion: "u32"
        }
      },
      CheckTxVersion: {
        extrinsic: {},
        payload: {
          transactionVersion: "u32"
        }
      },
      CheckVersion: {
        extrinsic: {},
        payload: {
          specVersion: "u32"
        }
      },
      CheckWeight: emptyCheck,
      LockStakingStatus: emptyCheck,
      SkipCheckIfFeeless: ChargeTransactionPayment,
      ValidateEquivocationReport: emptyCheck
    };
  }
});

// node_modules/@polkadot/types/extrinsic/signedExtensions/index.js
function findUnknownExtensions(extensions, userExtensions = {}) {
  const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
  return extensions.filter((k2) => !names.includes(k2));
}
function expandExtensionTypes(extensions, type, userExtensions = {}) {
  return extensions.map((k2) => userExtensions[k2] || allExtensions[k2]).filter((info6) => !!info6).reduce((result, info6) => objectSpread(result, info6[type]), {});
}
var allExtensions, fallbackExtensions;
var init_signedExtensions = __esm({
  "node_modules/@polkadot/types/extrinsic/signedExtensions/index.js"() {
    init_util();
    init_polkadot();
    init_shell();
    init_statemint();
    init_substrate();
    allExtensions = objectSpread({}, substrate, polkadot, shell, statemint);
    fallbackExtensions = [
      "CheckVersion",
      "CheckGenesis",
      "CheckEra",
      "CheckNonce",
      "CheckWeight",
      "ChargeTransactionPayment",
      "CheckBlockGasLimit"
    ];
  }
});

// node_modules/@polkadot/types/generic/Event.js
function decodeEvent(registry, value) {
  if (!value?.length) {
    return { DataType: Null };
  }
  const index = value.subarray(0, 2);
  return {
    DataType: registry.findMetaEvent(index),
    value: {
      data: value.subarray(2),
      index
    }
  };
}
var GenericEventData, GenericEvent;
var init_Event = __esm({
  "node_modules/@polkadot/types/generic/Event.js"() {
    init_types_codec();
    init_util();
    GenericEventData = class extends Tuple {
      __internal__meta;
      __internal__method;
      __internal__names = null;
      __internal__section;
      __internal__typeDef;
      constructor(registry, value, meta, section2 = "<unknown>", method = "<unknown>") {
        const fields = meta?.fields || [];
        super(registry, fields.map(({ type }) => registry.createLookupType(type)), value);
        this.__internal__meta = meta;
        this.__internal__method = method;
        this.__internal__section = section2;
        this.__internal__typeDef = fields.map(({ type }) => registry.lookup.getTypeDef(type));
        const names = fields.map(({ name }) => registry.lookup.sanitizeField(name)[0]).filter((n) => !!n);
        if (names.length === fields.length) {
          this.__internal__names = names;
          objectProperties(this, names, (_2, i) => this[i]);
        }
      }
      /**
       * @description The wrapped [[EventMetadata]]
       */
      get meta() {
        return this.__internal__meta;
      }
      /**
       * @description The method as a string
       */
      get method() {
        return this.__internal__method;
      }
      /**
       * @description The field names (as available)
       */
      get names() {
        return this.__internal__names;
      }
      /**
       * @description The section as a string
       */
      get section() {
        return this.__internal__section;
      }
      /**
       * @description The [[TypeDef]] for this event
       */
      get typeDef() {
        return this.__internal__typeDef;
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExtended, disableAscii) {
        if (this.__internal__names !== null) {
          const json = {};
          for (let i = 0, count2 = this.__internal__names.length; i < count2; i++) {
            json[this.__internal__names[i]] = this[i].toHuman(isExtended, disableAscii);
          }
          return json;
        }
        return super.toHuman(isExtended);
      }
    };
    GenericEvent = class extends Struct {
      // Currently we _only_ decode from Uint8Array, since we expect it to
      // be used via EventRecord
      constructor(registry, _value) {
        const { DataType, value } = decodeEvent(registry, _value);
        super(registry, {
          index: "EventId",
          // eslint-disable-next-line sort-keys
          data: DataType
        }, value);
      }
      /**
       * @description The wrapped [[EventData]]
       */
      get data() {
        return this.getT("data");
      }
      /**
       * @description The [[EventId]], identifying the raw event
       */
      get index() {
        return this.getT("index");
      }
      /**
       * @description The [[EventMetadata]] with the documentation
       */
      get meta() {
        return this.data.meta;
      }
      /**
       * @description The method string identifying the event
       */
      get method() {
        return this.data.method;
      }
      /**
       * @description The section string identifying the event
       */
      get section() {
        return this.data.section;
      }
      /**
       * @description The [[TypeDef]] for the event
       */
      get typeDef() {
        return this.data.typeDef;
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExpanded, disableAscii) {
        return objectSpread({
          method: this.method,
          section: this.section
        }, isExpanded ? { docs: this.meta.docs.map((d) => d.toString()) } : null, super.toHuman(isExpanded, disableAscii));
      }
    };
  }
});

// node_modules/@polkadot/types/extrinsic/v4/Extrinsic.js
var EXTRINSIC_VERSION, GenericExtrinsicV4;
var init_Extrinsic = __esm({
  "node_modules/@polkadot/types/extrinsic/v4/Extrinsic.js"() {
    init_types_codec();
    init_util();
    EXTRINSIC_VERSION = 4;
    GenericExtrinsicV4 = class _GenericExtrinsicV4 extends Struct {
      constructor(registry, value, { isSigned } = {}) {
        super(registry, {
          signature: "ExtrinsicSignatureV4",
          // eslint-disable-next-line sort-keys
          method: "Call"
        }, _GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
      }
      /** @internal */
      static decodeExtrinsic(registry, value, isSigned = false) {
        if (value instanceof _GenericExtrinsicV4) {
          return value;
        } else if (value instanceof registry.createClassUnsafe("Call")) {
          return { method: value };
        } else if (isU8a(value)) {
          const signature = registry.createTypeUnsafe("ExtrinsicSignatureV4", [value, { isSigned }]);
          const method = registry.createTypeUnsafe("Call", [value.subarray(signature.encodedLength)]);
          return {
            method,
            signature
          };
        }
        return value || {};
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        return this.toU8a().length;
      }
      /**
       * @description The [[Call]] this extrinsic wraps
       */
      get method() {
        return this.getT("method");
      }
      /**
       * @description The [[ExtrinsicSignatureV4]]
       */
      get signature() {
        return this.getT("signature");
      }
      /**
       * @description The version for the signature
       */
      get version() {
        return EXTRINSIC_VERSION;
      }
      /**
       * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
       */
      addSignature(signer, signature, payload) {
        this.signature.addSignature(signer, signature, payload);
        return this;
      }
      /**
       * @description Sign the extrinsic with a specific keypair
       */
      sign(account3, options) {
        this.signature.sign(this.method, account3, options);
        return this;
      }
      /**
       * @describe Adds a fake signature to the extrinsic
       */
      signFake(signer, options) {
        this.signature.signFake(this.method, signer, options);
        return this;
      }
    };
  }
});

// node_modules/@polkadot/types/extrinsic/constants.js
var BIT_SIGNED, BIT_UNSIGNED, EMPTY_U8A3, DEFAULT_VERSION, IMMORTAL_ERA, UNMASK_VERSION;
var init_constants2 = __esm({
  "node_modules/@polkadot/types/extrinsic/constants.js"() {
    BIT_SIGNED = 128;
    BIT_UNSIGNED = 0;
    EMPTY_U8A3 = new Uint8Array();
    DEFAULT_VERSION = 4;
    IMMORTAL_ERA = new Uint8Array([0]);
    UNMASK_VERSION = 127;
  }
});

// node_modules/@polkadot/types/extrinsic/Extrinsic.js
function newFromValue(registry, value, version2) {
  if (value instanceof GenericExtrinsic) {
    return value.unwrap();
  }
  const isSigned = (version2 & BIT_SIGNED) === BIT_SIGNED;
  const type = VERSIONS[version2 & UNMASK_VERSION] || VERSIONS[0];
  return registry.createTypeUnsafe(type, [value, { isSigned, version: version2 }]);
}
function decodeExtrinsic(registry, value, version2 = DEFAULT_VERSION) {
  if (isU8a(value) || Array.isArray(value) || isHex(value)) {
    return decodeU8a3(registry, u8aToU8a(value), version2);
  } else if (value instanceof registry.createClassUnsafe("Call")) {
    return newFromValue(registry, { method: value }, version2);
  }
  return newFromValue(registry, value, version2);
}
function decodeU8a3(registry, value, version2) {
  if (!value.length) {
    return newFromValue(registry, new Uint8Array(), version2);
  }
  const [offset, length] = compactFromU8a(value);
  const total = offset + length.toNumber();
  if (total > value.length) {
    throw new Error(`Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
  }
  const data = value.subarray(offset, total);
  return newFromValue(registry, data.subarray(1), data[0]);
}
var VERSIONS, ExtrinsicBase, GenericExtrinsic;
var init_Extrinsic2 = __esm({
  "node_modules/@polkadot/types/extrinsic/Extrinsic.js"() {
    init_types_codec();
    init_util();
    init_Extrinsic();
    init_constants2();
    VERSIONS = [
      "ExtrinsicUnknown",
      // v0 is unknown
      "ExtrinsicUnknown",
      "ExtrinsicUnknown",
      "ExtrinsicUnknown",
      "ExtrinsicV4"
    ];
    ExtrinsicBase = class extends AbstractBase {
      constructor(registry, value, initialU8aLength) {
        super(registry, value, initialU8aLength);
        const signKeys = Object.keys(registry.getSignedExtensionTypes());
        const getter = (key) => this.inner.signature[key];
        for (let i = 0, count2 = signKeys.length; i < count2; i++) {
          objectProperty(this, signKeys[i], getter);
        }
      }
      /**
       * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
       */
      get args() {
        return this.method.args;
      }
      /**
       * @description The argument definitions, compatible with [[Call]]
       */
      get argsDef() {
        return this.method.argsDef;
      }
      /**
       * @description The actual `[sectionIndex, methodIndex]` as used in the Call
       */
      get callIndex() {
        return this.method.callIndex;
      }
      /**
       * @description The actual data for the Call
       */
      get data() {
        return this.method.data;
      }
      /**
       * @description The era for this extrinsic
       */
      get era() {
        return this.inner.signature.era;
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        return this.toU8a().length;
      }
      /**
       * @description `true` id the extrinsic is signed
       */
      get isSigned() {
        return this.inner.signature.isSigned;
      }
      /**
       * @description The length of the actual data, excluding prefix
       */
      get length() {
        return this.toU8a(true).length;
      }
      /**
       * @description The [[FunctionMetadataLatest]] that describes the extrinsic
       */
      get meta() {
        return this.method.meta;
      }
      /**
       * @description The [[Call]] this extrinsic wraps
       */
      get method() {
        return this.inner.method;
      }
      /**
       * @description The nonce for this extrinsic
       */
      get nonce() {
        return this.inner.signature.nonce;
      }
      /**
       * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
       */
      get signature() {
        return this.inner.signature.signature;
      }
      /**
       * @description The [[Address]] that signed
       */
      get signer() {
        return this.inner.signature.signer;
      }
      /**
       * @description Forwards compat
       */
      get tip() {
        return this.inner.signature.tip;
      }
      /**
       * @description Forward compat
       */
      get assetId() {
        return this.inner.signature.assetId;
      }
      /**
       * @description Returns the raw transaction version (not flagged with signing information)
      */
      get type() {
        return this.inner.version;
      }
      get inner() {
        return this.unwrap();
      }
      /**
       * @description Returns the encoded version flag
      */
      get version() {
        return this.type | (this.isSigned ? BIT_SIGNED : BIT_UNSIGNED);
      }
      /**
       * @description Checks if the source matches this in type
       */
      is(other) {
        return this.method.is(other);
      }
      unwrap() {
        return super.unwrap();
      }
    };
    GenericExtrinsic = class extends ExtrinsicBase {
      __internal__hashCache;
      static LATEST_EXTRINSIC_VERSION = EXTRINSIC_VERSION;
      constructor(registry, value, { version: version2 } = {}) {
        super(registry, decodeExtrinsic(registry, value, version2));
      }
      /**
       * @description returns a hash of the contents
       */
      get hash() {
        if (!this.__internal__hashCache) {
          this.__internal__hashCache = super.hash;
        }
        return this.__internal__hashCache;
      }
      /**
       * @description Injects an already-generated signature into the extrinsic
       */
      addSignature(signer, signature, payload) {
        this.inner.addSignature(signer, signature, payload);
        this.__internal__hashCache = void 0;
        return this;
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        const encoded = u8aConcat(...this.toU8aInner());
        return {
          inner: this.isSigned ? this.inner.inspect().inner : this.inner.method.inspect().inner,
          outer: [compactToU8a(encoded.length), new Uint8Array([this.version])]
        };
      }
      /**
       * @description Sign the extrinsic with a specific keypair
       */
      sign(account3, options) {
        this.inner.sign(account3, options);
        this.__internal__hashCache = void 0;
        return this;
      }
      /**
       * @describe Adds a fake signature to the extrinsic
       */
      signFake(signer, options) {
        this.inner.signFake(signer, options);
        this.__internal__hashCache = void 0;
        return this;
      }
      /**
       * @description Returns a hex string representation of the value
       */
      toHex(isBare) {
        return u8aToHex(this.toU8a(isBare));
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExpanded, disableAscii) {
        return objectSpread({}, {
          isSigned: this.isSigned,
          method: this.method.toHuman(isExpanded, disableAscii)
        }, this.isSigned ? {
          assetId: this.assetId.toHuman(isExpanded, disableAscii),
          era: this.era.toHuman(isExpanded, disableAscii),
          nonce: this.nonce.toHuman(isExpanded, disableAscii),
          signature: this.signature.toHex(),
          signer: this.signer.toHuman(isExpanded, disableAscii),
          tip: this.tip.toHuman(isExpanded, disableAscii)
        } : null);
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return this.toHex();
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "Extrinsic";
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value is not length-prefixed
       */
      toU8a(isBare) {
        const encoded = u8aConcat(...this.toU8aInner());
        return isBare ? encoded : compactAddLength(encoded);
      }
      toU8aInner() {
        return [
          new Uint8Array([this.version]),
          this.inner.toU8a()
        ];
      }
    };
  }
});

// node_modules/@polkadot/types/extrinsic/ExtrinsicEra.js
function getTrailingZeros(period) {
  const binary = period.toString(2);
  let index = 0;
  while (binary[binary.length - 1 - index] === "0") {
    index++;
  }
  return index;
}
function decodeMortalEra(registry, value) {
  if (isU8a(value) || isHex(value) || Array.isArray(value)) {
    return decodeMortalU8a(registry, u8aToU8a(value));
  } else if (!value) {
    return [new u642(registry), new u642(registry)];
  } else if (isObject(value)) {
    return decodeMortalObject(registry, value);
  }
  throw new Error("Invalid data passed to Mortal era");
}
function decodeMortalObject(registry, value) {
  const { current, period } = value;
  let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
  calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
  const phase = current % calPeriod;
  const quantizeFactor = Math.max(calPeriod >> 12, 1);
  const quantizedPhase = phase / quantizeFactor * quantizeFactor;
  return [new u642(registry, calPeriod), new u642(registry, quantizedPhase)];
}
function decodeMortalU8a(registry, value) {
  if (value.length === 0) {
    return [new u642(registry), new u642(registry)];
  }
  const first2 = u8aToBn(value.subarray(0, 1)).toNumber();
  const second = u8aToBn(value.subarray(1, 2)).toNumber();
  const encoded = first2 + (second << 8);
  const period = 2 << encoded % (1 << 4);
  const quantizeFactor = Math.max(period >> 12, 1);
  const phase = (encoded >> 4) * quantizeFactor;
  if (period < 4 || phase >= period) {
    throw new Error("Invalid data passed to Mortal era");
  }
  return [new u642(registry, period), new u642(registry, phase)];
}
function decodeExtrinsicEra(value = new Uint8Array()) {
  if (isU8a(value)) {
    return !value.length || value[0] === 0 ? new Uint8Array([0]) : new Uint8Array([1, value[0], value[1]]);
  } else if (!value) {
    return new Uint8Array([0]);
  } else if (value instanceof GenericExtrinsicEra) {
    return decodeExtrinsicEra(value.toU8a());
  } else if (isHex(value)) {
    return decodeExtrinsicEra(hexToU8a(value));
  } else if (isObject(value)) {
    const entries = Object.entries(value).map(([k2, v3]) => [k2.toLowerCase(), v3]);
    const mortal = entries.find(([k2]) => k2.toLowerCase() === "mortalera");
    const immortal = entries.find(([k2]) => k2.toLowerCase() === "immortalera");
    return mortal ? { MortalEra: mortal[1] } : immortal ? { ImmortalEra: immortal[1] } : { MortalEra: value };
  }
  throw new Error("Invalid data passed to Era");
}
var ImmortalEra, MortalEra, GenericExtrinsicEra;
var init_ExtrinsicEra = __esm({
  "node_modules/@polkadot/types/extrinsic/ExtrinsicEra.js"() {
    init_types_codec();
    init_util();
    init_constants2();
    ImmortalEra = class extends Raw {
      constructor(registry, _value) {
        super(registry, IMMORTAL_ERA);
      }
    };
    MortalEra = class extends Tuple {
      constructor(registry, value) {
        super(registry, {
          period: u642,
          phase: u642
        }, decodeMortalEra(registry, value));
      }
      /**
       * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
       */
      get encodedLength() {
        return 2 | 0;
      }
      /**
       * @description The period of this Mortal wraps as a [[U64]]
       */
      get period() {
        return this[0];
      }
      /**
       * @description The phase of this Mortal wraps as a [[U64]]
       */
      get phase() {
        return this[1];
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman() {
        return {
          period: formatNumber(this.period),
          phase: formatNumber(this.phase)
        };
      }
      /**
       * @description Returns a JSON representation of the actual value
       */
      toJSON() {
        return this.toHex();
      }
      /**
       * @description Encodes the value as a Uint8Array as per the parity-codec specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       * Period and phase are encoded:
       *   - The period of validity from the block hash found in the signing material.
       *   - The phase in the period that this transaction's lifetime begins (and, importantly,
       *     implies which block hash is included in the signature material). If the `period` is
       *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
       *     `period` is.
       */
      toU8a(_isBare) {
        const period = this.period.toNumber();
        const encoded = Math.min(15, Math.max(1, getTrailingZeros(period) - 1)) + (this.phase.toNumber() / Math.max(period >> 12, 1) << 4);
        return new Uint8Array([
          encoded & 255,
          encoded >> 8
        ]);
      }
      /**
       * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
       */
      birth(current) {
        const phase = this.phase.toNumber();
        const period = this.period.toNumber();
        return ~~((Math.max(bnToBn(current).toNumber(), phase) - phase) / period) * period + phase;
      }
      /**
       * @description Get the block number of the first block at which the era has ended.
       */
      death(current) {
        return this.birth(current) + this.period.toNumber();
      }
    };
    GenericExtrinsicEra = class extends Enum {
      constructor(registry, value) {
        super(registry, {
          ImmortalEra,
          MortalEra
        }, decodeExtrinsicEra(value));
      }
      /**
       * @description Override the encoded length method
       */
      get encodedLength() {
        return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;
      }
      /**
       * @description Returns the item as a [[ImmortalEra]]
       */
      get asImmortalEra() {
        if (!this.isImmortalEra) {
          throw new Error(`Cannot convert '${this.type}' via asImmortalEra`);
        }
        return this.inner;
      }
      /**
       * @description Returns the item as a [[MortalEra]]
       */
      get asMortalEra() {
        if (!this.isMortalEra) {
          throw new Error(`Cannot convert '${this.type}' via asMortalEra`);
        }
        return this.inner;
      }
      /**
       * @description `true` if Immortal
       */
      get isImmortalEra() {
        return this.index === 0;
      }
      /**
       * @description `true` if Mortal
       */
      get isMortalEra() {
        return this.index > 0;
      }
      /**
       * @description Encodes the value as a Uint8Array as per the parity-codec specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);
      }
    };
  }
});

// node_modules/@polkadot/types/extrinsic/ExtrinsicPayload.js
function decodeExtrinsicPayload(registry, value, version2 = DEFAULT_VERSION) {
  if (value instanceof GenericExtrinsicPayload) {
    return value.unwrap();
  }
  return registry.createTypeUnsafe(VERSIONS2[version2] || VERSIONS2[0], [value, { version: version2 }]);
}
var VERSIONS2, GenericExtrinsicPayload;
var init_ExtrinsicPayload = __esm({
  "node_modules/@polkadot/types/extrinsic/ExtrinsicPayload.js"() {
    init_types_codec();
    init_util();
    init_constants2();
    VERSIONS2 = [
      "ExtrinsicPayloadUnknown",
      // v0 is unknown
      "ExtrinsicPayloadUnknown",
      "ExtrinsicPayloadUnknown",
      "ExtrinsicPayloadUnknown",
      "ExtrinsicPayloadV4"
    ];
    GenericExtrinsicPayload = class extends AbstractBase {
      constructor(registry, value, { version: version2 } = {}) {
        super(registry, decodeExtrinsicPayload(registry, value, version2));
      }
      /**
       * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
       */
      get blockHash() {
        return this.inner.blockHash;
      }
      /**
       * @description The [[ExtrinsicEra]]
       */
      get era() {
        return this.inner.era;
      }
      /**
       * @description The genesis block [[BlockHash]] the signature applies to
       */
      get genesisHash() {
        return this.inner.genesisHash || this.registry.createTypeUnsafe("Hash", []);
      }
      /**
       * @description The [[Bytes]] contained in the payload
       */
      get method() {
        return this.inner.method;
      }
      /**
       * @description The [[Index]]
       */
      get nonce() {
        return this.inner.nonce;
      }
      /**
       * @description The specVersion as a [[u32]] for this payload
       */
      get specVersion() {
        return this.inner.specVersion || this.registry.createTypeUnsafe("u32", []);
      }
      /**
       * @description The [[Balance]]
       */
      get tip() {
        return this.inner.tip || this.registry.createTypeUnsafe("Compact<Balance>", []);
      }
      /**
       * @description The transaction version as a [[u32]] for this payload
       */
      get transactionVersion() {
        return this.inner.transactionVersion || this.registry.createTypeUnsafe("u32", []);
      }
      /**
       * @description The (optional) asset id as a [[u32]] or [[MultiLocation]] for this payload
       */
      get assetId() {
        return this.inner.assetId;
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        return this.inner.eq(other);
      }
      /**
       * @description Sign the payload with the keypair
       */
      sign(signerPair) {
        const signature = this.inner.sign(signerPair);
        return {
          signature: u8aToHex(signature)
        };
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExtended, disableAscii) {
        return this.inner.toHuman(isExtended, disableAscii);
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return this.toHex();
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "ExtrinsicPayload";
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return this.toHex();
      }
      /**
       * @description Returns a serialized u8a form
       */
      toU8a(isBare) {
        return super.toU8a(isBare ? { method: true } : false);
      }
    };
  }
});

// node_modules/@polkadot/types/extrinsic/ExtrinsicPayloadUnknown.js
var GenericExtrinsicPayloadUnknown;
var init_ExtrinsicPayloadUnknown = __esm({
  "node_modules/@polkadot/types/extrinsic/ExtrinsicPayloadUnknown.js"() {
    init_types_codec();
    GenericExtrinsicPayloadUnknown = class extends Struct {
      constructor(registry, _value, { version: version2 = 0 } = {}) {
        super(registry, {});
        throw new Error(`Unsupported extrinsic payload version ${version2}`);
      }
    };
  }
});

// node_modules/@polkadot/types/extrinsic/ExtrinsicUnknown.js
var GenericExtrinsicUnknown;
var init_ExtrinsicUnknown = __esm({
  "node_modules/@polkadot/types/extrinsic/ExtrinsicUnknown.js"() {
    init_types_codec();
    init_constants2();
    GenericExtrinsicUnknown = class extends Struct {
      constructor(registry, _value, { isSigned = false, version: version2 = 0 } = {}) {
        super(registry, {});
        throw new Error(`Unsupported ${isSigned ? "" : "un"}signed extrinsic version ${version2 & UNMASK_VERSION}`);
      }
    };
  }
});

// node_modules/@polkadot/types/extrinsic/SignerPayload.js
var knownTypes, GenericSignerPayload;
var init_SignerPayload = __esm({
  "node_modules/@polkadot/types/extrinsic/SignerPayload.js"() {
    init_types_codec();
    init_util();
    knownTypes = {
      address: "Address",
      blockHash: "Hash",
      blockNumber: "BlockNumber",
      era: "ExtrinsicEra",
      genesisHash: "Hash",
      method: "Call",
      nonce: "Compact<Index>",
      runtimeVersion: "RuntimeVersion",
      signedExtensions: "Vec<Text>",
      tip: "Compact<Balance>",
      version: "u8"
    };
    GenericSignerPayload = class extends Struct {
      __internal__extraTypes;
      constructor(registry, value) {
        const extensionTypes = objectSpread({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
        super(registry, objectSpread({}, extensionTypes, knownTypes), value);
        this.__internal__extraTypes = {};
        const getter = (key) => this.get(key);
        for (const [key, type] of Object.entries(extensionTypes)) {
          if (!knownTypes[key]) {
            this.__internal__extraTypes[key] = type;
          }
          objectProperty(this, key, getter);
        }
      }
      get address() {
        return this.getT("address");
      }
      get blockHash() {
        return this.getT("blockHash");
      }
      get blockNumber() {
        return this.getT("blockNumber");
      }
      get era() {
        return this.getT("era");
      }
      get genesisHash() {
        return this.getT("genesisHash");
      }
      get method() {
        return this.getT("method");
      }
      get nonce() {
        return this.getT("nonce");
      }
      get runtimeVersion() {
        return this.getT("runtimeVersion");
      }
      get signedExtensions() {
        return this.getT("signedExtensions");
      }
      get tip() {
        return this.getT("tip");
      }
      get assetId() {
        return this.getT("assetId");
      }
      get version() {
        return this.getT("version");
      }
      /**
       * @description Creates an representation of the structure as an ISignerPayload JSON
       */
      toPayload() {
        const result = {};
        const keys2 = Object.keys(this.__internal__extraTypes);
        for (let i = 0, count2 = keys2.length; i < count2; i++) {
          const key = keys2[i];
          const value = this.getT(key);
          if (!(value instanceof Option) || value.isSome) {
            result[key] = value.toJSON();
          }
        }
        return objectSpread(result, {
          // the known defaults as managed explicitly and has different
          // formatting in cases, e.g. we mostly expose a hex format here
          address: this.address.toString(),
          blockHash: this.blockHash.toHex(),
          blockNumber: this.blockNumber.toHex(),
          era: this.era.toHex(),
          genesisHash: this.genesisHash.toHex(),
          method: this.method.toHex(),
          nonce: this.nonce.toHex(),
          signedExtensions: this.signedExtensions.map((e) => e.toString()),
          specVersion: this.runtimeVersion.specVersion.toHex(),
          tip: this.tip.toHex(),
          transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
          version: this.version.toNumber()
        });
      }
      /**
       * @description Creates a representation of the payload in raw Exrinsic form
       */
      toRaw() {
        const payload = this.toPayload();
        const data = u8aToHex(this.registry.createTypeUnsafe("ExtrinsicPayload", [payload, { version: payload.version }]).toU8a({ method: true }));
        return {
          address: payload.address,
          data,
          type: "payload"
        };
      }
    };
  }
});

// node_modules/@polkadot/types/extrinsic/util.js
function sign(registry, signerPair, u8a, options) {
  const encoded = u8a.length > 256 ? registry.hash(u8a) : u8a;
  return signerPair.sign(encoded, options);
}
var init_util7 = __esm({
  "node_modules/@polkadot/types/extrinsic/util.js"() {
  }
});

// node_modules/@polkadot/types/extrinsic/v4/ExtrinsicPayload.js
var GenericExtrinsicPayloadV4;
var init_ExtrinsicPayload2 = __esm({
  "node_modules/@polkadot/types/extrinsic/v4/ExtrinsicPayload.js"() {
    init_types_codec();
    init_util();
    init_util7();
    GenericExtrinsicPayloadV4 = class extends Struct {
      __internal__signOptions;
      constructor(registry, value) {
        super(registry, objectSpread({ method: "Bytes" }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value);
        this.__internal__signOptions = {
          withType: registry.createTypeUnsafe("ExtrinsicSignature", []) instanceof Enum
        };
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        return super.inspect({ method: true });
      }
      /**
       * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
       */
      get blockHash() {
        return this.getT("blockHash");
      }
      /**
       * @description The [[ExtrinsicEra]]
       */
      get era() {
        return this.getT("era");
      }
      /**
       * @description The genesis [[BlockHash]] the signature applies to (mortal/immortal)
       */
      get genesisHash() {
        return this.getT("genesisHash");
      }
      /**
       * @description The [[Bytes]] contained in the payload
       */
      get method() {
        return this.getT("method");
      }
      /**
       * @description The [[Index]]
       */
      get nonce() {
        return this.getT("nonce");
      }
      /**
       * @description The specVersion for this signature
       */
      get specVersion() {
        return this.getT("specVersion");
      }
      /**
       * @description The tip [[Balance]]
       */
      get tip() {
        return this.getT("tip");
      }
      /**
       * @description The transactionVersion for this signature
       */
      get transactionVersion() {
        return this.getT("transactionVersion");
      }
      /**
       * @description The (optional) asset id for this signature for chains that support transaction fees in assets
       */
      get assetId() {
        return this.getT("assetId");
      }
      /**
       * @description Sign the payload with the keypair
       */
      sign(signerPair) {
        return sign(this.registry, signerPair, this.toU8a({ method: true }), this.__internal__signOptions);
      }
    };
  }
});

// node_modules/@polkadot/types/extrinsic/v4/ExtrinsicSignature.js
function toAddress(registry, address) {
  return registry.createTypeUnsafe("Address", [isU8a(address) ? u8aToHex(address) : address]);
}
var FAKE_SIGNATURE, GenericExtrinsicSignatureV4;
var init_ExtrinsicSignature = __esm({
  "node_modules/@polkadot/types/extrinsic/v4/ExtrinsicSignature.js"() {
    init_types_codec();
    init_util();
    init_constants2();
    init_ExtrinsicPayload2();
    FAKE_SIGNATURE = new Uint8Array(256).fill(1);
    GenericExtrinsicSignatureV4 = class _GenericExtrinsicSignatureV4 extends Struct {
      __internal__signKeys;
      constructor(registry, value, { isSigned } = {}) {
        const signTypes = registry.getSignedExtensionTypes();
        super(registry, objectSpread(
          // eslint-disable-next-line sort-keys
          { signer: "Address", signature: "ExtrinsicSignature" },
          signTypes
        ), _GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
        this.__internal__signKeys = Object.keys(signTypes);
        objectProperties(this, this.__internal__signKeys, (k2) => this.get(k2));
      }
      /** @internal */
      static decodeExtrinsicSignature(value, isSigned = false) {
        if (!value) {
          return EMPTY_U8A3;
        } else if (value instanceof _GenericExtrinsicSignatureV4) {
          return value;
        }
        return isSigned ? value : EMPTY_U8A3;
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        return this.isSigned ? super.encodedLength : 0;
      }
      /**
       * @description `true` if the signature is valid
       */
      get isSigned() {
        return !this.signature.isEmpty;
      }
      /**
       * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
       */
      get era() {
        return this.getT("era");
      }
      /**
       * @description The [[Index]] for the signature
       */
      get nonce() {
        return this.getT("nonce");
      }
      /**
       * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
       */
      get signature() {
        return this.multiSignature.value || this.multiSignature;
      }
      /**
       * @description The raw [[ExtrinsicSignature]]
       */
      get multiSignature() {
        return this.getT("signature");
      }
      /**
       * @description The [[Address]] that signed
       */
      get signer() {
        return this.getT("signer");
      }
      /**
       * @description The [[Balance]] tip
       */
      get tip() {
        return this.getT("tip");
      }
      /**
       * @description The [[u32]] or [[MultiLocation]] assetId
       */
      get assetId() {
        return this.getT("assetId");
      }
      _injectSignature(signer, signature, payload) {
        for (let i = 0, count2 = this.__internal__signKeys.length; i < count2; i++) {
          const k2 = this.__internal__signKeys[i];
          const v3 = payload.get(k2);
          if (!isUndefined(v3)) {
            this.set(k2, v3);
          }
        }
        this.set("signer", signer);
        this.set("signature", signature);
        return this;
      }
      /**
       * @description Adds a raw signature
       */
      addSignature(signer, signature, payload) {
        return this._injectSignature(toAddress(this.registry, signer), this.registry.createTypeUnsafe("ExtrinsicSignature", [signature]), new GenericExtrinsicPayloadV4(this.registry, payload));
      }
      /**
       * @description Creates a payload from the supplied options
       */
      createPayload(method, options) {
        const { era, runtimeVersion: { specVersion, transactionVersion } } = options;
        return new GenericExtrinsicPayloadV4(this.registry, objectSpread({}, options, {
          era: era || IMMORTAL_ERA,
          method: method.toHex(),
          specVersion,
          transactionVersion
        }));
      }
      /**
       * @description Generate a payload and applies the signature from a keypair
       */
      sign(method, account3, options) {
        if (!account3?.addressRaw) {
          throw new Error(`Expected a valid keypair for signing, found ${stringify(account3)}`);
        }
        const payload = this.createPayload(method, options);
        return this._injectSignature(toAddress(this.registry, account3.addressRaw), this.registry.createTypeUnsafe("ExtrinsicSignature", [payload.sign(account3)]), payload);
      }
      /**
       * @description Generate a payload and applies a fake signature
       */
      signFake(method, address, options) {
        if (!address) {
          throw new Error(`Expected a valid address for signing, found ${stringify(address)}`);
        }
        const payload = this.createPayload(method, options);
        return this._injectSignature(toAddress(this.registry, address), this.registry.createTypeUnsafe("ExtrinsicSignature", [FAKE_SIGNATURE]), payload);
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        return this.isSigned ? super.toU8a(isBare) : EMPTY_U8A3;
      }
    };
  }
});

// node_modules/@polkadot/types/extrinsic/v4/index.js
var init_v4 = __esm({
  "node_modules/@polkadot/types/extrinsic/v4/index.js"() {
    init_Extrinsic();
    init_ExtrinsicPayload2();
    init_ExtrinsicSignature();
  }
});

// node_modules/@polkadot/types/extrinsic/index.js
var init_extrinsic = __esm({
  "node_modules/@polkadot/types/extrinsic/index.js"() {
    init_Extrinsic2();
    init_ExtrinsicEra();
    init_ExtrinsicPayload();
    init_ExtrinsicPayloadUnknown();
    init_ExtrinsicUnknown();
    init_SignerPayload();
    init_v4();
  }
});

// node_modules/@polkadot/types/generic/AccountId.js
function decodeAccountId(value) {
  if (isU8a(value) || Array.isArray(value)) {
    return u8aToU8a(value);
  } else if (!value) {
    return new Uint8Array();
  } else if (isHex(value)) {
    return hexToU8a(value);
  } else if (isString(value)) {
    return decodeAddress(value.toString());
  }
  throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
}
var BaseAccountId, GenericAccountId, GenericAccountId33;
var init_AccountId = __esm({
  "node_modules/@polkadot/types/generic/AccountId.js"() {
    init_types_codec();
    init_util();
    init_util_crypto();
    BaseAccountId = class extends U8aFixed {
      constructor(registry, allowedBits = 256 | 264, value) {
        const decoded = decodeAccountId(value);
        const decodedBits = decoded.length * 8;
        if (decodedBits < allowedBits && decoded.some((b2) => b2)) {
          throw new Error(`Invalid AccountId provided, expected ${allowedBits >> 3} bytes, found ${decoded.length}`);
        }
        super(registry, decoded, allowedBits);
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        return super.eq(decodeAccountId(other));
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman() {
        return this.toJSON();
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return this.toString();
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive() {
        return this.toJSON();
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return encodeAddress(this, this.registry.chainSS58);
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "AccountId";
      }
    };
    GenericAccountId = class extends BaseAccountId {
      constructor(registry, value) {
        super(registry, 256, value);
      }
    };
    GenericAccountId33 = class extends BaseAccountId {
      constructor(registry, value) {
        super(registry, 264, value);
      }
    };
  }
});

// node_modules/@polkadot/types/generic/AccountIndex.js
function decodeAccountIndex(value) {
  if (value instanceof GenericAccountIndex) {
    return value.toBn();
  } else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value) || isBigInt(value)) {
    return value;
  }
  return decodeAccountIndex(decodeAddress(value));
}
var PREFIX_1BYTE, PREFIX_2BYTE, PREFIX_4BYTE, PREFIX_8BYTE, MAX_1BYTE, MAX_2BYTE, MAX_4BYTE, GenericAccountIndex;
var init_AccountIndex = __esm({
  "node_modules/@polkadot/types/generic/AccountIndex.js"() {
    init_types_codec();
    init_util();
    init_util_crypto();
    PREFIX_1BYTE = 239;
    PREFIX_2BYTE = 252;
    PREFIX_4BYTE = 253;
    PREFIX_8BYTE = 254;
    MAX_1BYTE = new import_bn.default(PREFIX_1BYTE);
    MAX_2BYTE = new import_bn.default(1).shln(16);
    MAX_4BYTE = new import_bn.default(1).shln(32);
    GenericAccountIndex = class _GenericAccountIndex extends u323 {
      constructor(registry, value = new import_bn.default(0)) {
        super(registry, decodeAccountIndex(value));
      }
      static calcLength(_value) {
        const value = bnToBn(_value);
        if (value.lte(MAX_1BYTE)) {
          return 1;
        } else if (value.lt(MAX_2BYTE)) {
          return 2;
        } else if (value.lt(MAX_4BYTE)) {
          return 4;
        }
        return 8;
      }
      static readLength(input) {
        const first2 = input[0];
        if (first2 === PREFIX_2BYTE) {
          return [1, 2];
        } else if (first2 === PREFIX_4BYTE) {
          return [1, 4];
        } else if (first2 === PREFIX_8BYTE) {
          return [1, 8];
        }
        return [0, 1];
      }
      static writeLength(input) {
        switch (input.length) {
          case 2:
            return new Uint8Array([PREFIX_2BYTE]);
          case 4:
            return new Uint8Array([PREFIX_4BYTE]);
          case 8:
            return new Uint8Array([PREFIX_8BYTE]);
          default:
            return new Uint8Array([]);
        }
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        if (isBn(other) || isNumber(other)) {
          return super.eq(other);
        }
        return super.eq(this.registry.createTypeUnsafe("AccountIndex", [other]));
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman() {
        return this.toJSON();
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return this.toString();
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive() {
        return this.toJSON();
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        const length = _GenericAccountIndex.calcLength(this);
        return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "AccountIndex";
      }
    };
  }
});

// node_modules/@polkadot/types/generic/Block.js
var GenericBlock;
var init_Block = __esm({
  "node_modules/@polkadot/types/generic/Block.js"() {
    init_types_codec();
    GenericBlock = class extends Struct {
      constructor(registry, value) {
        super(registry, {
          header: "Header",
          // eslint-disable-next-line sort-keys
          extrinsics: "Vec<Extrinsic>"
        }, value);
      }
      /**
       * @description Encodes a content [[Hash]] for the block
       */
      get contentHash() {
        return this.registry.hash(this.toU8a());
      }
      /**
       * @description The [[Extrinsic]] contained in the block
       */
      get extrinsics() {
        return this.getT("extrinsics");
      }
      /**
       * @description Block/header [[Hash]]
       */
      get hash() {
        return this.header.hash;
      }
      /**
       * @description The [[Header]] of the block
       */
      get header() {
        return this.getT("header");
      }
    };
  }
});

// node_modules/@polkadot/types/generic/Call.js
function getArgsDef(registry, meta) {
  return meta.fields.reduce((result, { name, type }, index) => {
    result[name.unwrapOr(`param${index}`).toString()] = registry.createLookupType(type);
    return result;
  }, {});
}
function decodeCallViaObject(registry, value, _meta) {
  const { args, callIndex } = value;
  const lookupIndex = callIndex instanceof GenericCallIndex ? callIndex.toU8a() : callIndex;
  const meta = _meta || registry.findMetaCall(lookupIndex).meta;
  return {
    args,
    argsDef: getArgsDef(registry, meta),
    callIndex,
    meta
  };
}
function decodeCallViaU8a(registry, value, _meta) {
  const callIndex = registry.firstCallIndex.slice();
  callIndex.set(value.subarray(0, 2), 0);
  const meta = _meta || registry.findMetaCall(callIndex).meta;
  return {
    args: value.subarray(2),
    argsDef: getArgsDef(registry, meta),
    callIndex,
    meta
  };
}
function decodeCall(registry, value = new Uint8Array(), _meta) {
  if (isU8a(value) || isHex(value)) {
    return decodeCallViaU8a(registry, u8aToU8a(value), _meta);
  } else if (isObject(value) && value.callIndex && value.args) {
    return decodeCallViaObject(registry, value, _meta);
  }
  throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
}
var GenericCallIndex, GenericCall;
var init_Call = __esm({
  "node_modules/@polkadot/types/generic/Call.js"() {
    init_types_codec();
    init_util();
    GenericCallIndex = class extends U8aFixed {
      constructor(registry, value) {
        super(registry, value, 16);
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive() {
        return this.toHex();
      }
    };
    GenericCall = class extends Struct {
      _meta;
      constructor(registry, value, meta) {
        const decoded = decodeCall(registry, value, meta);
        try {
          super(registry, {
            callIndex: GenericCallIndex,
            // eslint-disable-next-line sort-keys
            args: Struct.with(decoded.argsDef)
          }, decoded);
        } catch (error) {
          let method = "unknown.unknown";
          try {
            const c = registry.findMetaCall(decoded.callIndex);
            method = `${c.section}.${c.method}`;
          } catch {
          }
          throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
        }
        this._meta = decoded.meta;
      }
      /**
       * @description The arguments for the function call
       */
      get args() {
        return [...this.getT("args").values()];
      }
      /**
       * @description The argument definitions
       */
      get argsDef() {
        return getArgsDef(this.registry, this.meta);
      }
      /**
       * @description The argument entries
       */
      get argsEntries() {
        return [...this.getT("args").entries()];
      }
      /**
       * @description The encoded `[sectionIndex, methodIndex]` identifier
       */
      get callIndex() {
        return this.getT("callIndex").toU8a();
      }
      /**
       * @description The encoded data
       */
      get data() {
        return this.getT("args").toU8a();
      }
      /**
       * @description The [[FunctionMetadata]]
       */
      get meta() {
        return this._meta;
      }
      /**
       * @description Returns the name of the method
       */
      get method() {
        return this.registry.findMetaCall(this.callIndex).method;
      }
      /**
       * @description Returns the module containing the method
       */
      get section() {
        return this.registry.findMetaCall(this.callIndex).section;
      }
      /**
       * @description Checks if the source matches this in type
       */
      is(other) {
        return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExpanded, disableAscii) {
        let call;
        try {
          call = this.registry.findMetaCall(this.callIndex);
        } catch {
        }
        return objectSpread({
          args: this.argsEntries.reduce((args, [n, a]) => objectSpread(args, { [n]: a.toHuman(isExpanded, disableAscii) }), {}),
          method: call?.method,
          section: call?.section
        }, isExpanded && call ? { docs: call.meta.docs.map((d) => d.toString()) } : null);
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "Call";
      }
    };
  }
});

// node_modules/@polkadot/types/generic/ChainProperties.js
function createValue(registry, type, value, asArray = true) {
  if (value && isFunction(value.unwrapOrDefault)) {
    return value;
  }
  return registry.createTypeUnsafe(type, [
    asArray ? isNull(value) || isUndefined(value) ? null : Array.isArray(value) ? value : [value] : value
  ]);
}
function decodeValue(registry, key, value) {
  return key === "ss58Format" ? createValue(registry, "Option<u32>", value, false) : key === "tokenDecimals" ? createValue(registry, "Option<Vec<u32>>", value) : key === "tokenSymbol" ? createValue(registry, "Option<Vec<Text>>", value) : key === "isEthereum" ? createValue(registry, "Bool", value, false) : value;
}
function decode(registry, value) {
  return (
    // allow decoding from a map as well (ourselves)
    (value && isFunction(value.entries) ? [...value.entries()] : Object.entries(value || {})).reduce((all3, [key, value2]) => {
      all3[key] = decodeValue(registry, key, value2);
      return all3;
    }, {
      isEthereum: registry.createTypeUnsafe("Bool", []),
      ss58Format: registry.createTypeUnsafe("Option<u32>", []),
      tokenDecimals: registry.createTypeUnsafe("Option<Vec<u32>>", []),
      tokenSymbol: registry.createTypeUnsafe("Option<Vec<Text>>", [])
    })
  );
}
var GenericChainProperties;
var init_ChainProperties = __esm({
  "node_modules/@polkadot/types/generic/ChainProperties.js"() {
    init_types_codec();
    init_util();
    GenericChainProperties = class extends Json {
      constructor(registry, value) {
        super(registry, decode(registry, value));
      }
      /**
       * @description The chain uses Ethereum addresses
       */
      get isEthereum() {
        return this.getT("isEthereum");
      }
      /**
       * @description The chain ss58Format
       */
      get ss58Format() {
        return this.getT("ss58Format");
      }
      /**
       * @description The decimals for each of the tokens
       */
      get tokenDecimals() {
        return this.getT("tokenDecimals");
      }
      /**
       * @description The symbols for the tokens
       */
      get tokenSymbol() {
        return this.getT("tokenSymbol");
      }
    };
  }
});

// node_modules/@polkadot/types/generic/ConsensusEngineId.js
function getAuraAuthor(registry, bytes3, sessionValidators) {
  return sessionValidators[registry.createTypeUnsafe("RawAuraPreDigest", [bytes3.toU8a(true)]).slotNumber.mod(new import_bn.default(sessionValidators.length)).toNumber()];
}
function getBabeAuthor(registry, bytes3, sessionValidators) {
  const digest = registry.createTypeUnsafe("RawBabePreDigestCompat", [bytes3.toU8a(true)]);
  return sessionValidators[digest.value.toNumber()];
}
function getBytesAsAuthor(registry, bytes3) {
  return registry.createTypeUnsafe("AccountId", [bytes3]);
}
var CID_AURA, CID_BABE, CID_GRPA, CID_POW, CID_NMBS, GenericConsensusEngineId;
var init_ConsensusEngineId = __esm({
  "node_modules/@polkadot/types/generic/ConsensusEngineId.js"() {
    init_types_codec();
    init_util();
    CID_AURA = stringToU8a("aura");
    CID_BABE = stringToU8a("BABE");
    CID_GRPA = stringToU8a("FRNK");
    CID_POW = stringToU8a("pow_");
    CID_NMBS = stringToU8a("nmbs");
    GenericConsensusEngineId = class extends U8aFixed {
      constructor(registry, value) {
        super(registry, isNumber(value) ? bnToU8a(value, { isLe: false }) : value, 32);
      }
      /**
       * @description `true` if the engine matches aura
       */
      get isAura() {
        return this.eq(CID_AURA);
      }
      /**
       * @description `true` is the engine matches babe
       */
      get isBabe() {
        return this.eq(CID_BABE);
      }
      /**
       * @description `true` is the engine matches grandpa
       */
      get isGrandpa() {
        return this.eq(CID_GRPA);
      }
      /**
       * @description `true` is the engine matches pow
       */
      get isPow() {
        return this.eq(CID_POW);
      }
      /**
       * @description `true` is the engine matches nimbus
       */
      get isNimbus() {
        return this.eq(CID_NMBS);
      }
      /**
       * @description From the input bytes, decode into an author
       */
      extractAuthor(bytes3, sessionValidators) {
        if (sessionValidators?.length) {
          if (this.isAura) {
            return getAuraAuthor(this.registry, bytes3, sessionValidators);
          } else if (this.isBabe) {
            return getBabeAuthor(this.registry, bytes3, sessionValidators);
          }
        }
        if (this.isPow || this.isNimbus) {
          return getBytesAsAuthor(this.registry, bytes3);
        }
        return void 0;
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman() {
        return this.toString();
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "ConsensusEngineId";
      }
      /**
       * @description Override the default toString to return a 4-byte string
       */
      toString() {
        return this.isAscii ? u8aToString(this) : u8aToHex(this);
      }
    };
  }
});

// node_modules/@polkadot/types/generic/LookupSource.js
function decodeString(registry, value) {
  const decoded = decodeAddress(value);
  return decoded.length === 32 ? registry.createTypeUnsafe("AccountId", [decoded]) : registry.createTypeUnsafe("AccountIndex", [u8aToBn(decoded)]);
}
function decodeU8a4(registry, value) {
  if (value.length === 32) {
    return registry.createTypeUnsafe("AccountId", [value]);
  } else if (value[0] === 255) {
    return registry.createTypeUnsafe("AccountId", [value.subarray(1)]);
  }
  const [offset, length] = GenericAccountIndex.readLength(value);
  return registry.createTypeUnsafe("AccountIndex", [u8aToBn(value.subarray(offset, offset + length))]);
}
function decodeAddressOrIndex(registry, value) {
  return value instanceof GenericLookupSource ? value.inner : value instanceof GenericAccountId || value instanceof GenericAccountIndex ? value : isBn(value) || isNumber(value) || isBigInt(value) ? registry.createTypeUnsafe("AccountIndex", [value]) : Array.isArray(value) || isHex(value) || isU8a(value) ? decodeU8a4(registry, u8aToU8a(value)) : decodeString(registry, value);
}
var ACCOUNT_ID_PREFIX, GenericLookupSource;
var init_LookupSource = __esm({
  "node_modules/@polkadot/types/generic/LookupSource.js"() {
    init_types_codec();
    init_util();
    init_util_crypto();
    init_AccountId();
    init_AccountIndex();
    ACCOUNT_ID_PREFIX = new Uint8Array([255]);
    GenericLookupSource = class extends AbstractBase {
      constructor(registry, value = new Uint8Array()) {
        super(registry, decodeAddressOrIndex(registry, value));
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        const rawLength = this._rawLength;
        return rawLength + // for 1 byte AccountIndexes, we are not adding a specific prefix
        (rawLength > 1 ? 1 : 0);
      }
      /**
       * @description The length of the raw value, either AccountIndex or AccountId
       */
      get _rawLength() {
        return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        const value = this.inner.toU8a().subarray(0, this._rawLength);
        return {
          outer: [
            new Uint8Array(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(value) : ACCOUNT_ID_PREFIX),
            value
          ]
        };
      }
      /**
       * @description Returns a hex string representation of the value
       */
      toHex() {
        return u8aToHex(this.toU8a());
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "Address";
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        const encoded = this.inner.toU8a().subarray(0, this._rawLength);
        return isBare ? encoded : u8aConcat(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
      }
    };
  }
});

// node_modules/@polkadot/types/generic/MultiAddress.js
function decodeU8a5(registry, u8a) {
  if ([0, 32].includes(u8a.length)) {
    return { Id: u8a };
  } else if (u8a.length === 20) {
    return { Address20: u8a };
  } else if (u8a.length <= 8) {
    return { Index: registry.createTypeUnsafe("AccountIndex", [u8a]).toNumber() };
  }
  return u8a;
}
function decodeMultiAny(registry, value) {
  if (value instanceof GenericAccountId) {
    return { Id: value };
  } else if (isU8a(value)) {
    return decodeU8a5(registry, value);
  } else if (value instanceof GenericMultiAddress) {
    return value;
  } else if (value instanceof GenericAccountIndex || isBn(value) || isNumber(value)) {
    return { Index: isNumber(value) ? value : value.toNumber() };
  } else if (isString(value)) {
    return decodeU8a5(registry, decodeAddress(value.toString()));
  }
  return value;
}
var GenericMultiAddress;
var init_MultiAddress = __esm({
  "node_modules/@polkadot/types/generic/MultiAddress.js"() {
    init_types_codec();
    init_util();
    init_util_crypto();
    init_AccountId();
    init_AccountIndex();
    GenericMultiAddress = class extends Enum {
      constructor(registry, value) {
        super(registry, {
          Id: "AccountId",
          Index: "Compact<AccountIndex>",
          Raw: "Bytes",
          // eslint-disable-next-line sort-keys
          Address32: "H256",
          // eslint-disable-next-line sort-keys
          Address20: "H160"
        }, decodeMultiAny(registry, value));
      }
      /**
       * @description Returns a breakdown of the hex encoding for this Codec
       */
      inspect() {
        const { inner, outer = [] } = this.inner.inspect();
        return {
          inner,
          outer: [new Uint8Array([this.index]), ...outer]
        };
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return this.value.toString();
      }
    };
  }
});

// node_modules/@polkadot/types/generic/Vote.js
function decodeVoteBool(value) {
  return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);
}
function decodeVoteU8a(value) {
  return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);
}
function decodeVoteType(registry, value) {
  return new Uint8Array([
    (new bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS) | registry.createTypeUnsafe("Conviction", [value.conviction || DEF_CONV]).index
  ]);
}
function decodeVote(registry, value) {
  if (isU8a(value)) {
    return decodeVoteU8a(value);
  } else if (isUndefined(value) || value instanceof Boolean || isBoolean(value)) {
    return decodeVoteBool(new bool(registry, value).isTrue);
  } else if (isNumber(value)) {
    return decodeVoteBool(value < 0);
  }
  return decodeVoteType(registry, value);
}
var AYE_BITS, NAY_BITS, CON_MASK, DEF_CONV, GenericVote;
var init_Vote = __esm({
  "node_modules/@polkadot/types/generic/Vote.js"() {
    init_types_codec();
    init_util();
    AYE_BITS = 128;
    NAY_BITS = 0;
    CON_MASK = 127;
    DEF_CONV = 0;
    GenericVote = class extends U8aFixed {
      __internal__aye;
      __internal__conviction;
      constructor(registry, value) {
        const decoded = decodeVote(registry, value);
        super(registry, decoded, 8);
        this.__internal__aye = (decoded[0] & AYE_BITS) === AYE_BITS;
        this.__internal__conviction = this.registry.createTypeUnsafe("Conviction", [decoded[0] & CON_MASK]);
      }
      /**
       * @description returns a V2 conviction
       */
      get conviction() {
        return this.__internal__conviction;
      }
      /**
       * @description true if the wrapped value is a positive vote
       */
      get isAye() {
        return this.__internal__aye;
      }
      /**
       * @description true if the wrapped value is a negative vote
       */
      get isNay() {
        return !this.isAye;
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman(isExpanded) {
        return {
          conviction: this.conviction.toHuman(isExpanded),
          vote: this.isAye ? "Aye" : "Nay"
        };
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive() {
        return {
          aye: this.isAye,
          conviction: this.conviction.toPrimitive()
        };
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "Vote";
      }
    };
  }
});

// node_modules/@polkadot/types/ethereum/AccountId.js
function decodeAccountId2(value) {
  if (isU8a(value) || Array.isArray(value)) {
    return u8aToU8a(value);
  } else if (isHex(value) || isEthereumAddress(value.toString())) {
    return hexToU8a(value.toString());
  } else if (isString(value)) {
    return u8aToU8a(value);
  }
  return value;
}
var GenericEthereumAccountId;
var init_AccountId2 = __esm({
  "node_modules/@polkadot/types/ethereum/AccountId.js"() {
    init_types_codec();
    init_util();
    init_util_crypto();
    GenericEthereumAccountId = class extends U8aFixed {
      constructor(registry, value = new Uint8Array()) {
        super(registry, decodeAccountId2(value), 160);
      }
      /**
       * @description Compares the value of the input to see if there is a match
       */
      eq(other) {
        return !!other && super.eq(decodeAccountId2(other));
      }
      /**
       * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
       */
      toHuman() {
        return this.toJSON();
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        return this.toString();
      }
      /**
       * @description Converts the value in a best-fit primitive form
       */
      toPrimitive() {
        return this.toJSON();
      }
      /**
       * @description Returns the string representation of the value
       */
      toString() {
        return ethereumEncode(this);
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "AccountId";
      }
    };
  }
});

// node_modules/@polkadot/types/ethereum/LookupSource.js
function decodeString2(registry, value) {
  const decoded = decodeAddress(value);
  return decoded.length === 20 ? registry.createTypeUnsafe("EthereumAccountId", [decoded]) : registry.createTypeUnsafe("AccountIndex", [u8aToBn(decoded)]);
}
function decodeU8a6(registry, value) {
  if (value.length === 20) {
    return registry.createTypeUnsafe("EthereumAccountId", [value]);
  } else if (value[0] === 255) {
    return registry.createTypeUnsafe("EthereumAccountId", [value.subarray(1)]);
  }
  const [offset, length] = GenericAccountIndex.readLength(value);
  return registry.createTypeUnsafe("AccountIndex", [u8aToBn(value.subarray(offset, offset + length))]);
}
function decodeAddressOrIndex2(registry, value) {
  return value instanceof GenericEthereumLookupSource ? value.inner : value instanceof GenericEthereumAccountId || value instanceof GenericAccountIndex ? value : isU8a(value) || Array.isArray(value) || isHex(value) ? decodeU8a6(registry, u8aToU8a(value)) : isBn(value) || isNumber(value) || isBigInt(value) ? registry.createTypeUnsafe("AccountIndex", [value]) : decodeString2(registry, value);
}
var ACCOUNT_ID_PREFIX2, GenericEthereumLookupSource;
var init_LookupSource2 = __esm({
  "node_modules/@polkadot/types/ethereum/LookupSource.js"() {
    init_types_codec();
    init_util();
    init_util_crypto();
    init_AccountIndex();
    init_AccountId2();
    ACCOUNT_ID_PREFIX2 = new Uint8Array([255]);
    GenericEthereumLookupSource = class extends AbstractBase {
      constructor(registry, value = new Uint8Array()) {
        super(registry, decodeAddressOrIndex2(registry, value));
      }
      /**
       * @description The length of the value when encoded as a Uint8Array
       */
      get encodedLength() {
        const rawLength = this._rawLength;
        return rawLength + // for 1 byte AccountIndexes, we are not adding a specific prefix
        (rawLength > 1 ? 1 : 0);
      }
      /**
       * @description The length of the raw value, either AccountIndex or AccountId
       */
      get _rawLength() {
        return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
      }
      /**
       * @description Returns a hex string representation of the value
       */
      toHex() {
        return u8aToHex(this.toU8a());
      }
      /**
       * @description Returns the base runtime type name for this instance
       */
      toRawType() {
        return "Address";
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       * @param isBare true when the value has none of the type-specific prefixes (internal)
       */
      toU8a(isBare) {
        const encoded = this.inner.toU8a().subarray(0, this._rawLength);
        return isBare ? encoded : u8aConcat(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX2, encoded);
      }
    };
  }
});

// node_modules/@polkadot/types/ethereum/index.js
var init_ethereum3 = __esm({
  "node_modules/@polkadot/types/ethereum/index.js"() {
    init_AccountId2();
    init_LookupSource2();
  }
});

// node_modules/@polkadot/types/generic/index.js
var init_generic = __esm({
  "node_modules/@polkadot/types/generic/index.js"() {
    init_AccountId();
    init_AccountIndex();
    init_Block();
    init_Call();
    init_ChainProperties();
    init_ConsensusEngineId();
    init_Event();
    init_LookupSource();
    init_MultiAddress();
    init_Vote();
    init_ethereum3();
  }
});

// node_modules/@polkadot/types/primitive/Data.js
function decodeDataU8a(registry, value) {
  const indicator = value[0];
  if (!indicator) {
    return [void 0, void 0];
  } else if (indicator >= 1 && indicator <= 33) {
    const length = indicator - 1;
    const data = value.subarray(1, length + 1);
    return [registry.createTypeUnsafe("Raw", [data]), 1];
  } else if (indicator >= 34 && indicator <= 37) {
    return [value.subarray(1, 32 + 1), indicator - 32];
  }
  throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
}
function decodeData(registry, value) {
  if (isU8a(value) || isString(value)) {
    return decodeDataU8a(registry, u8aToU8a(value));
  } else if (!value) {
    return [void 0, void 0];
  }
  return [value, void 0];
}
var Data;
var init_Data = __esm({
  "node_modules/@polkadot/types/primitive/Data.js"() {
    init_types_codec();
    init_util();
    Data = class extends Enum {
      constructor(registry, value) {
        super(registry, {
          None: "Null",
          // 0
          Raw: "Bytes",
          // 1
          // eslint-disable-next-line sort-keys
          BlakeTwo256: "H256",
          // 2
          Sha256: "H256",
          // 3
          // eslint-disable-next-line sort-keys
          Keccak256: "H256",
          // 4
          ShaThree256: "H256"
          // 5
        }, ...decodeData(registry, value));
        if (this.isRaw && this.asRaw.length > 32) {
          throw new Error("Data.Raw values are limited to a maximum length of 32 bytes");
        }
      }
      get asBlakeTwo256() {
        return this.value;
      }
      get asKeccak256() {
        return this.value;
      }
      get asRaw() {
        return this.value;
      }
      get asSha256() {
        return this.value;
      }
      get asShaThree256() {
        return this.value;
      }
      get isBlakeTwo256() {
        return this.index === 2;
      }
      get isKeccak256() {
        return this.index === 4;
      }
      get isNone() {
        return this.index === 0;
      }
      get isRaw() {
        return this.index === 1;
      }
      get isSha256() {
        return this.index === 3;
      }
      get isShaThree256() {
        return this.index === 5;
      }
      /**
       * @description The encoded length
       */
      get encodedLength() {
        return this.toU8a().length;
      }
      /**
       * @description Encodes the value as a Uint8Array as per the SCALE specifications
       */
      toU8a() {
        if (this.index === 0) {
          return new Uint8Array(1);
        } else if (this.index === 1) {
          const data = this.value.toU8a(true);
          const length = Math.min(data.length, 32);
          const u8a2 = new Uint8Array(length + 1);
          u8a2.set([length + 1], 0);
          u8a2.set(data.subarray(0, length), 1);
          return u8a2;
        }
        const u8a = new Uint8Array(33);
        u8a.set([this.index + 32], 0);
        u8a.set(this.value.toU8a(), 1);
        return u8a;
      }
    };
  }
});

// node_modules/@polkadot/types/primitive/StorageKey.js
function decodeStorageKey(value) {
  if (isU8a(value) || !value || isString(value)) {
    return { key: value };
  } else if (value instanceof StorageKey) {
    return {
      key: value,
      method: value.method,
      section: value.section
    };
  } else if (isFunction(value)) {
    return {
      key: value(),
      method: value.method,
      section: value.section
    };
  } else if (Array.isArray(value)) {
    const [fn, args = []] = value;
    if (!isFunction(fn)) {
      throw new Error("Expected function input for key construction");
    }
    if (fn.meta && fn.meta.type.isMap) {
      const map3 = fn.meta.type.asMap;
      if (!Array.isArray(args) || args.length !== map3.hashers.length) {
        throw new Error(`Expected an array of ${map3.hashers.length} values as params to a Map query`);
      }
    }
    return {
      key: fn(...args),
      method: fn.method,
      section: fn.section
    };
  }
  throw new Error(`Unable to convert input ${value} to StorageKey`);
}
function decodeHashers(registry, value, hashers) {
  let offset = 32;
  const count2 = hashers.length;
  const result = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const [hasher2, type] = hashers[i];
    const [hashLen, canDecode] = HASHER_MAP[hasher2.type];
    const decoded = canDecode ? registry.createTypeUnsafe(getSiName(registry.lookup, type), [value.subarray(offset + hashLen)]) : registry.createTypeUnsafe("Raw", [value.subarray(offset, offset + hashLen)]);
    offset += hashLen + (canDecode ? decoded.encodedLength : 0);
    result[i] = decoded;
  }
  return result;
}
function decodeArgsFromMeta(registry, value, meta) {
  if (!meta || !meta.type.isMap) {
    return [];
  }
  const { hashers, key } = meta.type.asMap;
  const keys2 = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
  return decodeHashers(registry, value, hashers.map((h2, i) => [h2, keys2[i]]));
}
function getMeta(value) {
  if (value instanceof StorageKey) {
    return value.meta;
  } else if (isFunction(value)) {
    return value.meta;
  } else if (Array.isArray(value)) {
    const [fn] = value;
    return fn.meta;
  }
  return void 0;
}
function getType(registry, value) {
  if (value instanceof StorageKey) {
    return value.outputType;
  } else if (isFunction(value)) {
    return unwrapStorageType(registry, value.meta.type);
  } else if (Array.isArray(value)) {
    const [fn] = value;
    if (fn.meta) {
      return unwrapStorageType(registry, fn.meta.type);
    }
  }
  return "Raw";
}
var HASHER_MAP, StorageKey;
var init_StorageKey = __esm({
  "node_modules/@polkadot/types/primitive/StorageKey.js"() {
    init_types_codec();
    init_util();
    init_util5();
    init_util6();
    HASHER_MAP = {
      // opaque
      Blake2_128: [16, false],
      // eslint-disable-line camelcase
      Blake2_128Concat: [16, true],
      // eslint-disable-line camelcase
      Blake2_256: [32, false],
      // eslint-disable-line camelcase
      Identity: [0, true],
      Twox128: [16, false],
      Twox256: [32, false],
      Twox64Concat: [8, true]
    };
    StorageKey = class extends Bytes {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore This is assigned via this.decodeArgsFromMeta()
      __internal__args;
      __internal__meta;
      __internal__outputType;
      __internal__method;
      __internal__section;
      constructor(registry, value, override = {}) {
        const { key, method, section: section2 } = decodeStorageKey(value);
        super(registry, key);
        this.__internal__outputType = getType(registry, value);
        this.setMeta(getMeta(value), override.section || section2, override.method || method);
      }
      /**
       * @description Return the decoded arguments (applicable to map with decodable values)
       */
      get args() {
        return this.__internal__args;
      }
      /**
       * @description The metadata or `undefined` when not available
       */
      get meta() {
        return this.__internal__meta;
      }
      /**
       * @description The key method or `undefined` when not specified
       */
      get method() {
        return this.__internal__method;
      }
      /**
       * @description The output type
       */
      get outputType() {
        return this.__internal__outputType;
      }
      /**
       * @description The key section or `undefined` when not specified
       */
      get section() {
        return this.__internal__section;
      }
      is(key) {
        return key.section === this.section && key.method === this.method;
      }
      /**
       * @description Sets the meta for this key
       */
      setMeta(meta, section2, method) {
        this.__internal__meta = meta;
        this.__internal__method = method || this.__internal__method;
        this.__internal__section = section2 || this.__internal__section;
        if (meta) {
          this.__internal__outputType = unwrapStorageType(this.registry, meta.type);
        }
        try {
          this.__internal__args = decodeArgsFromMeta(this.registry, this.toU8a(true), meta);
        } catch {
        }
        return this;
      }
      /**
       * @description Returns the Human representation for this type
       */
      toHuman(_isExtended, disableAscii) {
        return this.__internal__args.length ? this.__internal__args.map((a) => a.toHuman(void 0, disableAscii)) : super.toHuman(void 0, disableAscii);
      }
      /**
       * @description Returns the raw type for this
       */
      toRawType() {
        return "StorageKey";
      }
    };
  }
});

// node_modules/@polkadot/types/primitive/index.js
var init_primitive2 = __esm({
  "node_modules/@polkadot/types/primitive/index.js"() {
    init_types_codec();
    init_Data();
    init_StorageKey();
  }
});

// node_modules/@polkadot/types/index.types.js
var index_types_exports = {};
__export(index_types_exports, {
  BitVec: () => BitVec,
  Bool: () => bool,
  Bytes: () => Bytes,
  Data: () => Data,
  F32: () => f32,
  F64: () => f64,
  GenericAccountId: () => GenericAccountId,
  GenericAccountId32: () => GenericAccountId,
  GenericAccountId33: () => GenericAccountId33,
  GenericAccountIndex: () => GenericAccountIndex,
  GenericAddress: () => GenericMultiAddress,
  GenericBlock: () => GenericBlock,
  GenericCall: () => GenericCall,
  GenericChainProperties: () => GenericChainProperties,
  GenericConsensusEngineId: () => GenericConsensusEngineId,
  GenericEthereumAccountId: () => GenericEthereumAccountId,
  GenericEthereumLookupSource: () => GenericEthereumLookupSource,
  GenericEvent: () => GenericEvent,
  GenericEventData: () => GenericEventData,
  GenericExtrinsic: () => GenericExtrinsic,
  GenericExtrinsicEra: () => GenericExtrinsicEra,
  GenericExtrinsicPayload: () => GenericExtrinsicPayload,
  GenericExtrinsicPayloadUnknown: () => GenericExtrinsicPayloadUnknown,
  GenericExtrinsicPayloadV4: () => GenericExtrinsicPayloadV4,
  GenericExtrinsicSignatureV4: () => GenericExtrinsicSignatureV4,
  GenericExtrinsicUnknown: () => GenericExtrinsicUnknown,
  GenericExtrinsicV4: () => GenericExtrinsicV4,
  GenericImmortalEra: () => ImmortalEra,
  GenericLookupSource: () => GenericLookupSource,
  GenericMortalEra: () => MortalEra,
  GenericMultiAddress: () => GenericMultiAddress,
  GenericSignerPayload: () => GenericSignerPayload,
  GenericVote: () => GenericVote,
  I128: () => i128,
  I16: () => i16,
  I256: () => i256,
  I32: () => i32,
  I64: () => i64,
  I8: () => i8,
  ISize: () => isize,
  Null: () => Null,
  OptionBool: () => OptionBool,
  StorageKey: () => StorageKey,
  Text: () => Text,
  Type: () => Type,
  U128: () => u128,
  U16: () => u162,
  U256: () => u256,
  U32: () => u323,
  U64: () => u642,
  U8: () => u82,
  USize: () => usize,
  bool: () => bool,
  f32: () => f32,
  f64: () => f64,
  i128: () => i128,
  i16: () => i16,
  i256: () => i256,
  i32: () => i32,
  i64: () => i64,
  i8: () => i8,
  isize: () => isize,
  u128: () => u128,
  u16: () => u162,
  u256: () => u256,
  u32: () => u323,
  u64: () => u642,
  u8: () => u82,
  usize: () => usize
});
var init_index_types = __esm({
  "node_modules/@polkadot/types/index.types.js"() {
    init_extrinsic();
    init_generic();
    init_primitive2();
  }
});

// node_modules/@polkadot/types/metadata/decorate/util.js
function convert(fn) {
  return ({ name }) => fn(name);
}
var objectNameToCamel, objectNameToString;
var init_util8 = __esm({
  "node_modules/@polkadot/types/metadata/decorate/util.js"() {
    init_util();
    objectNameToCamel = convert(stringCamelCase);
    objectNameToString = convert((n) => n.toString());
  }
});

// node_modules/@polkadot/types/metadata/decorate/extrinsics/createUnchecked.js
function isTx(tx, callIndex) {
  return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
}
function createUnchecked(registry, section2, callIndex, callMetadata) {
  const expectedArgs = callMetadata.fields;
  const funcName = stringCamelCase(callMetadata.name);
  const extrinsicFn = (...args) => {
    if (expectedArgs.length !== args.length) {
      throw new Error(`Extrinsic ${section2}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);
    }
    return registry.createTypeUnsafe("Call", [{ args, callIndex }, callMetadata]);
  };
  extrinsicFn.is = (tx) => isTx(tx, callIndex);
  extrinsicFn.callIndex = callIndex;
  extrinsicFn.meta = callMetadata;
  extrinsicFn.method = funcName;
  extrinsicFn.section = section2;
  extrinsicFn.toJSON = () => callMetadata.toJSON();
  return extrinsicFn;
}
var init_createUnchecked = __esm({
  "node_modules/@polkadot/types/metadata/decorate/extrinsics/createUnchecked.js"() {
    init_util();
  }
});

// node_modules/@polkadot/types/metadata/decorate/extrinsics/index.js
function filterCallsSome({ calls }) {
  return calls.isSome;
}
function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {
  const { fields, index } = variant;
  const count2 = fields.length;
  const args = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const { name, type, typeName } = fields[i];
    args[i] = objectSpread({
      name: stringCamelCase(name.unwrapOr(`param${i}`)),
      type: getSiName(lookup, type)
    }, typeName.isSome ? { typeName: typeName.unwrap() } : null);
  }
  return createUnchecked(registry, sectionName, new Uint8Array([sectionIndex, index.toNumber()]), registry.createTypeUnsafe("FunctionMetadataLatest", [objectSpread({ args }, variant)]));
}
function decorateExtrinsics(registry, { lookup, pallets }, version2) {
  const result = {};
  const filtered = pallets.filter(filterCallsSome);
  for (let i = 0, count2 = filtered.length; i < count2; i++) {
    const { calls, index, name } = filtered[i];
    const sectionName = stringCamelCase(name);
    const sectionIndex = version2 >= 12 ? index.toNumber() : i;
    lazyMethod(result, sectionName, () => lazyVariants(lookup, calls.unwrap(), objectNameToCamel, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
  }
  return result;
}
var init_extrinsics = __esm({
  "node_modules/@polkadot/types/metadata/decorate/extrinsics/index.js"() {
    init_util();
    init_lazy2();
    init_util5();
    init_util8();
    init_createUnchecked();
  }
});

// node_modules/@polkadot/types/metadata/v9/toV10.js
function createStorageHasher(registry, hasher2) {
  if (hasher2.toNumber() >= 2) {
    return registry.createTypeUnsafe("StorageHasherV10", [hasher2.toNumber() + 1]);
  }
  return registry.createTypeUnsafe("StorageHasherV10", [hasher2]);
}
function createStorageType(registry, entryType) {
  if (entryType.isMap) {
    return [objectSpread({}, entryType.asMap, {
      hasher: createStorageHasher(registry, entryType.asMap.hasher)
    }), 1];
  }
  if (entryType.isDoubleMap) {
    return [objectSpread({}, entryType.asDoubleMap, {
      hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
      key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
    }), 2];
  }
  return [entryType.asPlain, 0];
}
function convertModule(registry, mod2) {
  const storage = mod2.storage.unwrapOr(null);
  return registry.createTypeUnsafe("ModuleMetadataV10", [objectSpread({}, mod2, {
    storage: storage ? objectSpread({}, storage, {
      items: storage.items.map((item) => objectSpread({}, item, {
        type: registry.createTypeUnsafe("StorageEntryTypeV10", createStorageType(registry, item.type))
      }))
    }) : null
  })]);
}
function toV10(registry, { modules }) {
  return registry.createTypeUnsafe("MetadataV10", [{
    modules: modules.map((mod2) => convertModule(registry, mod2))
  }]);
}
var init_toV10 = __esm({
  "node_modules/@polkadot/types/metadata/v9/toV10.js"() {
    init_util();
  }
});

// node_modules/@polkadot/types/metadata/v10/toV11.js
function toV11(registry, { modules }) {
  return registry.createTypeUnsafe("MetadataV11", [{
    // This is new in V11, pass V0 here - something non-existing, telling the API to use
    // the fallback for this information (on-chain detection)
    extrinsic: {
      signedExtensions: [],
      version: 0
    },
    modules
  }]);
}
var init_toV11 = __esm({
  "node_modules/@polkadot/types/metadata/v10/toV11.js"() {
  }
});

// node_modules/@polkadot/types/metadata/v11/toV12.js
function toV12(registry, { extrinsic, modules }) {
  return registry.createTypeUnsafe("MetadataV12", [{
    extrinsic,
    modules: modules.map((mod2) => registry.createTypeUnsafe("ModuleMetadataV12", [objectSpread({}, mod2, { index: 255 })]))
  }]);
}
var init_toV12 = __esm({
  "node_modules/@polkadot/types/metadata/v11/toV12.js"() {
    init_util();
  }
});

// node_modules/@polkadot/types/metadata/v12/toV13.js
function toV13(registry, v122) {
  return registry.createTypeUnsafe("MetadataV13", [v122]);
}
var init_toV13 = __esm({
  "node_modules/@polkadot/types/metadata/v12/toV13.js"() {
  }
});

// node_modules/@polkadot/types/interfaces/alias.js
function getAliasTypes({ knownTypes: knownTypes2 }, section2) {
  return {
    ...typesAlias[section2] ?? {},
    ...knownTypes2.typesAlias?.[section2] ?? {}
  };
}
var typesAlias;
var init_alias = __esm({
  "node_modules/@polkadot/types/interfaces/alias.js"() {
    typesAlias = {
      assets: {
        Approval: "AssetApproval",
        ApprovalKey: "AssetApprovalKey",
        Balance: "TAssetBalance",
        DestroyWitness: "AssetDestroyWitness"
      },
      babe: {
        EquivocationProof: "BabeEquivocationProof"
      },
      balances: {
        Status: "BalanceStatus"
      },
      beefy: {
        AuthorityId: "BeefyId"
      },
      contracts: {
        StorageKey: "ContractStorageKey"
      },
      electionProviderMultiPhase: {
        Phase: "ElectionPhase"
      },
      ethereum: {
        Block: "EthBlock",
        Header: "EthHeader",
        Receipt: "EthReceipt",
        Transaction: "EthTransaction",
        TransactionStatus: "EthTransactionStatus"
      },
      evm: {
        Account: "EvmAccount",
        Log: "EvmLog",
        Vicinity: "EvmVicinity"
      },
      grandpa: {
        Equivocation: "GrandpaEquivocation",
        EquivocationProof: "GrandpaEquivocationProof"
      },
      identity: {
        Judgement: "IdentityJudgement"
      },
      inclusion: {
        ValidatorIndex: "ParaValidatorIndex"
      },
      paraDisputes: {
        ValidatorIndex: "ParaValidatorIndex"
      },
      paraInclusion: {
        ValidatorIndex: "ParaValidatorIndex"
      },
      paraScheduler: {
        ValidatorIndex: "ParaValidatorIndex"
      },
      paraShared: {
        ValidatorIndex: "ParaValidatorIndex"
      },
      parachains: {
        Id: "ParaId"
      },
      parasDisputes: {
        ValidatorIndex: "ParaValidatorIndex"
      },
      parasInclusion: {
        ValidatorIndex: "ParaValidatorIndex"
      },
      parasScheduler: {
        ValidatorIndex: "ParaValidatorIndex"
      },
      parasShared: {
        ValidatorIndex: "ParaValidatorIndex"
      },
      proposeParachain: {
        Proposal: "ParachainProposal"
      },
      proxy: {
        Announcement: "ProxyAnnouncement"
      },
      scheduler: {
        ValidatorIndex: "ParaValidatorIndex"
      },
      shared: {
        ValidatorIndex: "ParaValidatorIndex"
      },
      society: {
        Judgement: "SocietyJudgement",
        Vote: "SocietyVote"
      },
      staking: {
        Compact: "CompactAssignments"
      },
      treasury: {
        Proposal: "TreasuryProposal"
      },
      xcm: {
        AssetId: "XcmAssetId"
      },
      xcmPallet: {
        AssetId: "XcmAssetId"
      }
    };
  }
});

// node_modules/@polkadot/types/metadata/v13/toV14.js
function compatType(specs, _type) {
  const type = _type.toString();
  const index = specs.findIndex(({ def }) => def.HistoricMetaCompat === type);
  if (index !== -1) {
    return index;
  }
  return specs.push({
    def: {
      HistoricMetaCompat: type
    }
  }) - 1;
}
function compatTypes(specs, ...types2) {
  for (let i = 0, count2 = types2.length; i < count2; i++) {
    compatType(specs, types2[i]);
  }
}
function makeTupleType(specs, entries) {
  return specs.push({
    def: {
      Tuple: entries
    }
  }) - 1;
}
function makeVariantType(modName, variantType, specs, variants) {
  return specs.push({
    def: {
      Variant: { variants }
    },
    path: [`pallet_${modName.toString()}`, "pallet", variantType]
  }) - 1;
}
function registerOriginCaller(registry, modules, metaVersion) {
  registry.register({
    OriginCaller: {
      _enum: modules.map((mod2, index) => [
        mod2.name.toString(),
        metaVersion >= 12 ? mod2.index.toNumber() : index
      ]).sort((a, b2) => a[1] - b2[1]).reduce((result, [name, index]) => {
        for (let i = Object.keys(result).length; i < index; i++) {
          result[`Empty${i}`] = "Null";
        }
        result[name] = knownOrigins[name] || "Null";
        return result;
      }, {})
    }
  });
}
function setTypeOverride(sectionTypes, types2) {
  types2.forEach((type) => {
    const override = Object.keys(sectionTypes).find((aliased) => type.eq(aliased));
    if (override) {
      type.setOverride(sectionTypes[override]);
    } else {
      const orig = type.toString();
      const alias2 = Object.entries(sectionTypes).reduce((result, [src, dst]) => BOXES.reduce((result2, [a, z2]) => result2.replace(`${a}${src}${z2}`, `${a}${dst}${z2}`), result), orig);
      if (orig !== alias2) {
        type.setOverride(alias2);
      }
    }
  });
}
function convertCalls(specs, registry, modName, calls, sectionTypes) {
  const variants = calls.map(({ args, docs, name }, index) => {
    setTypeOverride(sectionTypes, args.map(({ type }) => type));
    return registry.createTypeUnsafe("SiVariant", [{
      docs,
      fields: args.map(({ name: name2, type }) => registry.createTypeUnsafe("SiField", [{ name: name2, type: compatType(specs, type) }])),
      index,
      name
    }]);
  });
  return registry.createTypeUnsafe("PalletCallMetadataV14", [{
    type: makeVariantType(modName, "Call", specs, variants)
  }]);
}
function convertConstants(specs, registry, constants, sectionTypes) {
  return constants.map(({ docs, name, type, value }) => {
    setTypeOverride(sectionTypes, [type]);
    return registry.createTypeUnsafe("PalletConstantMetadataV14", [{
      docs,
      name,
      type: compatType(specs, type),
      value
    }]);
  });
}
function convertErrors(specs, registry, modName, errors, _sectionTypes) {
  const variants = errors.map(({ docs, name }, index) => registry.createTypeUnsafe("SiVariant", [{
    docs,
    fields: [],
    index,
    name
  }]));
  return registry.createTypeUnsafe("PalletErrorMetadataV14", [{
    type: makeVariantType(modName, "Error", specs, variants)
  }]);
}
function convertEvents(specs, registry, modName, events2, sectionTypes) {
  const variants = events2.map(({ args, docs, name }, index) => {
    setTypeOverride(sectionTypes, args);
    return registry.createTypeUnsafe("SiVariant", [{
      docs,
      fields: args.map((t) => registry.createTypeUnsafe("SiField", [{ type: compatType(specs, t) }])),
      index,
      name
    }]);
  });
  return registry.createTypeUnsafe("PalletEventMetadataV14", [{
    type: makeVariantType(modName, "Event", specs, variants)
  }]);
}
function createMapEntry(specs, registry, sectionTypes, { hashers, isLinked, isOptional, keys: keys2, value }) {
  setTypeOverride(sectionTypes, [value, ...Array.isArray(keys2) ? keys2 : [keys2]]);
  return registry.createTypeUnsafe("StorageEntryTypeV14", [{
    Map: {
      hashers,
      key: hashers.length === 1 ? compatType(specs, keys2[0]) : makeTupleType(specs, keys2.map((t) => compatType(specs, t))),
      value: isLinked ? compatType(specs, `(${isOptional ? `Option<${value.toString()}>` : value.toString()}, Linkage<${keys2[0].toString()}>)`) : compatType(specs, value)
    }
  }]);
}
function convertStorage(specs, registry, { items, prefix: prefix2 }, sectionTypes) {
  return registry.createTypeUnsafe("PalletStorageMetadataV14", [{
    items: items.map(({ docs, fallback, modifier, name, type }) => {
      let entryType;
      if (type.isPlain) {
        const plain = type.asPlain;
        setTypeOverride(sectionTypes, [plain]);
        entryType = registry.createTypeUnsafe("StorageEntryTypeV14", [{
          Plain: compatType(specs, plain)
        }]);
      } else if (type.isMap) {
        const map3 = type.asMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: [map3.hasher],
          isLinked: map3.linked.isTrue,
          isOptional: modifier.isOptional,
          keys: [map3.key],
          value: map3.value
        });
      } else if (type.isDoubleMap) {
        const dm = type.asDoubleMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: [dm.hasher, dm.key2Hasher],
          isLinked: false,
          isOptional: modifier.isOptional,
          keys: [dm.key1, dm.key2],
          value: dm.value
        });
      } else {
        const nm = type.asNMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: nm.hashers,
          isLinked: false,
          isOptional: modifier.isOptional,
          keys: nm.keyVec,
          value: nm.value
        });
      }
      return registry.createTypeUnsafe("StorageEntryMetadataV14", [{
        docs,
        fallback,
        modifier,
        name,
        type: entryType
      }]);
    }),
    prefix: prefix2
  }]);
}
function convertExtrinsic(registry, { signedExtensions, version: version2 }) {
  return registry.createTypeUnsafe("ExtrinsicMetadataV14", [{
    signedExtensions: signedExtensions.map((identifier) => ({
      identifier,
      type: 0
      // we don't map the fields at all
    })),
    type: 0,
    // Map to extrinsic like in v14?
    version: version2
  }]);
}
function createPallet(specs, registry, mod2, { calls, constants, errors, events: events2, storage }) {
  const sectionTypes = getAliasTypes(registry, stringCamelCase(mod2.name));
  return registry.createTypeUnsafe("PalletMetadataV14", [{
    calls: calls && convertCalls(specs, registry, mod2.name, calls, sectionTypes),
    constants: convertConstants(specs, registry, constants, sectionTypes),
    errors: errors && convertErrors(specs, registry, mod2.name, errors, sectionTypes),
    events: events2 && convertEvents(specs, registry, mod2.name, events2, sectionTypes),
    index: mod2.index,
    name: mod2.name,
    storage: storage && convertStorage(specs, registry, storage, sectionTypes)
  }]);
}
function toV14(registry, v132, metaVersion) {
  const specs = [];
  compatTypes(specs, "Null", "u8", "u16", "u32", "u64");
  registerOriginCaller(registry, v132.modules, metaVersion);
  const extrinsic = convertExtrinsic(registry, v132.extrinsic);
  const pallets = v132.modules.map((mod2) => createPallet(specs, registry, mod2, {
    calls: mod2.calls.unwrapOr(null),
    constants: mod2.constants,
    errors: mod2.errors.length ? mod2.errors : null,
    events: mod2.events.unwrapOr(null),
    storage: mod2.storage.unwrapOr(null)
  }));
  return registry.createTypeUnsafe("MetadataV14", [{
    extrinsic,
    lookup: {
      types: specs.map((type, id) => registry.createTypeUnsafe("PortableType", [{ id, type }]))
    },
    pallets
  }]);
}
var BOXES;
var init_toV14 = __esm({
  "node_modules/@polkadot/types/metadata/v13/toV14.js"() {
    init_util();
    init_alias();
    init_definitions2();
    BOXES = [["<", ">"], ["<", ","], [",", ">"], ["(", ")"], ["(", ","], [",", ","], [",", ")"]];
  }
});

// node_modules/@polkadot/types/metadata/v14/toV15.js
function toV15(registry, v142, _2) {
  const unchecked = v142.lookup.paramTypes.SpRuntimeUncheckedExtrinsic;
  return registry.createTypeUnsafe("MetadataV15", [
    objectSpread({}, v142, {
      extrinsic: registry.createTypeUnsafe("ExtrinsicMetadataV15", [
        objectSpread({}, v142.extrinsic, {
          addressType: unchecked?.[0].type.unwrapOr(0),
          callType: unchecked?.[1].type.unwrapOr(0),
          extraType: unchecked?.[3].type.unwrapOr(0),
          signatureType: unchecked?.[2].type.unwrapOr(0)
        })
      ]),
      outerEnums: registry.createTypeUnsafe("OuterEnums15", [{
        // FIXME We need to extract & add the errorType in here
        // (these doesn't seem to be an esay way to detect & extract it)
        callType: unchecked?.[1].type.unwrapOr(0),
        eventType: v142.lookup.paramTypes.FrameSystemEventRecord?.[0].type.unwrapOr(0)
      }])
    })
  ]);
}
var init_toV15 = __esm({
  "node_modules/@polkadot/types/metadata/v14/toV15.js"() {
    init_util();
  }
});

// node_modules/@polkadot/types/metadata/v15/toLatest.js
function toLatest(_registry, v152, _metaVersion) {
  return v152;
}
var init_toLatest = __esm({
  "node_modules/@polkadot/types/metadata/v15/toLatest.js"() {
  }
});

// node_modules/@polkadot/types/metadata/MagicNumber.js
var MAGIC_NUMBER, MagicNumber;
var init_MagicNumber = __esm({
  "node_modules/@polkadot/types/metadata/MagicNumber.js"() {
    init_types_codec();
    MAGIC_NUMBER = 1635018093;
    MagicNumber = class extends u323 {
      constructor(registry, value) {
        super(registry, value);
        if (!this.isEmpty && !this.eq(MAGIC_NUMBER)) {
          throw new Error(`MagicNumber mismatch: expected ${registry.createTypeUnsafe("u32", [MAGIC_NUMBER]).toHex()}, found ${this.toHex()}`);
        }
      }
    };
  }
});

// node_modules/@polkadot/types/metadata/versions.js
var KNOWN_VERSIONS, LATEST_VERSION, TO_CALLS_VERSION;
var init_versions = __esm({
  "node_modules/@polkadot/types/metadata/versions.js"() {
    KNOWN_VERSIONS = [15, 14, 13, 12, 11, 10, 9];
    LATEST_VERSION = KNOWN_VERSIONS[0];
    TO_CALLS_VERSION = 14;
  }
});

// node_modules/@polkadot/types/metadata/MetadataVersioned.js
var MetadataVersioned;
var init_MetadataVersioned = __esm({
  "node_modules/@polkadot/types/metadata/MetadataVersioned.js"() {
    init_types_codec();
    init_util5();
    init_toV10();
    init_toV11();
    init_toV12();
    init_toV13();
    init_toV14();
    init_toV15();
    init_toLatest();
    init_MagicNumber();
    init_versions();
    MetadataVersioned = class _MetadataVersioned extends Struct {
      __internal__converted = /* @__PURE__ */ new Map();
      constructor(registry, value) {
        super(registry, {
          magicNumber: MagicNumber,
          metadata: "MetadataAll"
        }, value);
      }
      __internal__assertVersion = (version2) => {
        if (this.version > version2) {
          throw new Error(`Cannot convert metadata from version ${this.version} to ${version2}`);
        }
        return this.version === version2;
      };
      __internal__getVersion = (version2, fromPrev) => {
        if (version2 !== "latest" && this.__internal__assertVersion(version2)) {
          const asCurr = `asV${version2}`;
          return this.__internal__metadata()[asCurr];
        }
        if (!this.__internal__converted.has(version2)) {
          const asPrev = version2 === "latest" ? `asV${LATEST_VERSION}` : `asV${version2 - 1}`;
          this.__internal__converted.set(version2, fromPrev(this.registry, this[asPrev], this.version));
        }
        return this.__internal__converted.get(version2);
      };
      /**
       * @description the metadata wrapped
       */
      __internal__metadata = () => {
        return this.getT("metadata");
      };
      /**
       * @description Returns the wrapped metadata as a limited calls-only (latest) version
       */
      get asCallsOnly() {
        return new _MetadataVersioned(this.registry, {
          magicNumber: this.magicNumber,
          metadata: this.registry.createTypeUnsafe("MetadataAll", [toCallsOnly(this.registry, this.asLatest), TO_CALLS_VERSION])
        });
      }
      /**
       * @description Returns the wrapped metadata as a V9 object
       */
      get asV9() {
        this.__internal__assertVersion(9);
        return this.__internal__metadata().asV9;
      }
      /**
       * @description Returns the wrapped values as a V10 object
       */
      get asV10() {
        return this.__internal__getVersion(10, toV10);
      }
      /**
       * @description Returns the wrapped values as a V11 object
       */
      get asV11() {
        return this.__internal__getVersion(11, toV11);
      }
      /**
       * @description Returns the wrapped values as a V12 object
       */
      get asV12() {
        return this.__internal__getVersion(12, toV12);
      }
      /**
       * @description Returns the wrapped values as a V13 object
       */
      get asV13() {
        return this.__internal__getVersion(13, toV13);
      }
      /**
       * @description Returns the wrapped values as a V14 object
       */
      get asV14() {
        return this.__internal__getVersion(14, toV14);
      }
      /**
       * @description Returns the wrapped values as a V14 object
       */
      get asV15() {
        return this.__internal__getVersion(15, toV15);
      }
      /**
       * @description Returns the wrapped values as a latest version object
       */
      get asLatest() {
        return this.__internal__getVersion("latest", toLatest);
      }
      /**
       * @description The magicNumber for the Metadata (known constant)
       */
      get magicNumber() {
        return this.getT("magicNumber");
      }
      /**
       * @description the metadata version this structure represents
       */
      get version() {
        return this.__internal__metadata().index;
      }
      getUniqTypes(throwError2) {
        return getUniqTypes(this.registry, this.asLatest, throwError2);
      }
      /**
       * @description Converts the Object to JSON, typically used for RPC transfers
       */
      toJSON() {
        this.asLatest;
        return super.toJSON();
      }
    };
  }
});

// node_modules/@polkadot/types/metadata/Metadata.js
function decodeU8a7(registry, u8a) {
  if (u8a.length === 0) {
    return EMPTY_METADATA;
  } else if (u8a[VERSION_IDX] === 9) {
    try {
      return new MetadataVersioned(registry, u8a);
    } catch {
      u8a[VERSION_IDX] = 10;
    }
  }
  return u8a;
}
var EMPTY_METADATA, VERSION_IDX, Metadata;
var init_Metadata = __esm({
  "node_modules/@polkadot/types/metadata/Metadata.js"() {
    init_util();
    init_MetadataVersioned();
    EMPTY_METADATA = new Uint8Array([109, 101, 116, 97, 9]);
    VERSION_IDX = EMPTY_METADATA.length - 1;
    Metadata = class extends MetadataVersioned {
      constructor(registry, value) {
        super(registry, isU8a(value) || isString(value) ? decodeU8a7(registry, u8aToU8a(value)) : value);
      }
    };
  }
});

// node_modules/@polkadot/types/metadata/decorate/constants/index.js
function decorateConstants(registry, { pallets }, _version) {
  const result = {};
  for (let i = 0, count2 = pallets.length; i < count2; i++) {
    const { constants, name } = pallets[i];
    if (!constants.isEmpty) {
      lazyMethod(result, stringCamelCase(name), () => lazyMethods({}, constants, (constant) => {
        const codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [hexToU8a(constant.value.toHex())]);
        codec.meta = constant;
        return codec;
      }, objectNameToCamel));
    }
  }
  return result;
}
var init_constants3 = __esm({
  "node_modules/@polkadot/types/metadata/decorate/constants/index.js"() {
    init_util();
    init_util8();
  }
});

// node_modules/@polkadot/types/metadata/decorate/errors/index.js
function variantToMeta(lookup, variant) {
  return objectSpread({ args: variant.fields.map(({ type }) => lookup.getTypeDef(type).type) }, variant);
}
function decorateErrors(registry, { lookup, pallets }, version2) {
  const result = {};
  for (let i = 0, count2 = pallets.length; i < count2; i++) {
    const { errors, index, name } = pallets[i];
    if (errors.isSome) {
      const sectionIndex = version2 >= 12 ? index.toNumber() : i;
      lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, errors.unwrap(), objectNameToString, (variant) => ({
        // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
        is: (errorMod) => isCodec(errorMod) && isCodec(errorMod.index) && errorMod.index.eq(sectionIndex) && (isU8a(errorMod.error) ? errorMod.error[0] === variant.index.toNumber() : isCodec(errorMod.error) && errorMod.error.eq(variant.index)),
        meta: registry.createTypeUnsafe("ErrorMetadataLatest", [variantToMeta(lookup, variant)])
      })));
    }
  }
  return result;
}
var init_errors2 = __esm({
  "node_modules/@polkadot/types/metadata/decorate/errors/index.js"() {
    init_util();
    init_lazy2();
    init_util8();
  }
});

// node_modules/@polkadot/types/metadata/decorate/events/index.js
function filterEventsSome({ events: events2 }) {
  return events2.isSome;
}
function decorateEvents(registry, { lookup, pallets }, version2) {
  const result = {};
  const filtered = pallets.filter(filterEventsSome);
  for (let i = 0, count2 = filtered.length; i < count2; i++) {
    const { events: events2, index, name } = filtered[i];
    const sectionIndex = version2 >= 12 ? index.toNumber() : i;
    lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, events2.unwrap(), objectNameToString, (variant) => ({
      // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
      is: (eventRecord) => isCodec(eventRecord) && isU8a(eventRecord.index) && sectionIndex === eventRecord.index[0] && variant.index.eq(eventRecord.index[1]),
      meta: registry.createTypeUnsafe("EventMetadataLatest", [variantToMeta(lookup, variant)])
    })));
  }
  return result;
}
var init_events = __esm({
  "node_modules/@polkadot/types/metadata/decorate/events/index.js"() {
    init_util();
    init_lazy2();
    init_errors2();
    init_util8();
  }
});

// node_modules/@polkadot/types/metadata/decorate/storage/getHasher.js
function getHasher(hasher2) {
  return HASHERS[hasher2.type] || DEFAULT_FN;
}
var DEFAULT_FN, HASHERS;
var init_getHasher = __esm({
  "node_modules/@polkadot/types/metadata/decorate/storage/getHasher.js"() {
    init_util();
    init_util_crypto();
    DEFAULT_FN = (data) => xxhashAsU8a(data, 128);
    HASHERS = {
      Blake2_128: (data) => (
        // eslint-disable-line camelcase
        blake2AsU8a(data, 128)
      ),
      Blake2_128Concat: (data) => (
        // eslint-disable-line camelcase
        u8aConcat(blake2AsU8a(data, 128), u8aToU8a(data))
      ),
      Blake2_256: (data) => (
        // eslint-disable-line camelcase
        blake2AsU8a(data, 256)
      ),
      Identity: (data) => u8aToU8a(data),
      Twox128: (data) => xxhashAsU8a(data, 128),
      Twox256: (data) => xxhashAsU8a(data, 256),
      Twox64Concat: (data) => u8aConcat(xxhashAsU8a(data, 64), u8aToU8a(data))
    };
  }
});

// node_modules/@polkadot/types/metadata/decorate/storage/createFunction.js
function filterDefined(a) {
  return !isUndefined(a);
}
function assertArgs({ method, section: section2 }, { args, keys: keys2 }) {
  if (!Array.isArray(args)) {
    throw new Error(`Call to ${stringCamelCase(section2 || "unknown")}.${stringCamelCase(method || "unknown")} needs ${keys2.length} arguments`);
  } else if (args.filter(filterDefined).length !== keys2.length) {
    throw new Error(`Call to ${stringCamelCase(section2 || "unknown")}.${stringCamelCase(method || "unknown")} needs ${keys2.length} arguments, found [${args.join(", ")}]`);
  }
}
function createKeyRawParts(registry, itemFn, { args, hashers, keys: keys2 }) {
  const count2 = keys2.length;
  const extra = new Array(count2);
  for (let i = 0; i < count2; i++) {
    extra[i] = getHasher(hashers[i])(registry.createTypeUnsafe(registry.createLookupType(keys2[i]), [args[i]]).toU8a());
  }
  return [
    [
      xxhashAsU8a(itemFn.prefix, 128),
      xxhashAsU8a(itemFn.method, 128)
    ],
    extra
  ];
}
function createKeyInspect(registry, itemFn, args) {
  assertArgs(itemFn, args);
  const { meta } = itemFn;
  const [prefix2, extra] = createKeyRawParts(registry, itemFn, args);
  let types2 = [];
  if (meta.type.isMap) {
    const { hashers, key } = meta.type.asMap;
    types2 = hashers.length === 1 ? [`${hashers[0].type}(${getSiName(registry.lookup, key)})`] : registry.lookup.getSiType(key).def.asTuple.map((k2, i) => `${hashers[i].type}(${getSiName(registry.lookup, k2)})`);
  }
  const names = ["module", "method"].concat(...args.args.map((_2, i) => types2[i]));
  return {
    inner: prefix2.concat(...extra).map((v3, i) => ({ name: names[i], outer: [v3] }))
  };
}
function createKeyRaw(registry, itemFn, args) {
  const [prefix2, extra] = createKeyRawParts(registry, itemFn, args);
  return u8aConcat(...prefix2, ...extra);
}
function createKey(registry, itemFn, args) {
  assertArgs(itemFn, args);
  return compactAddLength(createKeyRaw(registry, itemFn, args));
}
function createStorageInspect(registry, itemFn, options) {
  const { meta: { type } } = itemFn;
  return (...args) => {
    if (type.isPlain) {
      return options.skipHashing ? { inner: [], name: "wellKnown", outer: [u8aToU8a(options.key)] } : createKeyInspect(registry, itemFn, NO_RAW_ARGS);
    }
    const { hashers, key } = type.asMap;
    return hashers.length === 1 ? createKeyInspect(registry, itemFn, { args, hashers, keys: [key] }) : createKeyInspect(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
  };
}
function createStorageFn(registry, itemFn, options) {
  const { meta: { type } } = itemFn;
  let cacheKey = null;
  return (...args) => {
    if (type.isPlain) {
      if (!cacheKey) {
        cacheKey = options.skipHashing ? compactAddLength(u8aToU8a(options.key)) : createKey(registry, itemFn, NO_RAW_ARGS);
      }
      return cacheKey;
    }
    const { hashers, key } = type.asMap;
    return hashers.length === 1 ? createKey(registry, itemFn, { args, hashers, keys: [key] }) : createKey(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
  };
}
function createWithMeta(registry, itemFn, options) {
  const { meta, method, prefix: prefix2, section: section2 } = itemFn;
  const storageFn = createStorageFn(registry, itemFn, options);
  storageFn.inspect = createStorageInspect(registry, itemFn, options);
  storageFn.meta = meta;
  storageFn.method = stringCamelCase(method);
  storageFn.prefix = prefix2;
  storageFn.section = section2;
  storageFn.toJSON = () => objectSpread({ storage: { method, prefix: prefix2, section: section2 } }, meta.toJSON());
  return storageFn;
}
function extendHeadMeta(registry, { meta: { docs, name, type }, section: section2 }, { method }, iterFn) {
  const meta = registry.createTypeUnsafe("StorageEntryMetadataLatest", [{
    docs,
    fallback: registry.createTypeUnsafe("Bytes", []),
    modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", [1]),
    // required
    name,
    type: registry.createTypeUnsafe("StorageEntryTypeLatest", [type.asMap.key, 0])
  }]);
  iterFn.meta = meta;
  const fn = (...args) => registry.createTypeUnsafe("StorageKey", [iterFn(...args), { method, section: section2 }]);
  fn.meta = meta;
  return fn;
}
function extendPrefixedMap(registry, itemFn, storageFn) {
  const { meta: { type }, method, section: section2 } = itemFn;
  storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args) => {
    if (args.length && (type.isPlain || args.length >= type.asMap.hashers.length)) {
      throw new Error(`Iteration of ${stringCamelCase(section2 || "unknown")}.${stringCamelCase(method || "unknown")} needs arguments to be at least one less than the full arguments, found [${args.join(", ")}]`);
    }
    if (args.length) {
      if (type.isMap) {
        const { hashers, key } = type.asMap;
        const keysVec = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
        return new Raw(registry, createKeyRaw(registry, itemFn, { args, hashers: hashers.slice(0, args.length), keys: keysVec.slice(0, args.length) }));
      }
    }
    return new Raw(registry, createKeyRaw(registry, itemFn, NO_RAW_ARGS));
  });
  return storageFn;
}
function createFunction(registry, itemFn, options) {
  const { meta: { type } } = itemFn;
  const storageFn = createWithMeta(registry, itemFn, options);
  if (type.isMap) {
    extendPrefixedMap(registry, itemFn, storageFn);
  }
  storageFn.keyPrefix = (...args) => storageFn.iterKey && storageFn.iterKey(...args) || compactStripLength(storageFn())[1];
  return storageFn;
}
var NO_RAW_ARGS;
var init_createFunction = __esm({
  "node_modules/@polkadot/types/metadata/decorate/storage/createFunction.js"() {
    init_types_codec();
    init_util();
    init_util_crypto();
    init_util5();
    init_getHasher();
    NO_RAW_ARGS = {
      args: [],
      hashers: [],
      keys: []
    };
  }
});

// node_modules/@polkadot/types/metadata/decorate/storage/util.js
function findSiPrimitive(registry, type) {
  const prim = type.toLowerCase();
  return registry.lookup.types.find((t) => t.type.def.isPrimitive && t.type.def.asPrimitive.toString().toLowerCase() === prim || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim);
}
function findSiType(registry, type) {
  let portable = findSiPrimitive(registry, type);
  if (!portable && (type === "Bytes" || type.startsWith("[u8;"))) {
    const u83 = findSiPrimitive(registry, "u8");
    if (u83) {
      if (type === "Bytes") {
        portable = registry.lookup.types.find((t) => t.type.def.isSequence && t.type.def.asSequence.type.eq(u83.id) || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.eq(type));
      } else {
        const td = getTypeDef(type);
        portable = registry.lookup.types.find((t) => t.type.def.isArray && t.type.def.asArray.eq({
          len: td.length,
          type: u83.id
        }) || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.eq(type));
      }
    }
  }
  if (!portable) {
    console.warn(`Unable to map ${type} to a lookup index`);
  }
  return portable;
}
function createRuntimeFunction({ method, prefix: prefix2, section: section2 }, key, { docs, type }) {
  return (registry) => createFunction(registry, {
    meta: registry.createTypeUnsafe("StorageEntryMetadataLatest", [{
      docs: registry.createTypeUnsafe("Vec<Text>", [[docs]]),
      modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", ["Required"]),
      name: registry.createTypeUnsafe("Text", [method]),
      toJSON: () => key,
      type: registry.createTypeUnsafe("StorageEntryTypeLatest", [{ Plain: findSiType(registry, type)?.id || 0 }])
    }]),
    method,
    prefix: prefix2,
    section: section2
  }, { key, skipHashing: true });
}
var init_util9 = __esm({
  "node_modules/@polkadot/types/metadata/decorate/storage/util.js"() {
    init_types_create();
    init_createFunction();
  }
});

// node_modules/@polkadot/types/metadata/decorate/storage/substrate.js
function createSubstrateFn(method, key, meta) {
  return createRuntimeFunction({ method, prefix, section }, key, meta);
}
var prefix, section, substrate2;
var init_substrate2 = __esm({
  "node_modules/@polkadot/types/metadata/decorate/storage/substrate.js"() {
    init_util9();
    prefix = "Substrate";
    section = "substrate";
    substrate2 = {
      changesTrieConfig: createSubstrateFn("changesTrieConfig", ":changes_trie", {
        docs: "Changes trie configuration is stored under this key.",
        type: "u32"
      }),
      childStorageKeyPrefix: createSubstrateFn("childStorageKeyPrefix", ":child_storage:", {
        docs: "Prefix of child storage keys.",
        type: "u32"
      }),
      code: createSubstrateFn("code", ":code", {
        docs: "Wasm code of the runtime.",
        type: "Bytes"
      }),
      extrinsicIndex: createSubstrateFn("extrinsicIndex", ":extrinsic_index", {
        docs: "Current extrinsic index (u32) is stored under this key.",
        type: "u32"
      }),
      heapPages: createSubstrateFn("heapPages", ":heappages", {
        docs: "Number of wasm linear memory pages required for execution of the runtime.",
        type: "u64"
      }),
      intrablockEntropy: createSubstrateFn("intrablockEntropy", ":intrablock_entropy", {
        docs: "Current intra-block entropy (a universally unique `[u8; 32]` value) is stored here.",
        type: "[u8; 32]"
      })
    };
  }
});

// node_modules/@polkadot/types/metadata/decorate/storage/getStorage.js
function getStorage(registry) {
  const storage = {};
  const entries = Object.entries(substrate2);
  for (let e = 0, count2 = entries.length; e < count2; e++) {
    storage[entries[e][0]] = entries[e][1](registry);
  }
  return { substrate: storage };
}
var init_getStorage = __esm({
  "node_modules/@polkadot/types/metadata/decorate/storage/getStorage.js"() {
    init_substrate2();
  }
});

// node_modules/@polkadot/types/metadata/decorate/storage/index.js
function decorateStorage(registry, { pallets }, _metaVersion) {
  const result = getStorage(registry);
  for (let i = 0, count2 = pallets.length; i < count2; i++) {
    const { name, storage } = pallets[i];
    if (storage.isSome) {
      const section2 = stringCamelCase(name);
      const { items, prefix: _prefix } = storage.unwrap();
      const prefix2 = _prefix.toString();
      lazyMethod(result, section2, () => lazyMethods({
        palletVersion: createRuntimeFunction({ method: VERSION_NAME, prefix: prefix2, section: section2 }, createKeyRaw(registry, { method: VERSION_KEY, prefix: name.toString() }, NO_RAW_ARGS), VERSION_DOCS)(registry)
      }, items, (meta) => createFunction(registry, { meta, method: meta.name.toString(), prefix: prefix2, section: section2 }, {}), objectNameToCamel));
    }
  }
  return result;
}
var VERSION_NAME, VERSION_KEY, VERSION_DOCS;
var init_storage2 = __esm({
  "node_modules/@polkadot/types/metadata/decorate/storage/index.js"() {
    init_util();
    init_util8();
    init_createFunction();
    init_getStorage();
    init_util9();
    VERSION_NAME = "palletVersion";
    VERSION_KEY = ":__STORAGE_VERSION__:";
    VERSION_DOCS = { docs: "Returns the current pallet version from storage", type: "u16" };
  }
});

// node_modules/@polkadot/types/metadata/decorate/index.js
function expandMetadata(registry, metadata) {
  if (!(metadata instanceof Metadata)) {
    throw new Error("You need to pass a valid Metadata instance to Decorated");
  }
  const latest2 = metadata.asLatest;
  const version2 = metadata.version;
  return {
    consts: decorateConstants(registry, latest2, version2),
    errors: decorateErrors(registry, latest2, version2),
    events: decorateEvents(registry, latest2, version2),
    query: decorateStorage(registry, latest2, version2),
    registry,
    tx: decorateExtrinsics(registry, latest2, version2)
  };
}
var init_decorate = __esm({
  "node_modules/@polkadot/types/metadata/decorate/index.js"() {
    init_Metadata();
    init_constants3();
    init_errors2();
    init_events();
    init_extrinsics();
    init_storage2();
  }
});

// node_modules/@polkadot/types/create/registry.js
function sortDecimalStrings(a, b2) {
  return parseInt(a, 10) - parseInt(b2, 10);
}
function valueToString(v3) {
  return v3.toString();
}
function getFieldArgs(lookup, fields) {
  const count2 = fields.length;
  const args = new Array(count2);
  for (let i = 0; i < count2; i++) {
    args[i] = lookup.getTypeDef(fields[i].type).type;
  }
  return args;
}
function clearRecord(record) {
  const keys2 = Object.keys(record);
  for (let i = 0, count2 = keys2.length; i < count2; i++) {
    delete record[keys2[i]];
  }
}
function getVariantStringIdx({ index }) {
  return index.toString();
}
function injectErrors(_2, { lookup, pallets }, version2, result) {
  clearRecord(result);
  for (let i = 0, count2 = pallets.length; i < count2; i++) {
    const { errors, index, name } = pallets[i];
    if (errors.isSome) {
      const sectionName = stringCamelCase(name);
      lazyMethod(result, version2 >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, errors.unwrap(), getVariantStringIdx, ({ docs, fields, index: index2, name: name2 }) => ({
        args: getFieldArgs(lookup, fields),
        docs: docs.map(valueToString),
        fields,
        index: index2.toNumber(),
        method: name2.toString(),
        name: name2.toString(),
        section: sectionName
      })));
    }
  }
}
function injectEvents(registry, { lookup, pallets }, version2, result) {
  const filtered = pallets.filter(filterEventsSome);
  clearRecord(result);
  for (let i = 0, count2 = filtered.length; i < count2; i++) {
    const { events: events2, index, name } = filtered[i];
    lazyMethod(result, version2 >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, events2.unwrap(), getVariantStringIdx, (variant) => {
      const meta = registry.createType("EventMetadataLatest", objectSpread({}, variant, { args: getFieldArgs(lookup, variant.fields) }));
      return class extends GenericEventData {
        constructor(registry2, value) {
          super(registry2, value, meta, stringCamelCase(name), variant.name.toString());
        }
      };
    }));
  }
}
function injectExtrinsics(registry, { lookup, pallets }, version2, result, mapping2) {
  const filtered = pallets.filter(filterCallsSome);
  clearRecord(result);
  clearRecord(mapping2);
  for (let i = 0, count2 = filtered.length; i < count2; i++) {
    const { calls, index, name } = filtered[i];
    const sectionIndex = version2 >= 12 ? index.toNumber() : i;
    const sectionName = stringCamelCase(name);
    const allCalls = calls.unwrap();
    lazyMethod(result, sectionIndex, () => lazyVariants(lookup, allCalls, getVariantStringIdx, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
    const { path } = registry.lookup.getSiType(allCalls.type);
    const palletIdx = path.findIndex((v3) => v3.eq("pallet"));
    if (palletIdx !== -1) {
      const name2 = stringCamelCase(path.slice(0, palletIdx).map((p, i2) => i2 === 0 ? p.replace(/^(frame|pallet)_/, "") : p).join(" "));
      if (!mapping2[name2]) {
        mapping2[name2] = [sectionName];
      } else {
        mapping2[name2].push(sectionName);
      }
    }
  }
}
function extractProperties(registry, metadata) {
  const original = registry.getChainProperties();
  const constants = decorateConstants(registry, metadata.asLatest, metadata.version);
  const ss58Format = constants["system"] && (constants["system"]["sS58Prefix"] || constants["system"]["ss58Prefix"]);
  if (!ss58Format) {
    return original;
  }
  const { isEthereum, tokenDecimals, tokenSymbol } = original || {};
  return registry.createTypeUnsafe("ChainProperties", [{ isEthereum, ss58Format, tokenDecimals, tokenSymbol }]);
}
var DEFAULT_FIRST_CALL_IDX, l11, TypeRegistry;
var init_registry2 = __esm({
  "node_modules/@polkadot/types/create/registry.js"() {
    init_types_codec();
    init_types_create();
    init_util();
    init_util_crypto();
    init_signedExtensions();
    init_Event();
    init_index_types();
    init_definitions75();
    init_extrinsics();
    init_decorate();
    init_Metadata();
    init_PortableRegistry2();
    init_lazy2();
    DEFAULT_FIRST_CALL_IDX = new Uint8Array(2);
    l11 = logger("registry");
    TypeRegistry = class {
      __internal__chainProperties;
      __internal__classes = /* @__PURE__ */ new Map();
      __internal__definitions = /* @__PURE__ */ new Map();
      __internal__firstCallIndex = null;
      __internal__hasher = blake2AsU8a;
      __internal__knownTypes = {};
      __internal__lookup;
      __internal__metadata;
      __internal__metadataVersion = 0;
      __internal__signedExtensions = fallbackExtensions;
      __internal__unknownTypes = /* @__PURE__ */ new Map();
      __internal__userExtensions;
      __internal__knownDefaults;
      __internal__knownDefaultsEntries;
      __internal__knownDefinitions;
      __internal__metadataCalls = {};
      __internal__metadataErrors = {};
      __internal__metadataEvents = {};
      __internal__moduleMap = {};
      createdAtHash;
      constructor(createdAtHash) {
        this.__internal__knownDefaults = objectSpread({ Json, Metadata, PortableRegistry, Raw }, index_types_exports);
        this.__internal__knownDefaultsEntries = Object.entries(this.__internal__knownDefaults);
        this.__internal__knownDefinitions = definitions_exports;
        const allKnown = Object.values(this.__internal__knownDefinitions);
        for (let i = 0, count2 = allKnown.length; i < count2; i++) {
          this.register(allKnown[i].types);
        }
        if (createdAtHash) {
          this.createdAtHash = this.createType("BlockHash", createdAtHash);
        }
      }
      get chainDecimals() {
        if (this.__internal__chainProperties?.tokenDecimals.isSome) {
          const allDecimals = this.__internal__chainProperties.tokenDecimals.unwrap();
          if (allDecimals.length) {
            return allDecimals.map((b2) => b2.toNumber());
          }
        }
        return [12];
      }
      get chainIsEthereum() {
        return this.__internal__chainProperties?.isEthereum.isTrue || false;
      }
      get chainSS58() {
        return this.__internal__chainProperties?.ss58Format.isSome ? this.__internal__chainProperties.ss58Format.unwrap().toNumber() : void 0;
      }
      get chainTokens() {
        if (this.__internal__chainProperties?.tokenSymbol.isSome) {
          const allTokens = this.__internal__chainProperties.tokenSymbol.unwrap();
          if (allTokens.length) {
            return allTokens.map(valueToString);
          }
        }
        return [formatBalance.getDefaults().unit];
      }
      get firstCallIndex() {
        return this.__internal__firstCallIndex || DEFAULT_FIRST_CALL_IDX;
      }
      /**
       * @description Returns true if the type is in a Compat format
       */
      isLookupType(value) {
        return /Lookup\d+$/.test(value);
      }
      /**
       * @description Creates a lookup string from the supplied id
       */
      createLookupType(lookupId) {
        return `Lookup${typeof lookupId === "number" ? lookupId : lookupId.toNumber()}`;
      }
      get knownTypes() {
        return this.__internal__knownTypes;
      }
      get lookup() {
        return assertReturn(this.__internal__lookup, "PortableRegistry has not been set on this registry");
      }
      get metadata() {
        return assertReturn(this.__internal__metadata, "Metadata has not been set on this registry");
      }
      get unknownTypes() {
        return [...this.__internal__unknownTypes.keys()];
      }
      get signedExtensions() {
        return this.__internal__signedExtensions;
      }
      clearCache() {
        this.__internal__classes = /* @__PURE__ */ new Map();
      }
      /**
       * @describe Creates an instance of the class
       */
      createClass(type) {
        return createClassUnsafe(this, type);
      }
      /**
       * @describe Creates an instance of the class
       */
      createClassUnsafe(type) {
        return createClassUnsafe(this, type);
      }
      /**
       * @description Creates an instance of a type as registered
       */
      createType(type, ...params) {
        return createTypeUnsafe(this, type, params);
      }
      /**
       * @description Creates an instance of a type as registered
       */
      createTypeUnsafe(type, params, options) {
        return createTypeUnsafe(this, type, params, options);
      }
      // find a specific call
      findMetaCall(callIndex) {
        const [section2, method] = [callIndex[0], callIndex[1]];
        return assertReturn(this.__internal__metadataCalls[`${section2}`] && this.__internal__metadataCalls[`${section2}`][`${method}`], () => `findMetaCall: Unable to find Call with index [${section2}, ${method}]/[${callIndex.toString()}]`);
      }
      // finds an error
      findMetaError(errorIndex) {
        const [section2, method] = isU8a(errorIndex) ? [errorIndex[0], errorIndex[1]] : [
          errorIndex.index.toNumber(),
          isU8a(errorIndex.error) ? errorIndex.error[0] : errorIndex.error.toNumber()
        ];
        return assertReturn(this.__internal__metadataErrors[`${section2}`] && this.__internal__metadataErrors[`${section2}`][`${method}`], () => `findMetaError: Unable to find Error with index [${section2}, ${method}]/[${errorIndex.toString()}]`);
      }
      findMetaEvent(eventIndex) {
        const [section2, method] = [eventIndex[0], eventIndex[1]];
        return assertReturn(this.__internal__metadataEvents[`${section2}`] && this.__internal__metadataEvents[`${section2}`][`${method}`], () => `findMetaEvent: Unable to find Event with index [${section2}, ${method}]/[${eventIndex.toString()}]`);
      }
      get(name, withUnknown, knownTypeDef) {
        return this.getUnsafe(name, withUnknown, knownTypeDef);
      }
      getUnsafe(name, withUnknown, knownTypeDef) {
        let Type2 = this.__internal__classes.get(name) || this.__internal__knownDefaults[name];
        if (!Type2) {
          const definition = this.__internal__definitions.get(name);
          let BaseType;
          if (definition) {
            BaseType = createClassUnsafe(this, definition);
          } else if (knownTypeDef) {
            BaseType = constructTypeClass(this, knownTypeDef);
          } else if (withUnknown) {
            l11.warn(`Unable to resolve type ${name}, it will fail on construction`);
            this.__internal__unknownTypes.set(name, true);
            BaseType = DoNotConstruct.with(name);
          }
          if (BaseType) {
            Type2 = class extends BaseType {
            };
            this.__internal__classes.set(name, Type2);
            if (knownTypeDef && isNumber(knownTypeDef.lookupIndex)) {
              this.__internal__classes.set(this.createLookupType(knownTypeDef.lookupIndex), Type2);
            }
          }
        }
        return Type2;
      }
      getChainProperties() {
        return this.__internal__chainProperties;
      }
      getClassName(Type2) {
        const names = [];
        for (const [name, Clazz] of this.__internal__knownDefaultsEntries) {
          if (Type2 === Clazz) {
            names.push(name);
          }
        }
        for (const [name, Clazz] of this.__internal__classes.entries()) {
          if (Type2 === Clazz) {
            names.push(name);
          }
        }
        return names.length ? names.sort().reverse()[0] : void 0;
      }
      getDefinition(typeName) {
        return this.__internal__definitions.get(typeName);
      }
      getModuleInstances(specName, moduleName) {
        return this.__internal__knownTypes?.typesBundle?.spec?.[specName.toString()]?.instances?.[moduleName] || this.__internal__moduleMap[moduleName];
      }
      getOrThrow(name) {
        const Clazz = this.get(name);
        if (!Clazz) {
          throw new Error(`type ${name} not found`);
        }
        return Clazz;
      }
      getOrUnknown(name) {
        return this.get(name, true);
      }
      getSignedExtensionExtra() {
        return expandExtensionTypes(this.__internal__signedExtensions, "payload", this.__internal__userExtensions);
      }
      getSignedExtensionTypes() {
        return expandExtensionTypes(this.__internal__signedExtensions, "extrinsic", this.__internal__userExtensions);
      }
      hasClass(name) {
        return this.__internal__classes.has(name) || !!this.__internal__knownDefaults[name];
      }
      hasDef(name) {
        return this.__internal__definitions.has(name);
      }
      hasType(name) {
        return !this.__internal__unknownTypes.get(name) && (this.hasClass(name) || this.hasDef(name));
      }
      hash(data) {
        return this.createType("CodecHash", this.__internal__hasher(data));
      }
      // eslint-disable-next-line no-dupe-class-members
      register(arg1, arg2) {
        if (isFunction(arg1)) {
          this.__internal__classes.set(arg1.name, arg1);
        } else if (isString(arg1)) {
          if (!isFunction(arg2)) {
            throw new Error(`Expected class definition passed to '${arg1}' registration`);
          } else if (arg1 === arg2.toString()) {
            throw new Error(`Unable to register circular ${arg1} === ${arg1}`);
          }
          this.__internal__classes.set(arg1, arg2);
        } else {
          this.__internal__registerObject(arg1);
        }
      }
      __internal__registerObject = (obj) => {
        const entries = Object.entries(obj);
        for (let e = 0, count2 = entries.length; e < count2; e++) {
          const [name, type] = entries[e];
          if (isFunction(type)) {
            this.__internal__classes.set(name, type);
          } else {
            const def = isString(type) ? type : stringify(type);
            if (name === def) {
              throw new Error(`Unable to register circular ${name} === ${def}`);
            }
            if (this.__internal__classes.has(name)) {
              this.__internal__classes.delete(name);
            }
            this.__internal__definitions.set(name, def);
          }
        }
      };
      // sets the chain properties
      setChainProperties(properties) {
        if (properties) {
          this.__internal__chainProperties = properties;
        }
      }
      setHasher(hasher2) {
        this.__internal__hasher = hasher2 || blake2AsU8a;
      }
      setKnownTypes(knownTypes2) {
        this.__internal__knownTypes = knownTypes2;
      }
      setLookup(lookup) {
        this.__internal__lookup = lookup;
        lookup.register();
      }
      // register alias types alongside the portable/lookup setup
      // (we don't combine this into setLookup since that would/could
      // affect stand-along lookups, such as ABIs which don't have
      // actual on-chain metadata)
      __internal__registerLookup = (lookup) => {
        this.setLookup(lookup);
        let Weight = null;
        if (this.hasType("SpWeightsWeightV2Weight")) {
          const weightv2 = this.createType("SpWeightsWeightV2Weight");
          Weight = weightv2.refTime && weightv2.proofSize ? "SpWeightsWeightV2Weight" : "WeightV1";
        } else if (!isBn(this.createType("Weight"))) {
          Weight = "WeightV1";
        }
        if (Weight) {
          this.register({ Weight });
        }
      };
      // sets the metadata
      setMetadata(metadata, signedExtensions, userExtensions, noInitWarn) {
        this.__internal__metadata = metadata.asLatest;
        this.__internal__metadataVersion = metadata.version;
        this.__internal__firstCallIndex = null;
        this.__internal__registerLookup(this.__internal__metadata.lookup);
        injectExtrinsics(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataCalls, this.__internal__moduleMap);
        injectErrors(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataErrors);
        injectEvents(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataEvents);
        const [defSection] = Object.keys(this.__internal__metadataCalls).sort(sortDecimalStrings);
        if (defSection) {
          const [defMethod] = Object.keys(this.__internal__metadataCalls[defSection]).sort(sortDecimalStrings);
          if (defMethod) {
            this.__internal__firstCallIndex = new Uint8Array([parseInt(defSection, 10), parseInt(defMethod, 10)]);
          }
        }
        this.setSignedExtensions(signedExtensions || (this.__internal__metadata.extrinsic.version.gt(BN_ZERO) ? this.__internal__metadata.extrinsic.signedExtensions.map(({ identifier }) => identifier.toString()) : fallbackExtensions), userExtensions, noInitWarn);
        this.setChainProperties(extractProperties(this, metadata));
      }
      // sets the available signed extensions
      setSignedExtensions(signedExtensions = fallbackExtensions, userExtensions, noInitWarn) {
        this.__internal__signedExtensions = signedExtensions;
        this.__internal__userExtensions = userExtensions;
        if (!noInitWarn) {
          const unknown = findUnknownExtensions(this.__internal__signedExtensions, this.__internal__userExtensions);
          if (unknown.length) {
            l11.warn(`Unknown signed extensions ${unknown.join(", ")} found, treating them as no-effect`);
          }
        }
      }
    };
  }
});

// node_modules/@polkadot/types/create/index.js
var init_create2 = __esm({
  "node_modules/@polkadot/types/create/index.js"() {
    init_exports();
    init_createClass();
    init_createType();
    init_lazy2();
    init_registry2();
  }
});

// node_modules/@polkadot/types/metadata/index.js
var init_metadata = __esm({
  "node_modules/@polkadot/types/metadata/index.js"() {
    init_decorate();
    init_Metadata();
    init_PortableRegistry2();
  }
});

// node_modules/@polkadot/types/bundle.js
var init_bundle12 = __esm({
  "node_modules/@polkadot/types/bundle.js"() {
    init_definitions75();
    init_jsonrpc3();
    init_types_create();
    init_PortableRegistry2();
    init_packageInfo4();
    init_util6();
    init_codec2();
    init_create2();
    init_index_types();
    init_metadata();
  }
});

// node_modules/@polkadot/types/index.js
var init_types4 = __esm({
  "node_modules/@polkadot/types/index.js"() {
    init_packageDetect10();
    init_bundle12();
  }
});

// node_modules/@polkadot/rpc-core/util/refCountDelay.js
function refCountDelay(delay2 = 1750) {
  return (source) => {
    let [state, refCount2, connection, scheduler] = [0, 0, Subscription.EMPTY, Subscription.EMPTY];
    return new Observable((ob) => {
      source.subscribe(ob);
      if (refCount2++ === 0) {
        if (state === 1) {
          scheduler.unsubscribe();
        } else {
          connection = source.connect();
        }
        state = 3;
      }
      return () => {
        if (--refCount2 === 0) {
          if (state === 2) {
            state = 0;
            scheduler.unsubscribe();
          } else {
            state = 1;
            scheduler = asapScheduler.schedule(() => {
              state = 0;
              connection.unsubscribe();
            }, delay2);
          }
        }
      };
    });
  };
}
var init_refCountDelay = __esm({
  "node_modules/@polkadot/rpc-core/util/refCountDelay.js"() {
    init_esm5();
  }
});

// node_modules/@polkadot/rpc-core/util/drr.js
function CMP(a, b2) {
  return stringify({ t: a }) === stringify({ t: b2 });
}
function ERR(error) {
  throw error;
}
function NOOP() {
}
function drr({ delay: delay2, skipChange = false, skipTimeout = false } = {}) {
  return (source$) => source$.pipe(
    catchError(ERR),
    skipChange ? tap(NOOP) : distinctUntilChanged(CMP),
    // eslint-disable-next-line deprecation/deprecation
    publishReplay(1),
    skipTimeout ? refCount() : refCountDelay(delay2)
  );
}
var init_drr = __esm({
  "node_modules/@polkadot/rpc-core/util/drr.js"() {
    init_esm5();
    init_util();
    init_refCountDelay();
  }
});

// node_modules/@polkadot/rpc-core/util/memo.js
function memo(instanceId, inner) {
  const options = { getInstanceId: () => instanceId };
  const cached = memoize((...params) => new Observable((observer) => {
    const subscription = inner(...params).subscribe(observer);
    return () => {
      cached.unmemoize(...params);
      subscription.unsubscribe();
    };
  }).pipe(drr()), options);
  return cached;
}
var init_memo = __esm({
  "node_modules/@polkadot/rpc-core/util/memo.js"() {
    init_esm5();
    init_util();
    init_drr();
  }
});

// node_modules/@polkadot/rpc-core/util/index.js
var init_util10 = __esm({
  "node_modules/@polkadot/rpc-core/util/index.js"() {
    init_drr();
    init_memo();
    init_refCountDelay();
  }
});

// node_modules/@polkadot/rpc-core/bundle.js
function logErrorMessage(method, { noErrorLog, params, type }, error) {
  if (noErrorLog) {
    return;
  }
  l12.error(`${method}(${params.map(({ isOptional, name, type: type2 }) => `${name}${isOptional ? "?" : ""}: ${type2}`).join(", ")}): ${type}:: ${error.message}`);
}
function isTreatAsHex(key) {
  return ["0x3a636f6465"].includes(key.toHex());
}
var l12, EMPTY_META, RpcCore;
var init_bundle13 = __esm({
  "node_modules/@polkadot/rpc-core/bundle.js"() {
    init_esm5();
    init_types4();
    init_util();
    init_util10();
    init_packageInfo2();
    init_util10();
    l12 = logger("rpc-core");
    EMPTY_META = {
      fallback: void 0,
      modifier: { isOptional: true },
      type: {
        asMap: { linked: { isTrue: false } },
        isMap: false
      }
    };
    RpcCore = class {
      __internal__instanceId;
      __internal__isPedantic;
      __internal__registryDefault;
      __internal__storageCache = /* @__PURE__ */ new Map();
      __internal__storageCacheHits = 0;
      __internal__storageCacheSize = 0;
      __internal__getBlockRegistry;
      __internal__getBlockHash;
      mapping = /* @__PURE__ */ new Map();
      provider;
      sections = [];
      /**
       * @constructor
       * Default constructor for the core RPC handler
       * @param  {ProviderInterface} provider An API provider using any of the supported providers (HTTP, SC or WebSocket)
       */
      constructor(instanceId, registry, { isPedantic = true, provider, userRpc = {} }) {
        if (!provider || !isFunction(provider.send)) {
          throw new Error("Expected Provider to API create");
        }
        this.__internal__instanceId = instanceId;
        this.__internal__isPedantic = isPedantic;
        this.__internal__registryDefault = registry;
        this.provider = provider;
        const sectionNames = Object.keys(jsonrpc_default);
        this.sections.push(...sectionNames);
        this.addUserInterfaces(userRpc);
      }
      /**
       * @description Returns the connected status of a provider
       */
      get isConnected() {
        return this.provider.isConnected;
      }
      /**
       * @description Manually connect from the attached provider
       */
      connect() {
        return this.provider.connect();
      }
      /**
       * @description Manually disconnect from the attached provider
       */
      disconnect() {
        return this.provider.disconnect();
      }
      /**
       * @description Returns the underlying core stats, including those from teh provider
       */
      get stats() {
        const stats = this.provider.stats;
        return stats ? {
          ...stats,
          core: {
            cacheHits: this.__internal__storageCacheHits,
            cacheSize: this.__internal__storageCacheSize
          }
        } : void 0;
      }
      /**
       * @description Sets a registry swap (typically from Api)
       */
      setRegistrySwap(registrySwap) {
        this.__internal__getBlockRegistry = memoize(registrySwap, {
          getInstanceId: () => this.__internal__instanceId
        });
      }
      /**
       * @description Sets a function to resolve block hash from block number
       */
      setResolveBlockHash(resolveBlockHash) {
        this.__internal__getBlockHash = memoize(resolveBlockHash, {
          getInstanceId: () => this.__internal__instanceId
        });
      }
      addUserInterfaces(userRpc) {
        this.sections.push(...Object.keys(userRpc).filter((k2) => !this.sections.includes(k2)));
        for (let s = 0, scount = this.sections.length; s < scount; s++) {
          const section2 = this.sections[s];
          const defs = objectSpread({}, jsonrpc_default[section2], userRpc[section2]);
          const methods = Object.keys(defs);
          for (let m = 0, mcount = methods.length; m < mcount; m++) {
            const method = methods[m];
            const def = defs[method];
            const jsonrpc2 = def.endpoint || `${section2}_${method}`;
            if (!this.mapping.has(jsonrpc2)) {
              const isSubscription2 = !!def.pubsub;
              if (!this[section2]) {
                this[section2] = {};
              }
              this.mapping.set(jsonrpc2, objectSpread({}, def, { isSubscription: isSubscription2, jsonrpc: jsonrpc2, method, section: section2 }));
              lazyMethod(this[section2], method, () => isSubscription2 ? this._createMethodSubscribe(section2, method, def) : this._createMethodSend(section2, method, def));
            }
          }
        }
      }
      _memomize(creator, def) {
        const memoOpts = { getInstanceId: () => this.__internal__instanceId };
        const memoized2 = memoize(creator(true), memoOpts);
        memoized2.raw = memoize(creator(false), memoOpts);
        memoized2.meta = def;
        return memoized2;
      }
      _formatResult(isScale, registry, blockHash, method, def, params, result) {
        return isScale ? this._formatOutput(registry, blockHash, method, def, params, result) : result;
      }
      _createMethodSend(section2, method, def) {
        const rpcName = def.endpoint || `${section2}_${method}`;
        const hashIndex = def.params.findIndex(({ isHistoric }) => isHistoric);
        let memoized2 = null;
        const callWithRegistry = async (isScale, values) => {
          const blockId = hashIndex === -1 ? null : values[hashIndex];
          const blockHash = blockId && def.params[hashIndex].type === "BlockNumber" ? await this.__internal__getBlockHash?.(blockId) : blockId;
          const { registry } = isScale && blockHash && this.__internal__getBlockRegistry ? await this.__internal__getBlockRegistry(u8aToU8a(blockHash)) : { registry: this.__internal__registryDefault };
          const params = this._formatParams(registry, null, def, values);
          const result = await this.provider.send(rpcName, params.map((p) => p.toJSON()), !!blockHash);
          return this._formatResult(isScale, registry, blockHash, method, def, params, result);
        };
        const creator = (isScale) => (...values) => {
          const isDelayed = isScale && hashIndex !== -1 && !!values[hashIndex];
          return new Observable((observer) => {
            callWithRegistry(isScale, values).then((value) => {
              observer.next(value);
              observer.complete();
            }).catch((error) => {
              logErrorMessage(method, def, error);
              observer.error(error);
              observer.complete();
            });
            return () => {
              if (isScale) {
                memoized2?.unmemoize(...values);
              } else {
                memoized2?.raw.unmemoize(...values);
              }
            };
          }).pipe(
            // eslint-disable-next-line deprecation/deprecation
            publishReplay(1),
            // create a Replay(1)
            isDelayed ? refCountDelay() : refCount()
          );
        };
        memoized2 = this._memomize(creator, def);
        return memoized2;
      }
      // create a subscriptor, it subscribes once and resolves with the id as subscribe
      _createSubscriber({ paramsJson, subName, subType, update }, errorHandler) {
        return new Promise((resolve, reject) => {
          this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch((error) => {
            errorHandler(error);
            reject(error);
          });
        });
      }
      _createMethodSubscribe(section2, method, def) {
        const [updateType, subMethod, unsubMethod] = def.pubsub;
        const subName = `${section2}_${subMethod}`;
        const unsubName = `${section2}_${unsubMethod}`;
        const subType = `${section2}_${updateType}`;
        let memoized2 = null;
        const creator = (isScale) => (...values) => {
          return new Observable((observer) => {
            let subscriptionPromise = Promise.resolve(null);
            const registry = this.__internal__registryDefault;
            const errorHandler = (error) => {
              logErrorMessage(method, def, error);
              observer.error(error);
            };
            try {
              const params = this._formatParams(registry, null, def, values);
              const update = (error, result) => {
                if (error) {
                  logErrorMessage(method, def, error);
                  return;
                }
                try {
                  observer.next(this._formatResult(isScale, registry, null, method, def, params, result));
                } catch (error2) {
                  observer.error(error2);
                }
              };
              subscriptionPromise = this._createSubscriber({ paramsJson: params.map((p) => p.toJSON()), subName, subType, update }, errorHandler);
            } catch (error) {
              errorHandler(error);
            }
            return () => {
              if (isScale) {
                memoized2?.unmemoize(...values);
              } else {
                memoized2?.raw.unmemoize(...values);
              }
              subscriptionPromise.then((subscriptionId) => isNull(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch((error) => logErrorMessage(method, def, error));
            };
          }).pipe(drr());
        };
        memoized2 = this._memomize(creator, def);
        return memoized2;
      }
      _formatParams(registry, blockHash, def, inputs) {
        const count2 = inputs.length;
        const reqCount = def.params.filter(({ isOptional }) => !isOptional).length;
        if (count2 < reqCount || count2 > def.params.length) {
          throw new Error(`Expected ${def.params.length} parameters${reqCount === def.params.length ? "" : ` (${def.params.length - reqCount} optional)`}, ${count2} found instead`);
        }
        const params = new Array(count2);
        for (let i = 0; i < count2; i++) {
          params[i] = registry.createTypeUnsafe(def.params[i].type, [inputs[i]], { blockHash });
        }
        return params;
      }
      _formatOutput(registry, blockHash, method, rpc18, params, result) {
        if (rpc18.type === "StorageData") {
          const key = params[0];
          return this._formatStorageData(registry, blockHash, key, result);
        } else if (rpc18.type === "StorageChangeSet") {
          const keys2 = params[0];
          return keys2 ? this._formatStorageSet(registry, result.block, keys2, result.changes) : registry.createType("StorageChangeSet", result);
        } else if (rpc18.type === "Vec<StorageChangeSet>") {
          const jsonSet = result;
          const count2 = jsonSet.length;
          const mapped = new Array(count2);
          for (let i = 0; i < count2; i++) {
            const { block, changes } = jsonSet[i];
            mapped[i] = [
              registry.createType("BlockHash", block),
              this._formatStorageSet(registry, block, params[0], changes)
            ];
          }
          return method === "queryStorageAt" ? mapped[0][1] : mapped;
        }
        return registry.createTypeUnsafe(rpc18.type, [result], { blockHash });
      }
      _formatStorageData(registry, blockHash, key, value) {
        const isEmpty2 = isNull(value);
        const input = isEmpty2 ? null : isTreatAsHex(key) ? value : u8aToU8a(value);
        return this._newType(registry, blockHash, key, input, isEmpty2);
      }
      _formatStorageSet(registry, blockHash, keys2, changes) {
        const count2 = keys2.length;
        const withCache = count2 !== 1;
        const values = new Array(count2);
        for (let i = 0; i < count2; i++) {
          values[i] = this._formatStorageSetEntry(registry, blockHash, keys2[i], changes, withCache, i);
        }
        return values;
      }
      _formatStorageSetEntry(registry, blockHash, key, changes, withCache, entryIndex) {
        const hexKey = key.toHex();
        const found = changes.find(([key2]) => key2 === hexKey);
        const isNotFound = isUndefined(found);
        if (isNotFound && withCache) {
          const cached = this.__internal__storageCache.get(hexKey);
          if (cached) {
            this.__internal__storageCacheHits++;
            return cached;
          }
        }
        const value = isNotFound ? null : found[1];
        const isEmpty2 = isNull(value);
        const input = isEmpty2 || isTreatAsHex(key) ? value : u8aToU8a(value);
        const codec = this._newType(registry, blockHash, key, input, isEmpty2, entryIndex);
        this.__internal__storageCache.set(hexKey, codec);
        this.__internal__storageCacheSize++;
        return codec;
      }
      _newType(registry, blockHash, key, input, isEmpty2, entryIndex = -1) {
        const type = key.outputType || "Raw";
        const meta = key.meta || EMPTY_META;
        const entryNum = entryIndex === -1 ? "" : ` entry ${entryIndex}:`;
        try {
          return registry.createTypeUnsafe(type, [
            isEmpty2 ? meta.fallback ? type.includes("Linkage<") ? u8aConcat(hexToU8a(meta.fallback.toHex()), new Uint8Array(2)) : hexToU8a(meta.fallback.toHex()) : void 0 : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [input], { blockHash, isPedantic: this.__internal__isPedantic }) : input
          ], { blockHash, isFallback: isEmpty2 && !!meta.fallback, isOptional: meta.modifier.isOptional, isPedantic: this.__internal__isPedantic && !meta.modifier.isOptional });
        } catch (error) {
          throw new Error(`Unable to decode storage ${key.section || "unknown"}.${key.method || "unknown"}:${entryNum}: ${error.message}`);
        }
      }
    };
  }
});

// node_modules/@polkadot/rpc-core/index.js
var init_rpc_core = __esm({
  "node_modules/@polkadot/rpc-core/index.js"() {
    init_packageDetect9();
    init_bundle13();
  }
});

// node_modules/@polkadot/api-derive/util/approvalFlagsToBools.js
var init_approvalFlagsToBools = __esm({
  "node_modules/@polkadot/api-derive/util/approvalFlagsToBools.js"() {
  }
});

// node_modules/@polkadot/api-derive/util/blockNumber.js
function unwrapBlockNumber(hdr) {
  return isCompact(hdr.number) ? hdr.number.unwrap() : hdr.number;
}
var init_blockNumber = __esm({
  "node_modules/@polkadot/api-derive/util/blockNumber.js"() {
    init_util();
  }
});

// node_modules/@polkadot/api-derive/util/cacheImpl.js
var deriveNoopCache;
var init_cacheImpl = __esm({
  "node_modules/@polkadot/api-derive/util/cacheImpl.js"() {
    deriveNoopCache = {
      del: () => void 0,
      forEach: () => void 0,
      get: () => void 0,
      set: (_2, value) => value
    };
  }
});

// node_modules/@polkadot/api-derive/util/cache.js
function wrapCache(keyStart, cache) {
  return {
    del: (partial) => cache.del(`${keyStart}${partial}`),
    forEach: cache.forEach,
    get: (partial) => {
      const key = `${keyStart}${partial}`;
      const cached = cache.get(key);
      if (cached) {
        cached.x = Date.now();
        cache.set(key, cached);
        return cached.v;
      }
      return void 0;
    },
    set: (partial, v3) => {
      cache.set(`${keyStart}${partial}`, { v: v3, x: Date.now() });
    }
  };
}
function clearCache(cache) {
  const now = Date.now();
  const all3 = [];
  cache.forEach((key, { x }) => {
    now - x > CHACHE_EXPIRY && all3.push(key);
  });
  all3.forEach((key) => cache.del(key));
}
function setDeriveCache(prefix2 = "", cache) {
  deriveCache = cache ? wrapCache(`derive:${prefix2}:`, cache) : deriveNoopCache;
  if (cache) {
    clearCache(cache);
  }
}
var CHACHE_EXPIRY, deriveCache;
var init_cache = __esm({
  "node_modules/@polkadot/api-derive/util/cache.js"() {
    init_cacheImpl();
    CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1e3);
    setDeriveCache();
  }
});

// node_modules/@polkadot/api-derive/util/first.js
function firstObservable(obs) {
  return obs.pipe(map2(([a]) => a));
}
function firstMemo(fn) {
  return (instanceId, api) => memo(instanceId, (...args) => firstObservable(fn(api, ...args)));
}
var init_first2 = __esm({
  "node_modules/@polkadot/api-derive/util/first.js"() {
    init_esm5();
    init_rpc_core();
  }
});

// node_modules/@polkadot/api-derive/util/lazy.js
function lazyDeriveSection(result, section2, getKeys2, creator) {
  lazyMethod(result, section2, () => lazyMethods({}, getKeys2(section2), (method) => creator(section2, method)));
}
var init_lazy3 = __esm({
  "node_modules/@polkadot/api-derive/util/lazy.js"() {
    init_util();
  }
});

// node_modules/@polkadot/api-derive/util/index.js
var init_util11 = __esm({
  "node_modules/@polkadot/api-derive/util/index.js"() {
    init_rpc_core();
    init_approvalFlagsToBools();
    init_blockNumber();
    init_cache();
    init_cacheImpl();
    init_first2();
    init_lazy3();
  }
});

// node_modules/@polkadot/api-derive/accounts/accountId.js
function accountId(instanceId, api) {
  return memo(instanceId, (address) => {
    const decoded = isU8a(address) ? address : decodeAddress((address || "").toString());
    if (decoded.length > 8) {
      return of(api.registry.createType("AccountId", decoded));
    }
    const accountIndex = api.registry.createType("AccountIndex", decoded);
    return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map2((a) => assertReturn(a, "Unable to retrieve accountId")));
  });
}
var init_accountId = __esm({
  "node_modules/@polkadot/api-derive/accounts/accountId.js"() {
    init_esm5();
    init_util();
    init_util_crypto();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/accounts/flags.js
function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
  const addrStr = address?.toString();
  const isIncluded = (id) => id.toString() === addrStr;
  return {
    isCouncil: (electionsMembers?.map((r) => Array.isArray(r) ? r[0] : r.who) || councilMembers || []).some(isIncluded),
    isSociety: (societyMembers || []).some(isIncluded),
    isSudo: sudoKey?.toString() === addrStr,
    isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
  };
}
function _flags(instanceId, api) {
  return memo(instanceId, () => {
    const results = [void 0, [], [], [], void 0];
    const calls = [
      (api.query.elections || api.query["phragmenElection"] || api.query["electionsPhragmen"])?.members,
      api.query.council?.members,
      api.query.technicalCommittee?.members,
      api.query.society?.members,
      api.query.sudo?.key
    ];
    const filtered = calls.filter((c) => c);
    if (!filtered.length) {
      return of(results);
    }
    return api.queryMulti(filtered).pipe(map2((values) => {
      let resultIndex = -1;
      for (let i = 0, count2 = calls.length; i < count2; i++) {
        if (isFunction(calls[i])) {
          results[i] = values[++resultIndex];
        }
      }
      return results;
    }));
  });
}
function flags(instanceId, api) {
  return memo(instanceId, (address) => api.derive.accounts._flags().pipe(map2((r) => parseFlags(address, r))));
}
var init_flags = __esm({
  "node_modules/@polkadot/api-derive/accounts/flags.js"() {
    init_esm5();
    init_util();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/accounts/idAndIndex.js
function idAndIndex(instanceId, api) {
  return memo(instanceId, (address) => {
    try {
      const decoded = isU8a(address) ? address : decodeAddress((address || "").toString());
      if (decoded.length > 8) {
        const accountId2 = api.registry.createType("AccountId", decoded);
        return api.derive.accounts.idToIndex(accountId2).pipe(map2((accountIndex2) => [accountId2, accountIndex2]));
      }
      const accountIndex = api.registry.createType("AccountIndex", decoded);
      return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map2((accountId2) => [accountId2, accountIndex]));
    } catch {
      return of([void 0, void 0]);
    }
  });
}
var init_idAndIndex = __esm({
  "node_modules/@polkadot/api-derive/accounts/idAndIndex.js"() {
    init_esm5();
    init_util();
    init_util_crypto();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/accounts/identity.js
function dataAsString(data) {
  return data.isRaw ? u8aToString(data.asRaw.toU8a(true)) : data.isNone ? void 0 : data.toHex();
}
function extractOther(additional) {
  return additional.reduce((other, [_key, _value]) => {
    const key = dataAsString(_key);
    const value = dataAsString(_value);
    if (key && value) {
      other[key] = value;
    }
    return other;
  }, {});
}
function identityCompat(identityOfOpt) {
  const identity4 = identityOfOpt.unwrap();
  return Array.isArray(identity4) ? identity4[0] : identity4;
}
function extractIdentity(identityOfOpt, superOf) {
  if (!identityOfOpt?.isSome) {
    return { judgements: [] };
  }
  const { info: info6, judgements } = identityCompat(identityOfOpt);
  const topDisplay = dataAsString(info6.display);
  return {
    display: superOf && dataAsString(superOf[1]) || topDisplay,
    displayParent: superOf && topDisplay,
    email: dataAsString(info6.email),
    image: dataAsString(info6.image),
    judgements,
    legal: dataAsString(info6.legal),
    other: extractOther(info6.additional),
    parent: superOf?.[0],
    pgp: info6.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
    riot: dataAsString(info6.riot),
    twitter: dataAsString(info6.twitter),
    web: dataAsString(info6.web)
  };
}
function getParent(api, identityOfOpt, superOfOpt) {
  if (identityOfOpt?.isSome) {
    return of([identityOfOpt, void 0]);
  } else if (superOfOpt?.isSome) {
    const superOf = superOfOpt.unwrap();
    return combineLatest([
      api.derive.accounts._identity(superOf[0]).pipe(map2(([info6]) => info6)),
      of(superOf)
    ]);
  }
  return of([void 0, void 0]);
}
function _identity(instanceId, api) {
  return memo(instanceId, (accountId2) => accountId2 && api.query.identity?.identityOf ? combineLatest([
    api.query.identity.identityOf(accountId2),
    api.query.identity.superOf(accountId2)
  ]) : of([void 0, void 0]));
}
function identity3(instanceId, api) {
  return memo(instanceId, (accountId2) => api.derive.accounts._identity(accountId2).pipe(switchMap(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), map2(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
}
function hasIdentityMulti(instanceId, api) {
  return memo(instanceId, (accountIds) => api.query.identity?.identityOf ? combineLatest([
    api.query.identity.identityOf.multi(accountIds),
    api.query.identity.superOf.multi(accountIds)
  ]).pipe(map2(([identities, supers]) => identities.map((identityOfOpt, index) => {
    const superOfOpt = supers[index];
    const parentId = superOfOpt && superOfOpt.isSome ? superOfOpt.unwrap()[0].toString() : void 0;
    let display;
    if (identityOfOpt && identityOfOpt.isSome) {
      const value = dataAsString(identityCompat(identityOfOpt).info.display);
      if (value && !isHex(value)) {
        display = value;
      }
    }
    return { display, hasIdentity: !!(display || parentId), parentId };
  }))) : of(accountIds.map(() => ({ hasIdentity: false }))));
}
var UNDEF_HEX, hasIdentity;
var init_identity2 = __esm({
  "node_modules/@polkadot/api-derive/accounts/identity.js"() {
    init_esm5();
    init_util();
    init_util11();
    UNDEF_HEX = { toHex: () => void 0 };
    hasIdentity = firstMemo((api, accountId2) => api.derive.accounts.hasIdentityMulti([accountId2]));
  }
});

// node_modules/@polkadot/api-derive/accounts/idToIndex.js
function idToIndex(instanceId, api) {
  return memo(instanceId, (accountId2) => api.derive.accounts.indexes().pipe(map2((indexes3) => indexes3[accountId2.toString()])));
}
var init_idToIndex = __esm({
  "node_modules/@polkadot/api-derive/accounts/idToIndex.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/accounts/indexes.js
function queryAccounts(api) {
  return api.query.indices.accounts.entries().pipe(map2((entries) => entries.reduce((indexes3, [key, idOpt]) => {
    if (idOpt.isSome) {
      indexes3[idOpt.unwrap()[0].toString()] = api.registry.createType("AccountIndex", key.args[0]);
    }
    return indexes3;
  }, {})));
}
function indexes(instanceId, api) {
  return memo(instanceId, () => indicesCache ? of(indicesCache) : (api.query.indices ? queryAccounts(api).pipe(startWith({})) : of({})).pipe(map2((indices) => {
    indicesCache = indices;
    return indices;
  })));
}
var indicesCache;
var init_indexes = __esm({
  "node_modules/@polkadot/api-derive/accounts/indexes.js"() {
    init_esm5();
    init_util11();
    indicesCache = null;
  }
});

// node_modules/@polkadot/api-derive/accounts/indexToId.js
function indexToId(instanceId, api) {
  return memo(instanceId, (accountIndex) => api.query.indices ? api.query.indices.accounts(accountIndex).pipe(map2((optResult) => optResult.unwrapOr([])[0])) : of(void 0));
}
var init_indexToId = __esm({
  "node_modules/@polkadot/api-derive/accounts/indexToId.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/accounts/info.js
function retrieveNick(api, accountId2) {
  return (accountId2 && api.query["nicks"]?.["nameOf"] ? api.query["nicks"]["nameOf"](accountId2) : of(void 0)).pipe(map2((nameOf) => nameOf?.isSome ? u8aToString(nameOf.unwrap()[0]).substring(0, api.consts["nicks"]["maxLength"].toNumber()) : void 0));
}
function info(instanceId, api) {
  return memo(instanceId, (address) => api.derive.accounts.idAndIndex(address).pipe(switchMap(([accountId2, accountIndex]) => combineLatest([
    of({ accountId: accountId2, accountIndex }),
    api.derive.accounts.identity(accountId2),
    retrieveNick(api, accountId2)
  ])), map2(([{ accountId: accountId2, accountIndex }, identity4, nickname]) => ({
    accountId: accountId2,
    accountIndex,
    identity: identity4,
    nickname
  }))));
}
var init_info = __esm({
  "node_modules/@polkadot/api-derive/accounts/info.js"() {
    init_esm5();
    init_util();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/accounts/index.js
var accounts_exports = {};
__export(accounts_exports, {
  _flags: () => _flags,
  _identity: () => _identity,
  accountId: () => accountId,
  flags: () => flags,
  hasIdentity: () => hasIdentity,
  hasIdentityMulti: () => hasIdentityMulti,
  idAndIndex: () => idAndIndex,
  idToIndex: () => idToIndex,
  identity: () => identity3,
  indexToId: () => indexToId,
  indexes: () => indexes,
  info: () => info
});
var init_accounts = __esm({
  "node_modules/@polkadot/api-derive/accounts/index.js"() {
    init_accountId();
    init_flags();
    init_idAndIndex();
    init_identity2();
    init_idToIndex();
    init_indexes();
    init_indexToId();
    init_info();
  }
});

// node_modules/@polkadot/api-derive/collective/helpers.js
function getInstance(api, section2) {
  const instances = api.registry.getModuleInstances(api.runtimeVersion.specName, section2);
  const name = instances?.length ? instances[0] : section2;
  return api.query[name];
}
function withSection(section2, fn) {
  return (instanceId, api) => memo(instanceId, fn(getInstance(api, section2), api, instanceId));
}
function callMethod(method, empty3) {
  return (section2) => withSection(section2, (query2) => () => isFunction(query2?.[method]) ? query2[method]() : of(empty3));
}
var init_helpers5 = __esm({
  "node_modules/@polkadot/api-derive/collective/helpers.js"() {
    init_esm5();
    init_util();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/collective/members.js
var members;
var init_members = __esm({
  "node_modules/@polkadot/api-derive/collective/members.js"() {
    init_helpers5();
    members = callMethod("members", []);
  }
});

// node_modules/@polkadot/api-derive/collective/prime.js
function prime(section2) {
  return withSection(section2, (query2) => () => isFunction(query2?.prime) ? query2.prime().pipe(map2((o) => o.unwrapOr(null))) : of(null));
}
var init_prime = __esm({
  "node_modules/@polkadot/api-derive/collective/prime.js"() {
    init_esm5();
    init_util();
    init_helpers5();
  }
});

// node_modules/@polkadot/api-derive/collective/proposals.js
function parse(api, [hashes, proposals8, votes2]) {
  return proposals8.map((o, index) => ({
    hash: api.registry.createType("Hash", hashes[index]),
    proposal: o && o.isSome ? o.unwrap() : null,
    votes: votes2[index].unwrapOr(null)
  }));
}
function _proposalsFrom(api, query2, hashes) {
  return (isFunction(query2?.proposals) && hashes.length ? combineLatest([
    of(hashes),
    // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
    // however we have had cases on Edgeware where the indices have moved around after an
    // upgrade, which results in invalid on-chain data
    query2.proposalOf.multi(hashes).pipe(catchError(() => of(hashes.map(() => null)))),
    query2.voting.multi(hashes)
  ]) : of([[], [], []])).pipe(map2((r) => parse(api, r)));
}
function hasProposals(section2) {
  return withSection(section2, (query2) => () => of(isFunction(query2?.proposals)));
}
function proposals(section2) {
  return withSection(section2, (query2, api) => () => api.derive[section2].proposalHashes().pipe(switchMap((all3) => _proposalsFrom(api, query2, all3))));
}
function proposal(section2) {
  return withSection(section2, (query2, api) => (hash2) => isFunction(query2?.proposals) ? firstObservable(_proposalsFrom(api, query2, [hash2])) : of(null));
}
var proposalCount, proposalHashes;
var init_proposals = __esm({
  "node_modules/@polkadot/api-derive/collective/proposals.js"() {
    init_esm5();
    init_util();
    init_util11();
    init_helpers5();
    proposalCount = callMethod("proposalCount", null);
    proposalHashes = callMethod("proposals", []);
  }
});

// node_modules/@polkadot/api-derive/collective/index.js
var init_collective = __esm({
  "node_modules/@polkadot/api-derive/collective/index.js"() {
    init_members();
    init_prime();
    init_proposals();
  }
});

// node_modules/@polkadot/api-derive/alliance/index.js
var alliance_exports = {};
__export(alliance_exports, {
  hasProposals: () => hasProposals2,
  members: () => members2,
  prime: () => prime2,
  proposal: () => proposal2,
  proposalCount: () => proposalCount2,
  proposalHashes: () => proposalHashes2,
  proposals: () => proposals2
});
var members2, hasProposals2, proposal2, proposalCount2, proposalHashes2, proposals2, prime2;
var init_alliance = __esm({
  "node_modules/@polkadot/api-derive/alliance/index.js"() {
    init_collective();
    members2 = members("allianceMotion");
    hasProposals2 = hasProposals("allianceMotion");
    proposal2 = proposal("allianceMotion");
    proposalCount2 = proposalCount("allianceMotion");
    proposalHashes2 = proposalHashes("allianceMotion");
    proposals2 = proposals("allianceMotion");
    prime2 = prime("allianceMotion");
  }
});

// node_modules/@polkadot/api-derive/bagsList/util.js
function getQueryInterface(api) {
  return (
    // latest substrate & polkadot
    api.query.voterList || // previous substrate
    api.query["voterBagsList"] || api.query["bagsList"]
  );
}
var init_util12 = __esm({
  "node_modules/@polkadot/api-derive/bagsList/util.js"() {
  }
});

// node_modules/@polkadot/api-derive/bagsList/get.js
function orderBags(ids, bags) {
  const sorted = ids.map((id, index) => ({
    bag: bags[index].unwrapOr(null),
    id,
    key: id.toString()
  })).sort((a, b2) => b2.id.cmp(a.id));
  const max3 = sorted.length - 1;
  return sorted.map((entry, index) => objectSpread(entry, {
    bagLower: index === max3 ? BN_ZERO : sorted[index + 1].id,
    bagUpper: entry.id,
    index
  }));
}
function _getIds(instanceId, api) {
  const query2 = getQueryInterface(api);
  return memo(instanceId, (_ids) => {
    const ids = _ids.map((id) => bnToBn(id));
    return ids.length ? query2.listBags.multi(ids).pipe(map2((bags) => orderBags(ids, bags))) : of([]);
  });
}
function all(instanceId, api) {
  const query2 = getQueryInterface(api);
  return memo(instanceId, () => query2.listBags.keys().pipe(switchMap((keys2) => api.derive.bagsList._getIds(keys2.map(({ args: [id] }) => id))), map2((list) => list.filter(({ bag }) => bag))));
}
function get(instanceId, api) {
  return memo(instanceId, (id) => api.derive.bagsList._getIds([bnToBn(id)]).pipe(map2((bags) => bags[0])));
}
var init_get = __esm({
  "node_modules/@polkadot/api-derive/bagsList/get.js"() {
    init_esm5();
    init_util();
    init_util11();
    init_util12();
  }
});

// node_modules/@polkadot/api-derive/bagsList/getExpanded.js
function expand2(instanceId, api) {
  return memo(instanceId, (bag) => api.derive.bagsList.listNodes(bag.bag).pipe(map2((nodes) => objectSpread({ nodes }, bag))));
}
function getExpanded(instanceId, api) {
  return memo(instanceId, (id) => api.derive.bagsList.get(id).pipe(switchMap((bag) => api.derive.bagsList.expand(bag))));
}
var init_getExpanded = __esm({
  "node_modules/@polkadot/api-derive/bagsList/getExpanded.js"() {
    init_esm5();
    init_util();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/bagsList/listNodes.js
function traverseLinks(api, head) {
  const subject = new BehaviorSubject(head);
  const query2 = getQueryInterface(api);
  return subject.pipe(
    switchMap((account3) => query2.listNodes(account3)),
    tap((node) => {
      nextTick(() => {
        node.isSome && node.value.next.isSome ? subject.next(node.unwrap().next.unwrap()) : subject.complete();
      });
    }),
    toArray(),
    // toArray since we want to startSubject to be completed
    map2((all3) => all3.map((o) => o.unwrap()))
  );
}
function listNodes(instanceId, api) {
  return memo(instanceId, (bag) => bag && bag.head.isSome ? traverseLinks(api, bag.head.unwrap()) : of([]));
}
var init_listNodes = __esm({
  "node_modules/@polkadot/api-derive/bagsList/listNodes.js"() {
    init_esm5();
    init_util();
    init_util11();
    init_util12();
  }
});

// node_modules/@polkadot/api-derive/bagsList/index.js
var bagsList_exports = {};
__export(bagsList_exports, {
  _getIds: () => _getIds,
  all: () => all,
  expand: () => expand2,
  get: () => get,
  getExpanded: () => getExpanded,
  listNodes: () => listNodes
});
var init_bagsList = __esm({
  "node_modules/@polkadot/api-derive/bagsList/index.js"() {
    init_get();
    init_getExpanded();
    init_listNodes();
  }
});

// node_modules/@polkadot/api-derive/balances/all.js
function calcLocked(api, bestNumber2, locks2) {
  let lockedBalance = api.registry.createType("Balance");
  let lockedBreakdown = [];
  let vestingLocked = api.registry.createType("Balance");
  let allLocked = false;
  if (Array.isArray(locks2)) {
    lockedBreakdown = locks2.filter(({ until }) => !until || bestNumber2 && until.gt(bestNumber2));
    allLocked = lockedBreakdown.some(({ amount }) => amount && amount.isMax());
    vestingLocked = api.registry.createType("Balance", lockedBreakdown.filter(({ id }) => id.eq(VESTING_ID)).reduce((result, { amount }) => result.iadd(amount), new import_bn.default(0)));
    const notAll = lockedBreakdown.filter(({ amount }) => amount && !amount.isMax());
    if (notAll.length) {
      lockedBalance = api.registry.createType("Balance", bnMax(...notAll.map(({ amount }) => amount)));
    }
  }
  return { allLocked, lockedBalance, lockedBreakdown, vestingLocked };
}
function calcShared(api, bestNumber2, data, locks2) {
  const { allLocked, lockedBalance, lockedBreakdown, vestingLocked } = calcLocked(api, bestNumber2, locks2);
  return objectSpread({}, data, {
    availableBalance: api.registry.createType("Balance", allLocked ? 0 : bnMax(new import_bn.default(0), data?.freeBalance ? data.freeBalance.sub(lockedBalance) : new import_bn.default(0))),
    lockedBalance,
    lockedBreakdown,
    vestingLocked
  });
}
function calcVesting(bestNumber2, shared, _vesting) {
  const vesting = _vesting || [];
  const isVesting = !shared.vestingLocked.isZero();
  const vestedBalances = vesting.map(({ locked, perBlock, startingBlock }) => bestNumber2.gt(startingBlock) ? bnMin(locked, perBlock.mul(bestNumber2.sub(startingBlock))) : BN_ZERO);
  const vestedBalance = vestedBalances.reduce((all3, value) => all3.iadd(value), new import_bn.default(0));
  const vestingTotal = vesting.reduce((all3, { locked }) => all3.iadd(locked), new import_bn.default(0));
  return {
    isVesting,
    vestedBalance,
    vestedClaimable: isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : BN_ZERO,
    vesting: vesting.map(({ locked, perBlock, startingBlock }, index) => ({
      endBlock: locked.div(perBlock).iadd(startingBlock),
      locked,
      perBlock,
      startingBlock,
      vested: vestedBalances[index]
    })).filter(({ locked }) => !locked.isZero()),
    vestingTotal
  };
}
function calcBalances(api, result) {
  const [data, [vesting, allLocks, namedReserves], bestNumber2] = result;
  const shared = calcShared(api, bestNumber2, data, allLocks[0]);
  return objectSpread(shared, calcVesting(bestNumber2, shared, vesting), {
    accountId: data.accountId,
    accountNonce: data.accountNonce,
    additional: allLocks.slice(1).map((l17, index) => calcShared(api, bestNumber2, data.additional[index], l17)),
    namedReserves
  });
}
function queryOld(api, accountId2) {
  return combineLatest([
    api.query.balances.locks(accountId2),
    api.query.balances["vesting"](accountId2)
  ]).pipe(map2(([locks2, optVesting]) => {
    let vestingNew = null;
    if (optVesting.isSome) {
      const { offset: locked, perBlock, startingBlock } = optVesting.unwrap();
      vestingNew = api.registry.createType("VestingInfo", { locked, perBlock, startingBlock });
    }
    return [
      vestingNew ? [vestingNew] : null,
      [locks2],
      []
    ];
  }));
}
function createCalls(calls) {
  return [
    calls.map((c) => !c),
    calls.filter(isNonNullable)
  ];
}
function queryCurrent(api, accountId2, balanceInstances = ["balances"]) {
  const [lockEmpty, lockQueries] = createCalls(balanceInstances.map((m) => api.derive[m]?.customLocks || api.query[m]?.locks));
  const [reserveEmpty, reserveQueries] = createCalls(balanceInstances.map((m) => api.query[m]?.reserves));
  return combineLatest([
    api.query.vesting?.vesting ? api.query.vesting.vesting(accountId2) : of(api.registry.createType("Option<VestingInfo>")),
    lockQueries.length ? combineLatest(lockQueries.map((c) => c(accountId2))) : of([]),
    reserveQueries.length ? combineLatest(reserveQueries.map((c) => c(accountId2))) : of([])
  ]).pipe(map2(([opt, locks2, reserves]) => {
    let offsetLock = -1;
    let offsetReserve = -1;
    const vesting = opt.unwrapOr(null);
    return [
      vesting ? Array.isArray(vesting) ? vesting : [vesting] : null,
      lockEmpty.map((e) => e ? api.registry.createType("Vec<BalanceLock>") : locks2[++offsetLock]),
      reserveEmpty.map((e) => e ? api.registry.createType("Vec<PalletBalancesReserveData>") : reserves[++offsetReserve])
    ];
  }));
}
function all2(instanceId, api) {
  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
  return memo(instanceId, (address) => combineLatest([
    api.derive.balances.account(address),
    isFunction(api.query.system?.account) || isFunction(api.query.balances?.account) ? queryCurrent(api, address, balanceInstances) : queryOld(api, address)
  ]).pipe(switchMap(([account3, locks2]) => combineLatest([
    of(account3),
    of(locks2),
    api.derive.chain.bestNumber()
  ])), map2((result) => calcBalances(api, result))));
}
var VESTING_ID, isNonNullable;
var init_all = __esm({
  "node_modules/@polkadot/api-derive/balances/all.js"() {
    init_esm5();
    init_util();
    init_util11();
    VESTING_ID = "0x76657374696e6720";
    isNonNullable = (nullable) => !!nullable;
  }
});

// node_modules/@polkadot/api-derive/balances/account.js
function zeroBalance(api) {
  return api.registry.createType("Balance");
}
function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
  const votingBalance2 = api.registry.createType("Balance", freeBalance.toBn());
  return {
    freeBalance,
    frozenFee,
    frozenMisc,
    reservedBalance,
    votingBalance: votingBalance2
  };
}
function calcBalances2(api, [accountId2, [accountNonce, [primary, ...additional]]]) {
  return objectSpread({
    accountId: accountId2,
    accountNonce,
    additional: additional.map((b2) => getBalance(api, b2))
  }, getBalance(api, primary));
}
function queryBalancesFree(api, accountId2) {
  return combineLatest([
    api.query.balances["freeBalance"](accountId2),
    api.query.balances["reservedBalance"](accountId2),
    api.query.system["accountNonce"](accountId2)
  ]).pipe(map2(([freeBalance, reservedBalance, accountNonce]) => [
    accountNonce,
    [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]
  ]));
}
function queryNonceOnly(api, accountId2) {
  const fill = (nonce) => [
    nonce,
    [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
  ];
  return isFunction(api.query.system.account) ? api.query.system.account(accountId2).pipe(map2(({ nonce }) => fill(nonce))) : isFunction(api.query.system["accountNonce"]) ? api.query.system["accountNonce"](accountId2).pipe(map2((nonce) => fill(nonce))) : of(fill(api.registry.createType("Index")));
}
function queryBalancesAccount(api, accountId2, modules = ["balances"]) {
  const balances = modules.map((m) => api.derive[m]?.customAccount || api.query[m]?.account).filter((q2) => isFunction(q2));
  const extract = (nonce, data) => [
    nonce,
    data.map(({ feeFrozen, free, miscFrozen, reserved }) => [free, reserved, feeFrozen, miscFrozen])
  ];
  return balances.length ? isFunction(api.query.system.account) ? combineLatest([
    api.query.system.account(accountId2),
    ...balances.map((c) => c(accountId2))
  ]).pipe(map2(([{ nonce }, ...balances2]) => extract(nonce, balances2))) : combineLatest([
    api.query.system["accountNonce"](accountId2),
    ...balances.map((c) => c(accountId2))
  ]).pipe(map2(([nonce, ...balances2]) => extract(nonce, balances2))) : queryNonceOnly(api, accountId2);
}
function querySystemAccount(api, accountId2) {
  return api.query.system.account(accountId2).pipe(map2((infoOrTuple) => {
    const data = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
    const nonce = infoOrTuple.nonce || infoOrTuple[0];
    if (!data || data.isEmpty) {
      return [
        nonce,
        [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
      ];
    }
    const { feeFrozen, free, miscFrozen, reserved } = data;
    return [
      nonce,
      [[free, reserved, feeFrozen, miscFrozen]]
    ];
  }));
}
function account(instanceId, api) {
  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
  const nonDefaultBalances = balanceInstances && balanceInstances[0] !== "balances";
  return memo(instanceId, (address) => api.derive.accounts.accountId(address).pipe(switchMap((accountId2) => accountId2 ? combineLatest([
    of(accountId2),
    nonDefaultBalances ? queryBalancesAccount(api, accountId2, balanceInstances) : isFunction(api.query.system?.account) ? querySystemAccount(api, accountId2) : isFunction(api.query.balances?.account) ? queryBalancesAccount(api, accountId2) : isFunction(api.query.balances?.["freeBalance"]) ? queryBalancesFree(api, accountId2) : queryNonceOnly(api, accountId2)
  ]) : of([api.registry.createType("AccountId"), [
    api.registry.createType("Index"),
    [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
  ]])), map2((result) => calcBalances2(api, result))));
}
var init_account = __esm({
  "node_modules/@polkadot/api-derive/balances/account.js"() {
    init_esm5();
    init_util();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/balances/votingBalances.js
function votingBalances(instanceId, api) {
  return memo(instanceId, (addresses) => !addresses?.length ? of([]) : combineLatest(addresses.map((accountId2) => api.derive.balances.account(accountId2))));
}
var init_votingBalances = __esm({
  "node_modules/@polkadot/api-derive/balances/votingBalances.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/balances/index.js
var balances_exports = {};
__export(balances_exports, {
  account: () => account,
  all: () => all2,
  votingBalance: () => votingBalance,
  votingBalances: () => votingBalances
});
var votingBalance;
var init_balances = __esm({
  "node_modules/@polkadot/api-derive/balances/index.js"() {
    init_all();
    init_account();
    init_votingBalances();
    votingBalance = all2;
  }
});

// node_modules/@polkadot/api-derive/bounties/helpers/filterBountyProposals.js
function filterBountiesProposals(api, allProposals) {
  const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
  const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
  return allProposals.filter((proposal6) => bountyProposalCalls.find((bountyCall) => proposal6.proposal && bountyCall.is(proposal6.proposal)));
}
var init_filterBountyProposals = __esm({
  "node_modules/@polkadot/api-derive/bounties/helpers/filterBountyProposals.js"() {
  }
});

// node_modules/@polkadot/api-derive/bounties/bounties.js
function parseResult([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
  const bounties2 = [];
  maybeBounties.forEach((bounty, index) => {
    if (bounty.isSome) {
      bounties2.push({
        bounty: bounty.unwrap(),
        description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
        index: ids[index],
        proposals: bountyProposals.filter((bountyProposal) => bountyProposal.proposal && ids[index].eq(bountyProposal.proposal.args[0]))
      });
    }
  });
  return bounties2;
}
function bounties(instanceId, api) {
  const bountyBase = api.query.bounties || api.query.treasury;
  return memo(instanceId, () => bountyBase.bounties ? combineLatest([
    bountyBase.bountyCount(),
    api.query.council ? api.query.council.proposalCount() : of(0)
  ]).pipe(switchMap(() => combineLatest([
    bountyBase.bounties.keys(),
    api.derive.council ? api.derive.council.proposals() : of([])
  ])), switchMap(([keys2, proposals8]) => {
    const ids = keys2.map(({ args: [id] }) => id);
    return combineLatest([
      bountyBase.bounties.multi(ids),
      bountyBase.bountyDescriptions.multi(ids),
      of(ids),
      of(filterBountiesProposals(api, proposals8))
    ]);
  }), map2(parseResult)) : of(parseResult([[], [], [], []])));
}
var init_bounties = __esm({
  "node_modules/@polkadot/api-derive/bounties/bounties.js"() {
    init_esm5();
    init_util11();
    init_filterBountyProposals();
  }
});

// node_modules/@polkadot/api-derive/bounties/index.js
var bounties_exports = {};
__export(bounties_exports, {
  bounties: () => bounties
});
var init_bounties2 = __esm({
  "node_modules/@polkadot/api-derive/bounties/index.js"() {
    init_bounties();
  }
});

// node_modules/@polkadot/api-derive/chain/util.js
function createBlockNumberDerive(fn) {
  return (instanceId, api) => memo(instanceId, () => fn(api).pipe(map2(unwrapBlockNumber)));
}
function getAuthorDetailsWithAt(header, queryAt) {
  const validators2 = queryAt.session?.validators ? queryAt.session.validators() : of(null);
  const { logs: [log] } = header.digest;
  const loggedAuthor = log && (log.isConsensus && log.asConsensus[0].isNimbus && log.asConsensus[1] || log.isPreRuntime && log.asPreRuntime[0].isNimbus && log.asPreRuntime[1]);
  if (loggedAuthor) {
    if (queryAt["authorMapping"]?.["mappingWithDeposit"]) {
      return combineLatest([
        of(header),
        validators2,
        queryAt["authorMapping"]["mappingWithDeposit"](loggedAuthor).pipe(map2((o) => o.unwrapOr({ account: null }).account))
      ]);
    }
    if (queryAt["parachainStaking"]?.["selectedCandidates"] && queryAt.session?.nextKeys) {
      const loggedHex = loggedAuthor.toHex();
      return combineLatest([
        of(header),
        validators2,
        queryAt["parachainStaking"]["selectedCandidates"]().pipe(mergeMap((selectedCandidates) => combineLatest([
          of(selectedCandidates),
          queryAt.session.nextKeys.multi(selectedCandidates).pipe(map2((nextKeys) => nextKeys.findIndex((o) => o.unwrapOrDefault().nimbus.toHex() === loggedHex)))
        ])), map2(([selectedCandidates, index]) => index === -1 ? null : selectedCandidates[index]))
      ]);
    }
  }
  return combineLatest([
    of(header),
    validators2,
    of(null)
  ]);
}
function getAuthorDetails(api, header, blockHash) {
  return api.queryAt(header.parentHash.isEmpty ? blockHash || header.hash : header.parentHash).pipe(switchMap((queryAt) => getAuthorDetailsWithAt(header, queryAt)));
}
var init_util13 = __esm({
  "node_modules/@polkadot/api-derive/chain/util.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/chain/bestNumber.js
var bestNumber;
var init_bestNumber = __esm({
  "node_modules/@polkadot/api-derive/chain/bestNumber.js"() {
    init_util13();
    bestNumber = createBlockNumberDerive((api) => api.rpc.chain.subscribeNewHeads());
  }
});

// node_modules/@polkadot/api-derive/chain/bestNumberFinalized.js
var bestNumberFinalized;
var init_bestNumberFinalized = __esm({
  "node_modules/@polkadot/api-derive/chain/bestNumberFinalized.js"() {
    init_util13();
    bestNumberFinalized = createBlockNumberDerive((api) => api.rpc.chain.subscribeFinalizedHeads());
  }
});

// node_modules/@polkadot/api-derive/chain/bestNumberLag.js
function bestNumberLag(instanceId, api) {
  return memo(instanceId, () => combineLatest([
    api.derive.chain.bestNumber(),
    api.derive.chain.bestNumberFinalized()
  ]).pipe(map2(([bestNumber2, bestNumberFinalized2]) => api.registry.createType("BlockNumber", bestNumber2.sub(bestNumberFinalized2)))));
}
var init_bestNumberLag = __esm({
  "node_modules/@polkadot/api-derive/chain/bestNumberLag.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/type/util.js
function extractAuthor(digest, sessionValidators) {
  const [citem] = digest.logs.filter((e) => e.isConsensus);
  const [pitem] = digest.logs.filter((e) => e.isPreRuntime);
  const [sitem] = digest.logs.filter((e) => e.isSeal);
  let accountId2;
  try {
    if (pitem) {
      const [engine, data] = pitem.asPreRuntime;
      accountId2 = engine.extractAuthor(data, sessionValidators);
    }
    if (!accountId2 && citem) {
      const [engine, data] = citem.asConsensus;
      accountId2 = engine.extractAuthor(data, sessionValidators);
    }
    if (!accountId2 && sitem) {
      const [engine, data] = sitem.asSeal;
      accountId2 = engine.extractAuthor(data, sessionValidators);
    }
  } catch {
  }
  return accountId2;
}
var init_util14 = __esm({
  "node_modules/@polkadot/api-derive/type/util.js"() {
  }
});

// node_modules/@polkadot/api-derive/type/HeaderExtended.js
function createHeaderExtended(registry, header, validators2, author) {
  const HeaderBase = registry.createClass("Header");
  class Implementation extends HeaderBase {
    __internal__author;
    constructor(registry2, header2, validators3, author2) {
      super(registry2, header2);
      this.__internal__author = author2 || extractAuthor(this.digest, validators3 || []);
      this.createdAtHash = header2?.createdAtHash;
    }
    /**
     * @description Convenience method, returns the author for the block
     */
    get author() {
      return this.__internal__author;
    }
  }
  return new Implementation(registry, header, validators2, author);
}
var init_HeaderExtended = __esm({
  "node_modules/@polkadot/api-derive/type/HeaderExtended.js"() {
    init_util14();
  }
});

// node_modules/@polkadot/api-derive/type/SignedBlockExtended.js
function mapExtrinsics(extrinsics, records) {
  return extrinsics.map((extrinsic, index) => {
    let dispatchError;
    let dispatchInfo;
    const events2 = records.filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index)).map(({ event }) => {
      if (event.section === "system") {
        if (event.method === "ExtrinsicSuccess") {
          dispatchInfo = event.data[0];
        } else if (event.method === "ExtrinsicFailed") {
          dispatchError = event.data[0];
          dispatchInfo = event.data[1];
        }
      }
      return event;
    });
    return { dispatchError, dispatchInfo, events: events2, extrinsic };
  });
}
function createSignedBlockExtended(registry, block, events2, validators2, author) {
  const SignedBlockBase = registry.createClass("SignedBlock");
  class Implementation extends SignedBlockBase {
    __internal__author;
    __internal__events;
    __internal__extrinsics;
    constructor(registry2, block2, events3, validators3, author2) {
      super(registry2, block2);
      this.__internal__author = author2 || extractAuthor(this.block.header.digest, validators3 || []);
      this.__internal__events = events3 || [];
      this.__internal__extrinsics = mapExtrinsics(this.block.extrinsics, this.__internal__events);
      this.createdAtHash = block2?.createdAtHash;
    }
    /**
     * @description Convenience method, returns the author for the block
     */
    get author() {
      return this.__internal__author;
    }
    /**
     * @description Convenience method, returns the events associated with the block
     */
    get events() {
      return this.__internal__events;
    }
    /**
     * @description Returns the extrinsics and their events, mapped
     */
    get extrinsics() {
      return this.__internal__extrinsics;
    }
  }
  return new Implementation(registry, block, events2, validators2, author);
}
var init_SignedBlockExtended = __esm({
  "node_modules/@polkadot/api-derive/type/SignedBlockExtended.js"() {
    init_util14();
  }
});

// node_modules/@polkadot/api-derive/type/index.js
var init_type2 = __esm({
  "node_modules/@polkadot/api-derive/type/index.js"() {
    init_HeaderExtended();
    init_SignedBlockExtended();
  }
});

// node_modules/@polkadot/api-derive/chain/getBlock.js
function getBlock(instanceId, api) {
  return memo(instanceId, (blockHash) => combineLatest([
    api.rpc.chain.getBlock(blockHash),
    api.queryAt(blockHash)
  ]).pipe(switchMap(([signedBlock, queryAt]) => combineLatest([
    of(signedBlock),
    queryAt.system.events(),
    getAuthorDetails(api, signedBlock.block.header, blockHash)
  ])), map2(([signedBlock, events2, [, validators2, author]]) => createSignedBlockExtended(events2.registry, signedBlock, events2, validators2, author))));
}
var init_getBlock = __esm({
  "node_modules/@polkadot/api-derive/chain/getBlock.js"() {
    init_esm5();
    init_type2();
    init_util11();
    init_util13();
  }
});

// node_modules/@polkadot/api-derive/chain/getBlockByNumber.js
function getBlockByNumber(instanceId, api) {
  return memo(instanceId, (blockNumber) => api.rpc.chain.getBlockHash(blockNumber).pipe(switchMap((h2) => api.derive.chain.getBlock(h2))));
}
var init_getBlockByNumber = __esm({
  "node_modules/@polkadot/api-derive/chain/getBlockByNumber.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/chain/getHeader.js
function getHeader(instanceId, api) {
  return memo(instanceId, (blockHash) => api.rpc.chain.getHeader(blockHash).pipe(switchMap((header) => getAuthorDetails(api, header, blockHash)), map2(([header, validators2, author]) => createHeaderExtended((validators2 || header).registry, header, validators2, author))));
}
var init_getHeader = __esm({
  "node_modules/@polkadot/api-derive/chain/getHeader.js"() {
    init_esm5();
    init_type2();
    init_util11();
    init_util13();
  }
});

// node_modules/@polkadot/api-derive/chain/subscribeFinalizedBlocks.js
function subscribeFinalizedBlocks(instanceId, api) {
  return memo(instanceId, () => api.derive.chain.subscribeFinalizedHeads().pipe(switchMap((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
}
var init_subscribeFinalizedBlocks = __esm({
  "node_modules/@polkadot/api-derive/chain/subscribeFinalizedBlocks.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/chain/subscribeFinalizedHeads.js
function _getHeaderRange(instanceId, api) {
  return memo(instanceId, (startHash, endHash, prev = []) => api.rpc.chain.getHeader(startHash).pipe(switchMap((header) => header.parentHash.eq(endHash) ? of([header, ...prev]) : api.derive.chain._getHeaderRange(header.parentHash, endHash, [header, ...prev]))));
}
function subscribeFinalizedHeads(instanceId, api) {
  return memo(instanceId, () => {
    let prevHash = null;
    return api.rpc.chain.subscribeFinalizedHeads().pipe(switchMap((header) => {
      const endHash = prevHash;
      const startHash = header.parentHash;
      prevHash = header.createdAtHash = header.hash;
      return endHash === null || startHash.eq(endHash) ? of(header) : api.derive.chain._getHeaderRange(startHash, endHash, [header]).pipe(switchMap((headers) => from(headers)));
    }));
  });
}
var init_subscribeFinalizedHeads = __esm({
  "node_modules/@polkadot/api-derive/chain/subscribeFinalizedHeads.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/chain/subscribeNewBlocks.js
function subscribeNewBlocks(instanceId, api) {
  return memo(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(switchMap((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
}
var init_subscribeNewBlocks = __esm({
  "node_modules/@polkadot/api-derive/chain/subscribeNewBlocks.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/chain/subscribeNewHeads.js
function subscribeNewHeads(instanceId, api) {
  return memo(instanceId, () => api.rpc.chain.subscribeNewHeads().pipe(switchMap((header) => getAuthorDetails(api, header)), map2(([header, validators2, author]) => {
    header.createdAtHash = header.hash;
    return createHeaderExtended(header.registry, header, validators2, author);
  })));
}
var init_subscribeNewHeads = __esm({
  "node_modules/@polkadot/api-derive/chain/subscribeNewHeads.js"() {
    init_esm5();
    init_type2();
    init_util11();
    init_util13();
  }
});

// node_modules/@polkadot/api-derive/chain/index.js
var chain_exports = {};
__export(chain_exports, {
  _getHeaderRange: () => _getHeaderRange,
  bestNumber: () => bestNumber,
  bestNumberFinalized: () => bestNumberFinalized,
  bestNumberLag: () => bestNumberLag,
  getBlock: () => getBlock,
  getBlockByNumber: () => getBlockByNumber,
  getHeader: () => getHeader,
  subscribeFinalizedBlocks: () => subscribeFinalizedBlocks,
  subscribeFinalizedHeads: () => subscribeFinalizedHeads,
  subscribeNewBlocks: () => subscribeNewBlocks,
  subscribeNewHeads: () => subscribeNewHeads
});
var init_chain = __esm({
  "node_modules/@polkadot/api-derive/chain/index.js"() {
    init_bestNumber();
    init_bestNumberFinalized();
    init_bestNumberLag();
    init_getBlock();
    init_getBlockByNumber();
    init_getHeader();
    init_subscribeFinalizedBlocks();
    init_subscribeFinalizedHeads();
    init_subscribeNewBlocks();
    init_subscribeNewHeads();
  }
});

// node_modules/@polkadot/api-derive/contracts/fees.js
function queryConstants(api) {
  return of([
    // deprecated
    api.consts.contracts["callBaseFee"] || api.registry.createType("Balance"),
    api.consts.contracts["contractFee"] || api.registry.createType("Balance"),
    api.consts.contracts["creationFee"] || api.registry.createType("Balance"),
    api.consts.contracts["transactionBaseFee"] || api.registry.createType("Balance"),
    api.consts.contracts["transactionByteFee"] || api.registry.createType("Balance"),
    api.consts.contracts["transferFee"] || api.registry.createType("Balance"),
    // current
    api.consts.contracts["rentByteFee"] || api.registry.createType("Balance"),
    api.consts.contracts["rentDepositOffset"] || api.registry.createType("Balance"),
    api.consts.contracts["surchargeReward"] || api.registry.createType("Balance"),
    api.consts.contracts["tombstoneDeposit"] || api.registry.createType("Balance")
  ]);
}
function fees(instanceId, api) {
  return memo(instanceId, () => {
    return queryConstants(api).pipe(map2(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
      callBaseFee,
      contractFee,
      creationFee,
      rentByteFee,
      rentDepositOffset,
      surchargeReward,
      tombstoneDeposit,
      transactionBaseFee,
      transactionByteFee,
      transferFee
    })));
  });
}
var init_fees = __esm({
  "node_modules/@polkadot/api-derive/contracts/fees.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/contracts/index.js
var contracts_exports = {};
__export(contracts_exports, {
  fees: () => fees
});
var init_contracts = __esm({
  "node_modules/@polkadot/api-derive/contracts/index.js"() {
    init_fees();
  }
});

// node_modules/@polkadot/api-derive/council/votes.js
function isVoter(value) {
  return !Array.isArray(value);
}
function retrieveStakeOf(elections) {
  return elections["stakeOf"].entries().pipe(map2((entries) => entries.map(([{ args: [accountId2] }, stake]) => [accountId2, stake])));
}
function retrieveVoteOf(elections) {
  return elections["votesOf"].entries().pipe(map2((entries) => entries.map(([{ args: [accountId2] }, votes2]) => [accountId2, votes2])));
}
function retrievePrev(api, elections) {
  return combineLatest([
    retrieveStakeOf(elections),
    retrieveVoteOf(elections)
  ]).pipe(map2(([stakes, votes2]) => {
    const result = [];
    votes2.forEach(([voter, votes3]) => {
      result.push([voter, { stake: api.registry.createType("Balance"), votes: votes3 }]);
    });
    stakes.forEach(([staker, stake]) => {
      const entry = result.find(([voter]) => voter.eq(staker));
      if (entry) {
        entry[1].stake = stake;
      } else {
        result.push([staker, { stake, votes: [] }]);
      }
    });
    return result;
  }));
}
function retrieveCurrent(elections) {
  return elections.voting.entries().pipe(map2((entries) => entries.map(([{ args: [accountId2] }, value]) => [
    accountId2,
    isVoter(value) ? { stake: value.stake, votes: value.votes } : { stake: value[0], votes: value[1] }
  ])));
}
function votes(instanceId, api) {
  const elections = api.query.elections || api.query["phragmenElection"] || api.query["electionsPhragmen"];
  return memo(instanceId, () => elections ? elections["stakeOf"] ? retrievePrev(api, elections) : retrieveCurrent(elections) : of([]));
}
var init_votes = __esm({
  "node_modules/@polkadot/api-derive/council/votes.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/council/votesOf.js
function votesOf(instanceId, api) {
  return memo(instanceId, (accountId2) => api.derive.council.votes().pipe(map2((votes2) => (votes2.find(([from2]) => from2.eq(accountId2)) || [null, { stake: api.registry.createType("Balance"), votes: [] }])[1])));
}
var init_votesOf = __esm({
  "node_modules/@polkadot/api-derive/council/votesOf.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/council/index.js
var council_exports = {};
__export(council_exports, {
  hasProposals: () => hasProposals3,
  members: () => members3,
  prime: () => prime3,
  proposal: () => proposal3,
  proposalCount: () => proposalCount3,
  proposalHashes: () => proposalHashes3,
  proposals: () => proposals3,
  votes: () => votes,
  votesOf: () => votesOf
});
var members3, hasProposals3, proposal3, proposalCount3, proposalHashes3, proposals3, prime3;
var init_council = __esm({
  "node_modules/@polkadot/api-derive/council/index.js"() {
    init_collective();
    init_votes();
    init_votesOf();
    members3 = members("council");
    hasProposals3 = hasProposals("council");
    proposal3 = proposal("council");
    proposalCount3 = proposalCount("council");
    proposalHashes3 = proposalHashes("council");
    proposals3 = proposals("council");
    prime3 = prime("council");
  }
});

// node_modules/@polkadot/api-derive/crowdloan/childKey.js
function createChildKey(info6) {
  return u8aToHex(u8aConcat(":child_storage:default:", blake2AsU8a(u8aConcat("crowdloan", (info6.fundIndex || info6.trieIndex).toU8a()))));
}
function childKey(instanceId, api) {
  return memo(instanceId, (paraId) => api.query["crowdloan"]["funds"](paraId).pipe(map2((optInfo) => optInfo.isSome ? createChildKey(optInfo.unwrap()) : null)));
}
var init_childKey = __esm({
  "node_modules/@polkadot/api-derive/crowdloan/childKey.js"() {
    init_esm5();
    init_util();
    init_util_crypto();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/crowdloan/util.js
function extractContributed(paraId, events2) {
  const added = [];
  const removed = [];
  return events2.filter(({ event: { data: [, eventParaId], method, section: section2 } }) => section2 === "crowdloan" && ["Contributed", "Withdrew"].includes(method) && eventParaId.eq(paraId)).reduce((result, { event: { data: [accountId2], method } }) => {
    if (method === "Contributed") {
      result.added.push(accountId2.toHex());
    } else {
      result.removed.push(accountId2.toHex());
    }
    return result;
  }, { added, blockHash: events2.createdAtHash?.toHex() || "-", removed });
}
var init_util15 = __esm({
  "node_modules/@polkadot/api-derive/crowdloan/util.js"() {
  }
});

// node_modules/@polkadot/api-derive/crowdloan/contributions.js
function _getUpdates(api, paraId) {
  let added = [];
  let removed = [];
  return api.query.system.events().pipe(switchMap((events2) => {
    const changes = extractContributed(paraId, events2);
    if (changes.added.length || changes.removed.length) {
      added = added.concat(...changes.added);
      removed = removed.concat(...changes.removed);
      return of({ added, addedDelta: changes.added, blockHash: events2.createdAtHash?.toHex() || "-", removed, removedDelta: changes.removed });
    }
    return EMPTY;
  }), startWith({ added, addedDelta: [], blockHash: "-", removed, removedDelta: [] }));
}
function _eventTriggerAll(api, paraId) {
  return api.query.system.events().pipe(switchMap((events2) => {
    const items = events2.filter(({ event: { data: [eventParaId], method, section: section2 } }) => section2 === "crowdloan" && ["AllRefunded", "Dissolved", "PartiallyRefunded"].includes(method) && eventParaId.eq(paraId));
    return items.length ? of(events2.createdAtHash?.toHex() || "-") : EMPTY;
  }), startWith("-"));
}
function _getKeysPaged(api, childKey2) {
  const subject = new BehaviorSubject(void 0);
  return subject.pipe(
    switchMap((startKey) => api.rpc.childstate.getKeysPaged(childKey2, "0x", PAGE_SIZE_K, startKey)),
    tap((keys2) => {
      nextTick(() => {
        keys2.length === PAGE_SIZE_K ? subject.next(keys2[PAGE_SIZE_K - 1].toHex()) : subject.complete();
      });
    }),
    toArray(),
    // toArray since we want to startSubject to be completed
    map2((keyArr) => arrayFlatten(keyArr))
  );
}
function _getAll(api, paraId, childKey2) {
  return _eventTriggerAll(api, paraId).pipe(switchMap(() => isFunction(api.rpc.childstate.getKeysPaged) ? _getKeysPaged(api, childKey2) : api.rpc.childstate.getKeys(childKey2, "0x")), map2((keys2) => keys2.map((k2) => k2.toHex())));
}
function _contributions(api, paraId, childKey2) {
  return combineLatest([
    _getAll(api, paraId, childKey2),
    _getUpdates(api, paraId)
  ]).pipe(map2(([keys2, { added, blockHash, removed }]) => {
    const contributorsMap = {};
    keys2.forEach((k2) => {
      contributorsMap[k2] = true;
    });
    added.forEach((k2) => {
      contributorsMap[k2] = true;
    });
    removed.forEach((k2) => {
      delete contributorsMap[k2];
    });
    return {
      blockHash,
      contributorsHex: Object.keys(contributorsMap)
    };
  }));
}
function contributions(instanceId, api) {
  return memo(instanceId, (paraId) => api.derive.crowdloan.childKey(paraId).pipe(switchMap((childKey2) => childKey2 ? _contributions(api, paraId, childKey2) : of({ blockHash: "-", contributorsHex: [] }))));
}
var PAGE_SIZE_K;
var init_contributions = __esm({
  "node_modules/@polkadot/api-derive/crowdloan/contributions.js"() {
    init_esm5();
    init_util();
    init_util11();
    init_util15();
    PAGE_SIZE_K = 1e3;
  }
});

// node_modules/@polkadot/api-derive/crowdloan/ownContributions.js
function _getValues(api, childKey2, keys2) {
  return combineLatest(keys2.map((k2) => api.rpc.childstate.getStorage(childKey2, k2))).pipe(map2((values) => values.map((v3) => api.registry.createType("Option<StorageData>", v3)).map((o) => o.isSome ? api.registry.createType("Balance", o.unwrap()) : api.registry.createType("Balance")).reduce((all3, b2, index) => objectSpread(all3, { [keys2[index]]: b2 }), {})));
}
function _watchOwnChanges(api, paraId, childkey, keys2) {
  return api.query.system.events().pipe(switchMap((events2) => {
    const changes = extractContributed(paraId, events2);
    const filtered = keys2.filter((k2) => changes.added.includes(k2) || changes.removed.includes(k2));
    return filtered.length ? _getValues(api, childkey, filtered) : EMPTY;
  }), startWith({}));
}
function _contributions2(api, paraId, childKey2, keys2) {
  return combineLatest([
    _getValues(api, childKey2, keys2),
    _watchOwnChanges(api, paraId, childKey2, keys2)
  ]).pipe(map2(([all3, latest2]) => objectSpread({}, all3, latest2)));
}
function ownContributions(instanceId, api) {
  return memo(instanceId, (paraId, keys2) => api.derive.crowdloan.childKey(paraId).pipe(switchMap((childKey2) => childKey2 && keys2.length ? _contributions2(api, paraId, childKey2, keys2) : of({}))));
}
var init_ownContributions = __esm({
  "node_modules/@polkadot/api-derive/crowdloan/ownContributions.js"() {
    init_esm5();
    init_util();
    init_util11();
    init_util15();
  }
});

// node_modules/@polkadot/api-derive/crowdloan/index.js
var crowdloan_exports = {};
__export(crowdloan_exports, {
  childKey: () => childKey,
  contributions: () => contributions,
  ownContributions: () => ownContributions
});
var init_crowdloan = __esm({
  "node_modules/@polkadot/api-derive/crowdloan/index.js"() {
    init_childKey();
    init_contributions();
    init_ownContributions();
  }
});

// node_modules/@polkadot/api-derive/democracy/util.js
function isOldInfo(info6) {
  return !!info6.proposalHash;
}
function isCurrentStatus(status) {
  return !!status.tally;
}
function compareRationals(n1, d1, n2, d2) {
  while (true) {
    const q1 = n1.div(d1);
    const q2 = n2.div(d2);
    if (q1.lt(q2)) {
      return true;
    } else if (q2.lt(q1)) {
      return false;
    }
    const r1 = n1.mod(d1);
    const r2 = n2.mod(d2);
    if (r2.isZero()) {
      return false;
    } else if (r1.isZero()) {
      return true;
    }
    n1 = d2;
    n2 = d1;
    d1 = r2;
    d2 = r1;
  }
}
function calcPassingOther(threshold, sqrtElectorate2, { votedAye, votedNay, votedTotal }) {
  const sqrtVoters = bnSqrt(votedTotal);
  return sqrtVoters.isZero() ? false : threshold.isSuperMajorityApprove ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate2) : compareRationals(votedNay, sqrtElectorate2, votedAye, sqrtVoters);
}
function calcPassing(threshold, sqrtElectorate2, state) {
  return threshold.isSimpleMajority ? state.votedAye.gt(state.votedNay) : calcPassingOther(threshold, sqrtElectorate2, state);
}
function calcVotesPrev(votesFor) {
  return votesFor.reduce((state, derived) => {
    const { balance, vote } = derived;
    const isDefault = vote.conviction.index === 0;
    const counted = balance.muln(isDefault ? 1 : vote.conviction.index).divn(isDefault ? 10 : 1);
    if (vote.isAye) {
      state.allAye.push(derived);
      state.voteCountAye++;
      state.votedAye.iadd(counted);
    } else {
      state.allNay.push(derived);
      state.voteCountNay++;
      state.votedNay.iadd(counted);
    }
    state.voteCount++;
    state.votedTotal.iadd(counted);
    return state;
  }, { allAye: [], allNay: [], voteCount: 0, voteCountAye: 0, voteCountNay: 0, votedAye: new import_bn.default(0), votedNay: new import_bn.default(0), votedTotal: new import_bn.default(0) });
}
function calcVotesCurrent(tally, votes2) {
  const allAye = [];
  const allNay = [];
  votes2.forEach((derived) => {
    if (derived.vote.isAye) {
      allAye.push(derived);
    } else {
      allNay.push(derived);
    }
  });
  return {
    allAye,
    allNay,
    voteCount: allAye.length + allNay.length,
    voteCountAye: allAye.length,
    voteCountNay: allNay.length,
    votedAye: tally.ayes,
    votedNay: tally.nays,
    votedTotal: tally.turnout
  };
}
function calcVotes(sqrtElectorate2, referendum, votes2) {
  const state = isCurrentStatus(referendum.status) ? calcVotesCurrent(referendum.status.tally, votes2) : calcVotesPrev(votes2);
  return objectSpread({}, state, {
    isPassing: calcPassing(referendum.status.threshold, sqrtElectorate2, state),
    votes: votes2
  });
}
function getStatus(info6) {
  if (info6.isNone) {
    return null;
  }
  const unwrapped = info6.unwrap();
  return isOldInfo(unwrapped) ? unwrapped : unwrapped.isOngoing ? unwrapped.asOngoing : null;
}
function getImageHashBounded(hash2) {
  return hash2.isLegacy ? hash2.asLegacy.hash_.toHex() : hash2.isLookup ? hash2.asLookup.hash_.toHex() : hash2.isInline ? hash2.asInline.hash.toHex() : isString(hash2) ? isHex(hash2) ? hash2 : stringToHex(hash2) : isU8a(hash2) ? u8aToHex(hash2) : hash2.toHex();
}
function getImageHash(status) {
  return getImageHashBounded(status.proposal || status.proposalHash);
}
var init_util16 = __esm({
  "node_modules/@polkadot/api-derive/democracy/util.js"() {
    init_util();
  }
});

// node_modules/@polkadot/api-derive/democracy/dispatchQueue.js
function isMaybeHashedOrBounded(call) {
  return call instanceof Enum;
}
function isBounded(call) {
  return call.isInline || call.isLegacy || call.isLookup;
}
function queryQueue(api) {
  return api.query.democracy["dispatchQueue"]().pipe(switchMap((dispatches) => combineLatest([
    of(dispatches),
    api.derive.democracy.preimages(dispatches.map(([, hash2]) => hash2))
  ])), map2(([dispatches, images]) => dispatches.map(([at2, imageHash, index], dispatchIndex) => ({
    at: at2,
    image: images[dispatchIndex],
    imageHash: getImageHashBounded(imageHash),
    index
  }))));
}
function schedulerEntries(api) {
  return api.derive.democracy.referendumsFinished().pipe(switchMap(() => api.query.scheduler.agenda.keys()), switchMap((keys2) => {
    const blockNumbers = keys2.map(({ args: [blockNumber] }) => blockNumber);
    return blockNumbers.length ? combineLatest([
      of(blockNumbers),
      // this should simply be api.query.scheduler.agenda.multi,
      // however we have had cases on Darwinia where the indices have moved around after an
      // upgrade, which results in invalid on-chain data
      api.query.scheduler.agenda.multi(blockNumbers).pipe(catchError(() => of(blockNumbers.map(() => []))))
    ]) : of([[], []]);
  }));
}
function queryScheduler(api) {
  return schedulerEntries(api).pipe(switchMap(([blockNumbers, agendas]) => {
    const result = [];
    blockNumbers.forEach((at2, index) => {
      (agendas[index] || []).filter((o) => o.isSome).forEach((o) => {
        const scheduled2 = o.unwrap();
        if (scheduled2.maybeId.isSome) {
          const id = scheduled2.maybeId.unwrap().toHex();
          if (id.startsWith(DEMOCRACY_ID)) {
            const imageHash = isMaybeHashedOrBounded(scheduled2.call) ? isBounded(scheduled2.call) ? getImageHashBounded(scheduled2.call) : scheduled2.call.isHash ? scheduled2.call.asHash.toHex() : scheduled2.call.asValue.args[0].toHex() : scheduled2.call.args[0].toHex();
            result.push({ at: at2, imageHash, index: api.registry.createType("(u64, ReferendumIndex)", id)[1] });
          }
        }
      });
    });
    return combineLatest([
      of(result),
      result.length ? api.derive.democracy.preimages(result.map(({ imageHash }) => imageHash)) : of([])
    ]);
  }), map2(([infos, images]) => infos.map((info6, index) => objectSpread({ image: images[index] }, info6))));
}
function dispatchQueue(instanceId, api) {
  return memo(instanceId, () => isFunction(api.query.scheduler?.agenda) ? queryScheduler(api) : api.query.democracy["dispatchQueue"] ? queryQueue(api) : of([]));
}
var DEMOCRACY_ID;
var init_dispatchQueue = __esm({
  "node_modules/@polkadot/api-derive/democracy/dispatchQueue.js"() {
    init_esm5();
    init_types4();
    init_util();
    init_util11();
    init_util16();
    DEMOCRACY_ID = stringToHex("democrac");
  }
});

// node_modules/@polkadot/api-derive/democracy/locks.js
function parseEnd(api, vote, { approved, end }) {
  return [
    end,
    approved.isTrue && vote.isAye || approved.isFalse && vote.isNay ? end.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[vote.conviction.index])) : BN_ZERO
  ];
}
function parseLock(api, [referendumId, accountVote], referendum) {
  const { balance, vote } = accountVote.asStandard;
  const [referendumEnd, unlockAt] = referendum.isFinished ? parseEnd(api, vote, referendum.asFinished) : [BN_ZERO, BN_ZERO];
  return { balance, isDelegated: false, isFinished: referendum.isFinished, referendumEnd, referendumId, unlockAt, vote };
}
function delegateLocks(api, { balance, conviction, target }) {
  return api.derive.democracy.locks(target).pipe(map2((available) => available.map(({ isFinished, referendumEnd, referendumId, unlockAt, vote }) => ({
    balance,
    isDelegated: true,
    isFinished,
    referendumEnd,
    referendumId,
    unlockAt: unlockAt.isZero() ? unlockAt : referendumEnd.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[conviction.index])),
    vote: api.registry.createType("Vote", { aye: vote.isAye, conviction })
  }))));
}
function directLocks(api, { votes: votes2 }) {
  if (!votes2.length) {
    return of([]);
  }
  return api.query.democracy.referendumInfoOf.multi(votes2.map(([referendumId]) => referendumId)).pipe(map2((referendums2) => votes2.map((vote, index) => [vote, referendums2[index].unwrapOr(null)]).filter((item) => !!item[1] && isUndefined(item[1].end) && item[0][1].isStandard).map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
}
function locks(instanceId, api) {
  return memo(instanceId, (accountId2) => api.query.democracy.votingOf ? api.query.democracy.votingOf(accountId2).pipe(switchMap((voting) => voting.isDirect ? directLocks(api, voting.asDirect) : voting.isDelegating ? delegateLocks(api, voting.asDelegating) : of([]))) : of([]));
}
var LOCKUPS;
var init_locks = __esm({
  "node_modules/@polkadot/api-derive/democracy/locks.js"() {
    init_esm5();
    init_util();
    init_util11();
    LOCKUPS = [0, 1, 2, 4, 8, 16, 32];
  }
});

// node_modules/@polkadot/api-derive/democracy/nextExternal.js
function withImage(api, nextOpt) {
  if (nextOpt.isNone) {
    return of(null);
  }
  const [hash2, threshold] = nextOpt.unwrap();
  return api.derive.democracy.preimage(hash2).pipe(map2((image) => ({
    image,
    imageHash: getImageHashBounded(hash2),
    threshold
  })));
}
function nextExternal(instanceId, api) {
  return memo(instanceId, () => api.query.democracy?.nextExternal ? api.query.democracy.nextExternal().pipe(switchMap((nextOpt) => withImage(api, nextOpt))) : of(null));
}
var init_nextExternal = __esm({
  "node_modules/@polkadot/api-derive/democracy/nextExternal.js"() {
    init_esm5();
    init_util11();
    init_util16();
  }
});

// node_modules/@polkadot/api-derive/democracy/preimages.js
function getUnrequestedTicket(status) {
  return status.ticket || status.deposit;
}
function getRequestedTicket(status) {
  return (status.maybeTicket || status.deposit).unwrapOrDefault();
}
function isDemocracyPreimage(api, imageOpt) {
  return !!imageOpt && !api.query.democracy["dispatchQueue"];
}
function constructProposal(api, [bytes3, proposer, balance, at2]) {
  let proposal6;
  try {
    proposal6 = api.registry.createType("Call", bytes3.toU8a(true));
  } catch (error) {
    console.error(error);
  }
  return { at: at2, balance, proposal: proposal6, proposer };
}
function parseDemocracy(api, imageOpt) {
  if (imageOpt.isNone) {
    return;
  }
  if (isDemocracyPreimage(api, imageOpt)) {
    const status = imageOpt.unwrap();
    if (status.isMissing) {
      return;
    }
    const { data, deposit, provider, since } = status.asAvailable;
    return constructProposal(api, [data, provider, deposit, since]);
  }
  return constructProposal(api, imageOpt.unwrap());
}
function parseImage(api, [proposalHash, status, bytes3]) {
  if (!status) {
    return void 0;
  }
  const [proposer, balance] = status.isUnrequested ? getUnrequestedTicket(status.asUnrequested) : getRequestedTicket(status.asRequested);
  let proposal6;
  if (bytes3) {
    try {
      proposal6 = api.registry.createType("Call", bytes3.toU8a(true));
    } catch (error) {
      console.error(error);
    }
  }
  return { at: BN_ZERO, balance, proposal: proposal6, proposalHash, proposer };
}
function getDemocracyImages(api, bounded) {
  const hashes = bounded.map((b2) => getImageHashBounded(b2));
  return api.query.democracy["preimages"].multi(hashes).pipe(map2((images) => images.map((imageOpt) => parseDemocracy(api, imageOpt))));
}
function getImages(api, bounded) {
  const hashes = bounded.map((b2) => getImageHashBounded(b2));
  const bytesType = api.registry.lookup.getTypeDef(api.query.preimage.preimageFor.creator.meta.type.asMap.key).type;
  return api.query.preimage.statusFor.multi(hashes).pipe(switchMap((optStatus) => {
    const statuses = optStatus.map((o) => o.unwrapOr(null));
    const keys2 = statuses.map((s, i) => s ? bytesType === "H256" ? hashes[i] : s.isRequested ? [hashes[i], s.asRequested.len.unwrapOr(0)] : [hashes[i], s.asUnrequested.len] : null).filter((p) => !!p);
    return api.query.preimage.preimageFor.multi(keys2).pipe(map2((optBytes) => {
      let ptr = -1;
      return statuses.map((s, i) => s ? [hashes[i], s, optBytes[++ptr].unwrapOr(null)] : [hashes[i], null, null]).map((v3) => parseImage(api, v3));
    }));
  }));
}
function preimages(instanceId, api) {
  return memo(instanceId, (hashes) => hashes.length ? isFunction(api.query.democracy["preimages"]) ? getDemocracyImages(api, hashes) : isFunction(api.query.preimage.preimageFor) ? getImages(api, hashes) : of([]) : of([]));
}
var preimage;
var init_preimages = __esm({
  "node_modules/@polkadot/api-derive/democracy/preimages.js"() {
    init_esm5();
    init_util();
    init_util11();
    init_util16();
    preimage = firstMemo((api, hash2) => api.derive.democracy.preimages([hash2]));
  }
});

// node_modules/@polkadot/api-derive/democracy/proposals.js
function isNewDepositors(depositors) {
  return isFunction(depositors[1].mul);
}
function parse2([proposals8, images, optDepositors]) {
  return proposals8.filter(([, , proposer], index) => !!optDepositors[index]?.isSome && !proposer.isEmpty).map(([index, hash2, proposer], proposalIndex) => {
    const depositors = optDepositors[proposalIndex].unwrap();
    return objectSpread({
      image: images[proposalIndex],
      imageHash: getImageHashBounded(hash2),
      index,
      proposer
    }, isNewDepositors(depositors) ? { balance: depositors[1], seconds: depositors[0] } : { balance: depositors[0], seconds: depositors[1] });
  });
}
function proposals4(instanceId, api) {
  return memo(instanceId, () => isFunction(api.query.democracy?.publicProps) ? api.query.democracy.publicProps().pipe(switchMap((proposals8) => proposals8.length ? combineLatest([
    of(proposals8),
    api.derive.democracy.preimages(proposals8.map(([, hash2]) => hash2)),
    api.query.democracy.depositOf.multi(proposals8.map(([index]) => index))
  ]) : of([[], [], []])), map2(parse2)) : of([]));
}
var init_proposals2 = __esm({
  "node_modules/@polkadot/api-derive/democracy/proposals.js"() {
    init_esm5();
    init_util();
    init_util11();
    init_util16();
  }
});

// node_modules/@polkadot/api-derive/democracy/referendumIds.js
function referendumIds(instanceId, api) {
  return memo(instanceId, () => api.query.democracy?.lowestUnbaked ? api.queryMulti([
    api.query.democracy.lowestUnbaked,
    api.query.democracy.referendumCount
  ]).pipe(map2(([first2, total]) => total.gt(first2) ? [...Array(total.sub(first2).toNumber())].map((_2, i) => first2.addn(i)) : [])) : of([]));
}
var init_referendumIds = __esm({
  "node_modules/@polkadot/api-derive/democracy/referendumIds.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/democracy/referendums.js
function referendums(instanceId, api) {
  return memo(instanceId, () => api.derive.democracy.referendumsActive().pipe(switchMap((referendums2) => referendums2.length ? combineLatest([
    of(referendums2),
    api.derive.democracy._referendumsVotes(referendums2)
  ]) : of([[], []])), map2(([referendums2, votes2]) => referendums2.map((referendum, index) => objectSpread({}, referendum, votes2[index])))));
}
var init_referendums = __esm({
  "node_modules/@polkadot/api-derive/democracy/referendums.js"() {
    init_esm5();
    init_util();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/democracy/referendumsActive.js
function referendumsActive(instanceId, api) {
  return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap((ids) => ids.length ? api.derive.democracy.referendumsInfo(ids) : of([]))));
}
var init_referendumsActive = __esm({
  "node_modules/@polkadot/api-derive/democracy/referendumsActive.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/democracy/referendumsFinished.js
function referendumsFinished(instanceId, api) {
  return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap((ids) => api.query.democracy.referendumInfoOf.multi(ids)), map2((infos) => infos.map((o) => o.unwrapOr(null)).filter((info6) => !!info6 && info6.isFinished).map((info6) => info6.asFinished))));
}
var init_referendumsFinished = __esm({
  "node_modules/@polkadot/api-derive/democracy/referendumsFinished.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/democracy/referendumsInfo.js
function votesPrev(api, referendumId) {
  return api.query.democracy["votersFor"](referendumId).pipe(switchMap((votersFor) => combineLatest([
    of(votersFor),
    votersFor.length ? api.query.democracy["voteOf"].multi(votersFor.map((accountId2) => [referendumId, accountId2])) : of([]),
    api.derive.balances.votingBalances(votersFor)
  ])), map2(([votersFor, votes2, balances]) => votersFor.map((accountId2, index) => ({
    accountId: accountId2,
    balance: balances[index].votingBalance || api.registry.createType("Balance"),
    isDelegating: false,
    vote: votes2[index] || api.registry.createType("Vote")
  }))));
}
function extractVotes(mapped, referendumId) {
  return mapped.filter(([, voting]) => voting.isDirect).map(([accountId2, voting]) => [
    accountId2,
    voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))
  ]).filter(([, directVotes]) => !!directVotes.length).reduce((result, [accountId2, votes2]) => (
    // FIXME We are ignoring split votes
    votes2.reduce((result2, [, vote]) => {
      if (vote.isStandard) {
        result2.push(objectSpread({
          accountId: accountId2,
          isDelegating: false
        }, vote.asStandard));
      }
      return result2;
    }, result)
  ), []);
}
function votesCurr(api, referendumId) {
  return api.query.democracy.votingOf.entries().pipe(map2((allVoting) => {
    const mapped = allVoting.map(([{ args: [accountId2] }, voting]) => [accountId2, voting]);
    const votes2 = extractVotes(mapped, referendumId);
    const delegations = mapped.filter(([, voting]) => voting.isDelegating).map(([accountId2, voting]) => [accountId2, voting.asDelegating]);
    delegations.forEach(([accountId2, { balance, conviction, target }]) => {
      const toDelegator = delegations.find(([accountId3]) => accountId3.eq(target));
      const to = votes2.find(({ accountId: accountId3 }) => accountId3.eq(toDelegator ? toDelegator[0] : target));
      if (to) {
        votes2.push({
          accountId: accountId2,
          balance,
          isDelegating: true,
          vote: api.registry.createType("Vote", { aye: to.vote.isAye, conviction })
        });
      }
    });
    return votes2;
  }));
}
function _referendumVotes(instanceId, api) {
  return memo(instanceId, (referendum) => combineLatest([
    api.derive.democracy.sqrtElectorate(),
    isFunction(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)
  ]).pipe(map2(([sqrtElectorate2, votes2]) => calcVotes(sqrtElectorate2, referendum, votes2))));
}
function _referendumsVotes(instanceId, api) {
  return memo(instanceId, (referendums2) => referendums2.length ? combineLatest(referendums2.map((referendum) => api.derive.democracy._referendumVotes(referendum))) : of([]));
}
function _referendumInfo(instanceId, api) {
  return memo(instanceId, (index, info6) => {
    const status = getStatus(info6);
    return status ? api.derive.democracy.preimage(status.proposal || status.proposalHash).pipe(map2((image) => ({
      image,
      imageHash: getImageHash(status),
      index: api.registry.createType("ReferendumIndex", index),
      status
    }))) : of(null);
  });
}
function referendumsInfo(instanceId, api) {
  return memo(instanceId, (ids) => ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe(switchMap((infos) => combineLatest(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), map2((infos) => infos.filter((r) => !!r))) : of([]));
}
var init_referendumsInfo = __esm({
  "node_modules/@polkadot/api-derive/democracy/referendumsInfo.js"() {
    init_esm5();
    init_util();
    init_util11();
    init_util16();
  }
});

// node_modules/@polkadot/api-derive/democracy/sqrtElectorate.js
function sqrtElectorate(instanceId, api) {
  return memo(instanceId, () => api.query.balances.totalIssuance().pipe(map2(bnSqrt)));
}
var init_sqrtElectorate = __esm({
  "node_modules/@polkadot/api-derive/democracy/sqrtElectorate.js"() {
    init_esm5();
    init_util();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/democracy/index.js
var democracy_exports = {};
__export(democracy_exports, {
  _referendumInfo: () => _referendumInfo,
  _referendumVotes: () => _referendumVotes,
  _referendumsVotes: () => _referendumsVotes,
  dispatchQueue: () => dispatchQueue,
  locks: () => locks,
  nextExternal: () => nextExternal,
  preimage: () => preimage,
  preimages: () => preimages,
  proposals: () => proposals4,
  referendumIds: () => referendumIds,
  referendums: () => referendums,
  referendumsActive: () => referendumsActive,
  referendumsFinished: () => referendumsFinished,
  referendumsInfo: () => referendumsInfo,
  sqrtElectorate: () => sqrtElectorate
});
var init_democracy = __esm({
  "node_modules/@polkadot/api-derive/democracy/index.js"() {
    init_dispatchQueue();
    init_locks();
    init_nextExternal();
    init_preimages();
    init_proposals2();
    init_referendumIds();
    init_referendums();
    init_referendumsActive();
    init_referendumsFinished();
    init_referendumsInfo();
    init_sqrtElectorate();
  }
});

// node_modules/@polkadot/api-derive/elections/info.js
function isSeatHolder(value) {
  return !Array.isArray(value);
}
function isCandidateTuple(value) {
  return Array.isArray(value);
}
function getAccountTuple(value) {
  return isSeatHolder(value) ? [value.who, value.stake] : value;
}
function getCandidate(value) {
  return isCandidateTuple(value) ? value[0] : value;
}
function sortAccounts([, balanceA], [, balanceB]) {
  return balanceB.cmp(balanceA);
}
function getConstants(api, elections) {
  return elections ? {
    candidacyBond: api.consts[elections].candidacyBond,
    desiredRunnersUp: api.consts[elections].desiredRunnersUp,
    desiredSeats: api.consts[elections].desiredMembers,
    termDuration: api.consts[elections].termDuration,
    votingBond: api.consts[elections]["votingBond"],
    votingBondBase: api.consts[elections].votingBondBase,
    votingBondFactor: api.consts[elections].votingBondFactor
  } : {};
}
function getModules(api) {
  const [council] = api.registry.getModuleInstances(api.runtimeVersion.specName, "council") || ["council"];
  const elections = api.query["phragmenElection"] ? "phragmenElection" : api.query["electionsPhragmen"] ? "electionsPhragmen" : api.query.elections ? "elections" : null;
  const resolvedCouncil = api.query[council] ? council : "council";
  return [resolvedCouncil, elections];
}
function queryAll(api, council, elections) {
  return api.queryMulti([
    api.query[council].members,
    api.query[elections].candidates,
    api.query[elections].members,
    api.query[elections].runnersUp
  ]);
}
function queryCouncil(api, council) {
  return combineLatest([
    api.query[council].members(),
    of([]),
    of([]),
    of([])
  ]);
}
function info2(instanceId, api) {
  return memo(instanceId, () => {
    const [council, elections] = getModules(api);
    return (elections ? queryAll(api, council, elections) : queryCouncil(api, council)).pipe(map2(([councilMembers, candidates2, members7, runnersUp]) => objectSpread({}, getConstants(api, elections), {
      candidateCount: api.registry.createType("u32", candidates2.length),
      candidates: candidates2.map(getCandidate),
      members: members7.length ? members7.map(getAccountTuple).sort(sortAccounts) : councilMembers.map((a) => [a, api.registry.createType("Balance")]),
      runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
    })));
  });
}
var init_info2 = __esm({
  "node_modules/@polkadot/api-derive/elections/info.js"() {
    init_esm5();
    init_util();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/elections/index.js
var elections_exports = {};
__export(elections_exports, {
  info: () => info2
});
var init_elections = __esm({
  "node_modules/@polkadot/api-derive/elections/index.js"() {
    init_info2();
  }
});

// node_modules/@polkadot/api-derive/imOnline/receivedHeartbeats.js
function mapResult([result, validators2, heartbeats, numBlocks]) {
  validators2.forEach((validator, index) => {
    const validatorId = validator.toString();
    const blockCount = numBlocks[index];
    const hasMessage = !heartbeats[index].isEmpty;
    const prev = result[validatorId];
    if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
      result[validatorId] = {
        blockCount,
        hasMessage,
        isOnline: hasMessage || blockCount.gt(BN_ZERO)
      };
    }
  });
  return result;
}
function receivedHeartbeats(instanceId, api) {
  return memo(instanceId, () => api.query.imOnline?.receivedHeartbeats ? api.derive.staking.overview().pipe(switchMap(({ currentIndex, validators: validators2 }) => combineLatest([
    of({}),
    of(validators2),
    api.query.imOnline.receivedHeartbeats.multi(validators2.map((_address, index) => [currentIndex, index])),
    api.query.imOnline.authoredBlocks.multi(validators2.map((address) => [currentIndex, address]))
  ])), map2(mapResult)) : of({}));
}
var init_receivedHeartbeats = __esm({
  "node_modules/@polkadot/api-derive/imOnline/receivedHeartbeats.js"() {
    init_esm5();
    init_util();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/imOnline/index.js
var imOnline_exports = {};
__export(imOnline_exports, {
  receivedHeartbeats: () => receivedHeartbeats
});
var init_imOnline = __esm({
  "node_modules/@polkadot/api-derive/imOnline/index.js"() {
    init_receivedHeartbeats();
  }
});

// node_modules/@polkadot/api-derive/membership/index.js
var membership_exports = {};
__export(membership_exports, {
  hasProposals: () => hasProposals4,
  members: () => members4,
  prime: () => prime4,
  proposal: () => proposal4,
  proposalCount: () => proposalCount4,
  proposalHashes: () => proposalHashes4,
  proposals: () => proposals5
});
var members4, hasProposals4, proposal4, proposalCount4, proposalHashes4, proposals5, prime4;
var init_membership = __esm({
  "node_modules/@polkadot/api-derive/membership/index.js"() {
    init_collective();
    members4 = members("membership");
    hasProposals4 = hasProposals("membership");
    proposal4 = proposal("membership");
    proposalCount4 = proposalCount("membership");
    proposalHashes4 = proposalHashes("membership");
    proposals5 = proposals("membership");
    prime4 = prime("membership");
  }
});

// node_modules/@polkadot/api-derive/parachains/util.js
function didUpdateToBool(didUpdate, id) {
  return didUpdate.isSome ? didUpdate.unwrap().some((paraId) => paraId.eq(id)) : false;
}
var init_util17 = __esm({
  "node_modules/@polkadot/api-derive/parachains/util.js"() {
  }
});

// node_modules/@polkadot/api-derive/parachains/info.js
function parseActive(id, active) {
  const found = active.find(([paraId]) => paraId === id);
  if (found && found[1].isSome) {
    const [collatorId, retriable] = found[1].unwrap();
    return objectSpread({ collatorId }, retriable.isWithRetries ? {
      isRetriable: true,
      retries: retriable.asWithRetries.toNumber()
    } : {
      isRetriable: false,
      retries: 0
    });
  }
  return null;
}
function parseCollators(id, collatorQueue) {
  return collatorQueue.map((queue2) => {
    const found = queue2.find(([paraId]) => paraId === id);
    return found ? found[1] : null;
  });
}
function parse3(id, [active, retryQueue, selectedThreads, didUpdate, info6, pendingSwap, heads, relayDispatchQueue]) {
  if (info6.isNone) {
    return null;
  }
  return {
    active: parseActive(id, active),
    didUpdate: didUpdateToBool(didUpdate, id),
    heads,
    id,
    info: objectSpread({ id }, info6.unwrap()),
    pendingSwapId: pendingSwap.unwrapOr(null),
    relayDispatchQueue,
    retryCollators: parseCollators(id, retryQueue),
    selectedCollators: parseCollators(id, selectedThreads)
  };
}
function info3(instanceId, api) {
  return memo(instanceId, (id) => api.query["registrar"] && api.query["parachains"] ? api.queryMulti([
    api.query["registrar"]["active"],
    api.query["registrar"]["retryQueue"],
    api.query["registrar"]["selectedThreads"],
    api.query["parachains"]["didUpdate"],
    [api.query["registrar"]["paras"], id],
    [api.query["registrar"]["pendingSwap"], id],
    [api.query["parachains"]["heads"], id],
    [api.query["parachains"]["relayDispatchQueue"], id]
  ]).pipe(map2((result) => parse3(api.registry.createType("ParaId", id), result))) : of(null));
}
var init_info3 = __esm({
  "node_modules/@polkadot/api-derive/parachains/info.js"() {
    init_esm5();
    init_util();
    init_util11();
    init_util17();
  }
});

// node_modules/@polkadot/api-derive/parachains/overview.js
function parse4([ids, didUpdate, relayDispatchQueueSizes, infos, pendingSwaps]) {
  return ids.map((id, index) => ({
    didUpdate: didUpdateToBool(didUpdate, id),
    id,
    info: objectSpread({ id }, infos[index].unwrapOr(null)),
    pendingSwapId: pendingSwaps[index].unwrapOr(null),
    relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
  }));
}
function overview(instanceId, api) {
  return memo(instanceId, () => api.query["registrar"]?.["parachains"] && api.query["parachains"] ? api.query["registrar"]["parachains"]().pipe(switchMap((paraIds) => combineLatest([
    of(paraIds),
    api.query["parachains"]["didUpdate"](),
    api.query["parachains"]["relayDispatchQueueSize"].multi(paraIds),
    api.query["registrar"]["paras"].multi(paraIds),
    api.query["registrar"]["pendingSwap"].multi(paraIds)
  ])), map2(parse4)) : of([]));
}
var init_overview = __esm({
  "node_modules/@polkadot/api-derive/parachains/overview.js"() {
    init_esm5();
    init_util();
    init_util11();
    init_util17();
  }
});

// node_modules/@polkadot/api-derive/parachains/index.js
var parachains_exports = {};
__export(parachains_exports, {
  info: () => info3,
  overview: () => overview
});
var init_parachains = __esm({
  "node_modules/@polkadot/api-derive/parachains/index.js"() {
    init_info3();
    init_overview();
  }
});

// node_modules/@polkadot/api-derive/session/indexes.js
function parse5([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {
  return {
    activeEra,
    activeEraStart,
    currentEra,
    currentIndex,
    validatorCount
  };
}
function queryStaking(api) {
  return api.queryMulti([
    api.query.session.currentIndex,
    api.query.staking.activeEra,
    api.query.staking.currentEra,
    api.query.staking.validatorCount
  ]).pipe(map2(([currentIndex, activeOpt, currentEra, validatorCount]) => {
    const { index, start } = activeOpt.unwrapOrDefault();
    return parse5([
      currentIndex,
      index,
      start,
      currentEra.unwrapOrDefault(),
      validatorCount
    ]);
  }));
}
function querySession(api) {
  return api.query.session.currentIndex().pipe(map2((currentIndex) => parse5([
    currentIndex,
    api.registry.createType("EraIndex"),
    api.registry.createType("Option<Moment>"),
    api.registry.createType("EraIndex"),
    api.registry.createType("u32")
  ])));
}
function empty2(api) {
  return of(parse5([
    api.registry.createType("SessionIndex", 1),
    api.registry.createType("EraIndex"),
    api.registry.createType("Option<Moment>"),
    api.registry.createType("EraIndex"),
    api.registry.createType("u32")
  ]));
}
function indexes2(instanceId, api) {
  return memo(instanceId, () => api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : empty2(api));
}
var init_indexes2 = __esm({
  "node_modules/@polkadot/api-derive/session/indexes.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/session/info.js
function info4(instanceId, api) {
  return memo(instanceId, () => api.derive.session.indexes().pipe(map2((indexes3) => {
    const sessionLength = api.consts?.babe?.epochDuration || api.registry.createType("u64", 1);
    const sessionsPerEra = api.consts?.staking?.sessionsPerEra || api.registry.createType("SessionIndex", 1);
    return objectSpread({
      eraLength: api.registry.createType("BlockNumber", sessionsPerEra.mul(sessionLength)),
      isEpoch: !!api.query.babe,
      sessionLength,
      sessionsPerEra
    }, indexes3);
  })));
}
var init_info4 = __esm({
  "node_modules/@polkadot/api-derive/session/info.js"() {
    init_esm5();
    init_util();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/session/progress.js
function withProgressField(field) {
  return (instanceId, api) => memo(instanceId, () => api.derive.session.progress().pipe(map2((info6) => info6[field])));
}
function createDerive(api, info6, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
  const epochStartSlot = epochIndex.mul(info6.sessionLength).iadd(epochOrGenesisStartSlot);
  const sessionProgress2 = currentSlot.sub(epochStartSlot);
  const eraProgress2 = info6.currentIndex.sub(activeEraStartSessionIndex).imul(info6.sessionLength).iadd(sessionProgress2);
  return objectSpread({
    eraProgress: api.registry.createType("BlockNumber", eraProgress2),
    sessionProgress: api.registry.createType("BlockNumber", sessionProgress2)
  }, info6);
}
function queryAura(api) {
  return api.derive.session.info().pipe(map2((info6) => objectSpread({
    eraProgress: api.registry.createType("BlockNumber"),
    sessionProgress: api.registry.createType("BlockNumber")
  }, info6)));
}
function queryBabe(api) {
  return api.derive.session.info().pipe(switchMap((info6) => combineLatest([
    of(info6),
    // we may have no staking, but have babe (permissioned)
    api.query.staking?.erasStartSessionIndex ? api.queryMulti([
      api.query.babe.currentSlot,
      api.query.babe.epochIndex,
      api.query.babe.genesisSlot,
      [api.query.staking.erasStartSessionIndex, info6.activeEra]
    ]) : api.queryMulti([
      api.query.babe.currentSlot,
      api.query.babe.epochIndex,
      api.query.babe.genesisSlot
    ])
  ])), map2(([info6, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [
    info6,
    [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType("SessionIndex", 1)]
  ]));
}
function progress(instanceId, api) {
  return memo(instanceId, () => api.query.babe ? queryBabe(api).pipe(map2(([info6, slots]) => createDerive(api, info6, slots))) : queryAura(api));
}
var eraLength, eraProgress, sessionProgress;
var init_progress = __esm({
  "node_modules/@polkadot/api-derive/session/progress.js"() {
    init_esm5();
    init_util();
    init_util11();
    eraLength = withProgressField("eraLength");
    eraProgress = withProgressField("eraProgress");
    sessionProgress = withProgressField("sessionProgress");
  }
});

// node_modules/@polkadot/api-derive/session/index.js
var session_exports = {};
__export(session_exports, {
  eraLength: () => eraLength,
  eraProgress: () => eraProgress,
  indexes: () => indexes2,
  info: () => info4,
  progress: () => progress,
  sessionProgress: () => sessionProgress
});
var init_session = __esm({
  "node_modules/@polkadot/api-derive/session/index.js"() {
    init_indexes2();
    init_info4();
    init_progress();
  }
});

// node_modules/@polkadot/api-derive/society/candidates.js
function getPrev(api) {
  return api.query.society.candidates().pipe(switchMap((candidates2) => combineLatest([
    of(candidates2),
    api.query.society["suspendedCandidates"].multi(candidates2.map(({ who }) => who))
  ])), map2(([candidates2, suspended]) => candidates2.map(({ kind, value, who }, index) => ({
    accountId: who,
    isSuspended: suspended[index].isSome,
    kind,
    value
  }))));
}
function getCurr(api) {
  return api.query.society.candidates.entries().pipe(map2((entries) => entries.filter(([, opt]) => opt.isSome).map(([{ args: [accountId2] }, opt]) => [accountId2, opt.unwrap()]).map(([accountId2, { bid, kind }]) => ({
    accountId: accountId2,
    isSuspended: false,
    kind,
    value: bid
  }))));
}
function candidates(instanceId, api) {
  return memo(instanceId, () => api.query.society["suspendedCandidates"] && api.query.society.candidates.creator.meta.type.isPlain ? getPrev(api) : getCurr(api));
}
var init_candidates = __esm({
  "node_modules/@polkadot/api-derive/society/candidates.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/society/info.js
function info5(instanceId, api) {
  return memo(instanceId, () => combineLatest([
    api.query.society.bids(),
    api.query.society["defender"] ? api.query.society["defender"]() : of(void 0),
    api.query.society.founder(),
    api.query.society.head(),
    api.query.society["maxMembers"] ? api.query.society["maxMembers"]() : of(void 0),
    api.query.society.pot()
  ]).pipe(map2(([bids, defender, founder, head, maxMembers, pot]) => ({
    bids,
    defender: defender?.unwrapOr(void 0),
    founder: founder.unwrapOr(void 0),
    hasDefender: defender?.isSome && head.isSome && !head.eq(defender) || false,
    head: head.unwrapOr(void 0),
    maxMembers,
    pot
  }))));
}
var init_info5 = __esm({
  "node_modules/@polkadot/api-derive/society/info.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/society/member.js
function member(instanceId, api) {
  return memo(instanceId, (accountId2) => api.derive.society._members([accountId2]).pipe(map2(([result]) => result)));
}
var init_member = __esm({
  "node_modules/@polkadot/api-derive/society/member.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/society/members.js
function _membersPrev(api, accountIds) {
  return combineLatest([
    of(accountIds),
    api.query.society.payouts.multi(accountIds),
    api.query.society["strikes"].multi(accountIds),
    api.query.society.defenderVotes.multi(accountIds),
    api.query.society.suspendedMembers.multi(accountIds),
    api.query.society["vouching"].multi(accountIds)
  ]).pipe(map2(([accountIds2, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds2.map((accountId2, index) => ({
    accountId: accountId2,
    isDefenderVoter: defenderVotes[index].isSome,
    isSuspended: suspended[index].isTrue,
    payouts: payouts[index],
    strikes: strikes[index],
    vote: defenderVotes[index].unwrapOr(void 0),
    vouching: vouching[index].unwrapOr(void 0)
  }))));
}
function _membersCurr(api, accountIds) {
  return combineLatest([
    of(accountIds),
    api.query.society.members.multi(accountIds),
    api.query.society.payouts.multi(accountIds),
    api.query.society.challengeRoundCount().pipe(switchMap((round) => api.query.society.defenderVotes.multi(accountIds.map((accountId2) => [round, accountId2])))),
    api.query.society.suspendedMembers.multi(accountIds)
  ]).pipe(map2(([accountIds2, members7, payouts, defenderVotes, suspendedMembers]) => accountIds2.map((accountId2, index) => members7[index].isSome ? {
    accountId: accountId2,
    isDefenderVoter: defenderVotes[index].isSome,
    isSuspended: suspendedMembers[index].isSome,
    member: members7[index].unwrap(),
    payouts: payouts[index].payouts
  } : null).filter((m) => !!m).map(({ accountId: accountId2, isDefenderVoter, isSuspended, member: member2, payouts: payouts2 }) => ({
    accountId: accountId2,
    isDefenderVoter,
    isSuspended,
    payouts: payouts2,
    strikes: member2.strikes,
    vouching: member2.vouching.unwrapOr(void 0)
  }))));
}
function _members(instanceId, api) {
  return memo(instanceId, (accountIds) => api.query.society.members.creator.meta.type.isMap ? _membersCurr(api, accountIds) : _membersPrev(api, accountIds));
}
function members5(instanceId, api) {
  return memo(instanceId, () => api.query.society.members.creator.meta.type.isMap ? api.query.society.members.keys().pipe(switchMap((keys2) => api.derive.society._members(keys2.map(({ args: [accountId2] }) => accountId2)))) : api.query.society.members().pipe(switchMap((members7) => api.derive.society._members(members7))));
}
var init_members2 = __esm({
  "node_modules/@polkadot/api-derive/society/members.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/society/index.js
var society_exports = {};
__export(society_exports, {
  _members: () => _members,
  candidates: () => candidates,
  info: () => info5,
  member: () => member,
  members: () => members5
});
var init_society = __esm({
  "node_modules/@polkadot/api-derive/society/index.js"() {
    init_candidates();
    init_info5();
    init_member();
    init_members2();
  }
});

// node_modules/@polkadot/api-derive/staking/account.js
function groupByEra(list) {
  return list.reduce((map3, { era, value }) => {
    const key = era.toString();
    map3[key] = (map3[key] || BN_ZERO).add(value.unwrap());
    return map3;
  }, {});
}
function calculateUnlocking(api, stakingLedger, sessionInfo) {
  const results = Object.entries(groupByEra((stakingLedger?.unlocking || []).filter(({ era }) => era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value]) => ({
    remainingEras: new import_bn.default(eraString).isub(sessionInfo.activeEra),
    value: api.registry.createType("Balance", value)
  }));
  return results.length ? results : void 0;
}
function redeemableSum(api, stakingLedger, sessionInfo) {
  return api.registry.createType("Balance", (stakingLedger?.unlocking || []).reduce((total, { era, value }) => {
    return era.unwrap().gt(sessionInfo.currentEra) ? total : total.iadd(value.unwrap());
  }, new import_bn.default(0)));
}
function parseResult2(api, sessionInfo, keys2, query2) {
  return objectSpread({}, keys2, query2, {
    redeemable: redeemableSum(api, query2.stakingLedger, sessionInfo),
    unlocking: calculateUnlocking(api, query2.stakingLedger, sessionInfo)
  });
}
function accounts(instanceId, api) {
  return memo(instanceId, (accountIds, opts = QUERY_OPTS) => api.derive.session.info().pipe(switchMap((sessionInfo) => combineLatest([
    api.derive.staking.keysMulti(accountIds),
    api.derive.staking.queryMulti(accountIds, opts)
  ]).pipe(map2(([keys2, queries]) => queries.map((q2, index) => parseResult2(api, sessionInfo, keys2[index], q2)))))));
}
var QUERY_OPTS, account2;
var init_account2 = __esm({
  "node_modules/@polkadot/api-derive/staking/account.js"() {
    init_esm5();
    init_util();
    init_util11();
    QUERY_OPTS = {
      withDestination: true,
      withLedger: true,
      withNominations: true,
      withPrefs: true
    };
    account2 = firstMemo((api, accountId2, opts) => api.derive.staking.accounts([accountId2], opts));
  }
});

// node_modules/@polkadot/api-derive/staking/currentPoints.js
function currentPoints(instanceId, api) {
  return memo(instanceId, () => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => api.query.staking.erasRewardPoints(activeEra))));
}
var init_currentPoints = __esm({
  "node_modules/@polkadot/api-derive/staking/currentPoints.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/staking/electedInfo.js
function combineAccounts(nextElected2, validators2) {
  return arrayFlatten([nextElected2, validators2.filter((v3) => !nextElected2.find((n) => n.eq(v3)))]);
}
function electedInfo(instanceId, api) {
  return memo(instanceId, (flags2 = DEFAULT_FLAGS) => api.derive.staking.validators().pipe(switchMap(({ nextElected: nextElected2, validators: validators2 }) => api.derive.staking.queryMulti(combineAccounts(nextElected2, validators2), flags2).pipe(map2((info6) => ({
    info: info6,
    nextElected: nextElected2,
    validators: validators2
  }))))));
}
var DEFAULT_FLAGS;
var init_electedInfo = __esm({
  "node_modules/@polkadot/api-derive/staking/electedInfo.js"() {
    init_esm5();
    init_util();
    init_util11();
    DEFAULT_FLAGS = { withController: true, withExposure: true, withPrefs: true };
  }
});

// node_modules/@polkadot/api-derive/staking/cache.js
function getEraCache(CACHE_KEY6, era, withActive) {
  const cacheKey = `${CACHE_KEY6}-${era.toString()}`;
  return [
    cacheKey,
    withActive ? void 0 : deriveCache.get(cacheKey)
  ];
}
function getEraMultiCache(CACHE_KEY6, eras, withActive) {
  const cached = withActive ? [] : eras.map((e) => deriveCache.get(`${CACHE_KEY6}-${e.toString()}`)).filter((v3) => !!v3);
  return cached;
}
function setEraCache(cacheKey, withActive, value) {
  !withActive && deriveCache.set(cacheKey, value);
  return value;
}
function setEraMultiCache(CACHE_KEY6, withActive, values) {
  !withActive && values.forEach((v3) => deriveCache.set(`${CACHE_KEY6}-${v3.era.toString()}`, v3));
  return values;
}
function filterCachedEras(eras, cached, query2) {
  return eras.map((e) => cached.find(({ era }) => e.eq(era)) || query2.find(({ era }) => e.eq(era))).filter((e) => !!e);
}
var init_cache2 = __esm({
  "node_modules/@polkadot/api-derive/staking/cache.js"() {
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/staking/util.js
function chunkEras(eras, fn) {
  const chunked = arrayChunk(eras, ERA_CHUNK_SIZE);
  let index = 0;
  const subject = new BehaviorSubject(chunked[index]);
  return subject.pipe(switchMap(fn), tap(() => {
    nextTick(() => {
      index++;
      index === chunked.length ? subject.complete() : subject.next(chunked[index]);
    });
  }), toArray(), map2(arrayFlatten));
}
function filterEras(eras, list) {
  return eras.filter((e) => !list.some(({ era }) => e.eq(era)));
}
function erasHistoricApply(fn) {
  return (instanceId, api) => (
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((e) => api.derive.staking[fn](e, withActive))))
  );
}
function erasHistoricApplyAccount(fn) {
  return (instanceId, api) => (
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (accountId2, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((e) => api.derive.staking[fn](accountId2, e, withActive))))
  );
}
function singleEra(fn) {
  return (instanceId, api) => (
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (era) => api.derive.staking[fn](era, true))
  );
}
function combineEras(fn) {
  return (instanceId, api) => (
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (eras, withActive) => !eras.length ? of([]) : chunkEras(eras, (eras2) => combineLatest(eras2.map((e) => api.derive.staking[fn](e, withActive)))))
  );
}
var ERA_CHUNK_SIZE;
var init_util18 = __esm({
  "node_modules/@polkadot/api-derive/staking/util.js"() {
    init_esm5();
    init_util();
    init_util11();
    ERA_CHUNK_SIZE = 14;
  }
});

// node_modules/@polkadot/api-derive/staking/erasExposure.js
function mapStakersClipped(era, stakers) {
  const nominators = {};
  const validators2 = {};
  stakers.forEach(([key, exposure]) => {
    const validatorId = key.args[1].toString();
    validators2[validatorId] = exposure;
    exposure.others.forEach(({ who }, validatorIndex) => {
      const nominatorId = who.toString();
      nominators[nominatorId] = nominators[nominatorId] || [];
      nominators[nominatorId].push({ validatorId, validatorIndex });
    });
  });
  return { era, nominators, validators: validators2 };
}
function mapStakersPaged(era, stakers) {
  const nominators = {};
  const validators2 = {};
  stakers.forEach(([key, exposureOpt]) => {
    if (exposureOpt.isSome) {
      const validatorId = key.args[1].toString();
      const exposure = exposureOpt.unwrap();
      validators2[validatorId] = exposure;
      exposure.others.forEach(({ who }, validatorIndex) => {
        const nominatorId = who.toString();
        nominators[nominatorId] = nominators[nominatorId] || [];
        nominators[nominatorId].push({ validatorId, validatorIndex });
      });
    }
  });
  return { era, nominators, validators: validators2 };
}
function _eraExposure(instanceId, api) {
  return memo(instanceId, (era, withActive = false) => {
    const [cacheKey, cached] = getEraCache(CACHE_KEY, era, withActive);
    return cached ? of(cached) : api.query.staking.erasStakersPaged ? api.query.staking.erasStakersPaged.entries(era).pipe(map2((r) => setEraCache(cacheKey, withActive, mapStakersPaged(era, r)))) : api.query.staking.erasStakersClipped.entries(era).pipe(map2((r) => setEraCache(cacheKey, withActive, mapStakersClipped(era, r))));
  });
}
var CACHE_KEY, eraExposure, _erasExposure, erasExposure;
var init_erasExposure = __esm({
  "node_modules/@polkadot/api-derive/staking/erasExposure.js"() {
    init_esm5();
    init_util11();
    init_cache2();
    init_util18();
    CACHE_KEY = "eraExposure";
    eraExposure = singleEra("_eraExposure");
    _erasExposure = combineEras("_eraExposure");
    erasExposure = erasHistoricApply("_erasExposure");
  }
});

// node_modules/@polkadot/api-derive/staking/erasHistoric.js
function erasHistoric(instanceId, api) {
  return memo(instanceId, (withActive) => combineLatest([
    api.query.staking.activeEra(),
    api.consts.staking.historyDepth ? of(api.consts.staking.historyDepth) : api.query.staking["historyDepth"]()
  ]).pipe(map2(([activeEraOpt, historyDepth]) => {
    const result = [];
    const max3 = historyDepth.toNumber();
    const activeEra = activeEraOpt.unwrapOrDefault().index;
    let lastEra = activeEra;
    while (lastEra.gte(BN_ZERO) && result.length < max3) {
      if (lastEra !== activeEra || withActive === true) {
        result.push(api.registry.createType("EraIndex", lastEra));
      }
      lastEra = lastEra.sub(BN_ONE);
    }
    return result.reverse();
  })));
}
var init_erasHistoric = __esm({
  "node_modules/@polkadot/api-derive/staking/erasHistoric.js"() {
    init_esm5();
    init_util();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/staking/erasPoints.js
function mapValidators({ individual }) {
  return [...individual.entries()].filter(([, points]) => points.gt(BN_ZERO)).reduce((result, [validatorId, points]) => {
    result[validatorId.toString()] = points;
    return result;
  }, {});
}
function mapPoints(eras, points) {
  return eras.map((era, index) => ({
    era,
    eraPoints: points[index].total,
    validators: mapValidators(points[index])
  }));
}
function _erasPoints(instanceId, api) {
  return memo(instanceId, (eras, withActive) => {
    if (!eras.length) {
      return of([]);
    }
    const cached = getEraMultiCache(CACHE_KEY2, eras, withActive);
    const remaining = filterEras(eras, cached);
    return !remaining.length ? of(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe(map2((p) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY2, withActive, mapPoints(remaining, p)))));
  });
}
var CACHE_KEY2, erasPoints;
var init_erasPoints = __esm({
  "node_modules/@polkadot/api-derive/staking/erasPoints.js"() {
    init_esm5();
    init_util();
    init_util11();
    init_cache2();
    init_util18();
    CACHE_KEY2 = "eraPoints";
    erasPoints = erasHistoricApply("_erasPoints");
  }
});

// node_modules/@polkadot/api-derive/staking/erasPrefs.js
function mapPrefs(era, all3) {
  const validators2 = {};
  all3.forEach(([key, prefs]) => {
    validators2[key.args[1].toString()] = prefs;
  });
  return { era, validators: validators2 };
}
function _eraPrefs(instanceId, api) {
  return memo(instanceId, (era, withActive) => {
    const [cacheKey, cached] = getEraCache(CACHE_KEY3, era, withActive);
    return cached ? of(cached) : api.query.staking.erasValidatorPrefs.entries(era).pipe(map2((r) => setEraCache(cacheKey, withActive, mapPrefs(era, r))));
  });
}
var CACHE_KEY3, eraPrefs, _erasPrefs, erasPrefs;
var init_erasPrefs = __esm({
  "node_modules/@polkadot/api-derive/staking/erasPrefs.js"() {
    init_esm5();
    init_util11();
    init_cache2();
    init_util18();
    CACHE_KEY3 = "eraPrefs";
    eraPrefs = singleEra("_eraPrefs");
    _erasPrefs = combineEras("_eraPrefs");
    erasPrefs = erasHistoricApply("_erasPrefs");
  }
});

// node_modules/@polkadot/api-derive/staking/erasRewards.js
function mapRewards(eras, optRewards) {
  return eras.map((era, index) => ({
    era,
    eraReward: optRewards[index].unwrapOrDefault()
  }));
}
function _erasRewards(instanceId, api) {
  return memo(instanceId, (eras, withActive) => {
    if (!eras.length) {
      return of([]);
    }
    const cached = getEraMultiCache(CACHE_KEY4, eras, withActive);
    const remaining = filterEras(eras, cached);
    if (!remaining.length) {
      return of(cached);
    }
    return api.query.staking.erasValidatorReward.multi(remaining).pipe(map2((r) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY4, withActive, mapRewards(remaining, r)))));
  });
}
var CACHE_KEY4, erasRewards;
var init_erasRewards = __esm({
  "node_modules/@polkadot/api-derive/staking/erasRewards.js"() {
    init_esm5();
    init_util11();
    init_cache2();
    init_util18();
    CACHE_KEY4 = "eraRewards";
    erasRewards = erasHistoricApply("_erasRewards");
  }
});

// node_modules/@polkadot/api-derive/staking/erasSlashes.js
function mapSlashes(era, noms, vals) {
  const nominators = {};
  const validators2 = {};
  noms.forEach(([key, optBalance]) => {
    nominators[key.args[1].toString()] = optBalance.unwrap();
  });
  vals.forEach(([key, optRes]) => {
    validators2[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
  });
  return { era, nominators, validators: validators2 };
}
function _eraSlashes(instanceId, api) {
  return memo(instanceId, (era, withActive) => {
    const [cacheKey, cached] = getEraCache(CACHE_KEY5, era, withActive);
    return cached ? of(cached) : combineLatest([
      api.query.staking.nominatorSlashInEra.entries(era),
      api.query.staking.validatorSlashInEra.entries(era)
    ]).pipe(map2(([n, v3]) => setEraCache(cacheKey, withActive, mapSlashes(era, n, v3))));
  });
}
var CACHE_KEY5, eraSlashes, _erasSlashes, erasSlashes;
var init_erasSlashes = __esm({
  "node_modules/@polkadot/api-derive/staking/erasSlashes.js"() {
    init_esm5();
    init_util11();
    init_cache2();
    init_util18();
    CACHE_KEY5 = "eraSlashes";
    eraSlashes = singleEra("_eraSlashes");
    _erasSlashes = combineEras("_eraSlashes");
    erasSlashes = erasHistoricApply("_erasSlashes");
  }
});

// node_modules/@polkadot/api-derive/staking/keys.js
function extractsIds(stashId, queuedKeys, nextKeys) {
  const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [void 0, []])[1];
  const nextSessionIds = nextKeys.unwrapOr([]);
  return {
    nextSessionIds: Array.isArray(nextSessionIds) ? nextSessionIds : [...nextSessionIds.values()],
    sessionIds: Array.isArray(sessionIds) ? sessionIds : [...sessionIds.values()]
  };
}
function keysMulti(instanceId, api) {
  return memo(instanceId, (stashIds) => stashIds.length ? api.query.session.queuedKeys().pipe(switchMap((queuedKeys) => combineLatest([
    of(queuedKeys),
    api.consts["session"]?.["dedupKeyPrefix"] ? api.query.session.nextKeys.multi(stashIds.map((s) => [api.consts["session"]["dedupKeyPrefix"], s])) : combineLatest(stashIds.map((s) => api.query.session.nextKeys(s)))
  ])), map2(([queuedKeys, nextKeys]) => stashIds.map((stashId, index) => extractsIds(stashId, queuedKeys, nextKeys[index])))) : of([]));
}
var keys;
var init_keys2 = __esm({
  "node_modules/@polkadot/api-derive/staking/keys.js"() {
    init_esm5();
    init_util11();
    keys = firstMemo((api, stashId) => api.derive.staking.keysMulti([stashId]));
  }
});

// node_modules/@polkadot/api-derive/staking/overview.js
function overview2(instanceId, api) {
  return memo(instanceId, () => combineLatest([
    api.derive.session.indexes(),
    api.derive.staking.validators()
  ]).pipe(map2(([indexes3, { nextElected: nextElected2, validators: validators2 }]) => objectSpread({}, indexes3, {
    nextElected: nextElected2,
    validators: validators2
  }))));
}
var init_overview2 = __esm({
  "node_modules/@polkadot/api-derive/staking/overview.js"() {
    init_esm5();
    init_util();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/staking/ownExposure.js
function _ownExposures(instanceId, api) {
  return memo(instanceId, (accountId2, eras, _withActive) => eras.length ? combineLatest([
    combineLatest(eras.map((e) => api.query.staking.erasStakersClipped(e, accountId2))),
    combineLatest(eras.map((e) => api.query.staking.erasStakers(e, accountId2)))
  ]).pipe(map2(([clp, exp]) => eras.map((era, index) => ({ clipped: clp[index], era, exposure: exp[index] })))) : of([]));
}
var ownExposure, ownExposures;
var init_ownExposure = __esm({
  "node_modules/@polkadot/api-derive/staking/ownExposure.js"() {
    init_esm5();
    init_util11();
    init_util18();
    ownExposure = firstMemo((api, accountId2, era) => api.derive.staking._ownExposures(accountId2, [era], true));
    ownExposures = erasHistoricApplyAccount("_ownExposures");
  }
});

// node_modules/@polkadot/api-derive/staking/ownSlashes.js
function _ownSlashes(instanceId, api) {
  return memo(instanceId, (accountId2, eras, _withActive) => eras.length ? combineLatest([
    combineLatest(eras.map((e) => api.query.staking.validatorSlashInEra(e, accountId2))),
    combineLatest(eras.map((e) => api.query.staking.nominatorSlashInEra(e, accountId2)))
  ]).pipe(map2(([vals, noms]) => eras.map((era, index) => ({
    era,
    total: vals[index].isSome ? vals[index].unwrap()[1] : noms[index].unwrapOrDefault()
  })))) : of([]));
}
var ownSlash, ownSlashes;
var init_ownSlashes = __esm({
  "node_modules/@polkadot/api-derive/staking/ownSlashes.js"() {
    init_esm5();
    init_util11();
    init_util18();
    ownSlash = firstMemo((api, accountId2, era) => api.derive.staking._ownSlashes(accountId2, [era], true));
    ownSlashes = erasHistoricApplyAccount("_ownSlashes");
  }
});

// node_modules/@polkadot/api-derive/staking/query.js
function rewardDestinationCompat(rewardDestination) {
  return typeof rewardDestination.isSome === "boolean" ? rewardDestination.unwrapOr(null) : rewardDestination;
}
function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestinationOpts, validatorPrefs, exposure, stakingLedgerOpt) {
  return {
    accountId: stashId,
    controllerId: controllerIdOpt?.unwrapOr(null) || null,
    exposure,
    nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],
    rewardDestination: rewardDestinationCompat(rewardDestinationOpts),
    stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
    stashId,
    validatorPrefs
  };
}
function getLedgers(api, optIds, { withLedger = false }) {
  const ids = optIds.filter((o) => withLedger && !!o && o.isSome).map((o) => o.unwrap());
  const emptyLed = api.registry.createType("Option<StakingLedger>");
  return (ids.length ? combineLatest(ids.map((s) => api.query.staking.ledger(s))) : of([])).pipe(map2((optLedgers) => {
    let offset = -1;
    return optIds.map((o) => o && o.isSome ? optLedgers[++offset] || emptyLed : emptyLed);
  }));
}
function getStashInfo(api, stashIds, activeEra, { withController, withDestination, withExposure, withLedger, withNominations, withPrefs }) {
  const emptyNoms = api.registry.createType("Option<Nominations>");
  const emptyRewa = api.registry.createType("RewardDestination");
  const emptyExpo = api.registry.createType("Exposure");
  const emptyPrefs = api.registry.createType("ValidatorPrefs");
  return combineLatest([
    withController || withLedger ? combineLatest(stashIds.map((s) => api.query.staking.bonded(s))) : of(stashIds.map(() => null)),
    withNominations ? combineLatest(stashIds.map((s) => api.query.staking.nominators(s))) : of(stashIds.map(() => emptyNoms)),
    withDestination ? combineLatest(stashIds.map((s) => api.query.staking.payee(s))) : of(stashIds.map(() => emptyRewa)),
    withPrefs ? combineLatest(stashIds.map((s) => api.query.staking.validators(s))) : of(stashIds.map(() => emptyPrefs)),
    withExposure ? combineLatest(stashIds.map((s) => api.query.staking.erasStakers(activeEra, s))) : of(stashIds.map(() => emptyExpo))
  ]);
}
function getBatch(api, activeEra, stashIds, flags2) {
  return getStashInfo(api, stashIds, activeEra, flags2).pipe(switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags2).pipe(map2((stakingLedgerOpts) => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));
}
function queryMulti(instanceId, api) {
  return memo(instanceId, (accountIds, flags2) => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => {
    const stashIds = accountIds.map((a) => api.registry.createType("AccountId", a));
    return stashIds.length ? getBatch(api, activeEra, stashIds, flags2) : of([]);
  })));
}
var query;
var init_query = __esm({
  "node_modules/@polkadot/api-derive/staking/query.js"() {
    init_esm5();
    init_util11();
    query = firstMemo((api, accountId2, flags2) => api.derive.staking.queryMulti([accountId2], flags2));
  }
});

// node_modules/@polkadot/api-derive/staking/stakerExposure.js
function _stakerExposures(instanceId, api) {
  return memo(instanceId, (accountIds, eras, withActive = false) => {
    const stakerIds = accountIds.map((a) => api.registry.createType("AccountId", a).toString());
    return api.derive.staking._erasExposure(eras, withActive).pipe(map2((exposures) => stakerIds.map((stakerId) => exposures.map(({ era, nominators: allNominators, validators: allValidators }) => {
      const isValidator = !!allValidators[stakerId];
      const validators2 = {};
      const nominating = allNominators[stakerId] || [];
      if (isValidator) {
        validators2[stakerId] = allValidators[stakerId];
      } else if (nominating) {
        nominating.forEach(({ validatorId }) => {
          validators2[validatorId] = allValidators[validatorId];
        });
      }
      return { era, isEmpty: !Object.keys(validators2).length, isValidator, nominating, validators: validators2 };
    }))));
  });
}
function stakerExposures(instanceId, api) {
  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerExposures(accountIds, eras, withActive))));
}
var stakerExposure;
var init_stakerExposure = __esm({
  "node_modules/@polkadot/api-derive/staking/stakerExposure.js"() {
    init_esm5();
    init_util11();
    stakerExposure = firstMemo((api, accountId2, withActive) => api.derive.staking.stakerExposures([accountId2], withActive));
  }
});

// node_modules/@polkadot/api-derive/staking/stakerPoints.js
function _stakerPoints(instanceId, api) {
  return memo(instanceId, (accountId2, eras, withActive) => {
    const stakerId = api.registry.createType("AccountId", accountId2).toString();
    return api.derive.staking._erasPoints(eras, withActive).pipe(map2((points) => points.map(({ era, eraPoints, validators: validators2 }) => ({
      era,
      eraPoints,
      points: validators2[stakerId] || api.registry.createType("RewardPoint")
    }))));
  });
}
var stakerPoints;
var init_stakerPoints = __esm({
  "node_modules/@polkadot/api-derive/staking/stakerPoints.js"() {
    init_esm5();
    init_util11();
    init_util18();
    stakerPoints = erasHistoricApplyAccount("_stakerPoints");
  }
});

// node_modules/@polkadot/api-derive/staking/stakerPrefs.js
function _stakerPrefs(instanceId, api) {
  return memo(instanceId, (accountId2, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map((e) => [e, accountId2])).pipe(map2((all3) => all3.map((validatorPrefs, index) => ({
    era: eras[index],
    validatorPrefs
  })))));
}
var stakerPrefs;
var init_stakerPrefs = __esm({
  "node_modules/@polkadot/api-derive/staking/stakerPrefs.js"() {
    init_esm5();
    init_util11();
    init_util18();
    stakerPrefs = erasHistoricApplyAccount("_stakerPrefs");
  }
});

// node_modules/@polkadot/api-derive/staking/stakerRewards.js
function extractCompatRewards(ledger) {
  return ledger ? ledger.legacyClaimedRewards || ledger.claimedRewards : [];
}
function parseRewards(api, stashId, [erasPoints2, erasPrefs2, erasRewards2], exposures) {
  return exposures.map(({ era, isEmpty: isEmpty2, isValidator, nominating, validators: eraValidators }) => {
    const { eraPoints, validators: allValPoints } = erasPoints2.find((p) => p.era.eq(era)) || { eraPoints: BN_ZERO, validators: {} };
    const { eraReward } = erasRewards2.find((r) => r.era.eq(era)) || { eraReward: api.registry.createType("Balance") };
    const { validators: allValPrefs } = erasPrefs2.find((p) => p.era.eq(era)) || { validators: {} };
    const validators2 = {};
    const stakerId = stashId.toString();
    Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
      const valPoints = allValPoints[validatorId] || BN_ZERO;
      const valComm = allValPrefs[validatorId]?.commission.unwrap() || BN_ZERO;
      const expTotal = exposure.total ? exposure.total?.unwrap() : exposure.pageTotal ? exposure.pageTotal?.unwrap() : BN_ZERO;
      let avail = BN_ZERO;
      let value;
      if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
        avail = eraReward.mul(valPoints).div(eraPoints);
        const valCut = valComm.mul(avail).div(BN_BILLION);
        let staked;
        if (validatorId === stakerId) {
          if (exposure.own) {
            staked = exposure.own.unwrap();
          } else {
            const expAccount = exposure.others.find(({ who }) => who.eq(validatorId));
            staked = expAccount ? expAccount.value.unwrap() : BN_ZERO;
          }
        } else {
          const stakerExp = exposure.others.find(({ who }) => who.eq(stakerId));
          staked = stakerExp ? stakerExp.value.unwrap() : BN_ZERO;
        }
        value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO);
      }
      validators2[validatorId] = {
        total: api.registry.createType("Balance", avail),
        value: api.registry.createType("Balance", value)
      };
    });
    return {
      era,
      eraReward,
      isEmpty: isEmpty2,
      isValidator,
      nominating,
      validators: validators2
    };
  });
}
function allUniqValidators(rewards) {
  return rewards.reduce(([all3, perStash], rewards2) => {
    const uniq = [];
    perStash.push(uniq);
    rewards2.forEach(({ validators: validators2 }) => Object.keys(validators2).forEach((validatorId) => {
      if (!uniq.includes(validatorId)) {
        uniq.push(validatorId);
        if (!all3.includes(validatorId)) {
          all3.push(validatorId);
        }
      }
    }));
    return [all3, perStash];
  }, [[], []]);
}
function removeClaimed(validators2, queryValidators, reward) {
  const rm = [];
  Object.keys(reward.validators).forEach((validatorId) => {
    const index = validators2.indexOf(validatorId);
    if (index !== -1) {
      const valLedger = queryValidators[index].stakingLedger;
      if (extractCompatRewards(valLedger).some((e) => reward.era.eq(e))) {
        rm.push(validatorId);
      }
    }
  });
  rm.forEach((validatorId) => {
    delete reward.validators[validatorId];
  });
}
function filterRewards(eras, valInfo, { rewards, stakingLedger }) {
  const filter2 = eras.filter((e) => !extractCompatRewards(stakingLedger).some((s) => s.eq(e)));
  const validators2 = valInfo.map(([v3]) => v3);
  const queryValidators = valInfo.map(([, q2]) => q2);
  return rewards.filter(({ isEmpty: isEmpty2 }) => !isEmpty2).filter((reward) => {
    if (!filter2.some((e) => reward.era.eq(e))) {
      return false;
    }
    removeClaimed(validators2, queryValidators, reward);
    return true;
  }).filter(({ validators: validators3 }) => Object.keys(validators3).length !== 0).map((reward) => objectSpread({}, reward, {
    nominators: reward.nominating.filter((n) => reward.validators[n.validatorId])
  }));
}
function _stakerRewardsEras(instanceId, api) {
  return memo(instanceId, (eras, withActive = false) => combineLatest([
    api.derive.staking._erasPoints(eras, withActive),
    api.derive.staking._erasPrefs(eras, withActive),
    api.derive.staking._erasRewards(eras, withActive)
  ]));
}
function _stakerRewards(instanceId, api) {
  return memo(instanceId, (accountIds, eras, withActive = false) => combineLatest([
    api.derive.staking.queryMulti(accountIds, { withLedger: true }),
    api.derive.staking._stakerExposures(accountIds, eras, withActive),
    api.derive.staking._stakerRewardsEras(eras, withActive)
  ]).pipe(switchMap(([queries, exposures, erasResult]) => {
    const allRewards = queries.map(({ stakingLedger, stashId }, index) => !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]));
    if (withActive) {
      return of(allRewards);
    }
    const [allValidators, stashValidators] = allUniqValidators(allRewards);
    return api.derive.staking.queryMulti(allValidators, { withLedger: true }).pipe(map2((queriedVals) => queries.map(({ stakingLedger }, index) => filterRewards(eras, stashValidators[index].map((validatorId) => [
      validatorId,
      queriedVals.find((q2) => q2.accountId.eq(validatorId))
    ]).filter((v3) => !!v3[1]), {
      rewards: allRewards[index],
      stakingLedger
    }))));
  })));
}
function stakerRewardsMultiEras(instanceId, api) {
  return memo(instanceId, (accountIds, eras) => accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : of([]));
}
function stakerRewardsMulti(instanceId, api) {
  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
}
var stakerRewards;
var init_stakerRewards = __esm({
  "node_modules/@polkadot/api-derive/staking/stakerRewards.js"() {
    init_esm5();
    init_util();
    init_util11();
    stakerRewards = firstMemo((api, accountId2, withActive) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerRewards([accountId2], eras, withActive))));
  }
});

// node_modules/@polkadot/api-derive/staking/stakerSlashes.js
function _stakerSlashes(instanceId, api) {
  return memo(instanceId, (accountId2, eras, withActive) => {
    const stakerId = api.registry.createType("AccountId", accountId2).toString();
    return api.derive.staking._erasSlashes(eras, withActive).pipe(map2((slashes) => slashes.map(({ era, nominators, validators: validators2 }) => ({
      era,
      total: nominators[stakerId] || validators2[stakerId] || api.registry.createType("Balance")
    }))));
  });
}
var stakerSlashes;
var init_stakerSlashes = __esm({
  "node_modules/@polkadot/api-derive/staking/stakerSlashes.js"() {
    init_esm5();
    init_util11();
    init_util18();
    stakerSlashes = erasHistoricApplyAccount("_stakerSlashes");
  }
});

// node_modules/@polkadot/api-derive/staking/stashes.js
function onBondedEvent(api) {
  let current = Date.now();
  return api.query.system.events().pipe(map2((events2) => {
    current = events2.filter(({ event, phase }) => {
      try {
        return phase.isApplyExtrinsic && event.section === "staking" && event.method === "Bonded";
      } catch {
        return false;
      }
    }) ? Date.now() : current;
    return current;
  }), startWith(current), drr({ skipTimeout: true }));
}
function stashes(instanceId, api) {
  return memo(instanceId, () => onBondedEvent(api).pipe(switchMap(() => api.query.staking.validators.keys()), map2((keys2) => keys2.map(({ args: [v3] }) => v3).filter((a) => a))));
}
var init_stashes = __esm({
  "node_modules/@polkadot/api-derive/staking/stashes.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/staking/validators.js
function nextElected(instanceId, api) {
  return memo(instanceId, () => api.query.staking.erasStakers ? api.derive.session.indexes().pipe(
    // only populate for next era in the last session, so track both here - entries are not
    // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
    switchMap(({ currentEra }) => api.query.staking.erasStakers.keys(currentEra)),
    map2((keys2) => keys2.map(({ args: [, accountId2] }) => accountId2))
  ) : api.query.staking["currentElected"]());
}
function validators(instanceId, api) {
  return memo(instanceId, () => (
    // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
    // in all actual real-world deployed chains, it does create some confusion for limited template chains
    combineLatest([
      api.query.session ? api.query.session.validators() : of([]),
      api.query.staking ? api.derive.staking.nextElected() : of([])
    ]).pipe(map2(([validators2, nextElected2]) => ({
      nextElected: nextElected2.length ? nextElected2 : validators2,
      validators: validators2
    })))
  ));
}
var init_validators = __esm({
  "node_modules/@polkadot/api-derive/staking/validators.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/staking/waitingInfo.js
function waitingInfo(instanceId, api) {
  return memo(instanceId, (flags2 = DEFAULT_FLAGS2) => combineLatest([
    api.derive.staking.validators(),
    api.derive.staking.stashes()
  ]).pipe(switchMap(([{ nextElected: nextElected2 }, stashes2]) => {
    const elected = nextElected2.map((a) => a.toString());
    const waiting = stashes2.filter((v3) => !elected.includes(v3.toString()));
    return api.derive.staking.queryMulti(waiting, flags2).pipe(map2((info6) => ({
      info: info6,
      waiting
    })));
  })));
}
var DEFAULT_FLAGS2;
var init_waitingInfo = __esm({
  "node_modules/@polkadot/api-derive/staking/waitingInfo.js"() {
    init_esm5();
    init_util11();
    DEFAULT_FLAGS2 = { withController: true, withPrefs: true };
  }
});

// node_modules/@polkadot/api-derive/staking/index.js
var staking_exports = {};
__export(staking_exports, {
  _eraExposure: () => _eraExposure,
  _eraPrefs: () => _eraPrefs,
  _eraSlashes: () => _eraSlashes,
  _erasExposure: () => _erasExposure,
  _erasPoints: () => _erasPoints,
  _erasPrefs: () => _erasPrefs,
  _erasRewards: () => _erasRewards,
  _erasSlashes: () => _erasSlashes,
  _ownExposures: () => _ownExposures,
  _ownSlashes: () => _ownSlashes,
  _stakerExposures: () => _stakerExposures,
  _stakerPoints: () => _stakerPoints,
  _stakerPrefs: () => _stakerPrefs,
  _stakerRewards: () => _stakerRewards,
  _stakerRewardsEras: () => _stakerRewardsEras,
  _stakerSlashes: () => _stakerSlashes,
  account: () => account2,
  accounts: () => accounts,
  currentPoints: () => currentPoints,
  electedInfo: () => electedInfo,
  eraExposure: () => eraExposure,
  eraPrefs: () => eraPrefs,
  eraSlashes: () => eraSlashes,
  erasExposure: () => erasExposure,
  erasHistoric: () => erasHistoric,
  erasPoints: () => erasPoints,
  erasPrefs: () => erasPrefs,
  erasRewards: () => erasRewards,
  erasSlashes: () => erasSlashes,
  keys: () => keys,
  keysMulti: () => keysMulti,
  nextElected: () => nextElected,
  overview: () => overview2,
  ownExposure: () => ownExposure,
  ownExposures: () => ownExposures,
  ownSlash: () => ownSlash,
  ownSlashes: () => ownSlashes,
  query: () => query,
  queryMulti: () => queryMulti,
  stakerExposure: () => stakerExposure,
  stakerExposures: () => stakerExposures,
  stakerPoints: () => stakerPoints,
  stakerPrefs: () => stakerPrefs,
  stakerRewards: () => stakerRewards,
  stakerRewardsMulti: () => stakerRewardsMulti,
  stakerRewardsMultiEras: () => stakerRewardsMultiEras,
  stakerSlashes: () => stakerSlashes,
  stashes: () => stashes,
  validators: () => validators,
  waitingInfo: () => waitingInfo
});
var init_staking = __esm({
  "node_modules/@polkadot/api-derive/staking/index.js"() {
    init_account2();
    init_currentPoints();
    init_electedInfo();
    init_erasExposure();
    init_erasHistoric();
    init_erasPoints();
    init_erasPrefs();
    init_erasRewards();
    init_erasSlashes();
    init_keys2();
    init_overview2();
    init_ownExposure();
    init_ownSlashes();
    init_query();
    init_stakerExposure();
    init_stakerPoints();
    init_stakerPrefs();
    init_stakerRewards();
    init_stakerSlashes();
    init_stashes();
    init_validators();
    init_waitingInfo();
  }
});

// node_modules/@polkadot/api-derive/technicalCommittee/index.js
var technicalCommittee_exports = {};
__export(technicalCommittee_exports, {
  hasProposals: () => hasProposals5,
  members: () => members6,
  prime: () => prime5,
  proposal: () => proposal5,
  proposalCount: () => proposalCount5,
  proposalHashes: () => proposalHashes5,
  proposals: () => proposals6
});
var members6, hasProposals5, proposal5, proposalCount5, proposalHashes5, proposals6, prime5;
var init_technicalCommittee = __esm({
  "node_modules/@polkadot/api-derive/technicalCommittee/index.js"() {
    init_collective();
    members6 = members("technicalCommittee");
    hasProposals5 = hasProposals("technicalCommittee");
    proposal5 = proposal("technicalCommittee");
    proposalCount5 = proposalCount("technicalCommittee");
    proposalHashes5 = proposalHashes("technicalCommittee");
    proposals6 = proposals("technicalCommittee");
    prime5 = prime("technicalCommittee");
  }
});

// node_modules/@polkadot/api-derive/treasury/proposals.js
function parseResult3(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount: proposalCount6 }) {
  const approvals = [];
  const proposals8 = [];
  const councilTreasury = councilProposals.filter(({ proposal: proposal6 }) => proposal6 && (api.tx.treasury.approveProposal.is(proposal6) || api.tx.treasury.rejectProposal.is(proposal6)));
  allIds.forEach((id, index) => {
    if (allProposals[index].isSome) {
      const council = councilTreasury.filter(({ proposal: proposal6 }) => proposal6 && id.eq(proposal6.args[0])).sort((a, b2) => a.proposal && b2.proposal ? a.proposal.method.localeCompare(b2.proposal.method) : a.proposal ? -1 : 1);
      const isApproval = approvalIds.some((approvalId) => approvalId.eq(id));
      const derived = { council, id, proposal: allProposals[index].unwrap() };
      if (isApproval) {
        approvals.push(derived);
      } else {
        proposals8.push(derived);
      }
    }
  });
  return { approvals, proposalCount: proposalCount6, proposals: proposals8 };
}
function retrieveProposals(api, proposalCount6, approvalIds) {
  const proposalIds = [];
  const count2 = proposalCount6.toNumber();
  for (let index = 0; index < count2; index++) {
    if (!approvalIds.some((id) => id.eqn(index))) {
      proposalIds.push(api.registry.createType("ProposalIndex", index));
    }
  }
  const allIds = [...proposalIds, ...approvalIds];
  return combineLatest([
    api.query.treasury.proposals.multi(allIds),
    api.derive.council ? api.derive.council.proposals() : of([])
  ]).pipe(map2(([allProposals, councilProposals]) => parseResult3(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount: proposalCount6 })));
}
function proposals7(instanceId, api) {
  return memo(instanceId, () => api.query.treasury ? combineLatest([
    api.query.treasury.proposalCount(),
    api.query.treasury.approvals()
  ]).pipe(switchMap(([proposalCount6, approvalIds]) => retrieveProposals(api, proposalCount6, approvalIds))) : of({
    approvals: [],
    proposalCount: api.registry.createType("ProposalIndex"),
    proposals: []
  }));
}
var init_proposals3 = __esm({
  "node_modules/@polkadot/api-derive/treasury/proposals.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/treasury/index.js
var treasury_exports = {};
__export(treasury_exports, {
  proposals: () => proposals7
});
var init_treasury = __esm({
  "node_modules/@polkadot/api-derive/treasury/index.js"() {
    init_proposals3();
  }
});

// node_modules/@polkadot/api-derive/tx/events.js
function events(instanceId, api) {
  return memo(instanceId, (blockHash) => combineLatest([
    api.rpc.chain.getBlock(blockHash),
    api.queryAt(blockHash).pipe(switchMap((queryAt) => queryAt.system.events()))
  ]).pipe(map2(([block, events2]) => ({ block, events: events2 }))));
}
var init_events2 = __esm({
  "node_modules/@polkadot/api-derive/tx/events.js"() {
    init_esm5();
    init_util11();
  }
});

// node_modules/@polkadot/api-derive/tx/constants.js
var FALLBACK_MAX_HASH_COUNT, FALLBACK_PERIOD, MAX_FINALITY_LAG, MORTAL_PERIOD;
var init_constants4 = __esm({
  "node_modules/@polkadot/api-derive/tx/constants.js"() {
    init_util();
    FALLBACK_MAX_HASH_COUNT = 250;
    FALLBACK_PERIOD = new import_bn.default(6 * 1e3);
    MAX_FINALITY_LAG = new import_bn.default(5);
    MORTAL_PERIOD = new import_bn.default(5 * 60 * 1e3);
  }
});

// node_modules/@polkadot/api-derive/tx/signingInfo.js
function latestNonce(api, address) {
  return api.derive.balances.account(address).pipe(map2(({ accountNonce }) => accountNonce));
}
function nextNonce(api, address) {
  return api.rpc.system?.accountNextIndex ? api.rpc.system.accountNextIndex(address) : latestNonce(api, address);
}
function signingHeader(api) {
  return combineLatest([
    api.rpc.chain.getHeader().pipe(switchMap((header) => (
      // check for chains at genesis (until block 1 is produced, e.g. 6s), since
      // we do need to allow transactions at chain start (also dev/seal chains)
      header.parentHash.isEmpty ? of(header) : api.rpc.chain.getHeader(header.parentHash).pipe(catchError(() => of(header)))
    ))),
    api.rpc.chain.getFinalizedHead().pipe(switchMap((hash2) => api.rpc.chain.getHeader(hash2).pipe(catchError(() => of(null)))))
  ]).pipe(map2(([current, finalized]) => (
    // determine the hash to use, current when lag > max, else finalized
    !finalized || unwrapBlockNumber(current).sub(unwrapBlockNumber(finalized)).gt(MAX_FINALITY_LAG) ? current : finalized
  )));
}
function babeOrAuraPeriod(api) {
  const period = api.consts.babe?.expectedBlockTime || // this will be present ones https://github.com/paritytech/polkadot-sdk/pull/3732 is merged
  api.consts["aura"]?.slotDuration || api.consts.timestamp?.minimumPeriod.muln(2);
  return !period.isZero() ? period : void 0;
}
function signingInfo(_instanceId, api) {
  return (address, nonce, era) => combineLatest([
    // retrieve nonce if none was specified
    isUndefined(nonce) ? latestNonce(api, address) : nonce === -1 ? nextNonce(api, address) : of(api.registry.createType("Index", nonce)),
    // if no era (create) or era > 0 (mortal), do block retrieval
    isUndefined(era) || isNumber(era) && era > 0 ? signingHeader(api) : of(null)
  ]).pipe(map2(([nonce2, header]) => ({
    header,
    mortalLength: Math.min(api.consts.system?.blockHashCount?.toNumber() || FALLBACK_MAX_HASH_COUNT, MORTAL_PERIOD.div(babeOrAuraPeriod(api) || FALLBACK_PERIOD).iadd(MAX_FINALITY_LAG).toNumber()),
    nonce: nonce2
  })));
}
var init_signingInfo = __esm({
  "node_modules/@polkadot/api-derive/tx/signingInfo.js"() {
    init_esm5();
    init_util();
    init_util11();
    init_constants4();
  }
});

// node_modules/@polkadot/api-derive/tx/index.js
var tx_exports = {};
__export(tx_exports, {
  events: () => events,
  signingInfo: () => signingInfo
});
var init_tx = __esm({
  "node_modules/@polkadot/api-derive/tx/index.js"() {
    init_events2();
    init_signingInfo();
  }
});

// node_modules/@polkadot/api-derive/derive.js
var derive;
var init_derive3 = __esm({
  "node_modules/@polkadot/api-derive/derive.js"() {
    init_accounts();
    init_alliance();
    init_bagsList();
    init_balances();
    init_bounties2();
    init_chain();
    init_contracts();
    init_council();
    init_crowdloan();
    init_democracy();
    init_elections();
    init_imOnline();
    init_membership();
    init_parachains();
    init_session();
    init_society();
    init_staking();
    init_technicalCommittee();
    init_treasury();
    init_tx();
    derive = { accounts: accounts_exports, alliance: alliance_exports, bagsList: bagsList_exports, balances: balances_exports, bounties: bounties_exports, chain: chain_exports, contracts: contracts_exports, council: council_exports, crowdloan: crowdloan_exports, democracy: democracy_exports, elections: elections_exports, imOnline: imOnline_exports, membership: membership_exports, parachains: parachains_exports, session: session_exports, society: society_exports, staking: staking_exports, technicalCommittee: technicalCommittee_exports, treasury: treasury_exports, tx: tx_exports };
  }
});

// node_modules/@polkadot/api-derive/bundle.js
function getModuleInstances(api, specName, moduleName) {
  return api.registry.getModuleInstances(specName, moduleName) || [];
}
function injectFunctions(instanceId, api, derives) {
  const result = {};
  const names = Object.keys(derives);
  const keys2 = Object.keys(api.query);
  const specName = api.runtimeVersion.specName;
  const filterKeys = (q2) => keys2.includes(q2);
  const filterInstances = (q2) => getModuleInstances(api, specName, q2).some(filterKeys);
  const filterMethods = (all3) => (m) => all3.some((q2) => keys2.includes(q2) && api.query[q2][m]);
  const getKeys2 = (s) => Object.keys(derives[s]);
  const creator = (s, m) => derives[s][m](instanceId, api);
  const isIncluded = (c) => !checks[c] || (checks[c].instances.some(filterKeys) && (!checks[c].methods.length || checks[c].methods.every(filterMethods(checks[c].instances))) || checks[c].withDetect && checks[c].instances.some(filterInstances));
  for (let i = 0, count2 = names.length; i < count2; i++) {
    const name = names[i];
    isIncluded(name) && lazyDeriveSection(result, name, getKeys2, creator);
  }
  return result;
}
function getAvailableDerives(instanceId, api, custom2 = {}) {
  return {
    ...injectFunctions(instanceId, api, derive),
    ...injectFunctions(instanceId, api, custom2)
  };
}
var checks;
var init_bundle14 = __esm({
  "node_modules/@polkadot/api-derive/bundle.js"() {
    init_util11();
    init_derive3();
    init_derive3();
    init_type2();
    checks = {
      allianceMotion: {
        instances: ["allianceMotion"],
        methods: []
      },
      bagsList: {
        instances: ["voterBagsList", "voterList", "bagsList"],
        methods: [],
        withDetect: true
      },
      contracts: {
        instances: ["contracts"],
        methods: []
      },
      council: {
        instances: ["council"],
        methods: [],
        withDetect: true
      },
      crowdloan: {
        instances: ["crowdloan"],
        methods: []
      },
      democracy: {
        instances: ["democracy"],
        methods: []
      },
      elections: {
        instances: ["phragmenElection", "electionsPhragmen", "elections", "council"],
        methods: [],
        withDetect: true
      },
      imOnline: {
        instances: ["imOnline"],
        methods: []
      },
      membership: {
        instances: ["membership"],
        methods: []
      },
      parachains: {
        instances: ["parachains", "registrar"],
        methods: []
      },
      session: {
        instances: ["session"],
        methods: []
      },
      society: {
        instances: ["society"],
        methods: []
      },
      staking: {
        instances: ["staking"],
        methods: ["erasRewardPoints"]
      },
      technicalCommittee: {
        instances: ["technicalCommittee"],
        methods: [],
        withDetect: true
      },
      treasury: {
        instances: ["treasury"],
        methods: []
      }
    };
  }
});

// node_modules/@polkadot/api-derive/index.js
var init_api_derive = __esm({
  "node_modules/@polkadot/api-derive/index.js"() {
    init_packageDetect8();
    init_bundle14();
  }
});

// node_modules/@polkadot/api/util/decorate.js
function decorateDeriveSections(decorateMethod, derives) {
  const getKeys2 = (s) => Object.keys(derives[s]);
  const creator = (s, m) => decorateMethod(derives[s][m]);
  const result = {};
  const names = Object.keys(derives);
  for (let i = 0, count2 = names.length; i < count2; i++) {
    lazyDeriveSection(result, names[i], getKeys2, creator);
  }
  return result;
}
var init_decorate2 = __esm({
  "node_modules/@polkadot/api/util/decorate.js"() {
    init_api_derive();
  }
});

// node_modules/@polkadot/api/util/index.js
var init_util19 = __esm({
  "node_modules/@polkadot/api/util/index.js"() {
    init_filterEvents();
    init_isKeyringPair();
    init_logging();
    init_decorate2();
  }
});

// node_modules/@polkadot/api/submittable/Result.js
function filterAndApply(events2, section2, methods, onFound) {
  return events2.filter(({ event }) => section2 === event.section && methods.includes(event.method)).map((record) => onFound(record));
}
function getDispatchError({ event: { data: [dispatchError] } }) {
  return dispatchError;
}
function getDispatchInfo({ event: { data, method } }) {
  return method === "ExtrinsicSuccess" ? data[0] : data[1];
}
function extractError(events2 = []) {
  return filterAndApply(events2, "system", ["ExtrinsicFailed"], getDispatchError)[0];
}
function extractInfo(events2 = []) {
  return filterAndApply(events2, "system", ["ExtrinsicFailed", "ExtrinsicSuccess"], getDispatchInfo)[0];
}
var recordIdentity, SubmittableResult;
var init_Result2 = __esm({
  "node_modules/@polkadot/api/submittable/Result.js"() {
    recordIdentity = (record) => record;
    SubmittableResult = class {
      dispatchError;
      dispatchInfo;
      internalError;
      events;
      status;
      txHash;
      txIndex;
      blockNumber;
      constructor({ blockNumber, dispatchError, dispatchInfo, events: events2, internalError, status, txHash, txIndex }) {
        this.dispatchError = dispatchError || extractError(events2);
        this.dispatchInfo = dispatchInfo || extractInfo(events2);
        this.events = events2 || [];
        this.internalError = internalError;
        this.status = status;
        this.txHash = txHash;
        this.txIndex = txIndex;
        this.blockNumber = blockNumber;
      }
      get isCompleted() {
        return this.isError || this.status.isInBlock || this.status.isFinalized;
      }
      get isError() {
        return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
      }
      get isFinalized() {
        return this.status.isFinalized;
      }
      get isInBlock() {
        return this.status.isInBlock;
      }
      get isWarning() {
        return this.status.isRetracted;
      }
      /**
       * @description Filters EventRecords for the specified method & section (there could be multiple)
       */
      filterRecords(section2, method) {
        return filterAndApply(this.events, section2, Array.isArray(method) ? method : [method], recordIdentity);
      }
      /**
       * @description Finds an EventRecord for the specified method & section
       */
      findRecord(section2, method) {
        return this.filterRecords(section2, method)[0];
      }
      /**
       * @description Creates a human representation of the output
       */
      toHuman(isExtended) {
        return {
          dispatchError: this.dispatchError?.toHuman(),
          dispatchInfo: this.dispatchInfo?.toHuman(),
          events: this.events.map((e) => e.toHuman(isExtended)),
          internalError: this.internalError?.message.toString(),
          status: this.status.toHuman(isExtended)
        };
      }
    };
  }
});

// node_modules/@polkadot/api/submittable/createClass.js
function makeEraOptions(api, registry, partialOptions, { header, mortalLength, nonce }) {
  if (!header) {
    if (partialOptions.era && !partialOptions.blockHash) {
      throw new Error("Expected blockHash to be passed alongside non-immortal era options");
    }
    if (isNumber(partialOptions.era)) {
      delete partialOptions.era;
      delete partialOptions.blockHash;
    }
    return makeSignOptions(api, partialOptions, { nonce });
  }
  return makeSignOptions(api, partialOptions, {
    blockHash: header.hash,
    era: registry.createTypeUnsafe("ExtrinsicEra", [{
      current: header.number,
      period: partialOptions.era || mortalLength
    }]),
    nonce
  });
}
function makeSignAndSendOptions(partialOptions, statusCb) {
  let options = {};
  if (isFunction(partialOptions)) {
    statusCb = partialOptions;
  } else {
    options = objectSpread({}, partialOptions);
  }
  return [options, statusCb];
}
function makeSignOptions(api, partialOptions, extras) {
  return objectSpread({ blockHash: api.genesisHash, genesisHash: api.genesisHash }, partialOptions, extras, { runtimeVersion: api.runtimeVersion, signedExtensions: api.registry.signedExtensions, version: api.extrinsicType });
}
function optionsOrNonce(partialOptions = {}) {
  return isBn(partialOptions) || isNumber(partialOptions) ? { nonce: partialOptions } : partialOptions;
}
function createClass({ api, apiType, blockHash, decorateMethod }) {
  const ExtrinsicBase2 = api.registry.createClass("Extrinsic");
  class Submittable extends ExtrinsicBase2 {
    __internal__ignoreStatusCb;
    __internal__transformResult = identity;
    constructor(registry, extrinsic) {
      super(registry, extrinsic, { version: api.extrinsicType });
      this.__internal__ignoreStatusCb = apiType === "rxjs";
    }
    get hasDryRun() {
      return isFunction(api.rpc.system?.dryRun);
    }
    get hasPaymentInfo() {
      return isFunction(api.call.transactionPaymentApi?.queryInfo);
    }
    // dry run an extrinsic
    dryRun(account3, optionsOrHash) {
      if (!this.hasDryRun) {
        throw new Error("The system.dryRun RPC call is not available in your environment");
      }
      if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
        return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));
      }
      return decorateMethod(() => this.__internal__observeSign(account3, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();
    }
    // calculate the payment info for this transaction (if signed and submitted)
    paymentInfo(account3, optionsOrHash) {
      if (!this.hasPaymentInfo) {
        throw new Error("The transactionPaymentApi.queryInfo runtime call is not available in your environment");
      }
      if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
        return decorateMethod(() => api.callAt(blockHash || optionsOrHash).pipe(switchMap((callAt) => {
          const u8a = this.toU8a();
          return callAt.transactionPaymentApi.queryInfo(u8a, u8a.length);
        })));
      }
      const [allOptions] = makeSignAndSendOptions(optionsOrHash);
      const address = isKeyringPair(account3) ? account3.address : account3.toString();
      return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap((signingInfo2) => {
        const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo2);
        const signOptions = makeSignOptions(api, eraOptions, {});
        const u8a = api.tx(this.toU8a()).signFake(address, signOptions).toU8a();
        return api.call.transactionPaymentApi.queryInfo(u8a, u8a.length);
      })))();
    }
    // send implementation for both immediate Hash and statusCb variants
    send(statusCb) {
      const isSubscription2 = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
      return decorateMethod(isSubscription2 ? this.__internal__observeSubscribe : this.__internal__observeSend)(statusCb);
    }
    /**
     * @description Signs a transaction, returning `this` to allow chaining. E.g.: `signAsync(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
     */
    signAsync(account3, partialOptions) {
      return decorateMethod(() => this.__internal__observeSign(account3, partialOptions).pipe(map2(() => this)))();
    }
    // signAndSend implementation for all 3 cases above
    signAndSend(account3, partialOptions, optionalStatusCb) {
      const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);
      const isSubscription2 = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
      return decorateMethod(
        () => this.__internal__observeSign(account3, options).pipe(switchMap((info6) => isSubscription2 ? this.__internal__observeSubscribe(info6) : this.__internal__observeSend(info6)))
        // FIXME This is wrong, SubmittableResult is _not_ a codec
      )(statusCb);
    }
    // adds a transform to the result, applied before result is returned
    withResultTransform(transform) {
      this.__internal__transformResult = transform;
      return this;
    }
    __internal__observeSign = (account3, partialOptions) => {
      const address = isKeyringPair(account3) ? account3.address : account3.toString();
      const options = optionsOrNonce(partialOptions);
      return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async (signingInfo2) => {
        const eraOptions = makeEraOptions(api, this.registry, options, signingInfo2);
        let updateId = -1;
        if (isKeyringPair(account3)) {
          this.sign(account3, eraOptions);
        } else {
          updateId = await this.__internal__signViaSigner(address, eraOptions, signingInfo2.header);
        }
        return { options: eraOptions, updateId };
      }));
    };
    __internal__observeStatus = (txHash, status) => {
      if (!status.isFinalized && !status.isInBlock) {
        return of(this.__internal__transformResult(new SubmittableResult({
          status,
          txHash
        })));
      }
      const blockHash2 = status.isInBlock ? status.asInBlock : status.asFinalized;
      return api.derive.tx.events(blockHash2).pipe(map2(({ block, events: events2 }) => this.__internal__transformResult(new SubmittableResult({
        ...filterEvents(txHash, block, events2, status),
        status,
        txHash
      }))), catchError((internalError) => of(this.__internal__transformResult(new SubmittableResult({
        internalError,
        status,
        txHash
      })))));
    };
    __internal__observeSend = (info6) => {
      return api.rpc.author.submitExtrinsic(this).pipe(tap((hash2) => {
        this.__internal__updateSigner(hash2, info6);
      }));
    };
    __internal__observeSubscribe = (info6) => {
      const txHash = this.hash;
      return api.rpc.author.submitAndWatchExtrinsic(this).pipe(switchMap((status) => this.__internal__observeStatus(txHash, status)), tap((status) => {
        this.__internal__updateSigner(status, info6);
      }));
    };
    __internal__signViaSigner = async (address, options, header) => {
      const signer = options.signer || api.signer;
      if (!signer) {
        throw new Error("No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
      }
      const payload = this.registry.createTypeUnsafe("SignerPayload", [objectSpread({}, options, {
        address,
        blockNumber: header ? header.number : 0,
        method: this.method
      })]);
      let result;
      if (isFunction(signer.signPayload)) {
        result = await signer.signPayload(payload.toPayload());
      } else if (isFunction(signer.signRaw)) {
        result = await signer.signRaw(payload.toRaw());
      } else {
        throw new Error("Invalid signer interface, it should implement either signPayload or signRaw (or both)");
      }
      super.addSignature(address, result.signature, payload.toPayload());
      return result.id;
    };
    __internal__updateSigner = (status, info6) => {
      if (info6 && info6.updateId !== -1) {
        const { options, updateId } = info6;
        const signer = options.signer || api.signer;
        if (signer && isFunction(signer.update)) {
          signer.update(updateId, status);
        }
      }
    };
  }
  return Submittable;
}
var init_createClass2 = __esm({
  "node_modules/@polkadot/api/submittable/createClass.js"() {
    init_esm5();
    init_util();
    init_util19();
    init_Result2();
  }
});

// node_modules/@polkadot/api/submittable/createSubmittable.js
function createSubmittable(apiType, api, decorateMethod, registry, blockHash) {
  const Submittable = createClass({ api, apiType, blockHash, decorateMethod });
  return (extrinsic) => new Submittable(registry || api.registry, extrinsic);
}
var init_createSubmittable = __esm({
  "node_modules/@polkadot/api/submittable/createSubmittable.js"() {
    init_createClass2();
  }
});

// node_modules/@polkadot/api/submittable/index.js
var init_submittable = __esm({
  "node_modules/@polkadot/api/submittable/index.js"() {
    init_createSubmittable();
    init_Result2();
  }
});

// node_modules/@polkadot/api/base/find.js
function findCall(registry, callIndex) {
  return registry.findMetaCall(u8aToU8a(callIndex));
}
function findError(registry, errorIndex) {
  return registry.findMetaError(u8aToU8a(errorIndex));
}
var init_find2 = __esm({
  "node_modules/@polkadot/api/base/find.js"() {
    init_util();
  }
});

// node_modules/@polkadot/types-known/packageDetect.js
var init_packageDetect13 = __esm({
  "node_modules/@polkadot/types-known/packageDetect.js"() {
    init_packageInfo4();
    init_util();
    init_packageInfo5();
    detectPackage(packageInfo5, null, [packageInfo4]);
  }
});

// node_modules/@polkadot/types-known/chain/index.js
var typesChain;
var init_chain2 = __esm({
  "node_modules/@polkadot/types-known/chain/index.js"() {
    typesChain = {};
  }
});

// node_modules/@polkadot/types-known/spec/centrifuge-chain.js
var sharedTypes, standaloneTypes, versioned;
var init_centrifuge_chain = __esm({
  "node_modules/@polkadot/types-known/spec/centrifuge-chain.js"() {
    sharedTypes = {
      // Anchor
      AnchorData: {
        anchoredBlock: "u64",
        docRoot: "H256",
        id: "H256"
      },
      DispatchErrorModule: "DispatchErrorModuleU8",
      PreCommitData: {
        expirationBlock: "u64",
        identity: "H256",
        signingRoot: "H256"
      },
      // Fees
      Fee: {
        key: "Hash",
        price: "Balance"
      },
      // MultiAccount
      MultiAccountData: {
        deposit: "Balance",
        depositor: "AccountId",
        signatories: "Vec<AccountId>",
        threshold: "u16"
      },
      // Bridge
      ChainId: "u8",
      DepositNonce: "u64",
      ResourceId: "[u8; 32]",
      "chainbridge::ChainId": "u8",
      // NFT
      RegistryId: "H160",
      TokenId: "U256",
      AssetId: {
        registryId: "RegistryId",
        tokenId: "TokenId"
      },
      AssetInfo: {
        metadata: "Bytes"
      },
      MintInfo: {
        anchorId: "Hash",
        proofs: "Vec<ProofMint>",
        staticHashes: "[Hash; 3]"
      },
      Proof: {
        leafHash: "H256",
        sortedHashes: "H256"
      },
      ProofMint: {
        hashes: "Vec<Hash>",
        property: "Bytes",
        salt: "[u8; 32]",
        value: "Bytes"
      },
      RegistryInfo: {
        fields: "Vec<Bytes>",
        ownerCanBurn: "bool"
      },
      ProxyType: {
        _enum: [
          "Any",
          "NonTransfer",
          "Governance",
          "Staking",
          "NonProxy"
        ]
      }
    };
    standaloneTypes = {
      ...sharedTypes,
      AccountInfo: "AccountInfoWithRefCount",
      Address: "LookupSource",
      LookupSource: "IndicesLookupSource",
      Multiplier: "Fixed64",
      RefCount: "RefCountTo259"
    };
    versioned = [
      {
        minmax: [240, 243],
        types: {
          ...standaloneTypes,
          ProxyType: {
            _enum: [
              "Any",
              "NonTransfer",
              "Governance",
              "Staking",
              "Vesting"
            ]
          }
        }
      },
      {
        minmax: [244, 999],
        types: { ...standaloneTypes }
      },
      {
        minmax: [1e3, void 0],
        types: { ...sharedTypes }
      }
    ];
  }
});

// node_modules/@polkadot/types-known/spec/kusama.js
var sharedTypes2, addrIndicesTypes, addrAccountIdTypes, versioned2;
var init_kusama = __esm({
  "node_modules/@polkadot/types-known/spec/kusama.js"() {
    init_types_create();
    sharedTypes2 = {
      CompactAssignments: "CompactAssignmentsWith24",
      DispatchErrorModule: "DispatchErrorModuleU8",
      RawSolution: "RawSolutionWith24",
      Keys: "SessionKeys6",
      ProxyType: {
        _enum: ["Any", "NonTransfer", "Governance", "Staking", "IdentityJudgement", "CancelProxy", "Auction"]
      },
      Weight: "WeightV1"
    };
    addrIndicesTypes = {
      AccountInfo: "AccountInfoWithRefCount",
      Address: "LookupSource",
      CompactAssignments: "CompactAssignmentsWith16",
      DispatchErrorModule: "DispatchErrorModuleU8",
      RawSolution: "RawSolutionWith16",
      Keys: "SessionKeys5",
      LookupSource: "IndicesLookupSource",
      ValidatorPrefs: "ValidatorPrefsWithCommission"
    };
    addrAccountIdTypes = {
      AccountInfo: "AccountInfoWithRefCount",
      Address: "AccountId",
      CompactAssignments: "CompactAssignmentsWith16",
      DispatchErrorModule: "DispatchErrorModuleU8",
      RawSolution: "RawSolutionWith16",
      Keys: "SessionKeys5",
      LookupSource: "AccountId",
      ValidatorPrefs: "ValidatorPrefsWithCommission"
    };
    versioned2 = [
      {
        // 1020 is first CC3
        minmax: [1019, 1031],
        types: {
          ...addrIndicesTypes,
          BalanceLock: "BalanceLockTo212",
          CompactAssignments: "CompactAssignmentsTo257",
          DispatchError: "DispatchErrorTo198",
          DispatchInfo: "DispatchInfoTo244",
          Heartbeat: "HeartbeatTo244",
          IdentityInfo: "IdentityInfoTo198",
          Keys: "SessionKeys5",
          Multiplier: "Fixed64",
          OpenTip: "OpenTipTo225",
          RefCount: "RefCountTo259",
          ReferendumInfo: "ReferendumInfoTo239",
          Scheduled: "ScheduledTo254",
          SlashingSpans: "SlashingSpansTo204",
          StakingLedger: "StakingLedgerTo223",
          Votes: "VotesTo230",
          Weight: "u32"
        }
      },
      {
        minmax: [1032, 1042],
        types: {
          ...addrIndicesTypes,
          BalanceLock: "BalanceLockTo212",
          CompactAssignments: "CompactAssignmentsTo257",
          DispatchInfo: "DispatchInfoTo244",
          Heartbeat: "HeartbeatTo244",
          Keys: "SessionKeys5",
          Multiplier: "Fixed64",
          OpenTip: "OpenTipTo225",
          RefCount: "RefCountTo259",
          ReferendumInfo: "ReferendumInfoTo239",
          Scheduled: "ScheduledTo254",
          SlashingSpans: "SlashingSpansTo204",
          StakingLedger: "StakingLedgerTo223",
          Votes: "VotesTo230",
          Weight: "u32"
        }
      },
      {
        // actual at 1045 (1043-1044 is dev)
        minmax: [1043, 1045],
        types: {
          ...addrIndicesTypes,
          BalanceLock: "BalanceLockTo212",
          CompactAssignments: "CompactAssignmentsTo257",
          DispatchInfo: "DispatchInfoTo244",
          Heartbeat: "HeartbeatTo244",
          Keys: "SessionKeys5",
          Multiplier: "Fixed64",
          OpenTip: "OpenTipTo225",
          RefCount: "RefCountTo259",
          ReferendumInfo: "ReferendumInfoTo239",
          Scheduled: "ScheduledTo254",
          StakingLedger: "StakingLedgerTo223",
          Votes: "VotesTo230",
          Weight: "u32"
        }
      },
      {
        minmax: [1046, 1049],
        types: {
          ...sharedTypes2,
          ...addrAccountIdTypes,
          CompactAssignments: "CompactAssignmentsTo257",
          DispatchInfo: "DispatchInfoTo244",
          Heartbeat: "HeartbeatTo244",
          Multiplier: "Fixed64",
          OpenTip: "OpenTipTo225",
          RefCount: "RefCountTo259",
          ReferendumInfo: "ReferendumInfoTo239",
          Scheduled: "ScheduledTo254",
          StakingLedger: "StakingLedgerTo223",
          Weight: "u32"
        }
      },
      {
        minmax: [1050, 1054],
        types: {
          ...sharedTypes2,
          ...addrAccountIdTypes,
          CompactAssignments: "CompactAssignmentsTo257",
          DispatchInfo: "DispatchInfoTo244",
          Heartbeat: "HeartbeatTo244",
          Multiplier: "Fixed64",
          OpenTip: "OpenTipTo225",
          RefCount: "RefCountTo259",
          ReferendumInfo: "ReferendumInfoTo239",
          Scheduled: "ScheduledTo254",
          StakingLedger: "StakingLedgerTo240",
          Weight: "u32"
        }
      },
      {
        minmax: [1055, 1056],
        types: {
          ...sharedTypes2,
          ...addrAccountIdTypes,
          CompactAssignments: "CompactAssignmentsTo257",
          DispatchInfo: "DispatchInfoTo244",
          Heartbeat: "HeartbeatTo244",
          Multiplier: "Fixed64",
          OpenTip: "OpenTipTo225",
          RefCount: "RefCountTo259",
          Scheduled: "ScheduledTo254",
          StakingLedger: "StakingLedgerTo240",
          Weight: "u32"
        }
      },
      {
        minmax: [1057, 1061],
        types: {
          ...sharedTypes2,
          ...addrAccountIdTypes,
          CompactAssignments: "CompactAssignmentsTo257",
          DispatchInfo: "DispatchInfoTo244",
          Heartbeat: "HeartbeatTo244",
          OpenTip: "OpenTipTo225",
          RefCount: "RefCountTo259",
          // Last 100% known problematic runtime range - this quite possibly need to
          // apply to more runtime ranges that follow, we just don't know how far this
          // should be applied to
          //
          // TL;DR whack-a-mole since this was not histrically checked
          //
          // See https://github.com/polkadot-js/api/issues/5618#issuecomment-1530970316
          Scheduled: "ScheduledTo254"
        }
      },
      {
        minmax: [1062, 2012],
        types: {
          ...sharedTypes2,
          ...addrAccountIdTypes,
          CompactAssignments: "CompactAssignmentsTo257",
          OpenTip: "OpenTipTo225",
          RefCount: "RefCountTo259"
        }
      },
      {
        minmax: [2013, 2022],
        types: {
          ...sharedTypes2,
          ...addrAccountIdTypes,
          CompactAssignments: "CompactAssignmentsTo257",
          RefCount: "RefCountTo259"
        }
      },
      {
        minmax: [2023, 2024],
        types: {
          ...sharedTypes2,
          ...addrAccountIdTypes,
          RefCount: "RefCountTo259"
        }
      },
      {
        minmax: [2025, 2027],
        types: {
          ...sharedTypes2,
          ...addrAccountIdTypes
        }
      },
      {
        minmax: [2028, 2029],
        types: {
          ...sharedTypes2,
          AccountInfo: "AccountInfoWithDualRefCount",
          CompactAssignments: "CompactAssignmentsWith16",
          RawSolution: "RawSolutionWith16"
        }
      },
      {
        minmax: [2030, 9e3],
        types: {
          ...sharedTypes2,
          CompactAssignments: "CompactAssignmentsWith16",
          RawSolution: "RawSolutionWith16"
        }
      },
      {
        minmax: [9010, 9099],
        types: {
          ...sharedTypes2,
          ...mapXcmTypes("V0")
        }
      },
      {
        // jump from 9100 to 9110, however align with Rococo
        minmax: [9100, 9105],
        types: {
          ...sharedTypes2,
          ...mapXcmTypes("V1")
        }
      },
      {
        // metadata v14
        minmax: [9106, void 0],
        types: {
          Weight: "WeightV1"
        }
      }
      // ,
      // {
      //   // weight v2 introduction
      //   minmax: [9300, undefined],
      //   types: {
      //     Weight: 'WeightV2'
      //   }
      // }
    ];
  }
});

// node_modules/@polkadot/types-known/spec/node.js
var versioned3;
var init_node = __esm({
  "node_modules/@polkadot/types-known/spec/node.js"() {
    versioned3 = [
      {
        minmax: [0, void 0],
        types: {
          // nothing, API tracks master
          // (v2 weights are not yet the default)
          Weight: "WeightV2"
        }
      }
    ];
  }
});

// node_modules/@polkadot/types-known/spec/node-template.js
var versioned4;
var init_node_template = __esm({
  "node_modules/@polkadot/types-known/spec/node-template.js"() {
    versioned4 = [
      {
        minmax: [0, void 0],
        types: {
          // nothing, API tracks master
          // (v2 weights are not yet the default)
          Weight: "WeightV2"
        }
      }
    ];
  }
});

// node_modules/@polkadot/types-known/spec/polkadot.js
var sharedTypes3, addrAccountIdTypes2, versioned5;
var init_polkadot2 = __esm({
  "node_modules/@polkadot/types-known/spec/polkadot.js"() {
    sharedTypes3 = {
      CompactAssignments: "CompactAssignmentsWith16",
      DispatchErrorModule: "DispatchErrorModuleU8",
      RawSolution: "RawSolutionWith16",
      Keys: "SessionKeys6",
      ProxyType: {
        _enum: {
          Any: 0,
          NonTransfer: 1,
          Governance: 2,
          Staking: 3,
          UnusedSudoBalances: 4,
          IdentityJudgement: 5,
          CancelProxy: 6,
          Auction: 7
        }
      },
      Weight: "WeightV1"
    };
    addrAccountIdTypes2 = {
      AccountInfo: "AccountInfoWithRefCount",
      Address: "AccountId",
      DispatchErrorModule: "DispatchErrorModuleU8",
      Keys: "SessionKeys5",
      LookupSource: "AccountId",
      ValidatorPrefs: "ValidatorPrefsWithCommission"
    };
    versioned5 = [
      {
        minmax: [0, 12],
        types: {
          ...sharedTypes3,
          ...addrAccountIdTypes2,
          CompactAssignments: "CompactAssignmentsTo257",
          OpenTip: "OpenTipTo225",
          RefCount: "RefCountTo259"
        }
      },
      {
        minmax: [13, 22],
        types: {
          ...sharedTypes3,
          ...addrAccountIdTypes2,
          CompactAssignments: "CompactAssignmentsTo257",
          RefCount: "RefCountTo259"
        }
      },
      {
        minmax: [23, 24],
        types: {
          ...sharedTypes3,
          ...addrAccountIdTypes2,
          RefCount: "RefCountTo259"
        }
      },
      {
        minmax: [25, 27],
        types: {
          ...sharedTypes3,
          ...addrAccountIdTypes2
        }
      },
      {
        minmax: [28, 29],
        types: {
          ...sharedTypes3,
          AccountInfo: "AccountInfoWithDualRefCount"
        }
      },
      {
        minmax: [30, 9109],
        types: {
          ...sharedTypes3
        }
      },
      {
        // metadata v14
        minmax: [9110, void 0],
        types: {
          Weight: "WeightV1"
        }
      }
      // ,
      // {
      //   // weight v2 introduction
      //   minmax: [9300, undefined],
      //   types: {
      //     Weight: 'WeightV2'
      //   }
      // }
    ];
  }
});

// node_modules/@polkadot/types-known/spec/rococo.js
var sharedTypes4, versioned6;
var init_rococo = __esm({
  "node_modules/@polkadot/types-known/spec/rococo.js"() {
    init_types_create();
    sharedTypes4 = {
      DispatchErrorModule: "DispatchErrorModuleU8",
      FullIdentification: "()",
      // No staking, only session (as per config)
      Keys: "SessionKeys7B",
      Weight: "WeightV1"
    };
    versioned6 = [
      {
        minmax: [0, 200],
        types: {
          ...sharedTypes4,
          AccountInfo: "AccountInfoWithDualRefCount",
          Address: "AccountId",
          LookupSource: "AccountId"
        }
      },
      {
        minmax: [201, 214],
        types: {
          ...sharedTypes4,
          AccountInfo: "AccountInfoWithDualRefCount"
        }
      },
      {
        minmax: [215, 228],
        types: {
          ...sharedTypes4,
          Keys: "SessionKeys6"
        }
      },
      {
        minmax: [229, 9099],
        types: {
          ...sharedTypes4,
          ...mapXcmTypes("V0")
        }
      },
      {
        minmax: [9100, 9105],
        types: {
          ...sharedTypes4,
          ...mapXcmTypes("V1")
        }
      },
      {
        // metadata v14
        minmax: [9106, void 0],
        types: {
          Weight: "WeightV1"
        }
      }
      // ,
      // {
      //   // weight v2 introduction
      //   minmax: [9300, undefined],
      //   types: {
      //     Weight: 'WeightV2'
      //   }
      // }
    ];
  }
});

// node_modules/@polkadot/types-known/spec/shell.js
var versioned7;
var init_shell2 = __esm({
  "node_modules/@polkadot/types-known/spec/shell.js"() {
    versioned7 = [
      {
        minmax: [0, void 0],
        types: {
          // nothing, limited runtime
        }
      }
    ];
  }
});

// node_modules/@polkadot/types-known/spec/statemine.js
var sharedTypes5, versioned8;
var init_statemine = __esm({
  "node_modules/@polkadot/types-known/spec/statemine.js"() {
    init_types_create();
    sharedTypes5 = {
      DispatchErrorModule: "DispatchErrorModuleU8",
      TAssetBalance: "u128",
      ProxyType: {
        _enum: [
          "Any",
          "NonTransfer",
          "CancelProxy",
          "Assets",
          "AssetOwner",
          "AssetManager",
          "Staking"
        ]
      },
      Weight: "WeightV1"
    };
    versioned8 = [
      {
        minmax: [0, 3],
        types: {
          // Enum was modified mid-flight -
          // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
          DispatchError: "DispatchErrorPre6First",
          ...sharedTypes5,
          ...mapXcmTypes("V0")
        }
      },
      {
        minmax: [4, 5],
        types: {
          // As above, see https://github.com/polkadot-js/api/issues/5301
          DispatchError: "DispatchErrorPre6First",
          ...sharedTypes5,
          ...mapXcmTypes("V1")
        }
      },
      {
        // metadata V14
        minmax: [500, 9999],
        types: {
          Weight: "WeightV1",
          TAssetConversion: "Option<AssetId>"
        }
      },
      {
        minmax: [1e4, void 0],
        types: {
          Weight: "WeightV1"
        }
      }
    ];
  }
});

// node_modules/@polkadot/types-known/spec/statemint.js
var sharedTypes6, versioned9;
var init_statemint2 = __esm({
  "node_modules/@polkadot/types-known/spec/statemint.js"() {
    init_types_create();
    sharedTypes6 = {
      DispatchErrorModule: "DispatchErrorModuleU8",
      TAssetBalance: "u128",
      ProxyType: {
        _enum: [
          "Any",
          "NonTransfer",
          "CancelProxy",
          "Assets",
          "AssetOwner",
          "AssetManager",
          "Staking"
        ]
      },
      Weight: "WeightV1"
    };
    versioned9 = [
      {
        minmax: [0, 3],
        types: {
          // Enum was modified mid-flight -
          // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
          DispatchError: "DispatchErrorPre6First",
          ...sharedTypes6,
          ...mapXcmTypes("V0")
        }
      },
      {
        minmax: [4, 5],
        types: {
          // As above, see https://github.com/polkadot-js/api/issues/5301
          DispatchError: "DispatchErrorPre6First",
          ...sharedTypes6,
          ...mapXcmTypes("V1")
        }
      },
      {
        // metadata V14
        minmax: [500, void 0],
        types: {
          Weight: "WeightV1",
          TAssetConversion: "Option<AssetId>"
        }
      }
      // ,
      // {
      //   // weight v2 introduction
      //   minmax: [9300, undefined],
      //   types: {
      //     Weight: 'WeightV2'
      //   }
      // }
    ];
  }
});

// node_modules/@polkadot/types-known/spec/westend.js
var sharedTypes7, addrAccountIdTypes3, versioned10;
var init_westend = __esm({
  "node_modules/@polkadot/types-known/spec/westend.js"() {
    init_types_create();
    sharedTypes7 = {
      // 16 validators
      CompactAssignments: "CompactAssignmentsWith16",
      DispatchErrorModule: "DispatchErrorModuleU8",
      RawSolution: "RawSolutionWith16",
      // general
      Keys: "SessionKeys6",
      ProxyType: {
        _enum: ["Any", "NonTransfer", "Staking", "SudoBalances", "IdentityJudgement", "CancelProxy"]
      },
      Weight: "WeightV1"
    };
    addrAccountIdTypes3 = {
      AccountInfo: "AccountInfoWithRefCount",
      Address: "AccountId",
      CompactAssignments: "CompactAssignmentsWith16",
      DispatchErrorModule: "DispatchErrorModuleU8",
      LookupSource: "AccountId",
      Keys: "SessionKeys5",
      RawSolution: "RawSolutionWith16",
      ValidatorPrefs: "ValidatorPrefsWithCommission"
    };
    versioned10 = [
      {
        minmax: [1, 2],
        types: {
          ...sharedTypes7,
          ...addrAccountIdTypes3,
          CompactAssignments: "CompactAssignmentsTo257",
          DispatchInfo: "DispatchInfoTo244",
          Heartbeat: "HeartbeatTo244",
          Multiplier: "Fixed64",
          OpenTip: "OpenTipTo225",
          RefCount: "RefCountTo259",
          Weight: "u32"
        }
      },
      {
        minmax: [3, 22],
        types: {
          ...sharedTypes7,
          ...addrAccountIdTypes3,
          CompactAssignments: "CompactAssignmentsTo257",
          DispatchInfo: "DispatchInfoTo244",
          Heartbeat: "HeartbeatTo244",
          OpenTip: "OpenTipTo225",
          RefCount: "RefCountTo259"
        }
      },
      {
        minmax: [23, 42],
        types: {
          ...sharedTypes7,
          ...addrAccountIdTypes3,
          CompactAssignments: "CompactAssignmentsTo257",
          DispatchInfo: "DispatchInfoTo244",
          Heartbeat: "HeartbeatTo244",
          RefCount: "RefCountTo259"
        }
      },
      {
        minmax: [43, 44],
        types: {
          ...sharedTypes7,
          ...addrAccountIdTypes3,
          DispatchInfo: "DispatchInfoTo244",
          Heartbeat: "HeartbeatTo244",
          RefCount: "RefCountTo259"
        }
      },
      {
        minmax: [45, 47],
        types: {
          ...sharedTypes7,
          ...addrAccountIdTypes3
        }
      },
      {
        minmax: [48, 49],
        types: {
          ...sharedTypes7,
          AccountInfo: "AccountInfoWithDualRefCount"
        }
      },
      {
        minmax: [50, 9099],
        types: {
          ...sharedTypes7,
          ...mapXcmTypes("V0")
        }
      },
      {
        minmax: [9100, 9105],
        types: {
          ...sharedTypes7,
          ...mapXcmTypes("V1")
        }
      },
      {
        // metadata v14
        minmax: [9106, void 0],
        types: {
          Weight: "WeightV1"
        }
      }
      // ,
      // {
      //   // weight v2 introduction
      //   minmax: [9300, undefined],
      //   types: {
      //     Weight: 'WeightV2'
      //   }
      // }
    ];
  }
});

// node_modules/@polkadot/types-known/spec/westmint.js
var sharedTypes8, versioned11;
var init_westmint = __esm({
  "node_modules/@polkadot/types-known/spec/westmint.js"() {
    init_types_create();
    sharedTypes8 = {
      DispatchErrorModule: "DispatchErrorModuleU8",
      TAssetBalance: "u128",
      ProxyType: {
        _enum: [
          "Any",
          "NonTransfer",
          "CancelProxy",
          "Assets",
          "AssetOwner",
          "AssetManager",
          "Staking"
        ]
      },
      Weight: "WeightV1"
    };
    versioned11 = [
      {
        minmax: [0, 3],
        types: {
          // Enum was modified mid-flight -
          // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
          DispatchError: "DispatchErrorPre6First",
          ...sharedTypes8,
          ...mapXcmTypes("V0")
        }
      },
      {
        minmax: [4, 5],
        types: {
          // As above, see https://github.com/polkadot-js/api/issues/5301
          DispatchError: "DispatchErrorPre6First",
          ...sharedTypes8,
          ...mapXcmTypes("V1")
        }
      },
      {
        // metadata V14
        minmax: [500, 9434],
        types: {
          Weight: "WeightV1",
          TAssetConversion: "Option<AssetId>"
        }
      },
      {
        minmax: [9435, void 0],
        types: {
          Weight: "WeightV1"
        }
      }
    ];
  }
});

// node_modules/@polkadot/types-known/spec/index.js
var typesSpec;
var init_spec = __esm({
  "node_modules/@polkadot/types-known/spec/index.js"() {
    init_centrifuge_chain();
    init_kusama();
    init_node();
    init_node_template();
    init_polkadot2();
    init_rococo();
    init_shell2();
    init_statemine();
    init_statemint2();
    init_westend();
    init_westmint();
    typesSpec = {
      "centrifuge-chain": versioned,
      kusama: versioned2,
      node: versioned3,
      "node-template": versioned4,
      polkadot: versioned5,
      rococo: versioned6,
      shell: versioned7,
      statemine: versioned8,
      statemint: versioned9,
      westend: versioned10,
      westmint: versioned11
    };
  }
});

// node_modules/@polkadot/types-known/upgrades/e2e/kusama.js
var upgrades;
var init_kusama2 = __esm({
  "node_modules/@polkadot/types-known/upgrades/e2e/kusama.js"() {
    upgrades = [
      [
        0,
        1020,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            1
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        26669,
        1021,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            1
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        38245,
        1022,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            1
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        54248,
        1023,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            1
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        59659,
        1024,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            1
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        67651,
        1025,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            1
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        82191,
        1027,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            1
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        83238,
        1028,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            1
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        101503,
        1029,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            1
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        203466,
        1030,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            1
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        295787,
        1031,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            1
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        461692,
        1032,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            1
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        504329,
        1033,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            1
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        569327,
        1038,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            1
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        587687,
        1039,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        653183,
        1040,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        693488,
        1042,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        901442,
        1045,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1375086,
        1050,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1445458,
        1051,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1472960,
        1052,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1475648,
        1053,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1491596,
        1054,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1574408,
        1055,
        [
          [
            "0xdf6acb689907609b",
            2
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            1
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        2064961,
        1058,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        2201991,
        1062,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        2671528,
        2005,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        2704202,
        2007,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        2728002,
        2008,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        2832534,
        2011,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        2962294,
        2012,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        324e4,
        2013,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        3274408,
        2015,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        3323565,
        2019,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        3534175,
        2022,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        3860281,
        2023,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        4143129,
        2024,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        4401242,
        2025,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        4841367,
        2026,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        5961600,
        2027,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        6137912,
        2028,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        6561855,
        2029,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        7100891,
        2030,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        7468792,
        9010,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        7668600,
        9030,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        7812476,
        9040,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        8010981,
        9050,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        8073833,
        9070,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        8555825,
        9080,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        8945245,
        9090,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        9611377,
        9100,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        9625129,
        9111,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        9866422,
        9122,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        10403784,
        9130,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        10960765,
        9150,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        11006614,
        9151,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        11404482,
        9160,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        11601803,
        9170,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        12008022,
        9180,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        12405451,
        9190,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        12665416,
        9200,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        12909508,
        9220,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        13109752,
        9230,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        13555777,
        9250,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        13727747,
        9260,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        14248044,
        9271,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        14433840,
        9280,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ],
          [
            "0xf3ff14d5ab527059",
            1
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        14645900,
        9291,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ],
          [
            "0xf3ff14d5ab527059",
            1
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        15048375,
        9300,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ],
          [
            "0xf3ff14d5ab527059",
            1
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        15426015,
        9320,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            2
          ],
          [
            "0xf3ff14d5ab527059",
            2
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        15680713,
        9340,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            2
          ],
          [
            "0xf3ff14d5ab527059",
            2
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        15756296,
        9350,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            2
          ],
          [
            "0xf3ff14d5ab527059",
            2
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        15912007,
        9360,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            2
          ],
          [
            "0xf3ff14d5ab527059",
            2
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        16356547,
        9370,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            2
          ],
          [
            "0xf3ff14d5ab527059",
            2
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        17335450,
        9381,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            3
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        18062739,
        9420,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            4
          ],
          [
            "0x49eaaf1b548a0cb0",
            2
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ]
        ]
      ],
      [
        18625e3,
        9430,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            4
          ],
          [
            "0x49eaaf1b548a0cb0",
            2
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ]
        ]
      ],
      [
        20465806,
        1e6,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            5
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ]
        ]
      ],
      [
        2157e4,
        1001e3,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            7
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ],
      [
        21786291,
        1001002,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            7
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ],
      [
        22515962,
        1001003,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            7
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ]
    ];
  }
});

// node_modules/@polkadot/types-known/upgrades/e2e/polkadot.js
var upgrades2;
var init_polkadot3 = __esm({
  "node_modules/@polkadot/types-known/upgrades/e2e/polkadot.js"() {
    upgrades2 = [
      [
        0,
        0,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        29231,
        1,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        188836,
        5,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        199405,
        6,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        214264,
        7,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        244358,
        8,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        303079,
        9,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        314201,
        10,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        342400,
        11,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        443963,
        12,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        528470,
        13,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        687751,
        14,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        746085,
        15,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        787923,
        16,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        799302,
        17,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1205128,
        18,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1603423,
        23,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1733218,
        24,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        2005673,
        25,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        2436698,
        26,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        3613564,
        27,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        3899547,
        28,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        4345767,
        29,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        4876134,
        30,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        5661442,
        9050,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        6321619,
        9080,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        6713249,
        9090,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        7217907,
        9100,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        7229126,
        9110,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        7560558,
        9122,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        8115869,
        9140,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        8638103,
        9151,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        9280179,
        9170,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        9738717,
        9180,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        10156856,
        9190,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        10458576,
        9200,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        10655116,
        9220,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        10879371,
        9230,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        11328884,
        9250,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        11532856,
        9260,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        11933818,
        9270,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        12217535,
        9280,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ],
          [
            "0xf3ff14d5ab527059",
            1
          ]
        ]
      ],
      [
        12245277,
        9281,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ],
          [
            "0xf3ff14d5ab527059",
            1
          ]
        ]
      ],
      [
        12532644,
        9291,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ],
          [
            "0xf3ff14d5ab527059",
            1
          ]
        ]
      ],
      [
        12876189,
        9300,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ],
          [
            "0xf3ff14d5ab527059",
            1
          ]
        ]
      ],
      [
        13800015,
        9340,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            2
          ],
          [
            "0xf3ff14d5ab527059",
            2
          ]
        ]
      ],
      [
        14188833,
        9360,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            2
          ],
          [
            "0xf3ff14d5ab527059",
            2
          ]
        ]
      ],
      [
        14543918,
        9370,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            2
          ],
          [
            "0xf3ff14d5ab527059",
            2
          ]
        ]
      ],
      [
        15978362,
        9420,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            4
          ],
          [
            "0x49eaaf1b548a0cb0",
            2
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ]
        ]
      ],
      [
        1645e4,
        9430,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            4
          ],
          [
            "0x49eaaf1b548a0cb0",
            2
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ]
        ]
      ],
      [
        1784e4,
        9431,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            4
          ],
          [
            "0x49eaaf1b548a0cb0",
            2
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ]
        ]
      ],
      [
        18407475,
        1000001,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            5
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ]
        ]
      ],
      [
        19551e3,
        1001002,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            5
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ]
    ];
  }
});

// node_modules/@polkadot/types-known/upgrades/e2e/westend.js
var upgrades3;
var init_westend2 = __esm({
  "node_modules/@polkadot/types-known/upgrades/e2e/westend.js"() {
    upgrades3 = [
      [
        214356,
        4,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            1
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        392764,
        7,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        409740,
        8,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        809976,
        20,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        877581,
        24,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        879238,
        25,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        889472,
        26,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        902937,
        27,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        932751,
        28,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        991142,
        29,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1030162,
        31,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1119657,
        32,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1199282,
        33,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1342534,
        34,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1392263,
        35,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1431703,
        36,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1433369,
        37,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        1490972,
        41,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        2087397,
        43,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        2316688,
        44,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        2549864,
        45,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        3925782,
        46,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        3925843,
        47,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        4207800,
        48,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        4627944,
        49,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        5124076,
        50,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        5478664,
        900,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        5482450,
        9e3,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            4
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        5584305,
        9010,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        5784566,
        9030,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        5879822,
        9031,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        5896856,
        9032,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        5897316,
        9033,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        6117927,
        9050,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        6210274,
        9070,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            2
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        6379314,
        9080,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            2
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        6979141,
        9090,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        7568453,
        9100,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        7766394,
        9111,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        7911691,
        9120,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        7968866,
        9121,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        7982889,
        9122,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        8514322,
        9130,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        9091726,
        9140,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        9091774,
        9150,
        [
          [
            "0xdf6acb689907609b",
            3
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            1
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        9406726,
        9160,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        9921066,
        9170,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        10007115,
        9180,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            5
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        10480973,
        9190,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        10578091,
        9200,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        10678509,
        9210,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        10811001,
        9220,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        11096116,
        9230,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        11409279,
        9250,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        11584820,
        9251,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        11716837,
        9260,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        11876919,
        9261,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ]
        ]
      ],
      [
        11987927,
        9270,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        12077324,
        9271,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        12301871,
        9280,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ],
          [
            "0xf3ff14d5ab527059",
            1
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        12604343,
        9290,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            2
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ],
          [
            "0xf3ff14d5ab527059",
            1
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        12841034,
        9300,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ],
          [
            "0xf3ff14d5ab527059",
            1
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        13128237,
        9310,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            1
          ],
          [
            "0xf3ff14d5ab527059",
            1
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        13272363,
        9320,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            2
          ],
          [
            "0xf3ff14d5ab527059",
            2
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        13483497,
        9330,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            2
          ],
          [
            "0xf3ff14d5ab527059",
            2
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        13649433,
        9340,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            2
          ],
          [
            "0xf3ff14d5ab527059",
            2
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        13761100,
        9350,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            2
          ],
          [
            "0xf3ff14d5ab527059",
            2
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        13847400,
        9360,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            2
          ],
          [
            "0xf3ff14d5ab527059",
            2
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        14249200,
        9370,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            2
          ],
          [
            "0xf3ff14d5ab527059",
            2
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        14576855,
        9380,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            3
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            3
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ]
        ]
      ],
      [
        14849830,
        9390,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            4
          ],
          [
            "0x49eaaf1b548a0cb0",
            1
          ],
          [
            "0x91d5df18b0d2cf58",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            3
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ]
        ]
      ],
      [
        15146832,
        9400,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            4
          ],
          [
            "0x49eaaf1b548a0cb0",
            2
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            3
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ]
        ]
      ],
      [
        15332317,
        9401,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            1
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            4
          ],
          [
            "0x49eaaf1b548a0cb0",
            2
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            3
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ]
        ]
      ],
      [
        15661793,
        9420,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            4
          ],
          [
            "0x49eaaf1b548a0cb0",
            2
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ]
        ]
      ],
      [
        16165469,
        9430,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            4
          ],
          [
            "0x49eaaf1b548a0cb0",
            2
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ]
        ]
      ],
      [
        18293984,
        102e3,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            7
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ],
      [
        18293991,
        103e3,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            8
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ],
      [
        18451783,
        104e3,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            9
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ],
      [
        18679741,
        1005e3,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            9
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ],
      [
        19166695,
        1006e3,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            10
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ],
      [
        19234157,
        1006001,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            10
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ],
      [
        19542944,
        1007e3,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            10
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ],
      [
        19621258,
        1007001,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            10
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ],
      [
        19761406,
        1008e3,
        [
          [
            "0xdf6acb689907609b",
            4
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            10
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ],
      [
        20056997,
        1009e3,
        [
          [
            "0xdf6acb689907609b",
            5
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            10
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ],
      [
        20368318,
        101e4,
        [
          [
            "0xdf6acb689907609b",
            5
          ],
          [
            "0x37e397fc7c91f5e4",
            2
          ],
          [
            "0x40fe3ad401f8959a",
            6
          ],
          [
            "0xd2bc9897eed08f15",
            3
          ],
          [
            "0xf78b278be53f454c",
            2
          ],
          [
            "0xaf2c0297a23e6d3d",
            10
          ],
          [
            "0x49eaaf1b548a0cb0",
            3
          ],
          [
            "0x91d5df18b0d2cf58",
            2
          ],
          [
            "0x2a5e924655399e60",
            1
          ],
          [
            "0xed99c5acb25eedf5",
            3
          ],
          [
            "0xcbca25e39f142387",
            2
          ],
          [
            "0x687ad44ad37f03c2",
            1
          ],
          [
            "0xab3c0572291feb8b",
            1
          ],
          [
            "0xbc9d89904f5b923f",
            1
          ],
          [
            "0x37c8bb1350a9a2a8",
            4
          ],
          [
            "0xf3ff14d5ab527059",
            3
          ],
          [
            "0x6ff52ee858e6c5bd",
            1
          ],
          [
            "0x17a6bc0d0062aeb3",
            1
          ],
          [
            "0x18ef58a3b67ba770",
            1
          ],
          [
            "0xfbc577b9d747efd6",
            1
          ]
        ]
      ]
    ];
  }
});

// node_modules/@polkadot/types-known/upgrades/e2e/index.js
var e2e_exports = {};
__export(e2e_exports, {
  kusama: () => upgrades,
  polkadot: () => upgrades2,
  westend: () => upgrades3
});
var init_e2e = __esm({
  "node_modules/@polkadot/types-known/upgrades/e2e/index.js"() {
    init_kusama2();
    init_polkadot3();
    init_westend2();
  }
});

// node_modules/@polkadot/types-known/upgrades/index.js
function mapRaw([network, versions]) {
  const chain = selectableNetworks.find((n) => n.network === network) || NET_EXTRA[network];
  if (!chain) {
    throw new Error(`Unable to find info for chain ${network}`);
  }
  return {
    genesisHash: hexToU8a(chain.genesisHash[0]),
    network,
    versions: versions.map(([blockNumber, specVersion, apis]) => ({
      apis,
      blockNumber: new import_bn.default(blockNumber),
      specVersion: new import_bn.default(specVersion)
    }))
  };
}
var NET_EXTRA, upgrades4;
var init_upgrades = __esm({
  "node_modules/@polkadot/types-known/upgrades/index.js"() {
    init_networks();
    init_util();
    init_e2e();
    NET_EXTRA = {
      westend: {
        genesisHash: ["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"]
      }
    };
    upgrades4 = Object.entries(e2e_exports).map(mapRaw);
  }
});

// node_modules/@polkadot/types-known/util.js
function withNames(chainName, specName, fn) {
  return fn(chainName.toString(), specName.toString());
}
function filterVersions(versions = [], specVersion) {
  return versions.filter(({ minmax: [min2, max3] }) => (min2 === void 0 || min2 === null || specVersion >= min2) && (max3 === void 0 || max3 === null || specVersion <= max3)).reduce((result, { types: types2 }) => ({ ...result, ...types2 }), {});
}
function getSpecExtensions({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => ({
    ...knownTypes2.typesBundle?.spec?.[s]?.signedExtensions ?? {},
    ...knownTypes2.typesBundle?.chain?.[c]?.signedExtensions ?? {}
  }));
}
function getSpecTypes({ knownTypes: knownTypes2 }, chainName, specName, specVersion) {
  const _specVersion = bnToBn(specVersion).toNumber();
  return withNames(chainName, specName, (c, s) => ({
    // The order here is always, based on -
    //   - spec then chain
    //   - typesBundle takes higher precedence
    //   - types is the final catch-all override
    ...filterVersions(typesSpec[s], _specVersion),
    ...filterVersions(typesChain[c], _specVersion),
    ...filterVersions(knownTypes2.typesBundle?.spec?.[s]?.types, _specVersion),
    ...filterVersions(knownTypes2.typesBundle?.chain?.[c]?.types, _specVersion),
    ...knownTypes2.typesSpec?.[s] ?? {},
    ...knownTypes2.typesChain?.[c] ?? {},
    ...knownTypes2.types ?? {}
  }));
}
function getSpecHasher({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => knownTypes2.hasher || knownTypes2.typesBundle?.chain?.[c]?.hasher || knownTypes2.typesBundle?.spec?.[s]?.hasher || null);
}
function getSpecRpc({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => ({
    ...knownTypes2.typesBundle?.spec?.[s]?.rpc ?? {},
    ...knownTypes2.typesBundle?.chain?.[c]?.rpc ?? {}
  }));
}
function getSpecRuntime({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => ({
    ...knownTypes2.typesBundle?.spec?.[s]?.runtime ?? {},
    ...knownTypes2.typesBundle?.chain?.[c]?.runtime ?? {}
  }));
}
function getSpecAlias({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => ({
    // as per versions, first spec, then chain then finally non-versioned
    ...knownTypes2.typesBundle?.spec?.[s]?.alias ?? {},
    ...knownTypes2.typesBundle?.chain?.[c]?.alias ?? {},
    ...knownTypes2.typesAlias ?? {}
  }));
}
function getUpgradeVersion(genesisHash, blockNumber) {
  const known2 = upgrades4.find((u) => genesisHash.eq(u.genesisHash));
  return known2 ? [
    known2.versions.reduce((last3, version2) => {
      return blockNumber.gt(version2.blockNumber) ? version2 : last3;
    }, void 0),
    known2.versions.find((version2) => blockNumber.lte(version2.blockNumber))
  ] : [void 0, void 0];
}
var init_util20 = __esm({
  "node_modules/@polkadot/types-known/util.js"() {
    init_util();
    init_chain2();
    init_spec();
    init_upgrades();
  }
});

// node_modules/@polkadot/types-known/bundle.js
var init_bundle15 = __esm({
  "node_modules/@polkadot/types-known/bundle.js"() {
    init_types_create();
    init_packageInfo5();
    init_util20();
  }
});

// node_modules/@polkadot/types-known/index.js
var init_types_known = __esm({
  "node_modules/@polkadot/types-known/index.js"() {
    init_packageDetect13();
    init_bundle15();
  }
});

// node_modules/@polkadot/api/util/augmentObject.js
function logLength(type, values, and = []) {
  return values.length ? ` ${values.length} ${type}${and.length ? " and" : ""}` : "";
}
function logValues(type, values) {
  return values.length ? `
	${type.padStart(7)}: ${values.sort().join(", ")}` : "";
}
function warn2(prefix2, type, [added, removed]) {
  if (added.length || removed.length) {
    l13.warn(`api.${prefix2}: Found${logLength("added", added, removed)}${logLength("removed", removed)} ${type}:${logValues("added", added)}${logValues("removed", removed)}`);
  }
}
function findSectionExcludes(a, b2) {
  return a.filter((s) => !b2.includes(s));
}
function findSectionIncludes(a, b2) {
  return a.filter((s) => b2.includes(s));
}
function extractSections(src, dst) {
  const srcSections = Object.keys(src);
  const dstSections = Object.keys(dst);
  return [
    findSectionExcludes(srcSections, dstSections),
    findSectionExcludes(dstSections, srcSections)
  ];
}
function findMethodExcludes(src, dst) {
  const srcSections = Object.keys(src);
  const dstSections = findSectionIncludes(Object.keys(dst), srcSections);
  const excludes = [];
  for (let s = 0, scount = dstSections.length; s < scount; s++) {
    const section2 = dstSections[s];
    const srcMethods = Object.keys(src[section2]);
    const dstMethods = Object.keys(dst[section2]);
    for (let d = 0, mcount = dstMethods.length; d < mcount; d++) {
      const method = dstMethods[d];
      if (!srcMethods.includes(method)) {
        excludes.push(`${section2}.${method}`);
      }
    }
  }
  return excludes;
}
function extractMethods(src, dst) {
  return [
    findMethodExcludes(dst, src),
    findMethodExcludes(src, dst)
  ];
}
function augmentObject(prefix2, src, dst, fromEmpty = false) {
  fromEmpty && objectClear(dst);
  if (prefix2 && Object.keys(dst).length) {
    warn2(prefix2, "modules", extractSections(src, dst));
    warn2(prefix2, "calls", extractMethods(src, dst));
  }
  const sections = Object.keys(src);
  for (let i = 0, count2 = sections.length; i < count2; i++) {
    const section2 = sections[i];
    const methods = src[section2];
    if (!dst[section2]) {
      dst[section2] = {};
    }
    lazyMethods(dst[section2], Object.keys(methods), (m) => methods[m]);
  }
  return dst;
}
var l13;
var init_augmentObject = __esm({
  "node_modules/@polkadot/api/util/augmentObject.js"() {
    init_util();
    l13 = logger("api/augment");
  }
});

// node_modules/@polkadot/api/util/validate.js
function sig({ lookup }, { method, section: section2 }, args) {
  return `${section2}.${method}(${args.map((a) => lookup.getTypeDef(a).type).join(", ")})`;
}
function extractStorageArgs(registry, creator, _args) {
  const args = _args.filter((a) => !isUndefined(a));
  if (creator.meta.type.isPlain) {
    if (args.length !== 0) {
      throw new Error(`${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);
    }
  } else {
    const { hashers, key } = creator.meta.type.asMap;
    const keys2 = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple.map((t) => t);
    if (args.length !== keys2.length) {
      throw new Error(`${sig(registry, creator, keys2)} is a map, requiring ${keys2.length} arguments, ${args.length} found`);
    }
  }
  return [creator, args];
}
var init_validate3 = __esm({
  "node_modules/@polkadot/api/util/validate.js"() {
    init_util();
  }
});

// node_modules/@polkadot/api/base/Events.js
var Events;
var init_Events = __esm({
  "node_modules/@polkadot/api/base/Events.js"() {
    init_eventemitter3();
    Events = class {
      __internal__eventemitter = new import_index.default();
      emit(type, ...args) {
        return this.__internal__eventemitter.emit(type, ...args);
      }
      /**
       * @description Attach an eventemitter handler to listen to a specific event
       *
       * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
       * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
       *
       * @example
       * <BR>
       *
       * ```javascript
       * api.on('connected', (): void => {
       *   console.log('API has been connected to the endpoint');
       * });
       *
       * api.on('disconnected', (): void => {
       *   console.log('API has been disconnected from the endpoint');
       * });
       * ```
       */
      on(type, handler) {
        this.__internal__eventemitter.on(type, handler);
        return this;
      }
      /**
       * @description Remove the given eventemitter handler
       *
       * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
       * @param handler The callback to unregister.
       *
       * @example
       * <BR>
       *
       * ```javascript
       * const handler = (): void => {
       *  console.log('Connected !);
       * };
       *
       * // Start listening
       * api.on('connected', handler);
       *
       * // Stop listening
       * api.off('connected', handler);
       * ```
       */
      off(type, handler) {
        this.__internal__eventemitter.removeListener(type, handler);
        return this;
      }
      /**
       * @description Attach an one-time eventemitter handler to listen to a specific event
       *
       * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
       * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
       *
       * @example
       * <BR>
       *
       * ```javascript
       * api.once('connected', (): void => {
       *   console.log('API has been connected to the endpoint');
       * });
       *
       * api.once('disconnected', (): void => {
       *   console.log('API has been disconnected from the endpoint');
       * });
       * ```
       */
      once(type, handler) {
        this.__internal__eventemitter.once(type, handler);
        return this;
      }
    };
  }
});

// node_modules/@polkadot/api/base/Decorate.js
function getAtQueryFn(api, { method, section: section2 }) {
  return assertReturn(api.rx.query[section2] && api.rx.query[section2][method], () => `query.${section2}.${method} is not available in this version of the metadata`);
}
var PAGE_SIZE_K2, PAGE_SIZE_V, PAGE_SIZE_Q, l14, instanceCounter, Decorate;
var init_Decorate = __esm({
  "node_modules/@polkadot/api/base/Decorate.js"() {
    init_esm5();
    init_api_derive();
    init_rpc_core();
    init_rpc_provider();
    init_types4();
    init_types_known();
    init_util();
    init_util_crypto();
    init_submittable();
    init_augmentObject();
    init_decorate2();
    init_validate3();
    init_Events();
    init_find2();
    PAGE_SIZE_K2 = 1e3;
    PAGE_SIZE_V = 250;
    PAGE_SIZE_Q = 50;
    l14 = logger("api/init");
    instanceCounter = 0;
    Decorate = class extends Events {
      __internal__instanceId;
      __internal__runtimeLog = {};
      __internal__registry;
      __internal__storageGetQ = [];
      __internal__storageSubQ = [];
      // HACK Use BN import so decorateDerive works... yes, wtf.
      __phantom = new import_bn.default(0);
      _type;
      _call = {};
      _consts = {};
      _derive;
      _errors = {};
      _events = {};
      _extrinsics;
      _extrinsicType = GenericExtrinsic.LATEST_EXTRINSIC_VERSION;
      _genesisHash;
      _isConnected;
      _isReady = false;
      _query = {};
      _queryMulti;
      _rpc;
      _rpcCore;
      _runtimeMap = {};
      _runtimeChain;
      _runtimeMetadata;
      _runtimeVersion;
      _rx = { call: {}, consts: {}, query: {}, tx: {} };
      _options;
      /**
       * This is the one and only method concrete children classes need to implement.
       * It's a higher-order function, which takes one argument
       * `method: Method extends (...args: any[]) => Observable<any>`
       * (and one optional `options`), and should return the user facing method.
       * For example:
       * - For ApiRx, `decorateMethod` should just be identity, because the input
       * function is already an Observable
       * - For ApiPromise, `decorateMethod` should return a function that takes all
       * the parameters from `method`, adds an optional `callback` argument, and
       * returns a Promise.
       *
       * We could easily imagine other user-facing interfaces, which are simply
       * implemented by transforming the Observable to Stream/Iterator/Kefir/Bacon
       * via `decorateMethod`.
       */
      _decorateMethod;
      /**
       * @description Create an instance of the class
       *
       * @param options Options object to create API instance or a Provider instance
       *
       * @example
       * <BR>
       *
       * ```javascript
       * import Api from '@polkadot/api/promise';
       *
       * const api = new Api().isReady();
       *
       * api.rpc.subscribeNewHeads((header) => {
       *   console.log(`new block #${header.number.toNumber()}`);
       * });
       * ```
       */
      constructor(options, type, decorateMethod) {
        super();
        this.__internal__instanceId = `${++instanceCounter}`;
        this.__internal__registry = options.source?.registry || options.registry || new TypeRegistry();
        this._rx.callAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map2((a) => a.rx.call));
        this._rx.queryAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map2((a) => a.rx.query));
        this._rx.registry = this.__internal__registry;
        this._decorateMethod = decorateMethod;
        this._options = options;
        this._type = type;
        const provider = options.source ? options.source._rpcCore.provider.isClonable ? options.source._rpcCore.provider.clone() : options.source._rpcCore.provider : options.provider || new WsProvider();
        this._rpcCore = new RpcCore(this.__internal__instanceId, this.__internal__registry, {
          isPedantic: this._options.isPedantic,
          provider,
          userRpc: this._options.rpc
        });
        this._isConnected = new BehaviorSubject(this._rpcCore.provider.isConnected);
        this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
      }
      /**
       * @description Return the current used registry
       */
      get registry() {
        return this.__internal__registry;
      }
      /**
       * @description Creates an instance of a type as registered
       */
      createType(type, ...params) {
        return this.__internal__registry.createType(type, ...params);
      }
      /**
       * @description Register additional user-defined of chain-specific types in the type registry
       */
      registerTypes(types2) {
        types2 && this.__internal__registry.register(types2);
      }
      /**
       * @returns `true` if the API operates with subscriptions
       */
      get hasSubscriptions() {
        return this._rpcCore.provider.hasSubscriptions;
      }
      /**
       * @returns `true` if the API decorate multi-key queries
       */
      get supportMulti() {
        return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
      }
      _emptyDecorated(registry, blockHash) {
        return {
          call: {},
          consts: {},
          errors: {},
          events: {},
          query: {},
          registry,
          rx: {
            call: {},
            query: {}
          },
          tx: createSubmittable(this._type, this._rx, this._decorateMethod, registry, blockHash)
        };
      }
      _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
        if (!decoratedApi) {
          decoratedApi = this._emptyDecorated(registry.registry, blockHash);
        }
        if (fromEmpty || !registry.decoratedMeta) {
          registry.decoratedMeta = expandMetadata(registry.registry, registry.metadata);
        }
        const runtime34 = this._decorateCalls(registry, this._decorateMethod, blockHash);
        const runtimeRx = this._decorateCalls(registry, this._rxDecorateMethod, blockHash);
        const storage = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);
        const storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);
        augmentObject("consts", registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
        augmentObject("errors", registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
        augmentObject("events", registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
        augmentObject("query", storage, decoratedApi.query, fromEmpty);
        augmentObject("query", storageRx, decoratedApi.rx.query, fromEmpty);
        augmentObject("call", runtime34, decoratedApi.call, fromEmpty);
        augmentObject("call", runtimeRx, decoratedApi.rx.call, fromEmpty);
        decoratedApi.findCall = (callIndex) => findCall(registry.registry, callIndex);
        decoratedApi.findError = (errorIndex) => findError(registry.registry, errorIndex);
        decoratedApi.queryMulti = blockHash ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash) : this._decorateMulti(this._decorateMethod);
        decoratedApi.runtimeVersion = registry.runtimeVersion;
        return {
          createdAt: blockHash,
          decoratedApi,
          decoratedMeta: registry.decoratedMeta
        };
      }
      _injectMetadata(registry, fromEmpty = false) {
        if (fromEmpty || !registry.decoratedApi) {
          registry.decoratedApi = this._emptyDecorated(registry.registry);
        }
        const { decoratedApi, decoratedMeta } = this._createDecorated(registry, fromEmpty, registry.decoratedApi);
        this._call = decoratedApi.call;
        this._consts = decoratedApi.consts;
        this._errors = decoratedApi.errors;
        this._events = decoratedApi.events;
        this._query = decoratedApi.query;
        this._rx.call = decoratedApi.rx.call;
        this._rx.query = decoratedApi.rx.query;
        const tx = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
        const rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
        if (fromEmpty || !this._extrinsics) {
          this._extrinsics = tx;
          this._rx.tx = rxtx;
        } else {
          augmentObject("tx", tx, this._extrinsics, false);
          augmentObject(null, rxtx, this._rx.tx, false);
        }
        augmentObject(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
        this.emit("decorated");
      }
      /**
       * @deprecated
       * backwards compatible endpoint for metadata injection, may be removed in the future (However, it is still useful for testing injection)
       */
      injectMetadata(metadata, fromEmpty, registry) {
        this._injectMetadata({ counter: 0, metadata, registry: registry || this.__internal__registry, runtimeVersion: this.__internal__registry.createType("RuntimeVersionPartial") }, fromEmpty);
      }
      _decorateFunctionMeta(input, output2) {
        output2.meta = input.meta;
        output2.method = input.method;
        output2.section = input.section;
        output2.toJSON = input.toJSON;
        if (input.callIndex) {
          output2.callIndex = input.callIndex;
        }
        return output2;
      }
      // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
      // manner to cater for both old and new:
      //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
      //   - when non-zero, remove anything that is not in the array (we don't do this)
      _filterRpc(methods, additional) {
        if (Object.keys(additional).length !== 0) {
          this._rpcCore.addUserInterfaces(additional);
          this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);
          this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
        }
        const sectionMap = {};
        for (let i = 0, count2 = methods.length; i < count2; i++) {
          const [section2] = methods[i].split("_");
          sectionMap[section2] = true;
        }
        const sections = Object.keys(sectionMap);
        for (let i = 0, count2 = sections.length; i < count2; i++) {
          const nameA = stringUpperFirst(sections[i]);
          const nameB = `${nameA}Api`;
          this._runtimeMap[blake2AsHex(nameA, 64)] = nameA;
          this._runtimeMap[blake2AsHex(nameB, 64)] = nameB;
        }
        this._filterRpcMethods(methods);
      }
      _filterRpcMethods(exposed) {
        const hasResults = exposed.length !== 0;
        const allKnown = [...this._rpcCore.mapping.entries()];
        const allKeys = [];
        const count2 = allKnown.length;
        for (let i = 0; i < count2; i++) {
          const [, { alias: alias2, endpoint, method, pubsub, section: section2 }] = allKnown[i];
          allKeys.push(`${section2}_${method}`);
          if (pubsub) {
            allKeys.push(`${section2}_${pubsub[1]}`);
            allKeys.push(`${section2}_${pubsub[2]}`);
          }
          if (alias2) {
            allKeys.push(...alias2);
          }
          if (endpoint) {
            allKeys.push(endpoint);
          }
        }
        const unknown = exposed.filter((k2) => !allKeys.includes(k2) && !k2.includes("_unstable_"));
        if (unknown.length && !this._options.noInitWarn) {
          l14.warn(`RPC methods not decorated: ${unknown.join(", ")}`);
        }
        for (let i = 0; i < count2; i++) {
          const [k2, { method, section: section2 }] = allKnown[i];
          if (hasResults && !exposed.includes(k2) && k2 !== "rpc_methods") {
            if (this._rpc[section2]) {
              delete this._rpc[section2][method];
              delete this._rx.rpc[section2][method];
            }
          }
        }
      }
      _rpcSubmitter(decorateMethod) {
        const method = (method2, ...params) => {
          return from(this._rpcCore.provider.send(method2, params));
        };
        return decorateMethod(method);
      }
      _decorateRpc(rpc18, decorateMethod, input = this._rpcSubmitter(decorateMethod)) {
        const out = input;
        const decorateFn = (section2, method) => {
          const source = rpc18[section2][method];
          const fn = decorateMethod(source, { methodName: method });
          fn.meta = source.meta;
          fn.raw = decorateMethod(source.raw, { methodName: method });
          return fn;
        };
        for (let s = 0, scount = rpc18.sections.length; s < scount; s++) {
          const section2 = rpc18.sections[s];
          if (!Object.prototype.hasOwnProperty.call(out, section2)) {
            const methods = Object.keys(rpc18[section2]);
            const decorateInternal = (method) => decorateFn(section2, method);
            for (let m = 0, mcount = methods.length; m < mcount; m++) {
              const method = methods[m];
              if (this.hasSubscriptions || !(method.startsWith("subscribe") || method.startsWith("unsubscribe"))) {
                if (!Object.prototype.hasOwnProperty.call(out, section2)) {
                  out[section2] = {};
                }
                lazyMethod(out[section2], method, decorateInternal);
              }
            }
          }
        }
        return out;
      }
      // add all definition entries
      _addRuntimeDef(result, additional) {
        if (!additional) {
          return;
        }
        const entries = Object.entries(additional);
        for (let j3 = 0, ecount = entries.length; j3 < ecount; j3++) {
          const [key, defs] = entries[j3];
          if (result[key]) {
            for (let k2 = 0, dcount = defs.length; k2 < dcount; k2++) {
              const def = defs[k2];
              const prev = result[key].find(({ version: version2 }) => def.version === version2);
              if (prev) {
                objectSpread(prev.methods, def.methods);
              } else {
                result[key].push(def);
              }
            }
          } else {
            result[key] = defs;
          }
        }
      }
      // extract all runtime definitions
      _getRuntimeDefs(registry, specName, chain = "") {
        const result = {};
        const defValues = Object.values(definitions_exports);
        for (let i = 0, count2 = defValues.length; i < count2; i++) {
          this._addRuntimeDef(result, defValues[i].runtime);
        }
        this._addRuntimeDef(result, getSpecRuntime(registry, chain, specName));
        this._addRuntimeDef(result, this._options.runtime);
        return Object.entries(result);
      }
      // pre-metadata decoration
      _decorateCalls({ registry, runtimeVersion: { apis, specName, specVersion } }, decorateMethod, blockHash) {
        const result = {};
        const named = {};
        const hashes = {};
        const sections = this._getRuntimeDefs(registry, specName, this._runtimeChain);
        const older = [];
        const implName = `${specName.toString()}/${specVersion.toString()}`;
        const hasLogged = this.__internal__runtimeLog[implName] || false;
        this.__internal__runtimeLog[implName] = true;
        for (let i = 0, scount = sections.length; i < scount; i++) {
          const [_section, secs] = sections[i];
          const sectionHash = blake2AsHex(_section, 64);
          const rtApi = apis.find(([a]) => a.eq(sectionHash));
          hashes[sectionHash] = true;
          if (rtApi) {
            const all3 = secs.map(({ version: version2 }) => version2).sort();
            const sec = secs.find(({ version: version2 }) => rtApi[1].eq(version2));
            if (sec) {
              const section2 = stringCamelCase(_section);
              const methods = Object.entries(sec.methods);
              if (methods.length) {
                if (!named[section2]) {
                  named[section2] = {};
                }
                for (let m = 0, mcount = methods.length; m < mcount; m++) {
                  const [_method, def] = methods[m];
                  const method = stringCamelCase(_method);
                  named[section2][method] = objectSpread({ method, name: `${_section}_${_method}`, section: section2, sectionHash }, def);
                }
              }
            } else {
              older.push(`${_section}/${rtApi[1].toString()} (${all3.join("/")} known)`);
            }
          }
        }
        const notFound = apis.map(([a, v3]) => [a.toHex(), v3.toString()]).filter(([a]) => !hashes[a]).map(([a, v3]) => `${this._runtimeMap[a] || a}/${v3}`);
        if (!this._options.noInitWarn && !hasLogged) {
          if (older.length) {
            l14.warn(`${implName}: Not decorating runtime apis without matching versions: ${older.join(", ")}`);
          }
          if (notFound.length) {
            l14.warn(`${implName}: Not decorating unknown runtime apis: ${notFound.join(", ")}`);
          }
        }
        const stateCall = blockHash ? (name, bytes3) => this._rpcCore.state.call(name, bytes3, blockHash) : (name, bytes3) => this._rpcCore.state.call(name, bytes3);
        const lazySection = (section2) => lazyMethods({}, Object.keys(named[section2]), (method) => this._decorateCall(registry, named[section2][method], stateCall, decorateMethod));
        const modules = Object.keys(named);
        for (let i = 0, count2 = modules.length; i < count2; i++) {
          lazyMethod(result, modules[i], lazySection);
        }
        return result;
      }
      _decorateCall(registry, def, stateCall, decorateMethod) {
        const decorated = decorateMethod((...args) => {
          if (args.length !== def.params.length) {
            throw new Error(`${def.name}:: Expected ${def.params.length} arguments, found ${args.length}`);
          }
          const bytes3 = registry.createType("Raw", u8aConcatStrict(args.map((a, i) => registry.createTypeUnsafe(def.params[i].type, [a]).toU8a())));
          return stateCall(def.name, bytes3).pipe(map2((r) => registry.createTypeUnsafe(def.type, [r])));
        });
        decorated.meta = def;
        return decorated;
      }
      // only be called if supportMulti is true
      _decorateMulti(decorateMethod) {
        return decorateMethod((keys2) => keys2.length ? (this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt)(keys2.map((args) => Array.isArray(args) ? args[0].creator.meta.type.isPlain ? [args[0].creator] : args[0].creator.meta.type.asMap.hashers.length === 1 ? [args[0].creator, args.slice(1)] : [args[0].creator, ...args.slice(1)] : [args.creator])) : of([]));
      }
      _decorateMultiAt(atApi, decorateMethod, blockHash) {
        return decorateMethod((calls) => calls.length ? this._rpcCore.state.queryStorageAt(calls.map((args) => {
          if (Array.isArray(args)) {
            const { creator } = getAtQueryFn(atApi, args[0].creator);
            return creator.meta.type.isPlain ? [creator] : creator.meta.type.asMap.hashers.length === 1 ? [creator, args.slice(1)] : [creator, ...args.slice(1)];
          }
          return [getAtQueryFn(atApi, args.creator).creator];
        }), blockHash) : of([]));
      }
      _decorateExtrinsics({ tx }, decorateMethod) {
        const result = createSubmittable(this._type, this._rx, decorateMethod);
        const lazySection = (section2) => lazyMethods({}, Object.keys(tx[section2]), (method) => method.startsWith("$") ? tx[section2][method] : this._decorateExtrinsicEntry(tx[section2][method], result));
        const sections = Object.keys(tx);
        for (let i = 0, count2 = sections.length; i < count2; i++) {
          lazyMethod(result, sections[i], lazySection);
        }
        return result;
      }
      _decorateExtrinsicEntry(method, creator) {
        const decorated = (...params) => creator(method(...params));
        decorated.is = (other) => method.is(other);
        return this._decorateFunctionMeta(method, decorated);
      }
      _decorateStorage({ query: query2, registry }, decorateMethod, blockHash) {
        const result = {};
        const lazySection = (section2) => lazyMethods({}, Object.keys(query2[section2]), (method) => blockHash ? this._decorateStorageEntryAt(registry, query2[section2][method], decorateMethod, blockHash) : this._decorateStorageEntry(query2[section2][method], decorateMethod));
        const sections = Object.keys(query2);
        for (let i = 0, count2 = sections.length; i < count2; i++) {
          lazyMethod(result, sections[i], lazySection);
        }
        return result;
      }
      _decorateStorageEntry(creator, decorateMethod) {
        const getArgs = (args, registry) => extractStorageArgs(registry || this.__internal__registry, creator, args);
        const getQueryAt = (blockHash) => from(this.at(blockHash)).pipe(map2((api) => getAtQueryFn(api, creator)));
        const decorated = this._decorateStorageCall(creator, decorateMethod);
        decorated.creator = creator;
        decorated.at = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q2) => q2(...args))));
        decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args)));
        decorated.is = (key) => key.section === creator.section && key.method === creator.method;
        decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);
        decorated.keyPrefix = (...args) => u8aToHex(creator.keyPrefix(...args));
        decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args)));
        decorated.sizeAt = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q2) => this._rpcCore.state.getStorageSize(getArgs(args, q2.creator.meta.registry), blockHash))));
        if (creator.iterKey && creator.meta.type.isMap) {
          decorated.entries = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, null, args)));
          decorated.entriesAt = decorateMethod(memo(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q2) => this._retrieveMapEntries(q2.creator, blockHash, args)))));
          decorated.entriesPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, void 0, opts)));
          decorated.keys = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, null, args)));
          decorated.keysAt = decorateMethod(memo(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q2) => this._retrieveMapKeys(q2.creator, blockHash, args)))));
          decorated.keysPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, void 0, opts)));
        }
        if (this.supportMulti && creator.meta.type.isMap) {
          decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map((a) => [creator, [a]])) : this._retrieveMulti(args.map((a) => [creator, a])));
        }
        return this._decorateFunctionMeta(creator, decorated);
      }
      _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
        const getArgs = (args) => extractStorageArgs(registry, creator, args);
        const decorated = decorateMethod((...args) => this._rpcCore.state.getStorage(getArgs(args), blockHash));
        decorated.creator = creator;
        decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args), blockHash));
        decorated.is = (key) => key.section === creator.section && key.method === creator.method;
        decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);
        decorated.keyPrefix = (...keys2) => u8aToHex(creator.keyPrefix(...keys2));
        decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args), blockHash));
        if (creator.iterKey && creator.meta.type.isMap) {
          decorated.entries = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, blockHash, args)));
          decorated.entriesPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, blockHash, opts)));
          decorated.keys = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, blockHash, args)));
          decorated.keysPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, blockHash, opts)));
        }
        if (this.supportMulti && creator.meta.type.isMap) {
          decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map((a) => [creator, [a]]), blockHash) : this._retrieveMulti(args.map((a) => [creator, a]), blockHash));
        }
        return this._decorateFunctionMeta(creator, decorated);
      }
      _queueStorage(call, queue2) {
        const query2 = queue2 === this.__internal__storageSubQ ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
        let queueIdx = queue2.length - 1;
        let valueIdx = 0;
        let valueObs;
        if (queueIdx === -1 || !queue2[queueIdx] || queue2[queueIdx][1].length === PAGE_SIZE_Q) {
          queueIdx++;
          valueObs = from(
            // we delay the execution until the next tick, this allows
            // any queries made in this timeframe to be added to the same
            // queue for a single query
            new Promise((resolve) => {
              nextTick(() => {
                const calls = queue2[queueIdx][1];
                delete queue2[queueIdx];
                resolve(calls);
              });
            })
          ).pipe(switchMap((calls) => query2(calls)));
          queue2.push([valueObs, [call]]);
        } else {
          valueObs = queue2[queueIdx][0];
          valueIdx = queue2[queueIdx][1].length;
          queue2[queueIdx][1].push(call);
        }
        return valueObs.pipe(
          // return the single value at this index
          map2((values) => values[valueIdx])
        );
      }
      // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
      // we make a subscription, alternatively we push this through a single-shot query
      _decorateStorageCall(creator, decorateMethod) {
        const memoed = memo(this.__internal__instanceId, (...args) => {
          const call = extractStorageArgs(this.__internal__registry, creator, args);
          if (!this.hasSubscriptions) {
            return this._rpcCore.state.getStorage(call);
          }
          return this._queueStorage(call, this.__internal__storageSubQ);
        });
        return decorateMethod(memoed, {
          methodName: creator.method,
          overrideNoSub: (...args) => this._queueStorage(extractStorageArgs(this.__internal__registry, creator, args), this.__internal__storageGetQ)
        });
      }
      // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes
      _retrieveMulti(keys2, blockHash) {
        if (!keys2.length) {
          return of([]);
        }
        const query2 = this.hasSubscriptions && !blockHash ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
        if (keys2.length <= PAGE_SIZE_V) {
          return blockHash ? query2(keys2, blockHash) : query2(keys2);
        }
        return combineLatest(arrayChunk(keys2, PAGE_SIZE_V).map((k2) => blockHash ? query2(k2, blockHash) : query2(k2))).pipe(map2(arrayFlatten));
      }
      _retrieveMapKeys({ iterKey, meta, method, section: section2 }, at2, args) {
        if (!iterKey || !meta.type.isMap) {
          throw new Error("keys can only be retrieved on maps");
        }
        const headKey = iterKey(...args).toHex();
        const startSubject = new BehaviorSubject(headKey);
        const query2 = at2 ? (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K2, startKey, at2) : (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K2, startKey);
        const setMeta = (key) => key.setMeta(meta, section2, method);
        return startSubject.pipe(
          switchMap(query2),
          map2((keys2) => keys2.map(setMeta)),
          tap((keys2) => nextTick(() => {
            keys2.length === PAGE_SIZE_K2 ? startSubject.next(keys2[PAGE_SIZE_K2 - 1].toHex()) : startSubject.complete();
          })),
          toArray(),
          // toArray since we want to startSubject to be completed
          map2(arrayFlatten)
        );
      }
      _retrieveMapKeysPaged({ iterKey, meta, method, section: section2 }, at2, opts) {
        if (!iterKey || !meta.type.isMap) {
          throw new Error("keys can only be retrieved on maps");
        }
        const setMeta = (key) => key.setMeta(meta, section2, method);
        const query2 = at2 ? (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey, at2) : (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey);
        return query2(iterKey(...opts.args).toHex()).pipe(map2((keys2) => keys2.map(setMeta)));
      }
      _retrieveMapEntries(entry, at2, args) {
        const query2 = at2 ? (keys2) => this._rpcCore.state.queryStorageAt(keys2, at2) : (keys2) => this._rpcCore.state.queryStorageAt(keys2);
        return this._retrieveMapKeys(entry, at2, args).pipe(switchMap((keys2) => keys2.length ? combineLatest(arrayChunk(keys2, PAGE_SIZE_V).map(query2)).pipe(map2((valsArr) => arrayFlatten(valsArr).map((value, index) => [keys2[index], value]))) : of([])));
      }
      _retrieveMapEntriesPaged(entry, at2, opts) {
        const query2 = at2 ? (keys2) => this._rpcCore.state.queryStorageAt(keys2, at2) : (keys2) => this._rpcCore.state.queryStorageAt(keys2);
        return this._retrieveMapKeysPaged(entry, at2, opts).pipe(switchMap((keys2) => keys2.length ? query2(keys2).pipe(map2((valsArr) => valsArr.map((value, index) => [keys2[index], value]))) : of([])));
      }
      _decorateDeriveRx(decorateMethod) {
        const specName = this._runtimeVersion?.specName.toString();
        const available = getAvailableDerives(this.__internal__instanceId, this._rx, objectSpread({}, this._options.derives, this._options.typesBundle?.spec?.[specName || ""]?.derives));
        return decorateDeriveSections(decorateMethod, available);
      }
      _decorateDerive(decorateMethod) {
        return decorateDeriveSections(decorateMethod, this._rx.derive);
      }
      /**
       * Put the `this.onCall` function of ApiRx here, because it is needed by
       * `api._rx`.
       */
      _rxDecorateMethod = (method) => {
        return method;
      };
    };
  }
});

// node_modules/@polkadot/api/base/Init.js
function textToString(t) {
  return t.toString();
}
var KEEPALIVE_INTERVAL, WITH_VERSION_SHORTCUT, l15, Init;
var init_Init = __esm({
  "node_modules/@polkadot/api/base/Init.js"() {
    init_esm5();
    init_types4();
    init_types_known();
    init_util();
    init_util_crypto();
    init_Decorate();
    KEEPALIVE_INTERVAL = 1e4;
    WITH_VERSION_SHORTCUT = false;
    l15 = logger("api/init");
    Init = class extends Decorate {
      __internal__atLast = null;
      __internal__healthTimer = null;
      __internal__registries = [];
      __internal__updateSub = null;
      __internal__waitingRegistries = {};
      constructor(options, type, decorateMethod) {
        super(options, type, decorateMethod);
        this.registry.setKnownTypes(options);
        if (!options.source) {
          this.registerTypes(options.types);
        } else {
          this.__internal__registries = options.source.__internal__registries;
        }
        this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
        this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);
        if (this.supportMulti) {
          this._queryMulti = this._decorateMulti(this._decorateMethod);
          this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
        }
        this._rx.signer = options.signer;
        this._rpcCore.setRegistrySwap((blockHash) => this.getBlockRegistry(blockHash));
        this._rpcCore.setResolveBlockHash((blockNumber) => firstValueFrom(this._rpcCore.chain.getBlockHash(blockNumber)));
        if (this.hasSubscriptions) {
          this._rpcCore.provider.on("disconnected", () => this.__internal__onProviderDisconnect());
          this._rpcCore.provider.on("error", (e) => this.__internal__onProviderError(e));
          this._rpcCore.provider.on("connected", () => this.__internal__onProviderConnect());
        } else if (!this._options.noInitWarn) {
          l15.warn("Api will be available in a limited mode since the provider does not support subscriptions");
        }
        if (this._rpcCore.provider.isConnected) {
          this.__internal__onProviderConnect().catch(noop);
        }
      }
      /**
       * @description Decorates a registry based on the runtime version
       */
      _initRegistry(registry, chain, version2, metadata, chainProps) {
        registry.clearCache();
        registry.setChainProperties(chainProps || this.registry.getChainProperties());
        registry.setKnownTypes(this._options);
        registry.register(getSpecTypes(registry, chain, version2.specName, version2.specVersion));
        registry.setHasher(getSpecHasher(registry, chain, version2.specName));
        if (registry.knownTypes.typesBundle) {
          registry.knownTypes.typesAlias = getSpecAlias(registry, chain, version2.specName);
        }
        registry.setMetadata(metadata, void 0, objectSpread({}, getSpecExtensions(registry, chain, version2.specName), this._options.signedExtensions), this._options.noInitWarn);
      }
      /**
       * @description Returns the default versioned registry
       */
      _getDefaultRegistry() {
        return assertReturn(this.__internal__registries.find(({ isDefault }) => isDefault), "Initialization error, cannot find the default registry");
      }
      /**
       * @description Returns a decorated API instance at a specific point in time
       */
      async at(blockHash, knownVersion) {
        const u8aHash = u8aToU8a(blockHash);
        const u8aHex = u8aToHex(u8aHash);
        const registry = await this.getBlockRegistry(u8aHash, knownVersion);
        if (!this.__internal__atLast || this.__internal__atLast[0] !== u8aHex) {
          this.__internal__atLast = [u8aHex, this._createDecorated(registry, true, null, u8aHash).decoratedApi];
        }
        return this.__internal__atLast[1];
      }
      async _createBlockRegistry(blockHash, header, version2) {
        const registry = new TypeRegistry(blockHash);
        const metadata = new Metadata(registry, await firstValueFrom(this._rpcCore.state.getMetadata.raw(header.parentHash)));
        const runtimeChain = this._runtimeChain;
        if (!runtimeChain) {
          throw new Error("Invalid initializion order, runtimeChain is not available");
        }
        this._initRegistry(registry, runtimeChain, version2, metadata);
        const result = { counter: 0, lastBlockHash: blockHash, metadata, registry, runtimeVersion: version2 };
        this.__internal__registries.push(result);
        return result;
      }
      _cacheBlockRegistryProgress(key, creator) {
        let waiting = this.__internal__waitingRegistries[key];
        if (isUndefined(waiting)) {
          waiting = this.__internal__waitingRegistries[key] = new Promise((resolve, reject) => {
            creator().then((registry) => {
              delete this.__internal__waitingRegistries[key];
              resolve(registry);
            }).catch((error) => {
              delete this.__internal__waitingRegistries[key];
              reject(error);
            });
          });
        }
        return waiting;
      }
      _getBlockRegistryViaVersion(blockHash, version2) {
        if (version2) {
          const existingViaVersion = this.__internal__registries.find(({ runtimeVersion: { specName, specVersion } }) => specName.eq(version2.specName) && specVersion.eq(version2.specVersion));
          if (existingViaVersion) {
            existingViaVersion.counter++;
            existingViaVersion.lastBlockHash = blockHash;
            return existingViaVersion;
          }
        }
        return null;
      }
      async _getBlockRegistryViaHash(blockHash) {
        if (!this._genesisHash || !this._runtimeVersion) {
          throw new Error("Cannot retrieve data on an uninitialized chain");
        }
        const header = this.registry.createType("HeaderPartial", this._genesisHash.eq(blockHash) ? { number: BN_ZERO, parentHash: this._genesisHash } : await firstValueFrom(this._rpcCore.chain.getHeader.raw(blockHash)));
        if (header.parentHash.isEmpty) {
          throw new Error("Unable to retrieve header and parent from supplied hash");
        }
        const [firstVersion, lastVersion] = getUpgradeVersion(this._genesisHash, header.number);
        const version2 = this.registry.createType("RuntimeVersionPartial", WITH_VERSION_SHORTCUT && (firstVersion && (lastVersion || firstVersion.specVersion.eq(this._runtimeVersion.specVersion))) ? { apis: firstVersion.apis, specName: this._runtimeVersion.specName, specVersion: firstVersion.specVersion } : await firstValueFrom(this._rpcCore.state.getRuntimeVersion.raw(header.parentHash)));
        return (
          // try to find via version
          this._getBlockRegistryViaVersion(blockHash, version2) || // return new or in-flight result
          await this._cacheBlockRegistryProgress(version2.toHex(), () => this._createBlockRegistry(blockHash, header, version2))
        );
      }
      /**
       * @description Sets up a registry based on the block hash defined
       */
      async getBlockRegistry(blockHash, knownVersion) {
        return (
          // try to find via blockHash
          this.__internal__registries.find(({ lastBlockHash }) => lastBlockHash && u8aEq(lastBlockHash, blockHash)) || // try to find via version
          this._getBlockRegistryViaVersion(blockHash, knownVersion) || // return new or in-flight result
          await this._cacheBlockRegistryProgress(u8aToHex(blockHash), () => this._getBlockRegistryViaHash(blockHash))
        );
      }
      async _loadMeta() {
        if (this._isReady) {
          return true;
        }
        this._unsubscribeUpdates();
        [this._genesisHash, this._runtimeMetadata] = this._options.source?._isReady ? await this._metaFromSource(this._options.source) : await this._metaFromChain(this._options.metadata);
        return this._initFromMeta(this._runtimeMetadata);
      }
      // eslint-disable-next-line @typescript-eslint/require-await
      async _metaFromSource(source) {
        this._extrinsicType = source.extrinsicVersion;
        this._runtimeChain = source.runtimeChain;
        this._runtimeVersion = source.runtimeVersion;
        const sections = Object.keys(source.rpc);
        const rpcs = [];
        for (let s = 0, scount = sections.length; s < scount; s++) {
          const section2 = sections[s];
          const methods = Object.keys(source.rpc[section2]);
          for (let m = 0, mcount = methods.length; m < mcount; m++) {
            rpcs.push(`${section2}_${methods[m]}`);
          }
        }
        this._filterRpc(rpcs, getSpecRpc(this.registry, source.runtimeChain, source.runtimeVersion.specName));
        return [source.genesisHash, source.runtimeMetadata];
      }
      // subscribe to metadata updates, inject the types on changes
      _subscribeUpdates() {
        if (this.__internal__updateSub || !this.hasSubscriptions) {
          return;
        }
        this.__internal__updateSub = this._rpcCore.state.subscribeRuntimeVersion().pipe(switchMap((version2) => (
          // only retrieve the metadata when the on-chain version has been changed
          this._runtimeVersion?.specVersion.eq(version2.specVersion) ? of(false) : this._rpcCore.state.getMetadata().pipe(map2((metadata) => {
            l15.log(`Runtime version updated to spec=${version2.specVersion.toString()}, tx=${version2.transactionVersion.toString()}`);
            this._runtimeMetadata = metadata;
            this._runtimeVersion = version2;
            this._rx.runtimeVersion = version2;
            const thisRegistry = this._getDefaultRegistry();
            const runtimeChain = this._runtimeChain;
            if (!runtimeChain) {
              throw new Error("Invalid initializion order, runtimeChain is not available");
            }
            thisRegistry.metadata = metadata;
            thisRegistry.runtimeVersion = version2;
            this._initRegistry(this.registry, runtimeChain, version2, metadata);
            this._injectMetadata(thisRegistry, true);
            return true;
          }))
        ))).subscribe();
      }
      async _metaFromChain(optMetadata) {
        const [genesisHash, runtimeVersion, chain, chainProps, rpcMethods, chainMetadata] = await Promise.all([
          firstValueFrom(this._rpcCore.chain.getBlockHash(0)),
          firstValueFrom(this._rpcCore.state.getRuntimeVersion()),
          firstValueFrom(this._rpcCore.system.chain()),
          firstValueFrom(this._rpcCore.system.properties()),
          firstValueFrom(this._rpcCore.rpc.methods()),
          optMetadata ? Promise.resolve(null) : firstValueFrom(this._rpcCore.state.getMetadata())
        ]);
        this._runtimeChain = chain;
        this._runtimeVersion = runtimeVersion;
        this._rx.runtimeVersion = runtimeVersion;
        const metadataKey = `${genesisHash.toHex() || "0x"}-${runtimeVersion.specVersion.toString()}`;
        const metadata = chainMetadata || (optMetadata?.[metadataKey] ? new Metadata(this.registry, optMetadata[metadataKey]) : await firstValueFrom(this._rpcCore.state.getMetadata()));
        this._initRegistry(this.registry, chain, runtimeVersion, metadata, chainProps);
        this._filterRpc(rpcMethods.methods.map(textToString), getSpecRpc(this.registry, chain, runtimeVersion.specName));
        this._subscribeUpdates();
        if (!this.__internal__registries.length) {
          this.__internal__registries.push({ counter: 0, isDefault: true, metadata, registry: this.registry, runtimeVersion });
        }
        metadata.getUniqTypes(this._options.throwOnUnknown || false);
        return [genesisHash, metadata];
      }
      _initFromMeta(metadata) {
        const runtimeVersion = this._runtimeVersion;
        if (!runtimeVersion) {
          throw new Error("Invalid initializion order, runtimeVersion is not available");
        }
        this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
        this._rx.extrinsicType = this._extrinsicType;
        this._rx.genesisHash = this._genesisHash;
        this._rx.runtimeVersion = runtimeVersion;
        this._injectMetadata(this._getDefaultRegistry(), true);
        this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
        this._derive = this._decorateDerive(this._decorateMethod);
        return true;
      }
      _subscribeHealth() {
        this._unsubscribeHealth();
        this.__internal__healthTimer = this.hasSubscriptions ? setInterval(() => {
          firstValueFrom(this._rpcCore.system.health.raw()).catch(noop);
        }, KEEPALIVE_INTERVAL) : null;
      }
      _unsubscribeHealth() {
        if (this.__internal__healthTimer) {
          clearInterval(this.__internal__healthTimer);
          this.__internal__healthTimer = null;
        }
      }
      _unsubscribeUpdates() {
        if (this.__internal__updateSub) {
          this.__internal__updateSub.unsubscribe();
          this.__internal__updateSub = null;
        }
      }
      _unsubscribe() {
        this._unsubscribeHealth();
        this._unsubscribeUpdates();
      }
      async __internal__onProviderConnect() {
        this._isConnected.next(true);
        this.emit("connected");
        try {
          const cryptoReady = this._options.initWasm === false ? true : await cryptoWaitReady();
          const hasMeta = await this._loadMeta();
          this._subscribeHealth();
          if (hasMeta && !this._isReady && cryptoReady) {
            this._isReady = true;
            this.emit("ready", this);
          }
        } catch (_error) {
          const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
          l15.error(error);
          this.emit("error", error);
        }
      }
      __internal__onProviderDisconnect() {
        this._isConnected.next(false);
        this._unsubscribe();
        this.emit("disconnected");
      }
      __internal__onProviderError(error) {
        this.emit("error", error);
      }
    };
  }
});

// node_modules/@polkadot/api/base/Getters.js
function assertResult(value) {
  if (value === void 0) {
    throw new Error("Api interfaces needs to be initialized before using, wait for 'isReady'");
  }
  return value;
}
var Getters;
var init_Getters = __esm({
  "node_modules/@polkadot/api/base/Getters.js"() {
    init_packageInfo11();
    init_find2();
    init_Init();
    Getters = class extends Init {
      /**
       * @description Runtime call interfaces (currently untyped, only decorated via API options)
       */
      get call() {
        return assertResult(this._call);
      }
      /**
       * @description Contains the parameter types (constants) of all modules.
       *
       * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
       *
       * @example
       * <BR>
       *
       * ```javascript
       * console.log(api.consts.democracy.enactmentPeriod.toString())
       * ```
       */
      get consts() {
        return assertResult(this._consts);
      }
      /**
       * @description Derived results that are injected into the API, allowing for combinations of various query results.
       *
       * @example
       * <BR>
       *
       * ```javascript
       * api.derive.chain.bestNumber((number) => {
       *   console.log('best number', number);
       * });
       * ```
       */
      get derive() {
        return assertResult(this._derive);
      }
      /**
       * @description Errors from metadata
       */
      get errors() {
        return assertResult(this._errors);
      }
      /**
       * @description Events from metadata
       */
      get events() {
        return assertResult(this._events);
      }
      /**
       * @description  Returns the version of extrinsics in-use on this chain
       */
      get extrinsicVersion() {
        return this._extrinsicType;
      }
      /**
       * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
       */
      get genesisHash() {
        return assertResult(this._genesisHash);
      }
      /**
       * @description true is the underlying provider is connected
       */
      get isConnected() {
        return this._isConnected.getValue();
      }
      /**
       * @description The library information name & version (from package.json)
       */
      get libraryInfo() {
        return `${packageInfo11.name} v${packageInfo11.version}`;
      }
      /**
       * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
       *
       * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
       *
       * @example
       * <BR>
       *
       * ```javascript
       * api.query.system.account(<accountId>, ([nonce, balance]) => {
       *   console.log('new free balance', balance.free, 'new nonce', nonce);
       * });
       * ```
       */
      get query() {
        return assertResult(this._query);
      }
      /**
       * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
       *
       * @example
       * <BR>
       *
       * ```javascript
       * const unsub = await api.queryMulti(
       *   [
       *     // you can include the storage without any parameters
       *     api.query.balances.totalIssuance,
       *     // or you can pass parameters to the storage query
       *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
       *   ],
       *   ([existential, [, { free }]]) => {
       *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
       *
       *     unsub();
       *   }
       * );
       * ```
       */
      get queryMulti() {
        return assertResult(this._queryMulti);
      }
      /**
       * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
       *
       * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
       *
       * @example
       * <BR>
       *
       * ```javascript
       * api.rpc.chain.subscribeNewHeads((header) => {
       *   console.log('new header', header);
       * });
       * ```
       */
      get rpc() {
        return assertResult(this._rpc);
      }
      /**
       * @description Contains the chain information for the current node.
       */
      get runtimeChain() {
        return assertResult(this._runtimeChain);
      }
      /**
       * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
       */
      get runtimeMetadata() {
        return assertResult(this._runtimeMetadata);
      }
      /**
       * @description Contains the version information for the current runtime.
       */
      get runtimeVersion() {
        return assertResult(this._runtimeVersion);
      }
      /**
       * @description The underlying Rx API interface
       */
      get rx() {
        return assertResult(this._rx);
      }
      /**
       * @description Returns the underlying provider stats
       */
      get stats() {
        return this._rpcCore.stats;
      }
      /**
       * @description The type of this API instance, either 'rxjs' or 'promise'
       */
      get type() {
        return this._type;
      }
      /**
       * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
       *
       * @example
       * <BR>
       *
       * ```javascript
       * api.tx.balances
       *   .transferAllowDeath(<recipientId>, <balance>)
       *   .signAndSend(<keyPair>, ({status}) => {
       *     console.log('tx status', status.asFinalized.toHex());
       *   });
       * ```
       */
      get tx() {
        return assertResult(this._extrinsics);
      }
      /**
       * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
       */
      findCall(callIndex) {
        return findCall(this.registry, callIndex);
      }
      /**
       * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
       */
      findError(errorIndex) {
        return findError(this.registry, errorIndex);
      }
    };
  }
});

// node_modules/@polkadot/api/base/index.js
var ApiBase;
var init_base2 = __esm({
  "node_modules/@polkadot/api/base/index.js"() {
    init_util();
    init_Getters();
    ApiBase = class extends Getters {
      /**
       * @description Create an instance of the class
       *
       * @param options Options object to create API instance or a Provider instance
       *
       * @example
       * <BR>
       *
       * ```javascript
       * import Api from '@polkadot/api/promise';
       *
       * const api = new Api().isReady();
       *
       * api.rpc.subscribeNewHeads((header) => {
       *   console.log(`new block #${header.number.toNumber()}`);
       * });
       * ```
       */
      constructor(options = {}, type, decorateMethod) {
        super(options, type, decorateMethod);
      }
      /**
       * @description Connect from the underlying provider, halting all network traffic
       */
      connect() {
        return this._rpcCore.connect();
      }
      /**
       * @description Disconnect from the underlying provider, halting all network traffic
       */
      disconnect() {
        this._unsubscribe();
        return this._rpcCore.disconnect();
      }
      /**
       * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
       */
      setSigner(signer) {
        this._rx.signer = signer;
      }
      /**
       * @description Signs a raw signer payload, string or Uint8Array
       */
      async sign(address, data, { signer } = {}) {
        if (isString(address)) {
          const _signer = signer || this._rx.signer;
          if (!_signer?.signRaw) {
            throw new Error("No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
          }
          return (await _signer.signRaw(objectSpread({ type: "bytes" }, data, { address }))).signature;
        }
        return u8aToHex(address.sign(u8aToU8a(data.data)));
      }
    };
  }
});

// node_modules/@polkadot/api/promise/Combinator.js
var Combinator;
var init_Combinator = __esm({
  "node_modules/@polkadot/api/promise/Combinator.js"() {
    init_util();
    Combinator = class {
      __internal__allHasFired = false;
      __internal__callback;
      __internal__fired = [];
      __internal__fns = [];
      __internal__isActive = true;
      __internal__results = [];
      __internal__subscriptions = [];
      constructor(fns, callback) {
        this.__internal__callback = callback;
        this.__internal__subscriptions = fns.map(async (input, index) => {
          const [fn, ...args] = Array.isArray(input) ? input : [input];
          this.__internal__fired.push(false);
          this.__internal__fns.push(fn);
          return fn(...args, this._createCallback(index));
        });
      }
      _allHasFired() {
        this.__internal__allHasFired ||= this.__internal__fired.filter((hasFired) => !hasFired).length === 0;
        return this.__internal__allHasFired;
      }
      _createCallback(index) {
        return (value) => {
          this.__internal__fired[index] = true;
          this.__internal__results[index] = value;
          this._triggerUpdate();
        };
      }
      _triggerUpdate() {
        if (!this.__internal__isActive || !isFunction(this.__internal__callback) || !this._allHasFired()) {
          return;
        }
        try {
          Promise.resolve(this.__internal__callback(this.__internal__results)).catch(noop);
        } catch {
        }
      }
      unsubscribe() {
        if (!this.__internal__isActive) {
          return;
        }
        this.__internal__isActive = false;
        Promise.all(this.__internal__subscriptions.map(async (subscription) => {
          try {
            const unsubscribe = await subscription;
            if (isFunction(unsubscribe)) {
              unsubscribe();
            }
          } catch {
          }
        })).catch(() => {
        });
      }
    };
  }
});

// node_modules/@polkadot/api/promise/decorateMethod.js
function promiseTracker(resolve, reject) {
  let isCompleted = false;
  return {
    reject: (error) => {
      if (!isCompleted) {
        isCompleted = true;
        reject(error);
      }
      return EMPTY;
    },
    resolve: (value) => {
      if (!isCompleted) {
        isCompleted = true;
        resolve(value);
      }
    }
  };
}
function extractArgs(args, needsCallback) {
  const actualArgs = args.slice();
  const callback = args.length && isFunction(args[args.length - 1]) ? actualArgs.pop() : void 0;
  if (needsCallback && !isFunction(callback)) {
    throw new Error("Expected a callback to be passed with subscriptions");
  }
  return [actualArgs, callback];
}
function decorateCall(method, args) {
  return new Promise((resolve, reject) => {
    const tracker = promiseTracker(resolve, reject);
    const subscription = method(...args).pipe(catchError((error) => tracker.reject(error))).subscribe((result) => {
      tracker.resolve(result);
      nextTick(() => subscription.unsubscribe());
    });
  });
}
function decorateSubscribe(method, args, resultCb) {
  return new Promise((resolve, reject) => {
    const tracker = promiseTracker(resolve, reject);
    const subscription = method(...args).pipe(catchError((error) => tracker.reject(error)), tap(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe((result) => {
      nextTick(() => resultCb(result));
    });
  });
}
function toPromiseMethod(method, options) {
  const needsCallback = !!(options?.methodName && options.methodName.includes("subscribe"));
  return function(...args) {
    const [actualArgs, resultCb] = extractArgs(args, needsCallback);
    return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall(options?.overrideNoSub || method, actualArgs);
  };
}
var init_decorateMethod = __esm({
  "node_modules/@polkadot/api/promise/decorateMethod.js"() {
    init_esm5();
    init_util();
  }
});

// node_modules/@polkadot/api/promise/Api.js
var ApiPromise;
var init_Api = __esm({
  "node_modules/@polkadot/api/promise/Api.js"() {
    init_util();
    init_base2();
    init_Combinator();
    init_decorateMethod();
    ApiPromise = class _ApiPromise extends ApiBase {
      __internal__isReadyPromise;
      __internal__isReadyOrErrorPromise;
      /**
       * @description Creates an instance of the ApiPromise class
       * @param options Options to create an instance. This can be either [[ApiOptions]] or
       * an [[WsProvider]].
       * @example
       * <BR>
       *
       * ```javascript
       * import Api from '@polkadot/api/promise';
       *
       * new Api().isReady.then((api) => {
       *   api.rpc.subscribeNewHeads((header) => {
       *     console.log(`new block #${header.number.toNumber()}`);
       *   });
       * });
       * ```
       */
      constructor(options) {
        super(options, "promise", toPromiseMethod);
        this.__internal__isReadyPromise = new Promise((resolve) => {
          super.once("ready", () => resolve(this));
        });
        this.__internal__isReadyOrErrorPromise = new Promise((resolve, reject) => {
          const tracker = promiseTracker(resolve, reject);
          super.once("ready", () => tracker.resolve(this));
          super.once("error", (error) => tracker.reject(error));
        });
      }
      /**
       * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
       * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
       * provider (see the constructor arguments)
       * @example
       * <BR>
       *
       * ```javascript
       * import Api from '@polkadot/api/promise';
       *
       * Api.create().then(async (api) => {
       *   const timestamp = await api.query.timestamp.now();
       *
       *   console.log(`lastest block timestamp ${timestamp}`);
       * });
       * ```
       */
      static create(options) {
        const instance = new _ApiPromise(options);
        if (options && options.throwOnConnect) {
          return instance.isReadyOrError;
        }
        instance.isReadyOrError.catch(noop);
        return instance.isReady;
      }
      /**
       * @description Promise that resolves the first time we are connected and loaded
       */
      get isReady() {
        return this.__internal__isReadyPromise;
      }
      /**
       * @description Promise that resolves if we can connect, or reject if there is an error
       */
      get isReadyOrError() {
        return this.__internal__isReadyOrErrorPromise;
      }
      /**
       * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
       */
      clone() {
        return new _ApiPromise(objectSpread({}, this._options, { source: this }));
      }
      /**
       * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
       * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
       * @param callback A callback that will return an Array of all the values this combinator has been applied to
       * @example
       * <BR>
       *
       * ```javascript
       * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
       *
       * // combines values from balance & nonce as it updates
       * api.combineLatest([
       *   api.rpc.chain.subscribeNewHeads,
       *   (cb) => api.query.system.account(address, cb)
       * ], ([head, [balance, nonce]]) => {
       *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
       * });
       * ```
       */
      // eslint-disable-next-line @typescript-eslint/require-await
      async combineLatest(fns, callback) {
        const combinator = new Combinator(fns, callback);
        return () => {
          combinator.unsubscribe();
        };
      }
    };
  }
});

// node_modules/@polkadot/api/promise/index.js
var init_promise2 = __esm({
  "node_modules/@polkadot/api/promise/index.js"() {
    init_Api();
    init_decorateMethod();
  }
});

// node_modules/@polkadot/api/rx/decorateMethod.js
function toRxMethod(method) {
  return method;
}
var init_decorateMethod2 = __esm({
  "node_modules/@polkadot/api/rx/decorateMethod.js"() {
  }
});

// node_modules/@polkadot/api/rx/Api.js
var ApiRx;
var init_Api2 = __esm({
  "node_modules/@polkadot/api/rx/Api.js"() {
    init_esm5();
    init_util();
    init_base2();
    init_decorateMethod2();
    ApiRx = class _ApiRx extends ApiBase {
      __internal__isReadyRx;
      /**
       * @description Create an instance of the ApiRx class
       * @param options Options to create an instance. Can be either [[ApiOptions]] or [[WsProvider]]
       * @example
       * <BR>
       *
       * ```javascript
       * import { switchMap } from 'rxjs';
       * import Api from '@polkadot/api/rx';
       *
       * new Api().isReady
       *   .pipe(
       *     switchMap((api) =>
       *       api.rpc.chain.subscribeNewHeads()
       *   ))
       *   .subscribe((header) => {
       *     console.log(`new block #${header.number.toNumber()}`);
       *   });
       * ```
       */
      constructor(options) {
        super(options, "rxjs", toRxMethod);
        this.__internal__isReadyRx = from(
          // You can create an observable from an event, however my mind groks this form better
          new Promise((resolve) => {
            super.on("ready", () => resolve(this));
          })
        );
      }
      /**
       * @description Creates an ApiRx instance using the supplied provider. Returns an Observable containing the actual Api instance.
       * @param options options that is passed to the class constructor. Can be either [[ApiOptions]] or [[WsProvider]]
       * @example
       * <BR>
       *
       * ```javascript
       * import { switchMap } from 'rxjs';
       * import Api from '@polkadot/api/rx';
       *
       * Api.create()
       *   .pipe(
       *     switchMap((api) =>
       *       api.rpc.chain.subscribeNewHeads()
       *   ))
       *   .subscribe((header) => {
       *     console.log(`new block #${header.number.toNumber()}`);
       *   });
       * ```
       */
      static create(options) {
        return new _ApiRx(options).isReady;
      }
      /**
       * @description Observable that returns the first time we are connected and loaded
       */
      get isReady() {
        return this.__internal__isReadyRx;
      }
      /**
       * @description Returns a clone of this ApiRx instance (new underlying provider connection)
       */
      clone() {
        return new _ApiRx(objectSpread({}, this._options, { source: this }));
      }
    };
  }
});

// node_modules/@polkadot/api/rx/index.js
var init_rx = __esm({
  "node_modules/@polkadot/api/rx/index.js"() {
    init_Api2();
    init_decorateMethod2();
  }
});

// node_modules/@polkadot/api/bundle.js
var init_bundle16 = __esm({
  "node_modules/@polkadot/api/bundle.js"() {
    init_rpc_augment();
    init_keyring2();
    init_rpc_provider();
    init_packageInfo11();
    init_submittable();
    init_promise2();
    init_rx();
  }
});

// node_modules/@polkadot/api/index.js
var api_exports = {};
__export(api_exports, {
  ApiPromise: () => ApiPromise,
  ApiRx: () => ApiRx,
  HttpProvider: () => HttpProvider,
  Keyring: () => Keyring,
  ScProvider: () => ScProvider,
  SubmittableResult: () => SubmittableResult,
  WsProvider: () => WsProvider,
  packageInfo: () => packageInfo11,
  toPromiseMethod: () => toPromiseMethod,
  toRxMethod: () => toRxMethod
});
var init_api = __esm({
  "node_modules/@polkadot/api/index.js"() {
    init_packageDetect();
    init_bundle16();
  }
});

// node_modules/ripple-binary-codec/dist/enums/definitions.json
var require_definitions = __commonJS({
  "node_modules/ripple-binary-codec/dist/enums/definitions.json"(exports, module2) {
    module2.exports = {
      FIELDS: [
        [
          "Generic",
          {
            isSerialized: false,
            isSigningField: false,
            isVLEncoded: false,
            nth: 0,
            type: "Unknown"
          }
        ],
        [
          "Invalid",
          {
            isSerialized: false,
            isSigningField: false,
            isVLEncoded: false,
            nth: -1,
            type: "Unknown"
          }
        ],
        [
          "ObjectEndMarker",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "STObject"
          }
        ],
        [
          "ArrayEndMarker",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "STArray"
          }
        ],
        [
          "taker_gets_funded",
          {
            isSerialized: false,
            isSigningField: false,
            isVLEncoded: false,
            nth: 258,
            type: "Amount"
          }
        ],
        [
          "taker_pays_funded",
          {
            isSerialized: false,
            isSigningField: false,
            isVLEncoded: false,
            nth: 259,
            type: "Amount"
          }
        ],
        [
          "LedgerEntryType",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "UInt16"
          }
        ],
        [
          "TransactionType",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 2,
            type: "UInt16"
          }
        ],
        [
          "SignerWeight",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 3,
            type: "UInt16"
          }
        ],
        [
          "TransferFee",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 4,
            type: "UInt16"
          }
        ],
        [
          "TradingFee",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 5,
            type: "UInt16"
          }
        ],
        [
          "DiscountedFee",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 6,
            type: "UInt16"
          }
        ],
        [
          "Version",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 16,
            type: "UInt16"
          }
        ],
        [
          "HookStateChangeCount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 17,
            type: "UInt16"
          }
        ],
        [
          "HookEmitCount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 18,
            type: "UInt16"
          }
        ],
        [
          "HookExecutionIndex",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 19,
            type: "UInt16"
          }
        ],
        [
          "HookApiVersion",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 20,
            type: "UInt16"
          }
        ],
        [
          "LedgerFixType",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 21,
            type: "UInt16"
          }
        ],
        [
          "NetworkID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "UInt32"
          }
        ],
        [
          "Flags",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 2,
            type: "UInt32"
          }
        ],
        [
          "SourceTag",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 3,
            type: "UInt32"
          }
        ],
        [
          "Sequence",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 4,
            type: "UInt32"
          }
        ],
        [
          "PreviousTxnLgrSeq",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 5,
            type: "UInt32"
          }
        ],
        [
          "LedgerSequence",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 6,
            type: "UInt32"
          }
        ],
        [
          "CloseTime",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 7,
            type: "UInt32"
          }
        ],
        [
          "ParentCloseTime",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 8,
            type: "UInt32"
          }
        ],
        [
          "SigningTime",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 9,
            type: "UInt32"
          }
        ],
        [
          "Expiration",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 10,
            type: "UInt32"
          }
        ],
        [
          "TransferRate",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 11,
            type: "UInt32"
          }
        ],
        [
          "WalletSize",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 12,
            type: "UInt32"
          }
        ],
        [
          "OwnerCount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 13,
            type: "UInt32"
          }
        ],
        [
          "DestinationTag",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 14,
            type: "UInt32"
          }
        ],
        [
          "LastUpdateTime",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 15,
            type: "UInt32"
          }
        ],
        [
          "HighQualityIn",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 16,
            type: "UInt32"
          }
        ],
        [
          "HighQualityOut",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 17,
            type: "UInt32"
          }
        ],
        [
          "LowQualityIn",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 18,
            type: "UInt32"
          }
        ],
        [
          "LowQualityOut",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 19,
            type: "UInt32"
          }
        ],
        [
          "QualityIn",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 20,
            type: "UInt32"
          }
        ],
        [
          "QualityOut",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 21,
            type: "UInt32"
          }
        ],
        [
          "StampEscrow",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 22,
            type: "UInt32"
          }
        ],
        [
          "BondAmount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 23,
            type: "UInt32"
          }
        ],
        [
          "LoadFee",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 24,
            type: "UInt32"
          }
        ],
        [
          "OfferSequence",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 25,
            type: "UInt32"
          }
        ],
        [
          "FirstLedgerSequence",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 26,
            type: "UInt32"
          }
        ],
        [
          "LastLedgerSequence",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 27,
            type: "UInt32"
          }
        ],
        [
          "TransactionIndex",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 28,
            type: "UInt32"
          }
        ],
        [
          "OperationLimit",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 29,
            type: "UInt32"
          }
        ],
        [
          "ReferenceFeeUnits",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 30,
            type: "UInt32"
          }
        ],
        [
          "ReserveBase",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 31,
            type: "UInt32"
          }
        ],
        [
          "ReserveIncrement",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 32,
            type: "UInt32"
          }
        ],
        [
          "SetFlag",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 33,
            type: "UInt32"
          }
        ],
        [
          "ClearFlag",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 34,
            type: "UInt32"
          }
        ],
        [
          "SignerQuorum",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 35,
            type: "UInt32"
          }
        ],
        [
          "CancelAfter",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 36,
            type: "UInt32"
          }
        ],
        [
          "FinishAfter",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 37,
            type: "UInt32"
          }
        ],
        [
          "SignerListID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 38,
            type: "UInt32"
          }
        ],
        [
          "SettleDelay",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 39,
            type: "UInt32"
          }
        ],
        [
          "TicketCount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 40,
            type: "UInt32"
          }
        ],
        [
          "TicketSequence",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 41,
            type: "UInt32"
          }
        ],
        [
          "NFTokenTaxon",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 42,
            type: "UInt32"
          }
        ],
        [
          "MintedNFTokens",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 43,
            type: "UInt32"
          }
        ],
        [
          "BurnedNFTokens",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 44,
            type: "UInt32"
          }
        ],
        [
          "HookStateCount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 45,
            type: "UInt32"
          }
        ],
        [
          "EmitGeneration",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 46,
            type: "UInt32"
          }
        ],
        [
          "VoteWeight",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 48,
            type: "UInt32"
          }
        ],
        [
          "FirstNFTokenSequence",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 50,
            type: "UInt32"
          }
        ],
        [
          "OracleDocumentID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 51,
            type: "UInt32"
          }
        ],
        [
          "PermissionValue",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 52,
            type: "UInt32"
          }
        ],
        [
          "IndexNext",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "UInt64"
          }
        ],
        [
          "IndexPrevious",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 2,
            type: "UInt64"
          }
        ],
        [
          "BookNode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 3,
            type: "UInt64"
          }
        ],
        [
          "OwnerNode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 4,
            type: "UInt64"
          }
        ],
        [
          "BaseFee",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 5,
            type: "UInt64"
          }
        ],
        [
          "ExchangeRate",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 6,
            type: "UInt64"
          }
        ],
        [
          "LowNode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 7,
            type: "UInt64"
          }
        ],
        [
          "HighNode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 8,
            type: "UInt64"
          }
        ],
        [
          "DestinationNode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 9,
            type: "UInt64"
          }
        ],
        [
          "Cookie",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 10,
            type: "UInt64"
          }
        ],
        [
          "ServerVersion",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 11,
            type: "UInt64"
          }
        ],
        [
          "NFTokenOfferNode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 12,
            type: "UInt64"
          }
        ],
        [
          "EmitBurden",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 13,
            type: "UInt64"
          }
        ],
        [
          "HookOn",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 16,
            type: "UInt64"
          }
        ],
        [
          "HookInstructionCount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 17,
            type: "UInt64"
          }
        ],
        [
          "HookReturnCode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 18,
            type: "UInt64"
          }
        ],
        [
          "ReferenceCount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 19,
            type: "UInt64"
          }
        ],
        [
          "XChainClaimID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 20,
            type: "UInt64"
          }
        ],
        [
          "XChainAccountCreateCount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 21,
            type: "UInt64"
          }
        ],
        [
          "XChainAccountClaimCount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 22,
            type: "UInt64"
          }
        ],
        [
          "AssetPrice",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 23,
            type: "UInt64"
          }
        ],
        [
          "MaximumAmount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 24,
            type: "UInt64"
          }
        ],
        [
          "OutstandingAmount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 25,
            type: "UInt64"
          }
        ],
        [
          "MPTAmount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 26,
            type: "UInt64"
          }
        ],
        [
          "IssuerNode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 27,
            type: "UInt64"
          }
        ],
        [
          "SubjectNode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 28,
            type: "UInt64"
          }
        ],
        [
          "LockedAmount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 29,
            type: "UInt64"
          }
        ],
        [
          "EmailHash",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "Hash128"
          }
        ],
        [
          "LedgerHash",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "Hash256"
          }
        ],
        [
          "ParentHash",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 2,
            type: "Hash256"
          }
        ],
        [
          "TransactionHash",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 3,
            type: "Hash256"
          }
        ],
        [
          "AccountHash",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 4,
            type: "Hash256"
          }
        ],
        [
          "PreviousTxnID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 5,
            type: "Hash256"
          }
        ],
        [
          "LedgerIndex",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 6,
            type: "Hash256"
          }
        ],
        [
          "WalletLocator",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 7,
            type: "Hash256"
          }
        ],
        [
          "RootIndex",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 8,
            type: "Hash256"
          }
        ],
        [
          "AccountTxnID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 9,
            type: "Hash256"
          }
        ],
        [
          "NFTokenID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 10,
            type: "Hash256"
          }
        ],
        [
          "EmitParentTxnID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 11,
            type: "Hash256"
          }
        ],
        [
          "EmitNonce",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 12,
            type: "Hash256"
          }
        ],
        [
          "EmitHookHash",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 13,
            type: "Hash256"
          }
        ],
        [
          "AMMID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 14,
            type: "Hash256"
          }
        ],
        [
          "BookDirectory",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 16,
            type: "Hash256"
          }
        ],
        [
          "InvoiceID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 17,
            type: "Hash256"
          }
        ],
        [
          "Nickname",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 18,
            type: "Hash256"
          }
        ],
        [
          "Amendment",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 19,
            type: "Hash256"
          }
        ],
        [
          "Digest",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 21,
            type: "Hash256"
          }
        ],
        [
          "Channel",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 22,
            type: "Hash256"
          }
        ],
        [
          "ConsensusHash",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 23,
            type: "Hash256"
          }
        ],
        [
          "CheckID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 24,
            type: "Hash256"
          }
        ],
        [
          "ValidatedHash",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 25,
            type: "Hash256"
          }
        ],
        [
          "PreviousPageMin",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 26,
            type: "Hash256"
          }
        ],
        [
          "NextPageMin",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 27,
            type: "Hash256"
          }
        ],
        [
          "NFTokenBuyOffer",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 28,
            type: "Hash256"
          }
        ],
        [
          "NFTokenSellOffer",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 29,
            type: "Hash256"
          }
        ],
        [
          "HookStateKey",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 30,
            type: "Hash256"
          }
        ],
        [
          "HookHash",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 31,
            type: "Hash256"
          }
        ],
        [
          "HookNamespace",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 32,
            type: "Hash256"
          }
        ],
        [
          "HookSetTxnID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 33,
            type: "Hash256"
          }
        ],
        [
          "DomainID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 34,
            type: "Hash256"
          }
        ],
        [
          "VaultID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 35,
            type: "Hash256"
          }
        ],
        [
          "ParentBatchID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 36,
            type: "Hash256"
          }
        ],
        [
          "hash",
          {
            isSerialized: false,
            isSigningField: false,
            isVLEncoded: false,
            nth: 257,
            type: "Hash256"
          }
        ],
        [
          "index",
          {
            isSerialized: false,
            isSigningField: false,
            isVLEncoded: false,
            nth: 258,
            type: "Hash256"
          }
        ],
        [
          "Amount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "Amount"
          }
        ],
        [
          "Balance",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 2,
            type: "Amount"
          }
        ],
        [
          "LimitAmount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 3,
            type: "Amount"
          }
        ],
        [
          "TakerPays",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 4,
            type: "Amount"
          }
        ],
        [
          "TakerGets",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 5,
            type: "Amount"
          }
        ],
        [
          "LowLimit",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 6,
            type: "Amount"
          }
        ],
        [
          "HighLimit",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 7,
            type: "Amount"
          }
        ],
        [
          "Fee",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 8,
            type: "Amount"
          }
        ],
        [
          "SendMax",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 9,
            type: "Amount"
          }
        ],
        [
          "DeliverMin",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 10,
            type: "Amount"
          }
        ],
        [
          "Amount2",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 11,
            type: "Amount"
          }
        ],
        [
          "BidMin",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 12,
            type: "Amount"
          }
        ],
        [
          "BidMax",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 13,
            type: "Amount"
          }
        ],
        [
          "MinimumOffer",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 16,
            type: "Amount"
          }
        ],
        [
          "RippleEscrow",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 17,
            type: "Amount"
          }
        ],
        [
          "DeliveredAmount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 18,
            type: "Amount"
          }
        ],
        [
          "NFTokenBrokerFee",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 19,
            type: "Amount"
          }
        ],
        [
          "BaseFeeDrops",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 22,
            type: "Amount"
          }
        ],
        [
          "ReserveBaseDrops",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 23,
            type: "Amount"
          }
        ],
        [
          "ReserveIncrementDrops",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 24,
            type: "Amount"
          }
        ],
        [
          "LPTokenOut",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 25,
            type: "Amount"
          }
        ],
        [
          "LPTokenIn",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 26,
            type: "Amount"
          }
        ],
        [
          "EPrice",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 27,
            type: "Amount"
          }
        ],
        [
          "Price",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 28,
            type: "Amount"
          }
        ],
        [
          "SignatureReward",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 29,
            type: "Amount"
          }
        ],
        [
          "MinAccountCreateAmount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 30,
            type: "Amount"
          }
        ],
        [
          "LPTokenBalance",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 31,
            type: "Amount"
          }
        ],
        [
          "PublicKey",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 1,
            type: "Blob"
          }
        ],
        [
          "MessageKey",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 2,
            type: "Blob"
          }
        ],
        [
          "SigningPubKey",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 3,
            type: "Blob"
          }
        ],
        [
          "TxnSignature",
          {
            isSerialized: true,
            isSigningField: false,
            isVLEncoded: true,
            nth: 4,
            type: "Blob"
          }
        ],
        [
          "URI",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 5,
            type: "Blob"
          }
        ],
        [
          "Signature",
          {
            isSerialized: true,
            isSigningField: false,
            isVLEncoded: true,
            nth: 6,
            type: "Blob"
          }
        ],
        [
          "Domain",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 7,
            type: "Blob"
          }
        ],
        [
          "FundCode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 8,
            type: "Blob"
          }
        ],
        [
          "RemoveCode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 9,
            type: "Blob"
          }
        ],
        [
          "ExpireCode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 10,
            type: "Blob"
          }
        ],
        [
          "CreateCode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 11,
            type: "Blob"
          }
        ],
        [
          "MemoType",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 12,
            type: "Blob"
          }
        ],
        [
          "MemoData",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 13,
            type: "Blob"
          }
        ],
        [
          "MemoFormat",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 14,
            type: "Blob"
          }
        ],
        [
          "Fulfillment",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 16,
            type: "Blob"
          }
        ],
        [
          "Condition",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 17,
            type: "Blob"
          }
        ],
        [
          "MasterSignature",
          {
            isSerialized: true,
            isSigningField: false,
            isVLEncoded: true,
            nth: 18,
            type: "Blob"
          }
        ],
        [
          "UNLModifyValidator",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 19,
            type: "Blob"
          }
        ],
        [
          "ValidatorToDisable",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 20,
            type: "Blob"
          }
        ],
        [
          "ValidatorToReEnable",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 21,
            type: "Blob"
          }
        ],
        [
          "HookStateData",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 22,
            type: "Blob"
          }
        ],
        [
          "HookReturnString",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 23,
            type: "Blob"
          }
        ],
        [
          "HookParameterName",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 24,
            type: "Blob"
          }
        ],
        [
          "HookParameterValue",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 25,
            type: "Blob"
          }
        ],
        [
          "DIDDocument",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 26,
            type: "Blob"
          }
        ],
        [
          "Data",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 27,
            type: "Blob"
          }
        ],
        [
          "AssetClass",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 28,
            type: "Blob"
          }
        ],
        [
          "Provider",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 29,
            type: "Blob"
          }
        ],
        [
          "MPTokenMetadata",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 30,
            type: "Blob"
          }
        ],
        [
          "CredentialType",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 31,
            type: "Blob"
          }
        ],
        [
          "Account",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 1,
            type: "AccountID"
          }
        ],
        [
          "Owner",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 2,
            type: "AccountID"
          }
        ],
        [
          "Destination",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 3,
            type: "AccountID"
          }
        ],
        [
          "Issuer",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 4,
            type: "AccountID"
          }
        ],
        [
          "Authorize",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 5,
            type: "AccountID"
          }
        ],
        [
          "Unauthorize",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 6,
            type: "AccountID"
          }
        ],
        [
          "RegularKey",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 8,
            type: "AccountID"
          }
        ],
        [
          "NFTokenMinter",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 9,
            type: "AccountID"
          }
        ],
        [
          "EmitCallback",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 10,
            type: "AccountID"
          }
        ],
        [
          "Holder",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 11,
            type: "AccountID"
          }
        ],
        [
          "Delegate",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 12,
            type: "AccountID"
          }
        ],
        [
          "HookAccount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 16,
            type: "AccountID"
          }
        ],
        [
          "OtherChainSource",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 18,
            type: "AccountID"
          }
        ],
        [
          "OtherChainDestination",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 19,
            type: "AccountID"
          }
        ],
        [
          "AttestationSignerAccount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 20,
            type: "AccountID"
          }
        ],
        [
          "AttestationRewardAccount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 21,
            type: "AccountID"
          }
        ],
        [
          "LockingChainDoor",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 22,
            type: "AccountID"
          }
        ],
        [
          "IssuingChainDoor",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 23,
            type: "AccountID"
          }
        ],
        [
          "Subject",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 24,
            type: "AccountID"
          }
        ],
        [
          "Number",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "Number"
          }
        ],
        [
          "AssetsAvailable",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 2,
            type: "Number"
          }
        ],
        [
          "AssetsMaximum",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 3,
            type: "Number"
          }
        ],
        [
          "AssetsTotal",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 4,
            type: "Number"
          }
        ],
        [
          "LossUnrealized",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 5,
            type: "Number"
          }
        ],
        [
          "TransactionMetaData",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 2,
            type: "STObject"
          }
        ],
        [
          "CreatedNode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 3,
            type: "STObject"
          }
        ],
        [
          "DeletedNode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 4,
            type: "STObject"
          }
        ],
        [
          "ModifiedNode",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 5,
            type: "STObject"
          }
        ],
        [
          "PreviousFields",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 6,
            type: "STObject"
          }
        ],
        [
          "FinalFields",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 7,
            type: "STObject"
          }
        ],
        [
          "NewFields",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 8,
            type: "STObject"
          }
        ],
        [
          "TemplateEntry",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 9,
            type: "STObject"
          }
        ],
        [
          "Memo",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 10,
            type: "STObject"
          }
        ],
        [
          "SignerEntry",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 11,
            type: "STObject"
          }
        ],
        [
          "NFToken",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 12,
            type: "STObject"
          }
        ],
        [
          "EmitDetails",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 13,
            type: "STObject"
          }
        ],
        [
          "Hook",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 14,
            type: "STObject"
          }
        ],
        [
          "Permission",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 15,
            type: "STObject"
          }
        ],
        [
          "Signer",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 16,
            type: "STObject"
          }
        ],
        [
          "Majority",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 18,
            type: "STObject"
          }
        ],
        [
          "DisabledValidator",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 19,
            type: "STObject"
          }
        ],
        [
          "EmittedTxn",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 20,
            type: "STObject"
          }
        ],
        [
          "HookExecution",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 21,
            type: "STObject"
          }
        ],
        [
          "HookDefinition",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 22,
            type: "STObject"
          }
        ],
        [
          "HookParameter",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 23,
            type: "STObject"
          }
        ],
        [
          "HookGrant",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 24,
            type: "STObject"
          }
        ],
        [
          "VoteEntry",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 25,
            type: "STObject"
          }
        ],
        [
          "AuctionSlot",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 26,
            type: "STObject"
          }
        ],
        [
          "AuthAccount",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 27,
            type: "STObject"
          }
        ],
        [
          "XChainClaimProofSig",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 28,
            type: "STObject"
          }
        ],
        [
          "XChainCreateAccountProofSig",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 29,
            type: "STObject"
          }
        ],
        [
          "XChainClaimAttestationCollectionElement",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 30,
            type: "STObject"
          }
        ],
        [
          "XChainCreateAccountAttestationCollectionElement",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 31,
            type: "STObject"
          }
        ],
        [
          "PriceData",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 32,
            type: "STObject"
          }
        ],
        [
          "Credential",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 33,
            type: "STObject"
          }
        ],
        [
          "RawTransaction",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 34,
            type: "STObject"
          }
        ],
        [
          "BatchSigner",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 35,
            type: "STObject"
          }
        ],
        [
          "Book",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 36,
            type: "STObject"
          }
        ],
        [
          "Signers",
          {
            isSerialized: true,
            isSigningField: false,
            isVLEncoded: false,
            nth: 3,
            type: "STArray"
          }
        ],
        [
          "SignerEntries",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 4,
            type: "STArray"
          }
        ],
        [
          "Template",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 5,
            type: "STArray"
          }
        ],
        [
          "Necessary",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 6,
            type: "STArray"
          }
        ],
        [
          "Sufficient",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 7,
            type: "STArray"
          }
        ],
        [
          "AffectedNodes",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 8,
            type: "STArray"
          }
        ],
        [
          "Memos",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 9,
            type: "STArray"
          }
        ],
        [
          "NFTokens",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 10,
            type: "STArray"
          }
        ],
        [
          "Hooks",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 11,
            type: "STArray"
          }
        ],
        [
          "VoteSlots",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 12,
            type: "STArray"
          }
        ],
        [
          "AdditionalBooks",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 13,
            type: "STArray"
          }
        ],
        [
          "Majorities",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 16,
            type: "STArray"
          }
        ],
        [
          "DisabledValidators",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 17,
            type: "STArray"
          }
        ],
        [
          "HookExecutions",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 18,
            type: "STArray"
          }
        ],
        [
          "HookParameters",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 19,
            type: "STArray"
          }
        ],
        [
          "HookGrants",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 20,
            type: "STArray"
          }
        ],
        [
          "XChainClaimAttestations",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 21,
            type: "STArray"
          }
        ],
        [
          "XChainCreateAccountAttestations",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 22,
            type: "STArray"
          }
        ],
        [
          "PriceDataSeries",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 24,
            type: "STArray"
          }
        ],
        [
          "AuthAccounts",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 25,
            type: "STArray"
          }
        ],
        [
          "AuthorizeCredentials",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 26,
            type: "STArray"
          }
        ],
        [
          "UnauthorizeCredentials",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 27,
            type: "STArray"
          }
        ],
        [
          "AcceptedCredentials",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 28,
            type: "STArray"
          }
        ],
        [
          "Permissions",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 29,
            type: "STArray"
          }
        ],
        [
          "RawTransactions",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 30,
            type: "STArray"
          }
        ],
        [
          "BatchSigners",
          {
            isSerialized: true,
            isSigningField: false,
            isVLEncoded: false,
            nth: 31,
            type: "STArray"
          }
        ],
        [
          "CloseResolution",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "UInt8"
          }
        ],
        [
          "Method",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 2,
            type: "UInt8"
          }
        ],
        [
          "TransactionResult",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 3,
            type: "UInt8"
          }
        ],
        [
          "Scale",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 4,
            type: "UInt8"
          }
        ],
        [
          "AssetScale",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 5,
            type: "UInt8"
          }
        ],
        [
          "TickSize",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 16,
            type: "UInt8"
          }
        ],
        [
          "UNLModifyDisabling",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 17,
            type: "UInt8"
          }
        ],
        [
          "HookResult",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 18,
            type: "UInt8"
          }
        ],
        [
          "WasLockingChainSend",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 19,
            type: "UInt8"
          }
        ],
        [
          "WithdrawalPolicy",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 20,
            type: "UInt8"
          }
        ],
        [
          "TakerPaysCurrency",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "Hash160"
          }
        ],
        [
          "TakerPaysIssuer",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 2,
            type: "Hash160"
          }
        ],
        [
          "TakerGetsCurrency",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 3,
            type: "Hash160"
          }
        ],
        [
          "TakerGetsIssuer",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 4,
            type: "Hash160"
          }
        ],
        [
          "Paths",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "PathSet"
          }
        ],
        [
          "Indexes",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 1,
            type: "Vector256"
          }
        ],
        [
          "Hashes",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 2,
            type: "Vector256"
          }
        ],
        [
          "Amendments",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 3,
            type: "Vector256"
          }
        ],
        [
          "NFTokenOffers",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 4,
            type: "Vector256"
          }
        ],
        [
          "CredentialIDs",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: true,
            nth: 5,
            type: "Vector256"
          }
        ],
        [
          "MPTokenIssuanceID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "Hash192"
          }
        ],
        [
          "ShareMPTID",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 2,
            type: "Hash192"
          }
        ],
        [
          "LockingChainIssue",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "Issue"
          }
        ],
        [
          "IssuingChainIssue",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 2,
            type: "Issue"
          }
        ],
        [
          "Asset",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 3,
            type: "Issue"
          }
        ],
        [
          "Asset2",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 4,
            type: "Issue"
          }
        ],
        [
          "XChainBridge",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "XChainBridge"
          }
        ],
        [
          "BaseAsset",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 1,
            type: "Currency"
          }
        ],
        [
          "QuoteAsset",
          {
            isSerialized: true,
            isSigningField: true,
            isVLEncoded: false,
            nth: 2,
            type: "Currency"
          }
        ],
        [
          "Transaction",
          {
            isSerialized: false,
            isSigningField: false,
            isVLEncoded: false,
            nth: 257,
            type: "Transaction"
          }
        ],
        [
          "LedgerEntry",
          {
            isSerialized: false,
            isSigningField: false,
            isVLEncoded: false,
            nth: 257,
            type: "LedgerEntry"
          }
        ],
        [
          "Validation",
          {
            isSerialized: false,
            isSigningField: false,
            isVLEncoded: false,
            nth: 257,
            type: "Validation"
          }
        ],
        [
          "Metadata",
          {
            isSerialized: false,
            isSigningField: false,
            isVLEncoded: false,
            nth: 257,
            type: "Metadata"
          }
        ]
      ],
      LEDGER_ENTRY_TYPES: {
        AMM: 121,
        AccountRoot: 97,
        Amendments: 102,
        Bridge: 105,
        Check: 67,
        Credential: 129,
        DID: 73,
        Delegate: 131,
        DepositPreauth: 112,
        DirectoryNode: 100,
        Escrow: 117,
        FeeSettings: 115,
        Invalid: -1,
        LedgerHashes: 104,
        MPToken: 127,
        MPTokenIssuance: 126,
        NFTokenOffer: 55,
        NFTokenPage: 80,
        NegativeUNL: 78,
        Offer: 111,
        Oracle: 128,
        PayChannel: 120,
        PermissionedDomain: 130,
        RippleState: 114,
        SignerList: 83,
        Ticket: 84,
        Vault: 132,
        XChainOwnedClaimID: 113,
        XChainOwnedCreateAccountClaimID: 116
      },
      TRANSACTION_RESULTS: {
        tecAMM_ACCOUNT: 168,
        tecAMM_BALANCE: 163,
        tecAMM_EMPTY: 166,
        tecAMM_FAILED: 164,
        tecAMM_INVALID_TOKENS: 165,
        tecAMM_NOT_EMPTY: 167,
        tecARRAY_EMPTY: 190,
        tecARRAY_TOO_LARGE: 191,
        tecBAD_CREDENTIALS: 193,
        tecCANT_ACCEPT_OWN_NFTOKEN_OFFER: 158,
        tecCLAIM: 100,
        tecCRYPTOCONDITION_ERROR: 146,
        tecDIR_FULL: 121,
        tecDST_TAG_NEEDED: 143,
        tecDUPLICATE: 149,
        tecEMPTY_DID: 187,
        tecEXPIRED: 148,
        tecFAILED_PROCESSING: 105,
        tecFROZEN: 137,
        tecHAS_OBLIGATIONS: 151,
        tecHOOK_REJECTED: 153,
        tecINCOMPLETE: 169,
        tecINSUFFICIENT_FUNDS: 159,
        tecINSUFFICIENT_PAYMENT: 161,
        tecINSUFFICIENT_RESERVE: 141,
        tecINSUFF_FEE: 136,
        tecINSUF_RESERVE_LINE: 122,
        tecINSUF_RESERVE_OFFER: 123,
        tecINTERNAL: 144,
        tecINVALID_UPDATE_TIME: 188,
        tecINVARIANT_FAILED: 147,
        tecKILLED: 150,
        tecLIMIT_EXCEEDED: 195,
        tecLOCKED: 192,
        tecMAX_SEQUENCE_REACHED: 154,
        tecNEED_MASTER_KEY: 142,
        tecNFTOKEN_BUY_SELL_MISMATCH: 156,
        tecNFTOKEN_OFFER_TYPE_MISMATCH: 157,
        tecNO_ALTERNATIVE_KEY: 130,
        tecNO_AUTH: 134,
        tecNO_DELEGATE_PERMISSION: 198,
        tecNO_DST: 124,
        tecNO_DST_INSUF_XRP: 125,
        tecNO_ENTRY: 140,
        tecNO_ISSUER: 133,
        tecNO_LINE: 135,
        tecNO_LINE_INSUF_RESERVE: 126,
        tecNO_LINE_REDUNDANT: 127,
        tecNO_PERMISSION: 139,
        tecNO_REGULAR_KEY: 131,
        tecNO_SUITABLE_NFTOKEN_PAGE: 155,
        tecNO_TARGET: 138,
        tecOBJECT_NOT_FOUND: 160,
        tecOVERSIZE: 145,
        tecOWNERS: 132,
        tecPATH_DRY: 128,
        tecPATH_PARTIAL: 101,
        tecPRECISION_LOSS: 197,
        tecPSEUDO_ACCOUNT: 196,
        tecTOKEN_PAIR_NOT_FOUND: 189,
        tecTOO_SOON: 152,
        tecUNFUNDED: 129,
        tecUNFUNDED_ADD: 102,
        tecUNFUNDED_AMM: 162,
        tecUNFUNDED_OFFER: 103,
        tecUNFUNDED_PAYMENT: 104,
        tecWRONG_ASSET: 194,
        tecXCHAIN_ACCOUNT_CREATE_PAST: 181,
        tecXCHAIN_ACCOUNT_CREATE_TOO_MANY: 182,
        tecXCHAIN_BAD_CLAIM_ID: 172,
        tecXCHAIN_BAD_PUBLIC_KEY_ACCOUNT_PAIR: 185,
        tecXCHAIN_BAD_TRANSFER_ISSUE: 170,
        tecXCHAIN_CLAIM_NO_QUORUM: 173,
        tecXCHAIN_CREATE_ACCOUNT_DISABLED: 186,
        tecXCHAIN_CREATE_ACCOUNT_NONXRP_ISSUE: 175,
        tecXCHAIN_INSUFF_CREATE_AMOUNT: 180,
        tecXCHAIN_NO_CLAIM_ID: 171,
        tecXCHAIN_NO_SIGNERS_LIST: 178,
        tecXCHAIN_PAYMENT_FAILED: 183,
        tecXCHAIN_PROOF_UNKNOWN_KEY: 174,
        tecXCHAIN_REWARD_MISMATCH: 177,
        tecXCHAIN_SELF_COMMIT: 184,
        tecXCHAIN_SENDING_ACCOUNT_MISMATCH: 179,
        tecXCHAIN_WRONG_CHAIN: 176,
        tefALREADY: -198,
        tefBAD_ADD_AUTH: -197,
        tefBAD_AUTH: -196,
        tefBAD_AUTH_MASTER: -183,
        tefBAD_LEDGER: -195,
        tefBAD_QUORUM: -185,
        tefBAD_SIGNATURE: -186,
        tefCREATED: -194,
        tefEXCEPTION: -193,
        tefFAILURE: -199,
        tefINTERNAL: -192,
        tefINVALID_LEDGER_FIX_TYPE: -178,
        tefINVARIANT_FAILED: -182,
        tefMASTER_DISABLED: -188,
        tefMAX_LEDGER: -187,
        tefNFTOKEN_IS_NOT_TRANSFERABLE: -179,
        tefNOT_MULTI_SIGNING: -184,
        tefNO_AUTH_REQUIRED: -191,
        tefNO_TICKET: -180,
        tefPAST_SEQ: -190,
        tefTOO_BIG: -181,
        tefWRONG_PRIOR: -189,
        telBAD_DOMAIN: -398,
        telBAD_PATH_COUNT: -397,
        telBAD_PUBLIC_KEY: -396,
        telCAN_NOT_QUEUE: -392,
        telCAN_NOT_QUEUE_BALANCE: -391,
        telCAN_NOT_QUEUE_BLOCKED: -389,
        telCAN_NOT_QUEUE_BLOCKS: -390,
        telCAN_NOT_QUEUE_FEE: -388,
        telCAN_NOT_QUEUE_FULL: -387,
        telENV_RPC_FAILED: -383,
        telFAILED_PROCESSING: -395,
        telINSUF_FEE_P: -394,
        telLOCAL_ERROR: -399,
        telNETWORK_ID_MAKES_TX_NON_CANONICAL: -384,
        telNO_DST_PARTIAL: -393,
        telREQUIRES_NETWORK_ID: -385,
        telWRONG_NETWORK: -386,
        temARRAY_EMPTY: -253,
        temARRAY_TOO_LARGE: -252,
        temBAD_AMM_TOKENS: -261,
        temBAD_AMOUNT: -298,
        temBAD_CURRENCY: -297,
        temBAD_EXPIRATION: -296,
        temBAD_FEE: -295,
        temBAD_ISSUER: -294,
        temBAD_LIMIT: -293,
        temBAD_NFTOKEN_TRANSFER_FEE: -262,
        temBAD_OFFER: -292,
        temBAD_PATH: -291,
        temBAD_PATH_LOOP: -290,
        temBAD_QUORUM: -271,
        temBAD_REGKEY: -289,
        temBAD_SEND_XRP_LIMIT: -288,
        temBAD_SEND_XRP_MAX: -287,
        temBAD_SEND_XRP_NO_DIRECT: -286,
        temBAD_SEND_XRP_PARTIAL: -285,
        temBAD_SEND_XRP_PATHS: -284,
        temBAD_SEQUENCE: -283,
        temBAD_SIGNATURE: -282,
        temBAD_SIGNER: -272,
        temBAD_SRC_ACCOUNT: -281,
        temBAD_TICK_SIZE: -269,
        temBAD_TRANSFER_FEE: -251,
        temBAD_TRANSFER_RATE: -280,
        temBAD_WEIGHT: -270,
        temCANNOT_PREAUTH_SELF: -267,
        temDISABLED: -273,
        temDST_IS_SRC: -279,
        temDST_NEEDED: -278,
        temEMPTY_DID: -254,
        temINVALID: -277,
        temINVALID_ACCOUNT_ID: -268,
        temINVALID_COUNT: -266,
        temINVALID_FLAG: -276,
        temINVALID_INNER_BATCH: -250,
        temMALFORMED: -299,
        temREDUNDANT: -275,
        temRIPPLE_EMPTY: -274,
        temSEQ_AND_TICKET: -263,
        temUNCERTAIN: -265,
        temUNKNOWN: -264,
        temXCHAIN_BAD_PROOF: -259,
        temXCHAIN_BRIDGE_BAD_ISSUES: -258,
        temXCHAIN_BRIDGE_BAD_MIN_ACCOUNT_CREATE_AMOUNT: -256,
        temXCHAIN_BRIDGE_BAD_REWARD_AMOUNT: -255,
        temXCHAIN_BRIDGE_NONDOOR_OWNER: -257,
        temXCHAIN_EQUAL_DOOR_ACCOUNTS: -260,
        terADDRESS_COLLISION: -86,
        terFUNDS_SPENT: -98,
        terINSUF_FEE_B: -97,
        terLAST: -91,
        terNO_ACCOUNT: -96,
        terNO_AMM: -87,
        terNO_AUTH: -95,
        terNO_LINE: -94,
        terNO_RIPPLE: -90,
        terOWNERS: -93,
        terPRE_SEQ: -92,
        terPRE_TICKET: -88,
        terQUEUED: -89,
        terRETRY: -99,
        tesSUCCESS: 0
      },
      TRANSACTION_TYPES: {
        AMMBid: 39,
        AMMClawback: 31,
        AMMCreate: 35,
        AMMDelete: 40,
        AMMDeposit: 36,
        AMMVote: 38,
        AMMWithdraw: 37,
        AccountDelete: 21,
        AccountSet: 3,
        Batch: 71,
        CheckCancel: 18,
        CheckCash: 17,
        CheckCreate: 16,
        Clawback: 30,
        CredentialAccept: 59,
        CredentialCreate: 58,
        CredentialDelete: 60,
        DIDDelete: 50,
        DIDSet: 49,
        DelegateSet: 64,
        DepositPreauth: 19,
        EnableAmendment: 100,
        EscrowCancel: 4,
        EscrowCreate: 1,
        EscrowFinish: 2,
        Invalid: -1,
        LedgerStateFix: 53,
        MPTokenAuthorize: 57,
        MPTokenIssuanceCreate: 54,
        MPTokenIssuanceDestroy: 55,
        MPTokenIssuanceSet: 56,
        NFTokenAcceptOffer: 29,
        NFTokenBurn: 26,
        NFTokenCancelOffer: 28,
        NFTokenCreateOffer: 27,
        NFTokenMint: 25,
        NFTokenModify: 61,
        OfferCancel: 8,
        OfferCreate: 7,
        OracleDelete: 52,
        OracleSet: 51,
        Payment: 0,
        PaymentChannelClaim: 15,
        PaymentChannelCreate: 13,
        PaymentChannelFund: 14,
        PermissionedDomainDelete: 63,
        PermissionedDomainSet: 62,
        SetFee: 101,
        SetRegularKey: 5,
        SignerListSet: 12,
        TicketCreate: 10,
        TrustSet: 20,
        UNLModify: 102,
        VaultClawback: 70,
        VaultCreate: 65,
        VaultDelete: 67,
        VaultDeposit: 68,
        VaultSet: 66,
        VaultWithdraw: 69,
        XChainAccountCreateCommit: 44,
        XChainAddAccountCreateAttestation: 46,
        XChainAddClaimAttestation: 45,
        XChainClaim: 43,
        XChainCommit: 42,
        XChainCreateBridge: 48,
        XChainCreateClaimID: 41,
        XChainModifyBridge: 47
      },
      TYPES: {
        AccountID: 8,
        Amount: 6,
        Blob: 7,
        Currency: 26,
        Done: -1,
        Hash128: 4,
        Hash160: 17,
        Hash192: 21,
        Hash256: 5,
        Issue: 24,
        LedgerEntry: 10002,
        Metadata: 10004,
        NotPresent: 0,
        Number: 9,
        PathSet: 18,
        STArray: 15,
        STObject: 14,
        Transaction: 10001,
        UInt16: 1,
        UInt32: 2,
        UInt384: 22,
        UInt512: 23,
        UInt64: 3,
        UInt8: 16,
        UInt96: 20,
        Unknown: -2,
        Validation: 10003,
        Vector256: 19,
        XChainBridge: 25
      }
    };
  }
});

// node_modules/ripple-binary-codec/dist/enums/bytes.js
var require_bytes2 = __commonJS({
  "node_modules/ripple-binary-codec/dist/enums/bytes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesLookup = exports.Bytes = void 0;
    var Bytes2 = class {
      constructor(name, ordinal, ordinalWidth) {
        this.name = name;
        this.ordinal = ordinal;
        this.ordinalWidth = ordinalWidth;
        this.bytes = new Uint8Array(ordinalWidth);
        for (let i = 0; i < ordinalWidth; i++) {
          this.bytes[ordinalWidth - i - 1] = ordinal >>> i * 8 & 255;
        }
      }
      toJSON() {
        return this.name;
      }
      toBytesSink(sink) {
        sink.put(this.bytes);
      }
      toBytes() {
        return this.bytes;
      }
    };
    exports.Bytes = Bytes2;
    var BytesLookup = class {
      constructor(types2, ordinalWidth) {
        this.ordinalWidth = ordinalWidth;
        Object.entries(types2).forEach(([k2, v3]) => {
          this.add(k2, v3);
        });
      }
      /**
       * Add a new name value pair to the BytesLookup.
       *
       * @param name - A human readable name for the field.
       * @param value - The numeric value for the field.
       * @throws if the name or value already exist in the lookup because it's unclear how to decode.
       */
      add(name, value) {
        if (this[name]) {
          throw new SyntaxError(`Attempted to add a value with a duplicate name "${name}". This is not allowed because it is unclear how to decode.`);
        }
        if (this[value.toString()]) {
          throw new SyntaxError(`Attempted to add a duplicate value under a different name (Given name: "${name}" and previous name: "${this[value.toString()]}. This is not allowed because it is unclear how to decode.
Given value: ${value.toString()}`);
        }
        this[name] = new Bytes2(name, value, this.ordinalWidth);
        this[value.toString()] = this[name];
      }
      from(value) {
        return value instanceof Bytes2 ? value : this[value];
      }
      fromParser(parser) {
        return this.from(parser.readUIntN(this.ordinalWidth).toString());
      }
    };
    exports.BytesLookup = BytesLookup;
  }
});

// node_modules/@xrplf/isomorphic/dist/utils/shared.js
var require_shared = __commonJS({
  "node_modules/@xrplf/isomorphic/dist/utils/shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.equal = exports.concat = exports.HEX_REGEX = void 0;
    var utils_1 = require_utils();
    exports.HEX_REGEX = /^[A-F0-9]*$/iu;
    function concat3(views) {
      return (0, utils_1.concatBytes)(...views);
    }
    exports.concat = concat3;
    function equal(buf1, buf2) {
      if (buf1.byteLength !== buf2.byteLength) {
        return false;
      }
      const dv1 = new Int8Array(buf1);
      const dv2 = new Int8Array(buf2);
      for (let i = 0; i !== buf1.byteLength; i++) {
        if (dv1[i] !== dv2[i]) {
          return false;
        }
      }
      return true;
    }
    exports.equal = equal;
  }
});

// node_modules/@xrplf/isomorphic/dist/utils/browser.js
var require_browser2 = __commonJS({
  "node_modules/@xrplf/isomorphic/dist/utils/browser.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m, k2);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = exports.stringToHex = exports.hexToString = exports.hexToBytes = exports.bytesToHex = void 0;
    var utils_1 = require_utils();
    var shared_1 = require_shared();
    var bytesToHex2 = (bytes3) => {
      const hex2 = (0, utils_1.bytesToHex)(bytes3 instanceof Uint8Array ? bytes3 : Uint8Array.from(bytes3));
      return hex2.toUpperCase();
    };
    exports.bytesToHex = bytesToHex2;
    var hexToBytes = (hex2) => {
      const len = hex2.length;
      const array = new Uint8Array(len / 2);
      if (!shared_1.HEX_REGEX.test(hex2)) {
        throw new Error("Invalid hex string");
      }
      for (let i = 0; i < array.length; i++) {
        const j3 = i * 2;
        const hexByte = hex2.slice(j3, j3 + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0) {
          throw new Error("Invalid byte sequence");
        }
        array[i] = byte;
      }
      return array;
    };
    exports.hexToBytes = hexToBytes;
    var hexToString2 = (hex2, encoding = "utf8") => {
      return new TextDecoder(encoding).decode((0, exports.hexToBytes)(hex2));
    };
    exports.hexToString = hexToString2;
    var stringToHex2 = (string) => {
      return (0, exports.bytesToHex)(new TextEncoder().encode(string));
    };
    exports.stringToHex = stringToHex2;
    exports.randomBytes = utils_1.randomBytes;
    __exportStar(require_shared(), exports);
  }
});

// node_modules/ripple-binary-codec/dist/serdes/binary-serializer.js
var require_binary_serializer = __commonJS({
  "node_modules/ripple-binary-codec/dist/serdes/binary-serializer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BinarySerializer = exports.BytesList = void 0;
    var utils_1 = require_browser2();
    var BytesList = class {
      constructor() {
        this.bytesArray = [];
      }
      /**
       * Get the total number of bytes in the BytesList
       *
       * @return the number of bytes
       */
      getLength() {
        return (0, utils_1.concat)(this.bytesArray).byteLength;
      }
      /**
       * Put bytes in the BytesList
       *
       * @param bytesArg A Uint8Array
       * @return this BytesList
       */
      put(bytesArg) {
        const bytes3 = Uint8Array.from(bytesArg);
        this.bytesArray.push(bytes3);
        return this;
      }
      /**
       * Write this BytesList to the back of another bytes list
       *
       *  @param list The BytesList to write to
       */
      toBytesSink(list) {
        list.put(this.toBytes());
      }
      toBytes() {
        return (0, utils_1.concat)(this.bytesArray);
      }
      toHex() {
        return (0, utils_1.bytesToHex)(this.toBytes());
      }
    };
    exports.BytesList = BytesList;
    var BinarySerializer = class {
      constructor(sink) {
        this.sink = new BytesList();
        this.sink = sink;
      }
      /**
       * Write a value to this BinarySerializer
       *
       * @param value a SerializedType value
       */
      write(value) {
        value.toBytesSink(this.sink);
      }
      /**
       * Write bytes to this BinarySerializer
       *
       * @param bytes the bytes to write
       */
      put(bytes3) {
        this.sink.put(bytes3);
      }
      /**
       * Write a value of a given type to this BinarySerializer
       *
       * @param type the type to write
       * @param value a value of that type
       */
      writeType(type, value) {
        this.write(type.from(value));
      }
      /**
       * Write BytesList to this BinarySerializer
       *
       * @param bl BytesList to write to BinarySerializer
       */
      writeBytesList(bl) {
        bl.toBytesSink(this.sink);
      }
      /**
       * Calculate the header of Variable Length encoded bytes
       *
       * @param length the length of the bytes
       */
      encodeVariableLength(length) {
        const lenBytes = new Uint8Array(3);
        if (length <= 192) {
          lenBytes[0] = length;
          return lenBytes.slice(0, 1);
        } else if (length <= 12480) {
          length -= 193;
          lenBytes[0] = 193 + (length >>> 8);
          lenBytes[1] = length & 255;
          return lenBytes.slice(0, 2);
        } else if (length <= 918744) {
          length -= 12481;
          lenBytes[0] = 241 + (length >>> 16);
          lenBytes[1] = length >> 8 & 255;
          lenBytes[2] = length & 255;
          return lenBytes.slice(0, 3);
        }
        throw new Error("Overflow error");
      }
      /**
       * Write field and value to BinarySerializer
       *
       * @param field field to write to BinarySerializer
       * @param value value to write to BinarySerializer
       */
      writeFieldAndValue(field, value, isUnlModifyWorkaround = false) {
        const associatedValue = field.associatedType.from(value);
        if (associatedValue.toBytesSink === void 0 || field.name === void 0) {
          throw new Error();
        }
        this.sink.put(field.header);
        if (field.isVariableLengthEncoded) {
          this.writeLengthEncoded(associatedValue, isUnlModifyWorkaround);
        } else {
          associatedValue.toBytesSink(this.sink);
        }
      }
      /**
       * Write a variable length encoded value to the BinarySerializer
       *
       * @param value length encoded value to write to BytesList
       */
      writeLengthEncoded(value, isUnlModifyWorkaround = false) {
        const bytes3 = new BytesList();
        if (!isUnlModifyWorkaround) {
          value.toBytesSink(bytes3);
        }
        this.put(this.encodeVariableLength(bytes3.getLength()));
        this.writeBytesList(bytes3);
      }
    };
    exports.BinarySerializer = BinarySerializer;
  }
});

// node_modules/ripple-binary-codec/dist/types/serialized-type.js
var require_serialized_type = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/serialized-type.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Comparable = exports.SerializedType = void 0;
    var binary_serializer_1 = require_binary_serializer();
    var utils_1 = require_browser2();
    var SerializedType = class {
      constructor(bytes3) {
        this.bytes = new Uint8Array(0);
        this.bytes = bytes3 !== null && bytes3 !== void 0 ? bytes3 : new Uint8Array(0);
      }
      static fromParser(parser, hint) {
        throw new Error("fromParser not implemented");
        return this.fromParser(parser, hint);
      }
      static from(value) {
        throw new Error("from not implemented");
        return this.from(value);
      }
      /**
       * Write the bytes representation of a SerializedType to a BytesList
       *
       * @param list The BytesList to write SerializedType bytes to
       */
      toBytesSink(list) {
        list.put(this.bytes);
      }
      /**
       * Get the hex representation of a SerializedType's bytes
       *
       * @returns hex String of this.bytes
       */
      toHex() {
        return (0, utils_1.bytesToHex)(this.toBytes());
      }
      /**
       * Get the bytes representation of a SerializedType
       *
       * @returns A Uint8Array of the bytes
       */
      toBytes() {
        if (this.bytes) {
          return this.bytes;
        }
        const bytes3 = new binary_serializer_1.BytesList();
        this.toBytesSink(bytes3);
        return bytes3.toBytes();
      }
      /**
       * Return the JSON representation of a SerializedType
       *
       * @param _definitions rippled definitions used to parse the values of transaction types and such.
       *                          Unused in default, but used in STObject, STArray
       *                          Can be customized for sidechains and amendments.
       * @returns any type, if not overloaded returns hexString representation of bytes
       */
      toJSON(_definitions, _fieldName) {
        return this.toHex();
      }
      /**
       * @returns hexString representation of this.bytes
       */
      toString() {
        return this.toHex();
      }
    };
    exports.SerializedType = SerializedType;
    var Comparable = class extends SerializedType {
      lt(other) {
        return this.compareTo(other) < 0;
      }
      eq(other) {
        return this.compareTo(other) === 0;
      }
      gt(other) {
        return this.compareTo(other) > 0;
      }
      gte(other) {
        return this.compareTo(other) > -1;
      }
      lte(other) {
        return this.compareTo(other) < 1;
      }
      /**
       * Overload this method to define how two Comparable SerializedTypes are compared
       *
       * @param other The comparable object to compare this to
       * @returns A number denoting the relationship of this and other
       */
      compareTo(other) {
        throw new Error(`cannot compare ${this.toString()} and ${other.toString()}`);
      }
    };
    exports.Comparable = Comparable;
  }
});

// node_modules/ripple-binary-codec/dist/enums/constants.js
var require_constants = __commonJS({
  "node_modules/ripple-binary-codec/dist/enums/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DELEGATABLE_PERMISSIONS_WIDTH = exports.TRANSACTION_RESULT_WIDTH = exports.TRANSACTION_TYPE_WIDTH = exports.LEDGER_ENTRY_WIDTH = exports.TYPE_WIDTH = void 0;
    exports.TYPE_WIDTH = 2;
    exports.LEDGER_ENTRY_WIDTH = 2;
    exports.TRANSACTION_TYPE_WIDTH = 2;
    exports.TRANSACTION_RESULT_WIDTH = 1;
    exports.DELEGATABLE_PERMISSIONS_WIDTH = 4;
  }
});

// node_modules/ripple-binary-codec/dist/enums/field.js
var require_field = __commonJS({
  "node_modules/ripple-binary-codec/dist/enums/field.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FieldLookup = void 0;
    var bytes_1 = require_bytes2();
    var serialized_type_1 = require_serialized_type();
    var constants_1 = require_constants();
    function fieldHeader(type, nth) {
      const header = [];
      if (type < 16) {
        if (nth < 16) {
          header.push(type << 4 | nth);
        } else {
          header.push(type << 4, nth);
        }
      } else if (nth < 16) {
        header.push(nth, type);
      } else {
        header.push(0, type, nth);
      }
      return Uint8Array.from(header);
    }
    function buildField([name, info6], typeOrdinal) {
      const field = fieldHeader(typeOrdinal, info6.nth);
      return {
        name,
        nth: info6.nth,
        isVariableLengthEncoded: info6.isVLEncoded,
        isSerialized: info6.isSerialized,
        isSigningField: info6.isSigningField,
        ordinal: typeOrdinal << 16 | info6.nth,
        type: new bytes_1.Bytes(info6.type, typeOrdinal, constants_1.TYPE_WIDTH),
        header: field,
        associatedType: serialized_type_1.SerializedType
        // For later assignment in ./types/index.js or Definitions.updateAll(...)
      };
    }
    var FieldLookup = class {
      constructor(fields, types2) {
        fields.forEach(([name, field_info]) => {
          const typeOrdinal = types2[field_info.type];
          this[name] = buildField([name, field_info], typeOrdinal);
          this[this[name].ordinal.toString()] = this[name];
        });
      }
      fromString(value) {
        return this[value];
      }
    };
    exports.FieldLookup = FieldLookup;
  }
});

// node_modules/ripple-binary-codec/dist/enums/xrpl-definitions-base.js
var require_xrpl_definitions_base = __commonJS({
  "node_modules/ripple-binary-codec/dist/enums/xrpl-definitions-base.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesLookup = exports.Bytes = exports.FieldLookup = exports.XrplDefinitionsBase = void 0;
    var bytes_1 = require_bytes2();
    Object.defineProperty(exports, "Bytes", { enumerable: true, get: function() {
      return bytes_1.Bytes;
    } });
    Object.defineProperty(exports, "BytesLookup", { enumerable: true, get: function() {
      return bytes_1.BytesLookup;
    } });
    var field_1 = require_field();
    Object.defineProperty(exports, "FieldLookup", { enumerable: true, get: function() {
      return field_1.FieldLookup;
    } });
    var constants_1 = require_constants();
    var XrplDefinitionsBase = class {
      /**
       * Present rippled types in a typed and updatable format.
       * For an example of the input format see `definitions.json`.
       * To generate a new definitions file from rippled source code, use the tool at
       * `packages/ripple-binary-codec/tools/generateDefinitions.js`.
       *
       * See the definitions.test.js file for examples of how to create your own updated definitions.json.
       *
       * @param enums - A json encoding of the core types, transaction types, transaction results, transaction names, and fields.
       * @param types - A list of type objects with the same name as the fields defined.
       *              You can use the coreTypes object if you are not adding new types.
       */
      constructor(enums, types2) {
        this.type = new bytes_1.BytesLookup(enums.TYPES, constants_1.TYPE_WIDTH);
        this.ledgerEntryType = new bytes_1.BytesLookup(enums.LEDGER_ENTRY_TYPES, constants_1.LEDGER_ENTRY_WIDTH);
        this.transactionType = new bytes_1.BytesLookup(enums.TRANSACTION_TYPES, constants_1.TRANSACTION_TYPE_WIDTH);
        this.transactionResult = new bytes_1.BytesLookup(enums.TRANSACTION_RESULTS, constants_1.TRANSACTION_RESULT_WIDTH);
        this.field = new field_1.FieldLookup(enums.FIELDS, enums.TYPES);
        this.transactionNames = Object.entries(enums.TRANSACTION_TYPES).filter(([_key, value]) => value >= 0).map(([key, _value]) => key);
        this.dataTypes = {};
        this.associateTypes(types2);
        this.granularPermissions = {
          TrustlineAuthorize: 65537,
          TrustlineFreeze: 65538,
          TrustlineUnfreeze: 65539,
          AccountDomainSet: 65540,
          AccountEmailHashSet: 65541,
          AccountMessageKeySet: 65542,
          AccountTransferRateSet: 65543,
          AccountTickSizeSet: 65544,
          PaymentMint: 65545,
          PaymentBurn: 65546,
          MPTokenIssuanceLock: 65547,
          MPTokenIssuanceUnlock: 65548
        };
        const incrementedTransactionTypes = Object.fromEntries(Object.entries(enums.TRANSACTION_TYPES).map(([key, value]) => [
          key,
          value + 1
        ]));
        const combinedPermissions = Object.assign(Object.assign({}, this.granularPermissions), incrementedTransactionTypes);
        this.delegatablePermissions = new bytes_1.BytesLookup(combinedPermissions, constants_1.DELEGATABLE_PERMISSIONS_WIDTH);
      }
      /**
       * Associates each Field to a corresponding class that TypeScript can recognize.
       *
       * @param types a list of type objects with the same name as the fields defined.
       *              Defaults to xrpl.js's core type definitions.
       */
      associateTypes(types2) {
        this.dataTypes = Object.assign({}, this.dataTypes, types2);
        Object.values(this.field).forEach((field) => {
          field.associatedType = this.dataTypes[field.type.name];
        });
        this.field["TransactionType"].associatedType = this.transactionType;
        this.field["TransactionResult"].associatedType = this.transactionResult;
        this.field["LedgerEntryType"].associatedType = this.ledgerEntryType;
        if (this.field["PermissionValue"]) {
          this.field["PermissionValue"].associatedType = this.delegatablePermissions;
        }
      }
      getAssociatedTypes() {
        return this.dataTypes;
      }
    };
    exports.XrplDefinitionsBase = XrplDefinitionsBase;
  }
});

// node_modules/ripple-binary-codec/dist/enums/index.js
var require_enums = __commonJS({
  "node_modules/ripple-binary-codec/dist/enums/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TRANSACTION_TYPES = exports.TransactionType = exports.TransactionResult = exports.LedgerEntryType = exports.Type = exports.Field = exports.DEFAULT_DEFINITIONS = exports.XrplDefinitionsBase = exports.Bytes = void 0;
    var definitions_json_1 = __importDefault(require_definitions());
    var xrpl_definitions_base_1 = require_xrpl_definitions_base();
    Object.defineProperty(exports, "XrplDefinitionsBase", { enumerable: true, get: function() {
      return xrpl_definitions_base_1.XrplDefinitionsBase;
    } });
    Object.defineProperty(exports, "Bytes", { enumerable: true, get: function() {
      return xrpl_definitions_base_1.Bytes;
    } });
    var DEFAULT_DEFINITIONS = new xrpl_definitions_base_1.XrplDefinitionsBase(definitions_json_1.default, {});
    exports.DEFAULT_DEFINITIONS = DEFAULT_DEFINITIONS;
    var Type2 = DEFAULT_DEFINITIONS.type;
    exports.Type = Type2;
    var LedgerEntryType = DEFAULT_DEFINITIONS.ledgerEntryType;
    exports.LedgerEntryType = LedgerEntryType;
    var TransactionType = DEFAULT_DEFINITIONS.transactionType;
    exports.TransactionType = TransactionType;
    var TransactionResult = DEFAULT_DEFINITIONS.transactionResult;
    exports.TransactionResult = TransactionResult;
    var Field2 = DEFAULT_DEFINITIONS.field;
    exports.Field = Field2;
    var TRANSACTION_TYPES = DEFAULT_DEFINITIONS.transactionNames;
    exports.TRANSACTION_TYPES = TRANSACTION_TYPES;
  }
});

// node_modules/@scure/base/lib/index.js
var require_lib = __commonJS({
  "node_modules/@scure/base/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.createBase58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64urlnopad = exports.base64url = exports.base64nopad = exports.base64 = exports.base32crockford = exports.base32hexnopad = exports.base32hex = exports.base32nopad = exports.base32 = exports.base16 = exports.utils = void 0;
    function isBytes(a) {
      return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
    }
    function abytes2(b2, ...lengths) {
      if (!isBytes(b2))
        throw new Error("Uint8Array expected");
      if (lengths.length > 0 && !lengths.includes(b2.length))
        throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b2.length);
    }
    function isArrayOf(isString2, arr) {
      if (!Array.isArray(arr))
        return false;
      if (arr.length === 0)
        return true;
      if (isString2) {
        return arr.every((item) => typeof item === "string");
      } else {
        return arr.every((item) => Number.isSafeInteger(item));
      }
    }
    function afn(input) {
      if (typeof input !== "function")
        throw new Error("function expected");
      return true;
    }
    function astr(label, input) {
      if (typeof input !== "string")
        throw new Error(`${label}: string expected`);
      return true;
    }
    function anumber(n) {
      if (!Number.isSafeInteger(n))
        throw new Error(`invalid integer: ${n}`);
    }
    function aArr(input) {
      if (!Array.isArray(input))
        throw new Error("array expected");
    }
    function astrArr(label, input) {
      if (!isArrayOf(true, input))
        throw new Error(`${label}: array of strings expected`);
    }
    function anumArr(label, input) {
      if (!isArrayOf(false, input))
        throw new Error(`${label}: array of numbers expected`);
    }
    function chain(...args) {
      const id = (a) => a;
      const wrap = (a, b2) => (c) => a(b2(c));
      const encode = args.map((x) => x.encode).reduceRight(wrap, id);
      const decode2 = args.map((x) => x.decode).reduce(wrap, id);
      return { encode, decode: decode2 };
    }
    function alphabet(letters) {
      const lettersA = typeof letters === "string" ? letters.split("") : letters;
      const len = lettersA.length;
      astrArr("alphabet", lettersA);
      const indexes3 = new Map(lettersA.map((l17, i) => [l17, i]));
      return {
        encode: (digits) => {
          aArr(digits);
          return digits.map((i) => {
            if (!Number.isSafeInteger(i) || i < 0 || i >= len)
              throw new Error(`alphabet.encode: digit index outside alphabet "${i}". Allowed: ${letters}`);
            return lettersA[i];
          });
        },
        decode: (input) => {
          aArr(input);
          return input.map((letter) => {
            astr("alphabet.decode", letter);
            const i = indexes3.get(letter);
            if (i === void 0)
              throw new Error(`Unknown letter: "${letter}". Allowed: ${letters}`);
            return i;
          });
        }
      };
    }
    function join(separator = "") {
      astr("join", separator);
      return {
        encode: (from2) => {
          astrArr("join.decode", from2);
          return from2.join(separator);
        },
        decode: (to) => {
          astr("join.decode", to);
          return to.split(separator);
        }
      };
    }
    function padding(bits2, chr = "=") {
      anumber(bits2);
      astr("padding", chr);
      return {
        encode(data) {
          astrArr("padding.encode", data);
          while (data.length * bits2 % 8)
            data.push(chr);
          return data;
        },
        decode(input) {
          astrArr("padding.decode", input);
          let end = input.length;
          if (end * bits2 % 8)
            throw new Error("padding: invalid, string should have whole number of bytes");
          for (; end > 0 && input[end - 1] === chr; end--) {
            const last3 = end - 1;
            const byte = last3 * bits2;
            if (byte % 8 === 0)
              throw new Error("padding: invalid, string has too much padding");
          }
          return input.slice(0, end);
        }
      };
    }
    function normalize2(fn) {
      afn(fn);
      return { encode: (from2) => from2, decode: (to) => fn(to) };
    }
    function convertRadix(data, from2, to) {
      if (from2 < 2)
        throw new Error(`convertRadix: invalid from=${from2}, base cannot be less than 2`);
      if (to < 2)
        throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);
      aArr(data);
      if (!data.length)
        return [];
      let pos = 0;
      const res = [];
      const digits = Array.from(data, (d) => {
        anumber(d);
        if (d < 0 || d >= from2)
          throw new Error(`invalid integer: ${d}`);
        return d;
      });
      const dlen = digits.length;
      while (true) {
        let carry = 0;
        let done = true;
        for (let i = pos; i < dlen; i++) {
          const digit = digits[i];
          const fromCarry = from2 * carry;
          const digitBase = fromCarry + digit;
          if (!Number.isSafeInteger(digitBase) || fromCarry / from2 !== carry || digitBase - digit !== fromCarry) {
            throw new Error("convertRadix: carry overflow");
          }
          const div = digitBase / to;
          carry = digitBase % to;
          const rounded = Math.floor(div);
          digits[i] = rounded;
          if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
            throw new Error("convertRadix: carry overflow");
          if (!done)
            continue;
          else if (!rounded)
            pos = i;
          else
            done = false;
        }
        res.push(carry);
        if (done)
          break;
      }
      for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
        res.push(0);
      return res.reverse();
    }
    var gcd = (a, b2) => b2 === 0 ? a : gcd(b2, a % b2);
    var radix2carry = (from2, to) => from2 + (to - gcd(from2, to));
    var powers = (() => {
      let res = [];
      for (let i = 0; i < 40; i++)
        res.push(2 ** i);
      return res;
    })();
    function convertRadix2(data, from2, to, padding2) {
      aArr(data);
      if (from2 <= 0 || from2 > 32)
        throw new Error(`convertRadix2: wrong from=${from2}`);
      if (to <= 0 || to > 32)
        throw new Error(`convertRadix2: wrong to=${to}`);
      if (radix2carry(from2, to) > 32) {
        throw new Error(`convertRadix2: carry overflow from=${from2} to=${to} carryBits=${radix2carry(from2, to)}`);
      }
      let carry = 0;
      let pos = 0;
      const max3 = powers[from2];
      const mask = powers[to] - 1;
      const res = [];
      for (const n of data) {
        anumber(n);
        if (n >= max3)
          throw new Error(`convertRadix2: invalid data word=${n} from=${from2}`);
        carry = carry << from2 | n;
        if (pos + from2 > 32)
          throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from2}`);
        pos += from2;
        for (; pos >= to; pos -= to)
          res.push((carry >> pos - to & mask) >>> 0);
        const pow = powers[pos];
        if (pow === void 0)
          throw new Error("invalid carry");
        carry &= pow - 1;
      }
      carry = carry << to - pos & mask;
      if (!padding2 && pos >= from2)
        throw new Error("Excess padding");
      if (!padding2 && carry > 0)
        throw new Error(`Non-zero padding: ${carry}`);
      if (padding2 && pos > 0)
        res.push(carry >>> 0);
      return res;
    }
    function radix(num) {
      anumber(num);
      const _256 = 2 ** 8;
      return {
        encode: (bytes3) => {
          if (!isBytes(bytes3))
            throw new Error("radix.encode input should be Uint8Array");
          return convertRadix(Array.from(bytes3), _256, num);
        },
        decode: (digits) => {
          anumArr("radix.decode", digits);
          return Uint8Array.from(convertRadix(digits, num, _256));
        }
      };
    }
    function radix2(bits2, revPadding = false) {
      anumber(bits2);
      if (bits2 <= 0 || bits2 > 32)
        throw new Error("radix2: bits should be in (0..32]");
      if (radix2carry(8, bits2) > 32 || radix2carry(bits2, 8) > 32)
        throw new Error("radix2: carry overflow");
      return {
        encode: (bytes3) => {
          if (!isBytes(bytes3))
            throw new Error("radix2.encode input should be Uint8Array");
          return convertRadix2(Array.from(bytes3), 8, bits2, !revPadding);
        },
        decode: (digits) => {
          anumArr("radix2.decode", digits);
          return Uint8Array.from(convertRadix2(digits, bits2, 8, revPadding));
        }
      };
    }
    function unsafeWrapper(fn) {
      afn(fn);
      return function(...args) {
        try {
          return fn.apply(null, args);
        } catch (e) {
        }
      };
    }
    function checksum(len, fn) {
      anumber(len);
      afn(fn);
      return {
        encode(data) {
          if (!isBytes(data))
            throw new Error("checksum.encode: input should be Uint8Array");
          const sum = fn(data).slice(0, len);
          const res = new Uint8Array(data.length + len);
          res.set(data);
          res.set(sum, data.length);
          return res;
        },
        decode(data) {
          if (!isBytes(data))
            throw new Error("checksum.decode: input should be Uint8Array");
          const payload = data.slice(0, -len);
          const oldChecksum = data.slice(-len);
          const newChecksum = fn(payload).slice(0, len);
          for (let i = 0; i < len; i++)
            if (newChecksum[i] !== oldChecksum[i])
              throw new Error("Invalid checksum");
          return payload;
        }
      };
    }
    exports.utils = {
      alphabet,
      chain,
      checksum,
      convertRadix,
      convertRadix2,
      radix,
      radix2,
      join,
      padding
    };
    exports.base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
    exports.base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
    exports.base32nopad = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), join(""));
    exports.base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
    exports.base32hexnopad = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), join(""));
    exports.base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize2((s) => s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
    var hasBase64Builtin = (() => typeof Uint8Array.from([]).toBase64 === "function" && typeof Uint8Array.fromBase64 === "function")();
    var decodeBase64Builtin = (s, isUrl) => {
      astr("base64", s);
      const re2 = isUrl ? /^[A-Za-z0-9=_-]+$/ : /^[A-Za-z0-9=+/]+$/;
      const alphabet2 = isUrl ? "base64url" : "base64";
      if (s.length > 0 && !re2.test(s))
        throw new Error("invalid base64");
      return Uint8Array.fromBase64(s, { alphabet: alphabet2, lastChunkHandling: "strict" });
    };
    exports.base64 = hasBase64Builtin ? {
      encode(b2) {
        abytes2(b2);
        return b2.toBase64();
      },
      decode(s) {
        return decodeBase64Builtin(s, false);
      }
    } : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
    exports.base64nopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), join(""));
    exports.base64url = hasBase64Builtin ? {
      encode(b2) {
        abytes2(b2);
        return b2.toBase64({ alphabet: "base64url" });
      },
      decode(s) {
        return decodeBase64Builtin(s, true);
      }
    } : chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
    exports.base64urlnopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join(""));
    var genBase58 = (abc) => chain(radix(58), alphabet(abc), join(""));
    exports.base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    exports.base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
    exports.base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
    var XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
    exports.base58xmr = {
      encode(data) {
        let res = "";
        for (let i = 0; i < data.length; i += 8) {
          const block = data.subarray(i, i + 8);
          res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
        }
        return res;
      },
      decode(str) {
        let res = [];
        for (let i = 0; i < str.length; i += 11) {
          const slice = str.slice(i, i + 11);
          const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
          const block = exports.base58.decode(slice);
          for (let j3 = 0; j3 < block.length - blockLen; j3++) {
            if (block[j3] !== 0)
              throw new Error("base58xmr: wrong padding");
          }
          res = res.concat(Array.from(block.slice(block.length - blockLen)));
        }
        return Uint8Array.from(res);
      }
    };
    var createBase58check = (sha2563) => chain(checksum(4, (data) => sha2563(sha2563(data))), exports.base58);
    exports.createBase58check = createBase58check;
    exports.base58check = exports.createBase58check;
    var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
    var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
    function bech32Polymod(pre) {
      const b2 = pre >> 25;
      let chk = (pre & 33554431) << 5;
      for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
        if ((b2 >> i & 1) === 1)
          chk ^= POLYMOD_GENERATORS[i];
      }
      return chk;
    }
    function bechChecksum(prefix2, words, encodingConst = 1) {
      const len = prefix2.length;
      let chk = 1;
      for (let i = 0; i < len; i++) {
        const c = prefix2.charCodeAt(i);
        if (c < 33 || c > 126)
          throw new Error(`Invalid prefix (${prefix2})`);
        chk = bech32Polymod(chk) ^ c >> 5;
      }
      chk = bech32Polymod(chk);
      for (let i = 0; i < len; i++)
        chk = bech32Polymod(chk) ^ prefix2.charCodeAt(i) & 31;
      for (let v3 of words)
        chk = bech32Polymod(chk) ^ v3;
      for (let i = 0; i < 6; i++)
        chk = bech32Polymod(chk);
      chk ^= encodingConst;
      return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));
    }
    function genBech32(encoding) {
      const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
      const _words = radix2(5);
      const fromWords = _words.decode;
      const toWords = _words.encode;
      const fromWordsUnsafe = unsafeWrapper(fromWords);
      function encode(prefix2, words, limit = 90) {
        astr("bech32.encode prefix", prefix2);
        if (isBytes(words))
          words = Array.from(words);
        anumArr("bech32.encode", words);
        const plen = prefix2.length;
        if (plen === 0)
          throw new TypeError(`Invalid prefix length ${plen}`);
        const actualLength = plen + 7 + words.length;
        if (limit !== false && actualLength > limit)
          throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
        const lowered = prefix2.toLowerCase();
        const sum = bechChecksum(lowered, words, ENCODING_CONST);
        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
      }
      function decode2(str, limit = 90) {
        astr("bech32.decode input", str);
        const slen = str.length;
        if (slen < 8 || limit !== false && slen > limit)
          throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);
        const lowered = str.toLowerCase();
        if (str !== lowered && str !== str.toUpperCase())
          throw new Error(`String must be lowercase or uppercase`);
        const sepIndex = lowered.lastIndexOf("1");
        if (sepIndex === 0 || sepIndex === -1)
          throw new Error(`Letter "1" must be present between prefix and data only`);
        const prefix2 = lowered.slice(0, sepIndex);
        const data = lowered.slice(sepIndex + 1);
        if (data.length < 6)
          throw new Error("Data must be at least 6 characters long");
        const words = BECH_ALPHABET.decode(data).slice(0, -6);
        const sum = bechChecksum(prefix2, words, ENCODING_CONST);
        if (!data.endsWith(sum))
          throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
        return { prefix: prefix2, words };
      }
      const decodeUnsafe = unsafeWrapper(decode2);
      function decodeToBytes(str) {
        const { prefix: prefix2, words } = decode2(str, false);
        return { prefix: prefix2, words, bytes: fromWords(words) };
      }
      function encodeFromBytes(prefix2, bytes3) {
        return encode(prefix2, toWords(bytes3));
      }
      return {
        encode,
        decode: decode2,
        encodeFromBytes,
        decodeToBytes,
        decodeUnsafe,
        fromWords,
        fromWordsUnsafe,
        toWords
      };
    }
    exports.bech32 = genBech32("bech32");
    exports.bech32m = genBech32("bech32m");
    exports.utf8 = {
      encode: (data) => new TextDecoder().decode(data),
      decode: (str) => new TextEncoder().encode(str)
    };
    var hasHexBuiltin = (() => typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function")();
    var hexBuiltin = {
      encode(data) {
        abytes2(data);
        return data.toHex();
      },
      decode(s) {
        astr("hex", s);
        return Uint8Array.fromHex(s);
      }
    };
    exports.hex = hasHexBuiltin ? hexBuiltin : chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize2((s) => {
      if (typeof s !== "string" || s.length % 2 !== 0)
        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
      return s.toLowerCase();
    }));
    var CODERS = {
      utf8: exports.utf8,
      hex: exports.hex,
      base16: exports.base16,
      base32: exports.base32,
      base64: exports.base64,
      base64url: exports.base64url,
      base58: exports.base58,
      base58xmr: exports.base58xmr
    };
    var coderTypeError = "Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr";
    var bytesToString = (type, bytes3) => {
      if (typeof type !== "string" || !CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
      if (!isBytes(bytes3))
        throw new TypeError("bytesToString() expects Uint8Array");
      return CODERS[type].encode(bytes3);
    };
    exports.bytesToString = bytesToString;
    exports.str = exports.bytesToString;
    var stringToBytes = (type, str) => {
      if (!CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
      if (typeof str !== "string")
        throw new TypeError("stringToBytes() expects string");
      return CODERS[type].decode(str);
    };
    exports.stringToBytes = stringToBytes;
    exports.bytes = exports.stringToBytes;
  }
});

// node_modules/@noble/hashes/_md.js
var require_md = __commonJS({
  "node_modules/@noble/hashes/_md.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HashMD = exports.Maj = exports.Chi = void 0;
    var _assert_js_1 = require_assert();
    var utils_js_1 = require_utils();
    function setBigUint64(view, byteOffset, value, isLE2) {
      if (typeof view.setBigUint64 === "function")
        return view.setBigUint64(byteOffset, value, isLE2);
      const _32n3 = BigInt(32);
      const _u32_max = BigInt(4294967295);
      const wh = Number(value >> _32n3 & _u32_max);
      const wl = Number(value & _u32_max);
      const h2 = isLE2 ? 4 : 0;
      const l17 = isLE2 ? 0 : 4;
      view.setUint32(byteOffset + h2, wh, isLE2);
      view.setUint32(byteOffset + l17, wl, isLE2);
    }
    var Chi = (a, b2, c) => a & b2 ^ ~a & c;
    exports.Chi = Chi;
    var Maj = (a, b2, c) => a & b2 ^ a & c ^ b2 & c;
    exports.Maj = Maj;
    var HashMD2 = class extends utils_js_1.Hash {
      constructor(blockLen, outputLen, padOffset, isLE2) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE2;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { view, buffer: buffer2, blockLen } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take2 = Math.min(blockLen - this.pos, len - pos);
          if (take2 === blockLen) {
            const dataView = (0, utils_js_1.createView)(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer2.set(data.subarray(pos, pos + take2), this.pos);
          this.pos += take2;
          pos += take2;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.output)(out, this);
        this.finished = true;
        const { buffer: buffer2, view, blockLen, isLE: isLE2 } = this;
        let { pos } = this;
        buffer2[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i = pos; i < blockLen; i++)
          buffer2[i] = 0;
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i = 0; i < outLen; i++)
          oview.setUint32(4 * i, state[i], isLE2);
      }
      digest() {
        const { buffer: buffer2, outputLen } = this;
        this.digestInto(buffer2);
        const res = buffer2.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
          to.buffer.set(buffer2);
        return to;
      }
    };
    exports.HashMD = HashMD2;
  }
});

// node_modules/@noble/hashes/sha256.js
var require_sha256 = __commonJS({
  "node_modules/@noble/hashes/sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha224 = exports.sha256 = void 0;
    var _md_js_1 = require_md();
    var utils_js_1 = require_utils();
    var SHA256_K = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    var SHA256_IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SHA256_W = new Uint32Array(64);
    var SHA256 = class extends _md_js_1.HashMD {
      constructor() {
        super(64, 32, 8, false);
        this.A = SHA256_IV[0] | 0;
        this.B = SHA256_IV[1] | 0;
        this.C = SHA256_IV[2] | 0;
        this.D = SHA256_IV[3] | 0;
        this.E = SHA256_IV[4] | 0;
        this.F = SHA256_IV[5] | 0;
        this.G = SHA256_IV[6] | 0;
        this.H = SHA256_IV[7] | 0;
      }
      get() {
        const { A: A2, B, C, D, E: E2, F: F2, G: G2, H: H2 } = this;
        return [A2, B, C, D, E2, F2, G2, H2];
      }
      // prettier-ignore
      set(A2, B, C, D, E2, F2, G2, H2) {
        this.A = A2 | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E2 | 0;
        this.F = F2 | 0;
        this.G = G2 | 0;
        this.H = H2 | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
          const W15 = SHA256_W[i - 15];
          const W2 = SHA256_W[i - 2];
          const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
          const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
          SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        let { A: A2, B, C, D, E: E2, F: F2, G: G2, H: H2 } = this;
        for (let i = 0; i < 64; i++) {
          const sigma1 = (0, utils_js_1.rotr)(E2, 6) ^ (0, utils_js_1.rotr)(E2, 11) ^ (0, utils_js_1.rotr)(E2, 25);
          const T1 = H2 + sigma1 + (0, _md_js_1.Chi)(E2, F2, G2) + SHA256_K[i] + SHA256_W[i] | 0;
          const sigma0 = (0, utils_js_1.rotr)(A2, 2) ^ (0, utils_js_1.rotr)(A2, 13) ^ (0, utils_js_1.rotr)(A2, 22);
          const T2 = sigma0 + (0, _md_js_1.Maj)(A2, B, C) | 0;
          H2 = G2;
          G2 = F2;
          F2 = E2;
          E2 = D + T1 | 0;
          D = C;
          C = B;
          B = A2;
          A2 = T1 + T2 | 0;
        }
        A2 = A2 + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E2 = E2 + this.E | 0;
        F2 = F2 + this.F | 0;
        G2 = G2 + this.G | 0;
        H2 = H2 + this.H | 0;
        this.set(A2, B, C, D, E2, F2, G2, H2);
      }
      roundClean() {
        SHA256_W.fill(0);
      }
      destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
      }
    };
    var SHA224 = class extends SHA256 {
      constructor() {
        super();
        this.A = 3238371032 | 0;
        this.B = 914150663 | 0;
        this.C = 812702999 | 0;
        this.D = 4144912697 | 0;
        this.E = 4290775857 | 0;
        this.F = 1750603025 | 0;
        this.G = 1694076839 | 0;
        this.H = 3204075428 | 0;
        this.outputLen = 28;
      }
    };
    exports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());
    exports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());
  }
});

// node_modules/@xrplf/isomorphic/dist/internal/normalizeInput.js
var require_normalizeInput = __commonJS({
  "node_modules/@xrplf/isomorphic/dist/internal/normalizeInput.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function normalizeInput(input) {
      return Array.isArray(input) ? new Uint8Array(input) : input;
    }
    exports.default = normalizeInput;
  }
});

// node_modules/@xrplf/isomorphic/dist/internal/wrapNoble.js
var require_wrapNoble = __commonJS({
  "node_modules/@xrplf/isomorphic/dist/internal/wrapNoble.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var normalizeInput_1 = __importDefault(require_normalizeInput());
    function wrapNoble(chash) {
      function wrapped(input) {
        return chash((0, normalizeInput_1.default)(input));
      }
      wrapped.create = () => {
        const hash2 = chash.create();
        return {
          update(input) {
            hash2.update((0, normalizeInput_1.default)(input));
            return this;
          },
          digest() {
            return hash2.digest();
          }
        };
      };
      return wrapped;
    }
    exports.default = wrapNoble;
  }
});

// node_modules/@xrplf/isomorphic/dist/sha256/browser.js
var require_browser3 = __commonJS({
  "node_modules/@xrplf/isomorphic/dist/sha256/browser.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha256 = void 0;
    var sha256_1 = require_sha256();
    var wrapNoble_1 = __importDefault(require_wrapNoble());
    exports.sha256 = (0, wrapNoble_1.default)(sha256_1.sha256);
  }
});

// node_modules/ripple-address-codec/dist/utils.js
var require_utils2 = __commonJS({
  "node_modules/ripple-address-codec/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatArgs = exports.arrayEqual = void 0;
    function arrayEqual(arr1, arr2) {
      if (arr1.length !== arr2.length) {
        return false;
      }
      return arr1.every((value, index) => value === arr2[index]);
    }
    exports.arrayEqual = arrayEqual;
    function isScalar(val) {
      return typeof val === "number";
    }
    function concatArgs(...args) {
      return args.flatMap((arg) => {
        return isScalar(arg) ? [arg] : Array.from(arg);
      });
    }
    exports.concatArgs = concatArgs;
  }
});

// node_modules/ripple-address-codec/dist/xrp-codec.js
var require_xrp_codec = __commonJS({
  "node_modules/ripple-address-codec/dist/xrp-codec.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidClassicAddress = exports.decodeAccountPublic = exports.encodeAccountPublic = exports.encodeNodePublic = exports.decodeNodePublic = exports.decodeAddress = exports.decodeAccountID = exports.encodeAddress = exports.encodeAccountID = exports.decodeSeed = exports.encodeSeed = exports.codec = void 0;
    var base_1 = require_lib();
    var sha256_1 = require_browser3();
    var utils_1 = require_utils2();
    var Codec = class {
      constructor(options) {
        this._sha256 = options.sha256;
        this._codec = base_1.base58xrp;
      }
      /**
       * Encoder.
       *
       * @param bytes - Uint8Array of data to encode.
       * @param opts - Options object including the version bytes and the expected length of the data to encode.
       */
      encode(bytes3, opts) {
        const versions = opts.versions;
        return this._encodeVersioned(bytes3, versions, opts.expectedLength);
      }
      /**
       * Decoder.
       *
       * @param base58string - Base58Check-encoded string to decode.
       * @param opts - Options object including the version byte(s) and the expected length of the data after decoding.
       */
      /* eslint-disable max-lines-per-function --
       * TODO refactor */
      decode(base58string, opts) {
        var _a;
        const versions = opts.versions;
        const types2 = opts.versionTypes;
        const withoutSum = this.decodeChecked(base58string);
        if (versions.length > 1 && !opts.expectedLength) {
          throw new Error("expectedLength is required because there are >= 2 possible versions");
        }
        const versionLengthGuess = typeof versions[0] === "number" ? 1 : versions[0].length;
        const payloadLength = (_a = opts.expectedLength) !== null && _a !== void 0 ? _a : withoutSum.length - versionLengthGuess;
        const versionBytes = withoutSum.slice(0, -payloadLength);
        const payload = withoutSum.slice(-payloadLength);
        for (let i = 0; i < versions.length; i++) {
          const version2 = Array.isArray(versions[i]) ? versions[i] : [versions[i]];
          if ((0, utils_1.arrayEqual)(versionBytes, version2)) {
            return {
              version: version2,
              bytes: payload,
              type: types2 ? types2[i] : null
            };
          }
        }
        throw new Error("version_invalid: version bytes do not match any of the provided version(s)");
      }
      encodeChecked(bytes3) {
        const check = this._sha256(this._sha256(bytes3)).slice(0, 4);
        return this._encodeRaw(Uint8Array.from((0, utils_1.concatArgs)(bytes3, check)));
      }
      decodeChecked(base58string) {
        const intArray = this._decodeRaw(base58string);
        if (intArray.byteLength < 5) {
          throw new Error("invalid_input_size: decoded data must have length >= 5");
        }
        if (!this._verifyCheckSum(intArray)) {
          throw new Error("checksum_invalid");
        }
        return intArray.slice(0, -4);
      }
      _encodeVersioned(bytes3, versions, expectedLength) {
        if (!checkByteLength(bytes3, expectedLength)) {
          throw new Error("unexpected_payload_length: bytes.length does not match expectedLength. Ensure that the bytes are a Uint8Array.");
        }
        return this.encodeChecked((0, utils_1.concatArgs)(versions, bytes3));
      }
      _encodeRaw(bytes3) {
        return this._codec.encode(Uint8Array.from(bytes3));
      }
      /* eslint-enable max-lines-per-function */
      _decodeRaw(base58string) {
        return this._codec.decode(base58string);
      }
      _verifyCheckSum(bytes3) {
        const computed = this._sha256(this._sha256(bytes3.slice(0, -4))).slice(0, 4);
        const checksum = bytes3.slice(-4);
        return (0, utils_1.arrayEqual)(computed, checksum);
      }
    };
    var ACCOUNT_ID = 0;
    var ACCOUNT_PUBLIC_KEY = 35;
    var FAMILY_SEED = 33;
    var NODE_PUBLIC = 28;
    var ED25519_SEED = [1, 225, 75];
    var codecOptions = {
      sha256: sha256_1.sha256
    };
    var codecWithXrpAlphabet = new Codec(codecOptions);
    exports.codec = codecWithXrpAlphabet;
    function encodeSeed(entropy, type) {
      if (!checkByteLength(entropy, 16)) {
        throw new Error("entropy must have length 16");
      }
      const opts = {
        expectedLength: 16,
        // for secp256k1, use `FAMILY_SEED`
        versions: type === "ed25519" ? ED25519_SEED : [FAMILY_SEED]
      };
      return codecWithXrpAlphabet.encode(entropy, opts);
    }
    exports.encodeSeed = encodeSeed;
    function decodeSeed(seed, opts = {
      versionTypes: ["ed25519", "secp256k1"],
      versions: [ED25519_SEED, FAMILY_SEED],
      expectedLength: 16
    }) {
      return codecWithXrpAlphabet.decode(seed, opts);
    }
    exports.decodeSeed = decodeSeed;
    function encodeAccountID(bytes3) {
      const opts = { versions: [ACCOUNT_ID], expectedLength: 20 };
      return codecWithXrpAlphabet.encode(bytes3, opts);
    }
    exports.encodeAccountID = encodeAccountID;
    exports.encodeAddress = encodeAccountID;
    function decodeAccountID(accountId2) {
      const opts = { versions: [ACCOUNT_ID], expectedLength: 20 };
      return codecWithXrpAlphabet.decode(accountId2, opts).bytes;
    }
    exports.decodeAccountID = decodeAccountID;
    exports.decodeAddress = decodeAccountID;
    function decodeNodePublic(base58string) {
      const opts = { versions: [NODE_PUBLIC], expectedLength: 33 };
      return codecWithXrpAlphabet.decode(base58string, opts).bytes;
    }
    exports.decodeNodePublic = decodeNodePublic;
    function encodeNodePublic(bytes3) {
      const opts = { versions: [NODE_PUBLIC], expectedLength: 33 };
      return codecWithXrpAlphabet.encode(bytes3, opts);
    }
    exports.encodeNodePublic = encodeNodePublic;
    function encodeAccountPublic(bytes3) {
      const opts = { versions: [ACCOUNT_PUBLIC_KEY], expectedLength: 33 };
      return codecWithXrpAlphabet.encode(bytes3, opts);
    }
    exports.encodeAccountPublic = encodeAccountPublic;
    function decodeAccountPublic(base58string) {
      const opts = { versions: [ACCOUNT_PUBLIC_KEY], expectedLength: 33 };
      return codecWithXrpAlphabet.decode(base58string, opts).bytes;
    }
    exports.decodeAccountPublic = decodeAccountPublic;
    function isValidClassicAddress(address) {
      try {
        decodeAccountID(address);
      } catch (_error) {
        return false;
      }
      return true;
    }
    exports.isValidClassicAddress = isValidClassicAddress;
    function checkByteLength(bytes3, expectedLength) {
      return "byteLength" in bytes3 ? bytes3.byteLength === expectedLength : bytes3.length === expectedLength;
    }
  }
});

// node_modules/ripple-address-codec/dist/index.js
var require_dist = __commonJS({
  "node_modules/ripple-address-codec/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidXAddress = exports.decodeXAddress = exports.xAddressToClassicAddress = exports.encodeXAddress = exports.classicAddressToXAddress = exports.isValidClassicAddress = exports.decodeAccountPublic = exports.encodeAccountPublic = exports.decodeNodePublic = exports.encodeNodePublic = exports.decodeAccountID = exports.encodeAccountID = exports.decodeSeed = exports.encodeSeed = exports.codec = void 0;
    var utils_1 = require_browser2();
    var xrp_codec_1 = require_xrp_codec();
    Object.defineProperty(exports, "codec", { enumerable: true, get: function() {
      return xrp_codec_1.codec;
    } });
    Object.defineProperty(exports, "encodeSeed", { enumerable: true, get: function() {
      return xrp_codec_1.encodeSeed;
    } });
    Object.defineProperty(exports, "decodeSeed", { enumerable: true, get: function() {
      return xrp_codec_1.decodeSeed;
    } });
    Object.defineProperty(exports, "encodeAccountID", { enumerable: true, get: function() {
      return xrp_codec_1.encodeAccountID;
    } });
    Object.defineProperty(exports, "decodeAccountID", { enumerable: true, get: function() {
      return xrp_codec_1.decodeAccountID;
    } });
    Object.defineProperty(exports, "encodeNodePublic", { enumerable: true, get: function() {
      return xrp_codec_1.encodeNodePublic;
    } });
    Object.defineProperty(exports, "decodeNodePublic", { enumerable: true, get: function() {
      return xrp_codec_1.decodeNodePublic;
    } });
    Object.defineProperty(exports, "encodeAccountPublic", { enumerable: true, get: function() {
      return xrp_codec_1.encodeAccountPublic;
    } });
    Object.defineProperty(exports, "decodeAccountPublic", { enumerable: true, get: function() {
      return xrp_codec_1.decodeAccountPublic;
    } });
    Object.defineProperty(exports, "isValidClassicAddress", { enumerable: true, get: function() {
      return xrp_codec_1.isValidClassicAddress;
    } });
    var PREFIX_BYTES = {
      // 5, 68
      main: Uint8Array.from([5, 68]),
      // 4, 147
      test: Uint8Array.from([4, 147])
    };
    var MAX_32_BIT_UNSIGNED_INT = 4294967295;
    function classicAddressToXAddress(classicAddress, tag, test) {
      const accountId2 = (0, xrp_codec_1.decodeAccountID)(classicAddress);
      return encodeXAddress(accountId2, tag, test);
    }
    exports.classicAddressToXAddress = classicAddressToXAddress;
    function encodeXAddress(accountId2, tag, test) {
      if (accountId2.length !== 20) {
        throw new Error("Account ID must be 20 bytes");
      }
      if (tag !== false && tag > MAX_32_BIT_UNSIGNED_INT) {
        throw new Error("Invalid tag");
      }
      const theTag = tag || 0;
      const flag = tag === false || tag == null ? 0 : 1;
      const bytes3 = (0, utils_1.concat)([
        test ? PREFIX_BYTES.test : PREFIX_BYTES.main,
        accountId2,
        Uint8Array.from([
          // 0x00 if no tag, 0x01 if 32-bit tag
          flag,
          // first byte
          theTag & 255,
          // second byte
          theTag >> 8 & 255,
          // third byte
          theTag >> 16 & 255,
          // fourth byte
          theTag >> 24 & 255,
          0,
          0,
          0,
          // four zero bytes (reserved for 64-bit tags)
          0
        ])
      ]);
      return xrp_codec_1.codec.encodeChecked(bytes3);
    }
    exports.encodeXAddress = encodeXAddress;
    function xAddressToClassicAddress(xAddress) {
      const { accountId: accountId2, tag, test } = decodeXAddress(xAddress);
      const classicAddress = (0, xrp_codec_1.encodeAccountID)(accountId2);
      return {
        classicAddress,
        tag,
        test
      };
    }
    exports.xAddressToClassicAddress = xAddressToClassicAddress;
    function decodeXAddress(xAddress) {
      const decoded = xrp_codec_1.codec.decodeChecked(xAddress);
      const test = isUint8ArrayForTestAddress(decoded);
      const accountId2 = decoded.slice(2, 22);
      const tag = tagFromUint8Array(decoded);
      return {
        accountId: accountId2,
        tag,
        test
      };
    }
    exports.decodeXAddress = decodeXAddress;
    function isUint8ArrayForTestAddress(buf) {
      const decodedPrefix = buf.slice(0, 2);
      if ((0, utils_1.equal)(PREFIX_BYTES.main, decodedPrefix)) {
        return false;
      }
      if ((0, utils_1.equal)(PREFIX_BYTES.test, decodedPrefix)) {
        return true;
      }
      throw new Error("Invalid X-address: bad prefix");
    }
    function tagFromUint8Array(buf) {
      const flag = buf[22];
      if (flag >= 2) {
        throw new Error("Unsupported X-address");
      }
      if (flag === 1) {
        return buf[23] + buf[24] * 256 + buf[25] * 65536 + buf[26] * 16777216;
      }
      if (flag !== 0) {
        throw new Error("flag must be zero to indicate no tag");
      }
      if (!(0, utils_1.equal)((0, utils_1.hexToBytes)("0000000000000000"), buf.slice(23, 23 + 8))) {
        throw new Error("remaining bytes must be zero");
      }
      return false;
    }
    function isValidXAddress(xAddress) {
      try {
        decodeXAddress(xAddress);
      } catch (_error) {
        return false;
      }
      return true;
    }
    exports.isValidXAddress = isValidXAddress;
  }
});

// node_modules/ripple-binary-codec/dist/utils.js
var require_utils3 = __commonJS({
  "node_modules/ripple-binary-codec/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compare = exports.equal = exports.readInt64BE = exports.readInt32BE = exports.readUInt32BE = exports.readUInt16BE = exports.writeInt64BE = exports.writeInt32BE = exports.writeUInt32BE = exports.writeUInt16BE = exports.writeUInt8 = void 0;
    function writeUInt8(array, value, offset) {
      value = Number(value);
      array[offset] = value;
    }
    exports.writeUInt8 = writeUInt8;
    function writeUInt16BE(array, value, offset) {
      value = Number(value);
      array[offset] = value >>> 8;
      array[offset + 1] = value;
    }
    exports.writeUInt16BE = writeUInt16BE;
    function writeUInt32BE(array, value, offset) {
      array[offset] = value >>> 24 & 255;
      array[offset + 1] = value >>> 16 & 255;
      array[offset + 2] = value >>> 8 & 255;
      array[offset + 3] = value & 255;
    }
    exports.writeUInt32BE = writeUInt32BE;
    function writeInt32BE(array, value, offset) {
      new DataView(array.buffer, array.byteOffset, array.byteLength).setInt32(offset, value, false);
    }
    exports.writeInt32BE = writeInt32BE;
    function writeInt64BE(array, value, offset) {
      new DataView(array.buffer, array.byteOffset, array.byteLength).setBigInt64(offset, value, false);
    }
    exports.writeInt64BE = writeInt64BE;
    function readUInt16BE(array, offset) {
      return new DataView(array.buffer).getUint16(offset, false).toString(10);
    }
    exports.readUInt16BE = readUInt16BE;
    function readUInt32BE(array, offset) {
      return new DataView(array.buffer).getUint32(offset, false).toString(10);
    }
    exports.readUInt32BE = readUInt32BE;
    function readInt32BE(array, offset) {
      return new DataView(array.buffer, array.byteOffset, array.byteLength).getInt32(offset, false);
    }
    exports.readInt32BE = readInt32BE;
    function readInt64BE(array, offset) {
      return new DataView(array.buffer, array.byteOffset, array.byteLength).getBigInt64(offset, false);
    }
    exports.readInt64BE = readInt64BE;
    function equal(a, b2) {
      const aUInt = a instanceof ArrayBuffer ? new Uint8Array(a, 0) : a;
      const bUInt = b2 instanceof ArrayBuffer ? new Uint8Array(b2, 0) : b2;
      if (aUInt.byteLength != bUInt.byteLength)
        return false;
      if (aligned32(aUInt) && aligned32(bUInt))
        return compare32(aUInt, bUInt) === 0;
      if (aligned16(aUInt) && aligned16(bUInt))
        return compare16(aUInt, bUInt) === 0;
      return compare8(aUInt, bUInt) === 0;
    }
    exports.equal = equal;
    function compare8(a, b2) {
      const ua = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
      const ub = new Uint8Array(b2.buffer, b2.byteOffset, b2.byteLength);
      return compare(ua, ub);
    }
    function compare16(a, b2) {
      const ua = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);
      const ub = new Uint16Array(b2.buffer, b2.byteOffset, b2.byteLength / 2);
      return compare(ua, ub);
    }
    function compare32(a, b2) {
      const ua = new Uint32Array(a.buffer, a.byteOffset, a.byteLength / 4);
      const ub = new Uint32Array(b2.buffer, b2.byteOffset, b2.byteLength / 4);
      return compare(ua, ub);
    }
    function compare(a, b2) {
      if (a.byteLength !== b2.byteLength) {
        throw new Error("Cannot compare arrays of different length");
      }
      for (let i = 0; i < a.length - 1; i += 1) {
        if (a[i] > b2[i])
          return 1;
        if (a[i] < b2[i])
          return -1;
      }
      return 0;
    }
    exports.compare = compare;
    function aligned16(array) {
      return array.byteOffset % 2 === 0 && array.byteLength % 2 === 0;
    }
    function aligned32(array) {
      return array.byteOffset % 4 === 0 && array.byteLength % 4 === 0;
    }
  }
});

// node_modules/ripple-binary-codec/dist/types/hash.js
var require_hash = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/hash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash = void 0;
    var serialized_type_1 = require_serialized_type();
    var utils_1 = require_browser2();
    var utils_2 = require_utils3();
    var Hash2 = class extends serialized_type_1.Comparable {
      constructor(bytes3) {
        super(bytes3);
        if (this.bytes.length !== this.constructor.width) {
          throw new Error(`Invalid Hash length ${this.bytes.byteLength}`);
        }
      }
      /**
       * Construct a Hash object from an existing Hash object or a hex-string
       *
       * @param value A hash object or hex-string of a hash
       */
      static from(value) {
        if (value instanceof this) {
          return value;
        }
        if (typeof value === "string") {
          if (!utils_1.HEX_REGEX.test(value)) {
            throw new Error(`Invalid hash string ${value}`);
          }
          return new this((0, utils_1.hexToBytes)(value));
        }
        throw new Error("Cannot construct Hash from given value");
      }
      /**
       * Read a Hash object from a BinaryParser
       *
       * @param parser BinaryParser to read the hash from
       * @param hint length of the bytes to read, optional
       */
      static fromParser(parser, hint) {
        return new this(parser.read(hint !== null && hint !== void 0 ? hint : this.width));
      }
      /**
       * Overloaded operator for comparing two hash objects
       *
       * @param other The Hash to compare this to
       */
      compareTo(other) {
        return (0, utils_2.compare)(this.bytes, this.constructor.from(other).bytes);
      }
      /**
       * @returns the hex-string representation of this Hash
       */
      toString() {
        return this.toHex();
      }
      /**
       * Returns four bits at the specified depth within a hash
       *
       * @param depth The depth of the four bits
       * @returns The number represented by the four bits
       */
      nibblet(depth) {
        const byteIx = depth > 0 ? depth / 2 | 0 : 0;
        let b2 = this.bytes[byteIx];
        if (depth % 2 === 0) {
          b2 = (b2 & 240) >>> 4;
        } else {
          b2 = b2 & 15;
        }
        return b2;
      }
    };
    exports.Hash = Hash2;
  }
});

// node_modules/ripple-binary-codec/dist/types/hash-160.js
var require_hash_160 = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/hash-160.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash160 = void 0;
    var hash_1 = require_hash();
    var Hash160 = class _Hash160 extends hash_1.Hash {
      constructor(bytes3) {
        if (bytes3 && bytes3.byteLength === 0) {
          bytes3 = _Hash160.ZERO_160.bytes;
        }
        super(bytes3 !== null && bytes3 !== void 0 ? bytes3 : _Hash160.ZERO_160.bytes);
      }
    };
    exports.Hash160 = Hash160;
    Hash160.width = 20;
    Hash160.ZERO_160 = new Hash160(new Uint8Array(Hash160.width));
  }
});

// node_modules/ripple-binary-codec/dist/types/account-id.js
var require_account_id = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/account-id.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AccountID = void 0;
    var ripple_address_codec_1 = require_dist();
    var hash_160_1 = require_hash_160();
    var utils_1 = require_browser2();
    var HEX_REGEX = /^[A-F0-9]{40}$/;
    var AccountID = class _AccountID extends hash_160_1.Hash160 {
      constructor(bytes3) {
        super(bytes3 !== null && bytes3 !== void 0 ? bytes3 : _AccountID.defaultAccountID.bytes);
      }
      /**
       * Defines how to construct an AccountID
       *
       * @param value either an existing AccountID, a hex-string, or a base58 r-Address
       * @returns an AccountID object
       */
      static from(value) {
        if (value instanceof _AccountID) {
          return value;
        }
        if (typeof value === "string") {
          if (value === "") {
            return new _AccountID();
          }
          return HEX_REGEX.test(value) ? new _AccountID((0, utils_1.hexToBytes)(value)) : this.fromBase58(value);
        }
        throw new Error("Cannot construct AccountID from value given");
      }
      /**
       * Defines how to build an AccountID from a base58 r-Address
       *
       * @param value a base58 r-Address
       * @returns an AccountID object
       */
      static fromBase58(value) {
        if ((0, ripple_address_codec_1.isValidXAddress)(value)) {
          const classic = (0, ripple_address_codec_1.xAddressToClassicAddress)(value);
          if (classic.tag !== false)
            throw new Error("Only allowed to have tag on Account or Destination");
          value = classic.classicAddress;
        }
        return new _AccountID(Uint8Array.from((0, ripple_address_codec_1.decodeAccountID)(value)));
      }
      /**
       * Overload of toJSON
       *
       * @returns the base58 string for this AccountID
       */
      toJSON() {
        return this.toBase58();
      }
      /**
       * Defines how to encode AccountID into a base58 address
       *
       * @returns the base58 string defined by this.bytes
       */
      toBase58() {
        return (0, ripple_address_codec_1.encodeAccountID)(this.bytes);
      }
    };
    exports.AccountID = AccountID;
    AccountID.defaultAccountID = new AccountID(new Uint8Array(20));
  }
});

// node_modules/ripple-binary-codec/dist/serdes/binary-parser.js
var require_binary_parser = __commonJS({
  "node_modules/ripple-binary-codec/dist/serdes/binary-parser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BinaryParser = void 0;
    var enums_1 = require_enums();
    var utils_1 = require_browser2();
    var BinaryParser = class {
      /**
       * Initialize bytes to a hex string
       *
       * @param hexBytes a hex string
       * @param definitions Rippled definitions used to parse the values of transaction types and such.
       *                          Can be customized for sidechains and amendments.
       */
      constructor(hexBytes, definitions = enums_1.DEFAULT_DEFINITIONS) {
        this.bytes = (0, utils_1.hexToBytes)(hexBytes);
        this.definitions = definitions;
      }
      /**
       * Peek the first byte of the BinaryParser
       *
       * @returns The first byte of the BinaryParser
       */
      peek() {
        if (this.bytes.byteLength === 0) {
          throw new Error();
        }
        return this.bytes[0];
      }
      /**
       * Consume the first n bytes of the BinaryParser
       *
       * @param n the number of bytes to skip
       */
      skip(n) {
        if (n > this.bytes.byteLength) {
          throw new Error();
        }
        this.bytes = this.bytes.slice(n);
      }
      /**
       * read the first n bytes from the BinaryParser
       *
       * @param n The number of bytes to read
       * @return The bytes
       */
      read(n) {
        if (n > this.bytes.byteLength) {
          throw new Error();
        }
        const slice = this.bytes.slice(0, n);
        this.skip(n);
        return slice;
      }
      /**
       * Read an integer of given size
       *
       * @param n The number of bytes to read
       * @return The number represented by those bytes
       */
      readUIntN(n) {
        if (0 >= n || n > 4) {
          throw new Error("invalid n");
        }
        return this.read(n).reduce((a, b2) => a << 8 | b2) >>> 0;
      }
      readUInt8() {
        return this.readUIntN(1);
      }
      readUInt16() {
        return this.readUIntN(2);
      }
      readUInt32() {
        return this.readUIntN(4);
      }
      size() {
        return this.bytes.byteLength;
      }
      end(customEnd) {
        const length = this.bytes.byteLength;
        return length === 0 || customEnd !== void 0 && length <= customEnd;
      }
      /**
       * Reads variable length encoded bytes
       *
       * @return The variable length bytes
       */
      readVariableLength() {
        return this.read(this.readVariableLengthLength());
      }
      /**
       * Reads the length of the variable length encoded bytes
       *
       * @return The length of the variable length encoded bytes
       */
      readVariableLengthLength() {
        const b1 = this.readUInt8();
        if (b1 <= 192) {
          return b1;
        } else if (b1 <= 240) {
          const b2 = this.readUInt8();
          return 193 + (b1 - 193) * 256 + b2;
        } else if (b1 <= 254) {
          const b2 = this.readUInt8();
          const b3 = this.readUInt8();
          return 12481 + (b1 - 241) * 65536 + b2 * 256 + b3;
        }
        throw new Error("Invalid variable length indicator");
      }
      /**
       * Reads the field ordinal from the BinaryParser
       *
       * @return Field ordinal
       */
      readFieldOrdinal() {
        let type = this.readUInt8();
        let nth = type & 15;
        type >>= 4;
        if (type === 0) {
          type = this.readUInt8();
          if (type === 0 || type < 16) {
            throw new Error(`Cannot read FieldOrdinal, type_code ${type} out of range`);
          }
        }
        if (nth === 0) {
          nth = this.readUInt8();
          if (nth === 0 || nth < 16) {
            throw new Error(`Cannot read FieldOrdinal, field_code ${nth} out of range`);
          }
        }
        return type << 16 | nth;
      }
      /**
       * Read the field from the BinaryParser
       *
       * @return The field represented by the bytes at the head of the BinaryParser
       */
      readField() {
        return this.definitions.field.fromString(this.readFieldOrdinal().toString());
      }
      /**
       * Read a given type from the BinaryParser
       *
       * @param type The type that you want to read from the BinaryParser
       * @return The instance of that type read from the BinaryParser
       */
      readType(type) {
        return type.fromParser(this);
      }
      /**
       * Get the type associated with a given field
       *
       * @param field The field that you wan to get the type of
       * @return The type associated with the given field
       */
      typeForField(field) {
        return field.associatedType;
      }
      /**
       * Read value of the type specified by field from the BinaryParser
       *
       * @param field The field that you want to get the associated value for
       * @return The value associated with the given field
       */
      readFieldValue(field) {
        const type = this.typeForField(field);
        if (!type) {
          throw new Error(`unsupported: (${field.name}, ${field.type.name})`);
        }
        const sizeHint = field.isVariableLengthEncoded ? this.readVariableLengthLength() : void 0;
        const value = type.fromParser(this, sizeHint);
        if (value === void 0) {
          throw new Error(`fromParser for (${field.name}, ${field.type.name}) -> undefined `);
        }
        return value;
      }
      /**
       * Get the next field and value from the BinaryParser
       *
       * @return The field and value
       */
      readFieldAndValue() {
        const field = this.readField();
        return [field, this.readFieldValue(field)];
      }
    };
    exports.BinaryParser = BinaryParser;
  }
});

// node_modules/ripple-binary-codec/dist/types/currency.js
var require_currency = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/currency.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Currency = void 0;
    var hash_160_1 = require_hash_160();
    var utils_1 = require_browser2();
    var XRP_HEX_REGEX = /^0{40}$/;
    var ISO_REGEX = /^[A-Z0-9a-z?!@#$%^&*(){}[\]|]{3}$/;
    var HEX_REGEX = /^[A-F0-9]{40}$/;
    var STANDARD_FORMAT_HEX_REGEX = /^0{24}[\x00-\x7F]{6}0{10}$/;
    function isoToBytes(iso) {
      const bytes3 = new Uint8Array(20);
      if (iso !== "XRP") {
        const isoBytes = iso.split("").map((c) => c.charCodeAt(0));
        bytes3.set(isoBytes, 12);
      }
      return bytes3;
    }
    function isIsoCode(iso) {
      return ISO_REGEX.test(iso);
    }
    function isoCodeFromHex(code) {
      const iso = (0, utils_1.hexToString)((0, utils_1.bytesToHex)(code));
      if (iso === "XRP") {
        return null;
      }
      if (isIsoCode(iso)) {
        return iso;
      }
      return null;
    }
    function isHex3(hex2) {
      return HEX_REGEX.test(hex2);
    }
    function isStringRepresentation(input) {
      return input.length === 3 || isHex3(input);
    }
    function isBytesArray(bytes3) {
      return bytes3.byteLength === 20;
    }
    function isValidRepresentation(input) {
      return input instanceof Uint8Array ? isBytesArray(input) : isStringRepresentation(input);
    }
    function bytesFromRepresentation(input) {
      if (!isValidRepresentation(input)) {
        throw new Error(`Unsupported Currency representation: ${input}`);
      }
      return input.length === 3 ? isoToBytes(input) : (0, utils_1.hexToBytes)(input);
    }
    var Currency = class _Currency extends hash_160_1.Hash160 {
      constructor(byteBuf) {
        super(byteBuf !== null && byteBuf !== void 0 ? byteBuf : _Currency.XRP.bytes);
        const hex2 = (0, utils_1.bytesToHex)(this.bytes);
        if (XRP_HEX_REGEX.test(hex2)) {
          this._iso = "XRP";
        } else if (STANDARD_FORMAT_HEX_REGEX.test(hex2)) {
          this._iso = isoCodeFromHex(this.bytes.slice(12, 15));
        } else {
          this._iso = null;
        }
      }
      /**
       * Return the ISO code of this currency
       *
       * @returns ISO code if it exists, else null
       */
      iso() {
        return this._iso;
      }
      /**
       * Constructs a Currency object
       *
       * @param val Currency object or a string representation of a currency
       */
      static from(value) {
        if (value instanceof _Currency) {
          return value;
        }
        if (typeof value === "string") {
          return new _Currency(bytesFromRepresentation(value));
        }
        throw new Error("Cannot construct Currency from value given");
      }
      /**
       * Gets the JSON representation of a currency
       *
       * @returns JSON representation
       */
      toJSON() {
        const iso = this.iso();
        if (iso !== null) {
          return iso;
        }
        return (0, utils_1.bytesToHex)(this.bytes);
      }
    };
    exports.Currency = Currency;
    Currency.XRP = new Currency(new Uint8Array(20));
  }
});

// node_modules/bignumber.js/bignumber.js
var require_bignumber = __commonJS({
  "node_modules/bignumber.js/bignumber.js"(exports, module2) {
    (function(globalObject) {
      "use strict";
      var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
      function clone(configObject) {
        var div, convertBase, parseNumeric, P2 = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
          prefix: "",
          groupSize: 3,
          secondaryGroupSize: 0,
          groupSeparator: ",",
          decimalSeparator: ".",
          fractionGroupSize: 0,
          fractionGroupSeparator: " ",
          // non-breaking space
          suffix: ""
        }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
        function BigNumber2(v3, b2) {
          var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
          if (!(x instanceof BigNumber2)) return new BigNumber2(v3, b2);
          if (b2 == null) {
            if (v3 && v3._isBigNumber === true) {
              x.s = v3.s;
              if (!v3.c || v3.e > MAX_EXP) {
                x.c = x.e = null;
              } else if (v3.e < MIN_EXP) {
                x.c = [x.e = 0];
              } else {
                x.e = v3.e;
                x.c = v3.c.slice();
              }
              return;
            }
            if ((isNum = typeof v3 == "number") && v3 * 0 == 0) {
              x.s = 1 / v3 < 0 ? (v3 = -v3, -1) : 1;
              if (v3 === ~~v3) {
                for (e = 0, i = v3; i >= 10; i /= 10, e++) ;
                if (e > MAX_EXP) {
                  x.c = x.e = null;
                } else {
                  x.e = e;
                  x.c = [v3];
                }
                return;
              }
              str = String(v3);
            } else {
              if (!isNumeric.test(str = String(v3))) return parseNumeric(x, str, isNum);
              x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
            }
            if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
            if ((i = str.search(/e/i)) > 0) {
              if (e < 0) e = i;
              e += +str.slice(i + 1);
              str = str.substring(0, i);
            } else if (e < 0) {
              e = str.length;
            }
          } else {
            intCheck(b2, 2, ALPHABET.length, "Base");
            if (b2 == 10 && alphabetHasNormalDecimalDigits) {
              x = new BigNumber2(v3);
              return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }
            str = String(v3);
            if (isNum = typeof v3 == "number") {
              if (v3 * 0 != 0) return parseNumeric(x, str, isNum, b2);
              x.s = 1 / v3 < 0 ? (str = str.slice(1), -1) : 1;
              if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
                throw Error(tooManyDigits + v3);
              }
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
            alphabet = ALPHABET.slice(0, b2);
            e = i = 0;
            for (len = str.length; i < len; i++) {
              if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                if (c == ".") {
                  if (i > e) {
                    e = len;
                    continue;
                  }
                } else if (!caseChanged) {
                  if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                    caseChanged = true;
                    i = -1;
                    e = 0;
                    continue;
                  }
                }
                return parseNumeric(x, String(v3), isNum, b2);
              }
            }
            isNum = false;
            str = convertBase(str, b2, 10, x.s);
            if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
            else e = str.length;
          }
          for (i = 0; str.charCodeAt(i) === 48; i++) ;
          for (len = str.length; str.charCodeAt(--len) === 48; ) ;
          if (str = str.slice(i, ++len)) {
            len -= i;
            if (isNum && BigNumber2.DEBUG && len > 15 && (v3 > MAX_SAFE_INTEGER || v3 !== mathfloor(v3))) {
              throw Error(tooManyDigits + x.s * v3);
            }
            if ((e = e - i - 1) > MAX_EXP) {
              x.c = x.e = null;
            } else if (e < MIN_EXP) {
              x.c = [x.e = 0];
            } else {
              x.e = e;
              x.c = [];
              i = (e + 1) % LOG_BASE;
              if (e < 0) i += LOG_BASE;
              if (i < len) {
                if (i) x.c.push(+str.slice(0, i));
                for (len -= LOG_BASE; i < len; ) {
                  x.c.push(+str.slice(i, i += LOG_BASE));
                }
                i = LOG_BASE - (str = str.slice(i)).length;
              } else {
                i -= len;
              }
              for (; i--; str += "0") ;
              x.c.push(+str);
            }
          } else {
            x.c = [x.e = 0];
          }
        }
        BigNumber2.clone = clone;
        BigNumber2.ROUND_UP = 0;
        BigNumber2.ROUND_DOWN = 1;
        BigNumber2.ROUND_CEIL = 2;
        BigNumber2.ROUND_FLOOR = 3;
        BigNumber2.ROUND_HALF_UP = 4;
        BigNumber2.ROUND_HALF_DOWN = 5;
        BigNumber2.ROUND_HALF_EVEN = 6;
        BigNumber2.ROUND_HALF_CEIL = 7;
        BigNumber2.ROUND_HALF_FLOOR = 8;
        BigNumber2.EUCLID = 9;
        BigNumber2.config = BigNumber2.set = function(obj) {
          var p, v3;
          if (obj != null) {
            if (typeof obj == "object") {
              if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
                v3 = obj[p];
                intCheck(v3, 0, MAX, p);
                DECIMAL_PLACES = v3;
              }
              if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
                v3 = obj[p];
                intCheck(v3, 0, 8, p);
                ROUNDING_MODE = v3;
              }
              if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
                v3 = obj[p];
                if (v3 && v3.pop) {
                  intCheck(v3[0], -MAX, 0, p);
                  intCheck(v3[1], 0, MAX, p);
                  TO_EXP_NEG = v3[0];
                  TO_EXP_POS = v3[1];
                } else {
                  intCheck(v3, -MAX, MAX, p);
                  TO_EXP_NEG = -(TO_EXP_POS = v3 < 0 ? -v3 : v3);
                }
              }
              if (obj.hasOwnProperty(p = "RANGE")) {
                v3 = obj[p];
                if (v3 && v3.pop) {
                  intCheck(v3[0], -MAX, -1, p);
                  intCheck(v3[1], 1, MAX, p);
                  MIN_EXP = v3[0];
                  MAX_EXP = v3[1];
                } else {
                  intCheck(v3, -MAX, MAX, p);
                  if (v3) {
                    MIN_EXP = -(MAX_EXP = v3 < 0 ? -v3 : v3);
                  } else {
                    throw Error(bignumberError + p + " cannot be zero: " + v3);
                  }
                }
              }
              if (obj.hasOwnProperty(p = "CRYPTO")) {
                v3 = obj[p];
                if (v3 === !!v3) {
                  if (v3) {
                    if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                      CRYPTO = v3;
                    } else {
                      CRYPTO = !v3;
                      throw Error(bignumberError + "crypto unavailable");
                    }
                  } else {
                    CRYPTO = v3;
                  }
                } else {
                  throw Error(bignumberError + p + " not true or false: " + v3);
                }
              }
              if (obj.hasOwnProperty(p = "MODULO_MODE")) {
                v3 = obj[p];
                intCheck(v3, 0, 9, p);
                MODULO_MODE = v3;
              }
              if (obj.hasOwnProperty(p = "POW_PRECISION")) {
                v3 = obj[p];
                intCheck(v3, 0, MAX, p);
                POW_PRECISION = v3;
              }
              if (obj.hasOwnProperty(p = "FORMAT")) {
                v3 = obj[p];
                if (typeof v3 == "object") FORMAT = v3;
                else throw Error(bignumberError + p + " not an object: " + v3);
              }
              if (obj.hasOwnProperty(p = "ALPHABET")) {
                v3 = obj[p];
                if (typeof v3 == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v3)) {
                  alphabetHasNormalDecimalDigits = v3.slice(0, 10) == "0123456789";
                  ALPHABET = v3;
                } else {
                  throw Error(bignumberError + p + " invalid: " + v3);
                }
              }
            } else {
              throw Error(bignumberError + "Object expected: " + obj);
            }
          }
          return {
            DECIMAL_PLACES,
            ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO,
            MODULO_MODE,
            POW_PRECISION,
            FORMAT,
            ALPHABET
          };
        };
        BigNumber2.isBigNumber = function(v3) {
          if (!v3 || v3._isBigNumber !== true) return false;
          if (!BigNumber2.DEBUG) return true;
          var i, n, c = v3.c, e = v3.e, s = v3.s;
          out: if ({}.toString.call(c) == "[object Array]") {
            if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
              if (c[0] === 0) {
                if (e === 0 && c.length === 1) return true;
                break out;
              }
              i = (e + 1) % LOG_BASE;
              if (i < 1) i += LOG_BASE;
              if (String(c[0]).length == i) {
                for (i = 0; i < c.length; i++) {
                  n = c[i];
                  if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                }
                if (n !== 0) return true;
              }
            }
          } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
            return true;
          }
          throw Error(bignumberError + "Invalid BigNumber: " + v3);
        };
        BigNumber2.maximum = BigNumber2.max = function() {
          return maxOrMin(arguments, -1);
        };
        BigNumber2.minimum = BigNumber2.min = function() {
          return maxOrMin(arguments, 1);
        };
        BigNumber2.random = function() {
          var pow2_53 = 9007199254740992;
          var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
            return mathfloor(Math.random() * pow2_53);
          } : function() {
            return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
          };
          return function(dp) {
            var a, b2, e, k2, v3, i = 0, c = [], rand = new BigNumber2(ONE);
            if (dp == null) dp = DECIMAL_PLACES;
            else intCheck(dp, 0, MAX);
            k2 = mathceil(dp / LOG_BASE);
            if (CRYPTO) {
              if (crypto.getRandomValues) {
                a = crypto.getRandomValues(new Uint32Array(k2 *= 2));
                for (; i < k2; ) {
                  v3 = a[i] * 131072 + (a[i + 1] >>> 11);
                  if (v3 >= 9e15) {
                    b2 = crypto.getRandomValues(new Uint32Array(2));
                    a[i] = b2[0];
                    a[i + 1] = b2[1];
                  } else {
                    c.push(v3 % 1e14);
                    i += 2;
                  }
                }
                i = k2 / 2;
              } else if (crypto.randomBytes) {
                a = crypto.randomBytes(k2 *= 7);
                for (; i < k2; ) {
                  v3 = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                  if (v3 >= 9e15) {
                    crypto.randomBytes(7).copy(a, i);
                  } else {
                    c.push(v3 % 1e14);
                    i += 7;
                  }
                }
                i = k2 / 7;
              } else {
                CRYPTO = false;
                throw Error(bignumberError + "crypto unavailable");
              }
            }
            if (!CRYPTO) {
              for (; i < k2; ) {
                v3 = random53bitInt();
                if (v3 < 9e15) c[i++] = v3 % 1e14;
              }
            }
            k2 = c[--i];
            dp %= LOG_BASE;
            if (k2 && dp) {
              v3 = POWS_TEN[LOG_BASE - dp];
              c[i] = mathfloor(k2 / v3) * v3;
            }
            for (; c[i] === 0; c.pop(), i--) ;
            if (i < 0) {
              c = [e = 0];
            } else {
              for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) ;
              for (i = 1, v3 = c[0]; v3 >= 10; v3 /= 10, i++) ;
              if (i < LOG_BASE) e -= LOG_BASE - i;
            }
            rand.e = e;
            rand.c = c;
            return rand;
          };
        }();
        BigNumber2.sum = function() {
          var i = 1, args = arguments, sum = new BigNumber2(args[0]);
          for (; i < args.length; ) sum = sum.plus(args[i++]);
          return sum;
        };
        convertBase = /* @__PURE__ */ function() {
          var decimal = "0123456789";
          function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j3, arr = [0], arrL, i = 0, len = str.length;
            for (; i < len; ) {
              for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) ;
              arr[0] += alphabet.indexOf(str.charAt(i++));
              for (j3 = 0; j3 < arr.length; j3++) {
                if (arr[j3] > baseOut - 1) {
                  if (arr[j3 + 1] == null) arr[j3 + 1] = 0;
                  arr[j3 + 1] += arr[j3] / baseOut | 0;
                  arr[j3] %= baseOut;
                }
              }
            }
            return arr.reverse();
          }
          return function(str, baseIn, baseOut, sign2, callerIsToString) {
            var alphabet, d, e, k2, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
            if (i >= 0) {
              k2 = POW_PRECISION;
              POW_PRECISION = 0;
              str = str.replace(".", "");
              y = new BigNumber2(baseIn);
              x = y.pow(str.length - i);
              POW_PRECISION = k2;
              y.c = toBaseOut(
                toFixedPoint(coeffToString(x.c), x.e, "0"),
                10,
                baseOut,
                decimal
              );
              y.e = y.c.length;
            }
            xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
            e = k2 = xc.length;
            for (; xc[--k2] == 0; xc.pop()) ;
            if (!xc[0]) return alphabet.charAt(0);
            if (i < 0) {
              --e;
            } else {
              x.c = xc;
              x.e = e;
              x.s = sign2;
              x = div(x, y, dp, rm, baseOut);
              xc = x.c;
              r = x.r;
              e = x.e;
            }
            d = e + dp + 1;
            i = xc[d];
            k2 = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;
            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k2 || i == k2 && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
            if (d < 1 || !xc[0]) {
              str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
            } else {
              xc.length = d;
              if (r) {
                for (--baseOut; ++xc[--d] > baseOut; ) {
                  xc[d] = 0;
                  if (!d) {
                    ++e;
                    xc = [1].concat(xc);
                  }
                }
              }
              for (k2 = xc.length; !xc[--k2]; ) ;
              for (i = 0, str = ""; i <= k2; str += alphabet.charAt(xc[i++])) ;
              str = toFixedPoint(str, e, alphabet.charAt(0));
            }
            return str;
          };
        }();
        div = /* @__PURE__ */ function() {
          function multiply(x, k2, base) {
            var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k2 % SQRT_BASE, khi = k2 / SQRT_BASE | 0;
            for (x = x.slice(); i--; ) {
              xlo = x[i] % SQRT_BASE;
              xhi = x[i] / SQRT_BASE | 0;
              m = khi * xlo + xhi * klo;
              temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
              carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
              x[i] = temp % base;
            }
            if (carry) x = [carry].concat(x);
            return x;
          }
          function compare2(a, b2, aL, bL) {
            var i, cmp;
            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {
              for (i = cmp = 0; i < aL; i++) {
                if (a[i] != b2[i]) {
                  cmp = a[i] > b2[i] ? 1 : -1;
                  break;
                }
              }
            }
            return cmp;
          }
          function subtract(a, b2, aL, base) {
            var i = 0;
            for (; aL--; ) {
              a[aL] -= i;
              i = a[aL] < b2[aL] ? 1 : 0;
              a[aL] = i * base + a[aL] - b2[aL];
            }
            for (; !a[0] && a.length > 1; a.splice(0, 1)) ;
          }
          return function(x, y, dp, rm, base) {
            var cmp, e, i, more, n, prod, prodL, q2, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
            if (!xc || !xc[0] || !yc || !yc[0]) {
              return new BigNumber2(
                // Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
                  // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                  xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                )
              );
            }
            q2 = new BigNumber2(s);
            qc = q2.c = [];
            e = x.e - y.e;
            s = dp + e + 1;
            if (!base) {
              base = BASE;
              e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }
            for (i = 0; yc[i] == (xc[i] || 0); i++) ;
            if (yc[i] > (xc[i] || 0)) e--;
            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i = 0;
              s += 2;
              n = mathfloor(base / (yc[0] + 1));
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }
              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;
              for (; remL < yL; rem[remL++] = 0) ;
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base / 2) yc0++;
              do {
                n = 0;
                cmp = compare2(yc, rem, yL, remL);
                if (cmp < 0) {
                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                  n = mathfloor(rem0 / yc0);
                  if (n > 1) {
                    if (n >= base) n = base - 1;
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;
                    while (compare2(prod, rem, prodL, remL) == 1) {
                      n--;
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {
                    if (n == 0) {
                      cmp = n = 1;
                    }
                    prod = yc.slice();
                    prodL = prod.length;
                  }
                  if (prodL < remL) prod = [0].concat(prod);
                  subtract(rem, prod, remL, base);
                  remL = rem.length;
                  if (cmp == -1) {
                    while (compare2(yc, rem, yL, remL) < 1) {
                      n++;
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                }
                qc[i++] = n;
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);
              more = rem[0] != null;
              if (!qc[0]) qc.splice(0, 1);
            }
            if (base == BASE) {
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) ;
              round(q2, dp + (q2.e = i + e * LOG_BASE - 1) + 1, rm, more);
            } else {
              q2.e = e;
              q2.r = +more;
            }
            return q2;
          };
        }();
        function format(n, i, rm, id) {
          var c0, e, ne2, len, str;
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          if (!n.c) return n.toString();
          c0 = n.c[0];
          ne2 = n.e;
          if (i == null) {
            str = coeffToString(n.c);
            str = id == 1 || id == 2 && (ne2 <= TO_EXP_NEG || ne2 >= TO_EXP_POS) ? toExponential(str, ne2) : toFixedPoint(str, ne2, "0");
          } else {
            n = round(new BigNumber2(n), i, rm);
            e = n.e;
            str = coeffToString(n.c);
            len = str.length;
            if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
              for (; len < i; str += "0", len++) ;
              str = toExponential(str, e);
            } else {
              i -= ne2 + (id === 2 && e > ne2);
              str = toFixedPoint(str, e, "0");
              if (e + 1 > len) {
                if (--i > 0) for (str += "."; i--; str += "0") ;
              } else {
                i += e - len;
                if (i > 0) {
                  if (e + 1 == len) str += ".";
                  for (; i--; str += "0") ;
                }
              }
            }
          }
          return n.s < 0 && c0 ? "-" + str : str;
        }
        function maxOrMin(args, n) {
          var k2, y, i = 1, x = new BigNumber2(args[0]);
          for (; i < args.length; i++) {
            y = new BigNumber2(args[i]);
            if (!y.s || (k2 = compare(x, y)) === n || k2 === 0 && x.s === n) {
              x = y;
            }
          }
          return x;
        }
        function normalise(n, c, e) {
          var i = 1, j3 = c.length;
          for (; !c[--j3]; c.pop()) ;
          for (j3 = c[0]; j3 >= 10; j3 /= 10, i++) ;
          if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
            n.c = n.e = null;
          } else if (e < MIN_EXP) {
            n.c = [n.e = 0];
          } else {
            n.e = e;
            n.c = c;
          }
          return n;
        }
        parseNumeric = /* @__PURE__ */ function() {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
          return function(x, str, isNum, b2) {
            var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!isNum) {
                s = s.replace(basePrefix, function(m, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                  return !b2 || b2 == base ? p1 : m;
                });
                if (b2) {
                  base = b2;
                  s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                }
                if (str != s) return new BigNumber2(s, base);
              }
              if (BigNumber2.DEBUG) {
                throw Error(bignumberError + "Not a" + (b2 ? " base " + b2 : "") + " number: " + str);
              }
              x.s = null;
            }
            x.c = x.e = null;
          };
        }();
        function round(x, sd, rm, r) {
          var d, i, j3, k2, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
          if (xc) {
            out: {
              for (d = 1, k2 = xc[0]; k2 >= 10; k2 /= 10, d++) ;
              i = sd - d;
              if (i < 0) {
                i += LOG_BASE;
                j3 = sd;
                n = xc[ni = 0];
                rd = mathfloor(n / pows10[d - j3 - 1] % 10);
              } else {
                ni = mathceil((i + 1) / LOG_BASE);
                if (ni >= xc.length) {
                  if (r) {
                    for (; xc.length <= ni; xc.push(0)) ;
                    n = rd = 0;
                    d = 1;
                    i %= LOG_BASE;
                    j3 = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k2 = xc[ni];
                  for (d = 1; k2 >= 10; k2 /= 10, d++) ;
                  i %= LOG_BASE;
                  j3 = i - LOG_BASE + d;
                  rd = j3 < 0 ? 0 : mathfloor(n / pows10[d - j3 - 1] % 10);
                }
              }
              r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
              xc[ni + 1] != null || (j3 < 0 ? n : n % pows10[d - j3 - 1]);
              r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
              (i > 0 ? j3 > 0 ? n / pows10[d - j3] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
              if (sd < 1 || !xc[0]) {
                xc.length = 0;
                if (r) {
                  sd -= x.e + 1;
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x.e = -sd || 0;
                } else {
                  xc[0] = x.e = 0;
                }
                return x;
              }
              if (i == 0) {
                xc.length = ni;
                k2 = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k2 = pows10[LOG_BASE - i];
                xc[ni] = j3 > 0 ? mathfloor(n / pows10[d - j3] % pows10[j3]) * k2 : 0;
              }
              if (r) {
                for (; ; ) {
                  if (ni == 0) {
                    for (i = 1, j3 = xc[0]; j3 >= 10; j3 /= 10, i++) ;
                    j3 = xc[0] += k2;
                    for (k2 = 1; j3 >= 10; j3 /= 10, k2++) ;
                    if (i != k2) {
                      x.e++;
                      if (xc[0] == BASE) xc[0] = 1;
                    }
                    break;
                  } else {
                    xc[ni] += k2;
                    if (xc[ni] != BASE) break;
                    xc[ni--] = 0;
                    k2 = 1;
                  }
                }
              }
              for (i = xc.length; xc[--i] === 0; xc.pop()) ;
            }
            if (x.e > MAX_EXP) {
              x.c = x.e = null;
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }
          return x;
        }
        function valueOf(n) {
          var str, e = n.e;
          if (e === null) return n.toString();
          str = coeffToString(n.c);
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
          return n.s < 0 ? "-" + str : str;
        }
        P2.absoluteValue = P2.abs = function() {
          var x = new BigNumber2(this);
          if (x.s < 0) x.s = 1;
          return x;
        };
        P2.comparedTo = function(y, b2) {
          return compare(this, new BigNumber2(y, b2));
        };
        P2.decimalPlaces = P2.dp = function(dp, rm) {
          var c, n, v3, x = this;
          if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(new BigNumber2(x), dp + x.e + 1, rm);
          }
          if (!(c = x.c)) return null;
          n = ((v3 = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
          if (v3 = c[v3]) for (; v3 % 10 == 0; v3 /= 10, n--) ;
          if (n < 0) n = 0;
          return n;
        };
        P2.dividedBy = P2.div = function(y, b2) {
          return div(this, new BigNumber2(y, b2), DECIMAL_PLACES, ROUNDING_MODE);
        };
        P2.dividedToIntegerBy = P2.idiv = function(y, b2) {
          return div(this, new BigNumber2(y, b2), 0, 1);
        };
        P2.exponentiatedBy = P2.pow = function(n, m) {
          var half, isModExp, i, k2, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
          n = new BigNumber2(n);
          if (n.c && !n.isInteger()) {
            throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
          }
          if (m != null) m = new BigNumber2(m);
          nIsBig = n.e > 14;
          if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
            y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
            return m ? y.mod(m) : y;
          }
          nIsNeg = n.s < 0;
          if (m) {
            if (m.c ? !m.c[0] : !m.s) return new BigNumber2(NaN);
            isModExp = !nIsNeg && x.isInteger() && m.isInteger();
            if (isModExp) x = x.mod(m);
          } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
            k2 = x.s < 0 && isOdd(n) ? -0 : 0;
            if (x.e > -1) k2 = 1 / k2;
            return new BigNumber2(nIsNeg ? 1 / k2 : k2);
          } else if (POW_PRECISION) {
            k2 = mathceil(POW_PRECISION / LOG_BASE + 2);
          }
          if (nIsBig) {
            half = new BigNumber2(0.5);
            if (nIsNeg) n.s = 1;
            nIsOdd = isOdd(n);
          } else {
            i = Math.abs(+valueOf(n));
            nIsOdd = i % 2;
          }
          y = new BigNumber2(ONE);
          for (; ; ) {
            if (nIsOdd) {
              y = y.times(x);
              if (!y.c) break;
              if (k2) {
                if (y.c.length > k2) y.c.length = k2;
              } else if (isModExp) {
                y = y.mod(m);
              }
            }
            if (i) {
              i = mathfloor(i / 2);
              if (i === 0) break;
              nIsOdd = i % 2;
            } else {
              n = n.times(half);
              round(n, n.e + 1, 1);
              if (n.e > 14) {
                nIsOdd = isOdd(n);
              } else {
                i = +valueOf(n);
                if (i === 0) break;
                nIsOdd = i % 2;
              }
            }
            x = x.times(x);
            if (k2) {
              if (x.c && x.c.length > k2) x.c.length = k2;
            } else if (isModExp) {
              x = x.mod(m);
            }
          }
          if (isModExp) return y;
          if (nIsNeg) y = ONE.div(y);
          return m ? y.mod(m) : k2 ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        P2.integerValue = function(rm) {
          var n = new BigNumber2(this);
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          return round(n, n.e + 1, rm);
        };
        P2.isEqualTo = P2.eq = function(y, b2) {
          return compare(this, new BigNumber2(y, b2)) === 0;
        };
        P2.isFinite = function() {
          return !!this.c;
        };
        P2.isGreaterThan = P2.gt = function(y, b2) {
          return compare(this, new BigNumber2(y, b2)) > 0;
        };
        P2.isGreaterThanOrEqualTo = P2.gte = function(y, b2) {
          return (b2 = compare(this, new BigNumber2(y, b2))) === 1 || b2 === 0;
        };
        P2.isInteger = function() {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        P2.isLessThan = P2.lt = function(y, b2) {
          return compare(this, new BigNumber2(y, b2)) < 0;
        };
        P2.isLessThanOrEqualTo = P2.lte = function(y, b2) {
          return (b2 = compare(this, new BigNumber2(y, b2))) === -1 || b2 === 0;
        };
        P2.isNaN = function() {
          return !this.s;
        };
        P2.isNegative = function() {
          return this.s < 0;
        };
        P2.isPositive = function() {
          return this.s > 0;
        };
        P2.isZero = function() {
          return !!this.c && this.c[0] == 0;
        };
        P2.minus = function(y, b2) {
          var i, j3, t, xLTy, x = this, a = x.s;
          y = new BigNumber2(y, b2);
          b2 = y.s;
          if (!a || !b2) return new BigNumber2(NaN);
          if (a != b2) {
            y.s = -b2;
            return x.plus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc) return xc ? (y.s = -b2, y) : new BigNumber2(yc ? x : NaN);
            if (!xc[0] || !yc[0]) {
              return yc[0] ? (y.s = -b2, y) : new BigNumber2(xc[0] ? x : (
                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0
              ));
            }
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye = xe;
              t = yc;
            }
            t.reverse();
            for (b2 = a; b2--; t.push(0)) ;
            t.reverse();
          } else {
            j3 = (xLTy = (a = xc.length) < (b2 = yc.length)) ? a : b2;
            for (a = b2 = 0; b2 < j3; b2++) {
              if (xc[b2] != yc[b2]) {
                xLTy = xc[b2] < yc[b2];
                break;
              }
            }
          }
          if (xLTy) {
            t = xc;
            xc = yc;
            yc = t;
            y.s = -y.s;
          }
          b2 = (j3 = yc.length) - (i = xc.length);
          if (b2 > 0) for (; b2--; xc[i++] = 0) ;
          b2 = BASE - 1;
          for (; j3 > a; ) {
            if (xc[--j3] < yc[j3]) {
              for (i = j3; i && !xc[--i]; xc[i] = b2) ;
              --xc[i];
              xc[j3] += BASE;
            }
            xc[j3] -= yc[j3];
          }
          for (; xc[0] == 0; xc.splice(0, 1), --ye) ;
          if (!xc[0]) {
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }
          return normalise(y, xc, ye);
        };
        P2.modulo = P2.mod = function(y, b2) {
          var q2, s, x = this;
          y = new BigNumber2(y, b2);
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber2(NaN);
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber2(x);
          }
          if (MODULO_MODE == 9) {
            s = y.s;
            y.s = 1;
            q2 = div(x, y, 0, 3);
            y.s = s;
            q2.s *= s;
          } else {
            q2 = div(x, y, 0, MODULO_MODE);
          }
          y = x.minus(q2.times(y));
          if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
          return y;
        };
        P2.multipliedBy = P2.times = function(y, b2) {
          var c, e, i, j3, k2, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b2)).c;
          if (!xc || !yc || !xc[0] || !yc[0]) {
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s;
              if (!xc || !yc) {
                y.c = y.e = null;
              } else {
                y.c = [0];
                y.e = 0;
              }
            }
            return y;
          }
          e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x.s;
          xcL = xc.length;
          ycL = yc.length;
          if (xcL < ycL) {
            zc = xc;
            xc = yc;
            yc = zc;
            i = xcL;
            xcL = ycL;
            ycL = i;
          }
          for (i = xcL + ycL, zc = []; i--; zc.push(0)) ;
          base = BASE;
          sqrtBase = SQRT_BASE;
          for (i = ycL; --i >= 0; ) {
            c = 0;
            ylo = yc[i] % sqrtBase;
            yhi = yc[i] / sqrtBase | 0;
            for (k2 = xcL, j3 = i + k2; j3 > i; ) {
              xlo = xc[--k2] % sqrtBase;
              xhi = xc[k2] / sqrtBase | 0;
              m = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j3] + c;
              c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
              zc[j3--] = xlo % base;
            }
            zc[j3] = c;
          }
          if (c) {
            ++e;
          } else {
            zc.splice(0, 1);
          }
          return normalise(y, zc, e);
        };
        P2.negated = function() {
          var x = new BigNumber2(this);
          x.s = -x.s || null;
          return x;
        };
        P2.plus = function(y, b2) {
          var t, x = this, a = x.s;
          y = new BigNumber2(y, b2);
          b2 = y.s;
          if (!a || !b2) return new BigNumber2(NaN);
          if (a != b2) {
            y.s = -b2;
            return x.minus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc) return new BigNumber2(a / 0);
            if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }
            t.reverse();
            for (; a--; t.push(0)) ;
            t.reverse();
          }
          a = xc.length;
          b2 = yc.length;
          if (a - b2 < 0) {
            t = yc;
            yc = xc;
            xc = t;
            b2 = a;
          }
          for (a = 0; b2; ) {
            a = (xc[--b2] = xc[b2] + yc[b2] + a) / BASE | 0;
            xc[b2] = BASE === xc[b2] ? 0 : xc[b2] % BASE;
          }
          if (a) {
            xc = [a].concat(xc);
            ++ye;
          }
          return normalise(y, xc, ye);
        };
        P2.precision = P2.sd = function(sd, rm) {
          var c, n, v3, x = this;
          if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(new BigNumber2(x), sd, rm);
          }
          if (!(c = x.c)) return null;
          v3 = c.length - 1;
          n = v3 * LOG_BASE + 1;
          if (v3 = c[v3]) {
            for (; v3 % 10 == 0; v3 /= 10, n--) ;
            for (v3 = c[0]; v3 >= 10; v3 /= 10, n++) ;
          }
          if (sd && x.e + 1 > n) n = x.e + 1;
          return n;
        };
        P2.shiftedBy = function(k2) {
          intCheck(k2, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
          return this.times("1e" + k2);
        };
        P2.squareRoot = P2.sqrt = function() {
          var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          }
          s = Math.sqrt(+valueOf(x));
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e) % 2 == 0) n += "0";
            s = Math.sqrt(+n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
            if (s == 1 / 0) {
              n = "5e" + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf("e") + 1) + e;
            }
            r = new BigNumber2(n);
          } else {
            r = new BigNumber2(s + "");
          }
          if (r.c[0]) {
            e = r.e;
            s = e + dp;
            if (s < 3) s = 0;
            for (; ; ) {
              t = r;
              r = half.times(t.plus(div(x, t, dp, 1)));
              if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                if (r.e < e) --s;
                n = n.slice(s - 3, s + 1);
                if (n == "9999" || !rep && n == "4999") {
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);
                    if (t.times(t).eq(x)) {
                      r = t;
                      break;
                    }
                  }
                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {
                  if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                    round(r, r.e + DECIMAL_PLACES + 2, 1);
                    m = !r.times(r).eq(x);
                  }
                  break;
                }
              }
            }
          }
          return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        P2.toExponential = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
          }
          return format(this, dp, rm, 1);
        };
        P2.toFixed = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
          }
          return format(this, dp, rm);
        };
        P2.toFormat = function(dp, rm, format2) {
          var str, x = this;
          if (format2 == null) {
            if (dp != null && rm && typeof rm == "object") {
              format2 = rm;
              rm = null;
            } else if (dp && typeof dp == "object") {
              format2 = dp;
              dp = rm = null;
            } else {
              format2 = FORMAT;
            }
          } else if (typeof format2 != "object") {
            throw Error(bignumberError + "Argument not an object: " + format2);
          }
          str = x.toFixed(dp, rm);
          if (x.c) {
            var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
            if (g2) {
              i = g1;
              g1 = g2;
              g2 = i;
              len -= i;
            }
            if (g1 > 0 && len > 0) {
              i = len % g1 || g1;
              intPart = intDigits.substr(0, i);
              for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
              if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
              if (isNeg) intPart = "-" + intPart;
            }
            str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
              new RegExp("\\d{" + g2 + "}\\B", "g"),
              "$&" + (format2.fractionGroupSeparator || "")
            ) : fractionPart) : intPart;
          }
          return (format2.prefix || "") + str + (format2.suffix || "");
        };
        P2.toFraction = function(md) {
          var d, d0, d1, d2, e, exp, n, n0, n1, q2, r, s, x = this, xc = x.c;
          if (md != null) {
            n = new BigNumber2(md);
            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
              throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
            }
          }
          if (!xc) return new BigNumber2(x);
          d = new BigNumber2(ONE);
          n1 = d0 = new BigNumber2(ONE);
          d1 = n0 = new BigNumber2(ONE);
          s = coeffToString(xc);
          e = d.e = s.length - x.e - 1;
          d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber2(s);
          n0.c[0] = 0;
          for (; ; ) {
            q2 = div(n, d, 0, 1);
            d2 = d0.plus(q2.times(d1));
            if (d2.comparedTo(md) == 1) break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q2.times(d2 = n1));
            n0 = d2;
            d = n.minus(q2.times(d2 = d));
            n = d2;
          }
          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          e = e * 2;
          r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
            div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
          ) < 1 ? [n1, d1] : [n0, d0];
          MAX_EXP = exp;
          return r;
        };
        P2.toNumber = function() {
          return +valueOf(this);
        };
        P2.toPrecision = function(sd, rm) {
          if (sd != null) intCheck(sd, 1, MAX);
          return format(this, sd, rm, 2);
        };
        P2.toString = function(b2) {
          var str, n = this, s = n.s, e = n.e;
          if (e === null) {
            if (s) {
              str = "Infinity";
              if (s < 0) str = "-" + str;
            } else {
              str = "NaN";
            }
          } else {
            if (b2 == null) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
            } else if (b2 === 10 && alphabetHasNormalDecimalDigits) {
              n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
              str = toFixedPoint(coeffToString(n.c), n.e, "0");
            } else {
              intCheck(b2, 2, ALPHABET.length, "Base");
              str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b2, s, true);
            }
            if (s < 0 && n.c[0]) str = "-" + str;
          }
          return str;
        };
        P2.valueOf = P2.toJSON = function() {
          return valueOf(this);
        };
        P2._isBigNumber = true;
        if (configObject != null) BigNumber2.set(configObject);
        return BigNumber2;
      }
      function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
      }
      function coeffToString(a) {
        var s, z2, i = 1, j3 = a.length, r = a[0] + "";
        for (; i < j3; ) {
          s = a[i++] + "";
          z2 = LOG_BASE - s.length;
          for (; z2--; s = "0" + s) ;
          r += s;
        }
        for (j3 = r.length; r.charCodeAt(--j3) === 48; ) ;
        return r.slice(0, j3 + 1 || 1);
      }
      function compare(x, y) {
        var a, b2, xc = x.c, yc = y.c, i = x.s, j3 = y.s, k2 = x.e, l17 = y.e;
        if (!i || !j3) return null;
        a = xc && !xc[0];
        b2 = yc && !yc[0];
        if (a || b2) return a ? b2 ? 0 : -j3 : i;
        if (i != j3) return i;
        a = i < 0;
        b2 = k2 == l17;
        if (!xc || !yc) return b2 ? 0 : !xc ^ a ? 1 : -1;
        if (!b2) return k2 > l17 ^ a ? 1 : -1;
        j3 = (k2 = xc.length) < (l17 = yc.length) ? k2 : l17;
        for (i = 0; i < j3; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        return k2 == l17 ? 0 : k2 > l17 ^ a ? 1 : -1;
      }
      function intCheck(n, min2, max3, name) {
        if (n < min2 || n > max3 || n !== mathfloor(n)) {
          throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min2 || n > max3 ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
        }
      }
      function isOdd(n) {
        var k2 = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k2 && n.c[k2] % 2 != 0;
      }
      function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
      }
      function toFixedPoint(str, e, z2) {
        var len, zs;
        if (e < 0) {
          for (zs = z2 + "."; ++e; zs += z2) ;
          str = zs + str;
        } else {
          len = str.length;
          if (++e > len) {
            for (zs = z2, e -= len; --e; zs += z2) ;
            str += zs;
          } else if (e < len) {
            str = str.slice(0, e) + "." + str.slice(e);
          }
        }
        return str;
      }
      BigNumber = clone();
      BigNumber["default"] = BigNumber.BigNumber = BigNumber;
      if (typeof define == "function" && define.amd) {
        define(function() {
          return BigNumber;
        });
      } else if (typeof module2 != "undefined" && module2.exports) {
        module2.exports = BigNumber;
      } else {
        if (!globalObject) {
          globalObject = typeof self != "undefined" && self ? self : window;
        }
        globalObject.BigNumber = BigNumber;
      }
    })(exports);
  }
});

// node_modules/ripple-binary-codec/dist/types/hash-192.js
var require_hash_192 = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/hash-192.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash192 = void 0;
    var hash_1 = require_hash();
    var Hash192 = class _Hash192 extends hash_1.Hash {
      constructor(bytes3) {
        if (bytes3 && bytes3.byteLength === 0) {
          bytes3 = _Hash192.ZERO_192.bytes;
        }
        super(bytes3 !== null && bytes3 !== void 0 ? bytes3 : _Hash192.ZERO_192.bytes);
      }
    };
    exports.Hash192 = Hash192;
    Hash192.width = 24;
    Hash192.ZERO_192 = new Hash192(new Uint8Array(Hash192.width));
  }
});

// node_modules/ripple-binary-codec/dist/types/amount.js
var require_amount = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/amount.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Amount = void 0;
    var binary_parser_1 = require_binary_parser();
    var account_id_1 = require_account_id();
    var currency_1 = require_currency();
    var serialized_type_1 = require_serialized_type();
    var bignumber_js_1 = __importDefault(require_bignumber());
    var utils_1 = require_browser2();
    var utils_2 = require_utils3();
    var hash_192_1 = require_hash_192();
    var MIN_IOU_EXPONENT = -96;
    var MAX_IOU_EXPONENT = 80;
    var MAX_IOU_PRECISION = 16;
    var MAX_DROPS = new bignumber_js_1.default("1e17");
    var MIN_XRP = new bignumber_js_1.default("1e-6");
    var mask = BigInt(4294967295);
    var mptMask = BigInt(9223372036854776e3);
    bignumber_js_1.default.config({
      EXPONENTIAL_AT: [
        MIN_IOU_EXPONENT - MAX_IOU_PRECISION,
        MAX_IOU_EXPONENT + MAX_IOU_PRECISION
      ]
    });
    function isAmountObjectIOU(arg) {
      const keys2 = Object.keys(arg).sort();
      return keys2.length === 3 && keys2[0] === "currency" && keys2[1] === "issuer" && keys2[2] === "value";
    }
    function isAmountObjectMPT(arg) {
      const keys2 = Object.keys(arg).sort();
      return keys2.length === 2 && keys2[0] === "mpt_issuance_id" && keys2[1] === "value";
    }
    var Amount = class _Amount extends serialized_type_1.SerializedType {
      constructor(bytes3) {
        super(bytes3 !== null && bytes3 !== void 0 ? bytes3 : _Amount.defaultAmount.bytes);
      }
      /**
       * Construct an amount from an IOU, MPT or string amount
       *
       * @param value An Amount, object representing an IOU, or a string
       *     representing an integer amount
       * @returns An Amount object
       */
      static from(value) {
        if (value instanceof _Amount) {
          return value;
        }
        let amount = new Uint8Array(8);
        if (typeof value === "string") {
          _Amount.assertXrpIsValid(value);
          const number2 = BigInt(value);
          const intBuf = [new Uint8Array(4), new Uint8Array(4)];
          (0, utils_2.writeUInt32BE)(intBuf[0], Number(number2 >> BigInt(32)), 0);
          (0, utils_2.writeUInt32BE)(intBuf[1], Number(number2 & BigInt(mask)), 0);
          amount = (0, utils_1.concat)(intBuf);
          amount[0] |= 64;
          return new _Amount(amount);
        }
        if (isAmountObjectIOU(value)) {
          const number2 = new bignumber_js_1.default(value.value);
          _Amount.assertIouIsValid(number2);
          if (number2.isZero()) {
            amount[0] |= 128;
          } else {
            const integerNumberString = number2.times(`1e${-((number2.e || 0) - 15)}`).abs().toString();
            const num = BigInt(integerNumberString);
            const intBuf = [new Uint8Array(4), new Uint8Array(4)];
            (0, utils_2.writeUInt32BE)(intBuf[0], Number(num >> BigInt(32)), 0);
            (0, utils_2.writeUInt32BE)(intBuf[1], Number(num & BigInt(mask)), 0);
            amount = (0, utils_1.concat)(intBuf);
            amount[0] |= 128;
            if (number2.gt(new bignumber_js_1.default(0))) {
              amount[0] |= 64;
            }
            const exponent = (number2.e || 0) - 15;
            const exponentByte = 97 + exponent;
            amount[0] |= exponentByte >>> 2;
            amount[1] |= (exponentByte & 3) << 6;
          }
          const currency = currency_1.Currency.from(value.currency).toBytes();
          const issuer = account_id_1.AccountID.from(value.issuer).toBytes();
          return new _Amount((0, utils_1.concat)([amount, currency, issuer]));
        }
        if (isAmountObjectMPT(value)) {
          _Amount.assertMptIsValid(value.value);
          let leadingByte = new Uint8Array(1);
          leadingByte[0] |= 96;
          const num = BigInt(value.value);
          const intBuf = [new Uint8Array(4), new Uint8Array(4)];
          (0, utils_2.writeUInt32BE)(intBuf[0], Number(num >> BigInt(32)), 0);
          (0, utils_2.writeUInt32BE)(intBuf[1], Number(num & BigInt(mask)), 0);
          amount = (0, utils_1.concat)(intBuf);
          const mptIssuanceID = hash_192_1.Hash192.from(value.mpt_issuance_id).toBytes();
          return new _Amount((0, utils_1.concat)([leadingByte, amount, mptIssuanceID]));
        }
        throw new Error("Invalid type to construct an Amount");
      }
      /**
       * Read an amount from a BinaryParser
       *
       * @param parser BinaryParser to read the Amount from
       * @returns An Amount object
       */
      static fromParser(parser) {
        const isIOU = parser.peek() & 128;
        if (isIOU)
          return new _Amount(parser.read(48));
        const isMPT = parser.peek() & 32;
        const numBytes = isMPT ? 33 : 8;
        return new _Amount(parser.read(numBytes));
      }
      /**
       * Get the JSON representation of this Amount
       *
       * @returns the JSON interpretation of this.bytes
       */
      toJSON() {
        if (this.isNative()) {
          const bytes3 = this.bytes;
          const isPositive = bytes3[0] & 64;
          const sign2 = isPositive ? "" : "-";
          bytes3[0] &= 63;
          const msb = BigInt((0, utils_2.readUInt32BE)(bytes3.slice(0, 4), 0));
          const lsb = BigInt((0, utils_2.readUInt32BE)(bytes3.slice(4), 0));
          const num = msb << BigInt(32) | lsb;
          return `${sign2}${num.toString()}`;
        }
        if (this.isIOU()) {
          const parser = new binary_parser_1.BinaryParser(this.toString());
          const mantissa = parser.read(8);
          const currency = currency_1.Currency.fromParser(parser);
          const issuer = account_id_1.AccountID.fromParser(parser);
          const b1 = mantissa[0];
          const b2 = mantissa[1];
          const isPositive = b1 & 64;
          const sign2 = isPositive ? "" : "-";
          const exponent = ((b1 & 63) << 2) + ((b2 & 255) >> 6) - 97;
          mantissa[0] = 0;
          mantissa[1] &= 63;
          const value = new bignumber_js_1.default(`${sign2}0x${(0, utils_1.bytesToHex)(mantissa)}`).times(`1e${exponent}`);
          _Amount.assertIouIsValid(value);
          return {
            value: value.toString(),
            currency: currency.toJSON(),
            issuer: issuer.toJSON()
          };
        }
        if (this.isMPT()) {
          const parser = new binary_parser_1.BinaryParser(this.toString());
          const leadingByte = parser.read(1);
          const amount = parser.read(8);
          const mptID = hash_192_1.Hash192.fromParser(parser);
          const isPositive = leadingByte[0] & 64;
          const sign2 = isPositive ? "" : "-";
          const msb = BigInt((0, utils_2.readUInt32BE)(amount.slice(0, 4), 0));
          const lsb = BigInt((0, utils_2.readUInt32BE)(amount.slice(4), 0));
          const num = msb << BigInt(32) | lsb;
          return {
            value: `${sign2}${num.toString()}`,
            mpt_issuance_id: mptID.toString()
          };
        }
        throw new Error("Invalid amount to construct JSON");
      }
      /**
       * Validate XRP amount
       *
       * @param amount String representing XRP amount
       * @returns void, but will throw if invalid amount
       */
      static assertXrpIsValid(amount) {
        if (amount.indexOf(".") !== -1) {
          throw new Error(`${amount.toString()} is an illegal amount`);
        }
        const decimal = new bignumber_js_1.default(amount);
        if (!decimal.isZero()) {
          if (decimal.lt(MIN_XRP) || decimal.gt(MAX_DROPS)) {
            throw new Error(`${amount.toString()} is an illegal amount`);
          }
        }
      }
      /**
       * Validate IOU.value amount
       *
       * @param decimal BigNumber object representing IOU.value
       * @returns void, but will throw if invalid amount
       */
      static assertIouIsValid(decimal) {
        if (!decimal.isZero()) {
          const p = decimal.precision();
          const e = (decimal.e || 0) - 15;
          if (p > MAX_IOU_PRECISION || e > MAX_IOU_EXPONENT || e < MIN_IOU_EXPONENT) {
            throw new Error("Decimal precision out of range");
          }
          this.verifyNoDecimal(decimal);
        }
      }
      /**
       * Validate MPT.value amount
       *
       * @param decimal BigNumber object representing MPT.value
       * @returns void, but will throw if invalid amount
       */
      static assertMptIsValid(amount) {
        if (amount.indexOf(".") !== -1) {
          throw new Error(`${amount.toString()} is an illegal amount`);
        }
        const decimal = new bignumber_js_1.default(amount);
        if (!decimal.isZero()) {
          if (decimal < (0, bignumber_js_1.default)(0)) {
            throw new Error(`${amount.toString()} is an illegal amount`);
          }
          if (Number(BigInt(amount) & BigInt(mptMask)) != 0) {
            throw new Error(`${amount.toString()} is an illegal amount`);
          }
        }
      }
      /**
       * Ensure that the value after being multiplied by the exponent does not
       * contain a decimal.
       *
       * @param decimal a Decimal object
       * @returns a string of the object without a decimal
       */
      static verifyNoDecimal(decimal) {
        const integerNumberString = decimal.times(`1e${-((decimal.e || 0) - 15)}`).abs().toString();
        if (integerNumberString.indexOf(".") !== -1) {
          throw new Error("Decimal place found in integerNumberString");
        }
      }
      /**
       * Test if this amount is in units of Native Currency(XRP)
       *
       * @returns true if Native (XRP)
       */
      isNative() {
        return (this.bytes[0] & 128) === 0 && (this.bytes[0] & 32) === 0;
      }
      /**
       * Test if this amount is in units of MPT
       *
       * @returns true if MPT
       */
      isMPT() {
        return (this.bytes[0] & 128) === 0 && (this.bytes[0] & 32) !== 0;
      }
      /**
       * Test if this amount is in units of IOU
       *
       * @returns true if IOU
       */
      isIOU() {
        return (this.bytes[0] & 128) !== 0;
      }
    };
    exports.Amount = Amount;
    Amount.defaultAmount = new Amount((0, utils_1.hexToBytes)("4000000000000000"));
  }
});

// node_modules/ripple-binary-codec/dist/types/blob.js
var require_blob = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/blob.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Blob = void 0;
    var serialized_type_1 = require_serialized_type();
    var utils_1 = require_browser2();
    var Blob2 = class _Blob extends serialized_type_1.SerializedType {
      constructor(bytes3) {
        super(bytes3);
      }
      /**
       * Defines how to read a Blob from a BinaryParser
       *
       * @param parser The binary parser to read the Blob from
       * @param hint The length of the blob, computed by readVariableLengthLength() and passed in
       * @returns A Blob object
       */
      static fromParser(parser, hint) {
        return new _Blob(parser.read(hint));
      }
      /**
       * Create a Blob object from a hex-string
       *
       * @param value existing Blob object or a hex-string
       * @returns A Blob object
       */
      static from(value) {
        if (value instanceof _Blob) {
          return value;
        }
        if (typeof value === "string") {
          if (!/^[A-F0-9]*$/iu.test(value)) {
            throw new Error("Cannot construct Blob from a non-hex string");
          }
          return new _Blob((0, utils_1.hexToBytes)(value));
        }
        throw new Error("Cannot construct Blob from value given");
      }
    };
    exports.Blob = Blob2;
  }
});

// node_modules/ripple-binary-codec/dist/types/hash-128.js
var require_hash_128 = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/hash-128.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash128 = void 0;
    var hash_1 = require_hash();
    var utils_1 = require_browser2();
    var Hash128 = class _Hash128 extends hash_1.Hash {
      constructor(bytes3) {
        if (bytes3 && bytes3.byteLength === 0) {
          bytes3 = _Hash128.ZERO_128.bytes;
        }
        super(bytes3 !== null && bytes3 !== void 0 ? bytes3 : _Hash128.ZERO_128.bytes);
      }
      /**
       * Get the hex representation of a hash-128 bytes, allowing unset
       *
       * @returns hex String of this.bytes
       */
      toHex() {
        const hex2 = (0, utils_1.bytesToHex)(this.toBytes());
        if (/^0+$/.exec(hex2)) {
          return "";
        }
        return hex2;
      }
    };
    exports.Hash128 = Hash128;
    Hash128.width = 16;
    Hash128.ZERO_128 = new Hash128(new Uint8Array(Hash128.width));
  }
});

// node_modules/ripple-binary-codec/dist/types/hash-256.js
var require_hash_256 = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/hash-256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash256 = void 0;
    var hash_1 = require_hash();
    var Hash256 = class _Hash256 extends hash_1.Hash {
      constructor(bytes3) {
        super(bytes3 !== null && bytes3 !== void 0 ? bytes3 : _Hash256.ZERO_256.bytes);
      }
    };
    exports.Hash256 = Hash256;
    Hash256.width = 32;
    Hash256.ZERO_256 = new Hash256(new Uint8Array(Hash256.width));
  }
});

// node_modules/ripple-binary-codec/dist/types/issue.js
var require_issue = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/issue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Issue = void 0;
    var utils_1 = require_browser2();
    var binary_parser_1 = require_binary_parser();
    var account_id_1 = require_account_id();
    var currency_1 = require_currency();
    var serialized_type_1 = require_serialized_type();
    var hash_192_1 = require_hash_192();
    function isIssueObject(arg) {
      const keys2 = Object.keys(arg).sort();
      const isXRP = keys2.length === 1 && keys2[0] === "currency";
      const isIOU = keys2.length === 2 && keys2[0] === "currency" && keys2[1] === "issuer";
      const isMPT = keys2.length === 1 && keys2[0] === "mpt_issuance_id";
      return isXRP || isIOU || isMPT;
    }
    var Issue = class _Issue extends serialized_type_1.SerializedType {
      constructor(bytes3) {
        super(bytes3 !== null && bytes3 !== void 0 ? bytes3 : _Issue.ZERO_ISSUED_CURRENCY.bytes);
      }
      /**
       * Construct an amount from an IOU or string amount
       *
       * @param value An Amount, object representing an IOU, MPTAmount, or a string
       *     representing an integer amount
       * @returns An Issue object
       */
      static from(value) {
        if (value instanceof _Issue) {
          return value;
        }
        if (isIssueObject(value)) {
          if (value.currency) {
            const currency = currency_1.Currency.from(value.currency.toString()).toBytes();
            if (value.issuer) {
              const issuer = account_id_1.AccountID.from(value.issuer.toString()).toBytes();
              return new _Issue((0, utils_1.concat)([currency, issuer]));
            }
            return new _Issue(currency);
          }
          if (value.mpt_issuance_id) {
            const mptIssuanceIdBytes = hash_192_1.Hash192.from(value.mpt_issuance_id.toString()).toBytes();
            return new _Issue(mptIssuanceIdBytes);
          }
        }
        throw new Error("Invalid type to construct an Amount");
      }
      /**
       * Read an amount from a BinaryParser
       *
       * @param parser BinaryParser to read the Amount from
       * @param hint The number of bytes to consume from the parser.
       * For an MPT amount, pass 24 (the fixed length for Hash192).
       *
       * @returns An Issue object
       */
      static fromParser(parser, hint) {
        if (hint === hash_192_1.Hash192.width) {
          const mptBytes = parser.read(hash_192_1.Hash192.width);
          return new _Issue(mptBytes);
        }
        const currency = parser.read(20);
        if (new currency_1.Currency(currency).toJSON() === "XRP") {
          return new _Issue(currency);
        }
        const currencyAndIssuer = [currency, parser.read(20)];
        return new _Issue((0, utils_1.concat)(currencyAndIssuer));
      }
      /**
       * Get the JSON representation of this Amount
       *
       * @returns the JSON interpretation of this.bytes
       */
      toJSON() {
        if (this.toBytes().length === hash_192_1.Hash192.width) {
          return {
            mpt_issuance_id: this.toHex().toUpperCase()
          };
        }
        const parser = new binary_parser_1.BinaryParser(this.toString());
        const currency = currency_1.Currency.fromParser(parser);
        if (currency.toJSON() === "XRP") {
          return { currency: currency.toJSON() };
        }
        const issuer = account_id_1.AccountID.fromParser(parser);
        return {
          currency: currency.toJSON(),
          issuer: issuer.toJSON()
        };
      }
    };
    exports.Issue = Issue;
    Issue.ZERO_ISSUED_CURRENCY = new Issue(new Uint8Array(20));
  }
});

// node_modules/ripple-binary-codec/dist/types/st-number.js
var require_st_number = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/st-number.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STNumber = void 0;
    var serialized_type_1 = require_serialized_type();
    var utils_1 = require_utils3();
    var MIN_MANTISSA = BigInt("1000000000000000");
    var MAX_MANTISSA = BigInt("9999999999999999");
    var MIN_EXPONENT = -32768;
    var MAX_EXPONENT = 32768;
    var DEFAULT_VALUE_EXPONENT = -2147483648;
    function extractNumberPartsFromString(val) {
      const regex = /^([-+]?)([0-9]+)(?:\.([0-9]+))?(?:[eE]([+-]?[0-9]+))?$/;
      const match = regex.exec(val);
      if (!match)
        throw new Error(`Unable to parse number from string: ${val}`);
      const [, sign2, intPart, fracPart, expPart] = match;
      const cleanIntPart = intPart.replace(/^0+(?=\d)/, "") || "0";
      let mantissaStr = cleanIntPart;
      let exponent = 0;
      if (fracPart) {
        mantissaStr += fracPart;
        exponent -= fracPart.length;
      }
      if (expPart)
        exponent += parseInt(expPart, 10);
      let mantissa = BigInt(mantissaStr);
      if (sign2 === "-")
        mantissa = -mantissa;
      const isNegative = mantissa < BigInt(0);
      return { mantissa, exponent, isNegative };
    }
    function normalize2(mantissa, exponent) {
      let m = mantissa < BigInt(0) ? -mantissa : mantissa;
      const isNegative = mantissa < BigInt(0);
      while (m !== BigInt(0) && m < MIN_MANTISSA && exponent > MIN_EXPONENT) {
        exponent -= 1;
        m *= BigInt(10);
      }
      while (m > MAX_MANTISSA) {
        if (exponent >= MAX_EXPONENT)
          throw new Error("Mantissa and exponent are too large");
        exponent += 1;
        m /= BigInt(10);
      }
      if (isNegative)
        m = -m;
      return { mantissa: m, exponent };
    }
    var STNumber = class _STNumber extends serialized_type_1.SerializedType {
      /**
       * Construct a STNumber from 12 bytes (8 for mantissa, 4 for exponent).
       * @param bytes - 12-byte Uint8Array
       * @throws Error if input is not a Uint8Array of length 12.
       */
      constructor(bytes3) {
        const used = bytes3 !== null && bytes3 !== void 0 ? bytes3 : _STNumber.defaultBytes;
        if (!(used instanceof Uint8Array) || used.length !== 12) {
          throw new Error(`STNumber must be constructed from a 12-byte Uint8Array, got ${used === null || used === void 0 ? void 0 : used.length}`);
        }
        super(used);
      }
      /**
       * Construct from a number string (or another STNumber).
       *
       * @param value - A string, or STNumber instance.
       * @returns STNumber instance.
       * @throws Error if not a string or STNumber.
       */
      static from(value) {
        if (value instanceof _STNumber) {
          return value;
        }
        if (typeof value === "string") {
          return _STNumber.fromValue(value);
        }
        throw new Error("STNumber.from: Only string or STNumber instance is supported");
      }
      /**
       * Construct from a number string (integer, decimal, or scientific notation).
       * Handles normalization to XRPL Number constraints.
       *
       * @param val - The number as a string (e.g. '1.23', '-123e5').
       * @returns STNumber instance
       * @throws Error if val is not a valid number string.
       */
      static fromValue(val) {
        const { mantissa, exponent, isNegative } = extractNumberPartsFromString(val);
        let normalizedMantissa;
        let normalizedExponent;
        if (mantissa === BigInt(0) && exponent === 0 && !isNegative) {
          normalizedMantissa = BigInt(0);
          normalizedExponent = DEFAULT_VALUE_EXPONENT;
        } else {
          ;
          ({ mantissa: normalizedMantissa, exponent: normalizedExponent } = normalize2(mantissa, exponent));
        }
        const bytes3 = new Uint8Array(12);
        (0, utils_1.writeInt64BE)(bytes3, normalizedMantissa, 0);
        (0, utils_1.writeInt32BE)(bytes3, normalizedExponent, 8);
        return new _STNumber(bytes3);
      }
      /**
       * Read a STNumber from a BinaryParser stream (12 bytes).
       * @param parser - BinaryParser positioned at the start of a number
       * @returns STNumber instance
       */
      static fromParser(parser) {
        return new _STNumber(parser.read(12));
      }
      /**
       * Convert this STNumber to a normalized string representation.
       * The output is decimal or scientific notation, depending on exponent range.
       * Follows XRPL convention: zero is "0", other values are normalized to a canonical string.
       *
       * @returns String representation of the value
       */
      // eslint-disable-next-line complexity -- required
      toJSON() {
        const b2 = this.bytes;
        if (!b2 || b2.length !== 12)
          throw new Error("STNumber internal bytes not set or wrong length");
        const mantissa = (0, utils_1.readInt64BE)(b2, 0);
        const exponent = (0, utils_1.readInt32BE)(b2, 8);
        if (mantissa === BigInt(0) && exponent === DEFAULT_VALUE_EXPONENT) {
          return "0";
        }
        if (exponent === 0)
          return mantissa.toString();
        if (exponent < -25 || exponent > -5) {
          return `${mantissa}e${exponent}`;
        }
        const isNegative = mantissa < BigInt(0);
        const mantissaAbs = mantissa < BigInt(0) ? -mantissa : mantissa;
        const padPrefix = 27;
        const padSuffix = 23;
        const mantissaStr = mantissaAbs.toString();
        const rawValue = "0".repeat(padPrefix) + mantissaStr + "0".repeat(padSuffix);
        const OFFSET = exponent + 43;
        const integerPart = rawValue.slice(0, OFFSET).replace(/^0+/, "") || "0";
        const fractionPart = rawValue.slice(OFFSET).replace(/0+$/, "");
        return `${isNegative ? "-" : ""}${integerPart}${fractionPart ? "." + fractionPart : ""}`;
      }
    };
    exports.STNumber = STNumber;
    STNumber.defaultBytes = new Uint8Array(12);
  }
});

// node_modules/ripple-binary-codec/dist/types/path-set.js
var require_path_set = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/path-set.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PathSet = void 0;
    var account_id_1 = require_account_id();
    var currency_1 = require_currency();
    var binary_parser_1 = require_binary_parser();
    var serialized_type_1 = require_serialized_type();
    var utils_1 = require_browser2();
    var PATHSET_END_BYTE = 0;
    var PATH_SEPARATOR_BYTE = 255;
    var TYPE_ACCOUNT = 1;
    var TYPE_CURRENCY = 16;
    var TYPE_ISSUER = 32;
    function isHopObject(arg) {
      return arg.issuer !== void 0 || arg.account !== void 0 || arg.currency !== void 0;
    }
    function isPathSet(arg) {
      return Array.isArray(arg) && arg.length === 0 || Array.isArray(arg) && Array.isArray(arg[0]) && arg[0].length === 0 || Array.isArray(arg) && Array.isArray(arg[0]) && isHopObject(arg[0][0]);
    }
    var Hop = class _Hop extends serialized_type_1.SerializedType {
      /**
       * Create a Hop from a HopObject
       *
       * @param value Either a hop or HopObject to create a hop with
       * @returns a Hop
       */
      static from(value) {
        if (value instanceof _Hop) {
          return value;
        }
        const bytes3 = [Uint8Array.from([0])];
        if (value.account) {
          bytes3.push(account_id_1.AccountID.from(value.account).toBytes());
          bytes3[0][0] |= TYPE_ACCOUNT;
        }
        if (value.currency) {
          bytes3.push(currency_1.Currency.from(value.currency).toBytes());
          bytes3[0][0] |= TYPE_CURRENCY;
        }
        if (value.issuer) {
          bytes3.push(account_id_1.AccountID.from(value.issuer).toBytes());
          bytes3[0][0] |= TYPE_ISSUER;
        }
        return new _Hop((0, utils_1.concat)(bytes3));
      }
      /**
       * Construct a Hop from a BinaryParser
       *
       * @param parser BinaryParser to read the Hop from
       * @returns a Hop
       */
      static fromParser(parser) {
        const type = parser.readUInt8();
        const bytes3 = [Uint8Array.from([type])];
        if (type & TYPE_ACCOUNT) {
          bytes3.push(parser.read(account_id_1.AccountID.width));
        }
        if (type & TYPE_CURRENCY) {
          bytes3.push(parser.read(currency_1.Currency.width));
        }
        if (type & TYPE_ISSUER) {
          bytes3.push(parser.read(account_id_1.AccountID.width));
        }
        return new _Hop((0, utils_1.concat)(bytes3));
      }
      /**
       * Get the JSON interpretation of this hop
       *
       * @returns a HopObject, an JS object with optional account, issuer, and currency
       */
      toJSON() {
        const hopParser = new binary_parser_1.BinaryParser((0, utils_1.bytesToHex)(this.bytes));
        const type = hopParser.readUInt8();
        let account3, currency, issuer;
        if (type & TYPE_ACCOUNT) {
          account3 = account_id_1.AccountID.fromParser(hopParser).toJSON();
        }
        if (type & TYPE_CURRENCY) {
          currency = currency_1.Currency.fromParser(hopParser).toJSON();
        }
        if (type & TYPE_ISSUER) {
          issuer = account_id_1.AccountID.fromParser(hopParser).toJSON();
        }
        const result = {};
        if (account3) {
          result.account = account3;
        }
        if (issuer) {
          result.issuer = issuer;
        }
        if (currency) {
          result.currency = currency;
        }
        return result;
      }
      /**
       * get a number representing the type of this hop
       *
       * @returns a number to be bitwise and-ed with TYPE_ constants to describe the types in the hop
       */
      type() {
        return this.bytes[0];
      }
    };
    var Path = class _Path extends serialized_type_1.SerializedType {
      /**
       * construct a Path from an array of Hops
       *
       * @param value Path or array of HopObjects to construct a Path
       * @returns the Path
       */
      static from(value) {
        if (value instanceof _Path) {
          return value;
        }
        const bytes3 = [];
        value.forEach((hop) => {
          bytes3.push(Hop.from(hop).toBytes());
        });
        return new _Path((0, utils_1.concat)(bytes3));
      }
      /**
       * Read a Path from a BinaryParser
       *
       * @param parser BinaryParser to read Path from
       * @returns the Path represented by the bytes read from the BinaryParser
       */
      static fromParser(parser) {
        const bytes3 = [];
        while (!parser.end()) {
          bytes3.push(Hop.fromParser(parser).toBytes());
          if (parser.peek() === PATHSET_END_BYTE || parser.peek() === PATH_SEPARATOR_BYTE) {
            break;
          }
        }
        return new _Path((0, utils_1.concat)(bytes3));
      }
      /**
       * Get the JSON representation of this Path
       *
       * @returns an Array of HopObject constructed from this.bytes
       */
      toJSON() {
        const json = [];
        const pathParser = new binary_parser_1.BinaryParser(this.toString());
        while (!pathParser.end()) {
          json.push(Hop.fromParser(pathParser).toJSON());
        }
        return json;
      }
    };
    var PathSet = class _PathSet extends serialized_type_1.SerializedType {
      /**
       * Construct a PathSet from an Array of Arrays representing paths
       *
       * @param value A PathSet or Array of Array of HopObjects
       * @returns the PathSet constructed from value
       */
      static from(value) {
        if (value instanceof _PathSet) {
          return value;
        }
        if (isPathSet(value)) {
          const bytes3 = [];
          value.forEach((path) => {
            bytes3.push(Path.from(path).toBytes());
            bytes3.push(Uint8Array.from([PATH_SEPARATOR_BYTE]));
          });
          bytes3[bytes3.length - 1] = Uint8Array.from([PATHSET_END_BYTE]);
          return new _PathSet((0, utils_1.concat)(bytes3));
        }
        throw new Error("Cannot construct PathSet from given value");
      }
      /**
       * Construct a PathSet from a BinaryParser
       *
       * @param parser A BinaryParser to read PathSet from
       * @returns the PathSet read from parser
       */
      static fromParser(parser) {
        const bytes3 = [];
        while (!parser.end()) {
          bytes3.push(Path.fromParser(parser).toBytes());
          bytes3.push(parser.read(1));
          if (bytes3[bytes3.length - 1][0] == PATHSET_END_BYTE) {
            break;
          }
        }
        return new _PathSet((0, utils_1.concat)(bytes3));
      }
      /**
       * Get the JSON representation of this PathSet
       *
       * @returns an Array of Array of HopObjects, representing this PathSet
       */
      toJSON() {
        const json = [];
        const pathParser = new binary_parser_1.BinaryParser(this.toString());
        while (!pathParser.end()) {
          json.push(Path.fromParser(pathParser).toJSON());
          pathParser.skip(1);
        }
        return json;
      }
    };
    exports.PathSet = PathSet;
  }
});

// node_modules/ripple-binary-codec/dist/types/uint.js
var require_uint = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/uint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UInt = void 0;
    var serialized_type_1 = require_serialized_type();
    function compare(n1, n2) {
      return n1 < n2 ? -1 : n1 == n2 ? 0 : 1;
    }
    var UInt2 = class extends serialized_type_1.Comparable {
      constructor(bytes3) {
        super(bytes3);
      }
      /**
       * Overload of compareTo for Comparable
       *
       * @param other other UInt to compare this to
       * @returns -1, 0, or 1 depending on how the objects relate to each other
       */
      compareTo(other) {
        return compare(this.valueOf(), other.valueOf());
      }
      /**
       * Convert a UInt object to JSON
       *
       * @returns number or string represented by this.bytes
       */
      toJSON() {
        const val = this.valueOf();
        return typeof val === "number" ? val : val.toString();
      }
      static checkUintRange(val, min2, max3) {
        if (val < min2 || val > max3) {
          throw new Error(`Invalid ${this.constructor.name}: ${val} must be >= ${min2} and <= ${max3}`);
        }
      }
    };
    exports.UInt = UInt2;
  }
});

// node_modules/ripple-binary-codec/dist/types/uint-64.js
var require_uint_64 = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/uint-64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UInt64 = void 0;
    var uint_1 = require_uint();
    var utils_1 = require_browser2();
    var utils_2 = require_utils3();
    var enums_1 = require_enums();
    var HEX_REGEX = /^[a-fA-F0-9]{1,16}$/;
    var BASE10_REGEX = /^[0-9]{1,20}$/;
    var mask = BigInt(4294967295);
    var BASE10_AMOUNT_FIELDS = /* @__PURE__ */ new Set([
      "MaximumAmount",
      "OutstandingAmount",
      "MPTAmount",
      "LockedAmount"
    ]);
    function isBase10(fieldName) {
      return BASE10_AMOUNT_FIELDS.has(fieldName);
    }
    var UInt64 = class _UInt64 extends uint_1.UInt {
      constructor(bytes3) {
        super(bytes3 !== null && bytes3 !== void 0 ? bytes3 : _UInt64.defaultUInt64.bytes);
      }
      static fromParser(parser) {
        return new _UInt64(parser.read(_UInt64.width));
      }
      /**
       * Construct a UInt64 object
       *
       * @param val A UInt64, hex-string, bigInt, or number
       * @returns A UInt64 object
       */
      static from(val, fieldName = "") {
        if (val instanceof _UInt64) {
          return val;
        }
        let buf = new Uint8Array(_UInt64.width);
        if (typeof val === "number") {
          if (val < 0) {
            throw new Error("value must be an unsigned integer");
          }
          const number2 = BigInt(val);
          const intBuf = [new Uint8Array(4), new Uint8Array(4)];
          (0, utils_2.writeUInt32BE)(intBuf[0], Number(number2 >> BigInt(32)), 0);
          (0, utils_2.writeUInt32BE)(intBuf[1], Number(number2 & BigInt(mask)), 0);
          return new _UInt64((0, utils_1.concat)(intBuf));
        }
        if (typeof val === "string") {
          if (isBase10(fieldName)) {
            if (!BASE10_REGEX.test(val)) {
              throw new Error(`${fieldName} ${val} is not a valid base 10 string`);
            }
            val = BigInt(val).toString(16);
          }
          if (typeof val === "string" && !HEX_REGEX.test(val)) {
            throw new Error(`${val} is not a valid hex-string`);
          }
          const strBuf = val.padStart(16, "0");
          buf = (0, utils_1.hexToBytes)(strBuf);
          return new _UInt64(buf);
        }
        if (typeof val === "bigint") {
          const intBuf = [new Uint8Array(4), new Uint8Array(4)];
          (0, utils_2.writeUInt32BE)(intBuf[0], Number(Number(val >> BigInt(32))), 0);
          (0, utils_2.writeUInt32BE)(intBuf[1], Number(val & BigInt(mask)), 0);
          return new _UInt64((0, utils_1.concat)(intBuf));
        }
        throw new Error("Cannot construct UInt64 from given value");
      }
      /**
       * The JSON representation of a UInt64 object
       *
       * @returns a hex-string
       */
      toJSON(_definitions = enums_1.DEFAULT_DEFINITIONS, fieldName = "") {
        const hexString = (0, utils_1.bytesToHex)(this.bytes);
        if (isBase10(fieldName)) {
          return BigInt("0x" + hexString).toString(10);
        }
        return hexString;
      }
      /**
       * Get the value of the UInt64
       *
       * @returns the number represented buy this.bytes
       */
      valueOf() {
        const msb = BigInt((0, utils_2.readUInt32BE)(this.bytes.slice(0, 4), 0));
        const lsb = BigInt((0, utils_2.readUInt32BE)(this.bytes.slice(4), 0));
        return msb << BigInt(32) | lsb;
      }
      /**
       * Get the bytes representation of the UInt64 object
       *
       * @returns 8 bytes representing the UInt64
       */
      toBytes() {
        return this.bytes;
      }
    };
    exports.UInt64 = UInt64;
    UInt64.width = 64 / 8;
    UInt64.defaultUInt64 = new UInt64(new Uint8Array(UInt64.width));
  }
});

// node_modules/ripple-binary-codec/dist/types/st-object.js
var require_st_object = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/st-object.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STObject = void 0;
    var enums_1 = require_enums();
    var serialized_type_1 = require_serialized_type();
    var ripple_address_codec_1 = require_dist();
    var binary_parser_1 = require_binary_parser();
    var binary_serializer_1 = require_binary_serializer();
    var st_array_1 = require_st_array();
    var uint_64_1 = require_uint_64();
    var OBJECT_END_MARKER_BYTE = Uint8Array.from([225]);
    var OBJECT_END_MARKER = "ObjectEndMarker";
    var ST_OBJECT = "STObject";
    var DESTINATION = "Destination";
    var ACCOUNT = "Account";
    var SOURCE_TAG = "SourceTag";
    var DEST_TAG = "DestinationTag";
    function handleXAddress(field, xAddress) {
      const decoded = (0, ripple_address_codec_1.xAddressToClassicAddress)(xAddress);
      let tagName;
      if (field === DESTINATION)
        tagName = DEST_TAG;
      else if (field === ACCOUNT)
        tagName = SOURCE_TAG;
      else if (decoded.tag !== false)
        throw new Error(`${field} cannot have an associated tag`);
      return decoded.tag !== false ? { [field]: decoded.classicAddress, [tagName]: decoded.tag } : { [field]: decoded.classicAddress };
    }
    function checkForDuplicateTags(obj1, obj2) {
      if (!(obj1[SOURCE_TAG] === void 0 || obj2[SOURCE_TAG] === void 0))
        throw new Error("Cannot have Account X-Address and SourceTag");
      if (!(obj1[DEST_TAG] === void 0 || obj2[DEST_TAG] === void 0))
        throw new Error("Cannot have Destination X-Address and DestinationTag");
    }
    var STObject = class _STObject extends serialized_type_1.SerializedType {
      /**
       * Construct a STObject from a BinaryParser
       *
       * @param parser BinaryParser to read STObject from
       * @returns A STObject object
       */
      static fromParser(parser) {
        const list = new binary_serializer_1.BytesList();
        const bytes3 = new binary_serializer_1.BinarySerializer(list);
        while (!parser.end()) {
          const field = parser.readField();
          if (field.name === OBJECT_END_MARKER) {
            break;
          }
          const associatedValue = parser.readFieldValue(field);
          bytes3.writeFieldAndValue(field, associatedValue);
          if (field.type.name === ST_OBJECT) {
            bytes3.put(OBJECT_END_MARKER_BYTE);
          }
        }
        return new _STObject(list.toBytes());
      }
      /**
       * Construct a STObject from a JSON object
       *
       * @param value An object to include
       * @param filter optional, denote which field to include in serialized object
       * @param definitions optional, types and values to use to encode/decode a transaction
       * @returns a STObject object
       */
      static from(value, filter2, definitions = enums_1.DEFAULT_DEFINITIONS) {
        if (value instanceof _STObject) {
          return value;
        }
        const list = new binary_serializer_1.BytesList();
        const bytes3 = new binary_serializer_1.BinarySerializer(list);
        let isUnlModify = false;
        const xAddressDecoded = Object.entries(value).reduce((acc, [key, val]) => {
          let handled = void 0;
          if (val && (0, ripple_address_codec_1.isValidXAddress)(val.toString())) {
            handled = handleXAddress(key, val.toString());
            checkForDuplicateTags(handled, value);
          }
          return Object.assign(acc, handled !== null && handled !== void 0 ? handled : { [key]: val });
        }, {});
        function isValidFieldInstance(f) {
          return f !== void 0 && xAddressDecoded[f.name] !== void 0 && f.isSerialized;
        }
        let sorted = Object.keys(xAddressDecoded).map((f) => {
          if (!(f in definitions.field)) {
            if (f[0] === f[0].toLowerCase())
              return void 0;
            throw new Error(`Field ${f} is not defined in the definitions`);
          }
          return definitions.field[f];
        }).filter(isValidFieldInstance).sort((a, b2) => {
          return a.ordinal - b2.ordinal;
        });
        if (filter2 !== void 0) {
          sorted = sorted.filter(filter2);
        }
        sorted.forEach((field) => {
          var _a;
          const associatedValue = field.type.name === ST_OBJECT ? this.from(xAddressDecoded[field.name], void 0, definitions) : field.type.name === "STArray" ? st_array_1.STArray.from(xAddressDecoded[field.name], definitions) : field.type.name === "UInt64" ? uint_64_1.UInt64.from(xAddressDecoded[field.name], field.name) : ((_a = field.associatedType) === null || _a === void 0 ? void 0 : _a.from) ? field.associatedType.from(xAddressDecoded[field.name]) : (() => {
            throw new Error(`Type ${field.type.name} for field ${field.name} is missing associatedType.from`);
          })();
          if (associatedValue == void 0) {
            throw new TypeError(`Unable to interpret "${field.name}: ${xAddressDecoded[field.name]}".`);
          }
          if (associatedValue.name === "UNLModify") {
            isUnlModify = true;
          }
          const isUnlModifyWorkaround = field.name == "Account" && isUnlModify;
          bytes3.writeFieldAndValue(field, associatedValue, isUnlModifyWorkaround);
          if (field.type.name === ST_OBJECT) {
            bytes3.put(OBJECT_END_MARKER_BYTE);
          }
        });
        return new _STObject(list.toBytes());
      }
      /**
       * Get the JSON interpretation of this.bytes
       * @param definitions rippled definitions used to parse the values of transaction types and such.
       *                          Can be customized for sidechains and amendments.
       * @returns a JSON object
       */
      toJSON(definitions) {
        const objectParser = new binary_parser_1.BinaryParser(this.toString(), definitions);
        const accumulator = {};
        while (!objectParser.end()) {
          const field = objectParser.readField();
          if (field.name === OBJECT_END_MARKER) {
            break;
          }
          accumulator[field.name] = objectParser.readFieldValue(field).toJSON(definitions, field.name);
        }
        return accumulator;
      }
    };
    exports.STObject = STObject;
  }
});

// node_modules/ripple-binary-codec/dist/types/st-array.js
var require_st_array = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/st-array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STArray = void 0;
    var enums_1 = require_enums();
    var serialized_type_1 = require_serialized_type();
    var st_object_1 = require_st_object();
    var binary_parser_1 = require_binary_parser();
    var utils_1 = require_browser2();
    var ARRAY_END_MARKER = Uint8Array.from([241]);
    var ARRAY_END_MARKER_NAME = "ArrayEndMarker";
    var OBJECT_END_MARKER = Uint8Array.from([225]);
    function isObjects(args) {
      return Array.isArray(args) && args.every((arg) => typeof arg === "object" && Object.keys(arg).length === 1 && typeof Object.values(arg)[0] === "object");
    }
    var STArray = class _STArray extends serialized_type_1.SerializedType {
      /**
       * Construct an STArray from a BinaryParser
       *
       * @param parser BinaryParser to parse an STArray from
       * @returns An STArray Object
       */
      static fromParser(parser) {
        const bytes3 = [];
        while (!parser.end()) {
          const field = parser.readField();
          if (field.name === ARRAY_END_MARKER_NAME) {
            break;
          }
          bytes3.push(field.header, parser.readFieldValue(field).toBytes(), OBJECT_END_MARKER);
        }
        bytes3.push(ARRAY_END_MARKER);
        return new _STArray((0, utils_1.concat)(bytes3));
      }
      /**
       * Construct an STArray from an Array of JSON Objects
       *
       * @param value STArray or Array of Objects to parse into an STArray
       * @param definitions optional, types and values to use to encode/decode a transaction
       * @returns An STArray object
       */
      static from(value, definitions = enums_1.DEFAULT_DEFINITIONS) {
        if (value instanceof _STArray) {
          return value;
        }
        if (isObjects(value)) {
          const bytes3 = [];
          value.forEach((obj) => {
            bytes3.push(st_object_1.STObject.from(obj, void 0, definitions).toBytes());
          });
          bytes3.push(ARRAY_END_MARKER);
          return new _STArray((0, utils_1.concat)(bytes3));
        }
        throw new Error("Cannot construct STArray from value given");
      }
      /**
       * Return the JSON representation of this.bytes
       *
       * @param definitions optional, types and values to use to encode/decode a transaction
       * @returns An Array of JSON objects
       */
      toJSON(definitions = enums_1.DEFAULT_DEFINITIONS) {
        const result = [];
        const arrayParser = new binary_parser_1.BinaryParser(this.toString(), definitions);
        while (!arrayParser.end()) {
          const field = arrayParser.readField();
          if (field.name === ARRAY_END_MARKER_NAME) {
            break;
          }
          const outer = {};
          outer[field.name] = st_object_1.STObject.fromParser(arrayParser).toJSON(definitions);
          result.push(outer);
        }
        return result;
      }
    };
    exports.STArray = STArray;
  }
});

// node_modules/ripple-binary-codec/dist/types/uint-16.js
var require_uint_16 = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/uint-16.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UInt16 = void 0;
    var uint_1 = require_uint();
    var utils_1 = require_utils3();
    var UInt16 = class _UInt16 extends uint_1.UInt {
      constructor(bytes3) {
        super(bytes3 !== null && bytes3 !== void 0 ? bytes3 : _UInt16.defaultUInt16.bytes);
      }
      static fromParser(parser) {
        return new _UInt16(parser.read(_UInt16.width));
      }
      /**
       * Construct a UInt16 object from a number
       *
       * @param val UInt16 object or number
       */
      static from(val) {
        if (val instanceof _UInt16) {
          return val;
        }
        if (typeof val === "number") {
          _UInt16.checkUintRange(val, 0, 65535);
          const buf = new Uint8Array(_UInt16.width);
          (0, utils_1.writeUInt16BE)(buf, val, 0);
          return new _UInt16(buf);
        }
        throw new Error("Can not construct UInt16 with given value");
      }
      /**
       * get the value of a UInt16 object
       *
       * @returns the number represented by this.bytes
       */
      valueOf() {
        return parseInt((0, utils_1.readUInt16BE)(this.bytes, 0));
      }
    };
    exports.UInt16 = UInt16;
    UInt16.width = 16 / 8;
    UInt16.defaultUInt16 = new UInt16(new Uint8Array(UInt16.width));
  }
});

// node_modules/ripple-binary-codec/dist/types/uint-32.js
var require_uint_32 = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/uint-32.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UInt32 = void 0;
    var uint_1 = require_uint();
    var utils_1 = require_utils3();
    var UInt32 = class _UInt32 extends uint_1.UInt {
      constructor(bytes3) {
        super(bytes3 !== null && bytes3 !== void 0 ? bytes3 : _UInt32.defaultUInt32.bytes);
      }
      static fromParser(parser) {
        return new _UInt32(parser.read(_UInt32.width));
      }
      /**
       * Construct a UInt32 object from a number
       *
       * @param val UInt32 object or number
       */
      static from(val) {
        if (val instanceof _UInt32) {
          return val;
        }
        const buf = new Uint8Array(_UInt32.width);
        if (typeof val === "string") {
          const num = Number.parseInt(val);
          (0, utils_1.writeUInt32BE)(buf, num, 0);
          return new _UInt32(buf);
        }
        if (typeof val === "number") {
          _UInt32.checkUintRange(val, 0, 4294967295);
          (0, utils_1.writeUInt32BE)(buf, val, 0);
          return new _UInt32(buf);
        }
        throw new Error("Cannot construct UInt32 from given value");
      }
      /**
       * get the value of a UInt32 object
       *
       * @returns the number represented by this.bytes
       */
      valueOf() {
        return parseInt((0, utils_1.readUInt32BE)(this.bytes, 0), 10);
      }
    };
    exports.UInt32 = UInt32;
    UInt32.width = 32 / 8;
    UInt32.defaultUInt32 = new UInt32(new Uint8Array(UInt32.width));
  }
});

// node_modules/ripple-binary-codec/dist/types/uint-8.js
var require_uint_8 = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/uint-8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UInt8 = void 0;
    var uint_1 = require_uint();
    var utils_1 = require_browser2();
    var utils_2 = require_utils3();
    var UInt8 = class _UInt8 extends uint_1.UInt {
      constructor(bytes3) {
        super(bytes3 !== null && bytes3 !== void 0 ? bytes3 : _UInt8.defaultUInt8.bytes);
      }
      static fromParser(parser) {
        return new _UInt8(parser.read(_UInt8.width));
      }
      /**
       * Construct a UInt8 object from a number
       *
       * @param val UInt8 object or number
       */
      static from(val) {
        if (val instanceof _UInt8) {
          return val;
        }
        if (typeof val === "number") {
          _UInt8.checkUintRange(val, 0, 255);
          const buf = new Uint8Array(_UInt8.width);
          (0, utils_2.writeUInt8)(buf, val, 0);
          return new _UInt8(buf);
        }
        throw new Error("Cannot construct UInt8 from given value");
      }
      /**
       * get the value of a UInt8 object
       *
       * @returns the number represented by this.bytes
       */
      valueOf() {
        return parseInt((0, utils_1.bytesToHex)(this.bytes), 16);
      }
    };
    exports.UInt8 = UInt8;
    UInt8.width = 8 / 8;
    UInt8.defaultUInt8 = new UInt8(new Uint8Array(UInt8.width));
  }
});

// node_modules/ripple-binary-codec/dist/types/vector-256.js
var require_vector_256 = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/vector-256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Vector256 = void 0;
    var serialized_type_1 = require_serialized_type();
    var hash_256_1 = require_hash_256();
    var binary_serializer_1 = require_binary_serializer();
    var utils_1 = require_browser2();
    function isStrings(arg) {
      return Array.isArray(arg) && (arg.length === 0 || typeof arg[0] === "string");
    }
    var Vector256 = class _Vector256 extends serialized_type_1.SerializedType {
      constructor(bytes3) {
        super(bytes3);
      }
      /**
       * Construct a Vector256 from a BinaryParser
       *
       * @param parser BinaryParser to
       * @param hint length of the vector, in bytes, optional
       * @returns a Vector256 object
       */
      static fromParser(parser, hint) {
        const bytesList = new binary_serializer_1.BytesList();
        const bytes3 = hint !== null && hint !== void 0 ? hint : parser.size();
        const hashes = bytes3 / 32;
        for (let i = 0; i < hashes; i++) {
          hash_256_1.Hash256.fromParser(parser).toBytesSink(bytesList);
        }
        return new _Vector256(bytesList.toBytes());
      }
      /**
       * Construct a Vector256 object from an array of hashes
       *
       * @param value A Vector256 object or array of hex-strings representing Hash256's
       * @returns a Vector256 object
       */
      static from(value) {
        if (value instanceof _Vector256) {
          return value;
        }
        if (isStrings(value)) {
          const bytesList = new binary_serializer_1.BytesList();
          value.forEach((hash2) => {
            hash_256_1.Hash256.from(hash2).toBytesSink(bytesList);
          });
          return new _Vector256(bytesList.toBytes());
        }
        throw new Error("Cannot construct Vector256 from given value");
      }
      /**
       * Return an Array of hex-strings represented by this.bytes
       *
       * @returns An Array of strings representing the Hash256 objects
       */
      toJSON() {
        if (this.bytes.byteLength % 32 !== 0) {
          throw new Error("Invalid bytes for Vector256");
        }
        const result = [];
        for (let i = 0; i < this.bytes.byteLength; i += 32) {
          result.push((0, utils_1.bytesToHex)(this.bytes.slice(i, i + 32)));
        }
        return result;
      }
    };
    exports.Vector256 = Vector256;
  }
});

// node_modules/ripple-binary-codec/dist/types/xchain-bridge.js
var require_xchain_bridge = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/xchain-bridge.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XChainBridge = void 0;
    var binary_parser_1 = require_binary_parser();
    var account_id_1 = require_account_id();
    var serialized_type_1 = require_serialized_type();
    var issue_1 = require_issue();
    var utils_1 = require_browser2();
    function isXChainBridgeObject(arg) {
      const keys2 = Object.keys(arg).sort();
      return keys2.length === 4 && keys2[0] === "IssuingChainDoor" && keys2[1] === "IssuingChainIssue" && keys2[2] === "LockingChainDoor" && keys2[3] === "LockingChainIssue";
    }
    var XChainBridge = class _XChainBridge extends serialized_type_1.SerializedType {
      constructor(bytes3) {
        super(bytes3 !== null && bytes3 !== void 0 ? bytes3 : _XChainBridge.ZERO_XCHAIN_BRIDGE.bytes);
      }
      /**
       * Construct a cross-chain bridge from a JSON
       *
       * @param value XChainBridge or JSON to parse into an XChainBridge
       * @returns An XChainBridge object
       */
      static from(value) {
        if (value instanceof _XChainBridge) {
          return value;
        }
        if (!isXChainBridgeObject(value)) {
          throw new Error("Invalid type to construct an XChainBridge");
        }
        const bytes3 = [];
        this.TYPE_ORDER.forEach((item) => {
          const { name, type } = item;
          if (type === account_id_1.AccountID) {
            bytes3.push(Uint8Array.from([20]));
          }
          const object = type.from(value[name]);
          bytes3.push(object.toBytes());
        });
        return new _XChainBridge((0, utils_1.concat)(bytes3));
      }
      /**
       * Read an XChainBridge from a BinaryParser
       *
       * @param parser BinaryParser to read the XChainBridge from
       * @returns An XChainBridge object
       */
      static fromParser(parser) {
        const bytes3 = [];
        this.TYPE_ORDER.forEach((item) => {
          const { type } = item;
          if (type === account_id_1.AccountID) {
            parser.skip(1);
            bytes3.push(Uint8Array.from([20]));
          }
          const object = type.fromParser(parser);
          bytes3.push(object.toBytes());
        });
        return new _XChainBridge((0, utils_1.concat)(bytes3));
      }
      /**
       * Get the JSON representation of this XChainBridge
       *
       * @returns the JSON interpretation of this.bytes
       */
      toJSON() {
        const parser = new binary_parser_1.BinaryParser(this.toString());
        const json = {};
        _XChainBridge.TYPE_ORDER.forEach((item) => {
          const { name, type } = item;
          if (type === account_id_1.AccountID) {
            parser.skip(1);
          }
          const object = type.fromParser(parser).toJSON();
          json[name] = object;
        });
        return json;
      }
    };
    exports.XChainBridge = XChainBridge;
    XChainBridge.ZERO_XCHAIN_BRIDGE = new XChainBridge((0, utils_1.concat)([
      Uint8Array.from([20]),
      new Uint8Array(40),
      Uint8Array.from([20]),
      new Uint8Array(40)
    ]));
    XChainBridge.TYPE_ORDER = [
      { name: "LockingChainDoor", type: account_id_1.AccountID },
      { name: "LockingChainIssue", type: issue_1.Issue },
      { name: "IssuingChainDoor", type: account_id_1.AccountID },
      { name: "IssuingChainIssue", type: issue_1.Issue }
    ];
  }
});

// node_modules/ripple-binary-codec/dist/types/index.js
var require_types = __commonJS({
  "node_modules/ripple-binary-codec/dist/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Vector256 = exports.UInt64 = exports.UInt32 = exports.UInt16 = exports.UInt8 = exports.STObject = exports.STArray = exports.PathSet = exports.Hash256 = exports.Hash192 = exports.Hash160 = exports.Hash128 = exports.Currency = exports.Blob = exports.Amount = exports.AccountID = exports.coreTypes = void 0;
    var account_id_1 = require_account_id();
    Object.defineProperty(exports, "AccountID", { enumerable: true, get: function() {
      return account_id_1.AccountID;
    } });
    var amount_1 = require_amount();
    Object.defineProperty(exports, "Amount", { enumerable: true, get: function() {
      return amount_1.Amount;
    } });
    var blob_1 = require_blob();
    Object.defineProperty(exports, "Blob", { enumerable: true, get: function() {
      return blob_1.Blob;
    } });
    var currency_1 = require_currency();
    Object.defineProperty(exports, "Currency", { enumerable: true, get: function() {
      return currency_1.Currency;
    } });
    var hash_128_1 = require_hash_128();
    Object.defineProperty(exports, "Hash128", { enumerable: true, get: function() {
      return hash_128_1.Hash128;
    } });
    var hash_160_1 = require_hash_160();
    Object.defineProperty(exports, "Hash160", { enumerable: true, get: function() {
      return hash_160_1.Hash160;
    } });
    var hash_192_1 = require_hash_192();
    Object.defineProperty(exports, "Hash192", { enumerable: true, get: function() {
      return hash_192_1.Hash192;
    } });
    var hash_256_1 = require_hash_256();
    Object.defineProperty(exports, "Hash256", { enumerable: true, get: function() {
      return hash_256_1.Hash256;
    } });
    var issue_1 = require_issue();
    var st_number_1 = require_st_number();
    var path_set_1 = require_path_set();
    Object.defineProperty(exports, "PathSet", { enumerable: true, get: function() {
      return path_set_1.PathSet;
    } });
    var st_array_1 = require_st_array();
    Object.defineProperty(exports, "STArray", { enumerable: true, get: function() {
      return st_array_1.STArray;
    } });
    var st_object_1 = require_st_object();
    Object.defineProperty(exports, "STObject", { enumerable: true, get: function() {
      return st_object_1.STObject;
    } });
    var uint_16_1 = require_uint_16();
    Object.defineProperty(exports, "UInt16", { enumerable: true, get: function() {
      return uint_16_1.UInt16;
    } });
    var uint_32_1 = require_uint_32();
    Object.defineProperty(exports, "UInt32", { enumerable: true, get: function() {
      return uint_32_1.UInt32;
    } });
    var uint_64_1 = require_uint_64();
    Object.defineProperty(exports, "UInt64", { enumerable: true, get: function() {
      return uint_64_1.UInt64;
    } });
    var uint_8_1 = require_uint_8();
    Object.defineProperty(exports, "UInt8", { enumerable: true, get: function() {
      return uint_8_1.UInt8;
    } });
    var vector_256_1 = require_vector_256();
    Object.defineProperty(exports, "Vector256", { enumerable: true, get: function() {
      return vector_256_1.Vector256;
    } });
    var xchain_bridge_1 = require_xchain_bridge();
    var enums_1 = require_enums();
    var coreTypes = {
      AccountID: account_id_1.AccountID,
      Amount: amount_1.Amount,
      Blob: blob_1.Blob,
      Currency: currency_1.Currency,
      Hash128: hash_128_1.Hash128,
      Hash160: hash_160_1.Hash160,
      Hash192: hash_192_1.Hash192,
      Hash256: hash_256_1.Hash256,
      Issue: issue_1.Issue,
      Number: st_number_1.STNumber,
      PathSet: path_set_1.PathSet,
      STArray: st_array_1.STArray,
      STObject: st_object_1.STObject,
      UInt8: uint_8_1.UInt8,
      UInt16: uint_16_1.UInt16,
      UInt32: uint_32_1.UInt32,
      UInt64: uint_64_1.UInt64,
      Vector256: vector_256_1.Vector256,
      XChainBridge: xchain_bridge_1.XChainBridge
    };
    exports.coreTypes = coreTypes;
    enums_1.DEFAULT_DEFINITIONS.associateTypes(coreTypes);
  }
});

// node_modules/ripple-binary-codec/dist/hash-prefixes.js
var require_hash_prefixes = __commonJS({
  "node_modules/ripple-binary-codec/dist/hash-prefixes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HashPrefix = void 0;
    var utils_1 = require_utils3();
    function bytes3(uint32) {
      const result = new Uint8Array(4);
      (0, utils_1.writeUInt32BE)(result, uint32, 0);
      return result;
    }
    var HashPrefix = {
      transactionID: bytes3(1415073280),
      // transaction plus metadata
      transaction: bytes3(1397638144),
      // account state
      accountStateEntry: bytes3(1296846336),
      // inner node in tree
      innerNode: bytes3(1296649728),
      // ledger master data for signing
      ledgerHeader: bytes3(1280791040),
      // inner transaction to sign
      transactionSig: bytes3(1398036480),
      // inner transaction to sign
      transactionMultiSig: bytes3(1397576704),
      // validation for signing
      validation: bytes3(1447119872),
      // proposal for signing
      proposal: bytes3(1347571712),
      // payment channel claim
      paymentChannelClaim: bytes3(1129073920),
      // batch
      batch: bytes3(1111705600)
    };
    exports.HashPrefix = HashPrefix;
  }
});

// node_modules/@noble/hashes/sha512.js
var require_sha512 = __commonJS({
  "node_modules/@noble/hashes/sha512.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA512 = void 0;
    var _md_js_1 = require_md();
    var _u64_js_1 = require_u64();
    var utils_js_1 = require_utils();
    var [SHA512_Kh2, SHA512_Kl2] = (() => _u64_js_1.default.split([
      "0x428a2f98d728ae22",
      "0x7137449123ef65cd",
      "0xb5c0fbcfec4d3b2f",
      "0xe9b5dba58189dbbc",
      "0x3956c25bf348b538",
      "0x59f111f1b605d019",
      "0x923f82a4af194f9b",
      "0xab1c5ed5da6d8118",
      "0xd807aa98a3030242",
      "0x12835b0145706fbe",
      "0x243185be4ee4b28c",
      "0x550c7dc3d5ffb4e2",
      "0x72be5d74f27b896f",
      "0x80deb1fe3b1696b1",
      "0x9bdc06a725c71235",
      "0xc19bf174cf692694",
      "0xe49b69c19ef14ad2",
      "0xefbe4786384f25e3",
      "0x0fc19dc68b8cd5b5",
      "0x240ca1cc77ac9c65",
      "0x2de92c6f592b0275",
      "0x4a7484aa6ea6e483",
      "0x5cb0a9dcbd41fbd4",
      "0x76f988da831153b5",
      "0x983e5152ee66dfab",
      "0xa831c66d2db43210",
      "0xb00327c898fb213f",
      "0xbf597fc7beef0ee4",
      "0xc6e00bf33da88fc2",
      "0xd5a79147930aa725",
      "0x06ca6351e003826f",
      "0x142929670a0e6e70",
      "0x27b70a8546d22ffc",
      "0x2e1b21385c26c926",
      "0x4d2c6dfc5ac42aed",
      "0x53380d139d95b3df",
      "0x650a73548baf63de",
      "0x766a0abb3c77b2a8",
      "0x81c2c92e47edaee6",
      "0x92722c851482353b",
      "0xa2bfe8a14cf10364",
      "0xa81a664bbc423001",
      "0xc24b8b70d0f89791",
      "0xc76c51a30654be30",
      "0xd192e819d6ef5218",
      "0xd69906245565a910",
      "0xf40e35855771202a",
      "0x106aa07032bbd1b8",
      "0x19a4c116b8d2d0c8",
      "0x1e376c085141ab53",
      "0x2748774cdf8eeb99",
      "0x34b0bcb5e19b48a8",
      "0x391c0cb3c5c95a63",
      "0x4ed8aa4ae3418acb",
      "0x5b9cca4f7763e373",
      "0x682e6ff3d6b2b8a3",
      "0x748f82ee5defb2fc",
      "0x78a5636f43172f60",
      "0x84c87814a1f0ab72",
      "0x8cc702081a6439ec",
      "0x90befffa23631e28",
      "0xa4506cebde82bde9",
      "0xbef9a3f7b2c67915",
      "0xc67178f2e372532b",
      "0xca273eceea26619c",
      "0xd186b8c721c0c207",
      "0xeada7dd6cde0eb1e",
      "0xf57d4f7fee6ed178",
      "0x06f067aa72176fba",
      "0x0a637dc5a2c898a6",
      "0x113f9804bef90dae",
      "0x1b710b35131c471b",
      "0x28db77f523047d84",
      "0x32caab7b40c72493",
      "0x3c9ebe0a15c9bebc",
      "0x431d67c49c100d4c",
      "0x4cc5d4becb3e42b6",
      "0x597f299cfc657e2a",
      "0x5fcb6fab3ad6faec",
      "0x6c44198c4a475817"
    ].map((n) => BigInt(n))))();
    var SHA512_W_H2 = new Uint32Array(80);
    var SHA512_W_L2 = new Uint32Array(80);
    var SHA5122 = class extends _md_js_1.HashMD {
      constructor() {
        super(128, 64, 16, false);
        this.Ah = 1779033703 | 0;
        this.Al = 4089235720 | 0;
        this.Bh = 3144134277 | 0;
        this.Bl = 2227873595 | 0;
        this.Ch = 1013904242 | 0;
        this.Cl = 4271175723 | 0;
        this.Dh = 2773480762 | 0;
        this.Dl = 1595750129 | 0;
        this.Eh = 1359893119 | 0;
        this.El = 2917565137 | 0;
        this.Fh = 2600822924 | 0;
        this.Fl = 725511199 | 0;
        this.Gh = 528734635 | 0;
        this.Gl = 4215389547 | 0;
        this.Hh = 1541459225 | 0;
        this.Hl = 327033209 | 0;
      }
      // prettier-ignore
      get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
      }
      // prettier-ignore
      set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4) {
          SHA512_W_H2[i] = view.getUint32(offset);
          SHA512_W_L2[i] = view.getUint32(offset += 4);
        }
        for (let i = 16; i < 80; i++) {
          const W15h = SHA512_W_H2[i - 15] | 0;
          const W15l = SHA512_W_L2[i - 15] | 0;
          const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);
          const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);
          const W2h = SHA512_W_H2[i - 2] | 0;
          const W2l = SHA512_W_L2[i - 2] | 0;
          const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);
          const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);
          const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L2[i - 7], SHA512_W_L2[i - 16]);
          const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H2[i - 7], SHA512_W_H2[i - 16]);
          SHA512_W_H2[i] = SUMh | 0;
          SHA512_W_L2[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        for (let i = 0; i < 80; i++) {
          const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);
          const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);
          const CHIh = Eh & Fh ^ ~Eh & Gh;
          const CHIl = El & Fl ^ ~El & Gl;
          const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl2[i], SHA512_W_L2[i]);
          const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh2[i], SHA512_W_H2[i]);
          const T1l = T1ll | 0;
          const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);
          const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);
          const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
          const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
          Hh = Gh | 0;
          Hl = Gl | 0;
          Gh = Fh | 0;
          Gl = Fl | 0;
          Fh = Eh | 0;
          Fl = El | 0;
          ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
          Dh = Ch | 0;
          Dl = Cl | 0;
          Ch = Bh | 0;
          Cl = Bl | 0;
          Bh = Ah | 0;
          Bl = Al | 0;
          const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);
          Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);
          Al = All | 0;
        }
        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
      }
      roundClean() {
        SHA512_W_H2.fill(0);
        SHA512_W_L2.fill(0);
      }
      destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
    };
    exports.SHA512 = SHA5122;
    var SHA512_2242 = class extends SHA5122 {
      constructor() {
        super();
        this.Ah = 2352822216 | 0;
        this.Al = 424955298 | 0;
        this.Bh = 1944164710 | 0;
        this.Bl = 2312950998 | 0;
        this.Ch = 502970286 | 0;
        this.Cl = 855612546 | 0;
        this.Dh = 1738396948 | 0;
        this.Dl = 1479516111 | 0;
        this.Eh = 258812777 | 0;
        this.El = 2077511080 | 0;
        this.Fh = 2011393907 | 0;
        this.Fl = 79989058 | 0;
        this.Gh = 1067287976 | 0;
        this.Gl = 1780299464 | 0;
        this.Hh = 286451373 | 0;
        this.Hl = 2446758561 | 0;
        this.outputLen = 28;
      }
    };
    var SHA512_2562 = class extends SHA5122 {
      constructor() {
        super();
        this.Ah = 573645204 | 0;
        this.Al = 4230739756 | 0;
        this.Bh = 2673172387 | 0;
        this.Bl = 3360449730 | 0;
        this.Ch = 596883563 | 0;
        this.Cl = 1867755857 | 0;
        this.Dh = 2520282905 | 0;
        this.Dl = 1497426621 | 0;
        this.Eh = 2519219938 | 0;
        this.El = 2827943907 | 0;
        this.Fh = 3193839141 | 0;
        this.Fl = 1401305490 | 0;
        this.Gh = 721525244 | 0;
        this.Gl = 746961066 | 0;
        this.Hh = 246885852 | 0;
        this.Hl = 2177182882 | 0;
        this.outputLen = 32;
      }
    };
    var SHA3842 = class extends SHA5122 {
      constructor() {
        super();
        this.Ah = 3418070365 | 0;
        this.Al = 3238371032 | 0;
        this.Bh = 1654270250 | 0;
        this.Bl = 914150663 | 0;
        this.Ch = 2438529370 | 0;
        this.Cl = 812702999 | 0;
        this.Dh = 355462360 | 0;
        this.Dl = 4144912697 | 0;
        this.Eh = 1731405415 | 0;
        this.El = 4290775857 | 0;
        this.Fh = 2394180231 | 0;
        this.Fl = 1750603025 | 0;
        this.Gh = 3675008525 | 0;
        this.Gl = 1694076839 | 0;
        this.Hh = 1203062813 | 0;
        this.Hl = 3204075428 | 0;
        this.outputLen = 48;
      }
    };
    exports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA5122());
    exports.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_2242());
    exports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_2562());
    exports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA3842());
  }
});

// node_modules/@xrplf/isomorphic/dist/sha512/browser.js
var require_browser4 = __commonJS({
  "node_modules/@xrplf/isomorphic/dist/sha512/browser.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha512 = void 0;
    var sha512_1 = require_sha512();
    var wrapNoble_1 = __importDefault(require_wrapNoble());
    exports.sha512 = (0, wrapNoble_1.default)(sha512_1.sha512);
  }
});

// node_modules/ripple-binary-codec/dist/hashes.js
var require_hashes = __commonJS({
  "node_modules/ripple-binary-codec/dist/hashes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transactionID = exports.sha512Half = exports.Sha512Half = void 0;
    var hash_prefixes_1 = require_hash_prefixes();
    var types_1 = require_types();
    var binary_serializer_1 = require_binary_serializer();
    var sha512_1 = require_browser4();
    var Sha512Half = class _Sha512Half extends binary_serializer_1.BytesList {
      constructor() {
        super(...arguments);
        this.hash = sha512_1.sha512.create();
      }
      /**
       * Construct a new Sha512Hash and write bytes this.hash
       *
       * @param bytes bytes to write to this.hash
       * @returns the new Sha512Hash object
       */
      static put(bytes3) {
        return new _Sha512Half().put(bytes3);
      }
      /**
       * Write bytes to an existing Sha512Hash
       *
       * @param bytes bytes to write to object
       * @returns the Sha512 object
       */
      put(bytes3) {
        this.hash.update(bytes3);
        return this;
      }
      /**
       * Compute SHA512 hash and slice in half
       *
       * @returns half of a SHA512 hash
       */
      finish256() {
        return Uint8Array.from(this.hash.digest().slice(0, 32));
      }
      /**
       * Constructs a Hash256 from the Sha512Half object
       *
       * @returns a Hash256 object
       */
      finish() {
        return new types_1.Hash256(this.finish256());
      }
    };
    exports.Sha512Half = Sha512Half;
    function sha512Half(...args) {
      const hash2 = new Sha512Half();
      args.forEach((a) => hash2.put(a));
      return hash2.finish256();
    }
    exports.sha512Half = sha512Half;
    function transactionID(serialized) {
      return new types_1.Hash256(sha512Half(hash_prefixes_1.HashPrefix.transactionID, serialized));
    }
    exports.transactionID = transactionID;
  }
});

// node_modules/ripple-binary-codec/dist/binary.js
var require_binary = __commonJS({
  "node_modules/ripple-binary-codec/dist/binary.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.signingBatchData = exports.transactionID = exports.sha512Half = exports.binaryToJSON = exports.signingClaimData = exports.signingData = exports.multiSigningData = exports.readJSON = exports.serializeObject = exports.makeParser = exports.BytesList = exports.BinarySerializer = exports.BinaryParser = void 0;
    var utils_1 = require_browser2();
    var types_1 = require_types();
    var binary_parser_1 = require_binary_parser();
    Object.defineProperty(exports, "BinaryParser", { enumerable: true, get: function() {
      return binary_parser_1.BinaryParser;
    } });
    var hash_prefixes_1 = require_hash_prefixes();
    var binary_serializer_1 = require_binary_serializer();
    Object.defineProperty(exports, "BinarySerializer", { enumerable: true, get: function() {
      return binary_serializer_1.BinarySerializer;
    } });
    Object.defineProperty(exports, "BytesList", { enumerable: true, get: function() {
      return binary_serializer_1.BytesList;
    } });
    var hashes_1 = require_hashes();
    Object.defineProperty(exports, "sha512Half", { enumerable: true, get: function() {
      return hashes_1.sha512Half;
    } });
    Object.defineProperty(exports, "transactionID", { enumerable: true, get: function() {
      return hashes_1.transactionID;
    } });
    var enums_1 = require_enums();
    var makeParser = (bytes3, definitions) => new binary_parser_1.BinaryParser(bytes3 instanceof Uint8Array ? (0, utils_1.bytesToHex)(bytes3) : bytes3, definitions);
    exports.makeParser = makeParser;
    var readJSON = (parser, definitions = enums_1.DEFAULT_DEFINITIONS) => parser.readType(types_1.coreTypes.STObject).toJSON(definitions);
    exports.readJSON = readJSON;
    var binaryToJSON = (bytes3, definitions) => readJSON(makeParser(bytes3, definitions), definitions);
    exports.binaryToJSON = binaryToJSON;
    function serializeObject(object, opts = {}) {
      const { prefix: prefix2, suffix, signingFieldsOnly = false, definitions } = opts;
      const bytesList = new binary_serializer_1.BytesList();
      if (prefix2) {
        bytesList.put(prefix2);
      }
      const filter2 = signingFieldsOnly ? (f) => f.isSigningField : void 0;
      types_1.coreTypes.STObject.from(object, filter2, definitions).toBytesSink(bytesList);
      if (suffix) {
        bytesList.put(suffix);
      }
      return bytesList.toBytes();
    }
    exports.serializeObject = serializeObject;
    function signingData(transaction, prefix2 = hash_prefixes_1.HashPrefix.transactionSig, opts = {}) {
      return serializeObject(transaction, {
        prefix: prefix2,
        signingFieldsOnly: true,
        definitions: opts.definitions
      });
    }
    exports.signingData = signingData;
    function signingClaimData(claim) {
      const num = BigInt(String(claim.amount));
      const prefix2 = hash_prefixes_1.HashPrefix.paymentChannelClaim;
      const channel = types_1.coreTypes.Hash256.from(claim.channel).toBytes();
      const amount = types_1.coreTypes.UInt64.from(num).toBytes();
      const bytesList = new binary_serializer_1.BytesList();
      bytesList.put(prefix2);
      bytesList.put(channel);
      bytesList.put(amount);
      return bytesList.toBytes();
    }
    exports.signingClaimData = signingClaimData;
    function multiSigningData(transaction, signingAccount, opts = {
      definitions: enums_1.DEFAULT_DEFINITIONS
    }) {
      const prefix2 = hash_prefixes_1.HashPrefix.transactionMultiSig;
      const suffix = types_1.coreTypes.AccountID.from(signingAccount).toBytes();
      return serializeObject(transaction, {
        prefix: prefix2,
        suffix,
        signingFieldsOnly: true,
        definitions: opts.definitions
      });
    }
    exports.multiSigningData = multiSigningData;
    function signingBatchData(batch) {
      if (batch.flags == null) {
        throw Error("No field `flags'");
      }
      if (batch.txIDs == null) {
        throw Error("No field `txIDs`");
      }
      const prefix2 = hash_prefixes_1.HashPrefix.batch;
      const flags2 = types_1.coreTypes.UInt32.from(batch.flags).toBytes();
      const txIDsLength = types_1.coreTypes.UInt32.from(batch.txIDs.length).toBytes();
      const bytesList = new binary_serializer_1.BytesList();
      bytesList.put(prefix2);
      bytesList.put(flags2);
      bytesList.put(txIDsLength);
      batch.txIDs.forEach((txID) => {
        bytesList.put(types_1.coreTypes.Hash256.from(txID).toBytes());
      });
      return bytesList.toBytes();
    }
    exports.signingBatchData = signingBatchData;
  }
});

// node_modules/ripple-binary-codec/dist/shamap.js
var require_shamap = __commonJS({
  "node_modules/ripple-binary-codec/dist/shamap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ShaMapLeaf = exports.ShaMapNode = exports.ShaMap = void 0;
    var types_1 = require_types();
    var hash_prefixes_1 = require_hash_prefixes();
    var hashes_1 = require_hashes();
    var ShaMapNode = class {
    };
    exports.ShaMapNode = ShaMapNode;
    var ShaMapLeaf = class extends ShaMapNode {
      constructor(index, item) {
        super();
        this.index = index;
        this.item = item;
      }
      /**
       * @returns true as ShaMapLeaf is a leaf node
       */
      isLeaf() {
        return true;
      }
      /**
       * @returns false as ShaMapLeaf is not an inner node
       */
      isInner() {
        return false;
      }
      /**
       * Get the prefix of the this.item
       *
       * @returns The hash prefix, unless this.item is undefined, then it returns an empty Uint8Array
       */
      hashPrefix() {
        return this.item === void 0 ? new Uint8Array(0) : this.item.hashPrefix();
      }
      /**
       * Hash the bytes representation of this
       *
       * @returns hash of this.item concatenated with this.index
       */
      hash() {
        const hash2 = hashes_1.Sha512Half.put(this.hashPrefix());
        this.toBytesSink(hash2);
        return hash2.finish();
      }
      /**
       * Write the bytes representation of this to a BytesList
       * @param list BytesList to write bytes to
       */
      toBytesSink(list) {
        if (this.item !== void 0) {
          this.item.toBytesSink(list);
        }
        this.index.toBytesSink(list);
      }
    };
    exports.ShaMapLeaf = ShaMapLeaf;
    var ShaMapInner = class _ShaMapInner extends ShaMapNode {
      constructor(depth = 0) {
        super();
        this.depth = depth;
        this.slotBits = 0;
        this.branches = Array(16);
      }
      /**
       * @returns true as ShaMapInner is an inner node
       */
      isInner() {
        return true;
      }
      /**
       * @returns false as ShaMapInner is not a leaf node
       */
      isLeaf() {
        return false;
      }
      /**
       * Get the hash prefix for this node
       *
       * @returns hash prefix describing an inner node
       */
      hashPrefix() {
        return hash_prefixes_1.HashPrefix.innerNode;
      }
      /**
       * Set a branch of this node to be another node
       *
       * @param slot Slot to add branch to this.branches
       * @param branch Branch to add
       */
      setBranch(slot, branch) {
        this.slotBits = this.slotBits | 1 << slot;
        this.branches[slot] = branch;
      }
      /**
       * @returns true if node is empty
       */
      empty() {
        return this.slotBits === 0;
      }
      /**
       * Compute the hash of this node
       *
       * @returns The hash of this node
       */
      hash() {
        if (this.empty()) {
          return types_1.coreTypes.Hash256.ZERO_256;
        }
        const hash2 = hashes_1.Sha512Half.put(this.hashPrefix());
        this.toBytesSink(hash2);
        return hash2.finish();
      }
      /**
       * Writes the bytes representation of this node to a BytesList
       *
       * @param list BytesList to write bytes to
       */
      toBytesSink(list) {
        for (let i = 0; i < this.branches.length; i++) {
          const branch = this.branches[i];
          const hash2 = branch ? branch.hash() : types_1.coreTypes.Hash256.ZERO_256;
          hash2.toBytesSink(list);
        }
      }
      /**
       * Add item to the SHAMap
       *
       * @param index Hash of the index of the item being inserted
       * @param item Item to insert in the map
       * @param leaf Leaf node to insert when branch doesn't exist
       */
      addItem(index, item, leaf) {
        if (index === void 0) {
          throw new Error();
        }
        if (index !== void 0) {
          const nibble = index.nibblet(this.depth);
          const existing = this.branches[nibble];
          if (existing === void 0) {
            this.setBranch(nibble, leaf || new ShaMapLeaf(index, item));
          } else if (existing instanceof ShaMapLeaf) {
            const newInner = new _ShaMapInner(this.depth + 1);
            newInner.addItem(existing.index, void 0, existing);
            newInner.addItem(index, item, leaf);
            this.setBranch(nibble, newInner);
          } else if (existing instanceof _ShaMapInner) {
            existing.addItem(index, item, leaf);
          } else {
            throw new Error("invalid ShaMap.addItem call");
          }
        }
      }
    };
    var ShaMap = class extends ShaMapInner {
    };
    exports.ShaMap = ShaMap;
  }
});

// node_modules/ripple-binary-codec/dist/ledger-hashes.js
var require_ledger_hashes = __commonJS({
  "node_modules/ripple-binary-codec/dist/ledger-hashes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeLedgerData = exports.ledgerHash = exports.transactionTreeHash = exports.accountStateHash = void 0;
    var shamap_1 = require_shamap();
    var hash_prefixes_1 = require_hash_prefixes();
    var hashes_1 = require_hashes();
    var binary_1 = require_binary();
    var hash_256_1 = require_hash_256();
    var st_object_1 = require_st_object();
    var uint_64_1 = require_uint_64();
    var uint_32_1 = require_uint_32();
    var uint_8_1 = require_uint_8();
    var binary_parser_1 = require_binary_parser();
    function computeHash(itemizer, itemsJson) {
      const map3 = new shamap_1.ShaMap();
      itemsJson.forEach((item) => map3.addItem(...itemizer(item)));
      return map3.hash();
    }
    function transactionItemizer(json) {
      if (!json.hash) {
        throw new Error();
      }
      const index = hash_256_1.Hash256.from(json.hash);
      const item = {
        hashPrefix() {
          return hash_prefixes_1.HashPrefix.transaction;
        },
        toBytesSink(sink) {
          const serializer = new binary_1.BinarySerializer(sink);
          serializer.writeLengthEncoded(st_object_1.STObject.from(json));
          serializer.writeLengthEncoded(st_object_1.STObject.from(json.metaData));
        }
      };
      return [index, item, void 0];
    }
    function entryItemizer(json) {
      const index = hash_256_1.Hash256.from(json.index);
      const bytes3 = (0, binary_1.serializeObject)(json);
      const item = {
        hashPrefix() {
          return hash_prefixes_1.HashPrefix.accountStateEntry;
        },
        toBytesSink(sink) {
          sink.put(bytes3);
        }
      };
      return [index, item, void 0];
    }
    function transactionTreeHash(param) {
      const itemizer = transactionItemizer;
      return computeHash(itemizer, param);
    }
    exports.transactionTreeHash = transactionTreeHash;
    function accountStateHash(param) {
      const itemizer = entryItemizer;
      return computeHash(itemizer, param);
    }
    exports.accountStateHash = accountStateHash;
    function ledgerHash(header) {
      const hash2 = new hashes_1.Sha512Half();
      hash2.put(hash_prefixes_1.HashPrefix.ledgerHeader);
      if (header.parent_close_time === void 0 || header.close_flags === void 0) {
        throw new Error();
      }
      uint_32_1.UInt32.from(header.ledger_index).toBytesSink(hash2);
      uint_64_1.UInt64.from(BigInt(String(header.total_coins))).toBytesSink(hash2);
      hash_256_1.Hash256.from(header.parent_hash).toBytesSink(hash2);
      hash_256_1.Hash256.from(header.transaction_hash).toBytesSink(hash2);
      hash_256_1.Hash256.from(header.account_hash).toBytesSink(hash2);
      uint_32_1.UInt32.from(header.parent_close_time).toBytesSink(hash2);
      uint_32_1.UInt32.from(header.close_time).toBytesSink(hash2);
      uint_8_1.UInt8.from(header.close_time_resolution).toBytesSink(hash2);
      uint_8_1.UInt8.from(header.close_flags).toBytesSink(hash2);
      return hash2.finish();
    }
    exports.ledgerHash = ledgerHash;
    function decodeLedgerData(binary, definitions) {
      if (typeof binary !== "string") {
        throw new Error("binary must be a hex string");
      }
      const parser = new binary_parser_1.BinaryParser(binary, definitions);
      return {
        ledger_index: parser.readUInt32(),
        total_coins: parser.readType(uint_64_1.UInt64).valueOf().toString(),
        parent_hash: parser.readType(hash_256_1.Hash256).toHex(),
        transaction_hash: parser.readType(hash_256_1.Hash256).toHex(),
        account_hash: parser.readType(hash_256_1.Hash256).toHex(),
        parent_close_time: parser.readUInt32(),
        close_time: parser.readUInt32(),
        close_time_resolution: parser.readUInt8(),
        close_flags: parser.readUInt8()
      };
    }
    exports.decodeLedgerData = decodeLedgerData;
  }
});

// node_modules/ripple-binary-codec/dist/quality.js
var require_quality = __commonJS({
  "node_modules/ripple-binary-codec/dist/quality.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.quality = void 0;
    var types_1 = require_types();
    var bignumber_js_1 = __importDefault(require_bignumber());
    var utils_1 = require_browser2();
    var quality = class {
      /**
       * Encode quality amount
       *
       * @param arg string representation of an amount
       * @returns Serialized quality
       */
      static encode(quality2) {
        const decimal = (0, bignumber_js_1.default)(quality2);
        const exponent = ((decimal === null || decimal === void 0 ? void 0 : decimal.e) || 0) - 15;
        const qualityString = decimal.times(`1e${-exponent}`).abs().toString();
        const bytes3 = types_1.coreTypes.UInt64.from(BigInt(qualityString)).toBytes();
        bytes3[0] = exponent + 100;
        return bytes3;
      }
      /**
       * Decode quality amount
       *
       * @param arg hex-string denoting serialized quality
       * @returns deserialized quality
       */
      static decode(quality2) {
        const bytes3 = (0, utils_1.hexToBytes)(quality2).slice(-8);
        const exponent = bytes3[0] - 100;
        const mantissa = new bignumber_js_1.default(`0x${(0, utils_1.bytesToHex)(bytes3.slice(1))}`);
        return mantissa.times(`1e${exponent}`);
      }
    };
    exports.quality = quality;
  }
});

// node_modules/ripple-binary-codec/dist/coretypes.js
var require_coretypes = __commonJS({
  "node_modules/ripple-binary-codec/dist/coretypes.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m, k2);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v3) {
      Object.defineProperty(o, "default", { enumerable: true, value: v3 });
    } : function(o, v3) {
      o["default"] = v3;
    });
    var __importStar = exports && exports.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule) return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k2 in mod2) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k2)) __createBinding(result, mod2, k2);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.types = exports.ShaMap = exports.HashPrefix = exports.quality = exports.TransactionResult = exports.Type = exports.LedgerEntryType = exports.TransactionType = exports.Field = exports.DEFAULT_DEFINITIONS = exports.ledgerHashes = exports.binary = exports.hashes = void 0;
    var enums_1 = require_enums();
    Object.defineProperty(exports, "DEFAULT_DEFINITIONS", { enumerable: true, get: function() {
      return enums_1.DEFAULT_DEFINITIONS;
    } });
    Object.defineProperty(exports, "Field", { enumerable: true, get: function() {
      return enums_1.Field;
    } });
    Object.defineProperty(exports, "TransactionType", { enumerable: true, get: function() {
      return enums_1.TransactionType;
    } });
    Object.defineProperty(exports, "LedgerEntryType", { enumerable: true, get: function() {
      return enums_1.LedgerEntryType;
    } });
    Object.defineProperty(exports, "Type", { enumerable: true, get: function() {
      return enums_1.Type;
    } });
    Object.defineProperty(exports, "TransactionResult", { enumerable: true, get: function() {
      return enums_1.TransactionResult;
    } });
    var types2 = __importStar(require_types());
    exports.types = types2;
    var binary = __importStar(require_binary());
    exports.binary = binary;
    var shamap_1 = require_shamap();
    Object.defineProperty(exports, "ShaMap", { enumerable: true, get: function() {
      return shamap_1.ShaMap;
    } });
    var ledgerHashes = __importStar(require_ledger_hashes());
    exports.ledgerHashes = ledgerHashes;
    var hashes = __importStar(require_hashes());
    exports.hashes = hashes;
    var quality_1 = require_quality();
    Object.defineProperty(exports, "quality", { enumerable: true, get: function() {
      return quality_1.quality;
    } });
    var hash_prefixes_1 = require_hash_prefixes();
    Object.defineProperty(exports, "HashPrefix", { enumerable: true, get: function() {
      return hash_prefixes_1.HashPrefix;
    } });
  }
});

// node_modules/ripple-binary-codec/dist/enums/xrpl-definitions.js
var require_xrpl_definitions = __commonJS({
  "node_modules/ripple-binary-codec/dist/enums/xrpl-definitions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XrplDefinitions = void 0;
    var xrpl_definitions_base_1 = require_xrpl_definitions_base();
    var types_1 = require_types();
    var XrplDefinitions = class extends xrpl_definitions_base_1.XrplDefinitionsBase {
      /**
       * Present rippled types in a typed and updatable format.
       * For an example of the input format see `definitions.json`
       * To generate a new definitions file from rippled source code, use the tool at
       * `packages/ripple-binary-codec/tools/generateDefinitions.js`.
       *
       * See the definitions.test.js file for examples of how to create your own updated definitions.json.
       *
       * @param enums - A json encoding of the core types, transaction types, transaction results, transaction names, and fields.
       * @param additionalTypes - A list of SerializedType objects with the same name as the fields defined.
       *              These types will be included in addition to the coreTypes used on mainnet.
       */
      constructor(enums, additionalTypes) {
        const types2 = Object.assign({}, types_1.coreTypes, additionalTypes);
        super(enums, types2);
      }
    };
    exports.XrplDefinitions = XrplDefinitions;
  }
});

// node_modules/ripple-binary-codec/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/ripple-binary-codec/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.coreTypes = exports.DEFAULT_DEFINITIONS = exports.XrplDefinitionsBase = exports.XrplDefinitions = exports.TRANSACTION_TYPES = exports.decodeLedgerData = exports.decodeQuality = exports.encodeQuality = exports.encodeForSigningBatch = exports.encodeForMultisigning = exports.encodeForSigningClaim = exports.encodeForSigning = exports.encode = exports.decode = void 0;
    var coretypes_1 = require_coretypes();
    var ledger_hashes_1 = require_ledger_hashes();
    Object.defineProperty(exports, "decodeLedgerData", { enumerable: true, get: function() {
      return ledger_hashes_1.decodeLedgerData;
    } });
    var enums_1 = require_enums();
    Object.defineProperty(exports, "XrplDefinitionsBase", { enumerable: true, get: function() {
      return enums_1.XrplDefinitionsBase;
    } });
    Object.defineProperty(exports, "TRANSACTION_TYPES", { enumerable: true, get: function() {
      return enums_1.TRANSACTION_TYPES;
    } });
    Object.defineProperty(exports, "DEFAULT_DEFINITIONS", { enumerable: true, get: function() {
      return enums_1.DEFAULT_DEFINITIONS;
    } });
    var xrpl_definitions_1 = require_xrpl_definitions();
    Object.defineProperty(exports, "XrplDefinitions", { enumerable: true, get: function() {
      return xrpl_definitions_1.XrplDefinitions;
    } });
    var types_1 = require_types();
    Object.defineProperty(exports, "coreTypes", { enumerable: true, get: function() {
      return types_1.coreTypes;
    } });
    var utils_1 = require_browser2();
    var { signingData, signingClaimData, multiSigningData, signingBatchData, binaryToJSON, serializeObject } = coretypes_1.binary;
    function decode2(binary, definitions) {
      if (typeof binary !== "string") {
        throw new Error("binary must be a hex string");
      }
      return binaryToJSON(binary, definitions);
    }
    exports.decode = decode2;
    function encode(json, definitions) {
      if (typeof json !== "object") {
        throw new Error();
      }
      return (0, utils_1.bytesToHex)(serializeObject(json, { definitions }));
    }
    exports.encode = encode;
    function encodeForSigning(json, definitions) {
      if (typeof json !== "object") {
        throw new Error();
      }
      return (0, utils_1.bytesToHex)(signingData(json, coretypes_1.HashPrefix.transactionSig, {
        definitions
      }));
    }
    exports.encodeForSigning = encodeForSigning;
    function encodeForSigningClaim(json) {
      if (typeof json !== "object") {
        throw new Error();
      }
      return (0, utils_1.bytesToHex)(signingClaimData(json));
    }
    exports.encodeForSigningClaim = encodeForSigningClaim;
    function encodeForMultisigning(json, signer, definitions) {
      if (typeof json !== "object") {
        throw new Error();
      }
      if (json["SigningPubKey"] !== "") {
        throw new Error();
      }
      const definitionsOpt = definitions ? { definitions } : void 0;
      return (0, utils_1.bytesToHex)(multiSigningData(json, signer, definitionsOpt));
    }
    exports.encodeForMultisigning = encodeForMultisigning;
    function encodeForSigningBatch(json) {
      if (typeof json !== "object") {
        throw new Error("Need an object to encode a Batch transaction");
      }
      return (0, utils_1.bytesToHex)(signingBatchData(json));
    }
    exports.encodeForSigningBatch = encodeForSigningBatch;
    function encodeQuality(value) {
      if (typeof value !== "string") {
        throw new Error();
      }
      return (0, utils_1.bytesToHex)(coretypes_1.quality.encode(value));
    }
    exports.encodeQuality = encodeQuality;
    function decodeQuality(value) {
      if (typeof value !== "string") {
        throw new Error();
      }
      return coretypes_1.quality.decode(value).toString();
    }
    exports.decodeQuality = decodeQuality;
  }
});

// node_modules/@noble/hashes/ripemd160.js
var require_ripemd160 = __commonJS({
  "node_modules/@noble/hashes/ripemd160.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ripemd160 = exports.RIPEMD160 = void 0;
    var _md_js_1 = require_md();
    var utils_js_1 = require_utils();
    var Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
    var Id = new Uint8Array(new Array(16).fill(0).map((_2, i) => i));
    var Pi = Id.map((i) => (9 * i + 5) % 16);
    var idxL = [Id];
    var idxR = [Pi];
    for (let i = 0; i < 4; i++)
      for (let j3 of [idxL, idxR])
        j3.push(j3[i].map((k2) => Rho[k2]));
    var shifts = [
      [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
      [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
      [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
      [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
      [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
    ].map((i) => new Uint8Array(i));
    var shiftsL = idxL.map((idx, i) => idx.map((j3) => shifts[i][j3]));
    var shiftsR = idxR.map((idx, i) => idx.map((j3) => shifts[i][j3]));
    var Kl = new Uint32Array([
      0,
      1518500249,
      1859775393,
      2400959708,
      2840853838
    ]);
    var Kr = new Uint32Array([
      1352829926,
      1548603684,
      1836072691,
      2053994217,
      0
    ]);
    function f(group, x, y, z2) {
      if (group === 0)
        return x ^ y ^ z2;
      else if (group === 1)
        return x & y | ~x & z2;
      else if (group === 2)
        return (x | ~y) ^ z2;
      else if (group === 3)
        return x & z2 | y & ~z2;
      else
        return x ^ (y | ~z2);
    }
    var R_BUF = new Uint32Array(16);
    var RIPEMD160 = class extends _md_js_1.HashMD {
      constructor() {
        super(64, 20, 8, true);
        this.h0 = 1732584193 | 0;
        this.h1 = 4023233417 | 0;
        this.h2 = 2562383102 | 0;
        this.h3 = 271733878 | 0;
        this.h4 = 3285377520 | 0;
      }
      get() {
        const { h0, h1, h2, h3, h4 } = this;
        return [h0, h1, h2, h3, h4];
      }
      set(h0, h1, h2, h3, h4) {
        this.h0 = h0 | 0;
        this.h1 = h1 | 0;
        this.h2 = h2 | 0;
        this.h3 = h3 | 0;
        this.h4 = h4 | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          R_BUF[i] = view.getUint32(offset, true);
        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
        for (let group = 0; group < 5; group++) {
          const rGroup = 4 - group;
          const hbl = Kl[group], hbr = Kr[group];
          const rl = idxL[group], rr = idxR[group];
          const sl = shiftsL[group], sr = shiftsR[group];
          for (let i = 0; i < 16; i++) {
            const tl = (0, utils_js_1.rotl)(al + f(group, bl, cl, dl) + R_BUF[rl[i]] + hbl, sl[i]) + el | 0;
            al = el, el = dl, dl = (0, utils_js_1.rotl)(cl, 10) | 0, cl = bl, bl = tl;
          }
          for (let i = 0; i < 16; i++) {
            const tr = (0, utils_js_1.rotl)(ar + f(rGroup, br, cr, dr) + R_BUF[rr[i]] + hbr, sr[i]) + er | 0;
            ar = er, er = dr, dr = (0, utils_js_1.rotl)(cr, 10) | 0, cr = br, br = tr;
          }
        }
        this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
      }
      roundClean() {
        R_BUF.fill(0);
      }
      destroy() {
        this.destroyed = true;
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0);
      }
    };
    exports.RIPEMD160 = RIPEMD160;
    exports.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());
  }
});

// node_modules/@xrplf/isomorphic/dist/ripemd160/browser.js
var require_browser5 = __commonJS({
  "node_modules/@xrplf/isomorphic/dist/ripemd160/browser.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ripemd160 = void 0;
    var ripemd160_1 = require_ripemd160();
    var wrapNoble_1 = __importDefault(require_wrapNoble());
    exports.ripemd160 = (0, wrapNoble_1.default)(ripemd160_1.ripemd160);
  }
});

// node_modules/@noble/curves/node_modules/@noble/hashes/crypto.js
var require_crypto = __commonJS({
  "node_modules/@noble/curves/node_modules/@noble/hashes/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crypto = void 0;
    exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  }
});

// node_modules/@noble/curves/node_modules/@noble/hashes/utils.js
var require_utils4 = __commonJS({
  "node_modules/@noble/curves/node_modules/@noble/hashes/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.Hash = exports.nextTick = exports.swap32IfBE = exports.byteSwapIfBE = exports.swap8IfBE = exports.isLE = void 0;
    exports.isBytes = isBytes;
    exports.anumber = anumber;
    exports.abytes = abytes2;
    exports.ahash = ahash;
    exports.aexists = aexists;
    exports.aoutput = aoutput;
    exports.u8 = u83;
    exports.u32 = u324;
    exports.clean = clean;
    exports.createView = createView2;
    exports.rotr = rotr;
    exports.rotl = rotl3;
    exports.byteSwap = byteSwap;
    exports.byteSwap32 = byteSwap322;
    exports.bytesToHex = bytesToHex2;
    exports.hexToBytes = hexToBytes;
    exports.asyncLoop = asyncLoop2;
    exports.utf8ToBytes = utf8ToBytes2;
    exports.bytesToUtf8 = bytesToUtf8;
    exports.toBytes = toBytes2;
    exports.kdfInputToBytes = kdfInputToBytes;
    exports.concatBytes = concatBytes2;
    exports.checkOpts = checkOpts2;
    exports.createHasher = createHasher2;
    exports.createOptHasher = createOptHasher;
    exports.createXOFer = createXOFer;
    exports.randomBytes = randomBytes2;
    var crypto_1 = require_crypto();
    function isBytes(a) {
      return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
    }
    function anumber(n) {
      if (!Number.isSafeInteger(n) || n < 0)
        throw new Error("positive integer expected, got " + n);
    }
    function abytes2(b2, ...lengths) {
      if (!isBytes(b2))
        throw new Error("Uint8Array expected");
      if (lengths.length > 0 && !lengths.includes(b2.length))
        throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b2.length);
    }
    function ahash(h2) {
      if (typeof h2 !== "function" || typeof h2.create !== "function")
        throw new Error("Hash should be wrapped by utils.createHasher");
      anumber(h2.outputLen);
      anumber(h2.blockLen);
    }
    function aexists(instance, checkFinished = true) {
      if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance.finished)
        throw new Error("Hash#digest() has already been called");
    }
    function aoutput(out, instance) {
      abytes2(out);
      const min2 = instance.outputLen;
      if (out.length < min2) {
        throw new Error("digestInto() expects output buffer of length at least " + min2);
      }
    }
    function u83(arr) {
      return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    }
    function u324(arr) {
      return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    }
    function clean(...arrays) {
      for (let i = 0; i < arrays.length; i++) {
        arrays[i].fill(0);
      }
    }
    function createView2(arr) {
      return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    }
    function rotr(word, shift) {
      return word << 32 - shift | word >>> shift;
    }
    function rotl3(word, shift) {
      return word << shift | word >>> 32 - shift >>> 0;
    }
    exports.isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
    function byteSwap(word) {
      return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
    }
    exports.swap8IfBE = exports.isLE ? (n) => n : (n) => byteSwap(n);
    exports.byteSwapIfBE = exports.swap8IfBE;
    function byteSwap322(arr) {
      for (let i = 0; i < arr.length; i++) {
        arr[i] = byteSwap(arr[i]);
      }
      return arr;
    }
    exports.swap32IfBE = exports.isLE ? (u) => u : byteSwap322;
    var hasHexBuiltin = (() => (
      // @ts-ignore
      typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
    ))();
    var hexes = Array.from({ length: 256 }, (_2, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex2(bytes3) {
      abytes2(bytes3);
      if (hasHexBuiltin)
        return bytes3.toHex();
      let hex2 = "";
      for (let i = 0; i < bytes3.length; i++) {
        hex2 += hexes[bytes3[i]];
      }
      return hex2;
    }
    var asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
    function asciiToBase16(ch) {
      if (ch >= asciis._0 && ch <= asciis._9)
        return ch - asciis._0;
      if (ch >= asciis.A && ch <= asciis.F)
        return ch - (asciis.A - 10);
      if (ch >= asciis.a && ch <= asciis.f)
        return ch - (asciis.a - 10);
      return;
    }
    function hexToBytes(hex2) {
      if (typeof hex2 !== "string")
        throw new Error("hex string expected, got " + typeof hex2);
      if (hasHexBuiltin)
        return Uint8Array.fromHex(hex2);
      const hl = hex2.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("hex string expected, got unpadded hex of length " + hl);
      const array = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex2.charCodeAt(hi));
        const n2 = asciiToBase16(hex2.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex2[hi] + hex2[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
      }
      return array;
    }
    var nextTick2 = async () => {
    };
    exports.nextTick = nextTick2;
    async function asyncLoop2(iters, tick, cb) {
      let ts = Date.now();
      for (let i = 0; i < iters; i++) {
        cb(i);
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
          continue;
        await (0, exports.nextTick)();
        ts += diff;
      }
    }
    function utf8ToBytes2(str) {
      if (typeof str !== "string")
        throw new Error("string expected");
      return new Uint8Array(new TextEncoder().encode(str));
    }
    function bytesToUtf8(bytes3) {
      return new TextDecoder().decode(bytes3);
    }
    function toBytes2(data) {
      if (typeof data === "string")
        data = utf8ToBytes2(data);
      abytes2(data);
      return data;
    }
    function kdfInputToBytes(data) {
      if (typeof data === "string")
        data = utf8ToBytes2(data);
      abytes2(data);
      return data;
    }
    function concatBytes2(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes2(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    function checkOpts2(defaults2, opts) {
      if (opts !== void 0 && {}.toString.call(opts) !== "[object Object]")
        throw new Error("options should be object or undefined");
      const merged = Object.assign(defaults2, opts);
      return merged;
    }
    var Hash2 = class {
    };
    exports.Hash = Hash2;
    function createHasher2(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    function createOptHasher(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    function createXOFer(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapConstructor = createHasher2;
    exports.wrapConstructorWithOpts = createOptHasher;
    exports.wrapXOFConstructorWithOpts = createXOFer;
    function randomBytes2(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      if (crypto_1.crypto && typeof crypto_1.crypto.randomBytes === "function") {
        return Uint8Array.from(crypto_1.crypto.randomBytes(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
  }
});

// node_modules/@noble/curves/node_modules/@noble/hashes/_md.js
var require_md2 = __commonJS({
  "node_modules/@noble/curves/node_modules/@noble/hashes/_md.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SHA512_IV = exports.SHA384_IV = exports.SHA224_IV = exports.SHA256_IV = exports.HashMD = void 0;
    exports.setBigUint64 = setBigUint64;
    exports.Chi = Chi;
    exports.Maj = Maj;
    var utils_ts_1 = require_utils4();
    function setBigUint64(view, byteOffset, value, isLE2) {
      if (typeof view.setBigUint64 === "function")
        return view.setBigUint64(byteOffset, value, isLE2);
      const _32n3 = BigInt(32);
      const _u32_max = BigInt(4294967295);
      const wh = Number(value >> _32n3 & _u32_max);
      const wl = Number(value & _u32_max);
      const h2 = isLE2 ? 4 : 0;
      const l17 = isLE2 ? 0 : 4;
      view.setUint32(byteOffset + h2, wh, isLE2);
      view.setUint32(byteOffset + l17, wl, isLE2);
    }
    function Chi(a, b2, c) {
      return a & b2 ^ ~a & c;
    }
    function Maj(a, b2, c) {
      return a & b2 ^ a & c ^ b2 & c;
    }
    var HashMD2 = class extends utils_ts_1.Hash {
      constructor(blockLen, outputLen, padOffset, isLE2) {
        super();
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE2;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_ts_1.createView)(this.buffer);
      }
      update(data) {
        (0, utils_ts_1.aexists)(this);
        data = (0, utils_ts_1.toBytes)(data);
        (0, utils_ts_1.abytes)(data);
        const { view, buffer: buffer2, blockLen } = this;
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take2 = Math.min(blockLen - this.pos, len - pos);
          if (take2 === blockLen) {
            const dataView = (0, utils_ts_1.createView)(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer2.set(data.subarray(pos, pos + take2), this.pos);
          this.pos += take2;
          pos += take2;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        (0, utils_ts_1.aexists)(this);
        (0, utils_ts_1.aoutput)(out, this);
        this.finished = true;
        const { buffer: buffer2, view, blockLen, isLE: isLE2 } = this;
        let { pos } = this;
        buffer2[pos++] = 128;
        (0, utils_ts_1.clean)(this.buffer.subarray(pos));
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i = pos; i < blockLen; i++)
          buffer2[i] = 0;
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
        this.process(view, 0);
        const oview = (0, utils_ts_1.createView)(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i = 0; i < outLen; i++)
          oview.setUint32(4 * i, state[i], isLE2);
      }
      digest() {
        const { buffer: buffer2, outputLen } = this;
        this.digestInto(buffer2);
        const res = buffer2.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
        to.destroyed = destroyed;
        to.finished = finished;
        to.length = length;
        to.pos = pos;
        if (length % blockLen)
          to.buffer.set(buffer2);
        return to;
      }
      clone() {
        return this._cloneInto();
      }
    };
    exports.HashMD = HashMD2;
    exports.SHA256_IV = Uint32Array.from([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    exports.SHA224_IV = Uint32Array.from([
      3238371032,
      914150663,
      812702999,
      4144912697,
      4290775857,
      1750603025,
      1694076839,
      3204075428
    ]);
    exports.SHA384_IV = Uint32Array.from([
      3418070365,
      3238371032,
      1654270250,
      914150663,
      2438529370,
      812702999,
      355462360,
      4144912697,
      1731405415,
      4290775857,
      2394180231,
      1750603025,
      3675008525,
      1694076839,
      1203062813,
      3204075428
    ]);
    exports.SHA512_IV = Uint32Array.from([
      1779033703,
      4089235720,
      3144134277,
      2227873595,
      1013904242,
      4271175723,
      2773480762,
      1595750129,
      1359893119,
      2917565137,
      2600822924,
      725511199,
      528734635,
      4215389547,
      1541459225,
      327033209
    ]);
  }
});

// node_modules/@noble/curves/node_modules/@noble/hashes/_u64.js
var require_u642 = __commonJS({
  "node_modules/@noble/curves/node_modules/@noble/hashes/_u64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBig = exports.shrSL = exports.shrSH = exports.rotrSL = exports.rotrSH = exports.rotrBL = exports.rotrBH = exports.rotr32L = exports.rotr32H = exports.rotlSL = exports.rotlSH = exports.rotlBL = exports.rotlBH = exports.add5L = exports.add5H = exports.add4L = exports.add4H = exports.add3L = exports.add3H = void 0;
    exports.add = add2;
    exports.fromBig = fromBig2;
    exports.split = split2;
    var U32_MASK642 = BigInt(2 ** 32 - 1);
    var _32n3 = BigInt(32);
    function fromBig2(n, le2 = false) {
      if (le2)
        return { h: Number(n & U32_MASK642), l: Number(n >> _32n3 & U32_MASK642) };
      return { h: Number(n >> _32n3 & U32_MASK642) | 0, l: Number(n & U32_MASK642) | 0 };
    }
    function split2(lst, le2 = false) {
      const len = lst.length;
      let Ah = new Uint32Array(len);
      let Al = new Uint32Array(len);
      for (let i = 0; i < len; i++) {
        const { h: h2, l: l17 } = fromBig2(lst[i], le2);
        [Ah[i], Al[i]] = [h2, l17];
      }
      return [Ah, Al];
    }
    var toBig2 = (h2, l17) => BigInt(h2 >>> 0) << _32n3 | BigInt(l17 >>> 0);
    exports.toBig = toBig2;
    var shrSH2 = (h2, _l, s) => h2 >>> s;
    exports.shrSH = shrSH2;
    var shrSL2 = (h2, l17, s) => h2 << 32 - s | l17 >>> s;
    exports.shrSL = shrSL2;
    var rotrSH2 = (h2, l17, s) => h2 >>> s | l17 << 32 - s;
    exports.rotrSH = rotrSH2;
    var rotrSL2 = (h2, l17, s) => h2 << 32 - s | l17 >>> s;
    exports.rotrSL = rotrSL2;
    var rotrBH2 = (h2, l17, s) => h2 << 64 - s | l17 >>> s - 32;
    exports.rotrBH = rotrBH2;
    var rotrBL2 = (h2, l17, s) => h2 >>> s - 32 | l17 << 64 - s;
    exports.rotrBL = rotrBL2;
    var rotr32H2 = (_h, l17) => l17;
    exports.rotr32H = rotr32H2;
    var rotr32L2 = (h2, _l) => h2;
    exports.rotr32L = rotr32L2;
    var rotlSH2 = (h2, l17, s) => h2 << s | l17 >>> 32 - s;
    exports.rotlSH = rotlSH2;
    var rotlSL2 = (h2, l17, s) => l17 << s | h2 >>> 32 - s;
    exports.rotlSL = rotlSL2;
    var rotlBH2 = (h2, l17, s) => l17 << s - 32 | h2 >>> 64 - s;
    exports.rotlBH = rotlBH2;
    var rotlBL2 = (h2, l17, s) => h2 << s - 32 | l17 >>> 64 - s;
    exports.rotlBL = rotlBL2;
    function add2(Ah, Al, Bh, Bl) {
      const l17 = (Al >>> 0) + (Bl >>> 0);
      return { h: Ah + Bh + (l17 / 2 ** 32 | 0) | 0, l: l17 | 0 };
    }
    var add3L2 = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    exports.add3L = add3L2;
    var add3H2 = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
    exports.add3H = add3H2;
    var add4L2 = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    exports.add4L = add4L2;
    var add4H2 = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
    exports.add4H = add4H2;
    var add5L2 = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    exports.add5L = add5L2;
    var add5H2 = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    exports.add5H = add5H2;
    var u643 = {
      fromBig: fromBig2,
      split: split2,
      toBig: toBig2,
      shrSH: shrSH2,
      shrSL: shrSL2,
      rotrSH: rotrSH2,
      rotrSL: rotrSL2,
      rotrBH: rotrBH2,
      rotrBL: rotrBL2,
      rotr32H: rotr32H2,
      rotr32L: rotr32L2,
      rotlSH: rotlSH2,
      rotlSL: rotlSL2,
      rotlBH: rotlBH2,
      rotlBL: rotlBL2,
      add: add2,
      add3L: add3L2,
      add3H: add3H2,
      add4L: add4L2,
      add4H: add4H2,
      add5H: add5H2,
      add5L: add5L2
    };
    exports.default = u643;
  }
});

// node_modules/@noble/curves/node_modules/@noble/hashes/sha2.js
var require_sha2 = __commonJS({
  "node_modules/@noble/curves/node_modules/@noble/hashes/sha2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha512_224 = exports.sha512_256 = exports.sha384 = exports.sha512 = exports.sha224 = exports.sha256 = exports.SHA512_256 = exports.SHA512_224 = exports.SHA384 = exports.SHA512 = exports.SHA224 = exports.SHA256 = void 0;
    var _md_ts_1 = require_md2();
    var u643 = require_u642();
    var utils_ts_1 = require_utils4();
    var SHA256_K = Uint32Array.from([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    var SHA256_W = new Uint32Array(64);
    var SHA256 = class extends _md_ts_1.HashMD {
      constructor(outputLen = 32) {
        super(64, outputLen, 8, false);
        this.A = _md_ts_1.SHA256_IV[0] | 0;
        this.B = _md_ts_1.SHA256_IV[1] | 0;
        this.C = _md_ts_1.SHA256_IV[2] | 0;
        this.D = _md_ts_1.SHA256_IV[3] | 0;
        this.E = _md_ts_1.SHA256_IV[4] | 0;
        this.F = _md_ts_1.SHA256_IV[5] | 0;
        this.G = _md_ts_1.SHA256_IV[6] | 0;
        this.H = _md_ts_1.SHA256_IV[7] | 0;
      }
      get() {
        const { A: A2, B, C, D, E: E2, F: F2, G: G2, H: H2 } = this;
        return [A2, B, C, D, E2, F2, G2, H2];
      }
      // prettier-ignore
      set(A2, B, C, D, E2, F2, G2, H2) {
        this.A = A2 | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E2 | 0;
        this.F = F2 | 0;
        this.G = G2 | 0;
        this.H = H2 | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
          const W15 = SHA256_W[i - 15];
          const W2 = SHA256_W[i - 2];
          const s0 = (0, utils_ts_1.rotr)(W15, 7) ^ (0, utils_ts_1.rotr)(W15, 18) ^ W15 >>> 3;
          const s1 = (0, utils_ts_1.rotr)(W2, 17) ^ (0, utils_ts_1.rotr)(W2, 19) ^ W2 >>> 10;
          SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        let { A: A2, B, C, D, E: E2, F: F2, G: G2, H: H2 } = this;
        for (let i = 0; i < 64; i++) {
          const sigma1 = (0, utils_ts_1.rotr)(E2, 6) ^ (0, utils_ts_1.rotr)(E2, 11) ^ (0, utils_ts_1.rotr)(E2, 25);
          const T1 = H2 + sigma1 + (0, _md_ts_1.Chi)(E2, F2, G2) + SHA256_K[i] + SHA256_W[i] | 0;
          const sigma0 = (0, utils_ts_1.rotr)(A2, 2) ^ (0, utils_ts_1.rotr)(A2, 13) ^ (0, utils_ts_1.rotr)(A2, 22);
          const T2 = sigma0 + (0, _md_ts_1.Maj)(A2, B, C) | 0;
          H2 = G2;
          G2 = F2;
          F2 = E2;
          E2 = D + T1 | 0;
          D = C;
          C = B;
          B = A2;
          A2 = T1 + T2 | 0;
        }
        A2 = A2 + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E2 = E2 + this.E | 0;
        F2 = F2 + this.F | 0;
        G2 = G2 + this.G | 0;
        H2 = H2 + this.H | 0;
        this.set(A2, B, C, D, E2, F2, G2, H2);
      }
      roundClean() {
        (0, utils_ts_1.clean)(SHA256_W);
      }
      destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        (0, utils_ts_1.clean)(this.buffer);
      }
    };
    exports.SHA256 = SHA256;
    var SHA224 = class extends SHA256 {
      constructor() {
        super(28);
        this.A = _md_ts_1.SHA224_IV[0] | 0;
        this.B = _md_ts_1.SHA224_IV[1] | 0;
        this.C = _md_ts_1.SHA224_IV[2] | 0;
        this.D = _md_ts_1.SHA224_IV[3] | 0;
        this.E = _md_ts_1.SHA224_IV[4] | 0;
        this.F = _md_ts_1.SHA224_IV[5] | 0;
        this.G = _md_ts_1.SHA224_IV[6] | 0;
        this.H = _md_ts_1.SHA224_IV[7] | 0;
      }
    };
    exports.SHA224 = SHA224;
    var K512 = (() => u643.split([
      "0x428a2f98d728ae22",
      "0x7137449123ef65cd",
      "0xb5c0fbcfec4d3b2f",
      "0xe9b5dba58189dbbc",
      "0x3956c25bf348b538",
      "0x59f111f1b605d019",
      "0x923f82a4af194f9b",
      "0xab1c5ed5da6d8118",
      "0xd807aa98a3030242",
      "0x12835b0145706fbe",
      "0x243185be4ee4b28c",
      "0x550c7dc3d5ffb4e2",
      "0x72be5d74f27b896f",
      "0x80deb1fe3b1696b1",
      "0x9bdc06a725c71235",
      "0xc19bf174cf692694",
      "0xe49b69c19ef14ad2",
      "0xefbe4786384f25e3",
      "0x0fc19dc68b8cd5b5",
      "0x240ca1cc77ac9c65",
      "0x2de92c6f592b0275",
      "0x4a7484aa6ea6e483",
      "0x5cb0a9dcbd41fbd4",
      "0x76f988da831153b5",
      "0x983e5152ee66dfab",
      "0xa831c66d2db43210",
      "0xb00327c898fb213f",
      "0xbf597fc7beef0ee4",
      "0xc6e00bf33da88fc2",
      "0xd5a79147930aa725",
      "0x06ca6351e003826f",
      "0x142929670a0e6e70",
      "0x27b70a8546d22ffc",
      "0x2e1b21385c26c926",
      "0x4d2c6dfc5ac42aed",
      "0x53380d139d95b3df",
      "0x650a73548baf63de",
      "0x766a0abb3c77b2a8",
      "0x81c2c92e47edaee6",
      "0x92722c851482353b",
      "0xa2bfe8a14cf10364",
      "0xa81a664bbc423001",
      "0xc24b8b70d0f89791",
      "0xc76c51a30654be30",
      "0xd192e819d6ef5218",
      "0xd69906245565a910",
      "0xf40e35855771202a",
      "0x106aa07032bbd1b8",
      "0x19a4c116b8d2d0c8",
      "0x1e376c085141ab53",
      "0x2748774cdf8eeb99",
      "0x34b0bcb5e19b48a8",
      "0x391c0cb3c5c95a63",
      "0x4ed8aa4ae3418acb",
      "0x5b9cca4f7763e373",
      "0x682e6ff3d6b2b8a3",
      "0x748f82ee5defb2fc",
      "0x78a5636f43172f60",
      "0x84c87814a1f0ab72",
      "0x8cc702081a6439ec",
      "0x90befffa23631e28",
      "0xa4506cebde82bde9",
      "0xbef9a3f7b2c67915",
      "0xc67178f2e372532b",
      "0xca273eceea26619c",
      "0xd186b8c721c0c207",
      "0xeada7dd6cde0eb1e",
      "0xf57d4f7fee6ed178",
      "0x06f067aa72176fba",
      "0x0a637dc5a2c898a6",
      "0x113f9804bef90dae",
      "0x1b710b35131c471b",
      "0x28db77f523047d84",
      "0x32caab7b40c72493",
      "0x3c9ebe0a15c9bebc",
      "0x431d67c49c100d4c",
      "0x4cc5d4becb3e42b6",
      "0x597f299cfc657e2a",
      "0x5fcb6fab3ad6faec",
      "0x6c44198c4a475817"
    ].map((n) => BigInt(n))))();
    var SHA512_Kh2 = (() => K512[0])();
    var SHA512_Kl2 = (() => K512[1])();
    var SHA512_W_H2 = new Uint32Array(80);
    var SHA512_W_L2 = new Uint32Array(80);
    var SHA5122 = class extends _md_ts_1.HashMD {
      constructor(outputLen = 64) {
        super(128, outputLen, 16, false);
        this.Ah = _md_ts_1.SHA512_IV[0] | 0;
        this.Al = _md_ts_1.SHA512_IV[1] | 0;
        this.Bh = _md_ts_1.SHA512_IV[2] | 0;
        this.Bl = _md_ts_1.SHA512_IV[3] | 0;
        this.Ch = _md_ts_1.SHA512_IV[4] | 0;
        this.Cl = _md_ts_1.SHA512_IV[5] | 0;
        this.Dh = _md_ts_1.SHA512_IV[6] | 0;
        this.Dl = _md_ts_1.SHA512_IV[7] | 0;
        this.Eh = _md_ts_1.SHA512_IV[8] | 0;
        this.El = _md_ts_1.SHA512_IV[9] | 0;
        this.Fh = _md_ts_1.SHA512_IV[10] | 0;
        this.Fl = _md_ts_1.SHA512_IV[11] | 0;
        this.Gh = _md_ts_1.SHA512_IV[12] | 0;
        this.Gl = _md_ts_1.SHA512_IV[13] | 0;
        this.Hh = _md_ts_1.SHA512_IV[14] | 0;
        this.Hl = _md_ts_1.SHA512_IV[15] | 0;
      }
      // prettier-ignore
      get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
      }
      // prettier-ignore
      set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4) {
          SHA512_W_H2[i] = view.getUint32(offset);
          SHA512_W_L2[i] = view.getUint32(offset += 4);
        }
        for (let i = 16; i < 80; i++) {
          const W15h = SHA512_W_H2[i - 15] | 0;
          const W15l = SHA512_W_L2[i - 15] | 0;
          const s0h = u643.rotrSH(W15h, W15l, 1) ^ u643.rotrSH(W15h, W15l, 8) ^ u643.shrSH(W15h, W15l, 7);
          const s0l = u643.rotrSL(W15h, W15l, 1) ^ u643.rotrSL(W15h, W15l, 8) ^ u643.shrSL(W15h, W15l, 7);
          const W2h = SHA512_W_H2[i - 2] | 0;
          const W2l = SHA512_W_L2[i - 2] | 0;
          const s1h = u643.rotrSH(W2h, W2l, 19) ^ u643.rotrBH(W2h, W2l, 61) ^ u643.shrSH(W2h, W2l, 6);
          const s1l = u643.rotrSL(W2h, W2l, 19) ^ u643.rotrBL(W2h, W2l, 61) ^ u643.shrSL(W2h, W2l, 6);
          const SUMl = u643.add4L(s0l, s1l, SHA512_W_L2[i - 7], SHA512_W_L2[i - 16]);
          const SUMh = u643.add4H(SUMl, s0h, s1h, SHA512_W_H2[i - 7], SHA512_W_H2[i - 16]);
          SHA512_W_H2[i] = SUMh | 0;
          SHA512_W_L2[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        for (let i = 0; i < 80; i++) {
          const sigma1h = u643.rotrSH(Eh, El, 14) ^ u643.rotrSH(Eh, El, 18) ^ u643.rotrBH(Eh, El, 41);
          const sigma1l = u643.rotrSL(Eh, El, 14) ^ u643.rotrSL(Eh, El, 18) ^ u643.rotrBL(Eh, El, 41);
          const CHIh = Eh & Fh ^ ~Eh & Gh;
          const CHIl = El & Fl ^ ~El & Gl;
          const T1ll = u643.add5L(Hl, sigma1l, CHIl, SHA512_Kl2[i], SHA512_W_L2[i]);
          const T1h = u643.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh2[i], SHA512_W_H2[i]);
          const T1l = T1ll | 0;
          const sigma0h = u643.rotrSH(Ah, Al, 28) ^ u643.rotrBH(Ah, Al, 34) ^ u643.rotrBH(Ah, Al, 39);
          const sigma0l = u643.rotrSL(Ah, Al, 28) ^ u643.rotrBL(Ah, Al, 34) ^ u643.rotrBL(Ah, Al, 39);
          const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
          const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
          Hh = Gh | 0;
          Hl = Gl | 0;
          Gh = Fh | 0;
          Gl = Fl | 0;
          Fh = Eh | 0;
          Fl = El | 0;
          ({ h: Eh, l: El } = u643.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
          Dh = Ch | 0;
          Dl = Cl | 0;
          Ch = Bh | 0;
          Cl = Bl | 0;
          Bh = Ah | 0;
          Bl = Al | 0;
          const All = u643.add3L(T1l, sigma0l, MAJl);
          Ah = u643.add3H(All, T1h, sigma0h, MAJh);
          Al = All | 0;
        }
        ({ h: Ah, l: Al } = u643.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = u643.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = u643.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = u643.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = u643.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = u643.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = u643.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = u643.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
      }
      roundClean() {
        (0, utils_ts_1.clean)(SHA512_W_H2, SHA512_W_L2);
      }
      destroy() {
        (0, utils_ts_1.clean)(this.buffer);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
    };
    exports.SHA512 = SHA5122;
    var SHA3842 = class extends SHA5122 {
      constructor() {
        super(48);
        this.Ah = _md_ts_1.SHA384_IV[0] | 0;
        this.Al = _md_ts_1.SHA384_IV[1] | 0;
        this.Bh = _md_ts_1.SHA384_IV[2] | 0;
        this.Bl = _md_ts_1.SHA384_IV[3] | 0;
        this.Ch = _md_ts_1.SHA384_IV[4] | 0;
        this.Cl = _md_ts_1.SHA384_IV[5] | 0;
        this.Dh = _md_ts_1.SHA384_IV[6] | 0;
        this.Dl = _md_ts_1.SHA384_IV[7] | 0;
        this.Eh = _md_ts_1.SHA384_IV[8] | 0;
        this.El = _md_ts_1.SHA384_IV[9] | 0;
        this.Fh = _md_ts_1.SHA384_IV[10] | 0;
        this.Fl = _md_ts_1.SHA384_IV[11] | 0;
        this.Gh = _md_ts_1.SHA384_IV[12] | 0;
        this.Gl = _md_ts_1.SHA384_IV[13] | 0;
        this.Hh = _md_ts_1.SHA384_IV[14] | 0;
        this.Hl = _md_ts_1.SHA384_IV[15] | 0;
      }
    };
    exports.SHA384 = SHA3842;
    var T224_IV = Uint32Array.from([
      2352822216,
      424955298,
      1944164710,
      2312950998,
      502970286,
      855612546,
      1738396948,
      1479516111,
      258812777,
      2077511080,
      2011393907,
      79989058,
      1067287976,
      1780299464,
      286451373,
      2446758561
    ]);
    var T256_IV = Uint32Array.from([
      573645204,
      4230739756,
      2673172387,
      3360449730,
      596883563,
      1867755857,
      2520282905,
      1497426621,
      2519219938,
      2827943907,
      3193839141,
      1401305490,
      721525244,
      746961066,
      246885852,
      2177182882
    ]);
    var SHA512_2242 = class extends SHA5122 {
      constructor() {
        super(28);
        this.Ah = T224_IV[0] | 0;
        this.Al = T224_IV[1] | 0;
        this.Bh = T224_IV[2] | 0;
        this.Bl = T224_IV[3] | 0;
        this.Ch = T224_IV[4] | 0;
        this.Cl = T224_IV[5] | 0;
        this.Dh = T224_IV[6] | 0;
        this.Dl = T224_IV[7] | 0;
        this.Eh = T224_IV[8] | 0;
        this.El = T224_IV[9] | 0;
        this.Fh = T224_IV[10] | 0;
        this.Fl = T224_IV[11] | 0;
        this.Gh = T224_IV[12] | 0;
        this.Gl = T224_IV[13] | 0;
        this.Hh = T224_IV[14] | 0;
        this.Hl = T224_IV[15] | 0;
      }
    };
    exports.SHA512_224 = SHA512_2242;
    var SHA512_2562 = class extends SHA5122 {
      constructor() {
        super(32);
        this.Ah = T256_IV[0] | 0;
        this.Al = T256_IV[1] | 0;
        this.Bh = T256_IV[2] | 0;
        this.Bl = T256_IV[3] | 0;
        this.Ch = T256_IV[4] | 0;
        this.Cl = T256_IV[5] | 0;
        this.Dh = T256_IV[6] | 0;
        this.Dl = T256_IV[7] | 0;
        this.Eh = T256_IV[8] | 0;
        this.El = T256_IV[9] | 0;
        this.Fh = T256_IV[10] | 0;
        this.Fl = T256_IV[11] | 0;
        this.Gh = T256_IV[12] | 0;
        this.Gl = T256_IV[13] | 0;
        this.Hh = T256_IV[14] | 0;
        this.Hl = T256_IV[15] | 0;
      }
    };
    exports.SHA512_256 = SHA512_2562;
    exports.sha256 = (0, utils_ts_1.createHasher)(() => new SHA256());
    exports.sha224 = (0, utils_ts_1.createHasher)(() => new SHA224());
    exports.sha512 = (0, utils_ts_1.createHasher)(() => new SHA5122());
    exports.sha384 = (0, utils_ts_1.createHasher)(() => new SHA3842());
    exports.sha512_256 = (0, utils_ts_1.createHasher)(() => new SHA512_2562());
    exports.sha512_224 = (0, utils_ts_1.createHasher)(() => new SHA512_2242());
  }
});

// node_modules/@noble/curves/node_modules/@noble/hashes/hmac.js
var require_hmac = __commonJS({
  "node_modules/@noble/curves/node_modules/@noble/hashes/hmac.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hmac = exports.HMAC = void 0;
    var utils_ts_1 = require_utils4();
    var HMAC2 = class extends utils_ts_1.Hash {
      constructor(hash2, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, utils_ts_1.ahash)(hash2);
        const key = (0, utils_ts_1.toBytes)(_key);
        this.iHash = hash2.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash2.create();
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        (0, utils_ts_1.clean)(pad);
      }
      update(buf) {
        (0, utils_ts_1.aexists)(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        (0, utils_ts_1.aexists)(this);
        (0, utils_ts_1.abytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      clone() {
        return this._cloneInto();
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    };
    exports.HMAC = HMAC2;
    var hmac2 = (hash2, key, message) => new HMAC2(hash2, key).update(message).digest();
    exports.hmac = hmac2;
    exports.hmac.create = (hash2, key) => new HMAC2(hash2, key);
  }
});

// node_modules/@noble/curves/utils.js
var require_utils5 = __commonJS({
  "node_modules/@noble/curves/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.notImplemented = exports.bitMask = exports.utf8ToBytes = exports.randomBytes = exports.isBytes = exports.hexToBytes = exports.concatBytes = exports.bytesToUtf8 = exports.bytesToHex = exports.anumber = exports.abytes = void 0;
    exports.abool = abool2;
    exports.numberToHexUnpadded = numberToHexUnpadded;
    exports.hexToNumber = hexToNumber3;
    exports.bytesToNumberBE = bytesToNumberBE;
    exports.bytesToNumberLE = bytesToNumberLE2;
    exports.numberToBytesBE = numberToBytesBE;
    exports.numberToBytesLE = numberToBytesLE2;
    exports.numberToVarBytesBE = numberToVarBytesBE;
    exports.ensureBytes = ensureBytes2;
    exports.equalBytes = equalBytes2;
    exports.inRange = inRange;
    exports.aInRange = aInRange2;
    exports.bitLen = bitLen;
    exports.bitGet = bitGet;
    exports.bitSet = bitSet;
    exports.createHmacDrbg = createHmacDrbg;
    exports.validateObject = validateObject;
    exports.isHash = isHash;
    exports._validateObject = _validateObject2;
    exports.memoized = memoized2;
    var utils_js_1 = require_utils4();
    var utils_js_2 = require_utils4();
    Object.defineProperty(exports, "abytes", { enumerable: true, get: function() {
      return utils_js_2.abytes;
    } });
    Object.defineProperty(exports, "anumber", { enumerable: true, get: function() {
      return utils_js_2.anumber;
    } });
    Object.defineProperty(exports, "bytesToHex", { enumerable: true, get: function() {
      return utils_js_2.bytesToHex;
    } });
    Object.defineProperty(exports, "bytesToUtf8", { enumerable: true, get: function() {
      return utils_js_2.bytesToUtf8;
    } });
    Object.defineProperty(exports, "concatBytes", { enumerable: true, get: function() {
      return utils_js_2.concatBytes;
    } });
    Object.defineProperty(exports, "hexToBytes", { enumerable: true, get: function() {
      return utils_js_2.hexToBytes;
    } });
    Object.defineProperty(exports, "isBytes", { enumerable: true, get: function() {
      return utils_js_2.isBytes;
    } });
    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function() {
      return utils_js_2.randomBytes;
    } });
    Object.defineProperty(exports, "utf8ToBytes", { enumerable: true, get: function() {
      return utils_js_2.utf8ToBytes;
    } });
    var _0n6 = BigInt(0);
    var _1n6 = BigInt(1);
    function abool2(title, value) {
      if (typeof value !== "boolean")
        throw new Error(title + " boolean expected, got " + value);
    }
    function numberToHexUnpadded(num) {
      const hex2 = num.toString(16);
      return hex2.length & 1 ? "0" + hex2 : hex2;
    }
    function hexToNumber3(hex2) {
      if (typeof hex2 !== "string")
        throw new Error("hex string expected, got " + typeof hex2);
      return hex2 === "" ? _0n6 : BigInt("0x" + hex2);
    }
    function bytesToNumberBE(bytes3) {
      return hexToNumber3((0, utils_js_1.bytesToHex)(bytes3));
    }
    function bytesToNumberLE2(bytes3) {
      (0, utils_js_1.abytes)(bytes3);
      return hexToNumber3((0, utils_js_1.bytesToHex)(Uint8Array.from(bytes3).reverse()));
    }
    function numberToBytesBE(n, len) {
      return (0, utils_js_1.hexToBytes)(n.toString(16).padStart(len * 2, "0"));
    }
    function numberToBytesLE2(n, len) {
      return numberToBytesBE(n, len).reverse();
    }
    function numberToVarBytesBE(n) {
      return (0, utils_js_1.hexToBytes)(numberToHexUnpadded(n));
    }
    function ensureBytes2(title, hex2, expectedLength) {
      let res;
      if (typeof hex2 === "string") {
        try {
          res = (0, utils_js_1.hexToBytes)(hex2);
        } catch (e) {
          throw new Error(title + " must be hex string or Uint8Array, cause: " + e);
        }
      } else if ((0, utils_js_1.isBytes)(hex2)) {
        res = Uint8Array.from(hex2);
      } else {
        throw new Error(title + " must be hex string or Uint8Array");
      }
      const len = res.length;
      if (typeof expectedLength === "number" && len !== expectedLength)
        throw new Error(title + " of length " + expectedLength + " expected, got " + len);
      return res;
    }
    function equalBytes2(a, b2) {
      if (a.length !== b2.length)
        return false;
      let diff = 0;
      for (let i = 0; i < a.length; i++)
        diff |= a[i] ^ b2[i];
      return diff === 0;
    }
    var isPosBig = (n) => typeof n === "bigint" && _0n6 <= n;
    function inRange(n, min2, max3) {
      return isPosBig(n) && isPosBig(min2) && isPosBig(max3) && min2 <= n && n < max3;
    }
    function aInRange2(title, n, min2, max3) {
      if (!inRange(n, min2, max3))
        throw new Error("expected valid " + title + ": " + min2 + " <= n < " + max3 + ", got " + n);
    }
    function bitLen(n) {
      let len;
      for (len = 0; n > _0n6; n >>= _1n6, len += 1)
        ;
      return len;
    }
    function bitGet(n, pos) {
      return n >> BigInt(pos) & _1n6;
    }
    function bitSet(n, pos, value) {
      return n | (value ? _1n6 : _0n6) << BigInt(pos);
    }
    var bitMask = (n) => (_1n6 << BigInt(n)) - _1n6;
    exports.bitMask = bitMask;
    function createHmacDrbg(hashLen, qByteLen, hmacFn) {
      if (typeof hashLen !== "number" || hashLen < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      if (typeof hmacFn !== "function")
        throw new Error("hmacFn must be a function");
      const u8n = (len) => new Uint8Array(len);
      const u8of = (byte) => Uint8Array.of(byte);
      let v3 = u8n(hashLen);
      let k2 = u8n(hashLen);
      let i = 0;
      const reset = () => {
        v3.fill(1);
        k2.fill(0);
        i = 0;
      };
      const h2 = (...b2) => hmacFn(k2, v3, ...b2);
      const reseed = (seed = u8n(0)) => {
        k2 = h2(u8of(0), seed);
        v3 = h2();
        if (seed.length === 0)
          return;
        k2 = h2(u8of(1), seed);
        v3 = h2();
      };
      const gen2 = () => {
        if (i++ >= 1e3)
          throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while (len < qByteLen) {
          v3 = h2();
          const sl = v3.slice();
          out.push(sl);
          len += v3.length;
        }
        return (0, utils_js_1.concatBytes)(...out);
      };
      const genUntil = (seed, pred) => {
        reset();
        reseed(seed);
        let res = void 0;
        while (!(res = pred(gen2())))
          reseed();
        reset();
        return res;
      };
      return genUntil;
    }
    var validatorFns = {
      bigint: (val) => typeof val === "bigint",
      function: (val) => typeof val === "function",
      boolean: (val) => typeof val === "boolean",
      string: (val) => typeof val === "string",
      stringOrUint8Array: (val) => typeof val === "string" || (0, utils_js_1.isBytes)(val),
      isSafeInteger: (val) => Number.isSafeInteger(val),
      array: (val) => Array.isArray(val),
      field: (val, object) => object.Fp.isValid(val),
      hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
    };
    function validateObject(object, validators2, optValidators = {}) {
      const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns[type];
        if (typeof checkVal !== "function")
          throw new Error("invalid validator function");
        const val = object[fieldName];
        if (isOptional && val === void 0)
          return;
        if (!checkVal(val, object)) {
          throw new Error("param " + String(fieldName) + " is invalid. Expected " + type + ", got " + val);
        }
      };
      for (const [fieldName, type] of Object.entries(validators2))
        checkField(fieldName, type, false);
      for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
      return object;
    }
    function isHash(val) {
      return typeof val === "function" && Number.isSafeInteger(val.outputLen);
    }
    function _validateObject2(object, fields, optFields = {}) {
      if (!object || typeof object !== "object")
        throw new Error("expected valid options object");
      function checkField(fieldName, expectedType, isOpt) {
        const val = object[fieldName];
        if (isOpt && val === void 0)
          return;
        const current = typeof val;
        if (current !== expectedType || val === null)
          throw new Error(`param "${fieldName}" is invalid: expected ${expectedType}, got ${current}`);
      }
      Object.entries(fields).forEach(([k2, v3]) => checkField(k2, v3, false));
      Object.entries(optFields).forEach(([k2, v3]) => checkField(k2, v3, true));
    }
    var notImplemented = () => {
      throw new Error("not implemented");
    };
    exports.notImplemented = notImplemented;
    function memoized2(fn) {
      const map3 = /* @__PURE__ */ new WeakMap();
      return (arg, ...args) => {
        const val = map3.get(arg);
        if (val !== void 0)
          return val;
        const computed = fn(arg, ...args);
        map3.set(arg, computed);
        return computed;
      };
    }
  }
});

// node_modules/@noble/curves/abstract/modular.js
var require_modular = __commonJS({
  "node_modules/@noble/curves/abstract/modular.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNegativeLE = void 0;
    exports.mod = mod2;
    exports.pow = pow;
    exports.pow2 = pow22;
    exports.invert = invert;
    exports.tonelliShanks = tonelliShanks;
    exports.FpSqrt = FpSqrt;
    exports.validateField = validateField;
    exports.FpPow = FpPow;
    exports.FpInvertBatch = FpInvertBatch2;
    exports.FpDiv = FpDiv;
    exports.FpLegendre = FpLegendre;
    exports.FpIsSquare = FpIsSquare;
    exports.nLength = nLength;
    exports.Field = Field2;
    exports.FpSqrtOdd = FpSqrtOdd;
    exports.FpSqrtEven = FpSqrtEven2;
    exports.hashToPrivateScalar = hashToPrivateScalar;
    exports.getFieldBytesLength = getFieldBytesLength;
    exports.getMinHashLength = getMinHashLength;
    exports.mapHashToField = mapHashToField;
    var utils_ts_1 = require_utils5();
    var _0n6 = BigInt(0);
    var _1n6 = BigInt(1);
    var _2n6 = BigInt(2);
    var _3n3 = BigInt(3);
    var _4n2 = BigInt(4);
    var _5n3 = BigInt(5);
    var _7n4 = BigInt(7);
    var _8n4 = BigInt(8);
    var _9n2 = BigInt(9);
    var _16n2 = BigInt(16);
    function mod2(a, b2) {
      const result = a % b2;
      return result >= _0n6 ? result : b2 + result;
    }
    function pow(num, power, modulo) {
      return FpPow(Field2(modulo), num, power);
    }
    function pow22(x, power, modulo) {
      let res = x;
      while (power-- > _0n6) {
        res *= res;
        res %= modulo;
      }
      return res;
    }
    function invert(number2, modulo) {
      if (number2 === _0n6)
        throw new Error("invert: expected non-zero number");
      if (modulo <= _0n6)
        throw new Error("invert: expected positive modulus, got " + modulo);
      let a = mod2(number2, modulo);
      let b2 = modulo;
      let x = _0n6, y = _1n6, u = _1n6, v3 = _0n6;
      while (a !== _0n6) {
        const q2 = b2 / a;
        const r = b2 % a;
        const m = x - u * q2;
        const n = y - v3 * q2;
        b2 = a, a = r, x = u, y = v3, u = m, v3 = n;
      }
      const gcd = b2;
      if (gcd !== _1n6)
        throw new Error("invert: does not exist");
      return mod2(x, modulo);
    }
    function assertIsSquare(Fp2, root, n) {
      if (!Fp2.eql(Fp2.sqr(root), n))
        throw new Error("Cannot find square root");
    }
    function sqrt3mod4(Fp2, n) {
      const p1div4 = (Fp2.ORDER + _1n6) / _4n2;
      const root = Fp2.pow(n, p1div4);
      assertIsSquare(Fp2, root, n);
      return root;
    }
    function sqrt5mod8(Fp2, n) {
      const p5div8 = (Fp2.ORDER - _5n3) / _8n4;
      const n2 = Fp2.mul(n, _2n6);
      const v3 = Fp2.pow(n2, p5div8);
      const nv = Fp2.mul(n, v3);
      const i = Fp2.mul(Fp2.mul(nv, _2n6), v3);
      const root = Fp2.mul(nv, Fp2.sub(i, Fp2.ONE));
      assertIsSquare(Fp2, root, n);
      return root;
    }
    function sqrt9mod16(P2) {
      const Fp_ = Field2(P2);
      const tn = tonelliShanks(P2);
      const c1 = tn(Fp_, Fp_.neg(Fp_.ONE));
      const c2 = tn(Fp_, c1);
      const c3 = tn(Fp_, Fp_.neg(c1));
      const c4 = (P2 + _7n4) / _16n2;
      return (Fp2, n) => {
        let tv1 = Fp2.pow(n, c4);
        let tv2 = Fp2.mul(tv1, c1);
        const tv3 = Fp2.mul(tv1, c2);
        const tv4 = Fp2.mul(tv1, c3);
        const e1 = Fp2.eql(Fp2.sqr(tv2), n);
        const e2 = Fp2.eql(Fp2.sqr(tv3), n);
        tv1 = Fp2.cmov(tv1, tv2, e1);
        tv2 = Fp2.cmov(tv4, tv3, e2);
        const e3 = Fp2.eql(Fp2.sqr(tv2), n);
        const root = Fp2.cmov(tv1, tv2, e3);
        assertIsSquare(Fp2, root, n);
        return root;
      };
    }
    function tonelliShanks(P2) {
      if (P2 < _3n3)
        throw new Error("sqrt is not defined for small field");
      let Q = P2 - _1n6;
      let S = 0;
      while (Q % _2n6 === _0n6) {
        Q /= _2n6;
        S++;
      }
      let Z2 = _2n6;
      const _Fp = Field2(P2);
      while (FpLegendre(_Fp, Z2) === 1) {
        if (Z2++ > 1e3)
          throw new Error("Cannot find square root: probably non-prime P");
      }
      if (S === 1)
        return sqrt3mod4;
      let cc = _Fp.pow(Z2, Q);
      const Q1div2 = (Q + _1n6) / _2n6;
      return function tonelliSlow(Fp2, n) {
        if (Fp2.is0(n))
          return n;
        if (FpLegendre(Fp2, n) !== 1)
          throw new Error("Cannot find square root");
        let M2 = S;
        let c = Fp2.mul(Fp2.ONE, cc);
        let t = Fp2.pow(n, Q);
        let R2 = Fp2.pow(n, Q1div2);
        while (!Fp2.eql(t, Fp2.ONE)) {
          if (Fp2.is0(t))
            return Fp2.ZERO;
          let i = 1;
          let t_tmp = Fp2.sqr(t);
          while (!Fp2.eql(t_tmp, Fp2.ONE)) {
            i++;
            t_tmp = Fp2.sqr(t_tmp);
            if (i === M2)
              throw new Error("Cannot find square root");
          }
          const exponent = _1n6 << BigInt(M2 - i - 1);
          const b2 = Fp2.pow(c, exponent);
          M2 = i;
          c = Fp2.sqr(b2);
          t = Fp2.mul(t, c);
          R2 = Fp2.mul(R2, b2);
        }
        return R2;
      };
    }
    function FpSqrt(P2) {
      if (P2 % _4n2 === _3n3)
        return sqrt3mod4;
      if (P2 % _8n4 === _5n3)
        return sqrt5mod8;
      if (P2 % _16n2 === _9n2)
        return sqrt9mod16(P2);
      return tonelliShanks(P2);
    }
    var isNegativeLE2 = (num, modulo) => (mod2(num, modulo) & _1n6) === _1n6;
    exports.isNegativeLE = isNegativeLE2;
    var FIELD_FIELDS = [
      "create",
      "isValid",
      "is0",
      "neg",
      "inv",
      "sqrt",
      "sqr",
      "eql",
      "add",
      "sub",
      "mul",
      "pow",
      "div",
      "addN",
      "subN",
      "mulN",
      "sqrN"
    ];
    function validateField(field) {
      const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "number",
        BITS: "number"
      };
      const opts = FIELD_FIELDS.reduce((map3, val) => {
        map3[val] = "function";
        return map3;
      }, initial);
      (0, utils_ts_1._validateObject)(field, opts);
      return field;
    }
    function FpPow(Fp2, num, power) {
      if (power < _0n6)
        throw new Error("invalid exponent, negatives unsupported");
      if (power === _0n6)
        return Fp2.ONE;
      if (power === _1n6)
        return num;
      let p = Fp2.ONE;
      let d = num;
      while (power > _0n6) {
        if (power & _1n6)
          p = Fp2.mul(p, d);
        d = Fp2.sqr(d);
        power >>= _1n6;
      }
      return p;
    }
    function FpInvertBatch2(Fp2, nums, passZero = false) {
      const inverted = new Array(nums.length).fill(passZero ? Fp2.ZERO : void 0);
      const multipliedAcc = nums.reduce((acc, num, i) => {
        if (Fp2.is0(num))
          return acc;
        inverted[i] = acc;
        return Fp2.mul(acc, num);
      }, Fp2.ONE);
      const invertedAcc = Fp2.inv(multipliedAcc);
      nums.reduceRight((acc, num, i) => {
        if (Fp2.is0(num))
          return acc;
        inverted[i] = Fp2.mul(acc, inverted[i]);
        return Fp2.mul(acc, num);
      }, invertedAcc);
      return inverted;
    }
    function FpDiv(Fp2, lhs, rhs) {
      return Fp2.mul(lhs, typeof rhs === "bigint" ? invert(rhs, Fp2.ORDER) : Fp2.inv(rhs));
    }
    function FpLegendre(Fp2, n) {
      const p1mod2 = (Fp2.ORDER - _1n6) / _2n6;
      const powered = Fp2.pow(n, p1mod2);
      const yes = Fp2.eql(powered, Fp2.ONE);
      const zero = Fp2.eql(powered, Fp2.ZERO);
      const no = Fp2.eql(powered, Fp2.neg(Fp2.ONE));
      if (!yes && !zero && !no)
        throw new Error("invalid Legendre symbol result");
      return yes ? 1 : zero ? 0 : -1;
    }
    function FpIsSquare(Fp2, n) {
      const l17 = FpLegendre(Fp2, n);
      return l17 === 1;
    }
    function nLength(n, nBitLength) {
      if (nBitLength !== void 0)
        (0, utils_ts_1.anumber)(nBitLength);
      const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
      const nByteLength = Math.ceil(_nBitLength / 8);
      return { nBitLength: _nBitLength, nByteLength };
    }
    function Field2(ORDER, bitLenOrOpts, isLE2 = false, opts = {}) {
      if (ORDER <= _0n6)
        throw new Error("invalid field: expected ORDER > 0, got " + ORDER);
      let _nbitLength = void 0;
      let _sqrt = void 0;
      let modOnDecode = false;
      let allowedLengths = void 0;
      if (typeof bitLenOrOpts === "object" && bitLenOrOpts != null) {
        if (opts.sqrt || isLE2)
          throw new Error("cannot specify opts in two arguments");
        const _opts = bitLenOrOpts;
        if (_opts.BITS)
          _nbitLength = _opts.BITS;
        if (_opts.sqrt)
          _sqrt = _opts.sqrt;
        if (typeof _opts.isLE === "boolean")
          isLE2 = _opts.isLE;
        if (typeof _opts.modOnDecode === "boolean")
          modOnDecode = _opts.modOnDecode;
        allowedLengths = _opts.allowedLengths;
      } else {
        if (typeof bitLenOrOpts === "number")
          _nbitLength = bitLenOrOpts;
        if (opts.sqrt)
          _sqrt = opts.sqrt;
      }
      const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);
      if (BYTES > 2048)
        throw new Error("invalid field: expected ORDER of <= 2048 bytes");
      let sqrtP;
      const f = Object.freeze({
        ORDER,
        isLE: isLE2,
        BITS,
        BYTES,
        MASK: (0, utils_ts_1.bitMask)(BITS),
        ZERO: _0n6,
        ONE: _1n6,
        allowedLengths,
        create: (num) => mod2(num, ORDER),
        isValid: (num) => {
          if (typeof num !== "bigint")
            throw new Error("invalid field element: expected bigint, got " + typeof num);
          return _0n6 <= num && num < ORDER;
        },
        is0: (num) => num === _0n6,
        // is valid and invertible
        isValidNot0: (num) => !f.is0(num) && f.isValid(num),
        isOdd: (num) => (num & _1n6) === _1n6,
        neg: (num) => mod2(-num, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num) => mod2(num * num, ORDER),
        add: (lhs, rhs) => mod2(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod2(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod2(lhs * rhs, ORDER),
        pow: (num, power) => FpPow(f, num, power),
        div: (lhs, rhs) => mod2(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num) => num * num,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num) => invert(num, ORDER),
        sqrt: _sqrt || ((n) => {
          if (!sqrtP)
            sqrtP = FpSqrt(ORDER);
          return sqrtP(f, n);
        }),
        toBytes: (num) => isLE2 ? (0, utils_ts_1.numberToBytesLE)(num, BYTES) : (0, utils_ts_1.numberToBytesBE)(num, BYTES),
        fromBytes: (bytes3, skipValidation = true) => {
          if (allowedLengths) {
            if (!allowedLengths.includes(bytes3.length) || bytes3.length > BYTES) {
              throw new Error("Field.fromBytes: expected " + allowedLengths + " bytes, got " + bytes3.length);
            }
            const padded = new Uint8Array(BYTES);
            padded.set(bytes3, isLE2 ? 0 : padded.length - bytes3.length);
            bytes3 = padded;
          }
          if (bytes3.length !== BYTES)
            throw new Error("Field.fromBytes: expected " + BYTES + " bytes, got " + bytes3.length);
          let scalar = isLE2 ? (0, utils_ts_1.bytesToNumberLE)(bytes3) : (0, utils_ts_1.bytesToNumberBE)(bytes3);
          if (modOnDecode)
            scalar = mod2(scalar, ORDER);
          if (!skipValidation) {
            if (!f.isValid(scalar))
              throw new Error("invalid field element: outside of range 0..ORDER");
          }
          return scalar;
        },
        // TODO: we don't need it here, move out to separate fn
        invertBatch: (lst) => FpInvertBatch2(f, lst),
        // We can't move this out because Fp6, Fp12 implement it
        // and it's unclear what to return in there.
        cmov: (a, b2, c) => c ? b2 : a
      });
      return Object.freeze(f);
    }
    function FpSqrtOdd(Fp2, elm) {
      if (!Fp2.isOdd)
        throw new Error("Field doesn't have isOdd");
      const root = Fp2.sqrt(elm);
      return Fp2.isOdd(root) ? root : Fp2.neg(root);
    }
    function FpSqrtEven2(Fp2, elm) {
      if (!Fp2.isOdd)
        throw new Error("Field doesn't have isOdd");
      const root = Fp2.sqrt(elm);
      return Fp2.isOdd(root) ? Fp2.neg(root) : root;
    }
    function hashToPrivateScalar(hash2, groupOrder, isLE2 = false) {
      hash2 = (0, utils_ts_1.ensureBytes)("privateHash", hash2);
      const hashLen = hash2.length;
      const minLen = nLength(groupOrder).nByteLength + 8;
      if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error("hashToPrivateScalar: expected " + minLen + "-1024 bytes of input, got " + hashLen);
      const num = isLE2 ? (0, utils_ts_1.bytesToNumberLE)(hash2) : (0, utils_ts_1.bytesToNumberBE)(hash2);
      return mod2(num, groupOrder - _1n6) + _1n6;
    }
    function getFieldBytesLength(fieldOrder) {
      if (typeof fieldOrder !== "bigint")
        throw new Error("field order must be bigint");
      const bitLength = fieldOrder.toString(2).length;
      return Math.ceil(bitLength / 8);
    }
    function getMinHashLength(fieldOrder) {
      const length = getFieldBytesLength(fieldOrder);
      return length + Math.ceil(length / 2);
    }
    function mapHashToField(key, fieldOrder, isLE2 = false) {
      const len = key.length;
      const fieldLen = getFieldBytesLength(fieldOrder);
      const minLen = getMinHashLength(fieldOrder);
      if (len < 16 || len < minLen || len > 1024)
        throw new Error("expected " + minLen + "-1024 bytes of input, got " + len);
      const num = isLE2 ? (0, utils_ts_1.bytesToNumberLE)(key) : (0, utils_ts_1.bytesToNumberBE)(key);
      const reduced = mod2(num, fieldOrder - _1n6) + _1n6;
      return isLE2 ? (0, utils_ts_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_ts_1.numberToBytesBE)(reduced, fieldLen);
    }
  }
});

// node_modules/@noble/curves/abstract/curve.js
var require_curve = __commonJS({
  "node_modules/@noble/curves/abstract/curve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wNAF = void 0;
    exports.negateCt = negateCt;
    exports.normalizeZ = normalizeZ2;
    exports.mulEndoUnsafe = mulEndoUnsafe;
    exports.pippenger = pippenger2;
    exports.precomputeMSMUnsafe = precomputeMSMUnsafe;
    exports.validateBasic = validateBasic;
    exports._createCurveFields = _createCurveFields2;
    var utils_ts_1 = require_utils5();
    var modular_ts_1 = require_modular();
    var _0n6 = BigInt(0);
    var _1n6 = BigInt(1);
    function negateCt(condition, item) {
      const neg = item.negate();
      return condition ? neg : item;
    }
    function normalizeZ2(c, points) {
      const invertedZs = (0, modular_ts_1.FpInvertBatch)(c.Fp, points.map((p) => p.Z));
      return points.map((p, i) => c.fromAffine(p.toAffine(invertedZs[i])));
    }
    function validateW(W2, bits2) {
      if (!Number.isSafeInteger(W2) || W2 <= 0 || W2 > bits2)
        throw new Error("invalid window size, expected [1.." + bits2 + "], got W=" + W2);
    }
    function calcWOpts(W2, scalarBits) {
      validateW(W2, scalarBits);
      const windows = Math.ceil(scalarBits / W2) + 1;
      const windowSize = 2 ** (W2 - 1);
      const maxNumber = 2 ** W2;
      const mask = (0, utils_ts_1.bitMask)(W2);
      const shiftBy = BigInt(W2);
      return { windows, windowSize, mask, maxNumber, shiftBy };
    }
    function calcOffsets(n, window3, wOpts) {
      const { windowSize, mask, maxNumber, shiftBy } = wOpts;
      let wbits = Number(n & mask);
      let nextN = n >> shiftBy;
      if (wbits > windowSize) {
        wbits -= maxNumber;
        nextN += _1n6;
      }
      const offsetStart = window3 * windowSize;
      const offset = offsetStart + Math.abs(wbits) - 1;
      const isZero = wbits === 0;
      const isNeg = wbits < 0;
      const isNegF = window3 % 2 !== 0;
      const offsetF = offsetStart;
      return { nextN, offset, isZero, isNeg, isNegF, offsetF };
    }
    function validateMSMPoints(points, c) {
      if (!Array.isArray(points))
        throw new Error("array expected");
      points.forEach((p, i) => {
        if (!(p instanceof c))
          throw new Error("invalid point at index " + i);
      });
    }
    function validateMSMScalars(scalars, field) {
      if (!Array.isArray(scalars))
        throw new Error("array of scalars expected");
      scalars.forEach((s, i) => {
        if (!field.isValid(s))
          throw new Error("invalid scalar at index " + i);
      });
    }
    var pointPrecomputes = /* @__PURE__ */ new WeakMap();
    var pointWindowSizes = /* @__PURE__ */ new WeakMap();
    function getW(P2) {
      return pointWindowSizes.get(P2) || 1;
    }
    function assert0(n) {
      if (n !== _0n6)
        throw new Error("invalid wNAF");
    }
    var wNAF2 = class {
      // Parametrized with a given Point class (not individual point)
      constructor(Point, bits2) {
        this.BASE = Point.BASE;
        this.ZERO = Point.ZERO;
        this.Fn = Point.Fn;
        this.bits = bits2;
      }
      // non-const time multiplication ladder
      _unsafeLadder(elm, n, p = this.ZERO) {
        let d = elm;
        while (n > _0n6) {
          if (n & _1n6)
            p = p.add(d);
          d = d.double();
          n >>= _1n6;
        }
        return p;
      }
      /**
       * Creates a wNAF precomputation window. Used for caching.
       * Default window size is set by `utils.precompute()` and is equal to 8.
       * Number of precomputed points depends on the curve size:
       * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
       * - 𝑊 is the window size
       * - 𝑛 is the bitlength of the curve order.
       * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
       * @param point Point instance
       * @param W window size
       * @returns precomputed point tables flattened to a single array
       */
      precomputeWindow(point, W2) {
        const { windows, windowSize } = calcWOpts(W2, this.bits);
        const points = [];
        let p = point;
        let base = p;
        for (let window3 = 0; window3 < windows; window3++) {
          base = p;
          points.push(base);
          for (let i = 1; i < windowSize; i++) {
            base = base.add(p);
            points.push(base);
          }
          p = base.double();
        }
        return points;
      }
      /**
       * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
       * More compact implementation:
       * https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541
       * @returns real and fake (for const-time) points
       */
      wNAF(W2, precomputes, n) {
        if (!this.Fn.isValid(n))
          throw new Error("invalid scalar");
        let p = this.ZERO;
        let f = this.BASE;
        const wo = calcWOpts(W2, this.bits);
        for (let window3 = 0; window3 < wo.windows; window3++) {
          const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window3, wo);
          n = nextN;
          if (isZero) {
            f = f.add(negateCt(isNegF, precomputes[offsetF]));
          } else {
            p = p.add(negateCt(isNeg, precomputes[offset]));
          }
        }
        assert0(n);
        return { p, f };
      }
      /**
       * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.
       * @param acc accumulator point to add result of multiplication
       * @returns point
       */
      wNAFUnsafe(W2, precomputes, n, acc = this.ZERO) {
        const wo = calcWOpts(W2, this.bits);
        for (let window3 = 0; window3 < wo.windows; window3++) {
          if (n === _0n6)
            break;
          const { nextN, offset, isZero, isNeg } = calcOffsets(n, window3, wo);
          n = nextN;
          if (isZero) {
            continue;
          } else {
            const item = precomputes[offset];
            acc = acc.add(isNeg ? item.negate() : item);
          }
        }
        assert0(n);
        return acc;
      }
      getPrecomputes(W2, point, transform) {
        let comp = pointPrecomputes.get(point);
        if (!comp) {
          comp = this.precomputeWindow(point, W2);
          if (W2 !== 1) {
            if (typeof transform === "function")
              comp = transform(comp);
            pointPrecomputes.set(point, comp);
          }
        }
        return comp;
      }
      cached(point, scalar, transform) {
        const W2 = getW(point);
        return this.wNAF(W2, this.getPrecomputes(W2, point, transform), scalar);
      }
      unsafe(point, scalar, transform, prev) {
        const W2 = getW(point);
        if (W2 === 1)
          return this._unsafeLadder(point, scalar, prev);
        return this.wNAFUnsafe(W2, this.getPrecomputes(W2, point, transform), scalar, prev);
      }
      // We calculate precomputes for elliptic curve point multiplication
      // using windowed method. This specifies window size and
      // stores precomputed values. Usually only base point would be precomputed.
      createCache(P2, W2) {
        validateW(W2, this.bits);
        pointWindowSizes.set(P2, W2);
        pointPrecomputes.delete(P2);
      }
      hasCache(elm) {
        return getW(elm) !== 1;
      }
    };
    exports.wNAF = wNAF2;
    function mulEndoUnsafe(Point, point, k1, k2) {
      let acc = point;
      let p1 = Point.ZERO;
      let p2 = Point.ZERO;
      while (k1 > _0n6 || k2 > _0n6) {
        if (k1 & _1n6)
          p1 = p1.add(acc);
        if (k2 & _1n6)
          p2 = p2.add(acc);
        acc = acc.double();
        k1 >>= _1n6;
        k2 >>= _1n6;
      }
      return { p1, p2 };
    }
    function pippenger2(c, fieldN, points, scalars) {
      validateMSMPoints(points, c);
      validateMSMScalars(scalars, fieldN);
      const plength = points.length;
      const slength = scalars.length;
      if (plength !== slength)
        throw new Error("arrays of points and scalars must have equal length");
      const zero = c.ZERO;
      const wbits = (0, utils_ts_1.bitLen)(BigInt(plength));
      let windowSize = 1;
      if (wbits > 12)
        windowSize = wbits - 3;
      else if (wbits > 4)
        windowSize = wbits - 2;
      else if (wbits > 0)
        windowSize = 2;
      const MASK = (0, utils_ts_1.bitMask)(windowSize);
      const buckets = new Array(Number(MASK) + 1).fill(zero);
      const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;
      let sum = zero;
      for (let i = lastBits; i >= 0; i -= windowSize) {
        buckets.fill(zero);
        for (let j3 = 0; j3 < slength; j3++) {
          const scalar = scalars[j3];
          const wbits2 = Number(scalar >> BigInt(i) & MASK);
          buckets[wbits2] = buckets[wbits2].add(points[j3]);
        }
        let resI = zero;
        for (let j3 = buckets.length - 1, sumI = zero; j3 > 0; j3--) {
          sumI = sumI.add(buckets[j3]);
          resI = resI.add(sumI);
        }
        sum = sum.add(resI);
        if (i !== 0)
          for (let j3 = 0; j3 < windowSize; j3++)
            sum = sum.double();
      }
      return sum;
    }
    function precomputeMSMUnsafe(c, fieldN, points, windowSize) {
      validateW(windowSize, fieldN.BITS);
      validateMSMPoints(points, c);
      const zero = c.ZERO;
      const tableSize = 2 ** windowSize - 1;
      const chunks = Math.ceil(fieldN.BITS / windowSize);
      const MASK = (0, utils_ts_1.bitMask)(windowSize);
      const tables = points.map((p) => {
        const res = [];
        for (let i = 0, acc = p; i < tableSize; i++) {
          res.push(acc);
          acc = acc.add(p);
        }
        return res;
      });
      return (scalars) => {
        validateMSMScalars(scalars, fieldN);
        if (scalars.length > points.length)
          throw new Error("array of scalars must be smaller than array of points");
        let res = zero;
        for (let i = 0; i < chunks; i++) {
          if (res !== zero)
            for (let j3 = 0; j3 < windowSize; j3++)
              res = res.double();
          const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);
          for (let j3 = 0; j3 < scalars.length; j3++) {
            const n = scalars[j3];
            const curr = Number(n >> shiftBy & MASK);
            if (!curr)
              continue;
            res = res.add(tables[j3][curr - 1]);
          }
        }
        return res;
      };
    }
    function validateBasic(curve) {
      (0, modular_ts_1.validateField)(curve.Fp);
      (0, utils_ts_1.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
      }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
      });
      return Object.freeze({
        ...(0, modular_ts_1.nLength)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER }
      });
    }
    function createField(order, field) {
      if (field) {
        if (field.ORDER !== order)
          throw new Error("Field.ORDER must match order: Fp == p, Fn == n");
        (0, modular_ts_1.validateField)(field);
        return field;
      } else {
        return (0, modular_ts_1.Field)(order);
      }
    }
    function _createCurveFields2(type, CURVE, curveOpts = {}) {
      if (!CURVE || typeof CURVE !== "object")
        throw new Error(`expected valid ${type} CURVE object`);
      for (const p of ["p", "n", "h"]) {
        const val = CURVE[p];
        if (!(typeof val === "bigint" && val > _0n6))
          throw new Error(`CURVE.${p} must be positive bigint`);
      }
      const Fp2 = createField(CURVE.p, curveOpts.Fp);
      const Fn2 = createField(CURVE.n, curveOpts.Fn);
      const _b = type === "weierstrass" ? "b" : "d";
      const params = ["Gx", "Gy", "a", _b];
      for (const p of params) {
        if (!Fp2.isValid(CURVE[p]))
          throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);
      }
      return { Fp: Fp2, Fn: Fn2 };
    }
  }
});

// node_modules/@noble/curves/abstract/weierstrass.js
var require_weierstrass = __commonJS({
  "node_modules/@noble/curves/abstract/weierstrass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DER = exports.DERErr = void 0;
    exports._splitEndoScalar = _splitEndoScalar;
    exports._legacyHelperEquat = _legacyHelperEquat;
    exports._normFnElement = _normFnElement;
    exports.weierstrassN = weierstrassN;
    exports.weierstrassPoints = weierstrassPoints;
    exports.SWUFpSqrtRatio = SWUFpSqrtRatio;
    exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;
    exports.ecdsa = ecdsa;
    exports.weierstrass = weierstrass;
    var hmac_js_1 = require_hmac();
    var utils_1 = require_utils4();
    var utils_ts_1 = require_utils5();
    var curve_ts_1 = require_curve();
    var modular_ts_1 = require_modular();
    var divNearest = (num, den) => (num + (num >= 0 ? den : -den) / _2n6) / den;
    function _splitEndoScalar(k2, basis, n) {
      const [[a1, b1], [a2, b2]] = basis;
      const c1 = divNearest(b2 * k2, n);
      const c2 = divNearest(-b1 * k2, n);
      let k1 = k2 - c1 * a1 - c2 * a2;
      let k22 = -c1 * b1 - c2 * b2;
      const k1neg = k1 < _0n6;
      const k2neg = k22 < _0n6;
      if (k1neg)
        k1 = -k1;
      if (k2neg)
        k22 = -k22;
      const MAX_NUM = (0, utils_ts_1.bitMask)(Math.ceil((0, utils_ts_1.bitLen)(n) / 2)) + _1n6;
      if (k1 < _0n6 || k1 >= MAX_NUM || k22 < _0n6 || k22 >= MAX_NUM) {
        throw new Error("splitScalar (endomorphism): failed, k=" + k2);
      }
      return { k1neg, k1, k2neg, k2: k22 };
    }
    function validateSigVerOpts(opts) {
      if (opts.lowS !== void 0)
        (0, utils_ts_1.abool)("lowS", opts.lowS);
      if (opts.prehash !== void 0)
        (0, utils_ts_1.abool)("prehash", opts.prehash);
    }
    var DERErr = class extends Error {
      constructor(m = "") {
        super(m);
      }
    };
    exports.DERErr = DERErr;
    exports.DER = {
      // asn.1 DER encoding utils
      Err: DERErr,
      // Basic building block is TLV (Tag-Length-Value)
      _tlv: {
        encode: (tag, data) => {
          const { Err: E2 } = exports.DER;
          if (tag < 0 || tag > 256)
            throw new E2("tlv.encode: wrong tag");
          if (data.length & 1)
            throw new E2("tlv.encode: unpadded data");
          const dataLen = data.length / 2;
          const len = (0, utils_ts_1.numberToHexUnpadded)(dataLen);
          if (len.length / 2 & 128)
            throw new E2("tlv.encode: long form length too big");
          const lenLen = dataLen > 127 ? (0, utils_ts_1.numberToHexUnpadded)(len.length / 2 | 128) : "";
          const t = (0, utils_ts_1.numberToHexUnpadded)(tag);
          return t + lenLen + len + data;
        },
        // v - value, l - left bytes (unparsed)
        decode(tag, data) {
          const { Err: E2 } = exports.DER;
          let pos = 0;
          if (tag < 0 || tag > 256)
            throw new E2("tlv.encode: wrong tag");
          if (data.length < 2 || data[pos++] !== tag)
            throw new E2("tlv.decode: wrong tlv");
          const first2 = data[pos++];
          const isLong = !!(first2 & 128);
          let length = 0;
          if (!isLong)
            length = first2;
          else {
            const lenLen = first2 & 127;
            if (!lenLen)
              throw new E2("tlv.decode(long): indefinite length not supported");
            if (lenLen > 4)
              throw new E2("tlv.decode(long): byte length is too big");
            const lengthBytes = data.subarray(pos, pos + lenLen);
            if (lengthBytes.length !== lenLen)
              throw new E2("tlv.decode: length bytes not complete");
            if (lengthBytes[0] === 0)
              throw new E2("tlv.decode(long): zero leftmost byte");
            for (const b2 of lengthBytes)
              length = length << 8 | b2;
            pos += lenLen;
            if (length < 128)
              throw new E2("tlv.decode(long): not minimal encoding");
          }
          const v3 = data.subarray(pos, pos + length);
          if (v3.length !== length)
            throw new E2("tlv.decode: wrong value length");
          return { v: v3, l: data.subarray(pos + length) };
        }
      },
      // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
      // since we always use positive integers here. It must always be empty:
      // - add zero byte if exists
      // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
      _int: {
        encode(num) {
          const { Err: E2 } = exports.DER;
          if (num < _0n6)
            throw new E2("integer: negative integers are not allowed");
          let hex2 = (0, utils_ts_1.numberToHexUnpadded)(num);
          if (Number.parseInt(hex2[0], 16) & 8)
            hex2 = "00" + hex2;
          if (hex2.length & 1)
            throw new E2("unexpected DER parsing assertion: unpadded hex");
          return hex2;
        },
        decode(data) {
          const { Err: E2 } = exports.DER;
          if (data[0] & 128)
            throw new E2("invalid signature integer: negative");
          if (data[0] === 0 && !(data[1] & 128))
            throw new E2("invalid signature integer: unnecessary leading zero");
          return (0, utils_ts_1.bytesToNumberBE)(data);
        }
      },
      toSig(hex2) {
        const { Err: E2, _int: int, _tlv: tlv } = exports.DER;
        const data = (0, utils_ts_1.ensureBytes)("signature", hex2);
        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);
        if (seqLeftBytes.length)
          throw new E2("invalid signature: left bytes after parsing");
        const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);
        const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);
        if (sLeftBytes.length)
          throw new E2("invalid signature: left bytes after parsing");
        return { r: int.decode(rBytes), s: int.decode(sBytes) };
      },
      hexFromSig(sig2) {
        const { _tlv: tlv, _int: int } = exports.DER;
        const rs = tlv.encode(2, int.encode(sig2.r));
        const ss = tlv.encode(2, int.encode(sig2.s));
        const seq = rs + ss;
        return tlv.encode(48, seq);
      }
    };
    var _0n6 = BigInt(0);
    var _1n6 = BigInt(1);
    var _2n6 = BigInt(2);
    var _3n3 = BigInt(3);
    var _4n2 = BigInt(4);
    function _legacyHelperEquat(Fp2, a, b2) {
      function weierstrassEquation(x) {
        const x2 = Fp2.sqr(x);
        const x3 = Fp2.mul(x2, x);
        return Fp2.add(Fp2.add(x3, Fp2.mul(x, a)), b2);
      }
      return weierstrassEquation;
    }
    function _normFnElement(Fn2, key) {
      const { BYTES: expected } = Fn2;
      let num;
      if (typeof key === "bigint") {
        num = key;
      } else {
        let bytes3 = (0, utils_ts_1.ensureBytes)("private key", key);
        try {
          num = Fn2.fromBytes(bytes3);
        } catch (error) {
          throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);
        }
      }
      if (!Fn2.isValidNot0(num))
        throw new Error("invalid private key: out of range [1..N-1]");
      return num;
    }
    function weierstrassN(CURVE, curveOpts = {}) {
      const { Fp: Fp2, Fn: Fn2 } = (0, curve_ts_1._createCurveFields)("weierstrass", CURVE, curveOpts);
      const { h: cofactor, n: CURVE_ORDER } = CURVE;
      (0, utils_ts_1._validateObject)(curveOpts, {}, {
        allowInfinityPoint: "boolean",
        clearCofactor: "function",
        isTorsionFree: "function",
        fromBytes: "function",
        toBytes: "function",
        endo: "object",
        wrapPrivateKey: "boolean"
      });
      const { endo } = curveOpts;
      if (endo) {
        if (!Fp2.is0(CURVE.a) || typeof endo.beta !== "bigint" || !Array.isArray(endo.basises)) {
          throw new Error('invalid endo: expected "beta": bigint and "basises": array');
        }
      }
      function assertCompressionIsSupported() {
        if (!Fp2.isOdd)
          throw new Error("compression is not supported: Field does not have .isOdd()");
      }
      function pointToBytes(_c, point, isCompressed) {
        const { x, y } = point.toAffine();
        const bx = Fp2.toBytes(x);
        (0, utils_ts_1.abool)("isCompressed", isCompressed);
        if (isCompressed) {
          assertCompressionIsSupported();
          const hasEvenY = !Fp2.isOdd(y);
          return (0, utils_ts_1.concatBytes)(pprefix(hasEvenY), bx);
        } else {
          return (0, utils_ts_1.concatBytes)(Uint8Array.of(4), bx, Fp2.toBytes(y));
        }
      }
      function pointFromBytes(bytes3) {
        (0, utils_ts_1.abytes)(bytes3);
        const L2 = Fp2.BYTES;
        const LC = L2 + 1;
        const LU = 2 * L2 + 1;
        const length = bytes3.length;
        const head = bytes3[0];
        const tail = bytes3.subarray(1);
        if (length === LC && (head === 2 || head === 3)) {
          const x = Fp2.fromBytes(tail);
          if (!Fp2.isValid(x))
            throw new Error("bad point: is not on curve, wrong x");
          const y2 = weierstrassEquation(x);
          let y;
          try {
            y = Fp2.sqrt(y2);
          } catch (sqrtError) {
            const err = sqrtError instanceof Error ? ": " + sqrtError.message : "";
            throw new Error("bad point: is not on curve, sqrt error" + err);
          }
          assertCompressionIsSupported();
          const isYOdd = Fp2.isOdd(y);
          const isHeadOdd = (head & 1) === 1;
          if (isHeadOdd !== isYOdd)
            y = Fp2.neg(y);
          return { x, y };
        } else if (length === LU && head === 4) {
          const x = Fp2.fromBytes(tail.subarray(L2 * 0, L2 * 1));
          const y = Fp2.fromBytes(tail.subarray(L2 * 1, L2 * 2));
          if (!isValidXY(x, y))
            throw new Error("bad point: is not on curve");
          return { x, y };
        } else {
          throw new Error(`bad point: got length ${length}, expected compressed=${LC} or uncompressed=${LU}`);
        }
      }
      const toBytes2 = curveOpts.toBytes || pointToBytes;
      const fromBytes = curveOpts.fromBytes || pointFromBytes;
      const weierstrassEquation = _legacyHelperEquat(Fp2, CURVE.a, CURVE.b);
      function isValidXY(x, y) {
        const left = Fp2.sqr(y);
        const right = weierstrassEquation(x);
        return Fp2.eql(left, right);
      }
      if (!isValidXY(CURVE.Gx, CURVE.Gy))
        throw new Error("bad curve params: generator point");
      const _4a3 = Fp2.mul(Fp2.pow(CURVE.a, _3n3), _4n2);
      const _27b2 = Fp2.mul(Fp2.sqr(CURVE.b), BigInt(27));
      if (Fp2.is0(Fp2.add(_4a3, _27b2)))
        throw new Error("bad curve params: a or b");
      function acoord(title, n, banZero = false) {
        if (!Fp2.isValid(n) || banZero && Fp2.is0(n))
          throw new Error(`bad point coordinate ${title}`);
        return n;
      }
      function aprjpoint(other) {
        if (!(other instanceof Point))
          throw new Error("ProjectivePoint expected");
      }
      function splitEndoScalarN(k2) {
        if (!endo || !endo.basises)
          throw new Error("no endo");
        return _splitEndoScalar(k2, endo.basises, Fn2.ORDER);
      }
      const toAffineMemo = (0, utils_ts_1.memoized)((p, iz) => {
        const { X: X2, Y, Z: Z2 } = p;
        if (Fp2.eql(Z2, Fp2.ONE))
          return { x: X2, y: Y };
        const is0 = p.is0();
        if (iz == null)
          iz = is0 ? Fp2.ONE : Fp2.inv(Z2);
        const x = Fp2.mul(X2, iz);
        const y = Fp2.mul(Y, iz);
        const zz = Fp2.mul(Z2, iz);
        if (is0)
          return { x: Fp2.ZERO, y: Fp2.ZERO };
        if (!Fp2.eql(zz, Fp2.ONE))
          throw new Error("invZ was invalid");
        return { x, y };
      });
      const assertValidMemo = (0, utils_ts_1.memoized)((p) => {
        if (p.is0()) {
          if (curveOpts.allowInfinityPoint && !Fp2.is0(p.Y))
            return;
          throw new Error("bad point: ZERO");
        }
        const { x, y } = p.toAffine();
        if (!Fp2.isValid(x) || !Fp2.isValid(y))
          throw new Error("bad point: x or y not field elements");
        if (!isValidXY(x, y))
          throw new Error("bad point: equation left != right");
        if (!p.isTorsionFree())
          throw new Error("bad point: not in prime-order subgroup");
        return true;
      });
      function finishEndo(endoBeta, k1p, k2p, k1neg, k2neg) {
        k2p = new Point(Fp2.mul(k2p.X, endoBeta), k2p.Y, k2p.Z);
        k1p = (0, curve_ts_1.negateCt)(k1neg, k1p);
        k2p = (0, curve_ts_1.negateCt)(k2neg, k2p);
        return k1p.add(k2p);
      }
      class Point {
        /** Does NOT validate if the point is valid. Use `.assertValidity()`. */
        constructor(X2, Y, Z2) {
          this.X = acoord("x", X2);
          this.Y = acoord("y", Y, true);
          this.Z = acoord("z", Z2);
          Object.freeze(this);
        }
        /** Does NOT validate if the point is valid. Use `.assertValidity()`. */
        static fromAffine(p) {
          const { x, y } = p || {};
          if (!p || !Fp2.isValid(x) || !Fp2.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point)
            throw new Error("projective point not allowed");
          if (Fp2.is0(x) && Fp2.is0(y))
            return Point.ZERO;
          return new Point(x, y, Fp2.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        // TODO: remove
        get px() {
          return this.X;
        }
        get py() {
          return this.X;
        }
        get pz() {
          return this.Z;
        }
        static normalizeZ(points) {
          return (0, curve_ts_1.normalizeZ)(Point, points);
        }
        static fromBytes(bytes3) {
          (0, utils_ts_1.abytes)(bytes3);
          return Point.fromHex(bytes3);
        }
        /** Converts hash string or Uint8Array to Point. */
        static fromHex(hex2) {
          const P2 = Point.fromAffine(fromBytes((0, utils_ts_1.ensureBytes)("pointHex", hex2)));
          P2.assertValidity();
          return P2;
        }
        /** Multiplies generator point by privateKey. */
        static fromPrivateKey(privateKey) {
          return Point.BASE.multiply(_normFnElement(Fn2, privateKey));
        }
        // TODO: remove
        static msm(points, scalars) {
          return (0, curve_ts_1.pippenger)(Point, Fn2, points, scalars);
        }
        _setWindowSize(windowSize) {
          this.precompute(windowSize);
        }
        /**
         *
         * @param windowSize
         * @param isLazy true will defer table computation until the first multiplication
         * @returns
         */
        precompute(windowSize = 8, isLazy = true) {
          wnaf.createCache(this, windowSize);
          if (!isLazy)
            this.multiply(_3n3);
          return this;
        }
        // TODO: return `this`
        /** A point on curve is valid if it conforms to equation. */
        assertValidity() {
          assertValidMemo(this);
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (!Fp2.isOdd)
            throw new Error("Field doesn't support isOdd");
          return !Fp2.isOdd(y);
        }
        /** Compare one point to another. */
        equals(other) {
          aprjpoint(other);
          const { X: X1, Y: Y1, Z: Z1 } = this;
          const { X: X2, Y: Y2, Z: Z2 } = other;
          const U1 = Fp2.eql(Fp2.mul(X1, Z2), Fp2.mul(X2, Z1));
          const U2 = Fp2.eql(Fp2.mul(Y1, Z2), Fp2.mul(Y2, Z1));
          return U1 && U2;
        }
        /** Flips point to one corresponding to (x, -y) in Affine coordinates. */
        negate() {
          return new Point(this.X, Fp2.neg(this.Y), this.Z);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b: b2 } = CURVE;
          const b3 = Fp2.mul(b2, _3n3);
          const { X: X1, Y: Y1, Z: Z1 } = this;
          let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
          let t0 = Fp2.mul(X1, X1);
          let t1 = Fp2.mul(Y1, Y1);
          let t2 = Fp2.mul(Z1, Z1);
          let t3 = Fp2.mul(X1, Y1);
          t3 = Fp2.add(t3, t3);
          Z3 = Fp2.mul(X1, Z1);
          Z3 = Fp2.add(Z3, Z3);
          X3 = Fp2.mul(a, Z3);
          Y3 = Fp2.mul(b3, t2);
          Y3 = Fp2.add(X3, Y3);
          X3 = Fp2.sub(t1, Y3);
          Y3 = Fp2.add(t1, Y3);
          Y3 = Fp2.mul(X3, Y3);
          X3 = Fp2.mul(t3, X3);
          Z3 = Fp2.mul(b3, Z3);
          t2 = Fp2.mul(a, t2);
          t3 = Fp2.sub(t0, t2);
          t3 = Fp2.mul(a, t3);
          t3 = Fp2.add(t3, Z3);
          Z3 = Fp2.add(t0, t0);
          t0 = Fp2.add(Z3, t0);
          t0 = Fp2.add(t0, t2);
          t0 = Fp2.mul(t0, t3);
          Y3 = Fp2.add(Y3, t0);
          t2 = Fp2.mul(Y1, Z1);
          t2 = Fp2.add(t2, t2);
          t0 = Fp2.mul(t2, t3);
          X3 = Fp2.sub(X3, t0);
          Z3 = Fp2.mul(t2, t1);
          Z3 = Fp2.add(Z3, Z3);
          Z3 = Fp2.add(Z3, Z3);
          return new Point(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          aprjpoint(other);
          const { X: X1, Y: Y1, Z: Z1 } = this;
          const { X: X2, Y: Y2, Z: Z2 } = other;
          let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
          const a = CURVE.a;
          const b3 = Fp2.mul(CURVE.b, _3n3);
          let t0 = Fp2.mul(X1, X2);
          let t1 = Fp2.mul(Y1, Y2);
          let t2 = Fp2.mul(Z1, Z2);
          let t3 = Fp2.add(X1, Y1);
          let t4 = Fp2.add(X2, Y2);
          t3 = Fp2.mul(t3, t4);
          t4 = Fp2.add(t0, t1);
          t3 = Fp2.sub(t3, t4);
          t4 = Fp2.add(X1, Z1);
          let t5 = Fp2.add(X2, Z2);
          t4 = Fp2.mul(t4, t5);
          t5 = Fp2.add(t0, t2);
          t4 = Fp2.sub(t4, t5);
          t5 = Fp2.add(Y1, Z1);
          X3 = Fp2.add(Y2, Z2);
          t5 = Fp2.mul(t5, X3);
          X3 = Fp2.add(t1, t2);
          t5 = Fp2.sub(t5, X3);
          Z3 = Fp2.mul(a, t4);
          X3 = Fp2.mul(b3, t2);
          Z3 = Fp2.add(X3, Z3);
          X3 = Fp2.sub(t1, Z3);
          Z3 = Fp2.add(t1, Z3);
          Y3 = Fp2.mul(X3, Z3);
          t1 = Fp2.add(t0, t0);
          t1 = Fp2.add(t1, t0);
          t2 = Fp2.mul(a, t2);
          t4 = Fp2.mul(b3, t4);
          t1 = Fp2.add(t1, t2);
          t2 = Fp2.sub(t0, t2);
          t2 = Fp2.mul(a, t2);
          t4 = Fp2.add(t4, t2);
          t0 = Fp2.mul(t1, t4);
          Y3 = Fp2.add(Y3, t0);
          t0 = Fp2.mul(t5, t4);
          X3 = Fp2.mul(t3, X3);
          X3 = Fp2.sub(X3, t0);
          t0 = Fp2.mul(t3, t1);
          Z3 = Fp2.mul(t5, Z3);
          Z3 = Fp2.add(Z3, t0);
          return new Point(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point.ZERO);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          const { endo: endo2 } = curveOpts;
          if (!Fn2.isValidNot0(scalar))
            throw new Error("invalid scalar: out of range");
          let point, fake;
          const mul = (n) => wnaf.cached(this, n, (p) => (0, curve_ts_1.normalizeZ)(Point, p));
          if (endo2) {
            const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(scalar);
            const { p: k1p, f: k1f } = mul(k1);
            const { p: k2p, f: k2f } = mul(k2);
            fake = k1f.add(k2f);
            point = finishEndo(endo2.beta, k1p, k2p, k1neg, k2neg);
          } else {
            const { p, f } = mul(scalar);
            point = p;
            fake = f;
          }
          return (0, curve_ts_1.normalizeZ)(Point, [point, fake])[0];
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed secret key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(sc) {
          const { endo: endo2 } = curveOpts;
          const p = this;
          if (!Fn2.isValid(sc))
            throw new Error("invalid scalar: out of range");
          if (sc === _0n6 || p.is0())
            return Point.ZERO;
          if (sc === _1n6)
            return p;
          if (wnaf.hasCache(this))
            return this.multiply(sc);
          if (endo2) {
            const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(sc);
            const { p1, p2 } = (0, curve_ts_1.mulEndoUnsafe)(Point, p, k1, k2);
            return finishEndo(endo2.beta, p1, p2, k1neg, k2neg);
          } else {
            return wnaf.unsafe(p, sc);
          }
        }
        multiplyAndAddUnsafe(Q, a, b2) {
          const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b2));
          return sum.is0() ? void 0 : sum;
        }
        /**
         * Converts Projective point to affine (x, y) coordinates.
         * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch
         */
        toAffine(invertedZ) {
          return toAffineMemo(this, invertedZ);
        }
        /**
         * Checks whether Point is free of torsion elements (is in prime subgroup).
         * Always torsion-free for cofactor=1 curves.
         */
        isTorsionFree() {
          const { isTorsionFree } = curveOpts;
          if (cofactor === _1n6)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point, this);
          return wnaf.unsafe(this, CURVE_ORDER).is0();
        }
        clearCofactor() {
          const { clearCofactor } = curveOpts;
          if (cofactor === _1n6)
            return this;
          if (clearCofactor)
            return clearCofactor(Point, this);
          return this.multiplyUnsafe(cofactor);
        }
        isSmallOrder() {
          return this.multiplyUnsafe(cofactor).is0();
        }
        toBytes(isCompressed = true) {
          (0, utils_ts_1.abool)("isCompressed", isCompressed);
          this.assertValidity();
          return toBytes2(Point, this, isCompressed);
        }
        /** @deprecated use `toBytes` */
        toRawBytes(isCompressed = true) {
          return this.toBytes(isCompressed);
        }
        toHex(isCompressed = true) {
          return (0, utils_ts_1.bytesToHex)(this.toBytes(isCompressed));
        }
        toString() {
          return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
        }
      }
      Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp2.ONE);
      Point.ZERO = new Point(Fp2.ZERO, Fp2.ONE, Fp2.ZERO);
      Point.Fp = Fp2;
      Point.Fn = Fn2;
      const bits2 = Fn2.BITS;
      const wnaf = new curve_ts_1.wNAF(Point, curveOpts.endo ? Math.ceil(bits2 / 2) : bits2);
      return Point;
    }
    function weierstrassPoints(c) {
      const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);
      const Point = weierstrassN(CURVE, curveOpts);
      return _weierstrass_new_output_to_legacy(c, Point);
    }
    function pprefix(hasEvenY) {
      return Uint8Array.of(hasEvenY ? 2 : 3);
    }
    function SWUFpSqrtRatio(Fp2, Z2) {
      const q2 = Fp2.ORDER;
      let l17 = _0n6;
      for (let o = q2 - _1n6; o % _2n6 === _0n6; o /= _2n6)
        l17 += _1n6;
      const c1 = l17;
      const _2n_pow_c1_1 = _2n6 << c1 - _1n6 - _1n6;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n6;
      const c2 = (q2 - _1n6) / _2n_pow_c1;
      const c3 = (c2 - _1n6) / _2n6;
      const c4 = _2n_pow_c1 - _1n6;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp2.pow(Z2, c2);
      const c7 = Fp2.pow(Z2, (c2 + _1n6) / _2n6);
      let sqrtRatio = (u, v3) => {
        let tv1 = c6;
        let tv2 = Fp2.pow(v3, c4);
        let tv3 = Fp2.sqr(tv2);
        tv3 = Fp2.mul(tv3, v3);
        let tv5 = Fp2.mul(u, tv3);
        tv5 = Fp2.pow(tv5, c3);
        tv5 = Fp2.mul(tv5, tv2);
        tv2 = Fp2.mul(tv5, v3);
        tv3 = Fp2.mul(tv5, u);
        let tv4 = Fp2.mul(tv3, tv2);
        tv5 = Fp2.pow(tv4, c5);
        let isQR = Fp2.eql(tv5, Fp2.ONE);
        tv2 = Fp2.mul(tv3, c7);
        tv5 = Fp2.mul(tv4, tv1);
        tv3 = Fp2.cmov(tv2, tv3, isQR);
        tv4 = Fp2.cmov(tv5, tv4, isQR);
        for (let i = c1; i > _1n6; i--) {
          let tv52 = i - _2n6;
          tv52 = _2n6 << tv52 - _1n6;
          let tvv5 = Fp2.pow(tv4, tv52);
          const e1 = Fp2.eql(tvv5, Fp2.ONE);
          tv2 = Fp2.mul(tv3, tv1);
          tv1 = Fp2.mul(tv1, tv1);
          tvv5 = Fp2.mul(tv4, tv1);
          tv3 = Fp2.cmov(tv2, tv3, e1);
          tv4 = Fp2.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp2.ORDER % _4n2 === _3n3) {
        const c12 = (Fp2.ORDER - _3n3) / _4n2;
        const c22 = Fp2.sqrt(Fp2.neg(Z2));
        sqrtRatio = (u, v3) => {
          let tv1 = Fp2.sqr(v3);
          const tv2 = Fp2.mul(u, v3);
          tv1 = Fp2.mul(tv1, tv2);
          let y1 = Fp2.pow(tv1, c12);
          y1 = Fp2.mul(y1, tv2);
          const y2 = Fp2.mul(y1, c22);
          const tv3 = Fp2.mul(Fp2.sqr(y1), v3);
          const isQR = Fp2.eql(tv3, u);
          let y = Fp2.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    function mapToCurveSimpleSWU(Fp2, opts) {
      (0, modular_ts_1.validateField)(Fp2);
      const { A: A2, B, Z: Z2 } = opts;
      if (!Fp2.isValid(A2) || !Fp2.isValid(B) || !Fp2.isValid(Z2))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio(Fp2, Z2);
      if (!Fp2.isOdd)
        throw new Error("Field does not have .isOdd()");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp2.sqr(u);
        tv1 = Fp2.mul(tv1, Z2);
        tv2 = Fp2.sqr(tv1);
        tv2 = Fp2.add(tv2, tv1);
        tv3 = Fp2.add(tv2, Fp2.ONE);
        tv3 = Fp2.mul(tv3, B);
        tv4 = Fp2.cmov(Z2, Fp2.neg(tv2), !Fp2.eql(tv2, Fp2.ZERO));
        tv4 = Fp2.mul(tv4, A2);
        tv2 = Fp2.sqr(tv3);
        tv6 = Fp2.sqr(tv4);
        tv5 = Fp2.mul(tv6, A2);
        tv2 = Fp2.add(tv2, tv5);
        tv2 = Fp2.mul(tv2, tv3);
        tv6 = Fp2.mul(tv6, tv4);
        tv5 = Fp2.mul(tv6, B);
        tv2 = Fp2.add(tv2, tv5);
        x = Fp2.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp2.mul(tv1, u);
        y = Fp2.mul(y, value);
        x = Fp2.cmov(x, tv3, isValid);
        y = Fp2.cmov(y, value, isValid);
        const e1 = Fp2.isOdd(u) === Fp2.isOdd(y);
        y = Fp2.cmov(Fp2.neg(y), y, e1);
        const tv4_inv = (0, modular_ts_1.FpInvertBatch)(Fp2, [tv4], true)[0];
        x = Fp2.mul(x, tv4_inv);
        return { x, y };
      };
    }
    function ecdsa(Point, hash2, ecdsaOpts = {}) {
      (0, utils_1.ahash)(hash2);
      (0, utils_ts_1._validateObject)(ecdsaOpts, {}, {
        hmac: "function",
        lowS: "boolean",
        randomBytes: "function",
        bits2int: "function",
        bits2int_modN: "function"
      });
      const randomBytes_ = ecdsaOpts.randomBytes || utils_ts_1.randomBytes;
      const hmac_ = ecdsaOpts.hmac || ((key, ...msgs) => (0, hmac_js_1.hmac)(hash2, key, (0, utils_ts_1.concatBytes)(...msgs)));
      const { Fp: Fp2, Fn: Fn2 } = Point;
      const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn2;
      const seedLen = (0, modular_ts_1.getMinHashLength)(CURVE_ORDER);
      const lengths = {
        secret: Fn2.BYTES,
        public: 1 + Fp2.BYTES,
        publicUncompressed: 1 + 2 * Fp2.BYTES,
        signature: 2 * Fn2.BYTES,
        seed: seedLen
      };
      function isBiggerThanHalfOrder(number2) {
        const HALF = CURVE_ORDER >> _1n6;
        return number2 > HALF;
      }
      function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? Fn2.neg(s) : s;
      }
      function aValidRS(title, num) {
        if (!Fn2.isValidNot0(num))
          throw new Error(`invalid signature ${title}: out of range 1..CURVE.n`);
      }
      class Signature {
        constructor(r, s, recovery) {
          aValidRS("r", r);
          aValidRS("s", s);
          this.r = r;
          this.s = s;
          if (recovery != null)
            this.recovery = recovery;
          Object.freeze(this);
        }
        static fromBytes(bytes3, format = "compact") {
          if (format === "compact") {
            const L2 = Fn2.BYTES;
            (0, utils_ts_1.abytes)(bytes3, L2 * 2);
            const r = bytes3.subarray(0, L2);
            const s = bytes3.subarray(L2, L2 * 2);
            return new Signature(Fn2.fromBytes(r), Fn2.fromBytes(s));
          }
          if (format === "der") {
            (0, utils_ts_1.abytes)(bytes3);
            const { r, s } = exports.DER.toSig(bytes3);
            return new Signature(r, s);
          }
          throw new Error("invalid format");
        }
        static fromHex(hex2, format) {
          return this.fromBytes((0, utils_ts_1.hexToBytes)(hex2), format);
        }
        addRecoveryBit(recovery) {
          return new Signature(this.r, this.s, recovery);
        }
        // ProjPointType<bigint>
        recoverPublicKey(msgHash) {
          const FIELD_ORDER = Fp2.ORDER;
          const { r, s, recovery: rec } = this;
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const hasCofactor = CURVE_ORDER * _2n6 < FIELD_ORDER;
          if (hasCofactor && rec > 1)
            throw new Error("recovery id is ambiguous for h>1 curve");
          const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;
          if (!Fp2.isValid(radj))
            throw new Error("recovery id 2 or 3 invalid");
          const x = Fp2.toBytes(radj);
          const R2 = Point.fromHex((0, utils_ts_1.concatBytes)(pprefix((rec & 1) === 0), x));
          const ir = Fn2.inv(radj);
          const h2 = bits2int_modN((0, utils_ts_1.ensureBytes)("msgHash", msgHash));
          const u1 = Fn2.create(-h2 * ir);
          const u2 = Fn2.create(s * ir);
          const Q = Point.BASE.multiplyUnsafe(u1).add(R2.multiplyUnsafe(u2));
          if (Q.is0())
            throw new Error("point at infinify");
          Q.assertValidity();
          return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature(this.r, Fn2.neg(this.s), this.recovery) : this;
        }
        toBytes(format = "compact") {
          if (format === "compact")
            return (0, utils_ts_1.concatBytes)(Fn2.toBytes(this.r), Fn2.toBytes(this.s));
          if (format === "der")
            return (0, utils_ts_1.hexToBytes)(exports.DER.hexFromSig(this));
          throw new Error("invalid format");
        }
        toHex(format) {
          return (0, utils_ts_1.bytesToHex)(this.toBytes(format));
        }
        // TODO: remove
        assertValidity() {
        }
        static fromCompact(hex2) {
          return Signature.fromBytes((0, utils_ts_1.ensureBytes)("sig", hex2), "compact");
        }
        static fromDER(hex2) {
          return Signature.fromBytes((0, utils_ts_1.ensureBytes)("sig", hex2), "der");
        }
        toDERRawBytes() {
          return this.toBytes("der");
        }
        toDERHex() {
          return (0, utils_ts_1.bytesToHex)(this.toBytes("der"));
        }
        toCompactRawBytes() {
          return this.toBytes("compact");
        }
        toCompactHex() {
          return (0, utils_ts_1.bytesToHex)(this.toBytes("compact"));
        }
      }
      function isValidSecretKey(privateKey) {
        try {
          return !!_normFnElement(Fn2, privateKey);
        } catch (error) {
          return false;
        }
      }
      function isValidPublicKey(publicKey2, isCompressed) {
        try {
          const l17 = publicKey2.length;
          if (isCompressed === true && l17 !== lengths.public)
            return false;
          if (isCompressed === false && l17 !== lengths.publicUncompressed)
            return false;
          return !!Point.fromBytes(publicKey2);
        } catch (error) {
          return false;
        }
      }
      function randomSecretKey(seed = randomBytes_(seedLen)) {
        return (0, modular_ts_1.mapHashToField)(seed, CURVE_ORDER);
      }
      const utils2 = {
        isValidSecretKey,
        isValidPublicKey,
        randomSecretKey,
        // TODO: remove
        isValidPrivateKey: isValidSecretKey,
        randomPrivateKey: randomSecretKey,
        normPrivateKeyToScalar: (key) => _normFnElement(Fn2, key),
        precompute(windowSize = 8, point = Point.BASE) {
          return point.precompute(windowSize, false);
        }
      };
      function getPublicKey(secretKey, isCompressed = true) {
        return Point.BASE.multiply(_normFnElement(Fn2, secretKey)).toBytes(isCompressed);
      }
      function isProbPub(item) {
        if (typeof item === "bigint")
          return false;
        if (item instanceof Point)
          return true;
        if (Fn2.allowedLengths || lengths.secret === lengths.public)
          return void 0;
        const l17 = (0, utils_ts_1.ensureBytes)("key", item).length;
        return l17 === lengths.public || l17 === lengths.publicUncompressed;
      }
      function getSharedSecret(secretKeyA, publicKeyB, isCompressed = true) {
        if (isProbPub(secretKeyA) === true)
          throw new Error("first arg must be private key");
        if (isProbPub(publicKeyB) === false)
          throw new Error("second arg must be public key");
        const s = _normFnElement(Fn2, secretKeyA);
        const b2 = Point.fromHex(publicKeyB);
        return b2.multiply(s).toBytes(isCompressed);
      }
      const bits2int = ecdsaOpts.bits2int || function(bytes3) {
        if (bytes3.length > 8192)
          throw new Error("input is too large");
        const num = (0, utils_ts_1.bytesToNumberBE)(bytes3);
        const delta = bytes3.length * 8 - fnBits;
        return delta > 0 ? num >> BigInt(delta) : num;
      };
      const bits2int_modN = ecdsaOpts.bits2int_modN || function(bytes3) {
        return Fn2.create(bits2int(bytes3));
      };
      const ORDER_MASK = (0, utils_ts_1.bitMask)(fnBits);
      function int2octets(num) {
        (0, utils_ts_1.aInRange)("num < 2^" + fnBits, num, _0n6, ORDER_MASK);
        return Fn2.toBytes(num);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k2) => k2 in opts))
          throw new Error("sign() legacy options not supported");
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_ts_1.ensureBytes)("msgHash", msgHash);
        validateSigVerOpts(opts);
        if (prehash)
          msgHash = (0, utils_ts_1.ensureBytes)("prehashed msgHash", hash2(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = _normFnElement(Fn2, privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null && ent !== false) {
          const e = ent === true ? randomBytes_(lengths.secret) : ent;
          seedArgs.push((0, utils_ts_1.ensureBytes)("extraEntropy", e));
        }
        const seed = (0, utils_ts_1.concatBytes)(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k2 = bits2int(kBytes);
          if (!Fn2.isValidNot0(k2))
            return;
          const ik = Fn2.inv(k2);
          const q2 = Point.BASE.multiply(k2).toAffine();
          const r = Fn2.create(q2.x);
          if (r === _0n6)
            return;
          const s = Fn2.create(ik * Fn2.create(m + r * d));
          if (s === _0n6)
            return;
          let recovery = (q2.x === r ? 0 : 2) | Number(q2.y & _1n6);
          let normS = s;
          if (lowS && isBiggerThanHalfOrder(s)) {
            normS = normalizeS(s);
            recovery ^= 1;
          }
          return new Signature(r, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: ecdsaOpts.lowS, prehash: false };
      const defaultVerOpts = { lowS: ecdsaOpts.lowS, prehash: false };
      function sign2(msgHash, secretKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, secretKey, opts);
        const drbg = (0, utils_ts_1.createHmacDrbg)(hash2.outputLen, Fn2.BYTES, hmac_);
        return drbg(seed, k2sig);
      }
      Point.BASE.precompute(8);
      function verify(signature, msgHash, publicKey2, opts = defaultVerOpts) {
        const sg = signature;
        msgHash = (0, utils_ts_1.ensureBytes)("msgHash", msgHash);
        publicKey2 = (0, utils_ts_1.ensureBytes)("publicKey", publicKey2);
        validateSigVerOpts(opts);
        const { lowS, prehash, format } = opts;
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        let _sig = void 0;
        let P2;
        if (format === void 0) {
          const isHex3 = typeof sg === "string" || (0, utils_ts_1.isBytes)(sg);
          const isObj = !isHex3 && sg !== null && typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint";
          if (!isHex3 && !isObj)
            throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
          if (isObj) {
            _sig = new Signature(sg.r, sg.s);
          } else if (isHex3) {
            try {
              _sig = Signature.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports.DER.Err))
                throw derError;
            }
            if (!_sig) {
              try {
                _sig = Signature.fromCompact(sg);
              } catch (error) {
                return false;
              }
            }
          }
        } else {
          if (format === "compact" || format === "der") {
            if (typeof sg !== "string" && !(0, utils_ts_1.isBytes)(sg))
              throw new Error('"der" / "compact" format expects Uint8Array signature');
            _sig = Signature.fromBytes((0, utils_ts_1.ensureBytes)("sig", sg), format);
          } else if (format === "js") {
            if (!(sg instanceof Signature))
              throw new Error('"js" format expects Signature instance');
            _sig = sg;
          } else {
            throw new Error('format must be "compact", "der" or "js"');
          }
        }
        if (!_sig)
          return false;
        try {
          P2 = Point.fromHex(publicKey2);
          if (lowS && _sig.hasHighS())
            return false;
          if (prehash)
            msgHash = hash2(msgHash);
          const { r, s } = _sig;
          const h2 = bits2int_modN(msgHash);
          const is = Fn2.inv(s);
          const u1 = Fn2.create(h2 * is);
          const u2 = Fn2.create(r * is);
          const R2 = Point.BASE.multiplyUnsafe(u1).add(P2.multiplyUnsafe(u2));
          if (R2.is0())
            return false;
          const v3 = Fn2.create(R2.x);
          return v3 === r;
        } catch (e) {
          return false;
        }
      }
      function keygen(seed) {
        const secretKey = utils2.randomSecretKey(seed);
        return { secretKey, publicKey: getPublicKey(secretKey) };
      }
      return Object.freeze({
        keygen,
        getPublicKey,
        sign: sign2,
        verify,
        getSharedSecret,
        utils: utils2,
        Point,
        Signature,
        info: { type: "weierstrass", lengths, publicKeyHasPrefix: true }
      });
    }
    function _weierstrass_legacy_opts_to_new(c) {
      const CURVE = {
        a: c.a,
        b: c.b,
        p: c.Fp.ORDER,
        n: c.n,
        h: c.h,
        Gx: c.Gx,
        Gy: c.Gy
      };
      const Fp2 = c.Fp;
      let allowedLengths = c.allowedPrivateKeyLengths ? Array.from(new Set(c.allowedPrivateKeyLengths.map((l17) => Math.ceil(l17 / 2)))) : void 0;
      const Fn2 = (0, modular_ts_1.Field)(CURVE.n, {
        BITS: c.nBitLength,
        allowedLengths,
        modOnDecode: c.wrapPrivateKey
      });
      const curveOpts = {
        Fp: Fp2,
        Fn: Fn2,
        allowInfinityPoint: c.allowInfinityPoint,
        endo: c.endo,
        isTorsionFree: c.isTorsionFree,
        clearCofactor: c.clearCofactor,
        fromBytes: c.fromBytes,
        toBytes: c.toBytes
      };
      return { CURVE, curveOpts };
    }
    function _ecdsa_legacy_opts_to_new(c) {
      const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);
      const ecdsaOpts = {
        hmac: c.hmac,
        randomBytes: c.randomBytes,
        lowS: c.lowS,
        bits2int: c.bits2int,
        bits2int_modN: c.bits2int_modN
      };
      return { CURVE, curveOpts, hash: c.hash, ecdsaOpts };
    }
    function _weierstrass_new_output_to_legacy(c, Point) {
      const { Fp: Fp2, Fn: Fn2 } = Point;
      function isWithinCurveOrder(num) {
        return (0, utils_ts_1.inRange)(num, _1n6, Fn2.ORDER);
      }
      const weierstrassEquation = _legacyHelperEquat(Fp2, c.a, c.b);
      return Object.assign({}, {
        CURVE: c,
        Point,
        ProjectivePoint: Point,
        normPrivateKeyToScalar: (key) => _normFnElement(Fn2, key),
        weierstrassEquation,
        isWithinCurveOrder
      });
    }
    function _ecdsa_new_output_to_legacy(c, ecdsa2) {
      return Object.assign({}, ecdsa2, {
        ProjectivePoint: ecdsa2.Point,
        CURVE: c
      });
    }
    function weierstrass(c) {
      const { CURVE, curveOpts, hash: hash2, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);
      const Point = weierstrassN(CURVE, curveOpts);
      const signs = ecdsa(Point, hash2, ecdsaOpts);
      return _ecdsa_new_output_to_legacy(c, signs);
    }
  }
});

// node_modules/@noble/curves/_shortw_utils.js
var require_shortw_utils = __commonJS({
  "node_modules/@noble/curves/_shortw_utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHash = getHash;
    exports.createCurve = createCurve;
    var weierstrass_ts_1 = require_weierstrass();
    function getHash(hash2) {
      return { hash: hash2 };
    }
    function createCurve(curveDef, defHash) {
      const create = (hash2) => (0, weierstrass_ts_1.weierstrass)({ ...curveDef, hash: hash2 });
      return { ...create(defHash), create };
    }
  }
});

// node_modules/@noble/curves/abstract/hash-to-curve.js
var require_hash_to_curve = __commonJS({
  "node_modules/@noble/curves/abstract/hash-to-curve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._DST_scalar = void 0;
    exports.expand_message_xmd = expand_message_xmd2;
    exports.expand_message_xof = expand_message_xof;
    exports.hash_to_field = hash_to_field;
    exports.isogenyMap = isogenyMap;
    exports.createHasher = createHasher2;
    var utils_ts_1 = require_utils5();
    var modular_ts_1 = require_modular();
    var os2ip = utils_ts_1.bytesToNumberBE;
    function i2osp(value, length) {
      anum(value);
      anum(length);
      if (value < 0 || value >= 1 << 8 * length)
        throw new Error("invalid I2OSP input: " + value);
      const res = Array.from({ length }).fill(0);
      for (let i = length - 1; i >= 0; i--) {
        res[i] = value & 255;
        value >>>= 8;
      }
      return new Uint8Array(res);
    }
    function strxor(a, b2) {
      const arr = new Uint8Array(a.length);
      for (let i = 0; i < a.length; i++) {
        arr[i] = a[i] ^ b2[i];
      }
      return arr;
    }
    function anum(item) {
      if (!Number.isSafeInteger(item))
        throw new Error("number expected");
    }
    function normDST(DST) {
      if (!(0, utils_ts_1.isBytes)(DST) && typeof DST !== "string")
        throw new Error("DST must be Uint8Array or string");
      return typeof DST === "string" ? (0, utils_ts_1.utf8ToBytes)(DST) : DST;
    }
    function expand_message_xmd2(msg, DST, lenInBytes, H2) {
      (0, utils_ts_1.abytes)(msg);
      anum(lenInBytes);
      DST = normDST(DST);
      if (DST.length > 255)
        DST = H2((0, utils_ts_1.concatBytes)((0, utils_ts_1.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
      const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H2;
      const ell = Math.ceil(lenInBytes / b_in_bytes);
      if (lenInBytes > 65535 || ell > 255)
        throw new Error("expand_message_xmd: invalid lenInBytes");
      const DST_prime = (0, utils_ts_1.concatBytes)(DST, i2osp(DST.length, 1));
      const Z_pad = i2osp(0, r_in_bytes);
      const l_i_b_str = i2osp(lenInBytes, 2);
      const b2 = new Array(ell);
      const b_0 = H2((0, utils_ts_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
      b2[0] = H2((0, utils_ts_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));
      for (let i = 1; i <= ell; i++) {
        const args = [strxor(b_0, b2[i - 1]), i2osp(i + 1, 1), DST_prime];
        b2[i] = H2((0, utils_ts_1.concatBytes)(...args));
      }
      const pseudo_random_bytes = (0, utils_ts_1.concatBytes)(...b2);
      return pseudo_random_bytes.slice(0, lenInBytes);
    }
    function expand_message_xof(msg, DST, lenInBytes, k2, H2) {
      (0, utils_ts_1.abytes)(msg);
      anum(lenInBytes);
      DST = normDST(DST);
      if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k2 / 8);
        DST = H2.create({ dkLen }).update((0, utils_ts_1.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
      }
      if (lenInBytes > 65535 || DST.length > 255)
        throw new Error("expand_message_xof: invalid lenInBytes");
      return H2.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
    }
    function hash_to_field(msg, count2, options) {
      (0, utils_ts_1._validateObject)(options, {
        p: "bigint",
        m: "number",
        k: "number",
        hash: "function"
      });
      const { p, k: k2, m, hash: hash2, expand: expand3, DST } = options;
      if (!(0, utils_ts_1.isHash)(options.hash))
        throw new Error("expected valid hash");
      (0, utils_ts_1.abytes)(msg);
      anum(count2);
      const log2p = p.toString(2).length;
      const L2 = Math.ceil((log2p + k2) / 8);
      const len_in_bytes = count2 * m * L2;
      let prb;
      if (expand3 === "xmd") {
        prb = expand_message_xmd2(msg, DST, len_in_bytes, hash2);
      } else if (expand3 === "xof") {
        prb = expand_message_xof(msg, DST, len_in_bytes, k2, hash2);
      } else if (expand3 === "_internal_pass") {
        prb = msg;
      } else {
        throw new Error('expand must be "xmd" or "xof"');
      }
      const u = new Array(count2);
      for (let i = 0; i < count2; i++) {
        const e = new Array(m);
        for (let j3 = 0; j3 < m; j3++) {
          const elm_offset = L2 * (j3 + i * m);
          const tv = prb.subarray(elm_offset, elm_offset + L2);
          e[j3] = (0, modular_ts_1.mod)(os2ip(tv), p);
        }
        u[i] = e;
      }
      return u;
    }
    function isogenyMap(field, map3) {
      const coeff = map3.map((i) => Array.from(i).reverse());
      return (x, y) => {
        const [xn, xd, yn, yd] = coeff.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
        const [xd_inv, yd_inv] = (0, modular_ts_1.FpInvertBatch)(field, [xd, yd], true);
        x = field.mul(xn, xd_inv);
        y = field.mul(y, field.mul(yn, yd_inv));
        return { x, y };
      };
    }
    exports._DST_scalar = (0, utils_ts_1.utf8ToBytes)("HashToScalar-");
    function createHasher2(Point, mapToCurve, defaults2) {
      if (typeof mapToCurve !== "function")
        throw new Error("mapToCurve() must be defined");
      function map3(num) {
        return Point.fromAffine(mapToCurve(num));
      }
      function clear(initial) {
        const P2 = initial.clearCofactor();
        if (P2.equals(Point.ZERO))
          return Point.ZERO;
        P2.assertValidity();
        return P2;
      }
      return {
        defaults: defaults2,
        hashToCurve(msg, options) {
          const opts = Object.assign({}, defaults2, options);
          const u = hash_to_field(msg, 2, opts);
          const u0 = map3(u[0]);
          const u1 = map3(u[1]);
          return clear(u0.add(u1));
        },
        encodeToCurve(msg, options) {
          const optsDst = defaults2.encodeDST ? { DST: defaults2.encodeDST } : {};
          const opts = Object.assign({}, defaults2, optsDst, options);
          const u = hash_to_field(msg, 1, opts);
          const u0 = map3(u[0]);
          return clear(u0);
        },
        /** See {@link H2CHasher} */
        mapToCurve(scalars) {
          if (!Array.isArray(scalars))
            throw new Error("expected array of bigints");
          for (const i of scalars)
            if (typeof i !== "bigint")
              throw new Error("expected array of bigints");
          return clear(map3(scalars));
        },
        // hash_to_scalar can produce 0: https://www.rfc-editor.org/errata/eid8393
        // RFC 9380, draft-irtf-cfrg-bbs-signatures-08
        hashToScalar(msg, options) {
          const N3 = Point.Fn.ORDER;
          const opts = Object.assign({}, defaults2, { p: N3, m: 1, DST: exports._DST_scalar }, options);
          return hash_to_field(msg, 1, opts)[0][0];
        }
      };
    }
  }
});

// node_modules/@noble/curves/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/@noble/curves/secp256k1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeToCurve = exports.hashToCurve = exports.secp256k1_hasher = exports.schnorr = exports.secp256k1 = void 0;
    var sha2_js_1 = require_sha2();
    var utils_js_1 = require_utils4();
    var _shortw_utils_ts_1 = require_shortw_utils();
    var hash_to_curve_ts_1 = require_hash_to_curve();
    var modular_ts_1 = require_modular();
    var weierstrass_ts_1 = require_weierstrass();
    var utils_ts_1 = require_utils5();
    var secp256k1_CURVE = {
      p: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),
      n: BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),
      h: BigInt(1),
      a: BigInt(0),
      b: BigInt(7),
      Gx: BigInt("0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
      Gy: BigInt("0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8")
    };
    var secp256k1_ENDO = {
      beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
      basises: [
        [BigInt("0x3086d221a7d46bcde86c90e49284eb15"), -BigInt("0xe4437ed6010e88286f547fa90abfe4c3")],
        [BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), BigInt("0x3086d221a7d46bcde86c90e49284eb15")]
      ]
    };
    var _0n6 = BigInt(0);
    var _1n6 = BigInt(1);
    var _2n6 = BigInt(2);
    function sqrtMod(y) {
      const P2 = secp256k1_CURVE.p;
      const _3n3 = BigInt(3), _6n2 = BigInt(6), _11n2 = BigInt(11), _22n = BigInt(22);
      const _23n2 = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = y * y * y % P2;
      const b3 = b2 * b2 * y % P2;
      const b6 = (0, modular_ts_1.pow2)(b3, _3n3, P2) * b3 % P2;
      const b9 = (0, modular_ts_1.pow2)(b6, _3n3, P2) * b3 % P2;
      const b11 = (0, modular_ts_1.pow2)(b9, _2n6, P2) * b2 % P2;
      const b22 = (0, modular_ts_1.pow2)(b11, _11n2, P2) * b11 % P2;
      const b44 = (0, modular_ts_1.pow2)(b22, _22n, P2) * b22 % P2;
      const b88 = (0, modular_ts_1.pow2)(b44, _44n, P2) * b44 % P2;
      const b176 = (0, modular_ts_1.pow2)(b88, _88n, P2) * b88 % P2;
      const b220 = (0, modular_ts_1.pow2)(b176, _44n, P2) * b44 % P2;
      const b223 = (0, modular_ts_1.pow2)(b220, _3n3, P2) * b3 % P2;
      const t1 = (0, modular_ts_1.pow2)(b223, _23n2, P2) * b22 % P2;
      const t2 = (0, modular_ts_1.pow2)(t1, _6n2, P2) * b2 % P2;
      const root = (0, modular_ts_1.pow2)(t2, _2n6, P2);
      if (!Fpk1.eql(Fpk1.sqr(root), y))
        throw new Error("Cannot find square root");
      return root;
    }
    var Fpk1 = (0, modular_ts_1.Field)(secp256k1_CURVE.p, void 0, void 0, { sqrt: sqrtMod });
    exports.secp256k1 = (0, _shortw_utils_ts_1.createCurve)({ ...secp256k1_CURVE, Fp: Fpk1, lowS: true, endo: secp256k1_ENDO }, sha2_js_1.sha256);
    var TAGGED_HASH_PREFIXES = {};
    function taggedHash(tag, ...messages) {
      let tagP = TAGGED_HASH_PREFIXES[tag];
      if (tagP === void 0) {
        const tagH = (0, sha2_js_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
        tagP = (0, utils_ts_1.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
      }
      return (0, sha2_js_1.sha256)((0, utils_ts_1.concatBytes)(tagP, ...messages));
    }
    var pointToBytes = (point) => point.toBytes(true).slice(1);
    var numTo32b = (n) => (0, utils_ts_1.numberToBytesBE)(n, 32);
    var modP = (x) => (0, modular_ts_1.mod)(x, secp256k1_CURVE.p);
    var modN = (x) => (0, modular_ts_1.mod)(x, secp256k1_CURVE.n);
    var Point = (() => exports.secp256k1.Point)();
    var hasEven = (y) => y % _2n6 === _0n6;
    function schnorrGetExtPubKey(priv) {
      let d_ = (0, weierstrass_ts_1._normFnElement)(Point.Fn, priv);
      let p = Point.BASE.multiply(d_);
      const scalar = hasEven(p.y) ? d_ : modN(-d_);
      return { scalar, bytes: pointToBytes(p) };
    }
    function lift_x(x) {
      (0, utils_ts_1.aInRange)("x", x, _1n6, secp256k1_CURVE.p);
      const xx = modP(x * x);
      const c = modP(xx * x + BigInt(7));
      let y = sqrtMod(c);
      if (!hasEven(y))
        y = modP(-y);
      const p = Point.fromAffine({ x, y });
      p.assertValidity();
      return p;
    }
    var num = utils_ts_1.bytesToNumberBE;
    function challenge(...args) {
      return modN(num(taggedHash("BIP0340/challenge", ...args)));
    }
    function schnorrGetPublicKey(secretKey) {
      return schnorrGetExtPubKey(secretKey).bytes;
    }
    function schnorrSign(message, secretKey, auxRand = (0, utils_js_1.randomBytes)(32)) {
      const m = (0, utils_ts_1.ensureBytes)("message", message);
      const { bytes: px, scalar: d } = schnorrGetExtPubKey(secretKey);
      const a = (0, utils_ts_1.ensureBytes)("auxRand", auxRand, 32);
      const t = numTo32b(d ^ num(taggedHash("BIP0340/aux", a)));
      const rand = taggedHash("BIP0340/nonce", t, px, m);
      const k_ = modN(num(rand));
      if (k_ === _0n6)
        throw new Error("sign failed: k is zero");
      const { bytes: rx, scalar: k2 } = schnorrGetExtPubKey(k_);
      const e = challenge(rx, px, m);
      const sig2 = new Uint8Array(64);
      sig2.set(rx, 0);
      sig2.set(numTo32b(modN(k2 + e * d)), 32);
      if (!schnorrVerify(sig2, m, px))
        throw new Error("sign: Invalid signature produced");
      return sig2;
    }
    function schnorrVerify(signature, message, publicKey2) {
      const sig2 = (0, utils_ts_1.ensureBytes)("signature", signature, 64);
      const m = (0, utils_ts_1.ensureBytes)("message", message);
      const pub = (0, utils_ts_1.ensureBytes)("publicKey", publicKey2, 32);
      try {
        const P2 = lift_x(num(pub));
        const r = num(sig2.subarray(0, 32));
        if (!(0, utils_ts_1.inRange)(r, _1n6, secp256k1_CURVE.p))
          return false;
        const s = num(sig2.subarray(32, 64));
        if (!(0, utils_ts_1.inRange)(s, _1n6, secp256k1_CURVE.n))
          return false;
        const e = challenge(numTo32b(r), pointToBytes(P2), m);
        const R2 = Point.BASE.multiplyUnsafe(s).add(P2.multiplyUnsafe(modN(-e)));
        const { x, y } = R2.toAffine();
        if (R2.is0() || !hasEven(y) || x !== r)
          return false;
        return true;
      } catch (error) {
        return false;
      }
    }
    exports.schnorr = (() => {
      const size = 32;
      const seedLength = 48;
      const randomSecretKey = (seed = (0, utils_js_1.randomBytes)(seedLength)) => {
        return (0, modular_ts_1.mapHashToField)(seed, secp256k1_CURVE.n);
      };
      exports.secp256k1.utils.randomSecretKey;
      function keygen(seed) {
        const secretKey = randomSecretKey(seed);
        return { secretKey, publicKey: schnorrGetPublicKey(secretKey) };
      }
      return {
        keygen,
        getPublicKey: schnorrGetPublicKey,
        sign: schnorrSign,
        verify: schnorrVerify,
        Point,
        utils: {
          randomSecretKey,
          randomPrivateKey: randomSecretKey,
          taggedHash,
          // TODO: remove
          lift_x,
          pointToBytes,
          numberToBytesBE: utils_ts_1.numberToBytesBE,
          bytesToNumberBE: utils_ts_1.bytesToNumberBE,
          mod: modular_ts_1.mod
        },
        info: {
          type: "weierstrass",
          publicKeyHasPrefix: false,
          lengths: {
            secret: size,
            public: size,
            signature: size * 2,
            seed: seedLength
          }
        }
      };
    })();
    var isoMap = (() => (0, hash_to_curve_ts_1.isogenyMap)(Fpk1, [
      // xNum
      [
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
        "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
        "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
      ],
      // xDen
      [
        "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
        "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ],
      // yNum
      [
        "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
        "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
        "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
        "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
      ],
      // yDen
      [
        "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
        "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
        "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ]
    ].map((i) => i.map((j3) => BigInt(j3)))))();
    var mapSWU = (() => (0, weierstrass_ts_1.mapToCurveSimpleSWU)(Fpk1, {
      A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
      B: BigInt("1771"),
      Z: Fpk1.create(BigInt("-11"))
    }))();
    exports.secp256k1_hasher = (() => (0, hash_to_curve_ts_1.createHasher)(exports.secp256k1.Point, (scalars) => {
      const { x, y } = mapSWU(Fpk1.create(scalars[0]));
      return isoMap(x, y);
    }, {
      DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
      encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
      p: Fpk1.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha2_js_1.sha256
    }))();
    exports.hashToCurve = (() => exports.secp256k1_hasher.hashToCurve)();
    exports.encodeToCurve = (() => exports.secp256k1_hasher.encodeToCurve)();
  }
});

// node_modules/@noble/curves/abstract/utils.js
var require_utils6 = __commonJS({
  "node_modules/@noble/curves/abstract/utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m, k2);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_utils5(), exports);
  }
});

// node_modules/ripple-keypairs/dist/utils/Sha512.js
var require_Sha512 = __commonJS({
  "node_modules/ripple-keypairs/dist/utils/Sha512.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var sha512_1 = require_browser4();
    var utils_1 = require_utils6();
    var Sha512 = class _Sha512 {
      constructor() {
        this.hash = sha512_1.sha512.create();
      }
      static half(input) {
        return new _Sha512().add(input).first256();
      }
      add(bytes3) {
        this.hash.update(bytes3);
        return this;
      }
      addU32(i) {
        const buffer2 = new Uint8Array(4);
        new DataView(buffer2.buffer).setUint32(0, i);
        return this.add(buffer2);
      }
      finish() {
        return this.hash.digest();
      }
      first256() {
        return this.finish().slice(0, 32);
      }
      first256BigInt() {
        return (0, utils_1.bytesToNumberBE)(this.first256());
      }
    };
    exports.default = Sha512;
  }
});

// node_modules/ripple-keypairs/dist/signing-schemes/secp256k1/utils.js
var require_utils7 = __commonJS({
  "node_modules/ripple-keypairs/dist/signing-schemes/secp256k1/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accountPublicFromPublicGenerator = exports.derivePrivateKey = void 0;
    var secp256k1_1 = require_secp256k1();
    var Sha512_1 = __importDefault(require_Sha512());
    var ZERO = BigInt(0);
    function deriveScalar(bytes3, discrim) {
      const order = secp256k1_1.secp256k1.CURVE.n;
      for (let i = 0; i <= 4294967295; i++) {
        const hasher2 = new Sha512_1.default().add(bytes3);
        if (discrim !== void 0) {
          hasher2.addU32(discrim);
        }
        hasher2.addU32(i);
        const key = hasher2.first256BigInt();
        if (key > ZERO && key < order) {
          return key;
        }
      }
      throw new Error("impossible unicorn ;)");
    }
    function derivePrivateKey(seed, opts = {}) {
      const root = opts.validator;
      const order = secp256k1_1.secp256k1.CURVE.n;
      const privateGen = deriveScalar(seed);
      if (root) {
        return privateGen;
      }
      const publicGen = secp256k1_1.secp256k1.ProjectivePoint.BASE.multiply(privateGen).toRawBytes(true);
      const accountIndex = opts.accountIndex || 0;
      return (deriveScalar(publicGen, accountIndex) + privateGen) % order;
    }
    exports.derivePrivateKey = derivePrivateKey;
    function accountPublicFromPublicGenerator(publicGenBytes) {
      const rootPubPoint = secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicGenBytes);
      const scalar = deriveScalar(publicGenBytes, 0);
      const point = secp256k1_1.secp256k1.ProjectivePoint.BASE.multiply(scalar);
      const offset = rootPubPoint.add(point);
      return offset.toRawBytes(true);
    }
    exports.accountPublicFromPublicGenerator = accountPublicFromPublicGenerator;
  }
});

// node_modules/ripple-keypairs/dist/utils/assert.js
var require_assert2 = __commonJS({
  "node_modules/ripple-keypairs/dist/utils/assert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var assertHelper = {
      ok(cond, message) {
        if (!cond) {
          throw new Error(message);
        }
      }
    };
    exports.default = assertHelper;
  }
});

// node_modules/ripple-keypairs/dist/utils/getAlgorithmFromKey.js
var require_getAlgorithmFromKey = __commonJS({
  "node_modules/ripple-keypairs/dist/utils/getAlgorithmFromKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAlgorithmFromPrivateKey = exports.getAlgorithmFromPublicKey = exports.getAlgorithmFromKey = void 0;
    var Prefix;
    (function(Prefix2) {
      Prefix2[Prefix2["NONE"] = -1] = "NONE";
      Prefix2[Prefix2["ED25519"] = 237] = "ED25519";
      Prefix2[Prefix2["SECP256K1_PUB_X"] = 2] = "SECP256K1_PUB_X";
      Prefix2[Prefix2["SECP256K1_PUB_X_ODD_Y"] = 3] = "SECP256K1_PUB_X_ODD_Y";
      Prefix2[Prefix2["SECP256K1_PUB_XY"] = 4] = "SECP256K1_PUB_XY";
      Prefix2[Prefix2["SECP256K1_PRIVATE"] = 0] = "SECP256K1_PRIVATE";
    })(Prefix || (Prefix = {}));
    var KEY_TYPES = {
      [`private_${Prefix.NONE}_32`]: "ecdsa-secp256k1",
      [`private_${Prefix.SECP256K1_PRIVATE}_33`]: "ecdsa-secp256k1",
      [`private_${Prefix.ED25519}_33`]: "ed25519",
      [`public_${Prefix.ED25519}_33`]: "ed25519",
      [`public_${Prefix.SECP256K1_PUB_X}_33`]: "ecdsa-secp256k1",
      [`public_${Prefix.SECP256K1_PUB_X_ODD_Y}_33`]: "ecdsa-secp256k1",
      [`public_${Prefix.SECP256K1_PUB_XY}_65`]: "ecdsa-secp256k1"
    };
    function getKeyInfo(key) {
      return {
        prefix: key.length < 2 ? Prefix.NONE : parseInt(key.slice(0, 2), 16),
        len: key.length / 2
      };
    }
    function prefixRepr(prefix2) {
      return prefix2 === Prefix.NONE ? "None" : `0x${prefix2.toString(16).padStart(2, "0")}`;
    }
    function getValidFormatsTable(type) {
      const padding = 2;
      const colWidth = {
        algorithm: "ecdsa-secp256k1".length + padding,
        prefix: "0x00".length + padding
      };
      return Object.entries(KEY_TYPES).filter(([key]) => key.startsWith(type)).map(([key, algorithm]) => {
        const [, prefix2, length] = key.split("_");
        const paddedAlgo = algorithm.padEnd(colWidth.algorithm);
        const paddedPrefix = prefixRepr(Number(prefix2)).padEnd(colWidth.prefix);
        return `${paddedAlgo} - Prefix: ${paddedPrefix} Length: ${length} bytes`;
      }).join("\n");
    }
    function keyError({ key, type, prefix: prefix2, len }) {
      const validFormats = getValidFormatsTable(type);
      return `invalid_key:

Type: ${type}
Key: ${key}
Prefix: ${prefixRepr(prefix2)} 
Length: ${len} bytes

Acceptable ${type} formats are:
${validFormats}
`;
    }
    function getAlgorithmFromKey(key, type) {
      const { prefix: prefix2, len } = getKeyInfo(key);
      const usedPrefix = type === "private" && len === 32 ? Prefix.NONE : prefix2;
      const algorithm = KEY_TYPES[`${type}_${usedPrefix}_${len}`];
      if (!algorithm) {
        throw new Error(keyError({ key, type, len, prefix: usedPrefix }));
      }
      return algorithm;
    }
    exports.getAlgorithmFromKey = getAlgorithmFromKey;
    function getAlgorithmFromPublicKey(key) {
      return getAlgorithmFromKey(key, "public");
    }
    exports.getAlgorithmFromPublicKey = getAlgorithmFromPublicKey;
    function getAlgorithmFromPrivateKey(key) {
      return getAlgorithmFromKey(key, "private");
    }
    exports.getAlgorithmFromPrivateKey = getAlgorithmFromPrivateKey;
  }
});

// node_modules/ripple-keypairs/dist/signing-schemes/secp256k1/index.js
var require_secp256k12 = __commonJS({
  "node_modules/ripple-keypairs/dist/signing-schemes/secp256k1/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils6();
    var secp256k1_1 = require_secp256k1();
    var utils_2 = require_browser2();
    var utils_3 = require_utils7();
    var assert_1 = __importDefault(require_assert2());
    var Sha512_1 = __importDefault(require_Sha512());
    var SECP256K1_PREFIX = "00";
    var secp256k12 = {
      deriveKeypair(entropy, options) {
        const derived = (0, utils_3.derivePrivateKey)(entropy, options);
        const privateKey = SECP256K1_PREFIX + (0, utils_2.bytesToHex)((0, utils_1.numberToBytesBE)(derived, 32));
        const publicKey2 = (0, utils_2.bytesToHex)(secp256k1_1.secp256k1.getPublicKey(derived, true));
        return { privateKey, publicKey: publicKey2 };
      },
      sign(message, privateKey) {
        assert_1.default.ok(privateKey.length === 66 && privateKey.startsWith(SECP256K1_PREFIX) || privateKey.length === 64);
        const normedPrivateKey = privateKey.length === 66 ? privateKey.slice(2) : privateKey;
        return secp256k1_1.secp256k1.sign(Sha512_1.default.half(message), normedPrivateKey, {
          // "Canonical" signatures
          lowS: true,
          // Would fail tests if signatures aren't deterministic
          extraEntropy: void 0
        }).toDERHex(true).toUpperCase();
      },
      verify(message, signature, publicKey2) {
        const decoded = secp256k1_1.secp256k1.Signature.fromDER(signature);
        return secp256k1_1.secp256k1.verify(decoded, Sha512_1.default.half(message), publicKey2);
      }
    };
    exports.default = secp256k12;
  }
});

// node_modules/@noble/curves/abstract/edwards.js
var require_edwards = __commonJS({
  "node_modules/@noble/curves/abstract/edwards.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PrimeEdwardsPoint = void 0;
    exports.edwards = edwards2;
    exports.eddsa = eddsa2;
    exports.twistedEdwards = twistedEdwards2;
    var utils_ts_1 = require_utils5();
    var curve_ts_1 = require_curve();
    var modular_ts_1 = require_modular();
    var _0n6 = BigInt(0);
    var _1n6 = BigInt(1);
    var _2n6 = BigInt(2);
    var _8n4 = BigInt(8);
    function isEdValidXY2(Fp2, CURVE, x, y) {
      const x2 = Fp2.sqr(x);
      const y2 = Fp2.sqr(y);
      const left = Fp2.add(Fp2.mul(CURVE.a, x2), y2);
      const right = Fp2.add(Fp2.ONE, Fp2.mul(CURVE.d, Fp2.mul(x2, y2)));
      return Fp2.eql(left, right);
    }
    function edwards2(CURVE, curveOpts = {}) {
      const { Fp: Fp2, Fn: Fn2 } = (0, curve_ts_1._createCurveFields)("edwards", CURVE, curveOpts);
      const { h: cofactor, n: CURVE_ORDER } = CURVE;
      (0, utils_ts_1._validateObject)(curveOpts, {}, { uvRatio: "function" });
      const MASK = _2n6 << BigInt(Fn2.BYTES * 8) - _1n6;
      const modP = (n) => Fp2.create(n);
      const uvRatio2 = curveOpts.uvRatio || ((u, v3) => {
        try {
          return { isValid: true, value: Fp2.sqrt(Fp2.div(u, v3)) };
        } catch (e) {
          return { isValid: false, value: _0n6 };
        }
      });
      if (!isEdValidXY2(Fp2, CURVE, CURVE.Gx, CURVE.Gy))
        throw new Error("bad curve params: generator point");
      function acoord(title, n, banZero = false) {
        const min2 = banZero ? _1n6 : _0n6;
        (0, utils_ts_1.aInRange)("coordinate " + title, n, min2, MASK);
        return n;
      }
      function aextpoint(other) {
        if (!(other instanceof Point))
          throw new Error("ExtendedPoint expected");
      }
      const toAffineMemo = (0, utils_ts_1.memoized)((p, iz) => {
        const { X: X2, Y, Z: Z2 } = p;
        const is0 = p.is0();
        if (iz == null)
          iz = is0 ? _8n4 : Fp2.inv(Z2);
        const x = modP(X2 * iz);
        const y = modP(Y * iz);
        const zz = Fp2.mul(Z2, iz);
        if (is0)
          return { x: _0n6, y: _1n6 };
        if (zz !== _1n6)
          throw new Error("invZ was invalid");
        return { x, y };
      });
      const assertValidMemo = (0, utils_ts_1.memoized)((p) => {
        const { a, d } = CURVE;
        if (p.is0())
          throw new Error("bad point: ZERO");
        const { X: X2, Y, Z: Z2, T } = p;
        const X22 = modP(X2 * X2);
        const Y2 = modP(Y * Y);
        const Z22 = modP(Z2 * Z2);
        const Z4 = modP(Z22 * Z22);
        const aX2 = modP(X22 * a);
        const left = modP(Z22 * modP(aX2 + Y2));
        const right = modP(Z4 + modP(d * modP(X22 * Y2)));
        if (left !== right)
          throw new Error("bad point: equation left != right (1)");
        const XY = modP(X2 * Y);
        const ZT = modP(Z2 * T);
        if (XY !== ZT)
          throw new Error("bad point: equation left != right (2)");
        return true;
      });
      class Point {
        constructor(X2, Y, Z2, T) {
          this.X = acoord("x", X2);
          this.Y = acoord("y", Y);
          this.Z = acoord("z", Z2, true);
          this.T = acoord("t", T);
          Object.freeze(this);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        // TODO: remove
        get ex() {
          return this.X;
        }
        get ey() {
          return this.Y;
        }
        get ez() {
          return this.Z;
        }
        get et() {
          return this.T;
        }
        static normalizeZ(points) {
          return (0, curve_ts_1.normalizeZ)(Point, points);
        }
        static msm(points, scalars) {
          return (0, curve_ts_1.pippenger)(Point, Fn2, points, scalars);
        }
        _setWindowSize(windowSize) {
          this.precompute(windowSize);
        }
        static fromAffine(p) {
          if (p instanceof Point)
            throw new Error("extended point not allowed");
          const { x, y } = p || {};
          acoord("x", x);
          acoord("y", y);
          return new Point(x, y, _1n6, modP(x * y));
        }
        precompute(windowSize = 8, isLazy = true) {
          wnaf.createCache(this, windowSize);
          if (!isLazy)
            this.multiply(_2n6);
          return this;
        }
        // Useful in fromAffine() - not for fromBytes(), which always created valid points.
        assertValidity() {
          assertValidMemo(this);
        }
        // Compare one point to another.
        equals(other) {
          aextpoint(other);
          const { X: X1, Y: Y1, Z: Z1 } = this;
          const { X: X2, Y: Y2, Z: Z2 } = other;
          const X1Z2 = modP(X1 * Z2);
          const X2Z1 = modP(X2 * Z1);
          const Y1Z2 = modP(Y1 * Z2);
          const Y2Z1 = modP(Y2 * Z1);
          return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
        }
        is0() {
          return this.equals(Point.ZERO);
        }
        negate() {
          return new Point(modP(-this.X), this.Y, this.Z, modP(-this.T));
        }
        // Fast algo for doubling Extended Point.
        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
        // Cost: 4M + 4S + 1*a + 6add + 1*2.
        double() {
          const { a } = CURVE;
          const { X: X1, Y: Y1, Z: Z1 } = this;
          const A2 = modP(X1 * X1);
          const B = modP(Y1 * Y1);
          const C = modP(_2n6 * modP(Z1 * Z1));
          const D = modP(a * A2);
          const x1y1 = X1 + Y1;
          const E2 = modP(modP(x1y1 * x1y1) - A2 - B);
          const G2 = D + B;
          const F2 = G2 - C;
          const H2 = D - B;
          const X3 = modP(E2 * F2);
          const Y3 = modP(G2 * H2);
          const T3 = modP(E2 * H2);
          const Z3 = modP(F2 * G2);
          return new Point(X3, Y3, Z3, T3);
        }
        // Fast algo for adding 2 Extended Points.
        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
        // Cost: 9M + 1*a + 1*d + 7add.
        add(other) {
          aextpoint(other);
          const { a, d } = CURVE;
          const { X: X1, Y: Y1, Z: Z1, T: T1 } = this;
          const { X: X2, Y: Y2, Z: Z2, T: T2 } = other;
          const A2 = modP(X1 * X2);
          const B = modP(Y1 * Y2);
          const C = modP(T1 * d * T2);
          const D = modP(Z1 * Z2);
          const E2 = modP((X1 + Y1) * (X2 + Y2) - A2 - B);
          const F2 = D - C;
          const G2 = D + C;
          const H2 = modP(B - a * A2);
          const X3 = modP(E2 * F2);
          const Y3 = modP(G2 * H2);
          const T3 = modP(E2 * H2);
          const Z3 = modP(F2 * G2);
          return new Point(X3, Y3, Z3, T3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        // Constant-time multiplication.
        multiply(scalar) {
          const n = scalar;
          (0, utils_ts_1.aInRange)("scalar", n, _1n6, CURVE_ORDER);
          const { p, f } = wnaf.cached(this, n, (p2) => (0, curve_ts_1.normalizeZ)(Point, p2));
          return (0, curve_ts_1.normalizeZ)(Point, [p, f])[0];
        }
        // Non-constant-time multiplication. Uses double-and-add algorithm.
        // It's faster, but should only be used when you don't care about
        // an exposed private key e.g. sig verification.
        // Does NOT allow scalars higher than CURVE.n.
        // Accepts optional accumulator to merge with multiply (important for sparse scalars)
        multiplyUnsafe(scalar, acc = Point.ZERO) {
          const n = scalar;
          (0, utils_ts_1.aInRange)("scalar", n, _0n6, CURVE_ORDER);
          if (n === _0n6)
            return Point.ZERO;
          if (this.is0() || n === _1n6)
            return this;
          return wnaf.unsafe(this, n, (p) => (0, curve_ts_1.normalizeZ)(Point, p), acc);
        }
        // Checks if point is of small order.
        // If you add something to small order point, you will have "dirty"
        // point with torsion component.
        // Multiplies point by cofactor and checks if the result is 0.
        isSmallOrder() {
          return this.multiplyUnsafe(cofactor).is0();
        }
        // Multiplies point by curve order and checks if the result is 0.
        // Returns `false` is the point is dirty.
        isTorsionFree() {
          return wnaf.unsafe(this, CURVE_ORDER).is0();
        }
        // Converts Extended point to default (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        toAffine(invertedZ) {
          return toAffineMemo(this, invertedZ);
        }
        clearCofactor() {
          if (cofactor === _1n6)
            return this;
          return this.multiplyUnsafe(cofactor);
        }
        static fromBytes(bytes3, zip215 = false) {
          (0, utils_ts_1.abytes)(bytes3);
          return Point.fromHex(bytes3, zip215);
        }
        // Converts hash string or Uint8Array to Point.
        // Uses algo from RFC8032 5.1.3.
        static fromHex(hex2, zip215 = false) {
          const { d, a } = CURVE;
          const len = Fp2.BYTES;
          hex2 = (0, utils_ts_1.ensureBytes)("pointHex", hex2, len);
          (0, utils_ts_1.abool)("zip215", zip215);
          const normed = hex2.slice();
          const lastByte = hex2[len - 1];
          normed[len - 1] = lastByte & ~128;
          const y = (0, utils_ts_1.bytesToNumberLE)(normed);
          const max3 = zip215 ? MASK : Fp2.ORDER;
          (0, utils_ts_1.aInRange)("pointHex.y", y, _0n6, max3);
          const y2 = modP(y * y);
          const u = modP(y2 - _1n6);
          const v3 = modP(d * y2 - a);
          let { isValid, value: x } = uvRatio2(u, v3);
          if (!isValid)
            throw new Error("Point.fromHex: invalid y coordinate");
          const isXOdd = (x & _1n6) === _1n6;
          const isLastByteOdd = (lastByte & 128) !== 0;
          if (!zip215 && x === _0n6 && isLastByteOdd)
            throw new Error("Point.fromHex: x=0 and x_0=1");
          if (isLastByteOdd !== isXOdd)
            x = modP(-x);
          return Point.fromAffine({ x, y });
        }
        toBytes() {
          const { x, y } = this.toAffine();
          const bytes3 = (0, utils_ts_1.numberToBytesLE)(y, Fp2.BYTES);
          bytes3[bytes3.length - 1] |= x & _1n6 ? 128 : 0;
          return bytes3;
        }
        /** @deprecated use `toBytes` */
        toRawBytes() {
          return this.toBytes();
        }
        toHex() {
          return (0, utils_ts_1.bytesToHex)(this.toBytes());
        }
        toString() {
          return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
        }
      }
      Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n6, modP(CURVE.Gx * CURVE.Gy));
      Point.ZERO = new Point(_0n6, _1n6, _1n6, _0n6);
      Point.Fp = Fp2;
      Point.Fn = Fn2;
      const wnaf = new curve_ts_1.wNAF(Point, Fn2.BYTES * 8);
      return Point;
    }
    var PrimeEdwardsPoint2 = class {
      constructor(ep) {
        this.ep = ep;
      }
      // Static methods that must be implemented by subclasses
      static fromBytes(_bytes) {
        throw new Error("fromBytes must be implemented by subclass");
      }
      static fromHex(_hex) {
        throw new Error("fromHex must be implemented by subclass");
      }
      get x() {
        return this.toAffine().x;
      }
      get y() {
        return this.toAffine().y;
      }
      // Common implementations
      clearCofactor() {
        return this;
      }
      assertValidity() {
        this.ep.assertValidity();
      }
      toAffine(invertedZ) {
        return this.ep.toAffine(invertedZ);
      }
      /** @deprecated use `toBytes` */
      toRawBytes() {
        return this.toBytes();
      }
      toHex() {
        return (0, utils_ts_1.bytesToHex)(this.toBytes());
      }
      toString() {
        return this.toHex();
      }
      isTorsionFree() {
        return true;
      }
      isSmallOrder() {
        return false;
      }
      add(other) {
        this.assertSame(other);
        return this.init(this.ep.add(other.ep));
      }
      subtract(other) {
        this.assertSame(other);
        return this.init(this.ep.subtract(other.ep));
      }
      multiply(scalar) {
        return this.init(this.ep.multiply(scalar));
      }
      multiplyUnsafe(scalar) {
        return this.init(this.ep.multiplyUnsafe(scalar));
      }
      double() {
        return this.init(this.ep.double());
      }
      negate() {
        return this.init(this.ep.negate());
      }
      precompute(windowSize, isLazy) {
        return this.init(this.ep.precompute(windowSize, isLazy));
      }
    };
    exports.PrimeEdwardsPoint = PrimeEdwardsPoint2;
    function eddsa2(Point, cHash, eddsaOpts) {
      if (typeof cHash !== "function")
        throw new Error('"hash" function param is required');
      (0, utils_ts_1._validateObject)(eddsaOpts, {}, {
        adjustScalarBytes: "function",
        randomBytes: "function",
        domain: "function",
        prehash: "function",
        mapToCurve: "function"
      });
      const { prehash } = eddsaOpts;
      const { BASE: G2, Fp: Fp2, Fn: Fn2 } = Point;
      const CURVE_ORDER = Fn2.ORDER;
      const randomBytes_ = eddsaOpts.randomBytes || utils_ts_1.randomBytes;
      const adjustScalarBytes2 = eddsaOpts.adjustScalarBytes || ((bytes3) => bytes3);
      const domain = eddsaOpts.domain || ((data, ctx, phflag) => {
        (0, utils_ts_1.abool)("phflag", phflag);
        if (ctx.length || phflag)
          throw new Error("Contexts/pre-hash are not supported");
        return data;
      });
      function modN(a) {
        return Fn2.create(a);
      }
      function modN_LE(hash2) {
        return modN((0, utils_ts_1.bytesToNumberLE)(hash2));
      }
      function getPrivateScalar(key) {
        const len = Fp2.BYTES;
        key = (0, utils_ts_1.ensureBytes)("private key", key, len);
        const hashed = (0, utils_ts_1.ensureBytes)("hashed private key", cHash(key), 2 * len);
        const head = adjustScalarBytes2(hashed.slice(0, len));
        const prefix2 = hashed.slice(len, 2 * len);
        const scalar = modN_LE(head);
        return { head, prefix: prefix2, scalar };
      }
      function getExtendedPublicKey(secretKey) {
        const { head, prefix: prefix2, scalar } = getPrivateScalar(secretKey);
        const point = G2.multiply(scalar);
        const pointBytes = point.toBytes();
        return { head, prefix: prefix2, scalar, point, pointBytes };
      }
      function getPublicKey(secretKey) {
        return getExtendedPublicKey(secretKey).pointBytes;
      }
      function hashDomainToScalar(context2 = Uint8Array.of(), ...msgs) {
        const msg = (0, utils_ts_1.concatBytes)(...msgs);
        return modN_LE(cHash(domain(msg, (0, utils_ts_1.ensureBytes)("context", context2), !!prehash)));
      }
      function sign2(msg, secretKey, options = {}) {
        msg = (0, utils_ts_1.ensureBytes)("message", msg);
        if (prehash)
          msg = prehash(msg);
        const { prefix: prefix2, scalar, pointBytes } = getExtendedPublicKey(secretKey);
        const r = hashDomainToScalar(options.context, prefix2, msg);
        const R2 = G2.multiply(r).toBytes();
        const k2 = hashDomainToScalar(options.context, R2, pointBytes, msg);
        const s = modN(r + k2 * scalar);
        (0, utils_ts_1.aInRange)("signature.s", s, _0n6, CURVE_ORDER);
        const L2 = Fp2.BYTES;
        const res = (0, utils_ts_1.concatBytes)(R2, (0, utils_ts_1.numberToBytesLE)(s, L2));
        return (0, utils_ts_1.ensureBytes)("result", res, L2 * 2);
      }
      const verifyOpts = { zip215: true };
      function verify(sig2, msg, publicKey2, options = verifyOpts) {
        const { context: context2, zip215 } = options;
        const len = Fp2.BYTES;
        sig2 = (0, utils_ts_1.ensureBytes)("signature", sig2, 2 * len);
        msg = (0, utils_ts_1.ensureBytes)("message", msg);
        publicKey2 = (0, utils_ts_1.ensureBytes)("publicKey", publicKey2, len);
        if (zip215 !== void 0)
          (0, utils_ts_1.abool)("zip215", zip215);
        if (prehash)
          msg = prehash(msg);
        const s = (0, utils_ts_1.bytesToNumberLE)(sig2.slice(len, 2 * len));
        let A2, R2, SB;
        try {
          A2 = Point.fromHex(publicKey2, zip215);
          R2 = Point.fromHex(sig2.slice(0, len), zip215);
          SB = G2.multiplyUnsafe(s);
        } catch (error) {
          return false;
        }
        if (!zip215 && A2.isSmallOrder())
          return false;
        const k2 = hashDomainToScalar(context2, R2.toBytes(), A2.toBytes(), msg);
        const RkA = R2.add(A2.multiplyUnsafe(k2));
        return RkA.subtract(SB).clearCofactor().is0();
      }
      G2.precompute(8);
      const size = Fp2.BYTES;
      const lengths = {
        secret: size,
        public: size,
        signature: 2 * size,
        seed: size
      };
      function randomSecretKey(seed = randomBytes_(lengths.seed)) {
        return seed;
      }
      const utils2 = {
        getExtendedPublicKey,
        /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */
        randomSecretKey,
        isValidSecretKey,
        isValidPublicKey,
        randomPrivateKey: randomSecretKey,
        /**
         * Converts ed public key to x public key. Uses formula:
         * - ed25519:
         *   - `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`
         *   - `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`
         * - ed448:
         *   - `(u, v) = ((y-1)/(y+1), sqrt(156324)*u/x)`
         *   - `(x, y) = (sqrt(156324)*u/v, (1+u)/(1-u))`
         *
         * There is NO `fromMontgomery`:
         * - There are 2 valid ed25519 points for every x25519, with flipped coordinate
         * - Sometimes there are 0 valid ed25519 points, because x25519 *additionally*
         *   accepts inputs on the quadratic twist, which can't be moved to ed25519
         */
        toMontgomery(publicKey2) {
          const { y } = Point.fromBytes(publicKey2);
          const is25519 = size === 32;
          if (!is25519 && size !== 57)
            throw new Error("only defined for 25519 and 448");
          const u = is25519 ? Fp2.div(_1n6 + y, _1n6 - y) : Fp2.div(y - _1n6, y + _1n6);
          return Fp2.toBytes(u);
        },
        toMontgomeryPriv(privateKey) {
          (0, utils_ts_1.abytes)(privateKey, size);
          const hashed = cHash(privateKey.subarray(0, size));
          return adjustScalarBytes2(hashed).subarray(0, size);
        },
        /**
         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
         * values. This slows down first getPublicKey() by milliseconds (see Speed section),
         * but allows to speed-up subsequent getPublicKey() calls up to 20x.
         * @param windowSize 2, 4, 8, 16
         */
        precompute(windowSize = 8, point = Point.BASE) {
          return point.precompute(windowSize, false);
        }
      };
      function keygen(seed) {
        const secretKey = utils2.randomSecretKey(seed);
        return { secretKey, publicKey: getPublicKey(secretKey) };
      }
      function isValidSecretKey(key) {
        try {
          return !!Fn2.fromBytes(key, false);
        } catch (error) {
          return false;
        }
      }
      function isValidPublicKey(key, zip215) {
        try {
          return !!Point.fromBytes(key, zip215);
        } catch (error) {
          return false;
        }
      }
      return Object.freeze({
        keygen,
        getPublicKey,
        sign: sign2,
        verify,
        utils: utils2,
        Point,
        info: { type: "edwards", lengths }
      });
    }
    function _eddsa_legacy_opts_to_new2(c) {
      const CURVE = {
        a: c.a,
        d: c.d,
        p: c.Fp.ORDER,
        n: c.n,
        h: c.h,
        Gx: c.Gx,
        Gy: c.Gy
      };
      const Fp2 = c.Fp;
      const Fn2 = (0, modular_ts_1.Field)(CURVE.n, c.nBitLength, true);
      const curveOpts = { Fp: Fp2, Fn: Fn2, uvRatio: c.uvRatio };
      const eddsaOpts = {
        randomBytes: c.randomBytes,
        adjustScalarBytes: c.adjustScalarBytes,
        domain: c.domain,
        prehash: c.prehash,
        mapToCurve: c.mapToCurve
      };
      return { CURVE, curveOpts, hash: c.hash, eddsaOpts };
    }
    function _eddsa_new_output_to_legacy2(c, eddsa3) {
      const legacy = Object.assign({}, eddsa3, { ExtendedPoint: eddsa3.Point, CURVE: c });
      return legacy;
    }
    function twistedEdwards2(c) {
      const { CURVE, curveOpts, hash: hash2, eddsaOpts } = _eddsa_legacy_opts_to_new2(c);
      const Point = edwards2(CURVE, curveOpts);
      const EDDSA = eddsa2(Point, hash2, eddsaOpts);
      return _eddsa_new_output_to_legacy2(c, EDDSA);
    }
  }
});

// node_modules/@noble/curves/abstract/montgomery.js
var require_montgomery = __commonJS({
  "node_modules/@noble/curves/abstract/montgomery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.montgomery = montgomery2;
    var utils_ts_1 = require_utils5();
    var modular_ts_1 = require_modular();
    var _0n6 = BigInt(0);
    var _1n6 = BigInt(1);
    var _2n6 = BigInt(2);
    function validateOpts2(curve) {
      (0, utils_ts_1._validateObject)(curve, {
        adjustScalarBytes: "function",
        powPminus2: "function"
      });
      return Object.freeze({ ...curve });
    }
    function montgomery2(curveDef) {
      const CURVE = validateOpts2(curveDef);
      const { P: P2, type, adjustScalarBytes: adjustScalarBytes2, powPminus2, randomBytes: rand } = CURVE;
      const is25519 = type === "x25519";
      if (!is25519 && type !== "x448")
        throw new Error("invalid type");
      const randomBytes_ = rand || utils_ts_1.randomBytes;
      const montgomeryBits = is25519 ? 255 : 448;
      const fieldLen = is25519 ? 32 : 56;
      const Gu = is25519 ? BigInt(9) : BigInt(5);
      const a24 = is25519 ? BigInt(121665) : BigInt(39081);
      const minScalar = is25519 ? _2n6 ** BigInt(254) : _2n6 ** BigInt(447);
      const maxAdded = is25519 ? BigInt(8) * _2n6 ** BigInt(251) - _1n6 : BigInt(4) * _2n6 ** BigInt(445) - _1n6;
      const maxScalar = minScalar + maxAdded + _1n6;
      const modP = (n) => (0, modular_ts_1.mod)(n, P2);
      const GuBytes = encodeU(Gu);
      function encodeU(u) {
        return (0, utils_ts_1.numberToBytesLE)(modP(u), fieldLen);
      }
      function decodeU(u) {
        const _u = (0, utils_ts_1.ensureBytes)("u coordinate", u, fieldLen);
        if (is25519)
          _u[31] &= 127;
        return modP((0, utils_ts_1.bytesToNumberLE)(_u));
      }
      function decodeScalar(scalar) {
        return (0, utils_ts_1.bytesToNumberLE)(adjustScalarBytes2((0, utils_ts_1.ensureBytes)("scalar", scalar, fieldLen)));
      }
      function scalarMult(scalar, u) {
        const pu = montgomeryLadder(decodeU(u), decodeScalar(scalar));
        if (pu === _0n6)
          throw new Error("invalid private or public key received");
        return encodeU(pu);
      }
      function scalarMultBase(scalar) {
        return scalarMult(scalar, GuBytes);
      }
      function cswap(swap, x_2, x_3) {
        const dummy = modP(swap * (x_2 - x_3));
        x_2 = modP(x_2 - dummy);
        x_3 = modP(x_3 + dummy);
        return { x_2, x_3 };
      }
      function montgomeryLadder(u, scalar) {
        (0, utils_ts_1.aInRange)("u", u, _0n6, P2);
        (0, utils_ts_1.aInRange)("scalar", scalar, minScalar, maxScalar);
        const k2 = scalar;
        const x_1 = u;
        let x_2 = _1n6;
        let z_2 = _0n6;
        let x_3 = u;
        let z_3 = _1n6;
        let swap = _0n6;
        for (let t = BigInt(montgomeryBits - 1); t >= _0n6; t--) {
          const k_t = k2 >> t & _1n6;
          swap ^= k_t;
          ({ x_2, x_3 } = cswap(swap, x_2, x_3));
          ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));
          swap = k_t;
          const A2 = x_2 + z_2;
          const AA = modP(A2 * A2);
          const B = x_2 - z_2;
          const BB = modP(B * B);
          const E2 = AA - BB;
          const C = x_3 + z_3;
          const D = x_3 - z_3;
          const DA = modP(D * A2);
          const CB = modP(C * B);
          const dacb = DA + CB;
          const da_cb = DA - CB;
          x_3 = modP(dacb * dacb);
          z_3 = modP(x_1 * modP(da_cb * da_cb));
          x_2 = modP(AA * BB);
          z_2 = modP(E2 * (AA + modP(a24 * E2)));
        }
        ({ x_2, x_3 } = cswap(swap, x_2, x_3));
        ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));
        const z2 = powPminus2(z_2);
        return modP(x_2 * z2);
      }
      const randomSecretKey = (seed = randomBytes_(fieldLen)) => seed;
      const utils2 = {
        randomSecretKey,
        randomPrivateKey: randomSecretKey
      };
      function keygen(seed) {
        const secretKey = utils2.randomSecretKey(seed);
        return { secretKey, publicKey: scalarMultBase(secretKey) };
      }
      const lengths = {
        secret: fieldLen,
        public: fieldLen,
        seed: fieldLen
      };
      return {
        keygen,
        getSharedSecret: (secretKey, publicKey2) => scalarMult(secretKey, publicKey2),
        getPublicKey: (secretKey) => scalarMultBase(secretKey),
        scalarMult,
        scalarMultBase,
        utils: utils2,
        GuBytes: GuBytes.slice(),
        info: { type: "montgomery", lengths }
      };
    }
  }
});

// node_modules/@noble/curves/ed25519.js
var require_ed25519 = __commonJS({
  "node_modules/@noble/curves/ed25519.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ED25519_TORSION_SUBGROUP = exports.hash_to_ristretto255 = exports.hashToRistretto255 = exports.encodeToCurve = exports.hashToCurve = exports.ristretto255_hasher = exports.ristretto255 = exports.RistrettoPoint = exports.ed25519_hasher = exports.edwardsToMontgomery = exports.x25519 = exports.ed25519ph = exports.ed25519ctx = exports.ed25519 = void 0;
    exports.edwardsToMontgomeryPub = edwardsToMontgomeryPub;
    exports.edwardsToMontgomeryPriv = edwardsToMontgomeryPriv;
    var sha2_js_1 = require_sha2();
    var utils_js_1 = require_utils4();
    var curve_ts_1 = require_curve();
    var edwards_ts_1 = require_edwards();
    var hash_to_curve_ts_1 = require_hash_to_curve();
    var modular_ts_1 = require_modular();
    var montgomery_ts_1 = require_montgomery();
    var utils_ts_1 = require_utils5();
    var _0n6 = BigInt(0);
    var _1n6 = BigInt(1);
    var _2n6 = BigInt(2);
    var _3n3 = BigInt(3);
    var _5n3 = BigInt(5);
    var _8n4 = BigInt(8);
    var ed25519_CURVE2 = {
      p: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed"),
      n: BigInt("0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed"),
      h: _8n4,
      a: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec"),
      d: BigInt("0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3"),
      Gx: BigInt("0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a"),
      Gy: BigInt("0x6666666666666666666666666666666666666666666666666666666666666658")
    };
    function ed25519_pow_2_252_32(x) {
      const _10n2 = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);
      const P2 = ed25519_CURVE2.p;
      const x2 = x * x % P2;
      const b2 = x2 * x % P2;
      const b4 = (0, modular_ts_1.pow2)(b2, _2n6, P2) * b2 % P2;
      const b5 = (0, modular_ts_1.pow2)(b4, _1n6, P2) * x % P2;
      const b10 = (0, modular_ts_1.pow2)(b5, _5n3, P2) * b5 % P2;
      const b20 = (0, modular_ts_1.pow2)(b10, _10n2, P2) * b10 % P2;
      const b40 = (0, modular_ts_1.pow2)(b20, _20n, P2) * b20 % P2;
      const b80 = (0, modular_ts_1.pow2)(b40, _40n, P2) * b40 % P2;
      const b160 = (0, modular_ts_1.pow2)(b80, _80n, P2) * b80 % P2;
      const b240 = (0, modular_ts_1.pow2)(b160, _80n, P2) * b80 % P2;
      const b250 = (0, modular_ts_1.pow2)(b240, _10n2, P2) * b10 % P2;
      const pow_p_5_8 = (0, modular_ts_1.pow2)(b250, _2n6, P2) * x % P2;
      return { pow_p_5_8, b2 };
    }
    function adjustScalarBytes2(bytes3) {
      bytes3[0] &= 248;
      bytes3[31] &= 127;
      bytes3[31] |= 64;
      return bytes3;
    }
    var ED25519_SQRT_M12 = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
    function uvRatio2(u, v3) {
      const P2 = ed25519_CURVE2.p;
      const v32 = (0, modular_ts_1.mod)(v3 * v3 * v3, P2);
      const v7 = (0, modular_ts_1.mod)(v32 * v32 * v3, P2);
      const pow = ed25519_pow_2_252_32(u * v7).pow_p_5_8;
      let x = (0, modular_ts_1.mod)(u * v32 * pow, P2);
      const vx2 = (0, modular_ts_1.mod)(v3 * x * x, P2);
      const root1 = x;
      const root2 = (0, modular_ts_1.mod)(x * ED25519_SQRT_M12, P2);
      const useRoot1 = vx2 === u;
      const useRoot2 = vx2 === (0, modular_ts_1.mod)(-u, P2);
      const noRoot = vx2 === (0, modular_ts_1.mod)(-u * ED25519_SQRT_M12, P2);
      if (useRoot1)
        x = root1;
      if (useRoot2 || noRoot)
        x = root2;
      if ((0, modular_ts_1.isNegativeLE)(x, P2))
        x = (0, modular_ts_1.mod)(-x, P2);
      return { isValid: useRoot1 || useRoot2, value: x };
    }
    var Fp2 = (() => (0, modular_ts_1.Field)(ed25519_CURVE2.p, { isLE: true }))();
    var Fn2 = (() => (0, modular_ts_1.Field)(ed25519_CURVE2.n, { isLE: true }))();
    var ed25519Defaults2 = (() => ({
      ...ed25519_CURVE2,
      Fp: Fp2,
      hash: sha2_js_1.sha512,
      adjustScalarBytes: adjustScalarBytes2,
      // dom2
      // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
      // Constant-time, u/√v
      uvRatio: uvRatio2
    }))();
    exports.ed25519 = (() => (0, edwards_ts_1.twistedEdwards)(ed25519Defaults2))();
    function ed25519_domain2(data, ctx, phflag) {
      if (ctx.length > 255)
        throw new Error("Context is too big");
      return (0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)("SigEd25519 no Ed25519 collisions"), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);
    }
    exports.ed25519ctx = (() => (0, edwards_ts_1.twistedEdwards)({
      ...ed25519Defaults2,
      domain: ed25519_domain2
    }))();
    exports.ed25519ph = (() => (0, edwards_ts_1.twistedEdwards)(Object.assign({}, ed25519Defaults2, {
      domain: ed25519_domain2,
      prehash: sha2_js_1.sha512
    })))();
    exports.x25519 = (() => {
      const P2 = ed25519_CURVE2.p;
      return (0, montgomery_ts_1.montgomery)({
        P: P2,
        type: "x25519",
        powPminus2: (x) => {
          const { pow_p_5_8, b2 } = ed25519_pow_2_252_32(x);
          return (0, modular_ts_1.mod)((0, modular_ts_1.pow2)(pow_p_5_8, _3n3, P2) * b2, P2);
        },
        adjustScalarBytes: adjustScalarBytes2
      });
    })();
    function edwardsToMontgomeryPub(edwardsPub) {
      return exports.ed25519.utils.toMontgomery((0, utils_ts_1.ensureBytes)("pub", edwardsPub));
    }
    exports.edwardsToMontgomery = edwardsToMontgomeryPub;
    function edwardsToMontgomeryPriv(edwardsPriv) {
      return exports.ed25519.utils.toMontgomeryPriv((0, utils_ts_1.ensureBytes)("pub", edwardsPriv));
    }
    var ELL2_C12 = (() => (Fp2.ORDER + _3n3) / _8n4)();
    var ELL2_C22 = (() => Fp2.pow(_2n6, ELL2_C12))();
    var ELL2_C32 = (() => Fp2.sqrt(Fp2.neg(Fp2.ONE)))();
    function map_to_curve_elligator2_curve255192(u) {
      const ELL2_C4 = (Fp2.ORDER - _5n3) / _8n4;
      const ELL2_J = BigInt(486662);
      let tv1 = Fp2.sqr(u);
      tv1 = Fp2.mul(tv1, _2n6);
      let xd = Fp2.add(tv1, Fp2.ONE);
      let x1n = Fp2.neg(ELL2_J);
      let tv2 = Fp2.sqr(xd);
      let gxd = Fp2.mul(tv2, xd);
      let gx1 = Fp2.mul(tv1, ELL2_J);
      gx1 = Fp2.mul(gx1, x1n);
      gx1 = Fp2.add(gx1, tv2);
      gx1 = Fp2.mul(gx1, x1n);
      let tv3 = Fp2.sqr(gxd);
      tv2 = Fp2.sqr(tv3);
      tv3 = Fp2.mul(tv3, gxd);
      tv3 = Fp2.mul(tv3, gx1);
      tv2 = Fp2.mul(tv2, tv3);
      let y11 = Fp2.pow(tv2, ELL2_C4);
      y11 = Fp2.mul(y11, tv3);
      let y12 = Fp2.mul(y11, ELL2_C32);
      tv2 = Fp2.sqr(y11);
      tv2 = Fp2.mul(tv2, gxd);
      let e1 = Fp2.eql(tv2, gx1);
      let y1 = Fp2.cmov(y12, y11, e1);
      let x2n = Fp2.mul(x1n, tv1);
      let y21 = Fp2.mul(y11, u);
      y21 = Fp2.mul(y21, ELL2_C22);
      let y22 = Fp2.mul(y21, ELL2_C32);
      let gx2 = Fp2.mul(gx1, tv1);
      tv2 = Fp2.sqr(y21);
      tv2 = Fp2.mul(tv2, gxd);
      let e2 = Fp2.eql(tv2, gx2);
      let y2 = Fp2.cmov(y22, y21, e2);
      tv2 = Fp2.sqr(y1);
      tv2 = Fp2.mul(tv2, gxd);
      let e3 = Fp2.eql(tv2, gx1);
      let xn = Fp2.cmov(x2n, x1n, e3);
      let y = Fp2.cmov(y2, y1, e3);
      let e4 = Fp2.isOdd(y);
      y = Fp2.cmov(y, Fp2.neg(y), e3 !== e4);
      return { xMn: xn, xMd: xd, yMn: y, yMd: _1n6 };
    }
    var ELL2_C1_EDWARDS2 = (() => (0, modular_ts_1.FpSqrtEven)(Fp2, Fp2.neg(BigInt(486664))))();
    function map_to_curve_elligator2_edwards255192(u) {
      const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve255192(u);
      let xn = Fp2.mul(xMn, yMd);
      xn = Fp2.mul(xn, ELL2_C1_EDWARDS2);
      let xd = Fp2.mul(xMd, yMn);
      let yn = Fp2.sub(xMn, xMd);
      let yd = Fp2.add(xMn, xMd);
      let tv1 = Fp2.mul(xd, yd);
      let e = Fp2.eql(tv1, Fp2.ZERO);
      xn = Fp2.cmov(xn, Fp2.ZERO, e);
      xd = Fp2.cmov(xd, Fp2.ONE, e);
      yn = Fp2.cmov(yn, Fp2.ONE, e);
      yd = Fp2.cmov(yd, Fp2.ONE, e);
      const [xd_inv, yd_inv] = (0, modular_ts_1.FpInvertBatch)(Fp2, [xd, yd], true);
      return { x: Fp2.mul(xn, xd_inv), y: Fp2.mul(yn, yd_inv) };
    }
    exports.ed25519_hasher = (() => (0, hash_to_curve_ts_1.createHasher)(exports.ed25519.Point, (scalars) => map_to_curve_elligator2_edwards255192(scalars[0]), {
      DST: "edwards25519_XMD:SHA-512_ELL2_RO_",
      encodeDST: "edwards25519_XMD:SHA-512_ELL2_NU_",
      p: Fp2.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha2_js_1.sha512
    }))();
    var SQRT_M12 = ED25519_SQRT_M12;
    var SQRT_AD_MINUS_ONE2 = BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235");
    var INVSQRT_A_MINUS_D2 = BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578");
    var ONE_MINUS_D_SQ2 = BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838");
    var D_MINUS_ONE_SQ2 = BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952");
    var invertSqrt2 = (number2) => uvRatio2(_1n6, number2);
    var MAX_255B2 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    var bytes255ToNumberLE2 = (bytes3) => exports.ed25519.CURVE.Fp.create((0, utils_ts_1.bytesToNumberLE)(bytes3) & MAX_255B2);
    function calcElligatorRistrettoMap2(r0) {
      const { d } = exports.ed25519.CURVE;
      const P2 = exports.ed25519.CURVE.Fp.ORDER;
      const mod2 = exports.ed25519.CURVE.Fp.create;
      const r = mod2(SQRT_M12 * r0 * r0);
      const Ns = mod2((r + _1n6) * ONE_MINUS_D_SQ2);
      let c = BigInt(-1);
      const D = mod2((c - d * r) * mod2(r + d));
      let { isValid: Ns_D_is_sq, value: s } = uvRatio2(Ns, D);
      let s_ = mod2(s * r0);
      if (!(0, modular_ts_1.isNegativeLE)(s_, P2))
        s_ = mod2(-s_);
      if (!Ns_D_is_sq)
        s = s_;
      if (!Ns_D_is_sq)
        c = r;
      const Nt = mod2(c * (r - _1n6) * D_MINUS_ONE_SQ2 - D);
      const s2 = s * s;
      const W0 = mod2((s + s) * D);
      const W1 = mod2(Nt * SQRT_AD_MINUS_ONE2);
      const W2 = mod2(_1n6 - s2);
      const W3 = mod2(_1n6 + s2);
      return new exports.ed25519.Point(mod2(W0 * W3), mod2(W2 * W1), mod2(W1 * W3), mod2(W0 * W2));
    }
    function ristretto255_map2(bytes3) {
      (0, utils_js_1.abytes)(bytes3, 64);
      const r1 = bytes255ToNumberLE2(bytes3.subarray(0, 32));
      const R1 = calcElligatorRistrettoMap2(r1);
      const r2 = bytes255ToNumberLE2(bytes3.subarray(32, 64));
      const R2 = calcElligatorRistrettoMap2(r2);
      return new _RistrettoPoint2(R1.add(R2));
    }
    var _RistrettoPoint2 = class __RistrettoPoint extends edwards_ts_1.PrimeEdwardsPoint {
      constructor(ep) {
        super(ep);
      }
      static fromAffine(ap) {
        return new __RistrettoPoint(exports.ed25519.Point.fromAffine(ap));
      }
      assertSame(other) {
        if (!(other instanceof __RistrettoPoint))
          throw new Error("RistrettoPoint expected");
      }
      init(ep) {
        return new __RistrettoPoint(ep);
      }
      /** @deprecated use `import { ristretto255_hasher } from '@noble/curves/ed25519.js';` */
      static hashToCurve(hex2) {
        return ristretto255_map2((0, utils_ts_1.ensureBytes)("ristrettoHash", hex2, 64));
      }
      static fromBytes(bytes3) {
        (0, utils_js_1.abytes)(bytes3, 32);
        const { a, d } = exports.ed25519.CURVE;
        const P2 = Fp2.ORDER;
        const mod2 = Fp2.create;
        const s = bytes255ToNumberLE2(bytes3);
        if (!(0, utils_ts_1.equalBytes)((0, utils_ts_1.numberToBytesLE)(s, 32), bytes3) || (0, modular_ts_1.isNegativeLE)(s, P2))
          throw new Error("invalid ristretto255 encoding 1");
        const s2 = mod2(s * s);
        const u1 = mod2(_1n6 + a * s2);
        const u2 = mod2(_1n6 - a * s2);
        const u1_2 = mod2(u1 * u1);
        const u2_2 = mod2(u2 * u2);
        const v3 = mod2(a * d * u1_2 - u2_2);
        const { isValid, value: I2 } = invertSqrt2(mod2(v3 * u2_2));
        const Dx = mod2(I2 * u2);
        const Dy = mod2(I2 * Dx * v3);
        let x = mod2((s + s) * Dx);
        if ((0, modular_ts_1.isNegativeLE)(x, P2))
          x = mod2(-x);
        const y = mod2(u1 * Dy);
        const t = mod2(x * y);
        if (!isValid || (0, modular_ts_1.isNegativeLE)(t, P2) || y === _0n6)
          throw new Error("invalid ristretto255 encoding 2");
        return new __RistrettoPoint(new exports.ed25519.Point(x, y, _1n6, t));
      }
      /**
       * Converts ristretto-encoded string to ristretto point.
       * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-decode).
       * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding
       */
      static fromHex(hex2) {
        return __RistrettoPoint.fromBytes((0, utils_ts_1.ensureBytes)("ristrettoHex", hex2, 32));
      }
      static msm(points, scalars) {
        return (0, curve_ts_1.pippenger)(__RistrettoPoint, exports.ed25519.Point.Fn, points, scalars);
      }
      /**
       * Encodes ristretto point to Uint8Array.
       * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-encode).
       */
      toBytes() {
        let { X: X2, Y, Z: Z2, T } = this.ep;
        const P2 = Fp2.ORDER;
        const mod2 = Fp2.create;
        const u1 = mod2(mod2(Z2 + Y) * mod2(Z2 - Y));
        const u2 = mod2(X2 * Y);
        const u2sq = mod2(u2 * u2);
        const { value: invsqrt } = invertSqrt2(mod2(u1 * u2sq));
        const D1 = mod2(invsqrt * u1);
        const D2 = mod2(invsqrt * u2);
        const zInv = mod2(D1 * D2 * T);
        let D;
        if ((0, modular_ts_1.isNegativeLE)(T * zInv, P2)) {
          let _x = mod2(Y * SQRT_M12);
          let _y = mod2(X2 * SQRT_M12);
          X2 = _x;
          Y = _y;
          D = mod2(D1 * INVSQRT_A_MINUS_D2);
        } else {
          D = D2;
        }
        if ((0, modular_ts_1.isNegativeLE)(X2 * zInv, P2))
          Y = mod2(-Y);
        let s = mod2((Z2 - Y) * D);
        if ((0, modular_ts_1.isNegativeLE)(s, P2))
          s = mod2(-s);
        return (0, utils_ts_1.numberToBytesLE)(s, 32);
      }
      /**
       * Compares two Ristretto points.
       * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-equals).
       */
      equals(other) {
        this.assertSame(other);
        const { X: X1, Y: Y1 } = this.ep;
        const { X: X2, Y: Y2 } = other.ep;
        const mod2 = Fp2.create;
        const one = mod2(X1 * Y2) === mod2(Y1 * X2);
        const two = mod2(Y1 * Y2) === mod2(X1 * X2);
        return one || two;
      }
      is0() {
        return this.equals(__RistrettoPoint.ZERO);
      }
    };
    _RistrettoPoint2.BASE = (() => new _RistrettoPoint2(exports.ed25519.Point.BASE))();
    _RistrettoPoint2.ZERO = (() => new _RistrettoPoint2(exports.ed25519.Point.ZERO))();
    _RistrettoPoint2.Fp = Fp2;
    _RistrettoPoint2.Fn = Fn2;
    exports.RistrettoPoint = _RistrettoPoint2;
    exports.ristretto255 = { Point: _RistrettoPoint2 };
    exports.ristretto255_hasher = {
      hashToCurve(msg, options) {
        const DST = options?.DST || "ristretto255_XMD:SHA-512_R255MAP_RO_";
        return ristretto255_map2((0, hash_to_curve_ts_1.expand_message_xmd)(msg, DST, 64, sha2_js_1.sha512));
      },
      hashToScalar(msg, options = { DST: hash_to_curve_ts_1._DST_scalar }) {
        return Fn2.create((0, utils_ts_1.bytesToNumberLE)((0, hash_to_curve_ts_1.expand_message_xmd)(msg, options.DST, 64, sha2_js_1.sha512)));
      }
    };
    exports.hashToCurve = (() => exports.ed25519_hasher.hashToCurve)();
    exports.encodeToCurve = (() => exports.ed25519_hasher.encodeToCurve)();
    exports.hashToRistretto255 = (() => exports.ristretto255_hasher.hashToCurve)();
    exports.hash_to_ristretto255 = (() => exports.ristretto255_hasher.hashToCurve)();
    exports.ED25519_TORSION_SUBGROUP = [
      "0100000000000000000000000000000000000000000000000000000000000000",
      "c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a",
      "0000000000000000000000000000000000000000000000000000000000000080",
      "26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05",
      "ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f",
      "26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa"
    ];
  }
});

// node_modules/ripple-keypairs/dist/signing-schemes/ed25519/index.js
var require_ed255192 = __commonJS({
  "node_modules/ripple-keypairs/dist/signing-schemes/ed25519/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ed25519_1 = require_ed25519();
    var utils_1 = require_browser2();
    var assert_1 = __importDefault(require_assert2());
    var Sha512_1 = __importDefault(require_Sha512());
    var ED_PREFIX = "ED";
    var ed255192 = {
      deriveKeypair(entropy) {
        const rawPrivateKey = Sha512_1.default.half(entropy);
        const privateKey = ED_PREFIX + (0, utils_1.bytesToHex)(rawPrivateKey);
        const publicKey2 = ED_PREFIX + (0, utils_1.bytesToHex)(ed25519_1.ed25519.getPublicKey(rawPrivateKey));
        return { privateKey, publicKey: publicKey2 };
      },
      sign(message, privateKey) {
        assert_1.default.ok(message instanceof Uint8Array, "message must be array of octets");
        assert_1.default.ok(privateKey.length === 66, "private key must be 33 bytes including prefix");
        return (0, utils_1.bytesToHex)(ed25519_1.ed25519.sign(message, privateKey.slice(2)));
      },
      verify(message, signature, publicKey2) {
        assert_1.default.ok(publicKey2.length === 66, "public key must be 33 bytes including prefix");
        return ed25519_1.ed25519.verify(
          signature,
          message,
          // Remove the 0xED prefix
          publicKey2.slice(2),
          // By default, set zip215 to false for compatibility reasons.
          // ZIP 215 is a stricter Ed25519 signature verification scheme.
          // However, setting it to false adheres to the more commonly used
          // RFC8032 / NIST186-5 standards, making it compatible with systems
          // like the XRP Ledger.
          { zip215: false }
        );
      }
    };
    exports.default = ed255192;
  }
});

// node_modules/ripple-keypairs/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/ripple-keypairs/dist/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeSeed = exports.deriveNodeAddress = exports.deriveAddress = exports.verify = exports.sign = exports.deriveKeypair = exports.generateSeed = void 0;
    var ripple_address_codec_1 = require_dist();
    Object.defineProperty(exports, "decodeSeed", { enumerable: true, get: function() {
      return ripple_address_codec_1.decodeSeed;
    } });
    var ripemd160_1 = require_browser5();
    var sha256_1 = require_browser3();
    var utils_1 = require_browser2();
    var utils_2 = require_utils7();
    var Sha512_1 = __importDefault(require_Sha512());
    var assert_1 = __importDefault(require_assert2());
    var getAlgorithmFromKey_1 = require_getAlgorithmFromKey();
    var secp256k1_1 = __importDefault(require_secp256k12());
    var ed25519_1 = __importDefault(require_ed255192());
    function getSigningScheme(algorithm) {
      const schemes = { "ecdsa-secp256k1": secp256k1_1.default, ed25519: ed25519_1.default };
      return schemes[algorithm];
    }
    function generateSeed(options = {}) {
      assert_1.default.ok(!options.entropy || options.entropy.length >= 16, "entropy too short");
      const entropy = options.entropy ? options.entropy.slice(0, 16) : (0, utils_1.randomBytes)(16);
      const type = options.algorithm === "ed25519" ? "ed25519" : "secp256k1";
      return (0, ripple_address_codec_1.encodeSeed)(entropy, type);
    }
    exports.generateSeed = generateSeed;
    function deriveKeypair(seed, options) {
      var _a;
      const decoded = (0, ripple_address_codec_1.decodeSeed)(seed);
      const proposedAlgorithm = (_a = options === null || options === void 0 ? void 0 : options.algorithm) !== null && _a !== void 0 ? _a : decoded.type;
      const algorithm = proposedAlgorithm === "ed25519" ? "ed25519" : "ecdsa-secp256k1";
      const scheme = getSigningScheme(algorithm);
      const keypair = scheme.deriveKeypair(decoded.bytes, options);
      const messageToVerify = Sha512_1.default.half("This test message should verify.");
      const signature = scheme.sign(messageToVerify, keypair.privateKey);
      if (!scheme.verify(messageToVerify, signature, keypair.publicKey)) {
        throw new Error("derived keypair did not generate verifiable signature");
      }
      return keypair;
    }
    exports.deriveKeypair = deriveKeypair;
    function sign2(messageHex, privateKey) {
      const algorithm = (0, getAlgorithmFromKey_1.getAlgorithmFromPrivateKey)(privateKey);
      return getSigningScheme(algorithm).sign((0, utils_1.hexToBytes)(messageHex), privateKey);
    }
    exports.sign = sign2;
    function verify(messageHex, signature, publicKey2) {
      const algorithm = (0, getAlgorithmFromKey_1.getAlgorithmFromPublicKey)(publicKey2);
      return getSigningScheme(algorithm).verify((0, utils_1.hexToBytes)(messageHex), signature, publicKey2);
    }
    exports.verify = verify;
    function computePublicKeyHash(publicKeyBytes) {
      return (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(publicKeyBytes));
    }
    function deriveAddressFromBytes(publicKeyBytes) {
      return (0, ripple_address_codec_1.encodeAccountID)(computePublicKeyHash(publicKeyBytes));
    }
    function deriveAddress2(publicKey2) {
      return deriveAddressFromBytes((0, utils_1.hexToBytes)(publicKey2));
    }
    exports.deriveAddress = deriveAddress2;
    function deriveNodeAddress(publicKey2) {
      const generatorBytes = (0, ripple_address_codec_1.decodeNodePublic)(publicKey2);
      const accountPublicBytes = (0, utils_2.accountPublicFromPublicGenerator)(generatorBytes);
      return deriveAddressFromBytes(accountPublicBytes);
    }
    exports.deriveNodeAddress = deriveNodeAddress;
  }
});

// node_modules/xrpl/dist/npm/errors.js
var require_errors = __commonJS({
  "node_modules/xrpl/dist/npm/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XRPLFaucetError = exports.NotFoundError = exports.ValidationError = exports.ResponseFormatError = exports.TimeoutError = exports.RippledNotInitializedError = exports.DisconnectedError = exports.NotConnectedError = exports.RippledError = exports.ConnectionError = exports.UnexpectedError = exports.XrplError = void 0;
    var XrplError = class extends Error {
      constructor(message = "", data) {
        super(message);
        this.name = this.constructor.name;
        this.message = message;
        this.data = data;
        if (Error.captureStackTrace != null) {
          Error.captureStackTrace(this, this.constructor);
        }
      }
      toString() {
        let result = `[${this.name}(${this.message}`;
        if (this.data) {
          result += `, ${JSON.stringify(this.data)}`;
        }
        result += ")]";
        return result;
      }
      inspect() {
        return this.toString();
      }
    };
    exports.XrplError = XrplError;
    var RippledError = class extends XrplError {
    };
    exports.RippledError = RippledError;
    var UnexpectedError = class extends XrplError {
    };
    exports.UnexpectedError = UnexpectedError;
    var ConnectionError = class extends XrplError {
    };
    exports.ConnectionError = ConnectionError;
    var NotConnectedError = class extends ConnectionError {
    };
    exports.NotConnectedError = NotConnectedError;
    var DisconnectedError = class extends ConnectionError {
    };
    exports.DisconnectedError = DisconnectedError;
    var RippledNotInitializedError = class extends ConnectionError {
    };
    exports.RippledNotInitializedError = RippledNotInitializedError;
    var TimeoutError2 = class extends ConnectionError {
    };
    exports.TimeoutError = TimeoutError2;
    var ResponseFormatError = class extends ConnectionError {
    };
    exports.ResponseFormatError = ResponseFormatError;
    var ValidationError = class extends XrplError {
    };
    exports.ValidationError = ValidationError;
    var XRPLFaucetError = class extends XrplError {
    };
    exports.XRPLFaucetError = XRPLFaucetError;
    var NotFoundError2 = class extends XrplError {
      constructor(message = "Not found") {
        super(message);
      }
    };
    exports.NotFoundError = NotFoundError2;
  }
});

// node_modules/xrpl/dist/npm/models/common/index.js
var require_common = __commonJS({
  "node_modules/xrpl/dist/npm/models/common/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_API_VERSION = exports.RIPPLED_API_V2 = exports.RIPPLED_API_V1 = void 0;
    exports.RIPPLED_API_V1 = 1;
    exports.RIPPLED_API_V2 = 2;
    exports.DEFAULT_API_VERSION = exports.RIPPLED_API_V2;
  }
});

// node_modules/xrpl/dist/npm/models/ledger/AccountRoot.js
var require_AccountRoot = __commonJS({
  "node_modules/xrpl/dist/npm/models/ledger/AccountRoot.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AccountRootFlags = void 0;
    var AccountRootFlags;
    (function(AccountRootFlags2) {
      AccountRootFlags2[AccountRootFlags2["lsfPasswordSpent"] = 65536] = "lsfPasswordSpent";
      AccountRootFlags2[AccountRootFlags2["lsfRequireDestTag"] = 131072] = "lsfRequireDestTag";
      AccountRootFlags2[AccountRootFlags2["lsfRequireAuth"] = 262144] = "lsfRequireAuth";
      AccountRootFlags2[AccountRootFlags2["lsfDisallowXRP"] = 524288] = "lsfDisallowXRP";
      AccountRootFlags2[AccountRootFlags2["lsfDisableMaster"] = 1048576] = "lsfDisableMaster";
      AccountRootFlags2[AccountRootFlags2["lsfNoFreeze"] = 2097152] = "lsfNoFreeze";
      AccountRootFlags2[AccountRootFlags2["lsfGlobalFreeze"] = 4194304] = "lsfGlobalFreeze";
      AccountRootFlags2[AccountRootFlags2["lsfDefaultRipple"] = 8388608] = "lsfDefaultRipple";
      AccountRootFlags2[AccountRootFlags2["lsfDepositAuth"] = 16777216] = "lsfDepositAuth";
      AccountRootFlags2[AccountRootFlags2["lsfAMM"] = 33554432] = "lsfAMM";
      AccountRootFlags2[AccountRootFlags2["lsfDisallowIncomingNFTokenOffer"] = 67108864] = "lsfDisallowIncomingNFTokenOffer";
      AccountRootFlags2[AccountRootFlags2["lsfDisallowIncomingCheck"] = 134217728] = "lsfDisallowIncomingCheck";
      AccountRootFlags2[AccountRootFlags2["lsfDisallowIncomingPayChan"] = 268435456] = "lsfDisallowIncomingPayChan";
      AccountRootFlags2[AccountRootFlags2["lsfDisallowIncomingTrustline"] = 536870912] = "lsfDisallowIncomingTrustline";
      AccountRootFlags2[AccountRootFlags2["lsfAllowTrustLineClawback"] = 2147483648] = "lsfAllowTrustLineClawback";
      AccountRootFlags2[AccountRootFlags2["lsfAllowTrustLineLocking"] = 1073741824] = "lsfAllowTrustLineLocking";
    })(AccountRootFlags || (exports.AccountRootFlags = AccountRootFlags = {}));
  }
});

// node_modules/xrpl/dist/npm/models/utils/index.js
var require_utils8 = __commonJS({
  "node_modules/xrpl/dist/npm/models/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHex = exports.hasFlag = exports.isFlagEnabled = exports.onlyHasFields = exports.INTEGER_SANITY_CHECK = void 0;
    var HEX_REGEX = /^[0-9A-Fa-f]+$/u;
    exports.INTEGER_SANITY_CHECK = /^[0-9]+$/u;
    function onlyHasFields(obj, fields) {
      return Object.keys(obj).every((key) => fields.includes(key));
    }
    exports.onlyHasFields = onlyHasFields;
    function isFlagEnabled(Flags, checkFlag) {
      return (BigInt(checkFlag) & BigInt(Flags)) === BigInt(checkFlag);
    }
    exports.isFlagEnabled = isFlagEnabled;
    function hasFlag(tx, flag, flagName) {
      if (tx.Flags == null) {
        return false;
      }
      if (typeof tx.Flags === "number") {
        return isFlagEnabled(tx.Flags, flag);
      }
      return tx.Flags[flagName] === true;
    }
    exports.hasFlag = hasFlag;
    function isHex3(str) {
      return HEX_REGEX.test(str);
    }
    exports.isHex = isHex3;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/common.js
var require_common2 = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/common.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateMPTokenMetadata = exports.isDomainID = exports.containsDuplicates = exports.validateCredentialsList = exports.validateCredentialType = exports.parseAmountValue = exports.validateBaseTransaction = exports.GlobalFlags = exports.validateOptionalField = exports.validateRequiredField = exports.isArray = exports.isXChainBridge = exports.isAmount = exports.isAccount = exports.isClawbackAmount = exports.isMPTAmount = exports.isAuthorizeCredential = exports.isIssuedCurrencyAmount = exports.isIssuedCurrency = exports.isCurrency = exports.isXRPLNumber = exports.isNumber = exports.isString = exports.isRecord = exports.MPT_META_WARNING_HEADER = exports.VAULT_DATA_MAX_BYTE_LENGTH = exports.MAX_MPT_META_BYTE_LENGTH = exports.MAX_AUTHORIZED_CREDENTIALS = void 0;
    var utils_1 = require_browser2();
    var ripple_address_codec_1 = require_dist();
    var ripple_binary_codec_1 = require_dist2();
    var errors_1 = require_errors();
    var utils_2 = require_utils8();
    var MEMO_SIZE = 3;
    exports.MAX_AUTHORIZED_CREDENTIALS = 8;
    var MAX_CREDENTIAL_BYTE_LENGTH = 64;
    var MAX_CREDENTIAL_TYPE_LENGTH = MAX_CREDENTIAL_BYTE_LENGTH * 2;
    exports.MAX_MPT_META_BYTE_LENGTH = 1024;
    exports.VAULT_DATA_MAX_BYTE_LENGTH = 256;
    var TICKER_REGEX = /^[A-Z0-9]{1,6}$/u;
    var MAX_MPT_META_TOP_LEVEL_FIELD_COUNT = 9;
    var MPT_META_URL_FIELD_COUNT = 3;
    var MPT_META_REQUIRED_FIELDS = [
      "ticker",
      "name",
      "icon",
      "asset_class",
      "issuer_name"
    ];
    var MPT_META_ASSET_CLASSES = [
      "rwa",
      "memes",
      "wrapped",
      "gaming",
      "defi",
      "other"
    ];
    var MPT_META_ASSET_SUB_CLASSES = [
      "stablecoin",
      "commodity",
      "real_estate",
      "private_credit",
      "equity",
      "treasury",
      "other"
    ];
    exports.MPT_META_WARNING_HEADER = "MPTokenMetadata is not properly formatted as JSON as per the XLS-89d standard. While adherence to this standard is not mandatory, such non-compliant MPToken's might not be discoverable by Explorers and Indexers in the XRPL ecosystem.";
    function isMemo(obj) {
      if (!isRecord(obj)) {
        return false;
      }
      const memo2 = obj.Memo;
      if (!isRecord(memo2)) {
        return false;
      }
      const size = Object.keys(memo2).length;
      const validData = memo2.MemoData == null || isString2(memo2.MemoData) && (0, utils_2.isHex)(memo2.MemoData);
      const validFormat = memo2.MemoFormat == null || isString2(memo2.MemoFormat) && (0, utils_2.isHex)(memo2.MemoFormat);
      const validType = memo2.MemoType == null || isString2(memo2.MemoType) && (0, utils_2.isHex)(memo2.MemoType);
      return size >= 1 && size <= MEMO_SIZE && validData && validFormat && validType && (0, utils_2.onlyHasFields)(memo2, ["MemoFormat", "MemoData", "MemoType"]);
    }
    var SIGNER_SIZE = 3;
    function isSigner(obj) {
      if (!isRecord(obj)) {
        return false;
      }
      const signer = obj.Signer;
      if (!isRecord(signer)) {
        return false;
      }
      return Object.keys(signer).length === SIGNER_SIZE && isString2(signer.Account) && isString2(signer.TxnSignature) && isString2(signer.SigningPubKey);
    }
    var XRP_CURRENCY_SIZE = 1;
    var ISSUE_SIZE = 2;
    var ISSUED_CURRENCY_SIZE = 3;
    var XCHAIN_BRIDGE_SIZE = 4;
    var MPTOKEN_SIZE = 2;
    var AUTHORIZE_CREDENTIAL_SIZE = 1;
    function isRecord(value) {
      return value !== null && typeof value === "object" && !Array.isArray(value);
    }
    exports.isRecord = isRecord;
    function isString2(str) {
      return typeof str === "string";
    }
    exports.isString = isString2;
    function isNumber2(num) {
      return typeof num === "number";
    }
    exports.isNumber = isNumber2;
    function isXRPLNumber(value) {
      return typeof value === "string" && /^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?$/u.test(value.trim());
    }
    exports.isXRPLNumber = isXRPLNumber;
    function isCurrency(input) {
      return isString2(input) || isIssuedCurrency(input);
    }
    exports.isCurrency = isCurrency;
    function isIssuedCurrency(input) {
      return isRecord(input) && (Object.keys(input).length === ISSUE_SIZE && isString2(input.issuer) && isString2(input.currency) || Object.keys(input).length === XRP_CURRENCY_SIZE && input.currency === "XRP");
    }
    exports.isIssuedCurrency = isIssuedCurrency;
    function isIssuedCurrencyAmount(input) {
      return isRecord(input) && Object.keys(input).length === ISSUED_CURRENCY_SIZE && isString2(input.value) && isString2(input.issuer) && isString2(input.currency);
    }
    exports.isIssuedCurrencyAmount = isIssuedCurrencyAmount;
    function isAuthorizeCredential(input) {
      return isRecord(input) && isRecord(input.Credential) && Object.keys(input).length === AUTHORIZE_CREDENTIAL_SIZE && typeof input.Credential.CredentialType === "string" && typeof input.Credential.Issuer === "string";
    }
    exports.isAuthorizeCredential = isAuthorizeCredential;
    function isMPTAmount(input) {
      return isRecord(input) && Object.keys(input).length === MPTOKEN_SIZE && typeof input.value === "string" && typeof input.mpt_issuance_id === "string";
    }
    exports.isMPTAmount = isMPTAmount;
    function isClawbackAmount(input) {
      return isIssuedCurrencyAmount(input) || isMPTAmount(input);
    }
    exports.isClawbackAmount = isClawbackAmount;
    function isAccount(account3) {
      return typeof account3 === "string" && ((0, ripple_address_codec_1.isValidClassicAddress)(account3) || (0, ripple_address_codec_1.isValidXAddress)(account3));
    }
    exports.isAccount = isAccount;
    function isAmount(amount) {
      return typeof amount === "string" || isIssuedCurrencyAmount(amount) || isMPTAmount(amount);
    }
    exports.isAmount = isAmount;
    function isXChainBridge(input) {
      return isRecord(input) && Object.keys(input).length === XCHAIN_BRIDGE_SIZE && typeof input.LockingChainDoor === "string" && isIssuedCurrency(input.LockingChainIssue) && typeof input.IssuingChainDoor === "string" && isIssuedCurrency(input.IssuingChainIssue);
    }
    exports.isXChainBridge = isXChainBridge;
    function isArray5(input) {
      return input != null && Array.isArray(input);
    }
    exports.isArray = isArray5;
    function validateRequiredField(tx, param, checkValidity, errorOpts = {}) {
      var _a, _b;
      const paramNameStr = (_a = errorOpts.paramName) !== null && _a !== void 0 ? _a : param;
      const txType = (_b = errorOpts.txType) !== null && _b !== void 0 ? _b : tx.TransactionType;
      if (tx[param] == null) {
        throw new errors_1.ValidationError(`${txType}: missing field ${String(paramNameStr)}`);
      }
      if (!checkValidity(tx[param])) {
        throw new errors_1.ValidationError(`${txType}: invalid field ${String(paramNameStr)}`);
      }
    }
    exports.validateRequiredField = validateRequiredField;
    function validateOptionalField(tx, param, checkValidity, errorOpts = {}) {
      var _a, _b;
      const paramNameStr = (_a = errorOpts.paramName) !== null && _a !== void 0 ? _a : param;
      const txType = (_b = errorOpts.txType) !== null && _b !== void 0 ? _b : tx.TransactionType;
      if (tx[param] !== void 0 && !checkValidity(tx[param])) {
        throw new errors_1.ValidationError(`${txType}: invalid field ${String(paramNameStr)}`);
      }
    }
    exports.validateOptionalField = validateOptionalField;
    var GlobalFlags;
    (function(GlobalFlags2) {
      GlobalFlags2[GlobalFlags2["tfInnerBatchTxn"] = 1073741824] = "tfInnerBatchTxn";
    })(GlobalFlags || (exports.GlobalFlags = GlobalFlags = {}));
    function validateBaseTransaction(common) {
      if (!isRecord(common)) {
        throw new errors_1.ValidationError("BaseTransaction: invalid, expected a valid object");
      }
      if (common.TransactionType === void 0) {
        throw new errors_1.ValidationError("BaseTransaction: missing field TransactionType");
      }
      if (typeof common.TransactionType !== "string") {
        throw new errors_1.ValidationError("BaseTransaction: TransactionType not string");
      }
      if (!ripple_binary_codec_1.TRANSACTION_TYPES.includes(common.TransactionType)) {
        throw new errors_1.ValidationError(`BaseTransaction: Unknown TransactionType ${common.TransactionType}`);
      }
      validateRequiredField(common, "Account", isString2);
      validateOptionalField(common, "Fee", isString2);
      validateOptionalField(common, "Sequence", isNumber2);
      validateOptionalField(common, "AccountTxnID", isString2);
      validateOptionalField(common, "LastLedgerSequence", isNumber2);
      const memos = common.Memos;
      if (memos != null && (!isArray5(memos) || !memos.every(isMemo))) {
        throw new errors_1.ValidationError("BaseTransaction: invalid Memos");
      }
      const signers = common.Signers;
      if (signers != null && (!isArray5(signers) || signers.length === 0 || !signers.every(isSigner))) {
        throw new errors_1.ValidationError("BaseTransaction: invalid Signers");
      }
      validateOptionalField(common, "SourceTag", isNumber2);
      validateOptionalField(common, "SigningPubKey", isString2);
      validateOptionalField(common, "TicketSequence", isNumber2);
      validateOptionalField(common, "TxnSignature", isString2);
      validateOptionalField(common, "NetworkID", isNumber2);
      validateOptionalField(common, "Delegate", isAccount);
      const delegate = common.Delegate;
      if (delegate != null && delegate === common.Account) {
        throw new errors_1.ValidationError("BaseTransaction: Account and Delegate addresses cannot be the same");
      }
    }
    exports.validateBaseTransaction = validateBaseTransaction;
    function parseAmountValue(amount) {
      if (!isAmount(amount)) {
        return NaN;
      }
      if (typeof amount === "string") {
        return parseFloat(amount);
      }
      return parseFloat(amount.value);
    }
    exports.parseAmountValue = parseAmountValue;
    function validateCredentialType(tx) {
      if (typeof tx.TransactionType !== "string") {
        throw new errors_1.ValidationError("Invalid TransactionType");
      }
      if (tx.CredentialType === void 0) {
        throw new errors_1.ValidationError(`${tx.TransactionType}: missing field CredentialType`);
      }
      if (!isString2(tx.CredentialType)) {
        throw new errors_1.ValidationError(`${tx.TransactionType}: CredentialType must be a string`);
      }
      if (tx.CredentialType.length === 0) {
        throw new errors_1.ValidationError(`${tx.TransactionType}: CredentialType cannot be an empty string`);
      } else if (tx.CredentialType.length > MAX_CREDENTIAL_TYPE_LENGTH) {
        throw new errors_1.ValidationError(`${tx.TransactionType}: CredentialType length cannot be > ${MAX_CREDENTIAL_TYPE_LENGTH}`);
      }
      if (!utils_1.HEX_REGEX.test(tx.CredentialType)) {
        throw new errors_1.ValidationError(`${tx.TransactionType}: CredentialType must be encoded in hex`);
      }
    }
    exports.validateCredentialType = validateCredentialType;
    function validateCredentialsList(credentials, transactionType, isStringID, maxCredentials) {
      if (credentials == null) {
        return;
      }
      if (!isArray5(credentials)) {
        throw new errors_1.ValidationError(`${transactionType}: Credentials must be an array`);
      }
      if (credentials.length > maxCredentials) {
        throw new errors_1.ValidationError(`${transactionType}: Credentials length cannot exceed ${maxCredentials} elements`);
      } else if (credentials.length === 0) {
        throw new errors_1.ValidationError(`${transactionType}: Credentials cannot be an empty array`);
      }
      credentials.forEach((credential) => {
        if (isStringID) {
          if (!isString2(credential)) {
            throw new errors_1.ValidationError(`${transactionType}: Invalid Credentials ID list format`);
          }
        } else if (!isAuthorizeCredential(credential)) {
          throw new errors_1.ValidationError(`${transactionType}: Invalid Credentials format`);
        }
      });
      if (containsDuplicates(credentials)) {
        throw new errors_1.ValidationError(`${transactionType}: Credentials cannot contain duplicate elements`);
      }
    }
    exports.validateCredentialsList = validateCredentialsList;
    function isAuthorizeCredentialArray(list) {
      return typeof list[0] !== "string";
    }
    function containsDuplicates(objectList) {
      if (typeof objectList[0] === "string") {
        const objSet = new Set(objectList.map((obj) => JSON.stringify(obj)));
        return objSet.size !== objectList.length;
      }
      const seen = /* @__PURE__ */ new Set();
      if (isAuthorizeCredentialArray(objectList)) {
        for (const item of objectList) {
          const key = `${item.Credential.Issuer}-${item.Credential.CredentialType}`;
          if (seen.has(key)) {
            return true;
          }
          seen.add(key);
        }
      }
      return false;
    }
    exports.containsDuplicates = containsDuplicates;
    var _DOMAIN_ID_LENGTH = 64;
    function isDomainID(domainID) {
      return isString2(domainID) && domainID.length === _DOMAIN_ID_LENGTH && (0, utils_2.isHex)(domainID);
    }
    exports.isDomainID = isDomainID;
    function validateMPTokenMetadata(input) {
      const validationMessages = [];
      if (!(0, utils_2.isHex)(input)) {
        validationMessages.push(`MPTokenMetadata must be in hex format.`);
        return validationMessages;
      }
      if (input.length / 2 > exports.MAX_MPT_META_BYTE_LENGTH) {
        validationMessages.push(`MPTokenMetadata must be max ${exports.MAX_MPT_META_BYTE_LENGTH} bytes.`);
        return validationMessages;
      }
      let jsonMetaData;
      try {
        jsonMetaData = JSON.parse((0, utils_1.hexToString)(input));
      } catch (err) {
        validationMessages.push(`MPTokenMetadata is not properly formatted as JSON - ${String(err)}`);
        return validationMessages;
      }
      if (jsonMetaData == null || typeof jsonMetaData !== "object" || Array.isArray(jsonMetaData)) {
        validationMessages.push("MPTokenMetadata is not properly formatted as per XLS-89d.");
        return validationMessages;
      }
      const obj = jsonMetaData;
      const fieldCount = Object.keys(obj).length;
      if (fieldCount > MAX_MPT_META_TOP_LEVEL_FIELD_COUNT) {
        validationMessages.push(`MPTokenMetadata must not contain more than ${MAX_MPT_META_TOP_LEVEL_FIELD_COUNT} top-level fields (found ${fieldCount}).`);
        return validationMessages;
      }
      const incorrectRequiredFields = MPT_META_REQUIRED_FIELDS.filter((field) => !isString2(obj[field]));
      if (incorrectRequiredFields.length > 0) {
        incorrectRequiredFields.forEach((field) => validationMessages.push(`${field} is required and must be string.`));
        return validationMessages;
      }
      if (obj.desc != null && !isString2(obj.desc)) {
        validationMessages.push(`desc must be a string.`);
        return validationMessages;
      }
      if (obj.asset_subclass != null && !isString2(obj.asset_subclass)) {
        validationMessages.push(`asset_subclass must be a string.`);
        return validationMessages;
      }
      if (obj.additional_info != null && !isString2(obj.additional_info) && !isRecord(obj.additional_info)) {
        validationMessages.push(`additional_info must be a string or JSON object.`);
        return validationMessages;
      }
      if (obj.urls != null) {
        if (!Array.isArray(obj.urls)) {
          validationMessages.push("urls must be an array as per XLS-89d.");
          return validationMessages;
        }
        if (!obj.urls.every(isValidMPTokenMetadataUrlStructure)) {
          validationMessages.push("One or more urls are not structured per XLS-89d.");
          return validationMessages;
        }
      }
      const mptMPTokenMetadata = obj;
      if (!TICKER_REGEX.test(mptMPTokenMetadata.ticker)) {
        validationMessages.push(`ticker should have uppercase letters (A-Z) and digits (0-9) only. Max 6 characters recommended.`);
      }
      if (!mptMPTokenMetadata.icon.startsWith("https://")) {
        validationMessages.push(`icon should be a valid https url.`);
      }
      if (!MPT_META_ASSET_CLASSES.includes(mptMPTokenMetadata.asset_class.toLowerCase())) {
        validationMessages.push(`asset_class should be one of ${MPT_META_ASSET_CLASSES.join(", ")}.`);
      }
      if (mptMPTokenMetadata.asset_subclass != null && !MPT_META_ASSET_SUB_CLASSES.includes(mptMPTokenMetadata.asset_subclass.toLowerCase())) {
        validationMessages.push(`asset_subclass should be one of ${MPT_META_ASSET_SUB_CLASSES.join(", ")}.`);
      }
      if (mptMPTokenMetadata.asset_class.toLowerCase() === "rwa" && mptMPTokenMetadata.asset_subclass == null) {
        validationMessages.push(`asset_subclass is required when asset_class is rwa.`);
      }
      if (mptMPTokenMetadata.urls != null && !mptMPTokenMetadata.urls.every((ele) => ele.url.startsWith("https://"))) {
        validationMessages.push(`url should be a valid https url.`);
      }
      return validationMessages;
    }
    exports.validateMPTokenMetadata = validateMPTokenMetadata;
    function isValidMPTokenMetadataUrlStructure(input) {
      if (input == null) {
        return false;
      }
      const obj = input;
      return typeof obj === "object" && isString2(obj.url) && isString2(obj.type) && isString2(obj.title) && Object.keys(obj).length === MPT_META_URL_FIELD_COUNT;
    }
  }
});

// node_modules/xrpl/dist/npm/models/transactions/accountSet.js
var require_accountSet = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/accountSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateAccountSet = exports.AccountSetTfFlags = exports.AccountSetAsfFlags = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    var AccountSetAsfFlags;
    (function(AccountSetAsfFlags2) {
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfRequireDest"] = 1] = "asfRequireDest";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfRequireAuth"] = 2] = "asfRequireAuth";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfDisallowXRP"] = 3] = "asfDisallowXRP";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfDisableMaster"] = 4] = "asfDisableMaster";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfAccountTxnID"] = 5] = "asfAccountTxnID";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfNoFreeze"] = 6] = "asfNoFreeze";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfGlobalFreeze"] = 7] = "asfGlobalFreeze";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfDefaultRipple"] = 8] = "asfDefaultRipple";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfDepositAuth"] = 9] = "asfDepositAuth";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfAuthorizedNFTokenMinter"] = 10] = "asfAuthorizedNFTokenMinter";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfDisallowIncomingNFTokenOffer"] = 12] = "asfDisallowIncomingNFTokenOffer";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfDisallowIncomingCheck"] = 13] = "asfDisallowIncomingCheck";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfDisallowIncomingPayChan"] = 14] = "asfDisallowIncomingPayChan";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfDisallowIncomingTrustline"] = 15] = "asfDisallowIncomingTrustline";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfAllowTrustLineClawback"] = 16] = "asfAllowTrustLineClawback";
      AccountSetAsfFlags2[AccountSetAsfFlags2["asfAllowTrustLineLocking"] = 17] = "asfAllowTrustLineLocking";
    })(AccountSetAsfFlags || (exports.AccountSetAsfFlags = AccountSetAsfFlags = {}));
    var AccountSetTfFlags;
    (function(AccountSetTfFlags2) {
      AccountSetTfFlags2[AccountSetTfFlags2["tfRequireDestTag"] = 65536] = "tfRequireDestTag";
      AccountSetTfFlags2[AccountSetTfFlags2["tfOptionalDestTag"] = 131072] = "tfOptionalDestTag";
      AccountSetTfFlags2[AccountSetTfFlags2["tfRequireAuth"] = 262144] = "tfRequireAuth";
      AccountSetTfFlags2[AccountSetTfFlags2["tfOptionalAuth"] = 524288] = "tfOptionalAuth";
      AccountSetTfFlags2[AccountSetTfFlags2["tfDisallowXRP"] = 1048576] = "tfDisallowXRP";
      AccountSetTfFlags2[AccountSetTfFlags2["tfAllowXRP"] = 2097152] = "tfAllowXRP";
    })(AccountSetTfFlags || (exports.AccountSetTfFlags = AccountSetTfFlags = {}));
    var MIN_TICK_SIZE = 3;
    var MAX_TICK_SIZE = 15;
    function validateAccountSet(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateOptionalField)(tx, "NFTokenMinter", common_1.isAccount);
      if (tx.ClearFlag !== void 0) {
        if (typeof tx.ClearFlag !== "number") {
          throw new errors_1.ValidationError("AccountSet: invalid ClearFlag");
        }
        if (!Object.values(AccountSetAsfFlags).includes(tx.ClearFlag)) {
          throw new errors_1.ValidationError("AccountSet: invalid ClearFlag");
        }
      }
      if (tx.Domain !== void 0 && typeof tx.Domain !== "string") {
        throw new errors_1.ValidationError("AccountSet: invalid Domain");
      }
      if (tx.EmailHash !== void 0 && typeof tx.EmailHash !== "string") {
        throw new errors_1.ValidationError("AccountSet: invalid EmailHash");
      }
      if (tx.MessageKey !== void 0 && typeof tx.MessageKey !== "string") {
        throw new errors_1.ValidationError("AccountSet: invalid MessageKey");
      }
      if (tx.SetFlag !== void 0) {
        if (typeof tx.SetFlag !== "number") {
          throw new errors_1.ValidationError("AccountSet: invalid SetFlag");
        }
        if (!Object.values(AccountSetAsfFlags).includes(tx.SetFlag)) {
          throw new errors_1.ValidationError("AccountSet: invalid SetFlag");
        }
      }
      if (tx.TransferRate !== void 0 && typeof tx.TransferRate !== "number") {
        throw new errors_1.ValidationError("AccountSet: invalid TransferRate");
      }
      if (tx.TickSize !== void 0) {
        if (typeof tx.TickSize !== "number") {
          throw new errors_1.ValidationError("AccountSet: invalid TickSize");
        }
        if (tx.TickSize !== 0 && (tx.TickSize < MIN_TICK_SIZE || tx.TickSize > MAX_TICK_SIZE)) {
          throw new errors_1.ValidationError("AccountSet: invalid TickSize");
        }
      }
    }
    exports.validateAccountSet = validateAccountSet;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/AMMClawback.js
var require_AMMClawback = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/AMMClawback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateAMMClawback = exports.AMMClawbackFlags = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    var AMMClawbackFlags;
    (function(AMMClawbackFlags2) {
      AMMClawbackFlags2[AMMClawbackFlags2["tfClawTwoAssets"] = 1] = "tfClawTwoAssets";
    })(AMMClawbackFlags || (exports.AMMClawbackFlags = AMMClawbackFlags = {}));
    function validateAMMClawback(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "Holder", common_1.isAccount);
      (0, common_1.validateRequiredField)(tx, "Asset", common_1.isIssuedCurrency);
      const asset = tx.Asset;
      if (tx.Holder === asset.issuer) {
        throw new errors_1.ValidationError("AMMClawback: Holder and Asset.issuer must be distinct");
      }
      if (tx.Account !== asset.issuer) {
        throw new errors_1.ValidationError("AMMClawback: Account must be the same as Asset.issuer");
      }
      (0, common_1.validateRequiredField)(tx, "Asset2", common_1.isIssuedCurrency);
      (0, common_1.validateOptionalField)(tx, "Amount", common_1.isIssuedCurrencyAmount);
      if (tx.Amount != null) {
        if (tx.Amount.currency !== asset.currency) {
          throw new errors_1.ValidationError("AMMClawback: Amount.currency must match Asset.currency");
        }
        if (tx.Amount.issuer !== asset.issuer) {
          throw new errors_1.ValidationError("AMMClawback: Amount.issuer must match Amount.issuer");
        }
      }
    }
    exports.validateAMMClawback = validateAMMClawback;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/AMMDeposit.js
var require_AMMDeposit = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/AMMDeposit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateAMMDeposit = exports.AMMDepositFlags = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    var AMMDepositFlags;
    (function(AMMDepositFlags2) {
      AMMDepositFlags2[AMMDepositFlags2["tfLPToken"] = 65536] = "tfLPToken";
      AMMDepositFlags2[AMMDepositFlags2["tfSingleAsset"] = 524288] = "tfSingleAsset";
      AMMDepositFlags2[AMMDepositFlags2["tfTwoAsset"] = 1048576] = "tfTwoAsset";
      AMMDepositFlags2[AMMDepositFlags2["tfOneAssetLPToken"] = 2097152] = "tfOneAssetLPToken";
      AMMDepositFlags2[AMMDepositFlags2["tfLimitLPToken"] = 4194304] = "tfLimitLPToken";
      AMMDepositFlags2[AMMDepositFlags2["tfTwoAssetIfEmpty"] = 8388608] = "tfTwoAssetIfEmpty";
    })(AMMDepositFlags || (exports.AMMDepositFlags = AMMDepositFlags = {}));
    function validateAMMDeposit(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.Asset == null) {
        throw new errors_1.ValidationError("AMMDeposit: missing field Asset");
      }
      if (!(0, common_1.isIssuedCurrency)(tx.Asset)) {
        throw new errors_1.ValidationError("AMMDeposit: Asset must be a Currency");
      }
      if (tx.Asset2 == null) {
        throw new errors_1.ValidationError("AMMDeposit: missing field Asset2");
      }
      if (!(0, common_1.isIssuedCurrency)(tx.Asset2)) {
        throw new errors_1.ValidationError("AMMDeposit: Asset2 must be a Currency");
      }
      if (tx.Amount2 != null && tx.Amount == null) {
        throw new errors_1.ValidationError("AMMDeposit: must set Amount with Amount2");
      } else if (tx.EPrice != null && tx.Amount == null) {
        throw new errors_1.ValidationError("AMMDeposit: must set Amount with EPrice");
      } else if (tx.LPTokenOut == null && tx.Amount == null) {
        throw new errors_1.ValidationError("AMMDeposit: must set at least LPTokenOut or Amount");
      }
      if (tx.LPTokenOut != null && !(0, common_1.isIssuedCurrencyAmount)(tx.LPTokenOut)) {
        throw new errors_1.ValidationError("AMMDeposit: LPTokenOut must be an IssuedCurrencyAmount");
      }
      if (tx.Amount != null && !(0, common_1.isAmount)(tx.Amount)) {
        throw new errors_1.ValidationError("AMMDeposit: Amount must be an Amount");
      }
      if (tx.Amount2 != null && !(0, common_1.isAmount)(tx.Amount2)) {
        throw new errors_1.ValidationError("AMMDeposit: Amount2 must be an Amount");
      }
      if (tx.EPrice != null && !(0, common_1.isAmount)(tx.EPrice)) {
        throw new errors_1.ValidationError("AMMDeposit: EPrice must be an Amount");
      }
    }
    exports.validateAMMDeposit = validateAMMDeposit;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/AMMWithdraw.js
var require_AMMWithdraw = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/AMMWithdraw.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateAMMWithdraw = exports.AMMWithdrawFlags = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    var AMMWithdrawFlags;
    (function(AMMWithdrawFlags2) {
      AMMWithdrawFlags2[AMMWithdrawFlags2["tfLPToken"] = 65536] = "tfLPToken";
      AMMWithdrawFlags2[AMMWithdrawFlags2["tfWithdrawAll"] = 131072] = "tfWithdrawAll";
      AMMWithdrawFlags2[AMMWithdrawFlags2["tfOneAssetWithdrawAll"] = 262144] = "tfOneAssetWithdrawAll";
      AMMWithdrawFlags2[AMMWithdrawFlags2["tfSingleAsset"] = 524288] = "tfSingleAsset";
      AMMWithdrawFlags2[AMMWithdrawFlags2["tfTwoAsset"] = 1048576] = "tfTwoAsset";
      AMMWithdrawFlags2[AMMWithdrawFlags2["tfOneAssetLPToken"] = 2097152] = "tfOneAssetLPToken";
      AMMWithdrawFlags2[AMMWithdrawFlags2["tfLimitLPToken"] = 4194304] = "tfLimitLPToken";
    })(AMMWithdrawFlags || (exports.AMMWithdrawFlags = AMMWithdrawFlags = {}));
    function validateAMMWithdraw(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.Asset == null) {
        throw new errors_1.ValidationError("AMMWithdraw: missing field Asset");
      }
      if (!(0, common_1.isIssuedCurrency)(tx.Asset)) {
        throw new errors_1.ValidationError("AMMWithdraw: Asset must be a Currency");
      }
      if (tx.Asset2 == null) {
        throw new errors_1.ValidationError("AMMWithdraw: missing field Asset2");
      }
      if (!(0, common_1.isIssuedCurrency)(tx.Asset2)) {
        throw new errors_1.ValidationError("AMMWithdraw: Asset2 must be a Currency");
      }
      if (tx.Amount2 != null && tx.Amount == null) {
        throw new errors_1.ValidationError("AMMWithdraw: must set Amount with Amount2");
      } else if (tx.EPrice != null && tx.Amount == null) {
        throw new errors_1.ValidationError("AMMWithdraw: must set Amount with EPrice");
      }
      if (tx.LPTokenIn != null && !(0, common_1.isIssuedCurrencyAmount)(tx.LPTokenIn)) {
        throw new errors_1.ValidationError("AMMWithdraw: LPTokenIn must be an IssuedCurrencyAmount");
      }
      if (tx.Amount != null && !(0, common_1.isAmount)(tx.Amount)) {
        throw new errors_1.ValidationError("AMMWithdraw: Amount must be an Amount");
      }
      if (tx.Amount2 != null && !(0, common_1.isAmount)(tx.Amount2)) {
        throw new errors_1.ValidationError("AMMWithdraw: Amount2 must be an Amount");
      }
      if (tx.EPrice != null && !(0, common_1.isAmount)(tx.EPrice)) {
        throw new errors_1.ValidationError("AMMWithdraw: EPrice must be an Amount");
      }
    }
    exports.validateAMMWithdraw = validateAMMWithdraw;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/batch.js
var require_batch = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/batch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateBatch = exports.BatchFlags = void 0;
    var errors_1 = require_errors();
    var utils_1 = require_utils8();
    var common_1 = require_common2();
    var BatchFlags;
    (function(BatchFlags2) {
      BatchFlags2[BatchFlags2["tfAllOrNothing"] = 65536] = "tfAllOrNothing";
      BatchFlags2[BatchFlags2["tfOnlyOne"] = 131072] = "tfOnlyOne";
      BatchFlags2[BatchFlags2["tfUntilFailure"] = 262144] = "tfUntilFailure";
      BatchFlags2[BatchFlags2["tfIndependent"] = 524288] = "tfIndependent";
    })(BatchFlags || (exports.BatchFlags = BatchFlags = {}));
    function validateBatch(tx) {
      var _a;
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "RawTransactions", common_1.isArray);
      tx.RawTransactions.forEach((rawTxObj, index) => {
        if (!(0, common_1.isRecord)(rawTxObj)) {
          throw new errors_1.ValidationError(`Batch: RawTransactions[${index}] is not object.`);
        }
        (0, common_1.validateRequiredField)(rawTxObj, "RawTransaction", common_1.isRecord, {
          paramName: `RawTransactions[${index}].RawTransaction`,
          txType: "Batch"
        });
        const rawTx = rawTxObj.RawTransaction;
        if (rawTx.TransactionType === "Batch") {
          throw new errors_1.ValidationError(`Batch: RawTransactions[${index}] is a Batch transaction. Cannot nest Batch transactions.`);
        }
        if (!(0, utils_1.hasFlag)(rawTx, common_1.GlobalFlags.tfInnerBatchTxn, "tfInnerBatchTxn")) {
          throw new errors_1.ValidationError(`Batch: RawTransactions[${index}] must contain the \`tfInnerBatchTxn\` flag.`);
        }
      });
      (0, common_1.validateOptionalField)(tx, "BatchSigners", common_1.isArray);
      (_a = tx.BatchSigners) === null || _a === void 0 ? void 0 : _a.forEach((signerObj, index) => {
        if (!(0, common_1.isRecord)(signerObj)) {
          throw new errors_1.ValidationError(`Batch: BatchSigners[${index}] is not object.`);
        }
        const signerRecord = signerObj;
        (0, common_1.validateRequiredField)(signerRecord, "BatchSigner", common_1.isRecord, {
          paramName: `BatchSigners[${index}].BatchSigner`,
          txType: "Batch"
        });
        const signer = signerRecord.BatchSigner;
        (0, common_1.validateRequiredField)(signer, "Account", common_1.isString, {
          paramName: `BatchSigners[${index}].Account`,
          txType: "Batch"
        });
        (0, common_1.validateOptionalField)(signer, "SigningPubKey", common_1.isString, {
          paramName: `BatchSigners[${index}].SigningPubKey`,
          txType: "Batch"
        });
        (0, common_1.validateOptionalField)(signer, "TxnSignature", common_1.isString, {
          paramName: `BatchSigners[${index}].TxnSignature`,
          txType: "Batch"
        });
        (0, common_1.validateOptionalField)(signer, "Signers", common_1.isArray, {
          paramName: `BatchSigners[${index}].Signers`,
          txType: "Batch"
        });
      });
    }
    exports.validateBatch = validateBatch;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/MPTokenAuthorize.js
var require_MPTokenAuthorize = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/MPTokenAuthorize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateMPTokenAuthorize = exports.MPTokenAuthorizeFlags = void 0;
    var common_1 = require_common2();
    var MPTokenAuthorizeFlags;
    (function(MPTokenAuthorizeFlags2) {
      MPTokenAuthorizeFlags2[MPTokenAuthorizeFlags2["tfMPTUnauthorize"] = 1] = "tfMPTUnauthorize";
    })(MPTokenAuthorizeFlags || (exports.MPTokenAuthorizeFlags = MPTokenAuthorizeFlags = {}));
    function validateMPTokenAuthorize(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "MPTokenIssuanceID", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "Holder", common_1.isAccount);
    }
    exports.validateMPTokenAuthorize = validateMPTokenAuthorize;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/MPTokenIssuanceCreate.js
var require_MPTokenIssuanceCreate = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/MPTokenIssuanceCreate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateMPTokenIssuanceCreate = exports.MPTokenIssuanceCreateFlags = void 0;
    var errors_1 = require_errors();
    var utils_1 = require_utils8();
    var common_1 = require_common2();
    var MAX_AMT = "9223372036854775807";
    var MAX_TRANSFER_FEE = 5e4;
    var MPTokenIssuanceCreateFlags;
    (function(MPTokenIssuanceCreateFlags2) {
      MPTokenIssuanceCreateFlags2[MPTokenIssuanceCreateFlags2["tfMPTCanLock"] = 2] = "tfMPTCanLock";
      MPTokenIssuanceCreateFlags2[MPTokenIssuanceCreateFlags2["tfMPTRequireAuth"] = 4] = "tfMPTRequireAuth";
      MPTokenIssuanceCreateFlags2[MPTokenIssuanceCreateFlags2["tfMPTCanEscrow"] = 8] = "tfMPTCanEscrow";
      MPTokenIssuanceCreateFlags2[MPTokenIssuanceCreateFlags2["tfMPTCanTrade"] = 16] = "tfMPTCanTrade";
      MPTokenIssuanceCreateFlags2[MPTokenIssuanceCreateFlags2["tfMPTCanTransfer"] = 32] = "tfMPTCanTransfer";
      MPTokenIssuanceCreateFlags2[MPTokenIssuanceCreateFlags2["tfMPTCanClawback"] = 64] = "tfMPTCanClawback";
    })(MPTokenIssuanceCreateFlags || (exports.MPTokenIssuanceCreateFlags = MPTokenIssuanceCreateFlags = {}));
    function validateMPTokenIssuanceCreate(tx) {
      var _a, _b;
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateOptionalField)(tx, "MaximumAmount", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "MPTokenMetadata", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "TransferFee", common_1.isNumber);
      (0, common_1.validateOptionalField)(tx, "AssetScale", common_1.isNumber);
      if (typeof tx.MPTokenMetadata === "string" && (!(0, utils_1.isHex)(tx.MPTokenMetadata) || tx.MPTokenMetadata.length / 2 > common_1.MAX_MPT_META_BYTE_LENGTH)) {
        throw new errors_1.ValidationError(`MPTokenIssuanceCreate: MPTokenMetadata (hex format) must be non-empty and no more than ${common_1.MAX_MPT_META_BYTE_LENGTH} bytes.`);
      }
      if (typeof tx.MaximumAmount === "string") {
        if (!utils_1.INTEGER_SANITY_CHECK.exec(tx.MaximumAmount)) {
          throw new errors_1.ValidationError("MPTokenIssuanceCreate: Invalid MaximumAmount");
        } else if (BigInt(tx.MaximumAmount) > BigInt(MAX_AMT) || BigInt(tx.MaximumAmount) < BigInt(`0`)) {
          throw new errors_1.ValidationError("MPTokenIssuanceCreate: MaximumAmount out of range");
        }
      }
      if (typeof tx.TransferFee === "number") {
        const flags2 = (_a = tx.Flags) !== null && _a !== void 0 ? _a : 0;
        const isTfMPTCanTransfer = typeof flags2 === "number" ? (0, utils_1.isFlagEnabled)(flags2, MPTokenIssuanceCreateFlags.tfMPTCanTransfer) : (_b = flags2.tfMPTCanTransfer) !== null && _b !== void 0 ? _b : false;
        if (tx.TransferFee < 0 || tx.TransferFee > MAX_TRANSFER_FEE) {
          throw new errors_1.ValidationError(`MPTokenIssuanceCreate: TransferFee must be between 0 and ${MAX_TRANSFER_FEE}`);
        }
        if (tx.TransferFee && !isTfMPTCanTransfer) {
          throw new errors_1.ValidationError("MPTokenIssuanceCreate: TransferFee cannot be provided without enabling tfMPTCanTransfer flag");
        }
      }
      if (tx.MPTokenMetadata != null) {
        const validationMessages = (0, common_1.validateMPTokenMetadata)(tx.MPTokenMetadata);
        if (validationMessages.length > 0) {
          const message = [
            common_1.MPT_META_WARNING_HEADER,
            ...validationMessages.map((msg) => `- ${msg}`)
          ].join("\n");
          console.warn(message);
        }
      }
    }
    exports.validateMPTokenIssuanceCreate = validateMPTokenIssuanceCreate;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/MPTokenIssuanceSet.js
var require_MPTokenIssuanceSet = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/MPTokenIssuanceSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateMPTokenIssuanceSet = exports.MPTokenIssuanceSetFlags = void 0;
    var errors_1 = require_errors();
    var utils_1 = require_utils8();
    var common_1 = require_common2();
    var MPTokenIssuanceSetFlags;
    (function(MPTokenIssuanceSetFlags2) {
      MPTokenIssuanceSetFlags2[MPTokenIssuanceSetFlags2["tfMPTLock"] = 1] = "tfMPTLock";
      MPTokenIssuanceSetFlags2[MPTokenIssuanceSetFlags2["tfMPTUnlock"] = 2] = "tfMPTUnlock";
    })(MPTokenIssuanceSetFlags || (exports.MPTokenIssuanceSetFlags = MPTokenIssuanceSetFlags = {}));
    function validateMPTokenIssuanceSet(tx) {
      var _a, _b, _c;
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "MPTokenIssuanceID", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "Holder", common_1.isAccount);
      const flags2 = (_a = tx.Flags) !== null && _a !== void 0 ? _a : 0;
      const isTfMPTLock = typeof flags2 === "number" ? (0, utils_1.isFlagEnabled)(flags2, MPTokenIssuanceSetFlags.tfMPTLock) : (_b = flags2.tfMPTLock) !== null && _b !== void 0 ? _b : false;
      const isTfMPTUnlock = typeof flags2 === "number" ? (0, utils_1.isFlagEnabled)(flags2, MPTokenIssuanceSetFlags.tfMPTUnlock) : (_c = flags2.tfMPTUnlock) !== null && _c !== void 0 ? _c : false;
      if (isTfMPTLock && isTfMPTUnlock) {
        throw new errors_1.ValidationError("MPTokenIssuanceSet: flag conflict");
      }
    }
    exports.validateMPTokenIssuanceSet = validateMPTokenIssuanceSet;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/NFTokenCreateOffer.js
var require_NFTokenCreateOffer = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/NFTokenCreateOffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateNFTokenCreateOffer = exports.NFTokenCreateOfferFlags = void 0;
    var errors_1 = require_errors();
    var utils_1 = require_utils8();
    var common_1 = require_common2();
    var NFTokenCreateOfferFlags;
    (function(NFTokenCreateOfferFlags2) {
      NFTokenCreateOfferFlags2[NFTokenCreateOfferFlags2["tfSellNFToken"] = 1] = "tfSellNFToken";
    })(NFTokenCreateOfferFlags || (exports.NFTokenCreateOfferFlags = NFTokenCreateOfferFlags = {}));
    function validateNFTokenSellOfferCases(tx) {
      if (tx.Owner != null) {
        throw new errors_1.ValidationError("NFTokenCreateOffer: Owner must not be present for sell offers");
      }
    }
    function validateNFTokenBuyOfferCases(tx) {
      if (tx.Owner == null) {
        throw new errors_1.ValidationError("NFTokenCreateOffer: Owner must be present for buy offers");
      }
      if ((0, common_1.parseAmountValue)(tx.Amount) <= 0) {
        throw new errors_1.ValidationError("NFTokenCreateOffer: Amount must be greater than 0 for buy offers");
      }
    }
    function validateNFTokenCreateOffer(tx) {
      var _a, _b;
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.Account === tx.Owner) {
        throw new errors_1.ValidationError("NFTokenCreateOffer: Owner and Account must not be equal");
      }
      if (tx.Account === tx.Destination) {
        throw new errors_1.ValidationError("NFTokenCreateOffer: Destination and Account must not be equal");
      }
      (0, common_1.validateOptionalField)(tx, "Destination", common_1.isAccount);
      (0, common_1.validateOptionalField)(tx, "Owner", common_1.isAccount);
      if (tx.NFTokenID == null) {
        throw new errors_1.ValidationError("NFTokenCreateOffer: missing field NFTokenID");
      }
      if (!(0, common_1.isAmount)(tx.Amount)) {
        throw new errors_1.ValidationError("NFTokenCreateOffer: invalid Amount");
      }
      const flags2 = (_a = tx.Flags) !== null && _a !== void 0 ? _a : 0;
      const isTfSellNFToken = typeof flags2 === "number" ? (0, utils_1.isFlagEnabled)(flags2, NFTokenCreateOfferFlags.tfSellNFToken) : (_b = flags2.tfSellNFToken) !== null && _b !== void 0 ? _b : false;
      if (isTfSellNFToken) {
        validateNFTokenSellOfferCases(tx);
      } else {
        validateNFTokenBuyOfferCases(tx);
      }
    }
    exports.validateNFTokenCreateOffer = validateNFTokenCreateOffer;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/NFTokenMint.js
var require_NFTokenMint = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/NFTokenMint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateNFTokenMint = exports.NFTokenMintFlags = void 0;
    var errors_1 = require_errors();
    var utils_1 = require_utils8();
    var common_1 = require_common2();
    var NFTokenMintFlags;
    (function(NFTokenMintFlags2) {
      NFTokenMintFlags2[NFTokenMintFlags2["tfBurnable"] = 1] = "tfBurnable";
      NFTokenMintFlags2[NFTokenMintFlags2["tfOnlyXRP"] = 2] = "tfOnlyXRP";
      NFTokenMintFlags2[NFTokenMintFlags2["tfTrustLine"] = 4] = "tfTrustLine";
      NFTokenMintFlags2[NFTokenMintFlags2["tfTransferable"] = 8] = "tfTransferable";
      NFTokenMintFlags2[NFTokenMintFlags2["tfMutable"] = 16] = "tfMutable";
    })(NFTokenMintFlags || (exports.NFTokenMintFlags = NFTokenMintFlags = {}));
    function validateNFTokenMint(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.Account === tx.Issuer) {
        throw new errors_1.ValidationError("NFTokenMint: Issuer must not be equal to Account");
      }
      (0, common_1.validateOptionalField)(tx, "Issuer", common_1.isAccount);
      if (typeof tx.URI === "string" && tx.URI === "") {
        throw new errors_1.ValidationError("NFTokenMint: URI must not be empty string");
      }
      if (typeof tx.URI === "string" && !(0, utils_1.isHex)(tx.URI)) {
        throw new errors_1.ValidationError("NFTokenMint: URI must be in hex format");
      }
      if (tx.NFTokenTaxon == null) {
        throw new errors_1.ValidationError("NFTokenMint: missing field NFTokenTaxon");
      }
      if (tx.Amount == null) {
        if (tx.Expiration != null || tx.Destination != null) {
          throw new errors_1.ValidationError("NFTokenMint: Amount is required when Expiration or Destination is present");
        }
      }
      (0, common_1.validateOptionalField)(tx, "Amount", common_1.isAmount);
      (0, common_1.validateOptionalField)(tx, "Expiration", common_1.isNumber);
      (0, common_1.validateOptionalField)(tx, "Destination", common_1.isAccount);
    }
    exports.validateNFTokenMint = validateNFTokenMint;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/offerCreate.js
var require_offerCreate = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/offerCreate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateOfferCreate = exports.OfferCreateFlags = void 0;
    var errors_1 = require_errors();
    var utils_1 = require_utils8();
    var common_1 = require_common2();
    var OfferCreateFlags;
    (function(OfferCreateFlags2) {
      OfferCreateFlags2[OfferCreateFlags2["tfPassive"] = 65536] = "tfPassive";
      OfferCreateFlags2[OfferCreateFlags2["tfImmediateOrCancel"] = 131072] = "tfImmediateOrCancel";
      OfferCreateFlags2[OfferCreateFlags2["tfFillOrKill"] = 262144] = "tfFillOrKill";
      OfferCreateFlags2[OfferCreateFlags2["tfSell"] = 524288] = "tfSell";
      OfferCreateFlags2[OfferCreateFlags2["tfHybrid"] = 1048576] = "tfHybrid";
    })(OfferCreateFlags || (exports.OfferCreateFlags = OfferCreateFlags = {}));
    function validateOfferCreate(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.TakerGets === void 0) {
        throw new errors_1.ValidationError("OfferCreate: missing field TakerGets");
      }
      if (tx.TakerPays === void 0) {
        throw new errors_1.ValidationError("OfferCreate: missing field TakerPays");
      }
      if (typeof tx.TakerGets !== "string" && !(0, common_1.isAmount)(tx.TakerGets)) {
        throw new errors_1.ValidationError("OfferCreate: invalid TakerGets");
      }
      if (typeof tx.TakerPays !== "string" && !(0, common_1.isAmount)(tx.TakerPays)) {
        throw new errors_1.ValidationError("OfferCreate: invalid TakerPays");
      }
      if (tx.Expiration !== void 0 && typeof tx.Expiration !== "number") {
        throw new errors_1.ValidationError("OfferCreate: invalid Expiration");
      }
      if (tx.OfferSequence !== void 0 && typeof tx.OfferSequence !== "number") {
        throw new errors_1.ValidationError("OfferCreate: invalid OfferSequence");
      }
      (0, common_1.validateOptionalField)(tx, "DomainID", common_1.isDomainID, {
        txType: "OfferCreate",
        paramName: "DomainID"
      });
      if (tx.DomainID == null && (0, utils_1.hasFlag)(tx, OfferCreateFlags.tfHybrid, "tfHybrid")) {
        throw new errors_1.ValidationError("OfferCreate: tfHybrid flag cannot be set if DomainID is not present");
      }
    }
    exports.validateOfferCreate = validateOfferCreate;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/payment.js
var require_payment = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/payment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validatePayment = exports.PaymentFlags = void 0;
    var errors_1 = require_errors();
    var utils_1 = require_utils8();
    var common_1 = require_common2();
    var PaymentFlags;
    (function(PaymentFlags2) {
      PaymentFlags2[PaymentFlags2["tfNoRippleDirect"] = 65536] = "tfNoRippleDirect";
      PaymentFlags2[PaymentFlags2["tfPartialPayment"] = 131072] = "tfPartialPayment";
      PaymentFlags2[PaymentFlags2["tfLimitQuality"] = 262144] = "tfLimitQuality";
    })(PaymentFlags || (exports.PaymentFlags = PaymentFlags = {}));
    function validatePayment(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.Amount === void 0) {
        throw new errors_1.ValidationError("PaymentTransaction: missing field Amount");
      }
      if (!(0, common_1.isAmount)(tx.Amount)) {
        throw new errors_1.ValidationError("PaymentTransaction: invalid Amount");
      }
      (0, common_1.validateRequiredField)(tx, "Destination", common_1.isAccount);
      (0, common_1.validateOptionalField)(tx, "DestinationTag", common_1.isNumber);
      (0, common_1.validateCredentialsList)(tx.CredentialIDs, tx.TransactionType, true, common_1.MAX_AUTHORIZED_CREDENTIALS);
      if (tx.InvoiceID !== void 0 && typeof tx.InvoiceID !== "string") {
        throw new errors_1.ValidationError("PaymentTransaction: InvoiceID must be a string");
      }
      (0, common_1.validateOptionalField)(tx, "DomainID", common_1.isDomainID, {
        txType: "PaymentTransaction",
        paramName: "DomainID"
      });
      if (tx.Paths !== void 0 && !isPaths(tx.Paths)) {
        throw new errors_1.ValidationError("PaymentTransaction: invalid Paths");
      }
      if (tx.SendMax !== void 0 && !(0, common_1.isAmount)(tx.SendMax)) {
        throw new errors_1.ValidationError("PaymentTransaction: invalid SendMax");
      }
      checkPartialPayment(tx);
    }
    exports.validatePayment = validatePayment;
    function checkPartialPayment(tx) {
      var _a;
      if (tx.DeliverMin != null) {
        if (tx.Flags == null) {
          throw new errors_1.ValidationError("PaymentTransaction: tfPartialPayment flag required with DeliverMin");
        }
        const flags2 = tx.Flags;
        const isTfPartialPayment = typeof flags2 === "number" ? (0, utils_1.isFlagEnabled)(flags2, PaymentFlags.tfPartialPayment) : (_a = flags2.tfPartialPayment) !== null && _a !== void 0 ? _a : false;
        if (!isTfPartialPayment) {
          throw new errors_1.ValidationError("PaymentTransaction: tfPartialPayment flag required with DeliverMin");
        }
        if (!(0, common_1.isAmount)(tx.DeliverMin)) {
          throw new errors_1.ValidationError("PaymentTransaction: invalid DeliverMin");
        }
      }
    }
    function isPathStep(pathStep) {
      if (pathStep.account !== void 0 && typeof pathStep.account !== "string") {
        return false;
      }
      if (pathStep.currency !== void 0 && typeof pathStep.currency !== "string") {
        return false;
      }
      if (pathStep.issuer !== void 0 && typeof pathStep.issuer !== "string") {
        return false;
      }
      if (pathStep.account !== void 0 && pathStep.currency === void 0 && pathStep.issuer === void 0) {
        return true;
      }
      if (pathStep.currency !== void 0 || pathStep.issuer !== void 0) {
        return true;
      }
      return false;
    }
    function isPath(path) {
      if (!Array.isArray(path) || path.length === 0) {
        return false;
      }
      for (const pathStep of path) {
        if (!isPathStep(pathStep)) {
          return false;
        }
      }
      return true;
    }
    function isPaths(paths) {
      if (!(0, common_1.isArray)(paths) || paths.length === 0) {
        return false;
      }
      for (const path of paths) {
        if (!(0, common_1.isArray)(path) || path.length === 0) {
          return false;
        }
        if (!isPath(path)) {
          return false;
        }
      }
      return true;
    }
  }
});

// node_modules/xrpl/dist/npm/models/transactions/paymentChannelClaim.js
var require_paymentChannelClaim = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/paymentChannelClaim.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validatePaymentChannelClaim = exports.PaymentChannelClaimFlags = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    var PaymentChannelClaimFlags;
    (function(PaymentChannelClaimFlags2) {
      PaymentChannelClaimFlags2[PaymentChannelClaimFlags2["tfRenew"] = 65536] = "tfRenew";
      PaymentChannelClaimFlags2[PaymentChannelClaimFlags2["tfClose"] = 131072] = "tfClose";
    })(PaymentChannelClaimFlags || (exports.PaymentChannelClaimFlags = PaymentChannelClaimFlags = {}));
    function validatePaymentChannelClaim(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateCredentialsList)(tx.CredentialIDs, tx.TransactionType, true, common_1.MAX_AUTHORIZED_CREDENTIALS);
      if (tx.Channel === void 0) {
        throw new errors_1.ValidationError("PaymentChannelClaim: missing Channel");
      }
      if (typeof tx.Channel !== "string") {
        throw new errors_1.ValidationError("PaymentChannelClaim: Channel must be a string");
      }
      if (tx.Balance !== void 0 && typeof tx.Balance !== "string") {
        throw new errors_1.ValidationError("PaymentChannelClaim: Balance must be a string");
      }
      if (tx.Amount !== void 0 && typeof tx.Amount !== "string") {
        throw new errors_1.ValidationError("PaymentChannelClaim: Amount must be a string");
      }
      if (tx.Signature !== void 0 && typeof tx.Signature !== "string") {
        throw new errors_1.ValidationError("PaymentChannelClaim: Signature must be a string");
      }
      if (tx.PublicKey !== void 0 && typeof tx.PublicKey !== "string") {
        throw new errors_1.ValidationError("PaymentChannelClaim: PublicKey must be a string");
      }
    }
    exports.validatePaymentChannelClaim = validatePaymentChannelClaim;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/trustSet.js
var require_trustSet = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/trustSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTrustSet = exports.TrustSetFlags = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    var TrustSetFlags;
    (function(TrustSetFlags2) {
      TrustSetFlags2[TrustSetFlags2["tfSetfAuth"] = 65536] = "tfSetfAuth";
      TrustSetFlags2[TrustSetFlags2["tfSetNoRipple"] = 131072] = "tfSetNoRipple";
      TrustSetFlags2[TrustSetFlags2["tfClearNoRipple"] = 262144] = "tfClearNoRipple";
      TrustSetFlags2[TrustSetFlags2["tfSetFreeze"] = 1048576] = "tfSetFreeze";
      TrustSetFlags2[TrustSetFlags2["tfClearFreeze"] = 2097152] = "tfClearFreeze";
      TrustSetFlags2[TrustSetFlags2["tfSetDeepFreeze"] = 4194304] = "tfSetDeepFreeze";
      TrustSetFlags2[TrustSetFlags2["tfClearDeepFreeze"] = 8388608] = "tfClearDeepFreeze";
    })(TrustSetFlags || (exports.TrustSetFlags = TrustSetFlags = {}));
    function validateTrustSet(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      const { LimitAmount, QualityIn, QualityOut } = tx;
      if (LimitAmount === void 0) {
        throw new errors_1.ValidationError("TrustSet: missing field LimitAmount");
      }
      if (!(0, common_1.isAmount)(LimitAmount)) {
        throw new errors_1.ValidationError("TrustSet: invalid LimitAmount");
      }
      if (QualityIn !== void 0 && typeof QualityIn !== "number") {
        throw new errors_1.ValidationError("TrustSet: QualityIn must be a number");
      }
      if (QualityOut !== void 0 && typeof QualityOut !== "number") {
        throw new errors_1.ValidationError("TrustSet: QualityOut must be a number");
      }
    }
    exports.validateTrustSet = validateTrustSet;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/vaultCreate.js
var require_vaultCreate = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/vaultCreate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateVaultCreate = exports.VaultCreateFlags = exports.VaultWithdrawalPolicy = void 0;
    var errors_1 = require_errors();
    var utils_1 = require_utils8();
    var common_1 = require_common2();
    var VaultWithdrawalPolicy;
    (function(VaultWithdrawalPolicy2) {
      VaultWithdrawalPolicy2[VaultWithdrawalPolicy2["vaultStrategyFirstComeFirstServe"] = 1] = "vaultStrategyFirstComeFirstServe";
    })(VaultWithdrawalPolicy || (exports.VaultWithdrawalPolicy = VaultWithdrawalPolicy = {}));
    var VaultCreateFlags;
    (function(VaultCreateFlags2) {
      VaultCreateFlags2[VaultCreateFlags2["tfVaultPrivate"] = 65536] = "tfVaultPrivate";
      VaultCreateFlags2[VaultCreateFlags2["tfVaultShareNonTransferable"] = 131072] = "tfVaultShareNonTransferable";
    })(VaultCreateFlags || (exports.VaultCreateFlags = VaultCreateFlags = {}));
    function validateVaultCreate(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "Asset", common_1.isCurrency);
      (0, common_1.validateOptionalField)(tx, "Data", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "AssetsMaximum", common_1.isXRPLNumber);
      (0, common_1.validateOptionalField)(tx, "MPTokenMetadata", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "WithdrawalPolicy", common_1.isNumber);
      (0, common_1.validateOptionalField)(tx, "DomainID", common_1.isString);
      if (tx.Data !== void 0) {
        const dataHex = tx.Data;
        if (!(0, utils_1.isHex)(dataHex)) {
          throw new errors_1.ValidationError("VaultCreate: Data must be a valid hex string");
        }
        const dataByteLength = dataHex.length / 2;
        if (dataByteLength > common_1.VAULT_DATA_MAX_BYTE_LENGTH) {
          throw new errors_1.ValidationError(`VaultCreate: Data exceeds ${common_1.VAULT_DATA_MAX_BYTE_LENGTH} bytes (actual: ${dataByteLength})`);
        }
      }
      if (tx.MPTokenMetadata !== void 0) {
        const metaHex = tx.MPTokenMetadata;
        if (!(0, utils_1.isHex)(metaHex)) {
          throw new errors_1.ValidationError("VaultCreate: MPTokenMetadata must be a valid non-empty hex string");
        }
        const metaByteLength = metaHex.length / 2;
        if (metaByteLength > common_1.MAX_MPT_META_BYTE_LENGTH) {
          throw new errors_1.ValidationError(`VaultCreate: MPTokenMetadata exceeds ${common_1.MAX_MPT_META_BYTE_LENGTH} bytes (actual: ${metaByteLength})`);
        }
      }
      if (tx.DomainID !== void 0 && !(0, utils_1.hasFlag)(tx, VaultCreateFlags.tfVaultPrivate, "tfVaultPrivate")) {
        throw new errors_1.ValidationError("VaultCreate: Cannot set DomainID unless tfVaultPrivate flag is set.");
      }
      if (tx.MPTokenMetadata != null) {
        const validationMessages = (0, common_1.validateMPTokenMetadata)(tx.MPTokenMetadata);
        if (validationMessages.length > 0) {
          const message = [
            common_1.MPT_META_WARNING_HEADER,
            ...validationMessages.map((msg) => `- ${msg}`)
          ].join("\n");
          console.warn(message);
        }
      }
    }
    exports.validateVaultCreate = validateVaultCreate;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/XChainModifyBridge.js
var require_XChainModifyBridge = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/XChainModifyBridge.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateXChainModifyBridge = exports.XChainModifyBridgeFlags = void 0;
    var common_1 = require_common2();
    var XChainModifyBridgeFlags;
    (function(XChainModifyBridgeFlags2) {
      XChainModifyBridgeFlags2[XChainModifyBridgeFlags2["tfClearAccountCreateAmount"] = 65536] = "tfClearAccountCreateAmount";
    })(XChainModifyBridgeFlags || (exports.XChainModifyBridgeFlags = XChainModifyBridgeFlags = {}));
    function validateXChainModifyBridge(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "XChainBridge", common_1.isXChainBridge);
      (0, common_1.validateOptionalField)(tx, "SignatureReward", common_1.isAmount);
      (0, common_1.validateOptionalField)(tx, "MinAccountCreateAmount", common_1.isAmount);
    }
    exports.validateXChainModifyBridge = validateXChainModifyBridge;
  }
});

// node_modules/xrpl/dist/npm/models/utils/flags.js
var require_flags = __commonJS({
  "node_modules/xrpl/dist/npm/models/utils/flags.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseTransactionFlags = exports.convertTxFlagsToNumber = exports.setTransactionFlagsToNumber = exports.parseAccountRootFlags = void 0;
    var errors_1 = require_errors();
    var AccountRoot_1 = require_AccountRoot();
    var accountSet_1 = require_accountSet();
    var AMMClawback_1 = require_AMMClawback();
    var AMMDeposit_1 = require_AMMDeposit();
    var AMMWithdraw_1 = require_AMMWithdraw();
    var batch_1 = require_batch();
    var common_1 = require_common2();
    var MPTokenAuthorize_1 = require_MPTokenAuthorize();
    var MPTokenIssuanceCreate_1 = require_MPTokenIssuanceCreate();
    var MPTokenIssuanceSet_1 = require_MPTokenIssuanceSet();
    var NFTokenCreateOffer_1 = require_NFTokenCreateOffer();
    var NFTokenMint_1 = require_NFTokenMint();
    var offerCreate_1 = require_offerCreate();
    var payment_1 = require_payment();
    var paymentChannelClaim_1 = require_paymentChannelClaim();
    var trustSet_1 = require_trustSet();
    var vaultCreate_1 = require_vaultCreate();
    var XChainModifyBridge_1 = require_XChainModifyBridge();
    var _1 = require_utils8();
    function parseAccountRootFlags(flags2) {
      const flagsInterface = {};
      Object.values(AccountRoot_1.AccountRootFlags).forEach((flag) => {
        if (typeof flag === "string" && (0, _1.isFlagEnabled)(flags2, AccountRoot_1.AccountRootFlags[flag])) {
          flagsInterface[flag] = true;
        }
      });
      return flagsInterface;
    }
    exports.parseAccountRootFlags = parseAccountRootFlags;
    var txToFlag = {
      AccountSet: accountSet_1.AccountSetTfFlags,
      AMMClawback: AMMClawback_1.AMMClawbackFlags,
      AMMDeposit: AMMDeposit_1.AMMDepositFlags,
      AMMWithdraw: AMMWithdraw_1.AMMWithdrawFlags,
      Batch: batch_1.BatchFlags,
      MPTokenAuthorize: MPTokenAuthorize_1.MPTokenAuthorizeFlags,
      MPTokenIssuanceCreate: MPTokenIssuanceCreate_1.MPTokenIssuanceCreateFlags,
      MPTokenIssuanceSet: MPTokenIssuanceSet_1.MPTokenIssuanceSetFlags,
      NFTokenCreateOffer: NFTokenCreateOffer_1.NFTokenCreateOfferFlags,
      NFTokenMint: NFTokenMint_1.NFTokenMintFlags,
      OfferCreate: offerCreate_1.OfferCreateFlags,
      PaymentChannelClaim: paymentChannelClaim_1.PaymentChannelClaimFlags,
      Payment: payment_1.PaymentFlags,
      TrustSet: trustSet_1.TrustSetFlags,
      VaultCreate: vaultCreate_1.VaultCreateFlags,
      XChainModifyBridge: XChainModifyBridge_1.XChainModifyBridgeFlags
    };
    function isTxToFlagKey(transactionType) {
      return transactionType in txToFlag;
    }
    function setTransactionFlagsToNumber(tx) {
      console.warn("This function is deprecated. Use convertTxFlagsToNumber() instead and use the returned value to modify the Transaction.Flags from the caller.");
      if (tx.Flags) {
        tx.Flags = convertTxFlagsToNumber(tx);
      }
    }
    exports.setTransactionFlagsToNumber = setTransactionFlagsToNumber;
    function convertTxFlagsToNumber(tx) {
      const txFlags = tx.Flags;
      if (txFlags == null) {
        return 0;
      }
      if (typeof txFlags === "number") {
        return txFlags;
      }
      if (isTxToFlagKey(tx.TransactionType)) {
        const flagEnum = txToFlag[tx.TransactionType];
        return Object.keys(txFlags).reduce((resultFlags, flag) => {
          if (flagEnum[flag] == null && common_1.GlobalFlags[flag] == null) {
            throw new errors_1.ValidationError(`Invalid flag ${flag}.`);
          }
          return txFlags[flag] ? resultFlags | (flagEnum[flag] || common_1.GlobalFlags[flag]) : resultFlags;
        }, 0);
      }
      return Object.keys(txFlags).reduce((resultFlags, flag) => {
        if (common_1.GlobalFlags[flag] == null) {
          throw new errors_1.ValidationError(`Invalid flag ${flag}. Valid flags are ${JSON.stringify(common_1.GlobalFlags)}`);
        }
        return txFlags[flag] ? resultFlags | common_1.GlobalFlags[flag] : resultFlags;
      }, 0);
    }
    exports.convertTxFlagsToNumber = convertTxFlagsToNumber;
    function parseTransactionFlags(tx) {
      const flags2 = convertTxFlagsToNumber(tx);
      if (flags2 === 0) {
        return {};
      }
      const booleanFlagMap = {};
      if (isTxToFlagKey(tx.TransactionType)) {
        const transactionTypeFlags = txToFlag[tx.TransactionType];
        Object.values(transactionTypeFlags).forEach((flag) => {
          if (typeof flag === "string" && (0, _1.isFlagEnabled)(flags2, transactionTypeFlags[flag])) {
            booleanFlagMap[flag] = true;
          }
        });
      }
      Object.values(common_1.GlobalFlags).forEach((flag) => {
        if (typeof flag === "string" && (0, _1.isFlagEnabled)(flags2, common_1.GlobalFlags[flag])) {
          booleanFlagMap[flag] = true;
        }
      });
      return booleanFlagMap;
    }
    exports.parseTransactionFlags = parseTransactionFlags;
  }
});

// node_modules/xrpl/dist/npm/utils/derive.js
var require_derive = __commonJS({
  "node_modules/xrpl/dist/npm/utils/derive.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deriveXAddress = exports.deriveAddress = exports.deriveKeypair = void 0;
    var ripple_address_codec_1 = require_dist();
    var ripple_keypairs_1 = require_dist3();
    Object.defineProperty(exports, "deriveKeypair", { enumerable: true, get: function() {
      return ripple_keypairs_1.deriveKeypair;
    } });
    Object.defineProperty(exports, "deriveAddress", { enumerable: true, get: function() {
      return ripple_keypairs_1.deriveAddress;
    } });
    function deriveXAddress(options) {
      const classicAddress = (0, ripple_keypairs_1.deriveAddress)(options.publicKey);
      return (0, ripple_address_codec_1.classicAddressToXAddress)(classicAddress, options.tag, options.test);
    }
    exports.deriveXAddress = deriveXAddress;
  }
});

// node_modules/xrpl/dist/npm/utils/collections.js
var require_collections = __commonJS({
  "node_modules/xrpl/dist/npm/utils/collections.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.omitBy = exports.groupBy = void 0;
    function groupBy2(array, iteratee) {
      function predicate(acc, value, index, arrayReference) {
        const key = iteratee(value, index, arrayReference) || 0;
        const group = acc[key] || [];
        group.push(value);
        acc[key] = group;
        return acc;
      }
      return array.reduce(predicate, {});
    }
    exports.groupBy = groupBy2;
    function omitBy(obj, predicate) {
      const keys2 = Object.keys(obj);
      const keysToKeep = keys2.filter((kb) => !predicate(obj[kb], kb));
      return keysToKeep.reduce((acc, key) => {
        acc[key] = obj[key];
        return acc;
      }, {});
    }
    exports.omitBy = omitBy;
  }
});

// node_modules/xrpl/dist/npm/utils/xrpConversion.js
var require_xrpConversion = __commonJS({
  "node_modules/xrpl/dist/npm/utils/xrpConversion.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.xrpToDrops = exports.dropsToXrp = void 0;
    var bignumber_js_1 = __importDefault(require_bignumber());
    var errors_1 = require_errors();
    var DROPS_PER_XRP = 1e6;
    var MAX_FRACTION_LENGTH = 6;
    var BASE_TEN = 10;
    var SANITY_CHECK = /^-?[0-9.]+$/u;
    function dropsToXrp(dropsToConvert) {
      const drops = new bignumber_js_1.default(dropsToConvert).toString(BASE_TEN);
      if (typeof dropsToConvert === "string" && drops === "NaN") {
        throw new errors_1.ValidationError(`dropsToXrp: invalid value '${dropsToConvert}', should be a BigNumber or string-encoded number.`);
      }
      if (drops.includes(".")) {
        throw new errors_1.ValidationError(`dropsToXrp: value '${drops}' has too many decimal places.`);
      }
      if (!SANITY_CHECK.exec(drops)) {
        throw new errors_1.ValidationError(`dropsToXrp: failed sanity check - value '${drops}', does not match (^-?[0-9]+$).`);
      }
      return new bignumber_js_1.default(drops).dividedBy(DROPS_PER_XRP).toNumber();
    }
    exports.dropsToXrp = dropsToXrp;
    function xrpToDrops(xrpToConvert) {
      const xrp = new bignumber_js_1.default(xrpToConvert).toString(BASE_TEN);
      if (typeof xrpToConvert === "string" && xrp === "NaN") {
        throw new errors_1.ValidationError(`xrpToDrops: invalid value '${xrpToConvert}', should be a BigNumber or string-encoded number.`);
      }
      if (!SANITY_CHECK.exec(xrp)) {
        throw new errors_1.ValidationError(`xrpToDrops: failed sanity check - value '${xrp}', does not match (^-?[0-9.]+$).`);
      }
      const components = xrp.split(".");
      if (components.length > 2) {
        throw new errors_1.ValidationError(`xrpToDrops: failed sanity check - value '${xrp}' has too many decimal points.`);
      }
      const fraction = components[1] || "0";
      if (fraction.length > MAX_FRACTION_LENGTH) {
        throw new errors_1.ValidationError(`xrpToDrops: value '${xrp}' has too many decimal places.`);
      }
      return new bignumber_js_1.default(xrp).times(DROPS_PER_XRP).integerValue(bignumber_js_1.default.ROUND_FLOOR).toString(BASE_TEN);
    }
    exports.xrpToDrops = xrpToDrops;
  }
});

// node_modules/xrpl/dist/npm/utils/getBalanceChanges.js
var require_getBalanceChanges = __commonJS({
  "node_modules/xrpl/dist/npm/utils/getBalanceChanges.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_js_1 = __importDefault(require_bignumber());
    var collections_1 = require_collections();
    var xrpConversion_1 = require_xrpConversion();
    function normalizeNode(affectedNode) {
      const diffType = Object.keys(affectedNode)[0];
      const node = affectedNode[diffType];
      return Object.assign(Object.assign({}, node), { NodeType: diffType, LedgerEntryType: node.LedgerEntryType, LedgerIndex: node.LedgerIndex, NewFields: node.NewFields, FinalFields: node.FinalFields, PreviousFields: node.PreviousFields });
    }
    function normalizeNodes(metadata) {
      if (metadata.AffectedNodes.length === 0) {
        return [];
      }
      return metadata.AffectedNodes.map(normalizeNode);
    }
    function groupByAccount(balanceChanges) {
      const grouped = (0, collections_1.groupBy)(balanceChanges, (node) => node.account);
      return Object.entries(grouped).map(([account3, items]) => {
        return { account: account3, balances: items.map((item) => item.balance) };
      });
    }
    function getValue(balance) {
      if (typeof balance === "string") {
        return new bignumber_js_1.default(balance);
      }
      return new bignumber_js_1.default(balance.value);
    }
    function computeBalanceChange(node) {
      var _a, _b, _c;
      let value = null;
      if ((_a = node.NewFields) === null || _a === void 0 ? void 0 : _a.Balance) {
        value = getValue(node.NewFields.Balance);
      } else if (((_b = node.PreviousFields) === null || _b === void 0 ? void 0 : _b.Balance) && ((_c = node.FinalFields) === null || _c === void 0 ? void 0 : _c.Balance)) {
        value = getValue(node.FinalFields.Balance).minus(getValue(node.PreviousFields.Balance));
      }
      if (value === null || value.isZero()) {
        return null;
      }
      return value;
    }
    function getXRPQuantity(node) {
      var _a, _b, _c;
      const value = computeBalanceChange(node);
      if (value === null) {
        return null;
      }
      return {
        account: (_b = (_a = node.FinalFields) === null || _a === void 0 ? void 0 : _a.Account) !== null && _b !== void 0 ? _b : (_c = node.NewFields) === null || _c === void 0 ? void 0 : _c.Account,
        balance: {
          currency: "XRP",
          value: (0, xrpConversion_1.dropsToXrp)(value).toString()
        }
      };
    }
    function flipTrustlinePerspective(balanceChange) {
      const negatedBalance = new bignumber_js_1.default(balanceChange.balance.value).negated();
      return {
        account: balanceChange.balance.issuer,
        balance: {
          issuer: balanceChange.account,
          currency: balanceChange.balance.currency,
          value: negatedBalance.toString()
        }
      };
    }
    function getTrustlineQuantity(node) {
      var _a, _b;
      const value = computeBalanceChange(node);
      if (value === null) {
        return null;
      }
      const fields = node.NewFields == null ? node.FinalFields : node.NewFields;
      const result = {
        account: (_a = fields === null || fields === void 0 ? void 0 : fields.LowLimit) === null || _a === void 0 ? void 0 : _a.issuer,
        balance: {
          issuer: (_b = fields === null || fields === void 0 ? void 0 : fields.HighLimit) === null || _b === void 0 ? void 0 : _b.issuer,
          currency: (fields === null || fields === void 0 ? void 0 : fields.Balance).currency,
          value: value.toString()
        }
      };
      return [result, flipTrustlinePerspective(result)];
    }
    function getBalanceChanges(metadata) {
      const quantities = normalizeNodes(metadata).map((node) => {
        if (node.LedgerEntryType === "AccountRoot") {
          const xrpQuantity = getXRPQuantity(node);
          if (xrpQuantity == null) {
            return [];
          }
          return [xrpQuantity];
        }
        if (node.LedgerEntryType === "RippleState") {
          const trustlineQuantity = getTrustlineQuantity(node);
          if (trustlineQuantity == null) {
            return [];
          }
          return trustlineQuantity;
        }
        return [];
      });
      return groupByAccount(quantities.flat());
    }
    exports.default = getBalanceChanges;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/metadata.js
var require_metadata = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/metadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isDeletedNode = exports.isModifiedNode = exports.isCreatedNode = void 0;
    function isCreatedNode(node) {
      return Object.prototype.hasOwnProperty.call(node, `CreatedNode`);
    }
    exports.isCreatedNode = isCreatedNode;
    function isModifiedNode(node) {
      return Object.prototype.hasOwnProperty.call(node, `ModifiedNode`);
    }
    exports.isModifiedNode = isModifiedNode;
    function isDeletedNode(node) {
      return Object.prototype.hasOwnProperty.call(node, `DeletedNode`);
    }
    exports.isDeletedNode = isDeletedNode;
  }
});

// node_modules/xrpl/dist/npm/utils/getNFTokenID.js
var require_getNFTokenID = __commonJS({
  "node_modules/xrpl/dist/npm/utils/getNFTokenID.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ripple_binary_codec_1 = require_dist2();
    var metadata_1 = require_metadata();
    function ensureDecodedMeta(meta) {
      if (typeof meta === "string") {
        return (0, ripple_binary_codec_1.decode)(meta);
      }
      return meta;
    }
    function getNFTokenID(meta) {
      if (typeof meta !== "string" && (meta === null || meta === void 0 ? void 0 : meta.AffectedNodes) === void 0) {
        throw new TypeError(`Unable to parse the parameter given to getNFTokenID.
      'meta' must be the metadata from an NFTokenMint transaction. Received ${JSON.stringify(meta)} instead.`);
      }
      const decodedMeta = ensureDecodedMeta(meta);
      const affectedNodes = decodedMeta.AffectedNodes.filter((node) => {
        var _a;
        if ((0, metadata_1.isCreatedNode)(node)) {
          return node.CreatedNode.LedgerEntryType === "NFTokenPage";
        }
        if ((0, metadata_1.isModifiedNode)(node)) {
          return node.ModifiedNode.LedgerEntryType === "NFTokenPage" && Boolean((_a = node.ModifiedNode.PreviousFields) === null || _a === void 0 ? void 0 : _a.NFTokens);
        }
        return false;
      });
      const previousTokenIDSet = new Set(affectedNodes.flatMap((node) => {
        var _a;
        const nftokens = (0, metadata_1.isModifiedNode)(node) ? (_a = node.ModifiedNode.PreviousFields) === null || _a === void 0 ? void 0 : _a.NFTokens : [];
        return nftokens.map((token) => token.NFToken.NFTokenID);
      }).filter((id) => Boolean(id)));
      const finalTokenIDs = affectedNodes.flatMap((node) => {
        var _a, _b, _c, _d, _e2, _f;
        return ((_f = (_c = (_b = (_a = node.ModifiedNode) === null || _a === void 0 ? void 0 : _a.FinalFields) === null || _b === void 0 ? void 0 : _b.NFTokens) !== null && _c !== void 0 ? _c : (_e2 = (_d = node.CreatedNode) === null || _d === void 0 ? void 0 : _d.NewFields) === null || _e2 === void 0 ? void 0 : _e2.NFTokens) !== null && _f !== void 0 ? _f : []).map((token) => token.NFToken.NFTokenID);
      }).filter((nftokenID2) => Boolean(nftokenID2));
      const nftokenID = finalTokenIDs.find((id) => !previousTokenIDSet.has(id));
      return nftokenID;
    }
    exports.default = getNFTokenID;
  }
});

// node_modules/xrpl/dist/npm/utils/getXChainClaimID.js
var require_getXChainClaimID = __commonJS({
  "node_modules/xrpl/dist/npm/utils/getXChainClaimID.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ripple_binary_codec_1 = require_dist2();
    var metadata_1 = require_metadata();
    function ensureDecodedMeta(meta) {
      if (typeof meta === "string") {
        return (0, ripple_binary_codec_1.decode)(meta);
      }
      return meta;
    }
    function getXChainClaimID(meta) {
      if (typeof meta !== "string" && (meta === null || meta === void 0 ? void 0 : meta.AffectedNodes) === void 0) {
        throw new TypeError(`Unable to parse the parameter given to getXChainClaimID.
      'meta' must be the metadata from an XChainCreateClaimID transaction. Received ${JSON.stringify(meta)} instead.`);
      }
      const decodedMeta = ensureDecodedMeta(meta);
      if (!decodedMeta.TransactionResult) {
        throw new TypeError("Cannot get XChainClaimID from un-validated transaction");
      }
      if (decodedMeta.TransactionResult !== "tesSUCCESS") {
        return void 0;
      }
      const createdNode = decodedMeta.AffectedNodes.find((node) => (0, metadata_1.isCreatedNode)(node) && node.CreatedNode.LedgerEntryType === "XChainOwnedClaimID");
      return createdNode.CreatedNode.NewFields.XChainClaimID;
    }
    exports.default = getXChainClaimID;
  }
});

// node_modules/xrpl/dist/npm/utils/hashes/HashPrefix.js
var require_HashPrefix = __commonJS({
  "node_modules/xrpl/dist/npm/utils/hashes/HashPrefix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var HashPrefix;
    (function(HashPrefix2) {
      HashPrefix2[HashPrefix2["TRANSACTION_ID"] = 1415073280] = "TRANSACTION_ID";
      HashPrefix2[HashPrefix2["TRANSACTION_NODE"] = 1397638144] = "TRANSACTION_NODE";
      HashPrefix2[HashPrefix2["INNER_NODE"] = 1296649728] = "INNER_NODE";
      HashPrefix2[HashPrefix2["LEAF_NODE"] = 1296846336] = "LEAF_NODE";
      HashPrefix2[HashPrefix2["TRANSACTION_SIGN"] = 1398036480] = "TRANSACTION_SIGN";
      HashPrefix2[HashPrefix2["TRANSACTION_SIGN_TESTNET"] = 1937012736] = "TRANSACTION_SIGN_TESTNET";
      HashPrefix2[HashPrefix2["TRANSACTION_MULTISIGN"] = 1397576704] = "TRANSACTION_MULTISIGN";
      HashPrefix2[HashPrefix2["LEDGER"] = 1280791040] = "LEDGER";
    })(HashPrefix || (HashPrefix = {}));
    exports.default = HashPrefix;
  }
});

// node_modules/xrpl/dist/npm/utils/hashes/sha512Half.js
var require_sha512Half = __commonJS({
  "node_modules/xrpl/dist/npm/utils/hashes/sha512Half.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var sha512_1 = require_browser4();
    var utils_1 = require_browser2();
    var HASH_BYTES = 32;
    function sha512Half(hex2) {
      return (0, utils_1.bytesToHex)((0, sha512_1.sha512)((0, utils_1.hexToBytes)(hex2)).slice(0, HASH_BYTES));
    }
    exports.default = sha512Half;
  }
});

// node_modules/xrpl/dist/npm/utils/hashes/SHAMap/node.js
var require_node = __commonJS({
  "node_modules/xrpl/dist/npm/utils/hashes/SHAMap/node.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Node = exports.NodeType = void 0;
    var NodeType;
    (function(NodeType2) {
      NodeType2[NodeType2["INNER"] = 1] = "INNER";
      NodeType2[NodeType2["TRANSACTION_NO_METADATA"] = 2] = "TRANSACTION_NO_METADATA";
      NodeType2[NodeType2["TRANSACTION_METADATA"] = 3] = "TRANSACTION_METADATA";
      NodeType2[NodeType2["ACCOUNT_STATE"] = 4] = "ACCOUNT_STATE";
    })(NodeType || (exports.NodeType = NodeType = {}));
    var Node = class {
    };
    exports.Node = Node;
  }
});

// node_modules/xrpl/dist/npm/utils/hashes/SHAMap/LeafNode.js
var require_LeafNode = __commonJS({
  "node_modules/xrpl/dist/npm/utils/hashes/SHAMap/LeafNode.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var errors_1 = require_errors();
    var HashPrefix_1 = __importDefault(require_HashPrefix());
    var sha512Half_1 = __importDefault(require_sha512Half());
    var node_1 = require_node();
    var HEX = 16;
    var LeafNode = class extends node_1.Node {
      constructor(tag, data, type) {
        super();
        this.tag = tag;
        this.type = type;
        this.data = data;
      }
      get hash() {
        switch (this.type) {
          case node_1.NodeType.ACCOUNT_STATE: {
            const leafPrefix = HashPrefix_1.default.LEAF_NODE.toString(HEX);
            return (0, sha512Half_1.default)(leafPrefix + this.data + this.tag);
          }
          case node_1.NodeType.TRANSACTION_NO_METADATA: {
            const txIDPrefix = HashPrefix_1.default.TRANSACTION_ID.toString(HEX);
            return (0, sha512Half_1.default)(txIDPrefix + this.data);
          }
          case node_1.NodeType.TRANSACTION_METADATA: {
            const txNodePrefix = HashPrefix_1.default.TRANSACTION_NODE.toString(HEX);
            return (0, sha512Half_1.default)(txNodePrefix + this.data + this.tag);
          }
          default:
            throw new errors_1.XrplError("Tried to hash a SHAMap node of unknown type.");
        }
      }
      addItem(tag, node) {
        throw new errors_1.XrplError("Cannot call addItem on a LeafNode");
        this.addItem(tag, node);
      }
    };
    exports.default = LeafNode;
  }
});

// node_modules/xrpl/dist/npm/utils/hashes/SHAMap/InnerNode.js
var require_InnerNode = __commonJS({
  "node_modules/xrpl/dist/npm/utils/hashes/SHAMap/InnerNode.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var errors_1 = require_errors();
    var HashPrefix_1 = __importDefault(require_HashPrefix());
    var sha512Half_1 = __importDefault(require_sha512Half());
    var LeafNode_1 = __importDefault(require_LeafNode());
    var node_1 = require_node();
    var HEX_ZERO = "0000000000000000000000000000000000000000000000000000000000000000";
    var SLOT_MAX = 15;
    var HEX = 16;
    var InnerNode = class _InnerNode extends node_1.Node {
      constructor(depth = 0) {
        super();
        this.leaves = {};
        this.type = node_1.NodeType.INNER;
        this.depth = depth;
        this.empty = true;
      }
      get hash() {
        if (this.empty) {
          return HEX_ZERO;
        }
        let hex2 = "";
        for (let iter = 0; iter <= SLOT_MAX; iter++) {
          const child = this.leaves[iter];
          const hash2 = child == null ? HEX_ZERO : child.hash;
          hex2 += hash2;
        }
        const prefix2 = HashPrefix_1.default.INNER_NODE.toString(HEX);
        return (0, sha512Half_1.default)(prefix2 + hex2);
      }
      addItem(tag, node) {
        const existingNode = this.getNode(parseInt(tag[this.depth], HEX));
        if (existingNode === void 0) {
          this.setNode(parseInt(tag[this.depth], HEX), node);
          return;
        }
        if (existingNode instanceof _InnerNode) {
          existingNode.addItem(tag, node);
        } else if (existingNode instanceof LeafNode_1.default) {
          if (existingNode.tag === tag) {
            throw new errors_1.XrplError("Tried to add a node to a SHAMap that was already in there.");
          } else {
            const newInnerNode = new _InnerNode(this.depth + 1);
            newInnerNode.addItem(existingNode.tag, existingNode);
            newInnerNode.addItem(tag, node);
            this.setNode(parseInt(tag[this.depth], HEX), newInnerNode);
          }
        }
      }
      setNode(slot, node) {
        if (slot < 0 || slot > SLOT_MAX) {
          throw new errors_1.XrplError("Invalid slot: slot must be between 0-15.");
        }
        this.leaves[slot] = node;
        this.empty = false;
      }
      getNode(slot) {
        if (slot < 0 || slot > SLOT_MAX) {
          throw new errors_1.XrplError("Invalid slot: slot must be between 0-15.");
        }
        return this.leaves[slot];
      }
    };
    exports.default = InnerNode;
  }
});

// node_modules/xrpl/dist/npm/utils/hashes/SHAMap/index.js
var require_SHAMap = __commonJS({
  "node_modules/xrpl/dist/npm/utils/hashes/SHAMap/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m, k2);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var InnerNode_1 = __importDefault(require_InnerNode());
    var LeafNode_1 = __importDefault(require_LeafNode());
    var SHAMap = class {
      constructor() {
        this.root = new InnerNode_1.default(0);
      }
      get hash() {
        return this.root.hash;
      }
      addItem(tag, data, type) {
        this.root.addItem(tag, new LeafNode_1.default(tag, data, type));
      }
    };
    __exportStar(require_node(), exports);
    exports.default = SHAMap;
  }
});

// node_modules/xrpl/dist/npm/utils/hashes/hashLedger.js
var require_hashLedger = __commonJS({
  "node_modules/xrpl/dist/npm/utils/hashes/hashLedger.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m, k2);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v3) {
      Object.defineProperty(o, "default", { enumerable: true, value: v3 });
    } : function(o, v3) {
      o["default"] = v3;
    });
    var __importStar = exports && exports.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule) return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k2 in mod2) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k2)) __createBinding(result, mod2, k2);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashStateTree = exports.hashTxTree = exports.hashLedgerHeader = exports.hashSignedTx = void 0;
    var utils_1 = require_browser2();
    var bignumber_js_1 = __importDefault(require_bignumber());
    var ripple_binary_codec_1 = require_dist2();
    var errors_1 = require_errors();
    var common_1 = require_common2();
    var utils_2 = require_utils8();
    var HashPrefix_1 = __importDefault(require_HashPrefix());
    var sha512Half_1 = __importDefault(require_sha512Half());
    var SHAMap_1 = __importStar(require_SHAMap());
    var HEX = 16;
    function intToHex(integer, byteLength) {
      const foo = Number(integer).toString(HEX).padStart(byteLength * 2, "0");
      return foo;
    }
    function bigintToHex(integerString, byteLength) {
      const hex2 = new bignumber_js_1.default(integerString).toString(HEX);
      return hex2.padStart(byteLength * 2, "0");
    }
    function addLengthPrefix(hex2) {
      const length = hex2.length / 2;
      if (length <= 192) {
        return (0, utils_1.bytesToHex)([length]) + hex2;
      }
      if (length <= 12480) {
        const prefix2 = length - 193;
        return (0, utils_1.bytesToHex)([193 + (prefix2 >>> 8), prefix2 & 255]) + hex2;
      }
      if (length <= 918744) {
        const prefix2 = length - 12481;
        return (0, utils_1.bytesToHex)([
          241 + (prefix2 >>> 16),
          prefix2 >>> 8 & 255,
          prefix2 & 255
        ]) + hex2;
      }
      throw new errors_1.XrplError("Variable integer overflow.");
    }
    function hashSignedTx(tx) {
      let txBlob;
      let txObject;
      if (typeof tx === "string") {
        txBlob = tx;
        txObject = (0, ripple_binary_codec_1.decode)(tx);
      } else {
        txBlob = (0, ripple_binary_codec_1.encode)(tx);
        txObject = tx;
      }
      if (txObject.TxnSignature === void 0 && txObject.Signers === void 0 && txObject.SigningPubKey === void 0 && !(0, utils_2.hasFlag)(txObject, common_1.GlobalFlags.tfInnerBatchTxn, "tfInnerBatchTxn")) {
        throw new errors_1.ValidationError("The transaction must be signed to hash it.");
      }
      const prefix2 = HashPrefix_1.default.TRANSACTION_ID.toString(16).toUpperCase();
      return (0, sha512Half_1.default)(prefix2.concat(txBlob));
    }
    exports.hashSignedTx = hashSignedTx;
    function hashLedgerHeader(ledgerHeader) {
      const prefix2 = HashPrefix_1.default.LEDGER.toString(HEX).toUpperCase();
      const ledger = prefix2 + intToHex(Number(ledgerHeader.ledger_index), 4) + bigintToHex(ledgerHeader.total_coins, 8) + ledgerHeader.parent_hash + ledgerHeader.transaction_hash + ledgerHeader.account_hash + intToHex(ledgerHeader.parent_close_time, 4) + intToHex(ledgerHeader.close_time, 4) + intToHex(ledgerHeader.close_time_resolution, 1) + intToHex(ledgerHeader.close_flags, 1);
      return (0, sha512Half_1.default)(ledger);
    }
    exports.hashLedgerHeader = hashLedgerHeader;
    function hashTxTree(transactions) {
      var _a;
      const shamap = new SHAMap_1.default();
      for (const txJSON of transactions) {
        const txBlobHex = (0, ripple_binary_codec_1.encode)(txJSON);
        const metaHex = (0, ripple_binary_codec_1.encode)((_a = txJSON.metaData) !== null && _a !== void 0 ? _a : {});
        const txHash = hashSignedTx(txBlobHex);
        const data = addLengthPrefix(txBlobHex) + addLengthPrefix(metaHex);
        shamap.addItem(txHash, data, SHAMap_1.NodeType.TRANSACTION_METADATA);
      }
      return shamap.hash;
    }
    exports.hashTxTree = hashTxTree;
    function hashStateTree(entries) {
      const shamap = new SHAMap_1.default();
      entries.forEach((ledgerEntry) => {
        const data = (0, ripple_binary_codec_1.encode)(ledgerEntry);
        shamap.addItem(ledgerEntry.index, data, SHAMap_1.NodeType.ACCOUNT_STATE);
      });
      return shamap.hash;
    }
    exports.hashStateTree = hashStateTree;
    function computeTransactionHash(ledger, options) {
      const { transaction_hash } = ledger;
      if (!options.computeTreeHashes) {
        return transaction_hash;
      }
      if (ledger.transactions == null) {
        throw new errors_1.ValidationError("transactions is missing from the ledger");
      }
      const transactionHash = hashTxTree(ledger.transactions);
      if (transaction_hash !== transactionHash) {
        throw new errors_1.ValidationError("transactionHash in header does not match computed hash of transactions", {
          transactionHashInHeader: transaction_hash,
          computedHashOfTransactions: transactionHash
        });
      }
      return transactionHash;
    }
    function computeStateHash(ledger, options) {
      const { account_hash } = ledger;
      if (!options.computeTreeHashes) {
        return account_hash;
      }
      if (ledger.accountState == null) {
        throw new errors_1.ValidationError("accountState is missing from the ledger");
      }
      const stateHash = hashStateTree(ledger.accountState);
      if (account_hash !== stateHash) {
        throw new errors_1.ValidationError("stateHash in header does not match computed hash of state");
      }
      return stateHash;
    }
    function hashLedger(ledger, options = {}) {
      const subhashes = {
        transaction_hash: computeTransactionHash(ledger, options),
        account_hash: computeStateHash(ledger, options)
      };
      return hashLedgerHeader(Object.assign(Object.assign({}, ledger), subhashes));
    }
    exports.default = hashLedger;
  }
});

// node_modules/xrpl/dist/npm/utils/hashes/ledgerSpaces.js
var require_ledgerSpaces = __commonJS({
  "node_modules/xrpl/dist/npm/utils/hashes/ledgerSpaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ledgerSpaces = {
      account: "a",
      dirNode: "d",
      generatorMap: "g",
      rippleState: "r",
      offer: "o",
      ownerDir: "O",
      bookDir: "B",
      contract: "c",
      skipList: "s",
      escrow: "u",
      amendment: "f",
      feeSettings: "e",
      ticket: "T",
      signerList: "S",
      paychan: "x",
      check: "C",
      depositPreauth: "p"
    };
    exports.default = ledgerSpaces;
  }
});

// node_modules/xrpl/dist/npm/utils/hashes/index.js
var require_hashes2 = __commonJS({
  "node_modules/xrpl/dist/npm/utils/hashes/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m, k2);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v3) {
      Object.defineProperty(o, "default", { enumerable: true, value: v3 });
    } : function(o, v3) {
      o["default"] = v3;
    });
    var __importStar = exports && exports.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule) return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k2 in mod2) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k2)) __createBinding(result, mod2, k2);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashTxTree = exports.hashStateTree = exports.hashLedger = exports.hashSignedTx = exports.hashLedgerHeader = exports.hashPaymentChannel = exports.hashEscrow = exports.hashTrustline = exports.hashOfferId = exports.hashSignerListId = exports.hashAccountRoot = exports.hashTx = void 0;
    var utils_1 = require_browser2();
    var bignumber_js_1 = __importDefault(require_bignumber());
    var ripple_address_codec_1 = require_dist();
    var hashLedger_1 = __importStar(require_hashLedger());
    exports.hashLedger = hashLedger_1.default;
    Object.defineProperty(exports, "hashLedgerHeader", { enumerable: true, get: function() {
      return hashLedger_1.hashLedgerHeader;
    } });
    Object.defineProperty(exports, "hashSignedTx", { enumerable: true, get: function() {
      return hashLedger_1.hashSignedTx;
    } });
    Object.defineProperty(exports, "hashTxTree", { enumerable: true, get: function() {
      return hashLedger_1.hashTxTree;
    } });
    Object.defineProperty(exports, "hashStateTree", { enumerable: true, get: function() {
      return hashLedger_1.hashStateTree;
    } });
    var HashPrefix_1 = __importDefault(require_HashPrefix());
    var ledgerSpaces_1 = __importDefault(require_ledgerSpaces());
    var sha512Half_1 = __importDefault(require_sha512Half());
    var HEX = 16;
    var BYTE_LENGTH = 4;
    function addressToHex(address) {
      return (0, utils_1.bytesToHex)((0, ripple_address_codec_1.decodeAccountID)(address));
    }
    function ledgerSpaceHex(name) {
      return ledgerSpaces_1.default[name].charCodeAt(0).toString(HEX).padStart(4, "0");
    }
    var MASK = 255;
    function currencyToHex(currency) {
      if (currency.length !== 3) {
        return currency;
      }
      const bytes3 = Array(20).fill(0);
      bytes3[12] = currency.charCodeAt(0) & MASK;
      bytes3[13] = currency.charCodeAt(1) & MASK;
      bytes3[14] = currency.charCodeAt(2) & MASK;
      return (0, utils_1.bytesToHex)(Uint8Array.from(bytes3));
    }
    function hashTx(txBlobHex) {
      const prefix2 = HashPrefix_1.default.TRANSACTION_SIGN.toString(HEX).toUpperCase();
      return (0, sha512Half_1.default)(prefix2 + txBlobHex);
    }
    exports.hashTx = hashTx;
    function hashAccountRoot(address) {
      return (0, sha512Half_1.default)(ledgerSpaceHex("account") + addressToHex(address));
    }
    exports.hashAccountRoot = hashAccountRoot;
    function hashSignerListId(address) {
      return (0, sha512Half_1.default)(`${ledgerSpaceHex("signerList") + addressToHex(address)}00000000`);
    }
    exports.hashSignerListId = hashSignerListId;
    function hashOfferId(address, sequence) {
      const hexPrefix = ledgerSpaces_1.default.offer.charCodeAt(0).toString(HEX).padStart(2, "0");
      const hexSequence = sequence.toString(HEX).padStart(8, "0");
      const prefix2 = `00${hexPrefix}`;
      return (0, sha512Half_1.default)(prefix2 + addressToHex(address) + hexSequence);
    }
    exports.hashOfferId = hashOfferId;
    function hashTrustline(address1, address2, currency) {
      const address1Hex = addressToHex(address1);
      const address2Hex = addressToHex(address2);
      const swap = new bignumber_js_1.default(address1Hex, 16).isGreaterThan(new bignumber_js_1.default(address2Hex, 16));
      const lowAddressHex = swap ? address2Hex : address1Hex;
      const highAddressHex = swap ? address1Hex : address2Hex;
      const prefix2 = ledgerSpaceHex("rippleState");
      return (0, sha512Half_1.default)(prefix2 + lowAddressHex + highAddressHex + currencyToHex(currency));
    }
    exports.hashTrustline = hashTrustline;
    function hashEscrow(address, sequence) {
      return (0, sha512Half_1.default)(ledgerSpaceHex("escrow") + addressToHex(address) + sequence.toString(HEX).padStart(BYTE_LENGTH * 2, "0"));
    }
    exports.hashEscrow = hashEscrow;
    function hashPaymentChannel(address, dstAddress, sequence) {
      return (0, sha512Half_1.default)(ledgerSpaceHex("paychan") + addressToHex(address) + addressToHex(dstAddress) + sequence.toString(HEX).padStart(BYTE_LENGTH * 2, "0"));
    }
    exports.hashPaymentChannel = hashPaymentChannel;
  }
});

// node_modules/xrpl/dist/npm/utils/parseNFTokenID.js
var require_parseNFTokenID = __commonJS({
  "node_modules/xrpl/dist/npm/utils/parseNFTokenID.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_browser2();
    var bignumber_js_1 = __importDefault(require_bignumber());
    var ripple_address_codec_1 = require_dist();
    var errors_1 = require_errors();
    function unscrambleTaxon(taxon, tokenSeq) {
      const seed = 384160001;
      const increment = 2459;
      const max3 = 4294967296;
      const scramble = new bignumber_js_1.default(seed).multipliedBy(tokenSeq).modulo(max3).plus(increment).modulo(max3).toNumber();
      return (taxon ^ scramble) >>> 0;
    }
    function parseNFTokenID(nftokenID) {
      const expectedLength = 64;
      if (nftokenID.length !== expectedLength) {
        throw new errors_1.XrplError(`Attempting to parse a nftokenID with length ${nftokenID.length}
    , but expected a token with length ${expectedLength}`);
      }
      const scrambledTaxon = new bignumber_js_1.default(nftokenID.substring(48, 56), 16).toNumber();
      const sequence = new bignumber_js_1.default(nftokenID.substring(56, 64), 16).toNumber();
      const NFTokenIDData = {
        NFTokenID: nftokenID,
        Flags: new bignumber_js_1.default(nftokenID.substring(0, 4), 16).toNumber(),
        TransferFee: new bignumber_js_1.default(nftokenID.substring(4, 8), 16).toNumber(),
        Issuer: (0, ripple_address_codec_1.encodeAccountID)((0, utils_1.hexToBytes)(nftokenID.substring(8, 48))),
        Taxon: unscrambleTaxon(scrambledTaxon, sequence),
        Sequence: sequence
      };
      return NFTokenIDData;
    }
    exports.default = parseNFTokenID;
  }
});

// node_modules/xrpl/dist/npm/utils/quality.js
var require_quality2 = __commonJS({
  "node_modules/xrpl/dist/npm/utils/quality.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.percentToQuality = exports.transferRateToDecimal = exports.qualityToDecimal = exports.decimalToQuality = exports.percentToTransferRate = exports.decimalToTransferRate = void 0;
    var bignumber_js_1 = __importDefault(require_bignumber());
    var errors_1 = require_errors();
    var BASE_TEN = 10;
    var ONE_BILLION = "1000000000";
    var TWO_BILLION = "2000000000";
    function percentToDecimal(percent) {
      if (!percent.endsWith("%")) {
        throw new errors_1.ValidationError(`Value ${percent} must end with %`);
      }
      const split2 = percent.split("%").filter((str) => str !== "");
      if (split2.length !== 1) {
        throw new errors_1.ValidationError(`Value ${percent} contains too many % signs`);
      }
      return new bignumber_js_1.default(split2[0]).dividedBy("100").toString(BASE_TEN);
    }
    function decimalToTransferRate(decimal) {
      const rate = new bignumber_js_1.default(decimal).times(ONE_BILLION).plus(ONE_BILLION);
      if (rate.isLessThan(ONE_BILLION) || rate.isGreaterThan(TWO_BILLION)) {
        throw new errors_1.ValidationError(`Decimal value must be between 0 and 1.00.`);
      }
      const billionths = rate.toString(BASE_TEN);
      if (billionths === ONE_BILLION) {
        return 0;
      }
      if (billionths === "NaN") {
        throw new errors_1.ValidationError(`Value is not a number`);
      }
      if (billionths.includes(".")) {
        throw new errors_1.ValidationError(`Decimal exceeds maximum precision.`);
      }
      return Number(billionths);
    }
    exports.decimalToTransferRate = decimalToTransferRate;
    function percentToTransferRate(percent) {
      return decimalToTransferRate(percentToDecimal(percent));
    }
    exports.percentToTransferRate = percentToTransferRate;
    function decimalToQuality(decimal) {
      const rate = new bignumber_js_1.default(decimal).times(ONE_BILLION);
      const billionths = rate.toString(BASE_TEN);
      if (billionths === "NaN") {
        throw new errors_1.ValidationError(`Value is not a number`);
      }
      if (billionths.includes("-")) {
        throw new errors_1.ValidationError("Cannot have negative Quality");
      }
      if (billionths === ONE_BILLION) {
        return 0;
      }
      if (billionths.includes(".")) {
        throw new errors_1.ValidationError(`Decimal exceeds maximum precision.`);
      }
      return Number(billionths);
    }
    exports.decimalToQuality = decimalToQuality;
    function qualityToDecimal(quality) {
      if (!Number.isInteger(quality)) {
        throw new errors_1.ValidationError("Quality must be an integer");
      }
      if (quality < 0) {
        throw new errors_1.ValidationError("Negative quality not allowed");
      }
      if (quality === 0) {
        return "1";
      }
      const decimal = new bignumber_js_1.default(quality).dividedBy(ONE_BILLION);
      return decimal.toString(BASE_TEN);
    }
    exports.qualityToDecimal = qualityToDecimal;
    function transferRateToDecimal(rate) {
      if (!Number.isInteger(rate)) {
        throw new errors_1.ValidationError("Error decoding, transfer Rate must be an integer");
      }
      if (rate === 0) {
        return "0";
      }
      const decimal = new bignumber_js_1.default(rate).minus(ONE_BILLION).dividedBy(ONE_BILLION);
      if (decimal.isLessThan(0)) {
        throw new errors_1.ValidationError("Error decoding, negative transfer rate");
      }
      return decimal.toString(BASE_TEN);
    }
    exports.transferRateToDecimal = transferRateToDecimal;
    function percentToQuality(percent) {
      return decimalToQuality(percentToDecimal(percent));
    }
    exports.percentToQuality = percentToQuality;
  }
});

// node_modules/xrpl/dist/npm/utils/signPaymentChannelClaim.js
var require_signPaymentChannelClaim = __commonJS({
  "node_modules/xrpl/dist/npm/utils/signPaymentChannelClaim.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ripple_binary_codec_1 = require_dist2();
    var ripple_keypairs_1 = require_dist3();
    var xrpConversion_1 = require_xrpConversion();
    function signPaymentChannelClaim(channel, xrpAmount, privateKey) {
      const signingData = (0, ripple_binary_codec_1.encodeForSigningClaim)({
        channel,
        amount: (0, xrpConversion_1.xrpToDrops)(xrpAmount)
      });
      return (0, ripple_keypairs_1.sign)(signingData, privateKey);
    }
    exports.default = signPaymentChannelClaim;
  }
});

// node_modules/xrpl/dist/npm/utils/stringConversion.js
var require_stringConversion = __commonJS({
  "node_modules/xrpl/dist/npm/utils/stringConversion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertStringToHex = exports.convertHexToString = void 0;
    var utils_1 = require_browser2();
    function convertStringToHex(string) {
      return (0, utils_1.stringToHex)(string);
    }
    exports.convertStringToHex = convertStringToHex;
    function convertHexToString(hex2, encoding = "utf8") {
      return (0, utils_1.hexToString)(hex2, encoding);
    }
    exports.convertHexToString = convertHexToString;
  }
});

// node_modules/xrpl/dist/npm/utils/timeConversion.js
var require_timeConversion = __commonJS({
  "node_modules/xrpl/dist/npm/utils/timeConversion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isoTimeToRippleTime = exports.rippleTimeToISOTime = exports.unixTimeToRippleTime = exports.rippleTimeToUnixTime = void 0;
    var RIPPLE_EPOCH_DIFF = 946684800;
    function rippleTimeToUnixTime(rpepoch) {
      return (rpepoch + RIPPLE_EPOCH_DIFF) * 1e3;
    }
    exports.rippleTimeToUnixTime = rippleTimeToUnixTime;
    function unixTimeToRippleTime(timestamp2) {
      return Math.round(timestamp2 / 1e3) - RIPPLE_EPOCH_DIFF;
    }
    exports.unixTimeToRippleTime = unixTimeToRippleTime;
    function rippleTimeToISOTime(rippleTime) {
      return new Date(rippleTimeToUnixTime(rippleTime)).toISOString();
    }
    exports.rippleTimeToISOTime = rippleTimeToISOTime;
    function isoTimeToRippleTime(iso8601) {
      const isoDate = typeof iso8601 === "string" ? new Date(iso8601) : iso8601;
      return unixTimeToRippleTime(isoDate.getTime());
    }
    exports.isoTimeToRippleTime = isoTimeToRippleTime;
  }
});

// node_modules/xrpl/dist/npm/utils/verifyPaymentChannelClaim.js
var require_verifyPaymentChannelClaim = __commonJS({
  "node_modules/xrpl/dist/npm/utils/verifyPaymentChannelClaim.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ripple_binary_codec_1 = require_dist2();
    var ripple_keypairs_1 = require_dist3();
    var xrpConversion_1 = require_xrpConversion();
    function verifyPaymentChannelClaim(channel, xrpAmount, signature, publicKey2) {
      const signingData = (0, ripple_binary_codec_1.encodeForSigningClaim)({
        channel,
        amount: (0, xrpConversion_1.xrpToDrops)(xrpAmount)
      });
      return (0, ripple_keypairs_1.verify)(signingData, signature, publicKey2);
    }
    exports.default = verifyPaymentChannelClaim;
  }
});

// node_modules/xrpl/dist/npm/utils/index.js
var require_utils9 = __commonJS({
  "node_modules/xrpl/dist/npm/utils/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getXChainClaimID = exports.parseNFTokenID = exports.getNFTokenID = exports.encodeForSigningClaim = exports.encodeForSigning = exports.encodeForMultiSigning = exports.decode = exports.encode = exports.decodeXAddress = exports.encodeXAddress = exports.decodeAccountPublic = exports.encodeAccountPublic = exports.decodeNodePublic = exports.encodeNodePublic = exports.decodeAccountID = exports.encodeAccountID = exports.decodeSeed = exports.encodeSeed = exports.isValidClassicAddress = exports.isValidXAddress = exports.xAddressToClassicAddress = exports.classicAddressToXAddress = exports.convertHexToString = exports.convertStringToHex = exports.verifyPaymentChannelClaim = exports.verifyKeypairSignature = exports.signPaymentChannelClaim = exports.deriveXAddress = exports.deriveAddress = exports.deriveKeypair = exports.hashes = exports.isValidAddress = exports.isValidSecret = exports.qualityToDecimal = exports.transferRateToDecimal = exports.decimalToTransferRate = exports.percentToTransferRate = exports.decimalToQuality = exports.percentToQuality = exports.unixTimeToRippleTime = exports.rippleTimeToUnixTime = exports.isoTimeToRippleTime = exports.rippleTimeToISOTime = exports.hasNextPage = exports.xrpToDrops = exports.dropsToXrp = exports.getBalanceChanges = void 0;
    var ripple_address_codec_1 = require_dist();
    Object.defineProperty(exports, "classicAddressToXAddress", { enumerable: true, get: function() {
      return ripple_address_codec_1.classicAddressToXAddress;
    } });
    Object.defineProperty(exports, "decodeAccountID", { enumerable: true, get: function() {
      return ripple_address_codec_1.decodeAccountID;
    } });
    Object.defineProperty(exports, "decodeAccountPublic", { enumerable: true, get: function() {
      return ripple_address_codec_1.decodeAccountPublic;
    } });
    Object.defineProperty(exports, "decodeNodePublic", { enumerable: true, get: function() {
      return ripple_address_codec_1.decodeNodePublic;
    } });
    Object.defineProperty(exports, "decodeSeed", { enumerable: true, get: function() {
      return ripple_address_codec_1.decodeSeed;
    } });
    Object.defineProperty(exports, "decodeXAddress", { enumerable: true, get: function() {
      return ripple_address_codec_1.decodeXAddress;
    } });
    Object.defineProperty(exports, "encodeAccountID", { enumerable: true, get: function() {
      return ripple_address_codec_1.encodeAccountID;
    } });
    Object.defineProperty(exports, "encodeAccountPublic", { enumerable: true, get: function() {
      return ripple_address_codec_1.encodeAccountPublic;
    } });
    Object.defineProperty(exports, "encodeNodePublic", { enumerable: true, get: function() {
      return ripple_address_codec_1.encodeNodePublic;
    } });
    Object.defineProperty(exports, "encodeSeed", { enumerable: true, get: function() {
      return ripple_address_codec_1.encodeSeed;
    } });
    Object.defineProperty(exports, "encodeXAddress", { enumerable: true, get: function() {
      return ripple_address_codec_1.encodeXAddress;
    } });
    Object.defineProperty(exports, "isValidClassicAddress", { enumerable: true, get: function() {
      return ripple_address_codec_1.isValidClassicAddress;
    } });
    Object.defineProperty(exports, "isValidXAddress", { enumerable: true, get: function() {
      return ripple_address_codec_1.isValidXAddress;
    } });
    Object.defineProperty(exports, "xAddressToClassicAddress", { enumerable: true, get: function() {
      return ripple_address_codec_1.xAddressToClassicAddress;
    } });
    var ripple_binary_codec_1 = require_dist2();
    var ripple_keypairs_1 = require_dist3();
    Object.defineProperty(exports, "verifyKeypairSignature", { enumerable: true, get: function() {
      return ripple_keypairs_1.verify;
    } });
    var derive_1 = require_derive();
    Object.defineProperty(exports, "deriveKeypair", { enumerable: true, get: function() {
      return derive_1.deriveKeypair;
    } });
    Object.defineProperty(exports, "deriveAddress", { enumerable: true, get: function() {
      return derive_1.deriveAddress;
    } });
    Object.defineProperty(exports, "deriveXAddress", { enumerable: true, get: function() {
      return derive_1.deriveXAddress;
    } });
    var getBalanceChanges_1 = __importDefault(require_getBalanceChanges());
    exports.getBalanceChanges = getBalanceChanges_1.default;
    var getNFTokenID_1 = __importDefault(require_getNFTokenID());
    exports.getNFTokenID = getNFTokenID_1.default;
    var getXChainClaimID_1 = __importDefault(require_getXChainClaimID());
    exports.getXChainClaimID = getXChainClaimID_1.default;
    var hashes_1 = require_hashes2();
    var parseNFTokenID_1 = __importDefault(require_parseNFTokenID());
    exports.parseNFTokenID = parseNFTokenID_1.default;
    var quality_1 = require_quality2();
    Object.defineProperty(exports, "percentToTransferRate", { enumerable: true, get: function() {
      return quality_1.percentToTransferRate;
    } });
    Object.defineProperty(exports, "decimalToTransferRate", { enumerable: true, get: function() {
      return quality_1.decimalToTransferRate;
    } });
    Object.defineProperty(exports, "transferRateToDecimal", { enumerable: true, get: function() {
      return quality_1.transferRateToDecimal;
    } });
    Object.defineProperty(exports, "percentToQuality", { enumerable: true, get: function() {
      return quality_1.percentToQuality;
    } });
    Object.defineProperty(exports, "decimalToQuality", { enumerable: true, get: function() {
      return quality_1.decimalToQuality;
    } });
    Object.defineProperty(exports, "qualityToDecimal", { enumerable: true, get: function() {
      return quality_1.qualityToDecimal;
    } });
    var signPaymentChannelClaim_1 = __importDefault(require_signPaymentChannelClaim());
    exports.signPaymentChannelClaim = signPaymentChannelClaim_1.default;
    var stringConversion_1 = require_stringConversion();
    Object.defineProperty(exports, "convertHexToString", { enumerable: true, get: function() {
      return stringConversion_1.convertHexToString;
    } });
    Object.defineProperty(exports, "convertStringToHex", { enumerable: true, get: function() {
      return stringConversion_1.convertStringToHex;
    } });
    var timeConversion_1 = require_timeConversion();
    Object.defineProperty(exports, "rippleTimeToISOTime", { enumerable: true, get: function() {
      return timeConversion_1.rippleTimeToISOTime;
    } });
    Object.defineProperty(exports, "isoTimeToRippleTime", { enumerable: true, get: function() {
      return timeConversion_1.isoTimeToRippleTime;
    } });
    Object.defineProperty(exports, "rippleTimeToUnixTime", { enumerable: true, get: function() {
      return timeConversion_1.rippleTimeToUnixTime;
    } });
    Object.defineProperty(exports, "unixTimeToRippleTime", { enumerable: true, get: function() {
      return timeConversion_1.unixTimeToRippleTime;
    } });
    var verifyPaymentChannelClaim_1 = __importDefault(require_verifyPaymentChannelClaim());
    exports.verifyPaymentChannelClaim = verifyPaymentChannelClaim_1.default;
    var xrpConversion_1 = require_xrpConversion();
    Object.defineProperty(exports, "xrpToDrops", { enumerable: true, get: function() {
      return xrpConversion_1.xrpToDrops;
    } });
    Object.defineProperty(exports, "dropsToXrp", { enumerable: true, get: function() {
      return xrpConversion_1.dropsToXrp;
    } });
    function isValidSecret(secret) {
      try {
        (0, derive_1.deriveKeypair)(secret);
        return true;
      } catch (_err) {
        return false;
      }
    }
    exports.isValidSecret = isValidSecret;
    function encode(object) {
      return (0, ripple_binary_codec_1.encode)(object);
    }
    exports.encode = encode;
    function encodeForSigning(object) {
      return (0, ripple_binary_codec_1.encodeForSigning)(object);
    }
    exports.encodeForSigning = encodeForSigning;
    function encodeForSigningClaim(object) {
      return (0, ripple_binary_codec_1.encodeForSigningClaim)(object);
    }
    exports.encodeForSigningClaim = encodeForSigningClaim;
    function encodeForMultiSigning(object, signer) {
      return (0, ripple_binary_codec_1.encodeForMultisigning)(object, signer);
    }
    exports.encodeForMultiSigning = encodeForMultiSigning;
    function decode2(hex2) {
      return (0, ripple_binary_codec_1.decode)(hex2);
    }
    exports.decode = decode2;
    function isValidAddress(address) {
      return (0, ripple_address_codec_1.isValidXAddress)(address) || (0, ripple_address_codec_1.isValidClassicAddress)(address);
    }
    exports.isValidAddress = isValidAddress;
    function hasNextPage(response) {
      return Boolean(response.result["marker"]);
    }
    exports.hasNextPage = hasNextPage;
    var hashes = {
      hashSignedTx: hashes_1.hashSignedTx,
      hashTx: hashes_1.hashTx,
      hashAccountRoot: hashes_1.hashAccountRoot,
      hashSignerListId: hashes_1.hashSignerListId,
      hashOfferId: hashes_1.hashOfferId,
      hashTrustline: hashes_1.hashTrustline,
      hashTxTree: hashes_1.hashTxTree,
      hashStateTree: hashes_1.hashStateTree,
      hashLedger: hashes_1.hashLedger,
      hashLedgerHeader: hashes_1.hashLedgerHeader,
      hashEscrow: hashes_1.hashEscrow,
      hashPaymentChannel: hashes_1.hashPaymentChannel
    };
    exports.hashes = hashes;
  }
});

// node_modules/xrpl/dist/npm/sugar/submit.js
var require_submit = __commonJS({
  "node_modules/xrpl/dist/npm/sugar/submit.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLastLedgerSequence = exports.getSignedTx = exports.waitForFinalTransactionOutcome = exports.submitRequest = void 0;
    var errors_1 = require_errors();
    var utils_1 = require_utils9();
    var LEDGER_CLOSE_TIME = 1e3;
    function sleep(ms) {
      return __awaiter2(this, void 0, void 0, function* () {
        return new Promise((resolve) => {
          setTimeout(resolve, ms);
        });
      });
    }
    function submitRequest(client, signedTransaction, failHard = false) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (!isSigned(signedTransaction)) {
          throw new errors_1.ValidationError("Transaction must be signed.");
        }
        const signedTxEncoded = typeof signedTransaction === "string" ? signedTransaction : (0, utils_1.encode)(signedTransaction);
        const request = {
          command: "submit",
          tx_blob: signedTxEncoded,
          fail_hard: isAccountDelete(signedTransaction) || failHard
        };
        return client.request(request);
      });
    }
    exports.submitRequest = submitRequest;
    function waitForFinalTransactionOutcome(client, txHash, lastLedger, submissionResult) {
      return __awaiter2(this, void 0, void 0, function* () {
        yield sleep(LEDGER_CLOSE_TIME);
        const latestLedger = yield client.getLedgerIndex();
        if (lastLedger < latestLedger) {
          throw new errors_1.XrplError(`The latest ledger sequence ${latestLedger} is greater than the transaction's LastLedgerSequence (${lastLedger}).
Preliminary result: ${submissionResult}`);
        }
        const txResponse = yield client.request({
          command: "tx",
          transaction: txHash
        }).catch((error) => __awaiter2(this, void 0, void 0, function* () {
          var _a;
          const message = (_a = error === null || error === void 0 ? void 0 : error.data) === null || _a === void 0 ? void 0 : _a.error;
          if (message === "txnNotFound") {
            return waitForFinalTransactionOutcome(client, txHash, lastLedger, submissionResult);
          }
          throw new Error(`${message} 
 Preliminary result: ${submissionResult}.
Full error details: ${String(error)}`);
        }));
        if (txResponse.result.validated) {
          return txResponse;
        }
        return waitForFinalTransactionOutcome(client, txHash, lastLedger, submissionResult);
      });
    }
    exports.waitForFinalTransactionOutcome = waitForFinalTransactionOutcome;
    function isSigned(transaction) {
      const tx = typeof transaction === "string" ? (0, utils_1.decode)(transaction) : transaction;
      if (typeof tx === "string") {
        return false;
      }
      if (tx.Signers != null) {
        const signers = tx.Signers;
        for (const signer of signers) {
          if (signer.Signer.SigningPubKey == null || signer.Signer.TxnSignature == null) {
            return false;
          }
        }
        return true;
      }
      return tx.SigningPubKey != null && tx.TxnSignature != null;
    }
    function getSignedTx(client, transaction, { autofill = true, wallet } = {}) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (isSigned(transaction)) {
          return transaction;
        }
        if (!wallet) {
          throw new errors_1.ValidationError("Wallet must be provided when submitting an unsigned transaction");
        }
        let tx = typeof transaction === "string" ? (0, utils_1.decode)(transaction) : transaction;
        if (autofill) {
          tx = yield client.autofill(tx);
        }
        return wallet.sign(tx).tx_blob;
      });
    }
    exports.getSignedTx = getSignedTx;
    function getLastLedgerSequence(transaction) {
      const tx = typeof transaction === "string" ? (0, utils_1.decode)(transaction) : transaction;
      return tx.LastLedgerSequence;
    }
    exports.getLastLedgerSequence = getLastLedgerSequence;
    function isAccountDelete(transaction) {
      const tx = typeof transaction === "string" ? (0, utils_1.decode)(transaction) : transaction;
      return tx.TransactionType === "AccountDelete";
    }
  }
});

// node_modules/xrpl/dist/npm/sugar/utils.js
var require_utils10 = __commonJS({
  "node_modules/xrpl/dist/npm/sugar/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ensureClassicAddress = void 0;
    var ripple_address_codec_1 = require_dist();
    function ensureClassicAddress(account3) {
      if ((0, ripple_address_codec_1.isValidXAddress)(account3)) {
        const { classicAddress, tag } = (0, ripple_address_codec_1.xAddressToClassicAddress)(account3);
        if (tag !== false) {
          throw new Error("This command does not support the use of a tag. Use an address without a tag.");
        }
        return classicAddress;
      }
      return account3;
    }
    exports.ensureClassicAddress = ensureClassicAddress;
  }
});

// node_modules/xrpl/dist/npm/sugar/index.js
var require_sugar = __commonJS({
  "node_modules/xrpl/dist/npm/sugar/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m, k2);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_submit(), exports);
    __exportStar(require_utils10(), exports);
  }
});

// node_modules/xrpl/dist/npm/sugar/getFeeXrp.js
var require_getFeeXrp = __commonJS({
  "node_modules/xrpl/dist/npm/sugar/getFeeXrp.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var bignumber_js_1 = __importDefault(require_bignumber());
    var errors_1 = require_errors();
    var NUM_DECIMAL_PLACES = 6;
    var BASE_10 = 10;
    function getFeeXrp(client, cushion) {
      var _a;
      return __awaiter2(this, void 0, void 0, function* () {
        const feeCushion = cushion !== null && cushion !== void 0 ? cushion : client.feeCushion;
        const serverInfo = (yield client.request({
          command: "server_info"
        })).result.info;
        const baseFee = (_a = serverInfo.validated_ledger) === null || _a === void 0 ? void 0 : _a.base_fee_xrp;
        if (baseFee == null) {
          throw new errors_1.XrplError("getFeeXrp: Could not get base_fee_xrp from server_info");
        }
        const baseFeeXrp = new bignumber_js_1.default(baseFee);
        if (serverInfo.load_factor == null) {
          serverInfo.load_factor = 1;
        }
        let fee = baseFeeXrp.times(serverInfo.load_factor).times(feeCushion);
        fee = bignumber_js_1.default.min(fee, client.maxFeeXRP);
        return new bignumber_js_1.default(fee.toFixed(NUM_DECIMAL_PLACES)).toString(BASE_10);
      });
    }
    exports.default = getFeeXrp;
  }
});

// node_modules/xrpl/dist/npm/sugar/autofill.js
var require_autofill = __commonJS({
  "node_modules/xrpl/dist/npm/sugar/autofill.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __asyncValues2 = exports && exports.__asyncValues || function(o) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v3) {
          return new Promise(function(resolve, reject) {
            v3 = o[n](v3), settle(resolve, reject, v3.done, v3.value);
          });
        };
      }
      function settle(resolve, reject, d, v3) {
        Promise.resolve(v3).then(function(v5) {
          resolve({ value: v5, done: d });
        }, reject);
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.autofillBatchTxn = exports.handleDeliverMax = exports.checkAccountDeleteBlockers = exports.setLatestValidatedLedgerSequence = exports.getTransactionFee = exports.setNextValidSequenceNumber = exports.setValidAddresses = exports.txNeedsNetworkID = void 0;
    var bignumber_js_1 = __importDefault(require_bignumber());
    var ripple_address_codec_1 = require_dist();
    var errors_1 = require_errors();
    var utils_1 = require_utils9();
    var getFeeXrp_1 = __importDefault(require_getFeeXrp());
    var LEDGER_OFFSET = 20;
    var RESTRICTED_NETWORKS = 1024;
    var REQUIRED_NETWORKID_VERSION = "1.11.0";
    function isNotLaterRippledVersion(source, target) {
      if (source === target) {
        return true;
      }
      const sourceDecomp = source.split(".");
      const targetDecomp = target.split(".");
      const sourceMajor = parseInt(sourceDecomp[0], 10);
      const sourceMinor = parseInt(sourceDecomp[1], 10);
      const targetMajor = parseInt(targetDecomp[0], 10);
      const targetMinor = parseInt(targetDecomp[1], 10);
      if (sourceMajor !== targetMajor) {
        return sourceMajor < targetMajor;
      }
      if (sourceMinor !== targetMinor) {
        return sourceMinor < targetMinor;
      }
      const sourcePatch = sourceDecomp[2].split("-");
      const targetPatch = targetDecomp[2].split("-");
      const sourcePatchVersion = parseInt(sourcePatch[0], 10);
      const targetPatchVersion = parseInt(targetPatch[0], 10);
      if (sourcePatchVersion !== targetPatchVersion) {
        return sourcePatchVersion < targetPatchVersion;
      }
      if (sourcePatch.length !== targetPatch.length) {
        return sourcePatch.length > targetPatch.length;
      }
      if (sourcePatch.length === 2) {
        if (!sourcePatch[1][0].startsWith(targetPatch[1][0])) {
          return sourcePatch[1] < targetPatch[1];
        }
        if (sourcePatch[1].startsWith("b")) {
          return parseInt(sourcePatch[1].slice(1), 10) < parseInt(targetPatch[1].slice(1), 10);
        }
        return parseInt(sourcePatch[1].slice(2), 10) < parseInt(targetPatch[1].slice(2), 10);
      }
      return false;
    }
    function txNeedsNetworkID(client) {
      if (client.networkID !== void 0 && client.networkID > RESTRICTED_NETWORKS) {
        if (client.buildVersion && isNotLaterRippledVersion(REQUIRED_NETWORKID_VERSION, client.buildVersion)) {
          return true;
        }
      }
      return false;
    }
    exports.txNeedsNetworkID = txNeedsNetworkID;
    function setValidAddresses(tx) {
      validateAccountAddress(tx, "Account", "SourceTag");
      if (tx["Destination"] != null) {
        validateAccountAddress(tx, "Destination", "DestinationTag");
      }
      convertToClassicAddress(tx, "Authorize");
      convertToClassicAddress(tx, "Unauthorize");
      convertToClassicAddress(tx, "Owner");
      convertToClassicAddress(tx, "RegularKey");
    }
    exports.setValidAddresses = setValidAddresses;
    function validateAccountAddress(tx, accountField, tagField) {
      const { classicAccount, tag } = getClassicAccountAndTag(tx[accountField]);
      tx[accountField] = classicAccount;
      if (tag != null && tag !== false) {
        if (tx[tagField] && tx[tagField] !== tag) {
          throw new errors_1.ValidationError(`The ${tagField}, if present, must match the tag of the ${accountField} X-address`);
        }
        tx[tagField] = tag;
      }
    }
    function getClassicAccountAndTag(account3, expectedTag) {
      if ((0, ripple_address_codec_1.isValidXAddress)(account3)) {
        const classic = (0, ripple_address_codec_1.xAddressToClassicAddress)(account3);
        if (expectedTag != null && classic.tag !== expectedTag) {
          throw new errors_1.ValidationError("address includes a tag that does not match the tag specified in the transaction");
        }
        return {
          classicAccount: classic.classicAddress,
          tag: classic.tag
        };
      }
      return {
        classicAccount: account3,
        tag: expectedTag
      };
    }
    function convertToClassicAddress(tx, fieldName) {
      const account3 = tx[fieldName];
      if (typeof account3 === "string") {
        const { classicAccount } = getClassicAccountAndTag(account3);
        tx[fieldName] = classicAccount;
      }
    }
    function getNextValidSequenceNumber(client, account3) {
      return __awaiter2(this, void 0, void 0, function* () {
        const request = {
          command: "account_info",
          account: account3,
          ledger_index: "current"
        };
        const data = yield client.request(request);
        return data.result.account_data.Sequence;
      });
    }
    function setNextValidSequenceNumber(client, tx) {
      return __awaiter2(this, void 0, void 0, function* () {
        tx.Sequence = yield getNextValidSequenceNumber(client, tx.Account);
      });
    }
    exports.setNextValidSequenceNumber = setNextValidSequenceNumber;
    function fetchOwnerReserveFee(client) {
      var _a;
      return __awaiter2(this, void 0, void 0, function* () {
        const response = yield client.request({ command: "server_state" });
        const fee = (_a = response.result.state.validated_ledger) === null || _a === void 0 ? void 0 : _a.reserve_inc;
        if (fee == null) {
          return Promise.reject(new Error("Could not fetch Owner Reserve."));
        }
        return new bignumber_js_1.default(fee);
      });
    }
    function calculateFeePerTransactionType(client, tx, signersCount = 0) {
      return __awaiter2(this, void 0, void 0, function* () {
        const netFeeXRP = yield (0, getFeeXrp_1.default)(client);
        const netFeeDrops = (0, utils_1.xrpToDrops)(netFeeXRP);
        let baseFee = new bignumber_js_1.default(netFeeDrops);
        const isSpecialTxCost = ["AccountDelete", "AMMCreate"].includes(tx.TransactionType);
        if (tx.TransactionType === "EscrowFinish" && tx.Fulfillment != null) {
          const fulfillmentBytesSize = Math.ceil(tx.Fulfillment.length / 2);
          baseFee = new bignumber_js_1.default(scaleValue(netFeeDrops, 33 + fulfillmentBytesSize / 16));
        } else if (isSpecialTxCost) {
          baseFee = yield fetchOwnerReserveFee(client);
        } else if (tx.TransactionType === "Batch") {
          const rawTxFees = yield tx.RawTransactions.reduce((acc, rawTxn) => __awaiter2(this, void 0, void 0, function* () {
            const resolvedAcc = yield acc;
            const fee = yield calculateFeePerTransactionType(client, rawTxn.RawTransaction);
            return bignumber_js_1.default.sum(resolvedAcc, fee);
          }), Promise.resolve(new bignumber_js_1.default(0)));
          baseFee = bignumber_js_1.default.sum(baseFee.times(2), rawTxFees);
        }
        if (signersCount > 0) {
          baseFee = bignumber_js_1.default.sum(baseFee, scaleValue(netFeeDrops, signersCount));
        }
        const maxFeeDrops = (0, utils_1.xrpToDrops)(client.maxFeeXRP);
        const totalFee = isSpecialTxCost ? baseFee : bignumber_js_1.default.min(baseFee, maxFeeDrops);
        return totalFee.dp(0, bignumber_js_1.default.ROUND_CEIL);
      });
    }
    function getTransactionFee(client, tx, signersCount = 0) {
      return __awaiter2(this, void 0, void 0, function* () {
        const fee = yield calculateFeePerTransactionType(client, tx, signersCount);
        tx.Fee = fee.toString(10);
      });
    }
    exports.getTransactionFee = getTransactionFee;
    function scaleValue(value, multiplier) {
      return new bignumber_js_1.default(value).times(multiplier).toString();
    }
    function setLatestValidatedLedgerSequence(client, tx) {
      return __awaiter2(this, void 0, void 0, function* () {
        const ledgerSequence = yield client.getLedgerIndex();
        tx.LastLedgerSequence = ledgerSequence + LEDGER_OFFSET;
      });
    }
    exports.setLatestValidatedLedgerSequence = setLatestValidatedLedgerSequence;
    function checkAccountDeleteBlockers(client, tx) {
      return __awaiter2(this, void 0, void 0, function* () {
        const request = {
          command: "account_objects",
          account: tx.Account,
          ledger_index: "validated",
          deletion_blockers_only: true
        };
        const response = yield client.request(request);
        return new Promise((resolve, reject) => {
          if (response.result.account_objects.length > 0) {
            reject(new errors_1.XrplError(`Account ${tx.Account} cannot be deleted; there are Escrows, PayChannels, RippleStates, or Checks associated with the account.`, response.result.account_objects));
          }
          resolve();
        });
      });
    }
    exports.checkAccountDeleteBlockers = checkAccountDeleteBlockers;
    function handleDeliverMax(tx) {
      if (tx.DeliverMax != null) {
        if (tx.Amount == null) {
          tx.Amount = tx.DeliverMax;
        }
        if (tx.Amount != null && tx.Amount !== tx.DeliverMax) {
          throw new errors_1.ValidationError("PaymentTransaction: Amount and DeliverMax fields must be identical when both are provided");
        }
        delete tx.DeliverMax;
      }
    }
    exports.handleDeliverMax = handleDeliverMax;
    function autofillBatchTxn(client, tx) {
      var _a, e_1, _b, _c;
      return __awaiter2(this, void 0, void 0, function* () {
        const accountSequences = {};
        try {
          for (var _d = true, _e2 = __asyncValues2(tx.RawTransactions), _f; _f = yield _e2.next(), _a = _f.done, !_a; _d = true) {
            _c = _f.value;
            _d = false;
            const rawTxn = _c;
            const txn = rawTxn.RawTransaction;
            if (txn.Sequence == null && txn.TicketSequence == null) {
              if (txn.Account in accountSequences) {
                txn.Sequence = accountSequences[txn.Account];
                accountSequences[txn.Account] += 1;
              } else {
                const nextSequence = yield getNextValidSequenceNumber(client, txn.Account);
                const sequence = txn.Account === tx.Account ? nextSequence + 1 : nextSequence;
                accountSequences[txn.Account] = sequence + 1;
                txn.Sequence = sequence;
              }
            }
            if (txn.Fee == null) {
              txn.Fee = "0";
            } else if (txn.Fee !== "0") {
              throw new errors_1.XrplError('Must have `Fee of "0" in inner Batch transaction.');
            }
            if (txn.SigningPubKey == null) {
              txn.SigningPubKey = "";
            } else if (txn.SigningPubKey !== "") {
              throw new errors_1.XrplError('Must have `SigningPubKey` of "" in inner Batch transaction.');
            }
            if (txn.TxnSignature != null) {
              throw new errors_1.XrplError("Must not have `TxnSignature` in inner Batch transaction.");
            }
            if (txn.Signers != null) {
              throw new errors_1.XrplError("Must not have `Signers` in inner Batch transaction.");
            }
            if (txn.NetworkID == null && txNeedsNetworkID(client)) {
              txn.NetworkID = client.networkID;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (!_d && !_a && (_b = _e2.return)) yield _b.call(_e2);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      });
    }
    exports.autofillBatchTxn = autofillBatchTxn;
  }
});

// node_modules/xrpl/dist/npm/sugar/balances.js
var require_balances = __commonJS({
  "node_modules/xrpl/dist/npm/sugar/balances.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatBalances = void 0;
    function formatBalances(trustlines) {
      return trustlines.map((trustline) => ({
        value: trustline.balance,
        currency: trustline.currency,
        issuer: trustline.account
      }));
    }
    exports.formatBalances = formatBalances;
  }
});

// node_modules/xrpl/dist/npm/models/ledger/Offer.js
var require_Offer = __commonJS({
  "node_modules/xrpl/dist/npm/models/ledger/Offer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OfferFlags = void 0;
    var OfferFlags;
    (function(OfferFlags2) {
      OfferFlags2[OfferFlags2["lsfPassive"] = 65536] = "lsfPassive";
      OfferFlags2[OfferFlags2["lsfSell"] = 131072] = "lsfSell";
      OfferFlags2[OfferFlags2["lsfHybrid"] = 262144] = "lsfHybrid";
    })(OfferFlags || (exports.OfferFlags = OfferFlags = {}));
  }
});

// node_modules/xrpl/dist/npm/sugar/getOrderbook.js
var require_getOrderbook = __commonJS({
  "node_modules/xrpl/dist/npm/sugar/getOrderbook.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sortAndLimitOffers = exports.separateBuySellOrders = exports.combineOrders = exports.extractOffers = exports.reverseRequest = exports.requestAllOffers = exports.createBookOffersRequest = exports.validateOrderbookOptions = void 0;
    var bignumber_js_1 = __importDefault(require_bignumber());
    var errors_1 = require_errors();
    var Offer_1 = require_Offer();
    var DEFAULT_LIMIT = 20;
    function sortOffers(offers) {
      return offers.sort((offerA, offerB) => {
        var _a, _b;
        const qualityA = (_a = offerA.quality) !== null && _a !== void 0 ? _a : 0;
        const qualityB = (_b = offerB.quality) !== null && _b !== void 0 ? _b : 0;
        return new bignumber_js_1.default(qualityA).comparedTo(qualityB);
      });
    }
    var getOrderbookOptionsSet = /* @__PURE__ */ new Set([
      "limit",
      "ledger_index",
      "ledger_hash",
      "taker"
    ]);
    function validateOrderbookOptions(options) {
      for (const key of Object.keys(options)) {
        if (!getOrderbookOptionsSet.has(key)) {
          throw new errors_1.ValidationError(`Unexpected option: ${key}`, options);
        }
      }
      if (options.limit && typeof options.limit !== "number") {
        throw new errors_1.ValidationError("limit must be a number", options.limit);
      }
      if (options.ledger_index && !(typeof options.ledger_index === "number" || typeof options.ledger_index === "string" && ["validated", "closed", "current"].includes(options.ledger_index))) {
        throw new errors_1.ValidationError('ledger_index must be a number or a string of "validated", "closed", or "current"', options.ledger_index);
      }
      if (options.ledger_hash !== void 0 && options.ledger_hash !== null && typeof options.ledger_hash !== "string") {
        throw new errors_1.ValidationError("ledger_hash must be a string", options.ledger_hash);
      }
      if (options.taker !== void 0 && typeof options.taker !== "string") {
        throw new errors_1.ValidationError("taker must be a string", options.taker);
      }
    }
    exports.validateOrderbookOptions = validateOrderbookOptions;
    function createBookOffersRequest(currency1, currency2, options) {
      var _a, _b;
      const request = {
        command: "book_offers",
        taker_pays: currency1,
        taker_gets: currency2,
        ledger_index: (_a = options.ledger_index) !== null && _a !== void 0 ? _a : "validated",
        ledger_hash: options.ledger_hash === null ? void 0 : options.ledger_hash,
        limit: (_b = options.limit) !== null && _b !== void 0 ? _b : DEFAULT_LIMIT,
        taker: options.taker ? options.taker : void 0
      };
      return request;
    }
    exports.createBookOffersRequest = createBookOffersRequest;
    function requestAllOffers(client, request) {
      return __awaiter2(this, void 0, void 0, function* () {
        const results = yield client.requestAll(request);
        return results.map((result) => result.result.offers);
      });
    }
    exports.requestAllOffers = requestAllOffers;
    function reverseRequest(request) {
      return Object.assign(Object.assign({}, request), { taker_pays: request.taker_gets, taker_gets: request.taker_pays });
    }
    exports.reverseRequest = reverseRequest;
    function extractOffers(offerResults) {
      return offerResults.flatMap((offerResult) => offerResult);
    }
    exports.extractOffers = extractOffers;
    function combineOrders(directOffers, reverseOffers) {
      return [...directOffers, ...reverseOffers];
    }
    exports.combineOrders = combineOrders;
    function separateBuySellOrders(orders) {
      const buy = [];
      const sell = [];
      orders.forEach((order) => {
        if ((order.Flags & Offer_1.OfferFlags.lsfSell) === 0) {
          buy.push(order);
        } else {
          sell.push(order);
        }
      });
      return { buy, sell };
    }
    exports.separateBuySellOrders = separateBuySellOrders;
    function sortAndLimitOffers(offers, limit) {
      const sortedOffers = sortOffers(offers);
      return sortedOffers.slice(0, limit);
    }
    exports.sortAndLimitOffers = sortAndLimitOffers;
  }
});

// node_modules/@noble/hashes/hmac.js
var require_hmac2 = __commonJS({
  "node_modules/@noble/hashes/hmac.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hmac = exports.HMAC = void 0;
    var _assert_js_1 = require_assert();
    var utils_js_1 = require_utils();
    var HMAC2 = class extends utils_js_1.Hash {
      constructor(hash2, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.hash)(hash2);
        const key = (0, utils_js_1.toBytes)(_key);
        this.iHash = hash2.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash2.create();
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        pad.fill(0);
      }
      update(buf) {
        (0, _assert_js_1.exists)(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    };
    exports.HMAC = HMAC2;
    var hmac2 = (hash2, key, message) => new HMAC2(hash2, key).update(message).digest();
    exports.hmac = hmac2;
    exports.hmac.create = (hash2, key) => new HMAC2(hash2, key);
  }
});

// node_modules/@scure/bip32/node_modules/@noble/curves/abstract/utils.js
var require_utils11 = __commonJS({
  "node_modules/@scure/bip32/node_modules/@noble/curves/abstract/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bitMask = void 0;
    exports.isBytes = isBytes;
    exports.abytes = abytes2;
    exports.bytesToHex = bytesToHex2;
    exports.numberToHexUnpadded = numberToHexUnpadded;
    exports.hexToNumber = hexToNumber3;
    exports.hexToBytes = hexToBytes;
    exports.bytesToNumberBE = bytesToNumberBE;
    exports.bytesToNumberLE = bytesToNumberLE2;
    exports.numberToBytesBE = numberToBytesBE;
    exports.numberToBytesLE = numberToBytesLE2;
    exports.numberToVarBytesBE = numberToVarBytesBE;
    exports.ensureBytes = ensureBytes2;
    exports.concatBytes = concatBytes2;
    exports.equalBytes = equalBytes2;
    exports.utf8ToBytes = utf8ToBytes2;
    exports.bitLen = bitLen;
    exports.bitGet = bitGet;
    exports.bitSet = bitSet;
    exports.createHmacDrbg = createHmacDrbg;
    exports.validateObject = validateObject;
    var _0n6 = BigInt(0);
    var _1n6 = BigInt(1);
    var _2n6 = BigInt(2);
    function isBytes(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    function abytes2(item) {
      if (!isBytes(item))
        throw new Error("Uint8Array expected");
    }
    var hexes = Array.from({ length: 256 }, (_2, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex2(bytes3) {
      abytes2(bytes3);
      let hex2 = "";
      for (let i = 0; i < bytes3.length; i++) {
        hex2 += hexes[bytes3[i]];
      }
      return hex2;
    }
    function numberToHexUnpadded(num) {
      const hex2 = num.toString(16);
      return hex2.length & 1 ? `0${hex2}` : hex2;
    }
    function hexToNumber3(hex2) {
      if (typeof hex2 !== "string")
        throw new Error("hex string expected, got " + typeof hex2);
      return BigInt(hex2 === "" ? "0" : `0x${hex2}`);
    }
    var asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
    function asciiToBase16(char) {
      if (char >= asciis._0 && char <= asciis._9)
        return char - asciis._0;
      if (char >= asciis._A && char <= asciis._F)
        return char - (asciis._A - 10);
      if (char >= asciis._a && char <= asciis._f)
        return char - (asciis._a - 10);
      return;
    }
    function hexToBytes(hex2) {
      if (typeof hex2 !== "string")
        throw new Error("hex string expected, got " + typeof hex2);
      const hl = hex2.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + hl);
      const array = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex2.charCodeAt(hi));
        const n2 = asciiToBase16(hex2.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex2[hi] + hex2[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
      }
      return array;
    }
    function bytesToNumberBE(bytes3) {
      return hexToNumber3(bytesToHex2(bytes3));
    }
    function bytesToNumberLE2(bytes3) {
      abytes2(bytes3);
      return hexToNumber3(bytesToHex2(Uint8Array.from(bytes3).reverse()));
    }
    function numberToBytesBE(n, len) {
      return hexToBytes(n.toString(16).padStart(len * 2, "0"));
    }
    function numberToBytesLE2(n, len) {
      return numberToBytesBE(n, len).reverse();
    }
    function numberToVarBytesBE(n) {
      return hexToBytes(numberToHexUnpadded(n));
    }
    function ensureBytes2(title, hex2, expectedLength) {
      let res;
      if (typeof hex2 === "string") {
        try {
          res = hexToBytes(hex2);
        } catch (e) {
          throw new Error(`${title} must be valid hex string, got "${hex2}". Cause: ${e}`);
        }
      } else if (isBytes(hex2)) {
        res = Uint8Array.from(hex2);
      } else {
        throw new Error(`${title} must be hex string or Uint8Array`);
      }
      const len = res.length;
      if (typeof expectedLength === "number" && len !== expectedLength)
        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
      return res;
    }
    function concatBytes2(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes2(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    function equalBytes2(a, b2) {
      if (a.length !== b2.length)
        return false;
      let diff = 0;
      for (let i = 0; i < a.length; i++)
        diff |= a[i] ^ b2[i];
      return diff === 0;
    }
    function utf8ToBytes2(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    function bitLen(n) {
      let len;
      for (len = 0; n > _0n6; n >>= _1n6, len += 1)
        ;
      return len;
    }
    function bitGet(n, pos) {
      return n >> BigInt(pos) & _1n6;
    }
    function bitSet(n, pos, value) {
      return n | (value ? _1n6 : _0n6) << BigInt(pos);
    }
    var bitMask = (n) => (_2n6 << BigInt(n - 1)) - _1n6;
    exports.bitMask = bitMask;
    var u8n = (data) => new Uint8Array(data);
    var u8fr = (arr) => Uint8Array.from(arr);
    function createHmacDrbg(hashLen, qByteLen, hmacFn) {
      if (typeof hashLen !== "number" || hashLen < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      if (typeof hmacFn !== "function")
        throw new Error("hmacFn must be a function");
      let v3 = u8n(hashLen);
      let k2 = u8n(hashLen);
      let i = 0;
      const reset = () => {
        v3.fill(1);
        k2.fill(0);
        i = 0;
      };
      const h2 = (...b2) => hmacFn(k2, v3, ...b2);
      const reseed = (seed = u8n()) => {
        k2 = h2(u8fr([0]), seed);
        v3 = h2();
        if (seed.length === 0)
          return;
        k2 = h2(u8fr([1]), seed);
        v3 = h2();
      };
      const gen2 = () => {
        if (i++ >= 1e3)
          throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while (len < qByteLen) {
          v3 = h2();
          const sl = v3.slice();
          out.push(sl);
          len += v3.length;
        }
        return concatBytes2(...out);
      };
      const genUntil = (seed, pred) => {
        reset();
        reseed(seed);
        let res = void 0;
        while (!(res = pred(gen2())))
          reseed();
        reset();
        return res;
      };
      return genUntil;
    }
    var validatorFns = {
      bigint: (val) => typeof val === "bigint",
      function: (val) => typeof val === "function",
      boolean: (val) => typeof val === "boolean",
      string: (val) => typeof val === "string",
      stringOrUint8Array: (val) => typeof val === "string" || isBytes(val),
      isSafeInteger: (val) => Number.isSafeInteger(val),
      array: (val) => Array.isArray(val),
      field: (val, object) => object.Fp.isValid(val),
      hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
    };
    function validateObject(object, validators2, optValidators = {}) {
      const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns[type];
        if (typeof checkVal !== "function")
          throw new Error(`Invalid validator "${type}", expected function`);
        const val = object[fieldName];
        if (isOptional && val === void 0)
          return;
        if (!checkVal(val, object)) {
          throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
        }
      };
      for (const [fieldName, type] of Object.entries(validators2))
        checkField(fieldName, type, false);
      for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
      return object;
    }
  }
});

// node_modules/@scure/bip32/node_modules/@noble/curves/abstract/modular.js
var require_modular2 = __commonJS({
  "node_modules/@scure/bip32/node_modules/@noble/curves/abstract/modular.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNegativeLE = void 0;
    exports.mod = mod2;
    exports.pow = pow;
    exports.pow2 = pow22;
    exports.invert = invert;
    exports.tonelliShanks = tonelliShanks;
    exports.FpSqrt = FpSqrt;
    exports.validateField = validateField;
    exports.FpPow = FpPow;
    exports.FpInvertBatch = FpInvertBatch2;
    exports.FpDiv = FpDiv;
    exports.FpIsSquare = FpIsSquare;
    exports.nLength = nLength;
    exports.Field = Field2;
    exports.FpSqrtOdd = FpSqrtOdd;
    exports.FpSqrtEven = FpSqrtEven2;
    exports.hashToPrivateScalar = hashToPrivateScalar;
    exports.getFieldBytesLength = getFieldBytesLength;
    exports.getMinHashLength = getMinHashLength;
    exports.mapHashToField = mapHashToField;
    var utils_js_1 = require_utils11();
    var _0n6 = BigInt(0);
    var _1n6 = BigInt(1);
    var _2n6 = BigInt(2);
    var _3n3 = BigInt(3);
    var _4n2 = BigInt(4);
    var _5n3 = BigInt(5);
    var _8n4 = BigInt(8);
    var _9n2 = BigInt(9);
    var _16n2 = BigInt(16);
    function mod2(a, b2) {
      const result = a % b2;
      return result >= _0n6 ? result : b2 + result;
    }
    function pow(num, power, modulo) {
      if (modulo <= _0n6 || power < _0n6)
        throw new Error("Expected power/modulo > 0");
      if (modulo === _1n6)
        return _0n6;
      let res = _1n6;
      while (power > _0n6) {
        if (power & _1n6)
          res = res * num % modulo;
        num = num * num % modulo;
        power >>= _1n6;
      }
      return res;
    }
    function pow22(x, power, modulo) {
      let res = x;
      while (power-- > _0n6) {
        res *= res;
        res %= modulo;
      }
      return res;
    }
    function invert(number2, modulo) {
      if (number2 === _0n6 || modulo <= _0n6) {
        throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
      }
      let a = mod2(number2, modulo);
      let b2 = modulo;
      let x = _0n6, y = _1n6, u = _1n6, v3 = _0n6;
      while (a !== _0n6) {
        const q2 = b2 / a;
        const r = b2 % a;
        const m = x - u * q2;
        const n = y - v3 * q2;
        b2 = a, a = r, x = u, y = v3, u = m, v3 = n;
      }
      const gcd = b2;
      if (gcd !== _1n6)
        throw new Error("invert: does not exist");
      return mod2(x, modulo);
    }
    function tonelliShanks(P2) {
      const legendreC = (P2 - _1n6) / _2n6;
      let Q, S, Z2;
      for (Q = P2 - _1n6, S = 0; Q % _2n6 === _0n6; Q /= _2n6, S++)
        ;
      for (Z2 = _2n6; Z2 < P2 && pow(Z2, legendreC, P2) !== P2 - _1n6; Z2++)
        ;
      if (S === 1) {
        const p1div4 = (P2 + _1n6) / _4n2;
        return function tonelliFast(Fp2, n) {
          const root = Fp2.pow(n, p1div4);
          if (!Fp2.eql(Fp2.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      const Q1div2 = (Q + _1n6) / _2n6;
      return function tonelliSlow(Fp2, n) {
        if (Fp2.pow(n, legendreC) === Fp2.neg(Fp2.ONE))
          throw new Error("Cannot find square root");
        let r = S;
        let g2 = Fp2.pow(Fp2.mul(Fp2.ONE, Z2), Q);
        let x = Fp2.pow(n, Q1div2);
        let b2 = Fp2.pow(n, Q);
        while (!Fp2.eql(b2, Fp2.ONE)) {
          if (Fp2.eql(b2, Fp2.ZERO))
            return Fp2.ZERO;
          let m = 1;
          for (let t2 = Fp2.sqr(b2); m < r; m++) {
            if (Fp2.eql(t2, Fp2.ONE))
              break;
            t2 = Fp2.sqr(t2);
          }
          const ge2 = Fp2.pow(g2, _1n6 << BigInt(r - m - 1));
          g2 = Fp2.sqr(ge2);
          x = Fp2.mul(x, ge2);
          b2 = Fp2.mul(b2, g2);
          r = m;
        }
        return x;
      };
    }
    function FpSqrt(P2) {
      if (P2 % _4n2 === _3n3) {
        const p1div4 = (P2 + _1n6) / _4n2;
        return function sqrt3mod4(Fp2, n) {
          const root = Fp2.pow(n, p1div4);
          if (!Fp2.eql(Fp2.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P2 % _8n4 === _5n3) {
        const c1 = (P2 - _5n3) / _8n4;
        return function sqrt5mod8(Fp2, n) {
          const n2 = Fp2.mul(n, _2n6);
          const v3 = Fp2.pow(n2, c1);
          const nv = Fp2.mul(n, v3);
          const i = Fp2.mul(Fp2.mul(nv, _2n6), v3);
          const root = Fp2.mul(nv, Fp2.sub(i, Fp2.ONE));
          if (!Fp2.eql(Fp2.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P2 % _16n2 === _9n2) {
      }
      return tonelliShanks(P2);
    }
    var isNegativeLE2 = (num, modulo) => (mod2(num, modulo) & _1n6) === _1n6;
    exports.isNegativeLE = isNegativeLE2;
    var FIELD_FIELDS = [
      "create",
      "isValid",
      "is0",
      "neg",
      "inv",
      "sqrt",
      "sqr",
      "eql",
      "add",
      "sub",
      "mul",
      "pow",
      "div",
      "addN",
      "subN",
      "mulN",
      "sqrN"
    ];
    function validateField(field) {
      const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
      };
      const opts = FIELD_FIELDS.reduce((map3, val) => {
        map3[val] = "function";
        return map3;
      }, initial);
      return (0, utils_js_1.validateObject)(field, opts);
    }
    function FpPow(f, num, power) {
      if (power < _0n6)
        throw new Error("Expected power > 0");
      if (power === _0n6)
        return f.ONE;
      if (power === _1n6)
        return num;
      let p = f.ONE;
      let d = num;
      while (power > _0n6) {
        if (power & _1n6)
          p = f.mul(p, d);
        d = f.sqr(d);
        power >>= _1n6;
      }
      return p;
    }
    function FpInvertBatch2(f, nums) {
      const tmp = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num, i) => {
        if (f.is0(num))
          return acc;
        tmp[i] = acc;
        return f.mul(acc, num);
      }, f.ONE);
      const inverted = f.inv(lastMultiplied);
      nums.reduceRight((acc, num, i) => {
        if (f.is0(num))
          return acc;
        tmp[i] = f.mul(acc, tmp[i]);
        return f.mul(acc, num);
      }, inverted);
      return tmp;
    }
    function FpDiv(f, lhs, rhs) {
      return f.mul(lhs, typeof rhs === "bigint" ? invert(rhs, f.ORDER) : f.inv(rhs));
    }
    function FpIsSquare(f) {
      const legendreConst = (f.ORDER - _1n6) / _2n6;
      return (x) => {
        const p = f.pow(x, legendreConst);
        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
      };
    }
    function nLength(n, nBitLength) {
      const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
      const nByteLength = Math.ceil(_nBitLength / 8);
      return { nBitLength: _nBitLength, nByteLength };
    }
    function Field2(ORDER, bitLen, isLE2 = false, redef = {}) {
      if (ORDER <= _0n6)
        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
      const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
      if (BYTES > 2048)
        throw new Error("Field lengths over 2048 bytes are not supported");
      const sqrtP = FpSqrt(ORDER);
      const f = Object.freeze({
        ORDER,
        BITS,
        BYTES,
        MASK: (0, utils_js_1.bitMask)(BITS),
        ZERO: _0n6,
        ONE: _1n6,
        create: (num) => mod2(num, ORDER),
        isValid: (num) => {
          if (typeof num !== "bigint")
            throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
          return _0n6 <= num && num < ORDER;
        },
        is0: (num) => num === _0n6,
        isOdd: (num) => (num & _1n6) === _1n6,
        neg: (num) => mod2(-num, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num) => mod2(num * num, ORDER),
        add: (lhs, rhs) => mod2(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod2(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod2(lhs * rhs, ORDER),
        pow: (num, power) => FpPow(f, num, power),
        div: (lhs, rhs) => mod2(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num) => num * num,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num) => invert(num, ORDER),
        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
        invertBatch: (lst) => FpInvertBatch2(f, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b2, c) => c ? b2 : a,
        toBytes: (num) => isLE2 ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES),
        fromBytes: (bytes3) => {
          if (bytes3.length !== BYTES)
            throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes3.length}`);
          return isLE2 ? (0, utils_js_1.bytesToNumberLE)(bytes3) : (0, utils_js_1.bytesToNumberBE)(bytes3);
        }
      });
      return Object.freeze(f);
    }
    function FpSqrtOdd(Fp2, elm) {
      if (!Fp2.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp2.sqrt(elm);
      return Fp2.isOdd(root) ? root : Fp2.neg(root);
    }
    function FpSqrtEven2(Fp2, elm) {
      if (!Fp2.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp2.sqrt(elm);
      return Fp2.isOdd(root) ? Fp2.neg(root) : root;
    }
    function hashToPrivateScalar(hash2, groupOrder, isLE2 = false) {
      hash2 = (0, utils_js_1.ensureBytes)("privateHash", hash2);
      const hashLen = hash2.length;
      const minLen = nLength(groupOrder).nByteLength + 8;
      if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
      const num = isLE2 ? (0, utils_js_1.bytesToNumberLE)(hash2) : (0, utils_js_1.bytesToNumberBE)(hash2);
      return mod2(num, groupOrder - _1n6) + _1n6;
    }
    function getFieldBytesLength(fieldOrder) {
      if (typeof fieldOrder !== "bigint")
        throw new Error("field order must be bigint");
      const bitLength = fieldOrder.toString(2).length;
      return Math.ceil(bitLength / 8);
    }
    function getMinHashLength(fieldOrder) {
      const length = getFieldBytesLength(fieldOrder);
      return length + Math.ceil(length / 2);
    }
    function mapHashToField(key, fieldOrder, isLE2 = false) {
      const len = key.length;
      const fieldLen = getFieldBytesLength(fieldOrder);
      const minLen = getMinHashLength(fieldOrder);
      if (len < 16 || len < minLen || len > 1024)
        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
      const num = isLE2 ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);
      const reduced = mod2(num, fieldOrder - _1n6) + _1n6;
      return isLE2 ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);
    }
  }
});

// node_modules/@scure/bip32/node_modules/@noble/curves/abstract/curve.js
var require_curve2 = __commonJS({
  "node_modules/@scure/bip32/node_modules/@noble/curves/abstract/curve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wNAF = wNAF2;
    exports.validateBasic = validateBasic;
    var modular_js_1 = require_modular2();
    var utils_js_1 = require_utils11();
    var _0n6 = BigInt(0);
    var _1n6 = BigInt(1);
    function wNAF2(c, bits2) {
      const constTimeNegate = (condition, item) => {
        const neg = item.negate();
        return condition ? neg : item;
      };
      const opts = (W2) => {
        const windows = Math.ceil(bits2 / W2) + 1;
        const windowSize = 2 ** (W2 - 1);
        return { windows, windowSize };
      };
      return {
        constTimeNegate,
        // non-const time multiplication ladder
        unsafeLadder(elm, n) {
          let p = c.ZERO;
          let d = elm;
          while (n > _0n6) {
            if (n & _1n6)
              p = p.add(d);
            d = d.double();
            n >>= _1n6;
          }
          return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W2) {
          const { windows, windowSize } = opts(W2);
          const points = [];
          let p = elm;
          let base = p;
          for (let window3 = 0; window3 < windows; window3++) {
            base = p;
            points.push(base);
            for (let i = 1; i < windowSize; i++) {
              base = base.add(p);
              points.push(base);
            }
            p = base.double();
          }
          return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W2, precomputes, n) {
          const { windows, windowSize } = opts(W2);
          let p = c.ZERO;
          let f = c.BASE;
          const mask = BigInt(2 ** W2 - 1);
          const maxNumber = 2 ** W2;
          const shiftBy = BigInt(W2);
          for (let window3 = 0; window3 < windows; window3++) {
            const offset = window3 * windowSize;
            let wbits = Number(n & mask);
            n >>= shiftBy;
            if (wbits > windowSize) {
              wbits -= maxNumber;
              n += _1n6;
            }
            const offset1 = offset;
            const offset2 = offset + Math.abs(wbits) - 1;
            const cond1 = window3 % 2 !== 0;
            const cond2 = wbits < 0;
            if (wbits === 0) {
              f = f.add(constTimeNegate(cond1, precomputes[offset1]));
            } else {
              p = p.add(constTimeNegate(cond2, precomputes[offset2]));
            }
          }
          return { p, f };
        },
        wNAFCached(P2, precomputesMap, n, transform) {
          const W2 = P2._WINDOW_SIZE || 1;
          let comp = precomputesMap.get(P2);
          if (!comp) {
            comp = this.precomputeWindow(P2, W2);
            if (W2 !== 1) {
              precomputesMap.set(P2, transform(comp));
            }
          }
          return this.wNAF(W2, comp, n);
        }
      };
    }
    function validateBasic(curve) {
      (0, modular_js_1.validateField)(curve.Fp);
      (0, utils_js_1.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
      }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
      });
      return Object.freeze({
        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER }
      });
    }
  }
});

// node_modules/@scure/bip32/node_modules/@noble/curves/abstract/weierstrass.js
var require_weierstrass2 = __commonJS({
  "node_modules/@scure/bip32/node_modules/@noble/curves/abstract/weierstrass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DER = void 0;
    exports.weierstrassPoints = weierstrassPoints;
    exports.weierstrass = weierstrass;
    exports.SWUFpSqrtRatio = SWUFpSqrtRatio;
    exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;
    var curve_js_1 = require_curve2();
    var mod2 = require_modular2();
    var ut2 = require_utils11();
    var utils_js_1 = require_utils11();
    function validatePointOpts(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut2.validateObject(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp: Fp2, a } = opts;
      if (endo) {
        if (!Fp2.eql(a, Fp2.ZERO)) {
          throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze({ ...opts });
    }
    var { bytesToNumberBE: b2n, hexToBytes: h2b } = ut2;
    exports.DER = {
      // asn.1 DER encoding utils
      Err: class DERErr extends Error {
        constructor(m = "") {
          super(m);
        }
      },
      _parseInt(data) {
        const { Err: E2 } = exports.DER;
        if (data.length < 2 || data[0] !== 2)
          throw new E2("Invalid signature integer tag");
        const len = data[1];
        const res = data.subarray(2, len + 2);
        if (!len || res.length !== len)
          throw new E2("Invalid signature integer: wrong length");
        if (res[0] & 128)
          throw new E2("Invalid signature integer: negative");
        if (res[0] === 0 && !(res[1] & 128))
          throw new E2("Invalid signature integer: unnecessary leading zero");
        return { d: b2n(res), l: data.subarray(len + 2) };
      },
      toSig(hex2) {
        const { Err: E2 } = exports.DER;
        const data = typeof hex2 === "string" ? h2b(hex2) : hex2;
        ut2.abytes(data);
        let l17 = data.length;
        if (l17 < 2 || data[0] != 48)
          throw new E2("Invalid signature tag");
        if (data[1] !== l17 - 2)
          throw new E2("Invalid signature: incorrect length");
        const { d: r, l: sBytes } = exports.DER._parseInt(data.subarray(2));
        const { d: s, l: rBytesLeft } = exports.DER._parseInt(sBytes);
        if (rBytesLeft.length)
          throw new E2("Invalid signature: left bytes after parsing");
        return { r, s };
      },
      hexFromSig(sig2) {
        const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
        const h2 = (num) => {
          const hex2 = num.toString(16);
          return hex2.length & 1 ? `0${hex2}` : hex2;
        };
        const s = slice(h2(sig2.s));
        const r = slice(h2(sig2.r));
        const shl = s.length / 2;
        const rhl = r.length / 2;
        const sl = h2(shl);
        const rl = h2(rhl);
        return `30${h2(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
      }
    };
    var _0n6 = BigInt(0);
    var _1n6 = BigInt(1);
    var _2n6 = BigInt(2);
    var _3n3 = BigInt(3);
    var _4n2 = BigInt(4);
    function weierstrassPoints(opts) {
      const CURVE = validatePointOpts(opts);
      const { Fp: Fp2 } = CURVE;
      const toBytes2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
        const a = point.toAffine();
        return ut2.concatBytes(Uint8Array.from([4]), Fp2.toBytes(a.x), Fp2.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes3) => {
        const tail = bytes3.subarray(1);
        const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
        const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
        return { x, y };
      });
      function weierstrassEquation(x) {
        const { a, b: b2 } = CURVE;
        const x2 = Fp2.sqr(x);
        const x3 = Fp2.mul(x2, x);
        return Fp2.add(Fp2.add(x3, Fp2.mul(x, a)), b2);
      }
      if (!Fp2.eql(Fp2.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num) {
        return typeof num === "bigint" && _0n6 < num && num < CURVE.n;
      }
      function assertGE(num) {
        if (!isWithinCurveOrder(num))
          throw new Error("Expected valid bigint: 0 < bigint < curve.n");
      }
      function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
        if (lengths && typeof key !== "bigint") {
          if (ut2.isBytes(key))
            key = ut2.bytesToHex(key);
          if (typeof key !== "string" || !lengths.includes(key.length))
            throw new Error("Invalid key");
          key = key.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
          num = typeof key === "bigint" ? key : ut2.bytesToNumberBE((0, utils_js_1.ensureBytes)("private key", key, nByteLength));
        } catch (error) {
          throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
        }
        if (wrapPrivateKey)
          num = mod2.mod(num, n);
        assertGE(num);
        return num;
      }
      const pointPrecomputes = /* @__PURE__ */ new Map();
      function assertPrjPoint(other) {
        if (!(other instanceof Point))
          throw new Error("ProjectivePoint expected");
      }
      class Point {
        constructor(px, py, pz) {
          this.px = px;
          this.py = py;
          this.pz = pz;
          if (px == null || !Fp2.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp2.isValid(py))
            throw new Error("y required");
          if (pz == null || !Fp2.isValid(pz))
            throw new Error("z required");
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
          const { x, y } = p || {};
          if (!p || !Fp2.isValid(x) || !Fp2.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point)
            throw new Error("projective point not allowed");
          const is0 = (i) => Fp2.eql(i, Fp2.ZERO);
          if (is0(x) && is0(y))
            return Point.ZERO;
          return new Point(x, y, Fp2.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
          const toInv = Fp2.invertBatch(points.map((p) => p.pz));
          return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex2) {
          const P2 = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)("pointHex", hex2)));
          P2.assertValidity();
          return P2;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
          return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
          if (this.is0()) {
            if (CURVE.allowInfinityPoint && !Fp2.is0(this.py))
              return;
            throw new Error("bad point: ZERO");
          }
          const { x, y } = this.toAffine();
          if (!Fp2.isValid(x) || !Fp2.isValid(y))
            throw new Error("bad point: x or y not FE");
          const left = Fp2.sqr(y);
          const right = weierstrassEquation(x);
          if (!Fp2.eql(left, right))
            throw new Error("bad point: equation left != right");
          if (!this.isTorsionFree())
            throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (Fp2.isOdd)
            return !Fp2.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U1 = Fp2.eql(Fp2.mul(X1, Z2), Fp2.mul(X2, Z1));
          const U2 = Fp2.eql(Fp2.mul(Y1, Z2), Fp2.mul(Y2, Z1));
          return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
          return new Point(this.px, Fp2.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b: b2 } = CURVE;
          const b3 = Fp2.mul(b2, _3n3);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
          let t0 = Fp2.mul(X1, X1);
          let t1 = Fp2.mul(Y1, Y1);
          let t2 = Fp2.mul(Z1, Z1);
          let t3 = Fp2.mul(X1, Y1);
          t3 = Fp2.add(t3, t3);
          Z3 = Fp2.mul(X1, Z1);
          Z3 = Fp2.add(Z3, Z3);
          X3 = Fp2.mul(a, Z3);
          Y3 = Fp2.mul(b3, t2);
          Y3 = Fp2.add(X3, Y3);
          X3 = Fp2.sub(t1, Y3);
          Y3 = Fp2.add(t1, Y3);
          Y3 = Fp2.mul(X3, Y3);
          X3 = Fp2.mul(t3, X3);
          Z3 = Fp2.mul(b3, Z3);
          t2 = Fp2.mul(a, t2);
          t3 = Fp2.sub(t0, t2);
          t3 = Fp2.mul(a, t3);
          t3 = Fp2.add(t3, Z3);
          Z3 = Fp2.add(t0, t0);
          t0 = Fp2.add(Z3, t0);
          t0 = Fp2.add(t0, t2);
          t0 = Fp2.mul(t0, t3);
          Y3 = Fp2.add(Y3, t0);
          t2 = Fp2.mul(Y1, Z1);
          t2 = Fp2.add(t2, t2);
          t0 = Fp2.mul(t2, t3);
          X3 = Fp2.sub(X3, t0);
          Z3 = Fp2.mul(t2, t1);
          Z3 = Fp2.add(Z3, Z3);
          Z3 = Fp2.add(Z3, Z3);
          return new Point(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
          const a = CURVE.a;
          const b3 = Fp2.mul(CURVE.b, _3n3);
          let t0 = Fp2.mul(X1, X2);
          let t1 = Fp2.mul(Y1, Y2);
          let t2 = Fp2.mul(Z1, Z2);
          let t3 = Fp2.add(X1, Y1);
          let t4 = Fp2.add(X2, Y2);
          t3 = Fp2.mul(t3, t4);
          t4 = Fp2.add(t0, t1);
          t3 = Fp2.sub(t3, t4);
          t4 = Fp2.add(X1, Z1);
          let t5 = Fp2.add(X2, Z2);
          t4 = Fp2.mul(t4, t5);
          t5 = Fp2.add(t0, t2);
          t4 = Fp2.sub(t4, t5);
          t5 = Fp2.add(Y1, Z1);
          X3 = Fp2.add(Y2, Z2);
          t5 = Fp2.mul(t5, X3);
          X3 = Fp2.add(t1, t2);
          t5 = Fp2.sub(t5, X3);
          Z3 = Fp2.mul(a, t4);
          X3 = Fp2.mul(b3, t2);
          Z3 = Fp2.add(X3, Z3);
          X3 = Fp2.sub(t1, Z3);
          Z3 = Fp2.add(t1, Z3);
          Y3 = Fp2.mul(X3, Z3);
          t1 = Fp2.add(t0, t0);
          t1 = Fp2.add(t1, t0);
          t2 = Fp2.mul(a, t2);
          t4 = Fp2.mul(b3, t4);
          t1 = Fp2.add(t1, t2);
          t2 = Fp2.sub(t0, t2);
          t2 = Fp2.mul(a, t2);
          t4 = Fp2.add(t4, t2);
          t0 = Fp2.mul(t1, t4);
          Y3 = Fp2.add(Y3, t0);
          t0 = Fp2.mul(t5, t4);
          X3 = Fp2.mul(t3, X3);
          X3 = Fp2.sub(X3, t0);
          t0 = Fp2.mul(t3, t1);
          Z3 = Fp2.mul(t5, Z3);
          Z3 = Fp2.add(Z3, t0);
          return new Point(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point.ZERO);
        }
        wNAF(n) {
          return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
            const toInv = Fp2.invertBatch(comp.map((p) => p.pz));
            return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
          });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(n) {
          const I2 = Point.ZERO;
          if (n === _0n6)
            return I2;
          assertGE(n);
          if (n === _1n6)
            return this;
          const { endo } = CURVE;
          if (!endo)
            return wnaf.unsafeLadder(this, n);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
          let k1p = I2;
          let k2p = I2;
          let d = this;
          while (k1 > _0n6 || k2 > _0n6) {
            if (k1 & _1n6)
              k1p = k1p.add(d);
            if (k2 & _1n6)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n6;
            k2 >>= _1n6;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          assertGE(scalar);
          let n = scalar;
          let point, fake;
          const { endo } = CURVE;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f } = this.wNAF(n);
            point = p;
            fake = f;
          }
          return Point.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b2) {
          const G2 = Point.BASE;
          const mul = (P2, a2) => a2 === _0n6 || a2 === _1n6 || !P2.equals(G2) ? P2.multiplyUnsafe(a2) : P2.multiply(a2);
          const sum = mul(this, a).add(mul(Q, b2));
          return sum.is0() ? void 0 : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
          const { px: x, py: y, pz: z2 } = this;
          const is0 = this.is0();
          if (iz == null)
            iz = is0 ? Fp2.ONE : Fp2.inv(z2);
          const ax = Fp2.mul(x, iz);
          const ay = Fp2.mul(y, iz);
          const zz = Fp2.mul(z2, iz);
          if (is0)
            return { x: Fp2.ZERO, y: Fp2.ZERO };
          if (!Fp2.eql(zz, Fp2.ONE))
            throw new Error("invZ was invalid");
          return { x: ax, y: ay };
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n6)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n6)
            return this;
          if (clearCofactor)
            return clearCofactor(Point, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          this.assertValidity();
          return toBytes2(Point, this, isCompressed);
        }
        toHex(isCompressed = true) {
          return ut2.bytesToHex(this.toRawBytes(isCompressed));
        }
      }
      Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp2.ONE);
      Point.ZERO = new Point(Fp2.ZERO, Fp2.ONE, Fp2.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    function validateOpts2(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut2.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass(curveDef) {
      const CURVE = validateOpts2(curveDef);
      const { Fp: Fp2, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp2.BYTES + 1;
      const uncompressedLen = 2 * Fp2.BYTES + 1;
      function isValidFieldElement(num) {
        return _0n6 < num && num < Fp2.ORDER;
      }
      function modN(a) {
        return mod2.mod(a, CURVE_ORDER);
      }
      function invN(a) {
        return mod2.invert(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
          const a = point.toAffine();
          const x = Fp2.toBytes(a.x);
          const cat = ut2.concatBytes;
          if (isCompressed) {
            return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
          } else {
            return cat(Uint8Array.from([4]), x, Fp2.toBytes(a.y));
          }
        },
        fromBytes(bytes3) {
          const len = bytes3.length;
          const head = bytes3[0];
          const tail = bytes3.subarray(1);
          if (len === compressedLen && (head === 2 || head === 3)) {
            const x = ut2.bytesToNumberBE(tail);
            if (!isValidFieldElement(x))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x);
            let y;
            try {
              y = Fp2.sqrt(y2);
            } catch (sqrtError) {
              const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
              throw new Error("Point is not on curve" + suffix);
            }
            const isYOdd = (y & _1n6) === _1n6;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y = Fp2.neg(y);
            return { x, y };
          } else if (len === uncompressedLen && head === 4) {
            const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
            const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
            return { x, y };
          } else {
            throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
          }
        }
      });
      const numToNByteStr = (num) => ut2.bytesToHex(ut2.numberToBytesBE(num, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number2) {
        const HALF = CURVE_ORDER >> _1n6;
        return number2 > HALF;
      }
      function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
      }
      const slcNum = (b2, from2, to) => ut2.bytesToNumberBE(b2.slice(from2, to));
      class Signature {
        constructor(r, s, recovery) {
          this.r = r;
          this.s = s;
          this.recovery = recovery;
          this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex2) {
          const l17 = CURVE.nByteLength;
          hex2 = (0, utils_js_1.ensureBytes)("compactSignature", hex2, l17 * 2);
          return new Signature(slcNum(hex2, 0, l17), slcNum(hex2, l17, 2 * l17));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex2) {
          const { r, s } = exports.DER.toSig((0, utils_js_1.ensureBytes)("DER", hex2));
          return new Signature(r, s);
        }
        assertValidity() {
          if (!isWithinCurveOrder(this.r))
            throw new Error("r must be 0 < r < CURVE.n");
          if (!isWithinCurveOrder(this.s))
            throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
          return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r, s, recovery: rec } = this;
          const h2 = bits2int_modN((0, utils_js_1.ensureBytes)("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
          if (radj >= Fp2.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix2 = (rec & 1) === 0 ? "02" : "03";
          const R2 = Point.fromHex(prefix2 + numToNByteStr(radj));
          const ir = invN(radj);
          const u1 = modN(-h2 * ir);
          const u2 = modN(s * ir);
          const Q = Point.BASE.multiplyAndAddUnsafe(R2, u1, u2);
          if (!Q)
            throw new Error("point at infinify");
          Q.assertValidity();
          return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
          return ut2.hexToBytes(this.toDERHex());
        }
        toDERHex() {
          return exports.DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
          return ut2.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }
      const utils2 = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
          const length = mod2.getMinHashLength(CURVE.n);
          return mod2.mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      function getPublicKey(privateKey, isCompressed = true) {
        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = ut2.isBytes(item);
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr)
          return len === compressedLen || len === uncompressedLen;
        if (str)
          return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b2 = Point.fromHex(publicB);
        return b2.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes3) {
        const num = ut2.bytesToNumberBE(bytes3);
        const delta = bytes3.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num >> BigInt(delta) : num;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes3) {
        return modN(bits2int(bytes3));
      };
      const ORDER_MASK = ut2.bitMask(CURVE.nBitLength);
      function int2octets(num) {
        if (typeof num !== "bigint")
          throw new Error("bigint expected");
        if (!(_0n6 <= num && num < ORDER_MASK))
          throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        return ut2.numberToBytesBE(num, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k2) => k2 in opts))
          throw new Error("sign() legacy options not supported");
        const { hash: hash2, randomBytes: randomBytes2 } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        if (prehash)
          msgHash = (0, utils_js_1.ensureBytes)("prehashed msgHash", hash2(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null && ent !== false) {
          const e = ent === true ? randomBytes2(Fp2.BYTES) : ent;
          seedArgs.push((0, utils_js_1.ensureBytes)("extraEntropy", e));
        }
        const seed = ut2.concatBytes(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k2 = bits2int(kBytes);
          if (!isWithinCurveOrder(k2))
            return;
          const ik = invN(k2);
          const q2 = Point.BASE.multiply(k2).toAffine();
          const r = modN(q2.x);
          if (r === _0n6)
            return;
          const s = modN(ik * modN(m + r * d));
          if (s === _0n6)
            return;
          let recovery = (q2.x === r ? 0 : 2) | Number(q2.y & _1n6);
          let normS = s;
          if (lowS && isBiggerThanHalfOrder(s)) {
            normS = normalizeS(s);
            recovery ^= 1;
          }
          return new Signature(r, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign2(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C = CURVE;
        const drbg = ut2.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig);
      }
      Point.BASE._setWindowSize(8);
      function verify(signature, msgHash, publicKey2, opts = defaultVerOpts) {
        const sg = signature;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        publicKey2 = (0, utils_js_1.ensureBytes)("publicKey", publicKey2);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        const { lowS, prehash } = opts;
        let _sig = void 0;
        let P2;
        try {
          if (typeof sg === "string" || ut2.isBytes(sg)) {
            try {
              _sig = Signature.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports.DER.Err))
                throw derError;
              _sig = Signature.fromCompact(sg);
            }
          } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
            const { r: r2, s: s2 } = sg;
            _sig = new Signature(r2, s2);
          } else {
            throw new Error("PARSE");
          }
          P2 = Point.fromHex(publicKey2);
        } catch (error) {
          if (error.message === "PARSE")
            throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
          return false;
        }
        if (lowS && _sig.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig;
        const h2 = bits2int_modN(msgHash);
        const is = invN(s);
        const u1 = modN(h2 * is);
        const u2 = modN(r * is);
        const R2 = Point.BASE.multiplyAndAddUnsafe(P2, u1, u2)?.toAffine();
        if (!R2)
          return false;
        const v3 = modN(R2.x);
        return v3 === r;
      }
      return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign: sign2,
        verify,
        ProjectivePoint: Point,
        Signature,
        utils: utils2
      };
    }
    function SWUFpSqrtRatio(Fp2, Z2) {
      const q2 = Fp2.ORDER;
      let l17 = _0n6;
      for (let o = q2 - _1n6; o % _2n6 === _0n6; o /= _2n6)
        l17 += _1n6;
      const c1 = l17;
      const _2n_pow_c1_1 = _2n6 << c1 - _1n6 - _1n6;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n6;
      const c2 = (q2 - _1n6) / _2n_pow_c1;
      const c3 = (c2 - _1n6) / _2n6;
      const c4 = _2n_pow_c1 - _1n6;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp2.pow(Z2, c2);
      const c7 = Fp2.pow(Z2, (c2 + _1n6) / _2n6);
      let sqrtRatio = (u, v3) => {
        let tv1 = c6;
        let tv2 = Fp2.pow(v3, c4);
        let tv3 = Fp2.sqr(tv2);
        tv3 = Fp2.mul(tv3, v3);
        let tv5 = Fp2.mul(u, tv3);
        tv5 = Fp2.pow(tv5, c3);
        tv5 = Fp2.mul(tv5, tv2);
        tv2 = Fp2.mul(tv5, v3);
        tv3 = Fp2.mul(tv5, u);
        let tv4 = Fp2.mul(tv3, tv2);
        tv5 = Fp2.pow(tv4, c5);
        let isQR = Fp2.eql(tv5, Fp2.ONE);
        tv2 = Fp2.mul(tv3, c7);
        tv5 = Fp2.mul(tv4, tv1);
        tv3 = Fp2.cmov(tv2, tv3, isQR);
        tv4 = Fp2.cmov(tv5, tv4, isQR);
        for (let i = c1; i > _1n6; i--) {
          let tv52 = i - _2n6;
          tv52 = _2n6 << tv52 - _1n6;
          let tvv5 = Fp2.pow(tv4, tv52);
          const e1 = Fp2.eql(tvv5, Fp2.ONE);
          tv2 = Fp2.mul(tv3, tv1);
          tv1 = Fp2.mul(tv1, tv1);
          tvv5 = Fp2.mul(tv4, tv1);
          tv3 = Fp2.cmov(tv2, tv3, e1);
          tv4 = Fp2.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp2.ORDER % _4n2 === _3n3) {
        const c12 = (Fp2.ORDER - _3n3) / _4n2;
        const c22 = Fp2.sqrt(Fp2.neg(Z2));
        sqrtRatio = (u, v3) => {
          let tv1 = Fp2.sqr(v3);
          const tv2 = Fp2.mul(u, v3);
          tv1 = Fp2.mul(tv1, tv2);
          let y1 = Fp2.pow(tv1, c12);
          y1 = Fp2.mul(y1, tv2);
          const y2 = Fp2.mul(y1, c22);
          const tv3 = Fp2.mul(Fp2.sqr(y1), v3);
          const isQR = Fp2.eql(tv3, u);
          let y = Fp2.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    function mapToCurveSimpleSWU(Fp2, opts) {
      mod2.validateField(Fp2);
      if (!Fp2.isValid(opts.A) || !Fp2.isValid(opts.B) || !Fp2.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio(Fp2, opts.Z);
      if (!Fp2.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp2.sqr(u);
        tv1 = Fp2.mul(tv1, opts.Z);
        tv2 = Fp2.sqr(tv1);
        tv2 = Fp2.add(tv2, tv1);
        tv3 = Fp2.add(tv2, Fp2.ONE);
        tv3 = Fp2.mul(tv3, opts.B);
        tv4 = Fp2.cmov(opts.Z, Fp2.neg(tv2), !Fp2.eql(tv2, Fp2.ZERO));
        tv4 = Fp2.mul(tv4, opts.A);
        tv2 = Fp2.sqr(tv3);
        tv6 = Fp2.sqr(tv4);
        tv5 = Fp2.mul(tv6, opts.A);
        tv2 = Fp2.add(tv2, tv5);
        tv2 = Fp2.mul(tv2, tv3);
        tv6 = Fp2.mul(tv6, tv4);
        tv5 = Fp2.mul(tv6, opts.B);
        tv2 = Fp2.add(tv2, tv5);
        x = Fp2.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp2.mul(tv1, u);
        y = Fp2.mul(y, value);
        x = Fp2.cmov(x, tv3, isValid);
        y = Fp2.cmov(y, value, isValid);
        const e1 = Fp2.isOdd(u) === Fp2.isOdd(y);
        y = Fp2.cmov(Fp2.neg(y), y, e1);
        x = Fp2.div(x, tv4);
        return { x, y };
      };
    }
  }
});

// node_modules/@scure/bip32/node_modules/@noble/curves/_shortw_utils.js
var require_shortw_utils2 = __commonJS({
  "node_modules/@scure/bip32/node_modules/@noble/curves/_shortw_utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHash = getHash;
    exports.createCurve = createCurve;
    var hmac_1 = require_hmac2();
    var utils_1 = require_utils();
    var weierstrass_js_1 = require_weierstrass2();
    function getHash(hash2) {
      return {
        hash: hash2,
        hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash2, key, (0, utils_1.concatBytes)(...msgs)),
        randomBytes: utils_1.randomBytes
      };
    }
    function createCurve(curveDef, defHash) {
      const create = (hash2) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash(hash2) });
      return Object.freeze({ ...create(defHash), create });
    }
  }
});

// node_modules/@scure/bip32/node_modules/@noble/curves/abstract/hash-to-curve.js
var require_hash_to_curve2 = __commonJS({
  "node_modules/@scure/bip32/node_modules/@noble/curves/abstract/hash-to-curve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.expand_message_xmd = expand_message_xmd2;
    exports.expand_message_xof = expand_message_xof;
    exports.hash_to_field = hash_to_field;
    exports.isogenyMap = isogenyMap;
    exports.createHasher = createHasher2;
    var modular_js_1 = require_modular2();
    var utils_js_1 = require_utils11();
    var os2ip = utils_js_1.bytesToNumberBE;
    function i2osp(value, length) {
      if (value < 0 || value >= 1 << 8 * length) {
        throw new Error(`bad I2OSP call: value=${value} length=${length}`);
      }
      const res = Array.from({ length }).fill(0);
      for (let i = length - 1; i >= 0; i--) {
        res[i] = value & 255;
        value >>>= 8;
      }
      return new Uint8Array(res);
    }
    function strxor(a, b2) {
      const arr = new Uint8Array(a.length);
      for (let i = 0; i < a.length; i++) {
        arr[i] = a[i] ^ b2[i];
      }
      return arr;
    }
    function anum(item) {
      if (!Number.isSafeInteger(item))
        throw new Error("number expected");
    }
    function expand_message_xmd2(msg, DST, lenInBytes, H2) {
      (0, utils_js_1.abytes)(msg);
      (0, utils_js_1.abytes)(DST);
      anum(lenInBytes);
      if (DST.length > 255)
        DST = H2((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
      const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H2;
      const ell = Math.ceil(lenInBytes / b_in_bytes);
      if (ell > 255)
        throw new Error("Invalid xmd length");
      const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));
      const Z_pad = i2osp(0, r_in_bytes);
      const l_i_b_str = i2osp(lenInBytes, 2);
      const b2 = new Array(ell);
      const b_0 = H2((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
      b2[0] = H2((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));
      for (let i = 1; i <= ell; i++) {
        const args = [strxor(b_0, b2[i - 1]), i2osp(i + 1, 1), DST_prime];
        b2[i] = H2((0, utils_js_1.concatBytes)(...args));
      }
      const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b2);
      return pseudo_random_bytes.slice(0, lenInBytes);
    }
    function expand_message_xof(msg, DST, lenInBytes, k2, H2) {
      (0, utils_js_1.abytes)(msg);
      (0, utils_js_1.abytes)(DST);
      anum(lenInBytes);
      if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k2 / 8);
        DST = H2.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
      }
      if (lenInBytes > 65535 || DST.length > 255)
        throw new Error("expand_message_xof: invalid lenInBytes");
      return H2.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
    }
    function hash_to_field(msg, count2, options) {
      (0, utils_js_1.validateObject)(options, {
        DST: "stringOrUint8Array",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
      });
      const { p, k: k2, m, hash: hash2, expand: expand3, DST: _DST } = options;
      (0, utils_js_1.abytes)(msg);
      anum(count2);
      const DST = typeof _DST === "string" ? (0, utils_js_1.utf8ToBytes)(_DST) : _DST;
      const log2p = p.toString(2).length;
      const L2 = Math.ceil((log2p + k2) / 8);
      const len_in_bytes = count2 * m * L2;
      let prb;
      if (expand3 === "xmd") {
        prb = expand_message_xmd2(msg, DST, len_in_bytes, hash2);
      } else if (expand3 === "xof") {
        prb = expand_message_xof(msg, DST, len_in_bytes, k2, hash2);
      } else if (expand3 === "_internal_pass") {
        prb = msg;
      } else {
        throw new Error('expand must be "xmd" or "xof"');
      }
      const u = new Array(count2);
      for (let i = 0; i < count2; i++) {
        const e = new Array(m);
        for (let j3 = 0; j3 < m; j3++) {
          const elm_offset = L2 * (j3 + i * m);
          const tv = prb.subarray(elm_offset, elm_offset + L2);
          e[j3] = (0, modular_js_1.mod)(os2ip(tv), p);
        }
        u[i] = e;
      }
      return u;
    }
    function isogenyMap(field, map3) {
      const COEFF = map3.map((i) => Array.from(i).reverse());
      return (x, y) => {
        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
        x = field.div(xNum, xDen);
        y = field.mul(y, field.div(yNum, yDen));
        return { x, y };
      };
    }
    function createHasher2(Point, mapToCurve, def) {
      if (typeof mapToCurve !== "function")
        throw new Error("mapToCurve() must be defined");
      return {
        // Encodes byte string to elliptic curve.
        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        hashToCurve(msg, options) {
          const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
          const u0 = Point.fromAffine(mapToCurve(u[0]));
          const u1 = Point.fromAffine(mapToCurve(u[1]));
          const P2 = u0.add(u1).clearCofactor();
          P2.assertValidity();
          return P2;
        },
        // Encodes byte string to elliptic curve.
        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        encodeToCurve(msg, options) {
          const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
          const P2 = Point.fromAffine(mapToCurve(u[0])).clearCofactor();
          P2.assertValidity();
          return P2;
        },
        // Same as encodeToCurve, but without hash
        mapToCurve(scalars) {
          if (!Array.isArray(scalars))
            throw new Error("mapToCurve: expected array of bigints");
          for (const i of scalars)
            if (typeof i !== "bigint")
              throw new Error(`mapToCurve: expected array of bigints, got ${i} in array`);
          const P2 = Point.fromAffine(mapToCurve(scalars)).clearCofactor();
          P2.assertValidity();
          return P2;
        }
      };
    }
  }
});

// node_modules/@scure/bip32/node_modules/@noble/curves/secp256k1.js
var require_secp256k13 = __commonJS({
  "node_modules/@scure/bip32/node_modules/@noble/curves/secp256k1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;
    var sha256_1 = require_sha256();
    var utils_1 = require_utils();
    var _shortw_utils_js_1 = require_shortw_utils2();
    var hash_to_curve_js_1 = require_hash_to_curve2();
    var modular_js_1 = require_modular2();
    var utils_js_1 = require_utils11();
    var weierstrass_js_1 = require_weierstrass2();
    var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
    var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    var _1n6 = BigInt(1);
    var _2n6 = BigInt(2);
    var divNearest = (a, b2) => (a + b2 / _2n6) / b2;
    function sqrtMod(y) {
      const P2 = secp256k1P;
      const _3n3 = BigInt(3), _6n2 = BigInt(6), _11n2 = BigInt(11), _22n = BigInt(22);
      const _23n2 = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = y * y * y % P2;
      const b3 = b2 * b2 * y % P2;
      const b6 = (0, modular_js_1.pow2)(b3, _3n3, P2) * b3 % P2;
      const b9 = (0, modular_js_1.pow2)(b6, _3n3, P2) * b3 % P2;
      const b11 = (0, modular_js_1.pow2)(b9, _2n6, P2) * b2 % P2;
      const b22 = (0, modular_js_1.pow2)(b11, _11n2, P2) * b11 % P2;
      const b44 = (0, modular_js_1.pow2)(b22, _22n, P2) * b22 % P2;
      const b88 = (0, modular_js_1.pow2)(b44, _44n, P2) * b44 % P2;
      const b176 = (0, modular_js_1.pow2)(b88, _88n, P2) * b88 % P2;
      const b220 = (0, modular_js_1.pow2)(b176, _44n, P2) * b44 % P2;
      const b223 = (0, modular_js_1.pow2)(b220, _3n3, P2) * b3 % P2;
      const t1 = (0, modular_js_1.pow2)(b223, _23n2, P2) * b22 % P2;
      const t2 = (0, modular_js_1.pow2)(t1, _6n2, P2) * b2 % P2;
      const root = (0, modular_js_1.pow2)(t2, _2n6, P2);
      if (!Fp2.eql(Fp2.sqr(root), y))
        throw new Error("Cannot find square root");
      return root;
    }
    var Fp2 = (0, modular_js_1.Field)(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
    exports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
      a: BigInt(0),
      // equation params: a, b
      b: BigInt(7),
      // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
      Fp: Fp2,
      // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
      n: secp256k1N,
      // Curve order, total count of valid points in the field
      // Base point (x, y) aka generator point
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      h: BigInt(1),
      // Cofactor
      lowS: true,
      // Allow only low-S signatures by default in sign() and verify()
      /**
       * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
       * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
       * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
       * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
       */
      endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k2) => {
          const n = secp256k1N;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n6 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest(b2 * k2, n);
          const c2 = divNearest(-b1 * k2, n);
          let k1 = (0, modular_js_1.mod)(k2 - c1 * a1 - c2 * a2, n);
          let k22 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k22 > POW_2_128;
          if (k1neg)
            k1 = n - k1;
          if (k2neg)
            k22 = n - k22;
          if (k1 > POW_2_128 || k22 > POW_2_128) {
            throw new Error("splitScalar: Endomorphism failed, k=" + k2);
          }
          return { k1neg, k1, k2neg, k2: k22 };
        }
      }
    }, sha256_1.sha256);
    var _0n6 = BigInt(0);
    var fe2 = (x) => typeof x === "bigint" && _0n6 < x && x < secp256k1P;
    var ge2 = (x) => typeof x === "bigint" && _0n6 < x && x < secp256k1N;
    var TAGGED_HASH_PREFIXES = {};
    function taggedHash(tag, ...messages) {
      let tagP = TAGGED_HASH_PREFIXES[tag];
      if (tagP === void 0) {
        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
      }
      return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));
    }
    var pointToBytes = (point) => point.toRawBytes(true).slice(1);
    var numTo32b = (n) => (0, utils_js_1.numberToBytesBE)(n, 32);
    var modP = (x) => (0, modular_js_1.mod)(x, secp256k1P);
    var modN = (x) => (0, modular_js_1.mod)(x, secp256k1N);
    var Point = exports.secp256k1.ProjectivePoint;
    var GmulAdd = (Q, a, b2) => Point.BASE.multiplyAndAddUnsafe(Q, a, b2);
    function schnorrGetExtPubKey(priv) {
      let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv);
      let p = Point.fromPrivateKey(d_);
      const scalar = p.hasEvenY() ? d_ : modN(-d_);
      return { scalar, bytes: pointToBytes(p) };
    }
    function lift_x(x) {
      if (!fe2(x))
        throw new Error("bad x: need 0 < x < p");
      const xx = modP(x * x);
      const c = modP(xx * x + BigInt(7));
      let y = sqrtMod(c);
      if (y % _2n6 !== _0n6)
        y = modP(-y);
      const p = new Point(x, y, _1n6);
      p.assertValidity();
      return p;
    }
    function challenge(...args) {
      return modN((0, utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/challenge", ...args)));
    }
    function schnorrGetPublicKey(privateKey) {
      return schnorrGetExtPubKey(privateKey).bytes;
    }
    function schnorrSign(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
      const a = (0, utils_js_1.ensureBytes)("auxRand", auxRand, 32);
      const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/aux", a)));
      const rand = taggedHash("BIP0340/nonce", t, px, m);
      const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand));
      if (k_ === _0n6)
        throw new Error("sign failed: k is zero");
      const { bytes: rx, scalar: k2 } = schnorrGetExtPubKey(k_);
      const e = challenge(rx, px, m);
      const sig2 = new Uint8Array(64);
      sig2.set(rx, 0);
      sig2.set(numTo32b(modN(k2 + e * d)), 32);
      if (!schnorrVerify(sig2, m, px))
        throw new Error("sign: Invalid signature produced");
      return sig2;
    }
    function schnorrVerify(signature, message, publicKey2) {
      const sig2 = (0, utils_js_1.ensureBytes)("signature", signature, 64);
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const pub = (0, utils_js_1.ensureBytes)("publicKey", publicKey2, 32);
      try {
        const P2 = lift_x((0, utils_js_1.bytesToNumberBE)(pub));
        const r = (0, utils_js_1.bytesToNumberBE)(sig2.subarray(0, 32));
        if (!fe2(r))
          return false;
        const s = (0, utils_js_1.bytesToNumberBE)(sig2.subarray(32, 64));
        if (!ge2(s))
          return false;
        const e = challenge(numTo32b(r), pointToBytes(P2), m);
        const R2 = GmulAdd(P2, s, modN(-e));
        if (!R2 || !R2.hasEvenY() || R2.toAffine().x !== r)
          return false;
        return true;
      } catch (error) {
        return false;
      }
    }
    exports.schnorr = (() => ({
      getPublicKey: schnorrGetPublicKey,
      sign: schnorrSign,
      verify: schnorrVerify,
      utils: {
        randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,
        lift_x,
        pointToBytes,
        numberToBytesBE: utils_js_1.numberToBytesBE,
        bytesToNumberBE: utils_js_1.bytesToNumberBE,
        taggedHash,
        mod: modular_js_1.mod
      }
    }))();
    var isoMap = (() => (0, hash_to_curve_js_1.isogenyMap)(Fp2, [
      // xNum
      [
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
        "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
        "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
      ],
      // xDen
      [
        "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
        "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ],
      // yNum
      [
        "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
        "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
        "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
        "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
      ],
      // yDen
      [
        "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
        "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
        "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ]
    ].map((i) => i.map((j3) => BigInt(j3)))))();
    var mapSWU = (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp2, {
      A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
      B: BigInt("1771"),
      Z: Fp2.create(BigInt("-11"))
    }))();
    var htf = (() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, (scalars) => {
      const { x, y } = mapSWU(Fp2.create(scalars[0]));
      return isoMap(x, y);
    }, {
      DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
      encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
      p: Fp2.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha256_1.sha256
    }))();
    exports.hashToCurve = (() => htf.hashToCurve)();
    exports.encodeToCurve = (() => htf.encodeToCurve)();
  }
});

// node_modules/@scure/bip32/node_modules/@scure/base/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/@scure/bip32/node_modules/@scure/base/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.createBase58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64urlnopad = exports.base64url = exports.base64nopad = exports.base64 = exports.base32crockford = exports.base32hexnopad = exports.base32hex = exports.base32nopad = exports.base32 = exports.base16 = exports.utils = void 0;
    exports.assertNumber = assertNumber;
    function assertNumber(n) {
      if (!Number.isSafeInteger(n))
        throw new Error(`Wrong integer: ${n}`);
    }
    function isBytes(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    function chain(...args) {
      const id = (a) => a;
      const wrap = (a, b2) => (c) => a(b2(c));
      const encode = args.map((x) => x.encode).reduceRight(wrap, id);
      const decode2 = args.map((x) => x.decode).reduce(wrap, id);
      return { encode, decode: decode2 };
    }
    function alphabet(alphabet2) {
      return {
        encode: (digits) => {
          if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
            throw new Error("alphabet.encode input should be an array of numbers");
          return digits.map((i) => {
            assertNumber(i);
            if (i < 0 || i >= alphabet2.length)
              throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet2.length})`);
            return alphabet2[i];
          });
        },
        decode: (input) => {
          if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
            throw new Error("alphabet.decode input should be array of strings");
          return input.map((letter) => {
            if (typeof letter !== "string")
              throw new Error(`alphabet.decode: not string element=${letter}`);
            const index = alphabet2.indexOf(letter);
            if (index === -1)
              throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet2}`);
            return index;
          });
        }
      };
    }
    function join(separator = "") {
      if (typeof separator !== "string")
        throw new Error("join separator should be string");
      return {
        encode: (from2) => {
          if (!Array.isArray(from2) || from2.length && typeof from2[0] !== "string")
            throw new Error("join.encode input should be array of strings");
          for (let i of from2)
            if (typeof i !== "string")
              throw new Error(`join.encode: non-string input=${i}`);
          return from2.join(separator);
        },
        decode: (to) => {
          if (typeof to !== "string")
            throw new Error("join.decode input should be string");
          return to.split(separator);
        }
      };
    }
    function padding(bits2, chr = "=") {
      assertNumber(bits2);
      if (typeof chr !== "string")
        throw new Error("padding chr should be string");
      return {
        encode(data) {
          if (!Array.isArray(data) || data.length && typeof data[0] !== "string")
            throw new Error("padding.encode input should be array of strings");
          for (let i of data)
            if (typeof i !== "string")
              throw new Error(`padding.encode: non-string input=${i}`);
          while (data.length * bits2 % 8)
            data.push(chr);
          return data;
        },
        decode(input) {
          if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
            throw new Error("padding.encode input should be array of strings");
          for (let i of input)
            if (typeof i !== "string")
              throw new Error(`padding.decode: non-string input=${i}`);
          let end = input.length;
          if (end * bits2 % 8)
            throw new Error("Invalid padding: string should have whole number of bytes");
          for (; end > 0 && input[end - 1] === chr; end--) {
            if (!((end - 1) * bits2 % 8))
              throw new Error("Invalid padding: string has too much padding");
          }
          return input.slice(0, end);
        }
      };
    }
    function normalize2(fn) {
      if (typeof fn !== "function")
        throw new Error("normalize fn should be function");
      return { encode: (from2) => from2, decode: (to) => fn(to) };
    }
    function convertRadix(data, from2, to) {
      if (from2 < 2)
        throw new Error(`convertRadix: wrong from=${from2}, base cannot be less than 2`);
      if (to < 2)
        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
      if (!Array.isArray(data))
        throw new Error("convertRadix: data should be array");
      if (!data.length)
        return [];
      let pos = 0;
      const res = [];
      const digits = Array.from(data);
      digits.forEach((d) => {
        assertNumber(d);
        if (d < 0 || d >= from2)
          throw new Error(`Wrong integer: ${d}`);
      });
      while (true) {
        let carry = 0;
        let done = true;
        for (let i = pos; i < digits.length; i++) {
          const digit = digits[i];
          const digitBase = from2 * carry + digit;
          if (!Number.isSafeInteger(digitBase) || from2 * carry / from2 !== carry || digitBase - digit !== from2 * carry) {
            throw new Error("convertRadix: carry overflow");
          }
          carry = digitBase % to;
          const rounded = Math.floor(digitBase / to);
          digits[i] = rounded;
          if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
            throw new Error("convertRadix: carry overflow");
          if (!done)
            continue;
          else if (!rounded)
            pos = i;
          else
            done = false;
        }
        res.push(carry);
        if (done)
          break;
      }
      for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
        res.push(0);
      return res.reverse();
    }
    var gcd = (a, b2) => !b2 ? a : gcd(b2, a % b2);
    var radix2carry = (from2, to) => from2 + (to - gcd(from2, to));
    function convertRadix2(data, from2, to, padding2) {
      if (!Array.isArray(data))
        throw new Error("convertRadix2: data should be array");
      if (from2 <= 0 || from2 > 32)
        throw new Error(`convertRadix2: wrong from=${from2}`);
      if (to <= 0 || to > 32)
        throw new Error(`convertRadix2: wrong to=${to}`);
      if (radix2carry(from2, to) > 32) {
        throw new Error(`convertRadix2: carry overflow from=${from2} to=${to} carryBits=${radix2carry(from2, to)}`);
      }
      let carry = 0;
      let pos = 0;
      const mask = 2 ** to - 1;
      const res = [];
      for (const n of data) {
        assertNumber(n);
        if (n >= 2 ** from2)
          throw new Error(`convertRadix2: invalid data word=${n} from=${from2}`);
        carry = carry << from2 | n;
        if (pos + from2 > 32)
          throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from2}`);
        pos += from2;
        for (; pos >= to; pos -= to)
          res.push((carry >> pos - to & mask) >>> 0);
        carry &= 2 ** pos - 1;
      }
      carry = carry << to - pos & mask;
      if (!padding2 && pos >= from2)
        throw new Error("Excess padding");
      if (!padding2 && carry)
        throw new Error(`Non-zero padding: ${carry}`);
      if (padding2 && pos > 0)
        res.push(carry >>> 0);
      return res;
    }
    function radix(num) {
      assertNumber(num);
      return {
        encode: (bytes3) => {
          if (!isBytes(bytes3))
            throw new Error("radix.encode input should be Uint8Array");
          return convertRadix(Array.from(bytes3), 2 ** 8, num);
        },
        decode: (digits) => {
          if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
            throw new Error("radix.decode input should be array of numbers");
          return Uint8Array.from(convertRadix(digits, num, 2 ** 8));
        }
      };
    }
    function radix2(bits2, revPadding = false) {
      assertNumber(bits2);
      if (bits2 <= 0 || bits2 > 32)
        throw new Error("radix2: bits should be in (0..32]");
      if (radix2carry(8, bits2) > 32 || radix2carry(bits2, 8) > 32)
        throw new Error("radix2: carry overflow");
      return {
        encode: (bytes3) => {
          if (!isBytes(bytes3))
            throw new Error("radix2.encode input should be Uint8Array");
          return convertRadix2(Array.from(bytes3), 8, bits2, !revPadding);
        },
        decode: (digits) => {
          if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
            throw new Error("radix2.decode input should be array of numbers");
          return Uint8Array.from(convertRadix2(digits, bits2, 8, revPadding));
        }
      };
    }
    function unsafeWrapper(fn) {
      if (typeof fn !== "function")
        throw new Error("unsafeWrapper fn should be function");
      return function(...args) {
        try {
          return fn.apply(null, args);
        } catch (e) {
        }
      };
    }
    function checksum(len, fn) {
      assertNumber(len);
      if (typeof fn !== "function")
        throw new Error("checksum fn should be function");
      return {
        encode(data) {
          if (!isBytes(data))
            throw new Error("checksum.encode: input should be Uint8Array");
          const checksum2 = fn(data).slice(0, len);
          const res = new Uint8Array(data.length + len);
          res.set(data);
          res.set(checksum2, data.length);
          return res;
        },
        decode(data) {
          if (!isBytes(data))
            throw new Error("checksum.decode: input should be Uint8Array");
          const payload = data.slice(0, -len);
          const newChecksum = fn(payload).slice(0, len);
          const oldChecksum = data.slice(-len);
          for (let i = 0; i < len; i++)
            if (newChecksum[i] !== oldChecksum[i])
              throw new Error("Invalid checksum");
          return payload;
        }
      };
    }
    exports.utils = {
      alphabet,
      chain,
      checksum,
      convertRadix,
      convertRadix2,
      radix,
      radix2,
      join,
      padding
    };
    exports.base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
    exports.base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
    exports.base32nopad = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), join(""));
    exports.base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
    exports.base32hexnopad = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), join(""));
    exports.base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize2((s) => s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
    exports.base64 = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
    exports.base64nopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), join(""));
    exports.base64url = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
    exports.base64urlnopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join(""));
    var genBase58 = (abc) => chain(radix(58), alphabet(abc), join(""));
    exports.base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    exports.base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
    exports.base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
    var XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
    exports.base58xmr = {
      encode(data) {
        let res = "";
        for (let i = 0; i < data.length; i += 8) {
          const block = data.subarray(i, i + 8);
          res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
        }
        return res;
      },
      decode(str) {
        let res = [];
        for (let i = 0; i < str.length; i += 11) {
          const slice = str.slice(i, i + 11);
          const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
          const block = exports.base58.decode(slice);
          for (let j3 = 0; j3 < block.length - blockLen; j3++) {
            if (block[j3] !== 0)
              throw new Error("base58xmr: wrong padding");
          }
          res = res.concat(Array.from(block.slice(block.length - blockLen)));
        }
        return Uint8Array.from(res);
      }
    };
    var createBase58check = (sha2563) => chain(checksum(4, (data) => sha2563(sha2563(data))), exports.base58);
    exports.createBase58check = createBase58check;
    exports.base58check = exports.createBase58check;
    var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
    var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
    function bech32Polymod(pre) {
      const b2 = pre >> 25;
      let chk = (pre & 33554431) << 5;
      for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
        if ((b2 >> i & 1) === 1)
          chk ^= POLYMOD_GENERATORS[i];
      }
      return chk;
    }
    function bechChecksum(prefix2, words, encodingConst = 1) {
      const len = prefix2.length;
      let chk = 1;
      for (let i = 0; i < len; i++) {
        const c = prefix2.charCodeAt(i);
        if (c < 33 || c > 126)
          throw new Error(`Invalid prefix (${prefix2})`);
        chk = bech32Polymod(chk) ^ c >> 5;
      }
      chk = bech32Polymod(chk);
      for (let i = 0; i < len; i++)
        chk = bech32Polymod(chk) ^ prefix2.charCodeAt(i) & 31;
      for (let v3 of words)
        chk = bech32Polymod(chk) ^ v3;
      for (let i = 0; i < 6; i++)
        chk = bech32Polymod(chk);
      chk ^= encodingConst;
      return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));
    }
    function genBech32(encoding) {
      const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
      const _words = radix2(5);
      const fromWords = _words.decode;
      const toWords = _words.encode;
      const fromWordsUnsafe = unsafeWrapper(fromWords);
      function encode(prefix2, words, limit = 90) {
        if (typeof prefix2 !== "string")
          throw new Error(`bech32.encode prefix should be string, not ${typeof prefix2}`);
        if (words instanceof Uint8Array)
          words = Array.from(words);
        if (!Array.isArray(words) || words.length && typeof words[0] !== "number")
          throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
        if (prefix2.length === 0)
          throw new TypeError(`Invalid prefix length ${prefix2.length}`);
        const actualLength = prefix2.length + 7 + words.length;
        if (limit !== false && actualLength > limit)
          throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
        const lowered = prefix2.toLowerCase();
        const sum = bechChecksum(lowered, words, ENCODING_CONST);
        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
      }
      function decode2(str, limit = 90) {
        if (typeof str !== "string")
          throw new Error(`bech32.decode input should be string, not ${typeof str}`);
        if (str.length < 8 || limit !== false && str.length > limit)
          throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
        const lowered = str.toLowerCase();
        if (str !== lowered && str !== str.toUpperCase())
          throw new Error(`String must be lowercase or uppercase`);
        const sepIndex = lowered.lastIndexOf("1");
        if (sepIndex === 0 || sepIndex === -1)
          throw new Error(`Letter "1" must be present between prefix and data only`);
        const prefix2 = lowered.slice(0, sepIndex);
        const data = lowered.slice(sepIndex + 1);
        if (data.length < 6)
          throw new Error("Data must be at least 6 characters long");
        const words = BECH_ALPHABET.decode(data).slice(0, -6);
        const sum = bechChecksum(prefix2, words, ENCODING_CONST);
        if (!data.endsWith(sum))
          throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
        return { prefix: prefix2, words };
      }
      const decodeUnsafe = unsafeWrapper(decode2);
      function decodeToBytes(str) {
        const { prefix: prefix2, words } = decode2(str, false);
        return { prefix: prefix2, words, bytes: fromWords(words) };
      }
      function encodeFromBytes(prefix2, bytes3) {
        return encode(prefix2, toWords(bytes3));
      }
      return {
        encode,
        decode: decode2,
        encodeFromBytes,
        decodeToBytes,
        decodeUnsafe,
        fromWords,
        fromWordsUnsafe,
        toWords
      };
    }
    exports.bech32 = genBech32("bech32");
    exports.bech32m = genBech32("bech32m");
    exports.utf8 = {
      encode: (data) => new TextDecoder().decode(data),
      decode: (str) => new TextEncoder().encode(str)
    };
    exports.hex = chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize2((s) => {
      if (typeof s !== "string" || s.length % 2)
        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
      return s.toLowerCase();
    }));
    var CODERS = {
      utf8: exports.utf8,
      hex: exports.hex,
      base16: exports.base16,
      base32: exports.base32,
      base64: exports.base64,
      base64url: exports.base64url,
      base58: exports.base58,
      base58xmr: exports.base58xmr
    };
    var coderTypeError = "Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr";
    var bytesToString = (type, bytes3) => {
      if (typeof type !== "string" || !CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
      if (!isBytes(bytes3))
        throw new TypeError("bytesToString() expects Uint8Array");
      return CODERS[type].encode(bytes3);
    };
    exports.bytesToString = bytesToString;
    exports.str = exports.bytesToString;
    var stringToBytes = (type, str) => {
      if (!CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
      if (typeof str !== "string")
        throw new TypeError("stringToBytes() expects string");
      return CODERS[type].decode(str);
    };
    exports.stringToBytes = stringToBytes;
    exports.bytes = exports.stringToBytes;
  }
});

// node_modules/@scure/bip32/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@scure/bip32/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HDKey = exports.HARDENED_OFFSET = void 0;
    var hmac_1 = require_hmac2();
    var ripemd160_1 = require_ripemd160();
    var sha256_1 = require_sha256();
    var sha512_1 = require_sha512();
    var _assert_1 = require_assert();
    var utils_1 = require_utils();
    var secp256k1_1 = require_secp256k13();
    var modular_1 = require_modular2();
    var base_1 = require_lib2();
    var Point = secp256k1_1.secp256k1.ProjectivePoint;
    var base58check = (0, base_1.createBase58check)(sha256_1.sha256);
    function bytesToNumber(bytes3) {
      return BigInt(`0x${(0, utils_1.bytesToHex)(bytes3)}`);
    }
    function numberToBytes(num) {
      return (0, utils_1.hexToBytes)(num.toString(16).padStart(64, "0"));
    }
    var MASTER_SECRET2 = (0, utils_1.utf8ToBytes)("Bitcoin seed");
    var BITCOIN_VERSIONS = { private: 76066276, public: 76067358 };
    exports.HARDENED_OFFSET = 2147483648;
    var hash160 = (data) => (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(data));
    var fromU32 = (data) => (0, utils_1.createView)(data).getUint32(0, false);
    var toU32 = (n) => {
      if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {
        throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);
      }
      const buf = new Uint8Array(4);
      (0, utils_1.createView)(buf).setUint32(0, n, false);
      return buf;
    };
    var HDKey = class _HDKey {
      get fingerprint() {
        if (!this.pubHash) {
          throw new Error("No publicKey set!");
        }
        return fromU32(this.pubHash);
      }
      get identifier() {
        return this.pubHash;
      }
      get pubKeyHash() {
        return this.pubHash;
      }
      get privateKey() {
        return this.privKeyBytes || null;
      }
      get publicKey() {
        return this.pubKey || null;
      }
      get privateExtendedKey() {
        const priv = this.privateKey;
        if (!priv) {
          throw new Error("No private key");
        }
        return base58check.encode(this.serialize(this.versions.private, (0, utils_1.concatBytes)(new Uint8Array([0]), priv)));
      }
      get publicExtendedKey() {
        if (!this.pubKey) {
          throw new Error("No public key");
        }
        return base58check.encode(this.serialize(this.versions.public, this.pubKey));
      }
      static fromMasterSeed(seed, versions = BITCOIN_VERSIONS) {
        (0, _assert_1.bytes)(seed);
        if (8 * seed.length < 128 || 8 * seed.length > 512) {
          throw new Error(`HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`);
        }
        const I2 = (0, hmac_1.hmac)(sha512_1.sha512, MASTER_SECRET2, seed);
        return new _HDKey({
          versions,
          chainCode: I2.slice(32),
          privateKey: I2.slice(0, 32)
        });
      }
      static fromExtendedKey(base58key, versions = BITCOIN_VERSIONS) {
        const keyBuffer = base58check.decode(base58key);
        const keyView = (0, utils_1.createView)(keyBuffer);
        const version2 = keyView.getUint32(0, false);
        const opt = {
          versions,
          depth: keyBuffer[4],
          parentFingerprint: keyView.getUint32(5, false),
          index: keyView.getUint32(9, false),
          chainCode: keyBuffer.slice(13, 45)
        };
        const key = keyBuffer.slice(45);
        const isPriv = key[0] === 0;
        if (version2 !== versions[isPriv ? "private" : "public"]) {
          throw new Error("Version mismatch");
        }
        if (isPriv) {
          return new _HDKey({ ...opt, privateKey: key.slice(1) });
        } else {
          return new _HDKey({ ...opt, publicKey: key });
        }
      }
      static fromJSON(json) {
        return _HDKey.fromExtendedKey(json.xpriv);
      }
      constructor(opt) {
        this.depth = 0;
        this.index = 0;
        this.chainCode = null;
        this.parentFingerprint = 0;
        if (!opt || typeof opt !== "object") {
          throw new Error("HDKey.constructor must not be called directly");
        }
        this.versions = opt.versions || BITCOIN_VERSIONS;
        this.depth = opt.depth || 0;
        this.chainCode = opt.chainCode || null;
        this.index = opt.index || 0;
        this.parentFingerprint = opt.parentFingerprint || 0;
        if (!this.depth) {
          if (this.parentFingerprint || this.index) {
            throw new Error("HDKey: zero depth with non-zero index/parent fingerprint");
          }
        }
        if (opt.publicKey && opt.privateKey) {
          throw new Error("HDKey: publicKey and privateKey at same time.");
        }
        if (opt.privateKey) {
          if (!secp256k1_1.secp256k1.utils.isValidPrivateKey(opt.privateKey)) {
            throw new Error("Invalid private key");
          }
          this.privKey = typeof opt.privateKey === "bigint" ? opt.privateKey : bytesToNumber(opt.privateKey);
          this.privKeyBytes = numberToBytes(this.privKey);
          this.pubKey = secp256k1_1.secp256k1.getPublicKey(opt.privateKey, true);
        } else if (opt.publicKey) {
          this.pubKey = Point.fromHex(opt.publicKey).toRawBytes(true);
        } else {
          throw new Error("HDKey: no public or private key provided");
        }
        this.pubHash = hash160(this.pubKey);
      }
      derive(path) {
        if (!/^[mM]'?/.test(path)) {
          throw new Error('Path must start with "m" or "M"');
        }
        if (/^[mM]'?$/.test(path)) {
          return this;
        }
        const parts = path.replace(/^[mM]'?\//, "").split("/");
        let child = this;
        for (const c of parts) {
          const m = /^(\d+)('?)$/.exec(c);
          const m1 = m && m[1];
          if (!m || m.length !== 3 || typeof m1 !== "string") {
            throw new Error(`Invalid child index: ${c}`);
          }
          let idx = +m1;
          if (!Number.isSafeInteger(idx) || idx >= exports.HARDENED_OFFSET) {
            throw new Error("Invalid index");
          }
          if (m[2] === "'") {
            idx += exports.HARDENED_OFFSET;
          }
          child = child.deriveChild(idx);
        }
        return child;
      }
      deriveChild(index) {
        if (!this.pubKey || !this.chainCode) {
          throw new Error("No publicKey or chainCode set");
        }
        let data = toU32(index);
        if (index >= exports.HARDENED_OFFSET) {
          const priv = this.privateKey;
          if (!priv) {
            throw new Error("Could not derive hardened child key");
          }
          data = (0, utils_1.concatBytes)(new Uint8Array([0]), priv, data);
        } else {
          data = (0, utils_1.concatBytes)(this.pubKey, data);
        }
        const I2 = (0, hmac_1.hmac)(sha512_1.sha512, this.chainCode, data);
        const childTweak = bytesToNumber(I2.slice(0, 32));
        const chainCode = I2.slice(32);
        if (!secp256k1_1.secp256k1.utils.isValidPrivateKey(childTweak)) {
          throw new Error("Tweak bigger than curve order");
        }
        const opt = {
          versions: this.versions,
          chainCode,
          depth: this.depth + 1,
          parentFingerprint: this.fingerprint,
          index
        };
        try {
          if (this.privateKey) {
            const added = (0, modular_1.mod)(this.privKey + childTweak, secp256k1_1.secp256k1.CURVE.n);
            if (!secp256k1_1.secp256k1.utils.isValidPrivateKey(added)) {
              throw new Error("The tweak was out of range or the resulted private key is invalid");
            }
            opt.privateKey = added;
          } else {
            const added = Point.fromHex(this.pubKey).add(Point.fromPrivateKey(childTweak));
            if (added.equals(Point.ZERO)) {
              throw new Error("The tweak was equal to negative P, which made the result key invalid");
            }
            opt.publicKey = added.toRawBytes(true);
          }
          return new _HDKey(opt);
        } catch (err) {
          return this.deriveChild(index + 1);
        }
      }
      sign(hash2) {
        if (!this.privateKey) {
          throw new Error("No privateKey set!");
        }
        (0, _assert_1.bytes)(hash2, 32);
        return secp256k1_1.secp256k1.sign(hash2, this.privKey).toCompactRawBytes();
      }
      verify(hash2, signature) {
        (0, _assert_1.bytes)(hash2, 32);
        (0, _assert_1.bytes)(signature, 64);
        if (!this.publicKey) {
          throw new Error("No publicKey set!");
        }
        let sig2;
        try {
          sig2 = secp256k1_1.secp256k1.Signature.fromCompact(signature);
        } catch (error) {
          return false;
        }
        return secp256k1_1.secp256k1.verify(sig2, hash2, this.publicKey);
      }
      wipePrivateData() {
        this.privKey = void 0;
        if (this.privKeyBytes) {
          this.privKeyBytes.fill(0);
          this.privKeyBytes = void 0;
        }
        return this;
      }
      toJSON() {
        return {
          xpriv: this.privateExtendedKey,
          xpub: this.publicExtendedKey
        };
      }
      serialize(version2, key) {
        if (!this.chainCode) {
          throw new Error("No chainCode set");
        }
        (0, _assert_1.bytes)(key, 33);
        return (0, utils_1.concatBytes)(toU32(version2), new Uint8Array([this.depth]), toU32(this.parentFingerprint), toU32(this.index), this.chainCode, key);
      }
    };
    exports.HDKey = HDKey;
  }
});

// node_modules/@noble/hashes/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/@noble/hashes/pbkdf2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pbkdf2Async = exports.pbkdf2 = void 0;
    var _assert_js_1 = require_assert();
    var hmac_js_1 = require_hmac2();
    var utils_js_1 = require_utils();
    function pbkdf2Init2(hash2, _password, _salt, _opts) {
      (0, _assert_js_1.hash)(hash2);
      const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);
      const { c, dkLen, asyncTick } = opts;
      (0, _assert_js_1.number)(c);
      (0, _assert_js_1.number)(dkLen);
      (0, _assert_js_1.number)(asyncTick);
      if (c < 1)
        throw new Error("PBKDF2: iterations (c) should be >= 1");
      const password = (0, utils_js_1.toBytes)(_password);
      const salt = (0, utils_js_1.toBytes)(_salt);
      const DK = new Uint8Array(dkLen);
      const PRF = hmac_js_1.hmac.create(hash2, password);
      const PRFSalt = PRF._cloneInto().update(salt);
      return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
    }
    function pbkdf2Output2(PRF, PRFSalt, DK, prfW, u) {
      PRF.destroy();
      PRFSalt.destroy();
      if (prfW)
        prfW.destroy();
      u.fill(0);
      return DK;
    }
    function pbkdf23(hash2, password, salt, opts) {
      const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init2(hash2, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = (0, utils_js_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        for (let ui = 1; ui < c; ui++) {
          PRF._cloneInto(prfW).update(u).digestInto(u);
          for (let i = 0; i < Ti.length; i++)
            Ti[i] ^= u[i];
        }
      }
      return pbkdf2Output2(PRF, PRFSalt, DK, prfW, u);
    }
    exports.pbkdf2 = pbkdf23;
    async function pbkdf2Async(hash2, password, salt, opts) {
      const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init2(hash2, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = (0, utils_js_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, () => {
          PRF._cloneInto(prfW).update(u).digestInto(u);
          for (let i = 0; i < Ti.length; i++)
            Ti[i] ^= u[i];
        });
      }
      return pbkdf2Output2(PRF, PRFSalt, DK, prfW, u);
    }
    exports.pbkdf2Async = pbkdf2Async;
  }
});

// node_modules/@scure/bip39/node_modules/@scure/base/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/@scure/bip39/node_modules/@scure/base/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.createBase58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64urlnopad = exports.base64url = exports.base64nopad = exports.base64 = exports.base32crockford = exports.base32hexnopad = exports.base32hex = exports.base32nopad = exports.base32 = exports.base16 = exports.utils = void 0;
    exports.assertNumber = assertNumber;
    function assertNumber(n) {
      if (!Number.isSafeInteger(n))
        throw new Error(`Wrong integer: ${n}`);
    }
    function isBytes(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    function chain(...args) {
      const id = (a) => a;
      const wrap = (a, b2) => (c) => a(b2(c));
      const encode = args.map((x) => x.encode).reduceRight(wrap, id);
      const decode2 = args.map((x) => x.decode).reduce(wrap, id);
      return { encode, decode: decode2 };
    }
    function alphabet(alphabet2) {
      return {
        encode: (digits) => {
          if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
            throw new Error("alphabet.encode input should be an array of numbers");
          return digits.map((i) => {
            assertNumber(i);
            if (i < 0 || i >= alphabet2.length)
              throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet2.length})`);
            return alphabet2[i];
          });
        },
        decode: (input) => {
          if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
            throw new Error("alphabet.decode input should be array of strings");
          return input.map((letter) => {
            if (typeof letter !== "string")
              throw new Error(`alphabet.decode: not string element=${letter}`);
            const index = alphabet2.indexOf(letter);
            if (index === -1)
              throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet2}`);
            return index;
          });
        }
      };
    }
    function join(separator = "") {
      if (typeof separator !== "string")
        throw new Error("join separator should be string");
      return {
        encode: (from2) => {
          if (!Array.isArray(from2) || from2.length && typeof from2[0] !== "string")
            throw new Error("join.encode input should be array of strings");
          for (let i of from2)
            if (typeof i !== "string")
              throw new Error(`join.encode: non-string input=${i}`);
          return from2.join(separator);
        },
        decode: (to) => {
          if (typeof to !== "string")
            throw new Error("join.decode input should be string");
          return to.split(separator);
        }
      };
    }
    function padding(bits2, chr = "=") {
      assertNumber(bits2);
      if (typeof chr !== "string")
        throw new Error("padding chr should be string");
      return {
        encode(data) {
          if (!Array.isArray(data) || data.length && typeof data[0] !== "string")
            throw new Error("padding.encode input should be array of strings");
          for (let i of data)
            if (typeof i !== "string")
              throw new Error(`padding.encode: non-string input=${i}`);
          while (data.length * bits2 % 8)
            data.push(chr);
          return data;
        },
        decode(input) {
          if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
            throw new Error("padding.encode input should be array of strings");
          for (let i of input)
            if (typeof i !== "string")
              throw new Error(`padding.decode: non-string input=${i}`);
          let end = input.length;
          if (end * bits2 % 8)
            throw new Error("Invalid padding: string should have whole number of bytes");
          for (; end > 0 && input[end - 1] === chr; end--) {
            if (!((end - 1) * bits2 % 8))
              throw new Error("Invalid padding: string has too much padding");
          }
          return input.slice(0, end);
        }
      };
    }
    function normalize2(fn) {
      if (typeof fn !== "function")
        throw new Error("normalize fn should be function");
      return { encode: (from2) => from2, decode: (to) => fn(to) };
    }
    function convertRadix(data, from2, to) {
      if (from2 < 2)
        throw new Error(`convertRadix: wrong from=${from2}, base cannot be less than 2`);
      if (to < 2)
        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
      if (!Array.isArray(data))
        throw new Error("convertRadix: data should be array");
      if (!data.length)
        return [];
      let pos = 0;
      const res = [];
      const digits = Array.from(data);
      digits.forEach((d) => {
        assertNumber(d);
        if (d < 0 || d >= from2)
          throw new Error(`Wrong integer: ${d}`);
      });
      while (true) {
        let carry = 0;
        let done = true;
        for (let i = pos; i < digits.length; i++) {
          const digit = digits[i];
          const digitBase = from2 * carry + digit;
          if (!Number.isSafeInteger(digitBase) || from2 * carry / from2 !== carry || digitBase - digit !== from2 * carry) {
            throw new Error("convertRadix: carry overflow");
          }
          carry = digitBase % to;
          const rounded = Math.floor(digitBase / to);
          digits[i] = rounded;
          if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
            throw new Error("convertRadix: carry overflow");
          if (!done)
            continue;
          else if (!rounded)
            pos = i;
          else
            done = false;
        }
        res.push(carry);
        if (done)
          break;
      }
      for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
        res.push(0);
      return res.reverse();
    }
    var gcd = (a, b2) => !b2 ? a : gcd(b2, a % b2);
    var radix2carry = (from2, to) => from2 + (to - gcd(from2, to));
    function convertRadix2(data, from2, to, padding2) {
      if (!Array.isArray(data))
        throw new Error("convertRadix2: data should be array");
      if (from2 <= 0 || from2 > 32)
        throw new Error(`convertRadix2: wrong from=${from2}`);
      if (to <= 0 || to > 32)
        throw new Error(`convertRadix2: wrong to=${to}`);
      if (radix2carry(from2, to) > 32) {
        throw new Error(`convertRadix2: carry overflow from=${from2} to=${to} carryBits=${radix2carry(from2, to)}`);
      }
      let carry = 0;
      let pos = 0;
      const mask = 2 ** to - 1;
      const res = [];
      for (const n of data) {
        assertNumber(n);
        if (n >= 2 ** from2)
          throw new Error(`convertRadix2: invalid data word=${n} from=${from2}`);
        carry = carry << from2 | n;
        if (pos + from2 > 32)
          throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from2}`);
        pos += from2;
        for (; pos >= to; pos -= to)
          res.push((carry >> pos - to & mask) >>> 0);
        carry &= 2 ** pos - 1;
      }
      carry = carry << to - pos & mask;
      if (!padding2 && pos >= from2)
        throw new Error("Excess padding");
      if (!padding2 && carry)
        throw new Error(`Non-zero padding: ${carry}`);
      if (padding2 && pos > 0)
        res.push(carry >>> 0);
      return res;
    }
    function radix(num) {
      assertNumber(num);
      return {
        encode: (bytes3) => {
          if (!isBytes(bytes3))
            throw new Error("radix.encode input should be Uint8Array");
          return convertRadix(Array.from(bytes3), 2 ** 8, num);
        },
        decode: (digits) => {
          if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
            throw new Error("radix.decode input should be array of numbers");
          return Uint8Array.from(convertRadix(digits, num, 2 ** 8));
        }
      };
    }
    function radix2(bits2, revPadding = false) {
      assertNumber(bits2);
      if (bits2 <= 0 || bits2 > 32)
        throw new Error("radix2: bits should be in (0..32]");
      if (radix2carry(8, bits2) > 32 || radix2carry(bits2, 8) > 32)
        throw new Error("radix2: carry overflow");
      return {
        encode: (bytes3) => {
          if (!isBytes(bytes3))
            throw new Error("radix2.encode input should be Uint8Array");
          return convertRadix2(Array.from(bytes3), 8, bits2, !revPadding);
        },
        decode: (digits) => {
          if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
            throw new Error("radix2.decode input should be array of numbers");
          return Uint8Array.from(convertRadix2(digits, bits2, 8, revPadding));
        }
      };
    }
    function unsafeWrapper(fn) {
      if (typeof fn !== "function")
        throw new Error("unsafeWrapper fn should be function");
      return function(...args) {
        try {
          return fn.apply(null, args);
        } catch (e) {
        }
      };
    }
    function checksum(len, fn) {
      assertNumber(len);
      if (typeof fn !== "function")
        throw new Error("checksum fn should be function");
      return {
        encode(data) {
          if (!isBytes(data))
            throw new Error("checksum.encode: input should be Uint8Array");
          const checksum2 = fn(data).slice(0, len);
          const res = new Uint8Array(data.length + len);
          res.set(data);
          res.set(checksum2, data.length);
          return res;
        },
        decode(data) {
          if (!isBytes(data))
            throw new Error("checksum.decode: input should be Uint8Array");
          const payload = data.slice(0, -len);
          const newChecksum = fn(payload).slice(0, len);
          const oldChecksum = data.slice(-len);
          for (let i = 0; i < len; i++)
            if (newChecksum[i] !== oldChecksum[i])
              throw new Error("Invalid checksum");
          return payload;
        }
      };
    }
    exports.utils = {
      alphabet,
      chain,
      checksum,
      convertRadix,
      convertRadix2,
      radix,
      radix2,
      join,
      padding
    };
    exports.base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
    exports.base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
    exports.base32nopad = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), join(""));
    exports.base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
    exports.base32hexnopad = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), join(""));
    exports.base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize2((s) => s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
    exports.base64 = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
    exports.base64nopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), join(""));
    exports.base64url = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
    exports.base64urlnopad = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), join(""));
    var genBase58 = (abc) => chain(radix(58), alphabet(abc), join(""));
    exports.base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    exports.base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
    exports.base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
    var XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
    exports.base58xmr = {
      encode(data) {
        let res = "";
        for (let i = 0; i < data.length; i += 8) {
          const block = data.subarray(i, i + 8);
          res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
        }
        return res;
      },
      decode(str) {
        let res = [];
        for (let i = 0; i < str.length; i += 11) {
          const slice = str.slice(i, i + 11);
          const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
          const block = exports.base58.decode(slice);
          for (let j3 = 0; j3 < block.length - blockLen; j3++) {
            if (block[j3] !== 0)
              throw new Error("base58xmr: wrong padding");
          }
          res = res.concat(Array.from(block.slice(block.length - blockLen)));
        }
        return Uint8Array.from(res);
      }
    };
    var createBase58check = (sha2563) => chain(checksum(4, (data) => sha2563(sha2563(data))), exports.base58);
    exports.createBase58check = createBase58check;
    exports.base58check = exports.createBase58check;
    var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
    var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
    function bech32Polymod(pre) {
      const b2 = pre >> 25;
      let chk = (pre & 33554431) << 5;
      for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
        if ((b2 >> i & 1) === 1)
          chk ^= POLYMOD_GENERATORS[i];
      }
      return chk;
    }
    function bechChecksum(prefix2, words, encodingConst = 1) {
      const len = prefix2.length;
      let chk = 1;
      for (let i = 0; i < len; i++) {
        const c = prefix2.charCodeAt(i);
        if (c < 33 || c > 126)
          throw new Error(`Invalid prefix (${prefix2})`);
        chk = bech32Polymod(chk) ^ c >> 5;
      }
      chk = bech32Polymod(chk);
      for (let i = 0; i < len; i++)
        chk = bech32Polymod(chk) ^ prefix2.charCodeAt(i) & 31;
      for (let v3 of words)
        chk = bech32Polymod(chk) ^ v3;
      for (let i = 0; i < 6; i++)
        chk = bech32Polymod(chk);
      chk ^= encodingConst;
      return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));
    }
    function genBech32(encoding) {
      const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
      const _words = radix2(5);
      const fromWords = _words.decode;
      const toWords = _words.encode;
      const fromWordsUnsafe = unsafeWrapper(fromWords);
      function encode(prefix2, words, limit = 90) {
        if (typeof prefix2 !== "string")
          throw new Error(`bech32.encode prefix should be string, not ${typeof prefix2}`);
        if (words instanceof Uint8Array)
          words = Array.from(words);
        if (!Array.isArray(words) || words.length && typeof words[0] !== "number")
          throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
        if (prefix2.length === 0)
          throw new TypeError(`Invalid prefix length ${prefix2.length}`);
        const actualLength = prefix2.length + 7 + words.length;
        if (limit !== false && actualLength > limit)
          throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
        const lowered = prefix2.toLowerCase();
        const sum = bechChecksum(lowered, words, ENCODING_CONST);
        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
      }
      function decode2(str, limit = 90) {
        if (typeof str !== "string")
          throw new Error(`bech32.decode input should be string, not ${typeof str}`);
        if (str.length < 8 || limit !== false && str.length > limit)
          throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
        const lowered = str.toLowerCase();
        if (str !== lowered && str !== str.toUpperCase())
          throw new Error(`String must be lowercase or uppercase`);
        const sepIndex = lowered.lastIndexOf("1");
        if (sepIndex === 0 || sepIndex === -1)
          throw new Error(`Letter "1" must be present between prefix and data only`);
        const prefix2 = lowered.slice(0, sepIndex);
        const data = lowered.slice(sepIndex + 1);
        if (data.length < 6)
          throw new Error("Data must be at least 6 characters long");
        const words = BECH_ALPHABET.decode(data).slice(0, -6);
        const sum = bechChecksum(prefix2, words, ENCODING_CONST);
        if (!data.endsWith(sum))
          throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
        return { prefix: prefix2, words };
      }
      const decodeUnsafe = unsafeWrapper(decode2);
      function decodeToBytes(str) {
        const { prefix: prefix2, words } = decode2(str, false);
        return { prefix: prefix2, words, bytes: fromWords(words) };
      }
      function encodeFromBytes(prefix2, bytes3) {
        return encode(prefix2, toWords(bytes3));
      }
      return {
        encode,
        decode: decode2,
        encodeFromBytes,
        decodeToBytes,
        decodeUnsafe,
        fromWords,
        fromWordsUnsafe,
        toWords
      };
    }
    exports.bech32 = genBech32("bech32");
    exports.bech32m = genBech32("bech32m");
    exports.utf8 = {
      encode: (data) => new TextDecoder().decode(data),
      decode: (str) => new TextEncoder().encode(str)
    };
    exports.hex = chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize2((s) => {
      if (typeof s !== "string" || s.length % 2)
        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
      return s.toLowerCase();
    }));
    var CODERS = {
      utf8: exports.utf8,
      hex: exports.hex,
      base16: exports.base16,
      base32: exports.base32,
      base64: exports.base64,
      base64url: exports.base64url,
      base58: exports.base58,
      base58xmr: exports.base58xmr
    };
    var coderTypeError = "Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr";
    var bytesToString = (type, bytes3) => {
      if (typeof type !== "string" || !CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
      if (!isBytes(bytes3))
        throw new TypeError("bytesToString() expects Uint8Array");
      return CODERS[type].encode(bytes3);
    };
    exports.bytesToString = bytesToString;
    exports.str = exports.bytesToString;
    var stringToBytes = (type, str) => {
      if (!CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
      if (typeof str !== "string")
        throw new TypeError("stringToBytes() expects string");
      return CODERS[type].decode(str);
    };
    exports.stringToBytes = stringToBytes;
    exports.bytes = exports.stringToBytes;
  }
});

// node_modules/@scure/bip39/index.js
var require_bip39 = __commonJS({
  "node_modules/@scure/bip39/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mnemonicToSeedSync = exports.mnemonicToSeed = exports.validateMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.generateMnemonic = void 0;
    var _assert_1 = require_assert();
    var pbkdf2_1 = require_pbkdf2();
    var sha256_1 = require_sha256();
    var sha512_1 = require_sha512();
    var utils_1 = require_utils();
    var base_1 = require_lib4();
    var isJapanese = (wordlist) => wordlist[0] === "あいこくしん";
    function nfkd(str) {
      if (typeof str !== "string")
        throw new TypeError(`Invalid mnemonic type: ${typeof str}`);
      return str.normalize("NFKD");
    }
    function normalize2(str) {
      const norm = nfkd(str);
      const words = norm.split(" ");
      if (![12, 15, 18, 21, 24].includes(words.length))
        throw new Error("Invalid mnemonic");
      return { nfkd: norm, words };
    }
    function assertEntropy(entropy) {
      (0, _assert_1.bytes)(entropy, 16, 20, 24, 28, 32);
    }
    function generateMnemonic2(wordlist, strength = 128) {
      (0, _assert_1.number)(strength);
      if (strength % 32 !== 0 || strength > 256)
        throw new TypeError("Invalid entropy");
      return entropyToMnemonic((0, utils_1.randomBytes)(strength / 8), wordlist);
    }
    exports.generateMnemonic = generateMnemonic2;
    var calcChecksum = (entropy) => {
      const bitsLeft = 8 - entropy.length / 4;
      return new Uint8Array([(0, sha256_1.sha256)(entropy)[0] >> bitsLeft << bitsLeft]);
    };
    function getCoder(wordlist) {
      if (!Array.isArray(wordlist) || wordlist.length !== 2048 || typeof wordlist[0] !== "string")
        throw new Error("Wordlist: expected array of 2048 strings");
      wordlist.forEach((i) => {
        if (typeof i !== "string")
          throw new Error(`Wordlist: non-string element: ${i}`);
      });
      return base_1.utils.chain(base_1.utils.checksum(1, calcChecksum), base_1.utils.radix2(11, true), base_1.utils.alphabet(wordlist));
    }
    function mnemonicToEntropy3(mnemonic, wordlist) {
      const { words } = normalize2(mnemonic);
      const entropy = getCoder(wordlist).decode(words);
      assertEntropy(entropy);
      return entropy;
    }
    exports.mnemonicToEntropy = mnemonicToEntropy3;
    function entropyToMnemonic(entropy, wordlist) {
      assertEntropy(entropy);
      const words = getCoder(wordlist).encode(entropy);
      return words.join(isJapanese(wordlist) ? "　" : " ");
    }
    exports.entropyToMnemonic = entropyToMnemonic;
    function validateMnemonic2(mnemonic, wordlist) {
      try {
        mnemonicToEntropy3(mnemonic, wordlist);
      } catch (e) {
        return false;
      }
      return true;
    }
    exports.validateMnemonic = validateMnemonic2;
    var salt = (passphrase) => nfkd(`mnemonic${passphrase}`);
    function mnemonicToSeed(mnemonic, passphrase = "") {
      return (0, pbkdf2_1.pbkdf2Async)(sha512_1.sha512, normalize2(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });
    }
    exports.mnemonicToSeed = mnemonicToSeed;
    function mnemonicToSeedSync2(mnemonic, passphrase = "") {
      return (0, pbkdf2_1.pbkdf2)(sha512_1.sha512, normalize2(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });
    }
    exports.mnemonicToSeedSync = mnemonicToSeedSync2;
  }
});

// node_modules/@scure/bip39/wordlists/english.js
var require_english = __commonJS({
  "node_modules/@scure/bip39/wordlists/english.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wordlist = void 0;
    exports.wordlist = `abandon
ability
able
about
above
absent
absorb
abstract
absurd
abuse
access
accident
account
accuse
achieve
acid
acoustic
acquire
across
act
action
actor
actress
actual
adapt
add
addict
address
adjust
admit
adult
advance
advice
aerobic
affair
afford
afraid
again
age
agent
agree
ahead
aim
air
airport
aisle
alarm
album
alcohol
alert
alien
all
alley
allow
almost
alone
alpha
already
also
alter
always
amateur
amazing
among
amount
amused
analyst
anchor
ancient
anger
angle
angry
animal
ankle
announce
annual
another
answer
antenna
antique
anxiety
any
apart
apology
appear
apple
approve
april
arch
arctic
area
arena
argue
arm
armed
armor
army
around
arrange
arrest
arrive
arrow
art
artefact
artist
artwork
ask
aspect
assault
asset
assist
assume
asthma
athlete
atom
attack
attend
attitude
attract
auction
audit
august
aunt
author
auto
autumn
average
avocado
avoid
awake
aware
away
awesome
awful
awkward
axis
baby
bachelor
bacon
badge
bag
balance
balcony
ball
bamboo
banana
banner
bar
barely
bargain
barrel
base
basic
basket
battle
beach
bean
beauty
because
become
beef
before
begin
behave
behind
believe
below
belt
bench
benefit
best
betray
better
between
beyond
bicycle
bid
bike
bind
biology
bird
birth
bitter
black
blade
blame
blanket
blast
bleak
bless
blind
blood
blossom
blouse
blue
blur
blush
board
boat
body
boil
bomb
bone
bonus
book
boost
border
boring
borrow
boss
bottom
bounce
box
boy
bracket
brain
brand
brass
brave
bread
breeze
brick
bridge
brief
bright
bring
brisk
broccoli
broken
bronze
broom
brother
brown
brush
bubble
buddy
budget
buffalo
build
bulb
bulk
bullet
bundle
bunker
burden
burger
burst
bus
business
busy
butter
buyer
buzz
cabbage
cabin
cable
cactus
cage
cake
call
calm
camera
camp
can
canal
cancel
candy
cannon
canoe
canvas
canyon
capable
capital
captain
car
carbon
card
cargo
carpet
carry
cart
case
cash
casino
castle
casual
cat
catalog
catch
category
cattle
caught
cause
caution
cave
ceiling
celery
cement
census
century
cereal
certain
chair
chalk
champion
change
chaos
chapter
charge
chase
chat
cheap
check
cheese
chef
cherry
chest
chicken
chief
child
chimney
choice
choose
chronic
chuckle
chunk
churn
cigar
cinnamon
circle
citizen
city
civil
claim
clap
clarify
claw
clay
clean
clerk
clever
click
client
cliff
climb
clinic
clip
clock
clog
close
cloth
cloud
clown
club
clump
cluster
clutch
coach
coast
coconut
code
coffee
coil
coin
collect
color
column
combine
come
comfort
comic
common
company
concert
conduct
confirm
congress
connect
consider
control
convince
cook
cool
copper
copy
coral
core
corn
correct
cost
cotton
couch
country
couple
course
cousin
cover
coyote
crack
cradle
craft
cram
crane
crash
crater
crawl
crazy
cream
credit
creek
crew
cricket
crime
crisp
critic
crop
cross
crouch
crowd
crucial
cruel
cruise
crumble
crunch
crush
cry
crystal
cube
culture
cup
cupboard
curious
current
curtain
curve
cushion
custom
cute
cycle
dad
damage
damp
dance
danger
daring
dash
daughter
dawn
day
deal
debate
debris
decade
december
decide
decline
decorate
decrease
deer
defense
define
defy
degree
delay
deliver
demand
demise
denial
dentist
deny
depart
depend
deposit
depth
deputy
derive
describe
desert
design
desk
despair
destroy
detail
detect
develop
device
devote
diagram
dial
diamond
diary
dice
diesel
diet
differ
digital
dignity
dilemma
dinner
dinosaur
direct
dirt
disagree
discover
disease
dish
dismiss
disorder
display
distance
divert
divide
divorce
dizzy
doctor
document
dog
doll
dolphin
domain
donate
donkey
donor
door
dose
double
dove
draft
dragon
drama
drastic
draw
dream
dress
drift
drill
drink
drip
drive
drop
drum
dry
duck
dumb
dune
during
dust
dutch
duty
dwarf
dynamic
eager
eagle
early
earn
earth
easily
east
easy
echo
ecology
economy
edge
edit
educate
effort
egg
eight
either
elbow
elder
electric
elegant
element
elephant
elevator
elite
else
embark
embody
embrace
emerge
emotion
employ
empower
empty
enable
enact
end
endless
endorse
enemy
energy
enforce
engage
engine
enhance
enjoy
enlist
enough
enrich
enroll
ensure
enter
entire
entry
envelope
episode
equal
equip
era
erase
erode
erosion
error
erupt
escape
essay
essence
estate
eternal
ethics
evidence
evil
evoke
evolve
exact
example
excess
exchange
excite
exclude
excuse
execute
exercise
exhaust
exhibit
exile
exist
exit
exotic
expand
expect
expire
explain
expose
express
extend
extra
eye
eyebrow
fabric
face
faculty
fade
faint
faith
fall
false
fame
family
famous
fan
fancy
fantasy
farm
fashion
fat
fatal
father
fatigue
fault
favorite
feature
february
federal
fee
feed
feel
female
fence
festival
fetch
fever
few
fiber
fiction
field
figure
file
film
filter
final
find
fine
finger
finish
fire
firm
first
fiscal
fish
fit
fitness
fix
flag
flame
flash
flat
flavor
flee
flight
flip
float
flock
floor
flower
fluid
flush
fly
foam
focus
fog
foil
fold
follow
food
foot
force
forest
forget
fork
fortune
forum
forward
fossil
foster
found
fox
fragile
frame
frequent
fresh
friend
fringe
frog
front
frost
frown
frozen
fruit
fuel
fun
funny
furnace
fury
future
gadget
gain
galaxy
gallery
game
gap
garage
garbage
garden
garlic
garment
gas
gasp
gate
gather
gauge
gaze
general
genius
genre
gentle
genuine
gesture
ghost
giant
gift
giggle
ginger
giraffe
girl
give
glad
glance
glare
glass
glide
glimpse
globe
gloom
glory
glove
glow
glue
goat
goddess
gold
good
goose
gorilla
gospel
gossip
govern
gown
grab
grace
grain
grant
grape
grass
gravity
great
green
grid
grief
grit
grocery
group
grow
grunt
guard
guess
guide
guilt
guitar
gun
gym
habit
hair
half
hammer
hamster
hand
happy
harbor
hard
harsh
harvest
hat
have
hawk
hazard
head
health
heart
heavy
hedgehog
height
hello
helmet
help
hen
hero
hidden
high
hill
hint
hip
hire
history
hobby
hockey
hold
hole
holiday
hollow
home
honey
hood
hope
horn
horror
horse
hospital
host
hotel
hour
hover
hub
huge
human
humble
humor
hundred
hungry
hunt
hurdle
hurry
hurt
husband
hybrid
ice
icon
idea
identify
idle
ignore
ill
illegal
illness
image
imitate
immense
immune
impact
impose
improve
impulse
inch
include
income
increase
index
indicate
indoor
industry
infant
inflict
inform
inhale
inherit
initial
inject
injury
inmate
inner
innocent
input
inquiry
insane
insect
inside
inspire
install
intact
interest
into
invest
invite
involve
iron
island
isolate
issue
item
ivory
jacket
jaguar
jar
jazz
jealous
jeans
jelly
jewel
job
join
joke
journey
joy
judge
juice
jump
jungle
junior
junk
just
kangaroo
keen
keep
ketchup
key
kick
kid
kidney
kind
kingdom
kiss
kit
kitchen
kite
kitten
kiwi
knee
knife
knock
know
lab
label
labor
ladder
lady
lake
lamp
language
laptop
large
later
latin
laugh
laundry
lava
law
lawn
lawsuit
layer
lazy
leader
leaf
learn
leave
lecture
left
leg
legal
legend
leisure
lemon
lend
length
lens
leopard
lesson
letter
level
liar
liberty
library
license
life
lift
light
like
limb
limit
link
lion
liquid
list
little
live
lizard
load
loan
lobster
local
lock
logic
lonely
long
loop
lottery
loud
lounge
love
loyal
lucky
luggage
lumber
lunar
lunch
luxury
lyrics
machine
mad
magic
magnet
maid
mail
main
major
make
mammal
man
manage
mandate
mango
mansion
manual
maple
marble
march
margin
marine
market
marriage
mask
mass
master
match
material
math
matrix
matter
maximum
maze
meadow
mean
measure
meat
mechanic
medal
media
melody
melt
member
memory
mention
menu
mercy
merge
merit
merry
mesh
message
metal
method
middle
midnight
milk
million
mimic
mind
minimum
minor
minute
miracle
mirror
misery
miss
mistake
mix
mixed
mixture
mobile
model
modify
mom
moment
monitor
monkey
monster
month
moon
moral
more
morning
mosquito
mother
motion
motor
mountain
mouse
move
movie
much
muffin
mule
multiply
muscle
museum
mushroom
music
must
mutual
myself
mystery
myth
naive
name
napkin
narrow
nasty
nation
nature
near
neck
need
negative
neglect
neither
nephew
nerve
nest
net
network
neutral
never
news
next
nice
night
noble
noise
nominee
noodle
normal
north
nose
notable
note
nothing
notice
novel
now
nuclear
number
nurse
nut
oak
obey
object
oblige
obscure
observe
obtain
obvious
occur
ocean
october
odor
off
offer
office
often
oil
okay
old
olive
olympic
omit
once
one
onion
online
only
open
opera
opinion
oppose
option
orange
orbit
orchard
order
ordinary
organ
orient
original
orphan
ostrich
other
outdoor
outer
output
outside
oval
oven
over
own
owner
oxygen
oyster
ozone
pact
paddle
page
pair
palace
palm
panda
panel
panic
panther
paper
parade
parent
park
parrot
party
pass
patch
path
patient
patrol
pattern
pause
pave
payment
peace
peanut
pear
peasant
pelican
pen
penalty
pencil
people
pepper
perfect
permit
person
pet
phone
photo
phrase
physical
piano
picnic
picture
piece
pig
pigeon
pill
pilot
pink
pioneer
pipe
pistol
pitch
pizza
place
planet
plastic
plate
play
please
pledge
pluck
plug
plunge
poem
poet
point
polar
pole
police
pond
pony
pool
popular
portion
position
possible
post
potato
pottery
poverty
powder
power
practice
praise
predict
prefer
prepare
present
pretty
prevent
price
pride
primary
print
priority
prison
private
prize
problem
process
produce
profit
program
project
promote
proof
property
prosper
protect
proud
provide
public
pudding
pull
pulp
pulse
pumpkin
punch
pupil
puppy
purchase
purity
purpose
purse
push
put
puzzle
pyramid
quality
quantum
quarter
question
quick
quit
quiz
quote
rabbit
raccoon
race
rack
radar
radio
rail
rain
raise
rally
ramp
ranch
random
range
rapid
rare
rate
rather
raven
raw
razor
ready
real
reason
rebel
rebuild
recall
receive
recipe
record
recycle
reduce
reflect
reform
refuse
region
regret
regular
reject
relax
release
relief
rely
remain
remember
remind
remove
render
renew
rent
reopen
repair
repeat
replace
report
require
rescue
resemble
resist
resource
response
result
retire
retreat
return
reunion
reveal
review
reward
rhythm
rib
ribbon
rice
rich
ride
ridge
rifle
right
rigid
ring
riot
ripple
risk
ritual
rival
river
road
roast
robot
robust
rocket
romance
roof
rookie
room
rose
rotate
rough
round
route
royal
rubber
rude
rug
rule
run
runway
rural
sad
saddle
sadness
safe
sail
salad
salmon
salon
salt
salute
same
sample
sand
satisfy
satoshi
sauce
sausage
save
say
scale
scan
scare
scatter
scene
scheme
school
science
scissors
scorpion
scout
scrap
screen
script
scrub
sea
search
season
seat
second
secret
section
security
seed
seek
segment
select
sell
seminar
senior
sense
sentence
series
service
session
settle
setup
seven
shadow
shaft
shallow
share
shed
shell
sheriff
shield
shift
shine
ship
shiver
shock
shoe
shoot
shop
short
shoulder
shove
shrimp
shrug
shuffle
shy
sibling
sick
side
siege
sight
sign
silent
silk
silly
silver
similar
simple
since
sing
siren
sister
situate
six
size
skate
sketch
ski
skill
skin
skirt
skull
slab
slam
sleep
slender
slice
slide
slight
slim
slogan
slot
slow
slush
small
smart
smile
smoke
smooth
snack
snake
snap
sniff
snow
soap
soccer
social
sock
soda
soft
solar
soldier
solid
solution
solve
someone
song
soon
sorry
sort
soul
sound
soup
source
south
space
spare
spatial
spawn
speak
special
speed
spell
spend
sphere
spice
spider
spike
spin
spirit
split
spoil
sponsor
spoon
sport
spot
spray
spread
spring
spy
square
squeeze
squirrel
stable
stadium
staff
stage
stairs
stamp
stand
start
state
stay
steak
steel
stem
step
stereo
stick
still
sting
stock
stomach
stone
stool
story
stove
strategy
street
strike
strong
struggle
student
stuff
stumble
style
subject
submit
subway
success
such
sudden
suffer
sugar
suggest
suit
summer
sun
sunny
sunset
super
supply
supreme
sure
surface
surge
surprise
surround
survey
suspect
sustain
swallow
swamp
swap
swarm
swear
sweet
swift
swim
swing
switch
sword
symbol
symptom
syrup
system
table
tackle
tag
tail
talent
talk
tank
tape
target
task
taste
tattoo
taxi
teach
team
tell
ten
tenant
tennis
tent
term
test
text
thank
that
theme
then
theory
there
they
thing
this
thought
three
thrive
throw
thumb
thunder
ticket
tide
tiger
tilt
timber
time
tiny
tip
tired
tissue
title
toast
tobacco
today
toddler
toe
together
toilet
token
tomato
tomorrow
tone
tongue
tonight
tool
tooth
top
topic
topple
torch
tornado
tortoise
toss
total
tourist
toward
tower
town
toy
track
trade
traffic
tragic
train
transfer
trap
trash
travel
tray
treat
tree
trend
trial
tribe
trick
trigger
trim
trip
trophy
trouble
truck
true
truly
trumpet
trust
truth
try
tube
tuition
tumble
tuna
tunnel
turkey
turn
turtle
twelve
twenty
twice
twin
twist
two
type
typical
ugly
umbrella
unable
unaware
uncle
uncover
under
undo
unfair
unfold
unhappy
uniform
unique
unit
universe
unknown
unlock
until
unusual
unveil
update
upgrade
uphold
upon
upper
upset
urban
urge
usage
use
used
useful
useless
usual
utility
vacant
vacuum
vague
valid
valley
valve
van
vanish
vapor
various
vast
vault
vehicle
velvet
vendor
venture
venue
verb
verify
version
very
vessel
veteran
viable
vibrant
vicious
victory
video
view
village
vintage
violin
virtual
virus
visa
visit
visual
vital
vivid
vocal
voice
void
volcano
volume
vote
voyage
wage
wagon
wait
walk
wall
walnut
want
warfare
warm
warrior
wash
wasp
waste
water
wave
way
wealth
weapon
wear
weasel
weather
web
wedding
weekend
weird
welcome
west
wet
whale
what
wheat
wheel
when
where
whip
whisper
wide
width
wife
wild
will
win
window
wine
wing
wink
winner
winter
wire
wisdom
wise
wish
witness
wolf
woman
wonder
wood
wool
word
work
world
worry
worth
wrap
wreck
wrestle
wrist
write
wrong
yard
year
yellow
you
young
youth
zebra
zero
zone
zoo`.split("\n");
  }
});

// node_modules/xrpl/dist/npm/ECDSA.js
var require_ECDSA = __commonJS({
  "node_modules/xrpl/dist/npm/ECDSA.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ECDSA;
    (function(ECDSA2) {
      ECDSA2["ed25519"] = "ed25519";
      ECDSA2["secp256k1"] = "ecdsa-secp256k1";
    })(ECDSA || (ECDSA = {}));
    exports.default = ECDSA;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/accountDelete.js
var require_accountDelete = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/accountDelete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateAccountDelete = void 0;
    var common_1 = require_common2();
    function validateAccountDelete(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "Destination", common_1.isAccount);
      (0, common_1.validateOptionalField)(tx, "DestinationTag", common_1.isNumber);
      (0, common_1.validateCredentialsList)(tx.CredentialIDs, tx.TransactionType, true, common_1.MAX_AUTHORIZED_CREDENTIALS);
    }
    exports.validateAccountDelete = validateAccountDelete;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/AMMBid.js
var require_AMMBid = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/AMMBid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateAMMBid = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    var MAX_AUTH_ACCOUNTS = 4;
    function validateAMMBid(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.Asset == null) {
        throw new errors_1.ValidationError("AMMBid: missing field Asset");
      }
      if (!(0, common_1.isIssuedCurrency)(tx.Asset)) {
        throw new errors_1.ValidationError("AMMBid: Asset must be a Currency");
      }
      if (tx.Asset2 == null) {
        throw new errors_1.ValidationError("AMMBid: missing field Asset2");
      }
      if (!(0, common_1.isIssuedCurrency)(tx.Asset2)) {
        throw new errors_1.ValidationError("AMMBid: Asset2 must be a Currency");
      }
      if (tx.BidMin != null && !(0, common_1.isAmount)(tx.BidMin)) {
        throw new errors_1.ValidationError("AMMBid: BidMin must be an Amount");
      }
      if (tx.BidMax != null && !(0, common_1.isAmount)(tx.BidMax)) {
        throw new errors_1.ValidationError("AMMBid: BidMax must be an Amount");
      }
      if (tx.AuthAccounts != null) {
        if (!(0, common_1.isArray)(tx.AuthAccounts)) {
          throw new errors_1.ValidationError(`AMMBid: AuthAccounts must be an AuthAccount array`);
        }
        if (tx.AuthAccounts.length > MAX_AUTH_ACCOUNTS) {
          throw new errors_1.ValidationError(`AMMBid: AuthAccounts length must not be greater than ${MAX_AUTH_ACCOUNTS}`);
        }
        validateAuthAccounts(tx.Account, tx.AuthAccounts);
      }
    }
    exports.validateAMMBid = validateAMMBid;
    function validateAuthAccounts(senderAddress, authAccounts) {
      for (const authAccount of authAccounts) {
        if (!(0, common_1.isRecord)(authAccount)) {
          throw new errors_1.ValidationError(`AMMBid: invalid AuthAccounts`);
        }
        if (!(0, common_1.isRecord)(authAccount.AuthAccount)) {
          throw new errors_1.ValidationError(`AMMBid: invalid AuthAccounts`);
        }
        if (authAccount.AuthAccount.Account == null) {
          throw new errors_1.ValidationError(`AMMBid: invalid AuthAccounts`);
        }
        if (typeof authAccount.AuthAccount.Account !== "string") {
          throw new errors_1.ValidationError(`AMMBid: invalid AuthAccounts`);
        }
        if (authAccount.AuthAccount.Account === senderAddress) {
          throw new errors_1.ValidationError(`AMMBid: AuthAccounts must not include sender's address`);
        }
      }
      return true;
    }
  }
});

// node_modules/xrpl/dist/npm/models/transactions/AMMCreate.js
var require_AMMCreate = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/AMMCreate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateAMMCreate = exports.AMM_MAX_TRADING_FEE = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    exports.AMM_MAX_TRADING_FEE = 1e3;
    function validateAMMCreate(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.Amount == null) {
        throw new errors_1.ValidationError("AMMCreate: missing field Amount");
      }
      if (!(0, common_1.isAmount)(tx.Amount)) {
        throw new errors_1.ValidationError("AMMCreate: Amount must be an Amount");
      }
      if (tx.Amount2 == null) {
        throw new errors_1.ValidationError("AMMCreate: missing field Amount2");
      }
      if (!(0, common_1.isAmount)(tx.Amount2)) {
        throw new errors_1.ValidationError("AMMCreate: Amount2 must be an Amount");
      }
      if (tx.TradingFee == null) {
        throw new errors_1.ValidationError("AMMCreate: missing field TradingFee");
      }
      if (typeof tx.TradingFee !== "number") {
        throw new errors_1.ValidationError("AMMCreate: TradingFee must be a number");
      }
      if (tx.TradingFee < 0 || tx.TradingFee > exports.AMM_MAX_TRADING_FEE) {
        throw new errors_1.ValidationError(`AMMCreate: TradingFee must be between 0 and ${exports.AMM_MAX_TRADING_FEE}`);
      }
    }
    exports.validateAMMCreate = validateAMMCreate;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/AMMDelete.js
var require_AMMDelete = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/AMMDelete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateAMMDelete = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateAMMDelete(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.Asset == null) {
        throw new errors_1.ValidationError("AMMDelete: missing field Asset");
      }
      if (!(0, common_1.isIssuedCurrency)(tx.Asset)) {
        throw new errors_1.ValidationError("AMMDelete: Asset must be a Currency");
      }
      if (tx.Asset2 == null) {
        throw new errors_1.ValidationError("AMMDelete: missing field Asset2");
      }
      if (!(0, common_1.isIssuedCurrency)(tx.Asset2)) {
        throw new errors_1.ValidationError("AMMDelete: Asset2 must be a Currency");
      }
    }
    exports.validateAMMDelete = validateAMMDelete;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/AMMVote.js
var require_AMMVote = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/AMMVote.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateAMMVote = void 0;
    var errors_1 = require_errors();
    var AMMCreate_1 = require_AMMCreate();
    var common_1 = require_common2();
    function validateAMMVote(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.Asset == null) {
        throw new errors_1.ValidationError("AMMVote: missing field Asset");
      }
      if (!(0, common_1.isIssuedCurrency)(tx.Asset)) {
        throw new errors_1.ValidationError("AMMVote: Asset must be a Currency");
      }
      if (tx.Asset2 == null) {
        throw new errors_1.ValidationError("AMMVote: missing field Asset2");
      }
      if (!(0, common_1.isIssuedCurrency)(tx.Asset2)) {
        throw new errors_1.ValidationError("AMMVote: Asset2 must be a Currency");
      }
      if (tx.TradingFee == null) {
        throw new errors_1.ValidationError("AMMVote: missing field TradingFee");
      }
      if (typeof tx.TradingFee !== "number") {
        throw new errors_1.ValidationError("AMMVote: TradingFee must be a number");
      }
      if (tx.TradingFee < 0 || tx.TradingFee > AMMCreate_1.AMM_MAX_TRADING_FEE) {
        throw new errors_1.ValidationError(`AMMVote: TradingFee must be between 0 and ${AMMCreate_1.AMM_MAX_TRADING_FEE}`);
      }
    }
    exports.validateAMMVote = validateAMMVote;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/checkCancel.js
var require_checkCancel = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/checkCancel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateCheckCancel = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateCheckCancel(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.CheckID !== void 0 && typeof tx.CheckID !== "string") {
        throw new errors_1.ValidationError("CheckCancel: invalid CheckID");
      }
    }
    exports.validateCheckCancel = validateCheckCancel;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/checkCash.js
var require_checkCash = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/checkCash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateCheckCash = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateCheckCash(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.Amount == null && tx.DeliverMin == null) {
        throw new errors_1.ValidationError("CheckCash: must have either Amount or DeliverMin");
      }
      if (tx.Amount != null && tx.DeliverMin != null) {
        throw new errors_1.ValidationError("CheckCash: cannot have both Amount and DeliverMin");
      }
      if (tx.Amount != null && tx.Amount !== void 0 && !(0, common_1.isAmount)(tx.Amount)) {
        throw new errors_1.ValidationError("CheckCash: invalid Amount");
      }
      if (tx.DeliverMin != null && tx.DeliverMin !== void 0 && !(0, common_1.isAmount)(tx.DeliverMin)) {
        throw new errors_1.ValidationError("CheckCash: invalid DeliverMin");
      }
      if (tx.CheckID !== void 0 && typeof tx.CheckID !== "string") {
        throw new errors_1.ValidationError("CheckCash: invalid CheckID");
      }
    }
    exports.validateCheckCash = validateCheckCash;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/checkCreate.js
var require_checkCreate = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/checkCreate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateCheckCreate = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateCheckCreate(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.SendMax === void 0) {
        throw new errors_1.ValidationError("CheckCreate: missing field SendMax");
      }
      (0, common_1.validateRequiredField)(tx, "Destination", common_1.isAccount);
      (0, common_1.validateOptionalField)(tx, "DestinationTag", common_1.isNumber);
      if (typeof tx.SendMax !== "string" && !(0, common_1.isIssuedCurrencyAmount)(tx.SendMax)) {
        throw new errors_1.ValidationError("CheckCreate: invalid SendMax");
      }
      if (tx.Expiration !== void 0 && typeof tx.Expiration !== "number") {
        throw new errors_1.ValidationError("CheckCreate: invalid Expiration");
      }
      if (tx.InvoiceID !== void 0 && typeof tx.InvoiceID !== "string") {
        throw new errors_1.ValidationError("CheckCreate: invalid InvoiceID");
      }
    }
    exports.validateCheckCreate = validateCheckCreate;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/clawback.js
var require_clawback = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/clawback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateClawback = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateClawback(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "Amount", common_1.isClawbackAmount);
      (0, common_1.validateOptionalField)(tx, "Holder", common_1.isAccount);
      if (!(0, common_1.isIssuedCurrencyAmount)(tx.Amount) && !(0, common_1.isMPTAmount)(tx.Amount)) {
        throw new errors_1.ValidationError("Clawback: invalid Amount");
      }
      if ((0, common_1.isIssuedCurrencyAmount)(tx.Amount) && tx.Account === tx.Amount.issuer) {
        throw new errors_1.ValidationError("Clawback: invalid holder Account");
      }
      if ((0, common_1.isMPTAmount)(tx.Amount) && tx.Account === tx.Holder) {
        throw new errors_1.ValidationError("Clawback: invalid holder Account");
      }
      if ((0, common_1.isIssuedCurrencyAmount)(tx.Amount) && tx.Holder) {
        throw new errors_1.ValidationError("Clawback: cannot have Holder for currency");
      }
      if ((0, common_1.isMPTAmount)(tx.Amount) && !tx.Holder) {
        throw new errors_1.ValidationError("Clawback: missing Holder");
      }
    }
    exports.validateClawback = validateClawback;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/CredentialAccept.js
var require_CredentialAccept = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/CredentialAccept.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateCredentialAccept = void 0;
    var common_1 = require_common2();
    function validateCredentialAccept(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "Account", common_1.isString);
      (0, common_1.validateRequiredField)(tx, "Issuer", common_1.isString);
      (0, common_1.validateCredentialType)(tx);
    }
    exports.validateCredentialAccept = validateCredentialAccept;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/CredentialCreate.js
var require_CredentialCreate = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/CredentialCreate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateCredentialCreate = void 0;
    var utils_1 = require_browser2();
    var errors_1 = require_errors();
    var common_1 = require_common2();
    var MAX_URI_LENGTH = 256;
    function validateCredentialCreate(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "Account", common_1.isString);
      (0, common_1.validateRequiredField)(tx, "Subject", common_1.isString);
      (0, common_1.validateCredentialType)(tx);
      (0, common_1.validateOptionalField)(tx, "Expiration", common_1.isNumber);
      validateURI(tx.URI);
    }
    exports.validateCredentialCreate = validateCredentialCreate;
    function validateURI(URI) {
      if (URI === void 0) {
        return;
      }
      if (typeof URI !== "string") {
        throw new errors_1.ValidationError("CredentialCreate: invalid field URI");
      }
      if (URI.length === 0) {
        throw new errors_1.ValidationError("CredentialCreate: URI cannot be an empty string");
      } else if (URI.length > MAX_URI_LENGTH) {
        throw new errors_1.ValidationError(`CredentialCreate: URI length must be <= ${MAX_URI_LENGTH}`);
      }
      if (!utils_1.HEX_REGEX.test(URI)) {
        throw new errors_1.ValidationError("CredentialCreate: URI must be encoded in hex");
      }
    }
  }
});

// node_modules/xrpl/dist/npm/models/transactions/CredentialDelete.js
var require_CredentialDelete = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/CredentialDelete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateCredentialDelete = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateCredentialDelete(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (!tx.Subject && !tx.Issuer) {
        throw new errors_1.ValidationError("CredentialDelete: either `Issuer` or `Subject` must be provided");
      }
      (0, common_1.validateRequiredField)(tx, "Account", common_1.isString);
      (0, common_1.validateCredentialType)(tx);
      (0, common_1.validateOptionalField)(tx, "Subject", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "Issuer", common_1.isString);
    }
    exports.validateCredentialDelete = validateCredentialDelete;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/delegateSet.js
var require_delegateSet = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/delegateSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateDelegateSet = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    var PERMISSIONS_MAX_LENGTH = 10;
    var NON_DELEGATABLE_TRANSACTIONS = /* @__PURE__ */ new Set([
      "AccountSet",
      "SetRegularKey",
      "SignerListSet",
      "DelegateSet",
      "AccountDelete",
      "Batch",
      "EnableAmendment",
      "SetFee",
      "UNLModify"
    ]);
    function validateDelegateSet(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "Authorize", common_1.isAccount);
      if (tx.Authorize === tx.Account) {
        throw new errors_1.ValidationError("DelegateSet: Authorize and Account must be different.");
      }
      (0, common_1.validateRequiredField)(tx, "Permissions", Array.isArray);
      const permissions = tx.Permissions;
      if (permissions.length > PERMISSIONS_MAX_LENGTH) {
        throw new errors_1.ValidationError(`DelegateSet: Permissions array length cannot be greater than ${PERMISSIONS_MAX_LENGTH}.`);
      }
      const permissionValueSet = /* @__PURE__ */ new Set();
      permissions.forEach((permission) => {
        if (permission == null || Object.keys(permission).length !== 1 || permission.Permission == null || Object.keys(permission.Permission).length !== 1) {
          throw new errors_1.ValidationError("DelegateSet: Permissions array element is malformed");
        }
        const permissionValue = permission.Permission.PermissionValue;
        if (permissionValue == null) {
          throw new errors_1.ValidationError("DelegateSet: PermissionValue must be defined");
        }
        if (typeof permissionValue !== "string") {
          throw new errors_1.ValidationError("DelegateSet: PermissionValue must be a string");
        }
        if (NON_DELEGATABLE_TRANSACTIONS.has(permissionValue)) {
          throw new errors_1.ValidationError(`DelegateSet: PermissionValue contains a non-delegatable transaction ${permissionValue}`);
        }
        permissionValueSet.add(permissionValue);
      });
      if (permissions.length !== permissionValueSet.size) {
        throw new errors_1.ValidationError("DelegateSet: Permissions array cannot contain duplicate values");
      }
    }
    exports.validateDelegateSet = validateDelegateSet;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/depositPreauth.js
var require_depositPreauth = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/depositPreauth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateDepositPreauth = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateDepositPreauth(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      validateSingleAuthorizationFieldProvided(tx);
      if (tx.Authorize !== void 0) {
        if (typeof tx.Authorize !== "string") {
          throw new errors_1.ValidationError("DepositPreauth: Authorize must be a string");
        }
        if (tx.Account === tx.Authorize) {
          throw new errors_1.ValidationError("DepositPreauth: Account can't preauthorize its own address");
        }
      } else if (tx.Unauthorize !== void 0) {
        if (typeof tx.Unauthorize !== "string") {
          throw new errors_1.ValidationError("DepositPreauth: Unauthorize must be a string");
        }
        if (tx.Account === tx.Unauthorize) {
          throw new errors_1.ValidationError("DepositPreauth: Account can't unauthorize its own address");
        }
      } else if (tx.AuthorizeCredentials !== void 0) {
        (0, common_1.validateCredentialsList)(tx.AuthorizeCredentials, tx.TransactionType, false, common_1.MAX_AUTHORIZED_CREDENTIALS);
      } else if (tx.UnauthorizeCredentials !== void 0) {
        (0, common_1.validateCredentialsList)(tx.UnauthorizeCredentials, tx.TransactionType, false, common_1.MAX_AUTHORIZED_CREDENTIALS);
      }
    }
    exports.validateDepositPreauth = validateDepositPreauth;
    function validateSingleAuthorizationFieldProvided(tx) {
      const fields = [
        "Authorize",
        "Unauthorize",
        "AuthorizeCredentials",
        "UnauthorizeCredentials"
      ];
      const countProvided = fields.filter((key) => tx[key] !== void 0).length;
      if (countProvided !== 1) {
        throw new errors_1.ValidationError("DepositPreauth: Requires exactly one field of the following: Authorize, Unauthorize, AuthorizeCredentials, UnauthorizeCredentials.");
      }
    }
  }
});

// node_modules/xrpl/dist/npm/models/transactions/DIDDelete.js
var require_DIDDelete = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/DIDDelete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateDIDDelete = void 0;
    var common_1 = require_common2();
    function validateDIDDelete(tx) {
      (0, common_1.validateBaseTransaction)(tx);
    }
    exports.validateDIDDelete = validateDIDDelete;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/DIDSet.js
var require_DIDSet = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/DIDSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateDIDSet = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateDIDSet(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateOptionalField)(tx, "Data", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "DIDDocument", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "URI", common_1.isString);
      if (tx.Data === void 0 && tx.DIDDocument === void 0 && tx.URI === void 0) {
        throw new errors_1.ValidationError("DIDSet: Must have at least one of `Data`, `DIDDocument`, and `URI`");
      }
    }
    exports.validateDIDSet = validateDIDSet;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/escrowCancel.js
var require_escrowCancel = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/escrowCancel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateEscrowCancel = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateEscrowCancel(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "Owner", common_1.isAccount);
      if (tx.OfferSequence == null) {
        throw new errors_1.ValidationError("EscrowCancel: missing OfferSequence");
      }
      if (typeof tx.OfferSequence !== "number" && typeof tx.OfferSequence !== "string" || Number.isNaN(Number(tx.OfferSequence))) {
        throw new errors_1.ValidationError("EscrowCancel: OfferSequence must be a number");
      }
    }
    exports.validateEscrowCancel = validateEscrowCancel;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/escrowCreate.js
var require_escrowCreate = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/escrowCreate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateEscrowCreate = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateEscrowCreate(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "Amount", common_1.isAmount);
      (0, common_1.validateRequiredField)(tx, "Destination", common_1.isAccount);
      (0, common_1.validateOptionalField)(tx, "DestinationTag", common_1.isNumber);
      if (tx.CancelAfter === void 0 && tx.FinishAfter === void 0) {
        throw new errors_1.ValidationError("EscrowCreate: Either CancelAfter or FinishAfter must be specified");
      }
      if (tx.FinishAfter === void 0 && tx.Condition === void 0) {
        throw new errors_1.ValidationError("EscrowCreate: Either Condition or FinishAfter must be specified");
      }
      if (tx.CancelAfter !== void 0 && typeof tx.CancelAfter !== "number") {
        throw new errors_1.ValidationError("EscrowCreate: CancelAfter must be a number");
      }
      if (tx.FinishAfter !== void 0 && typeof tx.FinishAfter !== "number") {
        throw new errors_1.ValidationError("EscrowCreate: FinishAfter must be a number");
      }
      if (tx.Condition !== void 0 && typeof tx.Condition !== "string") {
        throw new errors_1.ValidationError("EscrowCreate: Condition must be a string");
      }
    }
    exports.validateEscrowCreate = validateEscrowCreate;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/escrowFinish.js
var require_escrowFinish = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/escrowFinish.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateEscrowFinish = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateEscrowFinish(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "Owner", common_1.isAccount);
      (0, common_1.validateCredentialsList)(tx.CredentialIDs, tx.TransactionType, true, common_1.MAX_AUTHORIZED_CREDENTIALS);
      if (tx.OfferSequence == null) {
        throw new errors_1.ValidationError("EscrowFinish: missing field OfferSequence");
      }
      if (typeof tx.OfferSequence !== "number" && typeof tx.OfferSequence !== "string" || Number.isNaN(Number(tx.OfferSequence))) {
        throw new errors_1.ValidationError("EscrowFinish: OfferSequence must be a number");
      }
      if (tx.Condition !== void 0 && typeof tx.Condition !== "string") {
        throw new errors_1.ValidationError("EscrowFinish: Condition must be a string");
      }
      if (tx.Fulfillment !== void 0 && typeof tx.Fulfillment !== "string") {
        throw new errors_1.ValidationError("EscrowFinish: Fulfillment must be a string");
      }
    }
    exports.validateEscrowFinish = validateEscrowFinish;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/MPTokenIssuanceDestroy.js
var require_MPTokenIssuanceDestroy = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/MPTokenIssuanceDestroy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateMPTokenIssuanceDestroy = void 0;
    var common_1 = require_common2();
    function validateMPTokenIssuanceDestroy(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "MPTokenIssuanceID", common_1.isString);
    }
    exports.validateMPTokenIssuanceDestroy = validateMPTokenIssuanceDestroy;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/NFTokenAcceptOffer.js
var require_NFTokenAcceptOffer = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/NFTokenAcceptOffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateNFTokenAcceptOffer = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateNFTokenBrokerFee(tx) {
      const value = (0, common_1.parseAmountValue)(tx.NFTokenBrokerFee);
      if (Number.isNaN(value)) {
        throw new errors_1.ValidationError("NFTokenAcceptOffer: invalid NFTokenBrokerFee");
      }
      if (value <= 0) {
        throw new errors_1.ValidationError("NFTokenAcceptOffer: NFTokenBrokerFee must be greater than 0; omit if there is no fee");
      }
      if (tx.NFTokenSellOffer == null || tx.NFTokenBuyOffer == null) {
        throw new errors_1.ValidationError("NFTokenAcceptOffer: both NFTokenSellOffer and NFTokenBuyOffer must be set if using brokered mode");
      }
    }
    function validateNFTokenAcceptOffer(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.NFTokenBrokerFee != null) {
        validateNFTokenBrokerFee(tx);
      }
      if (tx.NFTokenSellOffer == null && tx.NFTokenBuyOffer == null) {
        throw new errors_1.ValidationError("NFTokenAcceptOffer: must set either NFTokenSellOffer or NFTokenBuyOffer");
      }
    }
    exports.validateNFTokenAcceptOffer = validateNFTokenAcceptOffer;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/NFTokenBurn.js
var require_NFTokenBurn = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/NFTokenBurn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateNFTokenBurn = void 0;
    var common_1 = require_common2();
    function validateNFTokenBurn(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "NFTokenID", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "Owner", common_1.isAccount);
    }
    exports.validateNFTokenBurn = validateNFTokenBurn;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/NFTokenCancelOffer.js
var require_NFTokenCancelOffer = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/NFTokenCancelOffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateNFTokenCancelOffer = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateNFTokenCancelOffer(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (!(0, common_1.isArray)(tx.NFTokenOffers)) {
        throw new errors_1.ValidationError("NFTokenCancelOffer: missing field NFTokenOffers");
      }
      if (tx.NFTokenOffers.length < 1) {
        throw new errors_1.ValidationError("NFTokenCancelOffer: empty field NFTokenOffers");
      }
    }
    exports.validateNFTokenCancelOffer = validateNFTokenCancelOffer;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/NFTokenModify.js
var require_NFTokenModify = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/NFTokenModify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateNFTokenModify = void 0;
    var errors_1 = require_errors();
    var utils_1 = require_utils8();
    var common_1 = require_common2();
    function validateNFTokenModify(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "NFTokenID", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "Owner", common_1.isAccount);
      (0, common_1.validateOptionalField)(tx, "URI", common_1.isString);
      if (tx.URI !== void 0 && typeof tx.URI === "string") {
        if (tx.URI === "") {
          throw new errors_1.ValidationError("NFTokenModify: URI must not be empty string");
        }
        if (!(0, utils_1.isHex)(tx.URI)) {
          throw new errors_1.ValidationError("NFTokenModify: URI must be in hex format");
        }
      }
    }
    exports.validateNFTokenModify = validateNFTokenModify;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/offerCancel.js
var require_offerCancel = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/offerCancel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateOfferCancel = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateOfferCancel(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.OfferSequence === void 0) {
        throw new errors_1.ValidationError("OfferCancel: missing field OfferSequence");
      }
      if (typeof tx.OfferSequence !== "number") {
        throw new errors_1.ValidationError("OfferCancel: OfferSequence must be a number");
      }
    }
    exports.validateOfferCancel = validateOfferCancel;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/oracleDelete.js
var require_oracleDelete = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/oracleDelete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateOracleDelete = void 0;
    var common_1 = require_common2();
    function validateOracleDelete(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "OracleDocumentID", common_1.isNumber);
    }
    exports.validateOracleDelete = validateOracleDelete;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/oracleSet.js
var require_oracleSet = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/oracleSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateOracleSet = void 0;
    var errors_1 = require_errors();
    var utils_1 = require_utils8();
    var common_1 = require_common2();
    var PRICE_DATA_SERIES_MAX_LENGTH = 10;
    var SCALE_MAX = 10;
    var MINIMUM_ASSET_PRICE_LENGTH = 1;
    var MAXIMUM_ASSET_PRICE_LENGTH = 16;
    function validateOracleSet(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "OracleDocumentID", common_1.isNumber);
      (0, common_1.validateRequiredField)(tx, "LastUpdateTime", common_1.isNumber);
      (0, common_1.validateOptionalField)(tx, "Provider", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "URI", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "AssetClass", common_1.isString);
      (0, common_1.validateRequiredField)(tx, "PriceDataSeries", (value) => {
        if (!(0, common_1.isArray)(value)) {
          throw new errors_1.ValidationError("OracleSet: PriceDataSeries must be an array");
        }
        if (value.length > PRICE_DATA_SERIES_MAX_LENGTH) {
          throw new errors_1.ValidationError(`OracleSet: PriceDataSeries must have at most ${PRICE_DATA_SERIES_MAX_LENGTH} PriceData objects`);
        }
        for (const priceData of value) {
          if (!(0, common_1.isRecord)(priceData)) {
            throw new errors_1.ValidationError("OracleSet: PriceDataSeries must be an array of objects");
          }
          const priceDataInner = priceData.PriceData;
          if (!(0, common_1.isRecord)(priceDataInner)) {
            throw new errors_1.ValidationError("OracleSet: PriceDataSeries must have a `PriceData` object");
          }
          if (Object.keys(priceData).length !== 1) {
            throw new errors_1.ValidationError("OracleSet: PriceDataSeries must only have a single PriceData object");
          }
          if (priceDataInner.BaseAsset == null || typeof priceDataInner.BaseAsset !== "string") {
            throw new errors_1.ValidationError("OracleSet: PriceDataSeries must have a `BaseAsset` string");
          }
          if (typeof priceDataInner.QuoteAsset !== "string") {
            throw new errors_1.ValidationError("OracleSet: PriceDataSeries must have a `QuoteAsset` string");
          }
          if (priceDataInner.AssetPrice == null !== (priceDataInner.Scale == null)) {
            throw new errors_1.ValidationError("OracleSet: PriceDataSeries must have both `AssetPrice` and `Scale` if any are present");
          }
          if ("AssetPrice" in priceDataInner) {
            if (!(0, common_1.isNumber)(priceDataInner.AssetPrice)) {
              if (typeof priceDataInner.AssetPrice !== "string") {
                throw new errors_1.ValidationError("OracleSet: Field AssetPrice must be a string or a number");
              }
              if (!(0, utils_1.isHex)(priceDataInner.AssetPrice)) {
                throw new errors_1.ValidationError("OracleSet: Field AssetPrice must be a valid hex string");
              }
              if (priceDataInner.AssetPrice.length < MINIMUM_ASSET_PRICE_LENGTH || priceDataInner.AssetPrice.length > MAXIMUM_ASSET_PRICE_LENGTH) {
                throw new errors_1.ValidationError(`OracleSet: Length of AssetPrice field must be between ${MINIMUM_ASSET_PRICE_LENGTH} and ${MAXIMUM_ASSET_PRICE_LENGTH} characters long`);
              }
            }
          }
          if ("Scale" in priceDataInner) {
            if (!(0, common_1.isNumber)(priceDataInner.Scale)) {
              throw new errors_1.ValidationError("OracleSet: invalid field Scale");
            }
            if (priceDataInner.Scale < 0 || priceDataInner.Scale > SCALE_MAX) {
              throw new errors_1.ValidationError(`OracleSet: Scale must be in range 0-${SCALE_MAX}`);
            }
          }
        }
        return true;
      });
    }
    exports.validateOracleSet = validateOracleSet;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/paymentChannelCreate.js
var require_paymentChannelCreate = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/paymentChannelCreate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validatePaymentChannelCreate = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validatePaymentChannelCreate(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.Amount === void 0) {
        throw new errors_1.ValidationError("PaymentChannelCreate: missing Amount");
      }
      if (typeof tx.Amount !== "string") {
        throw new errors_1.ValidationError("PaymentChannelCreate: Amount must be a string");
      }
      (0, common_1.validateRequiredField)(tx, "Destination", common_1.isAccount);
      (0, common_1.validateOptionalField)(tx, "DestinationTag", common_1.isNumber);
      if (tx.SettleDelay === void 0) {
        throw new errors_1.ValidationError("PaymentChannelCreate: missing SettleDelay");
      }
      if (typeof tx.SettleDelay !== "number") {
        throw new errors_1.ValidationError("PaymentChannelCreate: SettleDelay must be a number");
      }
      if (tx.PublicKey === void 0) {
        throw new errors_1.ValidationError("PaymentChannelCreate: missing PublicKey");
      }
      if (typeof tx.PublicKey !== "string") {
        throw new errors_1.ValidationError("PaymentChannelCreate: PublicKey must be a string");
      }
      if (tx.CancelAfter !== void 0 && typeof tx.CancelAfter !== "number") {
        throw new errors_1.ValidationError("PaymentChannelCreate: CancelAfter must be a number");
      }
    }
    exports.validatePaymentChannelCreate = validatePaymentChannelCreate;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/paymentChannelFund.js
var require_paymentChannelFund = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/paymentChannelFund.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validatePaymentChannelFund = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validatePaymentChannelFund(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.Channel === void 0) {
        throw new errors_1.ValidationError("PaymentChannelFund: missing Channel");
      }
      if (typeof tx.Channel !== "string") {
        throw new errors_1.ValidationError("PaymentChannelFund: Channel must be a string");
      }
      if (tx.Amount === void 0) {
        throw new errors_1.ValidationError("PaymentChannelFund: missing Amount");
      }
      if (typeof tx.Amount !== "string") {
        throw new errors_1.ValidationError("PaymentChannelFund: Amount must be a string");
      }
      if (tx.Expiration !== void 0 && typeof tx.Expiration !== "number") {
        throw new errors_1.ValidationError("PaymentChannelFund: Expiration must be a number");
      }
    }
    exports.validatePaymentChannelFund = validatePaymentChannelFund;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/permissionedDomainDelete.js
var require_permissionedDomainDelete = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/permissionedDomainDelete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validatePermissionedDomainDelete = void 0;
    var common_1 = require_common2();
    function validatePermissionedDomainDelete(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "DomainID", common_1.isString);
    }
    exports.validatePermissionedDomainDelete = validatePermissionedDomainDelete;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/permissionedDomainSet.js
var require_permissionedDomainSet = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/permissionedDomainSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validatePermissionedDomainSet = void 0;
    var common_1 = require_common2();
    var MAX_ACCEPTED_CREDENTIALS = 10;
    function validatePermissionedDomainSet(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateOptionalField)(tx, "DomainID", common_1.isString);
      (0, common_1.validateRequiredField)(tx, "AcceptedCredentials", common_1.isArray);
      (0, common_1.validateCredentialsList)(tx.AcceptedCredentials, tx.TransactionType, false, MAX_ACCEPTED_CREDENTIALS);
    }
    exports.validatePermissionedDomainSet = validatePermissionedDomainSet;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/setRegularKey.js
var require_setRegularKey = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/setRegularKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSetRegularKey = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    function validateSetRegularKey(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      if (tx.RegularKey !== void 0 && typeof tx.RegularKey !== "string") {
        throw new errors_1.ValidationError("SetRegularKey: RegularKey must be a string");
      }
    }
    exports.validateSetRegularKey = validateSetRegularKey;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/signerListSet.js
var require_signerListSet = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/signerListSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSignerListSet = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    var MAX_SIGNERS = 32;
    var HEX_WALLET_LOCATOR_REGEX = /^[0-9A-Fa-f]{64}$/u;
    function validateSignerListSet(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "SignerQuorum", common_1.isNumber);
      if (tx.SignerQuorum === 0) {
        return;
      }
      (0, common_1.validateRequiredField)(tx, "SignerEntries", common_1.isArray);
      if (tx.SignerEntries.length === 0) {
        throw new errors_1.ValidationError("SignerListSet: need at least 1 member in SignerEntries");
      }
      if (tx.SignerEntries.length > MAX_SIGNERS) {
        throw new errors_1.ValidationError(`SignerListSet: maximum of ${MAX_SIGNERS} members allowed in SignerEntries`);
      }
      for (const entry of tx.SignerEntries) {
        if (!(0, common_1.isRecord)(entry) || !(0, common_1.isRecord)(entry.SignerEntry)) {
          throw new errors_1.ValidationError("SignerListSet: SignerEntries must be an array of SignerEntry objects");
        }
        const signerEntry = entry.SignerEntry;
        const { WalletLocator } = signerEntry;
        if (WalletLocator != null && (!(0, common_1.isString)(WalletLocator) || !HEX_WALLET_LOCATOR_REGEX.test(WalletLocator))) {
          throw new errors_1.ValidationError(`SignerListSet: WalletLocator in SignerEntry must be a 256-bit (32-byte) hexadecimal value`);
        }
      }
    }
    exports.validateSignerListSet = validateSignerListSet;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/ticketCreate.js
var require_ticketCreate = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/ticketCreate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTicketCreate = void 0;
    var errors_1 = require_errors();
    var common_1 = require_common2();
    var MAX_TICKETS = 250;
    function validateTicketCreate(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      const { TicketCount } = tx;
      if (TicketCount === void 0) {
        throw new errors_1.ValidationError("TicketCreate: missing field TicketCount");
      }
      if (typeof TicketCount !== "number") {
        throw new errors_1.ValidationError("TicketCreate: TicketCount must be a number");
      }
      if (!Number.isInteger(TicketCount) || TicketCount < 1 || TicketCount > MAX_TICKETS) {
        throw new errors_1.ValidationError("TicketCreate: TicketCount must be an integer from 1 to 250");
      }
    }
    exports.validateTicketCreate = validateTicketCreate;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/vaultClawback.js
var require_vaultClawback = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/vaultClawback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateVaultClawback = void 0;
    var common_1 = require_common2();
    function validateVaultClawback(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "VaultID", common_1.isString);
      (0, common_1.validateRequiredField)(tx, "Holder", common_1.isAccount);
      (0, common_1.validateOptionalField)(tx, "Amount", common_1.isClawbackAmount);
    }
    exports.validateVaultClawback = validateVaultClawback;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/vaultDelete.js
var require_vaultDelete = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/vaultDelete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateVaultDelete = void 0;
    var common_1 = require_common2();
    function validateVaultDelete(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "VaultID", common_1.isString);
    }
    exports.validateVaultDelete = validateVaultDelete;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/vaultDeposit.js
var require_vaultDeposit = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/vaultDeposit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateVaultDeposit = void 0;
    var common_1 = require_common2();
    function validateVaultDeposit(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "VaultID", common_1.isString);
      (0, common_1.validateRequiredField)(tx, "Amount", common_1.isAmount);
    }
    exports.validateVaultDeposit = validateVaultDeposit;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/vaultSet.js
var require_vaultSet = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/vaultSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateVaultSet = void 0;
    var errors_1 = require_errors();
    var utils_1 = require_utils8();
    var common_1 = require_common2();
    function validateVaultSet(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "VaultID", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "Data", common_1.isString);
      (0, common_1.validateOptionalField)(tx, "AssetsMaximum", common_1.isXRPLNumber);
      (0, common_1.validateOptionalField)(tx, "DomainID", common_1.isString);
      if (tx.Data !== void 0) {
        const dataHex = tx.Data;
        if (!(0, utils_1.isHex)(dataHex)) {
          throw new errors_1.ValidationError("VaultSet: Data must be a valid hex string");
        }
        const dataByteLength = dataHex.length / 2;
        if (dataByteLength > common_1.VAULT_DATA_MAX_BYTE_LENGTH) {
          throw new errors_1.ValidationError(`VaultSet: Data exceeds ${common_1.VAULT_DATA_MAX_BYTE_LENGTH} bytes (actual: ${dataByteLength})`);
        }
      }
    }
    exports.validateVaultSet = validateVaultSet;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/vaultWithdraw.js
var require_vaultWithdraw = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/vaultWithdraw.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateVaultWithdraw = void 0;
    var common_1 = require_common2();
    function validateVaultWithdraw(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "VaultID", common_1.isString);
      (0, common_1.validateRequiredField)(tx, "Amount", common_1.isAmount);
      (0, common_1.validateOptionalField)(tx, "Destination", common_1.isAccount);
    }
    exports.validateVaultWithdraw = validateVaultWithdraw;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/XChainAccountCreateCommit.js
var require_XChainAccountCreateCommit = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/XChainAccountCreateCommit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateXChainAccountCreateCommit = void 0;
    var common_1 = require_common2();
    function validateXChainAccountCreateCommit(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "XChainBridge", common_1.isXChainBridge);
      (0, common_1.validateRequiredField)(tx, "SignatureReward", common_1.isAmount);
      (0, common_1.validateRequiredField)(tx, "Destination", common_1.isAccount);
      (0, common_1.validateRequiredField)(tx, "Amount", common_1.isAmount);
    }
    exports.validateXChainAccountCreateCommit = validateXChainAccountCreateCommit;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/XChainAddAccountCreateAttestation.js
var require_XChainAddAccountCreateAttestation = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/XChainAddAccountCreateAttestation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateXChainAddAccountCreateAttestation = void 0;
    var common_1 = require_common2();
    function validateXChainAddAccountCreateAttestation(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "Amount", common_1.isAmount);
      (0, common_1.validateRequiredField)(tx, "AttestationRewardAccount", common_1.isAccount);
      (0, common_1.validateRequiredField)(tx, "AttestationSignerAccount", common_1.isAccount);
      (0, common_1.validateRequiredField)(tx, "Destination", common_1.isAccount);
      (0, common_1.validateRequiredField)(tx, "OtherChainSource", common_1.isAccount);
      (0, common_1.validateRequiredField)(tx, "PublicKey", common_1.isString);
      (0, common_1.validateRequiredField)(tx, "Signature", common_1.isString);
      (0, common_1.validateRequiredField)(tx, "SignatureReward", common_1.isAmount);
      (0, common_1.validateRequiredField)(tx, "WasLockingChainSend", (inp) => inp === 0 || inp === 1);
      (0, common_1.validateRequiredField)(tx, "XChainAccountCreateCount", (inp) => (0, common_1.isNumber)(inp) || (0, common_1.isString)(inp));
      (0, common_1.validateRequiredField)(tx, "XChainBridge", common_1.isXChainBridge);
    }
    exports.validateXChainAddAccountCreateAttestation = validateXChainAddAccountCreateAttestation;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/XChainAddClaimAttestation.js
var require_XChainAddClaimAttestation = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/XChainAddClaimAttestation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateXChainAddClaimAttestation = void 0;
    var common_1 = require_common2();
    function validateXChainAddClaimAttestation(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "Amount", common_1.isAmount);
      (0, common_1.validateRequiredField)(tx, "AttestationRewardAccount", common_1.isAccount);
      (0, common_1.validateRequiredField)(tx, "AttestationSignerAccount", common_1.isAccount);
      (0, common_1.validateOptionalField)(tx, "Destination", common_1.isAccount);
      (0, common_1.validateRequiredField)(tx, "OtherChainSource", common_1.isAccount);
      (0, common_1.validateRequiredField)(tx, "PublicKey", common_1.isString);
      (0, common_1.validateRequiredField)(tx, "Signature", common_1.isString);
      (0, common_1.validateRequiredField)(tx, "WasLockingChainSend", (inp) => inp === 0 || inp === 1);
      (0, common_1.validateRequiredField)(tx, "XChainBridge", common_1.isXChainBridge);
      (0, common_1.validateRequiredField)(tx, "XChainClaimID", (inp) => (0, common_1.isNumber)(inp) || (0, common_1.isString)(inp));
    }
    exports.validateXChainAddClaimAttestation = validateXChainAddClaimAttestation;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/XChainClaim.js
var require_XChainClaim = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/XChainClaim.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateXChainClaim = void 0;
    var common_1 = require_common2();
    function validateXChainClaim(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "XChainBridge", common_1.isXChainBridge);
      (0, common_1.validateRequiredField)(tx, "XChainClaimID", (inp) => (0, common_1.isNumber)(inp) || (0, common_1.isString)(inp));
      (0, common_1.validateRequiredField)(tx, "Destination", common_1.isAccount);
      (0, common_1.validateOptionalField)(tx, "DestinationTag", common_1.isNumber);
      (0, common_1.validateRequiredField)(tx, "Amount", common_1.isAmount);
    }
    exports.validateXChainClaim = validateXChainClaim;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/XChainCommit.js
var require_XChainCommit = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/XChainCommit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateXChainCommit = void 0;
    var common_1 = require_common2();
    function validateXChainCommit(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "XChainBridge", common_1.isXChainBridge);
      (0, common_1.validateRequiredField)(tx, "XChainClaimID", (inp) => (0, common_1.isNumber)(inp) || (0, common_1.isString)(inp));
      (0, common_1.validateOptionalField)(tx, "OtherChainDestination", common_1.isAccount);
      (0, common_1.validateRequiredField)(tx, "Amount", common_1.isAmount);
    }
    exports.validateXChainCommit = validateXChainCommit;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/XChainCreateBridge.js
var require_XChainCreateBridge = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/XChainCreateBridge.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateXChainCreateBridge = void 0;
    var common_1 = require_common2();
    function validateXChainCreateBridge(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "XChainBridge", common_1.isXChainBridge);
      (0, common_1.validateRequiredField)(tx, "SignatureReward", common_1.isAmount);
      (0, common_1.validateOptionalField)(tx, "MinAccountCreateAmount", common_1.isAmount);
    }
    exports.validateXChainCreateBridge = validateXChainCreateBridge;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/XChainCreateClaimID.js
var require_XChainCreateClaimID = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/XChainCreateClaimID.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateXChainCreateClaimID = void 0;
    var common_1 = require_common2();
    function validateXChainCreateClaimID(tx) {
      (0, common_1.validateBaseTransaction)(tx);
      (0, common_1.validateRequiredField)(tx, "XChainBridge", common_1.isXChainBridge);
      (0, common_1.validateRequiredField)(tx, "SignatureReward", common_1.isAmount);
      (0, common_1.validateRequiredField)(tx, "OtherChainSource", common_1.isAccount);
    }
    exports.validateXChainCreateClaimID = validateXChainCreateClaimID;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/transaction.js
var require_transaction = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/transaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validate = void 0;
    var errors_1 = require_errors();
    var flags_1 = require_flags();
    var accountDelete_1 = require_accountDelete();
    var accountSet_1 = require_accountSet();
    var AMMBid_1 = require_AMMBid();
    var AMMClawback_1 = require_AMMClawback();
    var AMMCreate_1 = require_AMMCreate();
    var AMMDelete_1 = require_AMMDelete();
    var AMMDeposit_1 = require_AMMDeposit();
    var AMMVote_1 = require_AMMVote();
    var AMMWithdraw_1 = require_AMMWithdraw();
    var batch_1 = require_batch();
    var checkCancel_1 = require_checkCancel();
    var checkCash_1 = require_checkCash();
    var checkCreate_1 = require_checkCreate();
    var clawback_1 = require_clawback();
    var common_1 = require_common2();
    var CredentialAccept_1 = require_CredentialAccept();
    var CredentialCreate_1 = require_CredentialCreate();
    var CredentialDelete_1 = require_CredentialDelete();
    var delegateSet_1 = require_delegateSet();
    var depositPreauth_1 = require_depositPreauth();
    var DIDDelete_1 = require_DIDDelete();
    var DIDSet_1 = require_DIDSet();
    var escrowCancel_1 = require_escrowCancel();
    var escrowCreate_1 = require_escrowCreate();
    var escrowFinish_1 = require_escrowFinish();
    var MPTokenAuthorize_1 = require_MPTokenAuthorize();
    var MPTokenIssuanceCreate_1 = require_MPTokenIssuanceCreate();
    var MPTokenIssuanceDestroy_1 = require_MPTokenIssuanceDestroy();
    var MPTokenIssuanceSet_1 = require_MPTokenIssuanceSet();
    var NFTokenAcceptOffer_1 = require_NFTokenAcceptOffer();
    var NFTokenBurn_1 = require_NFTokenBurn();
    var NFTokenCancelOffer_1 = require_NFTokenCancelOffer();
    var NFTokenCreateOffer_1 = require_NFTokenCreateOffer();
    var NFTokenMint_1 = require_NFTokenMint();
    var NFTokenModify_1 = require_NFTokenModify();
    var offerCancel_1 = require_offerCancel();
    var offerCreate_1 = require_offerCreate();
    var oracleDelete_1 = require_oracleDelete();
    var oracleSet_1 = require_oracleSet();
    var payment_1 = require_payment();
    var paymentChannelClaim_1 = require_paymentChannelClaim();
    var paymentChannelCreate_1 = require_paymentChannelCreate();
    var paymentChannelFund_1 = require_paymentChannelFund();
    var permissionedDomainDelete_1 = require_permissionedDomainDelete();
    var permissionedDomainSet_1 = require_permissionedDomainSet();
    var setRegularKey_1 = require_setRegularKey();
    var signerListSet_1 = require_signerListSet();
    var ticketCreate_1 = require_ticketCreate();
    var trustSet_1 = require_trustSet();
    var vaultClawback_1 = require_vaultClawback();
    var vaultCreate_1 = require_vaultCreate();
    var vaultDelete_1 = require_vaultDelete();
    var vaultDeposit_1 = require_vaultDeposit();
    var vaultSet_1 = require_vaultSet();
    var vaultWithdraw_1 = require_vaultWithdraw();
    var XChainAccountCreateCommit_1 = require_XChainAccountCreateCommit();
    var XChainAddAccountCreateAttestation_1 = require_XChainAddAccountCreateAttestation();
    var XChainAddClaimAttestation_1 = require_XChainAddClaimAttestation();
    var XChainClaim_1 = require_XChainClaim();
    var XChainCommit_1 = require_XChainCommit();
    var XChainCreateBridge_1 = require_XChainCreateBridge();
    var XChainCreateClaimID_1 = require_XChainCreateClaimID();
    var XChainModifyBridge_1 = require_XChainModifyBridge();
    function validate(transaction) {
      const tx = Object.assign({}, transaction);
      (0, common_1.validateBaseTransaction)(tx);
      Object.keys(tx).forEach((key) => {
        const standard_currency_code_len = 3;
        const value = tx[key];
        if (value && (0, common_1.isIssuedCurrencyAmount)(value)) {
          const txCurrency = value.currency;
          if (txCurrency.length === standard_currency_code_len && txCurrency.toUpperCase() === "XRP") {
            throw new errors_1.ValidationError(`Cannot have an issued currency with a similar standard code to XRP (received '${txCurrency}'). XRP is not an issued currency.`);
          }
        }
      });
      tx.Flags = (0, flags_1.convertTxFlagsToNumber)(tx);
      switch (tx.TransactionType) {
        case "AMMBid":
          (0, AMMBid_1.validateAMMBid)(tx);
          break;
        case "AMMClawback":
          (0, AMMClawback_1.validateAMMClawback)(tx);
          break;
        case "AMMCreate":
          (0, AMMCreate_1.validateAMMCreate)(tx);
          break;
        case "AMMDelete":
          (0, AMMDelete_1.validateAMMDelete)(tx);
          break;
        case "AMMDeposit":
          (0, AMMDeposit_1.validateAMMDeposit)(tx);
          break;
        case "AMMVote":
          (0, AMMVote_1.validateAMMVote)(tx);
          break;
        case "AMMWithdraw":
          (0, AMMWithdraw_1.validateAMMWithdraw)(tx);
          break;
        case "AccountDelete":
          (0, accountDelete_1.validateAccountDelete)(tx);
          break;
        case "AccountSet":
          (0, accountSet_1.validateAccountSet)(tx);
          break;
        case "Batch":
          (0, batch_1.validateBatch)(tx);
          tx.RawTransactions.forEach((innerTx) => {
            validate(innerTx.RawTransaction);
          });
          break;
        case "CheckCancel":
          (0, checkCancel_1.validateCheckCancel)(tx);
          break;
        case "CheckCash":
          (0, checkCash_1.validateCheckCash)(tx);
          break;
        case "CheckCreate":
          (0, checkCreate_1.validateCheckCreate)(tx);
          break;
        case "Clawback":
          (0, clawback_1.validateClawback)(tx);
          break;
        case "CredentialAccept":
          (0, CredentialAccept_1.validateCredentialAccept)(tx);
          break;
        case "CredentialCreate":
          (0, CredentialCreate_1.validateCredentialCreate)(tx);
          break;
        case "CredentialDelete":
          (0, CredentialDelete_1.validateCredentialDelete)(tx);
          break;
        case "DIDDelete":
          (0, DIDDelete_1.validateDIDDelete)(tx);
          break;
        case "DIDSet":
          (0, DIDSet_1.validateDIDSet)(tx);
          break;
        case "DelegateSet":
          (0, delegateSet_1.validateDelegateSet)(tx);
          break;
        case "DepositPreauth":
          (0, depositPreauth_1.validateDepositPreauth)(tx);
          break;
        case "EscrowCancel":
          (0, escrowCancel_1.validateEscrowCancel)(tx);
          break;
        case "EscrowCreate":
          (0, escrowCreate_1.validateEscrowCreate)(tx);
          break;
        case "EscrowFinish":
          (0, escrowFinish_1.validateEscrowFinish)(tx);
          break;
        case "MPTokenAuthorize":
          (0, MPTokenAuthorize_1.validateMPTokenAuthorize)(tx);
          break;
        case "MPTokenIssuanceCreate":
          (0, MPTokenIssuanceCreate_1.validateMPTokenIssuanceCreate)(tx);
          break;
        case "MPTokenIssuanceDestroy":
          (0, MPTokenIssuanceDestroy_1.validateMPTokenIssuanceDestroy)(tx);
          break;
        case "MPTokenIssuanceSet":
          (0, MPTokenIssuanceSet_1.validateMPTokenIssuanceSet)(tx);
          break;
        case "NFTokenAcceptOffer":
          (0, NFTokenAcceptOffer_1.validateNFTokenAcceptOffer)(tx);
          break;
        case "NFTokenBurn":
          (0, NFTokenBurn_1.validateNFTokenBurn)(tx);
          break;
        case "NFTokenCancelOffer":
          (0, NFTokenCancelOffer_1.validateNFTokenCancelOffer)(tx);
          break;
        case "NFTokenCreateOffer":
          (0, NFTokenCreateOffer_1.validateNFTokenCreateOffer)(tx);
          break;
        case "NFTokenMint":
          (0, NFTokenMint_1.validateNFTokenMint)(tx);
          break;
        case "NFTokenModify":
          (0, NFTokenModify_1.validateNFTokenModify)(tx);
          break;
        case "OfferCancel":
          (0, offerCancel_1.validateOfferCancel)(tx);
          break;
        case "OfferCreate":
          (0, offerCreate_1.validateOfferCreate)(tx);
          break;
        case "OracleDelete":
          (0, oracleDelete_1.validateOracleDelete)(tx);
          break;
        case "OracleSet":
          (0, oracleSet_1.validateOracleSet)(tx);
          break;
        case "Payment":
          (0, payment_1.validatePayment)(tx);
          break;
        case "PaymentChannelClaim":
          (0, paymentChannelClaim_1.validatePaymentChannelClaim)(tx);
          break;
        case "PaymentChannelCreate":
          (0, paymentChannelCreate_1.validatePaymentChannelCreate)(tx);
          break;
        case "PaymentChannelFund":
          (0, paymentChannelFund_1.validatePaymentChannelFund)(tx);
          break;
        case "PermissionedDomainSet":
          (0, permissionedDomainSet_1.validatePermissionedDomainSet)(tx);
          break;
        case "PermissionedDomainDelete":
          (0, permissionedDomainDelete_1.validatePermissionedDomainDelete)(tx);
          break;
        case "SetRegularKey":
          (0, setRegularKey_1.validateSetRegularKey)(tx);
          break;
        case "SignerListSet":
          (0, signerListSet_1.validateSignerListSet)(tx);
          break;
        case "TicketCreate":
          (0, ticketCreate_1.validateTicketCreate)(tx);
          break;
        case "TrustSet":
          (0, trustSet_1.validateTrustSet)(tx);
          break;
        case "VaultClawback":
          (0, vaultClawback_1.validateVaultClawback)(tx);
          break;
        case "VaultCreate":
          (0, vaultCreate_1.validateVaultCreate)(tx);
          break;
        case "VaultDelete":
          (0, vaultDelete_1.validateVaultDelete)(tx);
          break;
        case "VaultDeposit":
          (0, vaultDeposit_1.validateVaultDeposit)(tx);
          break;
        case "VaultSet":
          (0, vaultSet_1.validateVaultSet)(tx);
          break;
        case "VaultWithdraw":
          (0, vaultWithdraw_1.validateVaultWithdraw)(tx);
          break;
        case "XChainAccountCreateCommit":
          (0, XChainAccountCreateCommit_1.validateXChainAccountCreateCommit)(tx);
          break;
        case "XChainAddAccountCreateAttestation":
          (0, XChainAddAccountCreateAttestation_1.validateXChainAddAccountCreateAttestation)(tx);
          break;
        case "XChainAddClaimAttestation":
          (0, XChainAddClaimAttestation_1.validateXChainAddClaimAttestation)(tx);
          break;
        case "XChainClaim":
          (0, XChainClaim_1.validateXChainClaim)(tx);
          break;
        case "XChainCommit":
          (0, XChainCommit_1.validateXChainCommit)(tx);
          break;
        case "XChainCreateBridge":
          (0, XChainCreateBridge_1.validateXChainCreateBridge)(tx);
          break;
        case "XChainCreateClaimID":
          (0, XChainCreateClaimID_1.validateXChainCreateClaimID)(tx);
          break;
        case "XChainModifyBridge":
          (0, XChainModifyBridge_1.validateXChainModifyBridge)(tx);
          break;
        default:
          throw new errors_1.ValidationError(`Invalid field TransactionType: ${tx.TransactionType}`);
      }
    }
    exports.validate = validate;
  }
});

// node_modules/xrpl/dist/npm/models/transactions/enableAmendment.js
var require_enableAmendment = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/enableAmendment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnableAmendmentFlags = void 0;
    var EnableAmendmentFlags;
    (function(EnableAmendmentFlags2) {
      EnableAmendmentFlags2[EnableAmendmentFlags2["tfGotMajority"] = 65536] = "tfGotMajority";
      EnableAmendmentFlags2[EnableAmendmentFlags2["tfLostMajority"] = 131072] = "tfLostMajority";
    })(EnableAmendmentFlags || (exports.EnableAmendmentFlags = EnableAmendmentFlags = {}));
  }
});

// node_modules/xrpl/dist/npm/models/transactions/index.js
var require_transactions = __commonJS({
  "node_modules/xrpl/dist/npm/models/transactions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m, k2);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XChainModifyBridgeFlags = exports.VaultWithdrawalPolicy = exports.VaultCreateFlags = exports.TrustSetFlags = exports.PaymentChannelClaimFlags = exports.PaymentFlags = exports.OfferCreateFlags = exports.validateNFTokenModify = exports.NFTokenMintFlags = exports.NFTokenCreateOfferFlags = exports.MPTokenIssuanceSetFlags = exports.MPTokenIssuanceCreateFlags = exports.MPTokenAuthorizeFlags = exports.EnableAmendmentFlags = exports.AMMWithdrawFlags = exports.AMMDepositFlags = exports.AMMClawbackFlags = exports.AccountSetTfFlags = exports.AccountSetAsfFlags = exports.validate = exports.validateMPTokenMetadata = exports.isMPTAmount = void 0;
    var common_1 = require_common2();
    Object.defineProperty(exports, "isMPTAmount", { enumerable: true, get: function() {
      return common_1.isMPTAmount;
    } });
    Object.defineProperty(exports, "validateMPTokenMetadata", { enumerable: true, get: function() {
      return common_1.validateMPTokenMetadata;
    } });
    var transaction_1 = require_transaction();
    Object.defineProperty(exports, "validate", { enumerable: true, get: function() {
      return transaction_1.validate;
    } });
    __exportStar(require_metadata(), exports);
    var accountSet_1 = require_accountSet();
    Object.defineProperty(exports, "AccountSetAsfFlags", { enumerable: true, get: function() {
      return accountSet_1.AccountSetAsfFlags;
    } });
    Object.defineProperty(exports, "AccountSetTfFlags", { enumerable: true, get: function() {
      return accountSet_1.AccountSetTfFlags;
    } });
    var AMMClawback_1 = require_AMMClawback();
    Object.defineProperty(exports, "AMMClawbackFlags", { enumerable: true, get: function() {
      return AMMClawback_1.AMMClawbackFlags;
    } });
    var AMMDeposit_1 = require_AMMDeposit();
    Object.defineProperty(exports, "AMMDepositFlags", { enumerable: true, get: function() {
      return AMMDeposit_1.AMMDepositFlags;
    } });
    var AMMWithdraw_1 = require_AMMWithdraw();
    Object.defineProperty(exports, "AMMWithdrawFlags", { enumerable: true, get: function() {
      return AMMWithdraw_1.AMMWithdrawFlags;
    } });
    var enableAmendment_1 = require_enableAmendment();
    Object.defineProperty(exports, "EnableAmendmentFlags", { enumerable: true, get: function() {
      return enableAmendment_1.EnableAmendmentFlags;
    } });
    var MPTokenAuthorize_1 = require_MPTokenAuthorize();
    Object.defineProperty(exports, "MPTokenAuthorizeFlags", { enumerable: true, get: function() {
      return MPTokenAuthorize_1.MPTokenAuthorizeFlags;
    } });
    var MPTokenIssuanceCreate_1 = require_MPTokenIssuanceCreate();
    Object.defineProperty(exports, "MPTokenIssuanceCreateFlags", { enumerable: true, get: function() {
      return MPTokenIssuanceCreate_1.MPTokenIssuanceCreateFlags;
    } });
    var MPTokenIssuanceSet_1 = require_MPTokenIssuanceSet();
    Object.defineProperty(exports, "MPTokenIssuanceSetFlags", { enumerable: true, get: function() {
      return MPTokenIssuanceSet_1.MPTokenIssuanceSetFlags;
    } });
    var NFTokenCreateOffer_1 = require_NFTokenCreateOffer();
    Object.defineProperty(exports, "NFTokenCreateOfferFlags", { enumerable: true, get: function() {
      return NFTokenCreateOffer_1.NFTokenCreateOfferFlags;
    } });
    var NFTokenMint_1 = require_NFTokenMint();
    Object.defineProperty(exports, "NFTokenMintFlags", { enumerable: true, get: function() {
      return NFTokenMint_1.NFTokenMintFlags;
    } });
    var NFTokenModify_1 = require_NFTokenModify();
    Object.defineProperty(exports, "validateNFTokenModify", { enumerable: true, get: function() {
      return NFTokenModify_1.validateNFTokenModify;
    } });
    var offerCreate_1 = require_offerCreate();
    Object.defineProperty(exports, "OfferCreateFlags", { enumerable: true, get: function() {
      return offerCreate_1.OfferCreateFlags;
    } });
    var payment_1 = require_payment();
    Object.defineProperty(exports, "PaymentFlags", { enumerable: true, get: function() {
      return payment_1.PaymentFlags;
    } });
    var paymentChannelClaim_1 = require_paymentChannelClaim();
    Object.defineProperty(exports, "PaymentChannelClaimFlags", { enumerable: true, get: function() {
      return paymentChannelClaim_1.PaymentChannelClaimFlags;
    } });
    var trustSet_1 = require_trustSet();
    Object.defineProperty(exports, "TrustSetFlags", { enumerable: true, get: function() {
      return trustSet_1.TrustSetFlags;
    } });
    var vaultCreate_1 = require_vaultCreate();
    Object.defineProperty(exports, "VaultCreateFlags", { enumerable: true, get: function() {
      return vaultCreate_1.VaultCreateFlags;
    } });
    Object.defineProperty(exports, "VaultWithdrawalPolicy", { enumerable: true, get: function() {
      return vaultCreate_1.VaultWithdrawalPolicy;
    } });
    var XChainModifyBridge_1 = require_XChainModifyBridge();
    Object.defineProperty(exports, "XChainModifyBridgeFlags", { enumerable: true, get: function() {
      return XChainModifyBridge_1.XChainModifyBridgeFlags;
    } });
  }
});

// node_modules/xrpl/dist/npm/Wallet/rfc1751Words.json
var require_rfc1751Words = __commonJS({
  "node_modules/xrpl/dist/npm/Wallet/rfc1751Words.json"(exports, module2) {
    module2.exports = [
      "A",
      "ABE",
      "ACE",
      "ACT",
      "AD",
      "ADA",
      "ADD",
      "AGO",
      "AID",
      "AIM",
      "AIR",
      "ALL",
      "ALP",
      "AM",
      "AMY",
      "AN",
      "ANA",
      "AND",
      "ANN",
      "ANT",
      "ANY",
      "APE",
      "APS",
      "APT",
      "ARC",
      "ARE",
      "ARK",
      "ARM",
      "ART",
      "AS",
      "ASH",
      "ASK",
      "AT",
      "ATE",
      "AUG",
      "AUK",
      "AVE",
      "AWE",
      "AWK",
      "AWL",
      "AWN",
      "AX",
      "AYE",
      "BAD",
      "BAG",
      "BAH",
      "BAM",
      "BAN",
      "BAR",
      "BAT",
      "BAY",
      "BE",
      "BED",
      "BEE",
      "BEG",
      "BEN",
      "BET",
      "BEY",
      "BIB",
      "BID",
      "BIG",
      "BIN",
      "BIT",
      "BOB",
      "BOG",
      "BON",
      "BOO",
      "BOP",
      "BOW",
      "BOY",
      "BUB",
      "BUD",
      "BUG",
      "BUM",
      "BUN",
      "BUS",
      "BUT",
      "BUY",
      "BY",
      "BYE",
      "CAB",
      "CAL",
      "CAM",
      "CAN",
      "CAP",
      "CAR",
      "CAT",
      "CAW",
      "COD",
      "COG",
      "COL",
      "CON",
      "COO",
      "COP",
      "COT",
      "COW",
      "COY",
      "CRY",
      "CUB",
      "CUE",
      "CUP",
      "CUR",
      "CUT",
      "DAB",
      "DAD",
      "DAM",
      "DAN",
      "DAR",
      "DAY",
      "DEE",
      "DEL",
      "DEN",
      "DES",
      "DEW",
      "DID",
      "DIE",
      "DIG",
      "DIN",
      "DIP",
      "DO",
      "DOE",
      "DOG",
      "DON",
      "DOT",
      "DOW",
      "DRY",
      "DUB",
      "DUD",
      "DUE",
      "DUG",
      "DUN",
      "EAR",
      "EAT",
      "ED",
      "EEL",
      "EGG",
      "EGO",
      "ELI",
      "ELK",
      "ELM",
      "ELY",
      "EM",
      "END",
      "EST",
      "ETC",
      "EVA",
      "EVE",
      "EWE",
      "EYE",
      "FAD",
      "FAN",
      "FAR",
      "FAT",
      "FAY",
      "FED",
      "FEE",
      "FEW",
      "FIB",
      "FIG",
      "FIN",
      "FIR",
      "FIT",
      "FLO",
      "FLY",
      "FOE",
      "FOG",
      "FOR",
      "FRY",
      "FUM",
      "FUN",
      "FUR",
      "GAB",
      "GAD",
      "GAG",
      "GAL",
      "GAM",
      "GAP",
      "GAS",
      "GAY",
      "GEE",
      "GEL",
      "GEM",
      "GET",
      "GIG",
      "GIL",
      "GIN",
      "GO",
      "GOT",
      "GUM",
      "GUN",
      "GUS",
      "GUT",
      "GUY",
      "GYM",
      "GYP",
      "HA",
      "HAD",
      "HAL",
      "HAM",
      "HAN",
      "HAP",
      "HAS",
      "HAT",
      "HAW",
      "HAY",
      "HE",
      "HEM",
      "HEN",
      "HER",
      "HEW",
      "HEY",
      "HI",
      "HID",
      "HIM",
      "HIP",
      "HIS",
      "HIT",
      "HO",
      "HOB",
      "HOC",
      "HOE",
      "HOG",
      "HOP",
      "HOT",
      "HOW",
      "HUB",
      "HUE",
      "HUG",
      "HUH",
      "HUM",
      "HUT",
      "I",
      "ICY",
      "IDA",
      "IF",
      "IKE",
      "ILL",
      "INK",
      "INN",
      "IO",
      "ION",
      "IQ",
      "IRA",
      "IRE",
      "IRK",
      "IS",
      "IT",
      "ITS",
      "IVY",
      "JAB",
      "JAG",
      "JAM",
      "JAN",
      "JAR",
      "JAW",
      "JAY",
      "JET",
      "JIG",
      "JIM",
      "JO",
      "JOB",
      "JOE",
      "JOG",
      "JOT",
      "JOY",
      "JUG",
      "JUT",
      "KAY",
      "KEG",
      "KEN",
      "KEY",
      "KID",
      "KIM",
      "KIN",
      "KIT",
      "LA",
      "LAB",
      "LAC",
      "LAD",
      "LAG",
      "LAM",
      "LAP",
      "LAW",
      "LAY",
      "LEA",
      "LED",
      "LEE",
      "LEG",
      "LEN",
      "LEO",
      "LET",
      "LEW",
      "LID",
      "LIE",
      "LIN",
      "LIP",
      "LIT",
      "LO",
      "LOB",
      "LOG",
      "LOP",
      "LOS",
      "LOT",
      "LOU",
      "LOW",
      "LOY",
      "LUG",
      "LYE",
      "MA",
      "MAC",
      "MAD",
      "MAE",
      "MAN",
      "MAO",
      "MAP",
      "MAT",
      "MAW",
      "MAY",
      "ME",
      "MEG",
      "MEL",
      "MEN",
      "MET",
      "MEW",
      "MID",
      "MIN",
      "MIT",
      "MOB",
      "MOD",
      "MOE",
      "MOO",
      "MOP",
      "MOS",
      "MOT",
      "MOW",
      "MUD",
      "MUG",
      "MUM",
      "MY",
      "NAB",
      "NAG",
      "NAN",
      "NAP",
      "NAT",
      "NAY",
      "NE",
      "NED",
      "NEE",
      "NET",
      "NEW",
      "NIB",
      "NIL",
      "NIP",
      "NIT",
      "NO",
      "NOB",
      "NOD",
      "NON",
      "NOR",
      "NOT",
      "NOV",
      "NOW",
      "NU",
      "NUN",
      "NUT",
      "O",
      "OAF",
      "OAK",
      "OAR",
      "OAT",
      "ODD",
      "ODE",
      "OF",
      "OFF",
      "OFT",
      "OH",
      "OIL",
      "OK",
      "OLD",
      "ON",
      "ONE",
      "OR",
      "ORB",
      "ORE",
      "ORR",
      "OS",
      "OTT",
      "OUR",
      "OUT",
      "OVA",
      "OW",
      "OWE",
      "OWL",
      "OWN",
      "OX",
      "PA",
      "PAD",
      "PAL",
      "PAM",
      "PAN",
      "PAP",
      "PAR",
      "PAT",
      "PAW",
      "PAY",
      "PEA",
      "PEG",
      "PEN",
      "PEP",
      "PER",
      "PET",
      "PEW",
      "PHI",
      "PI",
      "PIE",
      "PIN",
      "PIT",
      "PLY",
      "PO",
      "POD",
      "POE",
      "POP",
      "POT",
      "POW",
      "PRO",
      "PRY",
      "PUB",
      "PUG",
      "PUN",
      "PUP",
      "PUT",
      "QUO",
      "RAG",
      "RAM",
      "RAN",
      "RAP",
      "RAT",
      "RAW",
      "RAY",
      "REB",
      "RED",
      "REP",
      "RET",
      "RIB",
      "RID",
      "RIG",
      "RIM",
      "RIO",
      "RIP",
      "ROB",
      "ROD",
      "ROE",
      "RON",
      "ROT",
      "ROW",
      "ROY",
      "RUB",
      "RUE",
      "RUG",
      "RUM",
      "RUN",
      "RYE",
      "SAC",
      "SAD",
      "SAG",
      "SAL",
      "SAM",
      "SAN",
      "SAP",
      "SAT",
      "SAW",
      "SAY",
      "SEA",
      "SEC",
      "SEE",
      "SEN",
      "SET",
      "SEW",
      "SHE",
      "SHY",
      "SIN",
      "SIP",
      "SIR",
      "SIS",
      "SIT",
      "SKI",
      "SKY",
      "SLY",
      "SO",
      "SOB",
      "SOD",
      "SON",
      "SOP",
      "SOW",
      "SOY",
      "SPA",
      "SPY",
      "SUB",
      "SUD",
      "SUE",
      "SUM",
      "SUN",
      "SUP",
      "TAB",
      "TAD",
      "TAG",
      "TAN",
      "TAP",
      "TAR",
      "TEA",
      "TED",
      "TEE",
      "TEN",
      "THE",
      "THY",
      "TIC",
      "TIE",
      "TIM",
      "TIN",
      "TIP",
      "TO",
      "TOE",
      "TOG",
      "TOM",
      "TON",
      "TOO",
      "TOP",
      "TOW",
      "TOY",
      "TRY",
      "TUB",
      "TUG",
      "TUM",
      "TUN",
      "TWO",
      "UN",
      "UP",
      "US",
      "USE",
      "VAN",
      "VAT",
      "VET",
      "VIE",
      "WAD",
      "WAG",
      "WAR",
      "WAS",
      "WAY",
      "WE",
      "WEB",
      "WED",
      "WEE",
      "WET",
      "WHO",
      "WHY",
      "WIN",
      "WIT",
      "WOK",
      "WON",
      "WOO",
      "WOW",
      "WRY",
      "WU",
      "YAM",
      "YAP",
      "YAW",
      "YE",
      "YEA",
      "YES",
      "YET",
      "YOU",
      "ABED",
      "ABEL",
      "ABET",
      "ABLE",
      "ABUT",
      "ACHE",
      "ACID",
      "ACME",
      "ACRE",
      "ACTA",
      "ACTS",
      "ADAM",
      "ADDS",
      "ADEN",
      "AFAR",
      "AFRO",
      "AGEE",
      "AHEM",
      "AHOY",
      "AIDA",
      "AIDE",
      "AIDS",
      "AIRY",
      "AJAR",
      "AKIN",
      "ALAN",
      "ALEC",
      "ALGA",
      "ALIA",
      "ALLY",
      "ALMA",
      "ALOE",
      "ALSO",
      "ALTO",
      "ALUM",
      "ALVA",
      "AMEN",
      "AMES",
      "AMID",
      "AMMO",
      "AMOK",
      "AMOS",
      "AMRA",
      "ANDY",
      "ANEW",
      "ANNA",
      "ANNE",
      "ANTE",
      "ANTI",
      "AQUA",
      "ARAB",
      "ARCH",
      "AREA",
      "ARGO",
      "ARID",
      "ARMY",
      "ARTS",
      "ARTY",
      "ASIA",
      "ASKS",
      "ATOM",
      "AUNT",
      "AURA",
      "AUTO",
      "AVER",
      "AVID",
      "AVIS",
      "AVON",
      "AVOW",
      "AWAY",
      "AWRY",
      "BABE",
      "BABY",
      "BACH",
      "BACK",
      "BADE",
      "BAIL",
      "BAIT",
      "BAKE",
      "BALD",
      "BALE",
      "BALI",
      "BALK",
      "BALL",
      "BALM",
      "BAND",
      "BANE",
      "BANG",
      "BANK",
      "BARB",
      "BARD",
      "BARE",
      "BARK",
      "BARN",
      "BARR",
      "BASE",
      "BASH",
      "BASK",
      "BASS",
      "BATE",
      "BATH",
      "BAWD",
      "BAWL",
      "BEAD",
      "BEAK",
      "BEAM",
      "BEAN",
      "BEAR",
      "BEAT",
      "BEAU",
      "BECK",
      "BEEF",
      "BEEN",
      "BEER",
      "BEET",
      "BELA",
      "BELL",
      "BELT",
      "BEND",
      "BENT",
      "BERG",
      "BERN",
      "BERT",
      "BESS",
      "BEST",
      "BETA",
      "BETH",
      "BHOY",
      "BIAS",
      "BIDE",
      "BIEN",
      "BILE",
      "BILK",
      "BILL",
      "BIND",
      "BING",
      "BIRD",
      "BITE",
      "BITS",
      "BLAB",
      "BLAT",
      "BLED",
      "BLEW",
      "BLOB",
      "BLOC",
      "BLOT",
      "BLOW",
      "BLUE",
      "BLUM",
      "BLUR",
      "BOAR",
      "BOAT",
      "BOCA",
      "BOCK",
      "BODE",
      "BODY",
      "BOGY",
      "BOHR",
      "BOIL",
      "BOLD",
      "BOLO",
      "BOLT",
      "BOMB",
      "BONA",
      "BOND",
      "BONE",
      "BONG",
      "BONN",
      "BONY",
      "BOOK",
      "BOOM",
      "BOON",
      "BOOT",
      "BORE",
      "BORG",
      "BORN",
      "BOSE",
      "BOSS",
      "BOTH",
      "BOUT",
      "BOWL",
      "BOYD",
      "BRAD",
      "BRAE",
      "BRAG",
      "BRAN",
      "BRAY",
      "BRED",
      "BREW",
      "BRIG",
      "BRIM",
      "BROW",
      "BUCK",
      "BUDD",
      "BUFF",
      "BULB",
      "BULK",
      "BULL",
      "BUNK",
      "BUNT",
      "BUOY",
      "BURG",
      "BURL",
      "BURN",
      "BURR",
      "BURT",
      "BURY",
      "BUSH",
      "BUSS",
      "BUST",
      "BUSY",
      "BYTE",
      "CADY",
      "CAFE",
      "CAGE",
      "CAIN",
      "CAKE",
      "CALF",
      "CALL",
      "CALM",
      "CAME",
      "CANE",
      "CANT",
      "CARD",
      "CARE",
      "CARL",
      "CARR",
      "CART",
      "CASE",
      "CASH",
      "CASK",
      "CAST",
      "CAVE",
      "CEIL",
      "CELL",
      "CENT",
      "CERN",
      "CHAD",
      "CHAR",
      "CHAT",
      "CHAW",
      "CHEF",
      "CHEN",
      "CHEW",
      "CHIC",
      "CHIN",
      "CHOU",
      "CHOW",
      "CHUB",
      "CHUG",
      "CHUM",
      "CITE",
      "CITY",
      "CLAD",
      "CLAM",
      "CLAN",
      "CLAW",
      "CLAY",
      "CLOD",
      "CLOG",
      "CLOT",
      "CLUB",
      "CLUE",
      "COAL",
      "COAT",
      "COCA",
      "COCK",
      "COCO",
      "CODA",
      "CODE",
      "CODY",
      "COED",
      "COIL",
      "COIN",
      "COKE",
      "COLA",
      "COLD",
      "COLT",
      "COMA",
      "COMB",
      "COME",
      "COOK",
      "COOL",
      "COON",
      "COOT",
      "CORD",
      "CORE",
      "CORK",
      "CORN",
      "COST",
      "COVE",
      "COWL",
      "CRAB",
      "CRAG",
      "CRAM",
      "CRAY",
      "CREW",
      "CRIB",
      "CROW",
      "CRUD",
      "CUBA",
      "CUBE",
      "CUFF",
      "CULL",
      "CULT",
      "CUNY",
      "CURB",
      "CURD",
      "CURE",
      "CURL",
      "CURT",
      "CUTS",
      "DADE",
      "DALE",
      "DAME",
      "DANA",
      "DANE",
      "DANG",
      "DANK",
      "DARE",
      "DARK",
      "DARN",
      "DART",
      "DASH",
      "DATA",
      "DATE",
      "DAVE",
      "DAVY",
      "DAWN",
      "DAYS",
      "DEAD",
      "DEAF",
      "DEAL",
      "DEAN",
      "DEAR",
      "DEBT",
      "DECK",
      "DEED",
      "DEEM",
      "DEER",
      "DEFT",
      "DEFY",
      "DELL",
      "DENT",
      "DENY",
      "DESK",
      "DIAL",
      "DICE",
      "DIED",
      "DIET",
      "DIME",
      "DINE",
      "DING",
      "DINT",
      "DIRE",
      "DIRT",
      "DISC",
      "DISH",
      "DISK",
      "DIVE",
      "DOCK",
      "DOES",
      "DOLE",
      "DOLL",
      "DOLT",
      "DOME",
      "DONE",
      "DOOM",
      "DOOR",
      "DORA",
      "DOSE",
      "DOTE",
      "DOUG",
      "DOUR",
      "DOVE",
      "DOWN",
      "DRAB",
      "DRAG",
      "DRAM",
      "DRAW",
      "DREW",
      "DRUB",
      "DRUG",
      "DRUM",
      "DUAL",
      "DUCK",
      "DUCT",
      "DUEL",
      "DUET",
      "DUKE",
      "DULL",
      "DUMB",
      "DUNE",
      "DUNK",
      "DUSK",
      "DUST",
      "DUTY",
      "EACH",
      "EARL",
      "EARN",
      "EASE",
      "EAST",
      "EASY",
      "EBEN",
      "ECHO",
      "EDDY",
      "EDEN",
      "EDGE",
      "EDGY",
      "EDIT",
      "EDNA",
      "EGAN",
      "ELAN",
      "ELBA",
      "ELLA",
      "ELSE",
      "EMIL",
      "EMIT",
      "EMMA",
      "ENDS",
      "ERIC",
      "EROS",
      "EVEN",
      "EVER",
      "EVIL",
      "EYED",
      "FACE",
      "FACT",
      "FADE",
      "FAIL",
      "FAIN",
      "FAIR",
      "FAKE",
      "FALL",
      "FAME",
      "FANG",
      "FARM",
      "FAST",
      "FATE",
      "FAWN",
      "FEAR",
      "FEAT",
      "FEED",
      "FEEL",
      "FEET",
      "FELL",
      "FELT",
      "FEND",
      "FERN",
      "FEST",
      "FEUD",
      "FIEF",
      "FIGS",
      "FILE",
      "FILL",
      "FILM",
      "FIND",
      "FINE",
      "FINK",
      "FIRE",
      "FIRM",
      "FISH",
      "FISK",
      "FIST",
      "FITS",
      "FIVE",
      "FLAG",
      "FLAK",
      "FLAM",
      "FLAT",
      "FLAW",
      "FLEA",
      "FLED",
      "FLEW",
      "FLIT",
      "FLOC",
      "FLOG",
      "FLOW",
      "FLUB",
      "FLUE",
      "FOAL",
      "FOAM",
      "FOGY",
      "FOIL",
      "FOLD",
      "FOLK",
      "FOND",
      "FONT",
      "FOOD",
      "FOOL",
      "FOOT",
      "FORD",
      "FORE",
      "FORK",
      "FORM",
      "FORT",
      "FOSS",
      "FOUL",
      "FOUR",
      "FOWL",
      "FRAU",
      "FRAY",
      "FRED",
      "FREE",
      "FRET",
      "FREY",
      "FROG",
      "FROM",
      "FUEL",
      "FULL",
      "FUME",
      "FUND",
      "FUNK",
      "FURY",
      "FUSE",
      "FUSS",
      "GAFF",
      "GAGE",
      "GAIL",
      "GAIN",
      "GAIT",
      "GALA",
      "GALE",
      "GALL",
      "GALT",
      "GAME",
      "GANG",
      "GARB",
      "GARY",
      "GASH",
      "GATE",
      "GAUL",
      "GAUR",
      "GAVE",
      "GAWK",
      "GEAR",
      "GELD",
      "GENE",
      "GENT",
      "GERM",
      "GETS",
      "GIBE",
      "GIFT",
      "GILD",
      "GILL",
      "GILT",
      "GINA",
      "GIRD",
      "GIRL",
      "GIST",
      "GIVE",
      "GLAD",
      "GLEE",
      "GLEN",
      "GLIB",
      "GLOB",
      "GLOM",
      "GLOW",
      "GLUE",
      "GLUM",
      "GLUT",
      "GOAD",
      "GOAL",
      "GOAT",
      "GOER",
      "GOES",
      "GOLD",
      "GOLF",
      "GONE",
      "GONG",
      "GOOD",
      "GOOF",
      "GORE",
      "GORY",
      "GOSH",
      "GOUT",
      "GOWN",
      "GRAB",
      "GRAD",
      "GRAY",
      "GREG",
      "GREW",
      "GREY",
      "GRID",
      "GRIM",
      "GRIN",
      "GRIT",
      "GROW",
      "GRUB",
      "GULF",
      "GULL",
      "GUNK",
      "GURU",
      "GUSH",
      "GUST",
      "GWEN",
      "GWYN",
      "HAAG",
      "HAAS",
      "HACK",
      "HAIL",
      "HAIR",
      "HALE",
      "HALF",
      "HALL",
      "HALO",
      "HALT",
      "HAND",
      "HANG",
      "HANK",
      "HANS",
      "HARD",
      "HARK",
      "HARM",
      "HART",
      "HASH",
      "HAST",
      "HATE",
      "HATH",
      "HAUL",
      "HAVE",
      "HAWK",
      "HAYS",
      "HEAD",
      "HEAL",
      "HEAR",
      "HEAT",
      "HEBE",
      "HECK",
      "HEED",
      "HEEL",
      "HEFT",
      "HELD",
      "HELL",
      "HELM",
      "HERB",
      "HERD",
      "HERE",
      "HERO",
      "HERS",
      "HESS",
      "HEWN",
      "HICK",
      "HIDE",
      "HIGH",
      "HIKE",
      "HILL",
      "HILT",
      "HIND",
      "HINT",
      "HIRE",
      "HISS",
      "HIVE",
      "HOBO",
      "HOCK",
      "HOFF",
      "HOLD",
      "HOLE",
      "HOLM",
      "HOLT",
      "HOME",
      "HONE",
      "HONK",
      "HOOD",
      "HOOF",
      "HOOK",
      "HOOT",
      "HORN",
      "HOSE",
      "HOST",
      "HOUR",
      "HOVE",
      "HOWE",
      "HOWL",
      "HOYT",
      "HUCK",
      "HUED",
      "HUFF",
      "HUGE",
      "HUGH",
      "HUGO",
      "HULK",
      "HULL",
      "HUNK",
      "HUNT",
      "HURD",
      "HURL",
      "HURT",
      "HUSH",
      "HYDE",
      "HYMN",
      "IBIS",
      "ICON",
      "IDEA",
      "IDLE",
      "IFFY",
      "INCA",
      "INCH",
      "INTO",
      "IONS",
      "IOTA",
      "IOWA",
      "IRIS",
      "IRMA",
      "IRON",
      "ISLE",
      "ITCH",
      "ITEM",
      "IVAN",
      "JACK",
      "JADE",
      "JAIL",
      "JAKE",
      "JANE",
      "JAVA",
      "JEAN",
      "JEFF",
      "JERK",
      "JESS",
      "JEST",
      "JIBE",
      "JILL",
      "JILT",
      "JIVE",
      "JOAN",
      "JOBS",
      "JOCK",
      "JOEL",
      "JOEY",
      "JOHN",
      "JOIN",
      "JOKE",
      "JOLT",
      "JOVE",
      "JUDD",
      "JUDE",
      "JUDO",
      "JUDY",
      "JUJU",
      "JUKE",
      "JULY",
      "JUNE",
      "JUNK",
      "JUNO",
      "JURY",
      "JUST",
      "JUTE",
      "KAHN",
      "KALE",
      "KANE",
      "KANT",
      "KARL",
      "KATE",
      "KEEL",
      "KEEN",
      "KENO",
      "KENT",
      "KERN",
      "KERR",
      "KEYS",
      "KICK",
      "KILL",
      "KIND",
      "KING",
      "KIRK",
      "KISS",
      "KITE",
      "KLAN",
      "KNEE",
      "KNEW",
      "KNIT",
      "KNOB",
      "KNOT",
      "KNOW",
      "KOCH",
      "KONG",
      "KUDO",
      "KURD",
      "KURT",
      "KYLE",
      "LACE",
      "LACK",
      "LACY",
      "LADY",
      "LAID",
      "LAIN",
      "LAIR",
      "LAKE",
      "LAMB",
      "LAME",
      "LAND",
      "LANE",
      "LANG",
      "LARD",
      "LARK",
      "LASS",
      "LAST",
      "LATE",
      "LAUD",
      "LAVA",
      "LAWN",
      "LAWS",
      "LAYS",
      "LEAD",
      "LEAF",
      "LEAK",
      "LEAN",
      "LEAR",
      "LEEK",
      "LEER",
      "LEFT",
      "LEND",
      "LENS",
      "LENT",
      "LEON",
      "LESK",
      "LESS",
      "LEST",
      "LETS",
      "LIAR",
      "LICE",
      "LICK",
      "LIED",
      "LIEN",
      "LIES",
      "LIEU",
      "LIFE",
      "LIFT",
      "LIKE",
      "LILA",
      "LILT",
      "LILY",
      "LIMA",
      "LIMB",
      "LIME",
      "LIND",
      "LINE",
      "LINK",
      "LINT",
      "LION",
      "LISA",
      "LIST",
      "LIVE",
      "LOAD",
      "LOAF",
      "LOAM",
      "LOAN",
      "LOCK",
      "LOFT",
      "LOGE",
      "LOIS",
      "LOLA",
      "LONE",
      "LONG",
      "LOOK",
      "LOON",
      "LOOT",
      "LORD",
      "LORE",
      "LOSE",
      "LOSS",
      "LOST",
      "LOUD",
      "LOVE",
      "LOWE",
      "LUCK",
      "LUCY",
      "LUGE",
      "LUKE",
      "LULU",
      "LUND",
      "LUNG",
      "LURA",
      "LURE",
      "LURK",
      "LUSH",
      "LUST",
      "LYLE",
      "LYNN",
      "LYON",
      "LYRA",
      "MACE",
      "MADE",
      "MAGI",
      "MAID",
      "MAIL",
      "MAIN",
      "MAKE",
      "MALE",
      "MALI",
      "MALL",
      "MALT",
      "MANA",
      "MANN",
      "MANY",
      "MARC",
      "MARE",
      "MARK",
      "MARS",
      "MART",
      "MARY",
      "MASH",
      "MASK",
      "MASS",
      "MAST",
      "MATE",
      "MATH",
      "MAUL",
      "MAYO",
      "MEAD",
      "MEAL",
      "MEAN",
      "MEAT",
      "MEEK",
      "MEET",
      "MELD",
      "MELT",
      "MEMO",
      "MEND",
      "MENU",
      "MERT",
      "MESH",
      "MESS",
      "MICE",
      "MIKE",
      "MILD",
      "MILE",
      "MILK",
      "MILL",
      "MILT",
      "MIMI",
      "MIND",
      "MINE",
      "MINI",
      "MINK",
      "MINT",
      "MIRE",
      "MISS",
      "MIST",
      "MITE",
      "MITT",
      "MOAN",
      "MOAT",
      "MOCK",
      "MODE",
      "MOLD",
      "MOLE",
      "MOLL",
      "MOLT",
      "MONA",
      "MONK",
      "MONT",
      "MOOD",
      "MOON",
      "MOOR",
      "MOOT",
      "MORE",
      "MORN",
      "MORT",
      "MOSS",
      "MOST",
      "MOTH",
      "MOVE",
      "MUCH",
      "MUCK",
      "MUDD",
      "MUFF",
      "MULE",
      "MULL",
      "MURK",
      "MUSH",
      "MUST",
      "MUTE",
      "MUTT",
      "MYRA",
      "MYTH",
      "NAGY",
      "NAIL",
      "NAIR",
      "NAME",
      "NARY",
      "NASH",
      "NAVE",
      "NAVY",
      "NEAL",
      "NEAR",
      "NEAT",
      "NECK",
      "NEED",
      "NEIL",
      "NELL",
      "NEON",
      "NERO",
      "NESS",
      "NEST",
      "NEWS",
      "NEWT",
      "NIBS",
      "NICE",
      "NICK",
      "NILE",
      "NINA",
      "NINE",
      "NOAH",
      "NODE",
      "NOEL",
      "NOLL",
      "NONE",
      "NOOK",
      "NOON",
      "NORM",
      "NOSE",
      "NOTE",
      "NOUN",
      "NOVA",
      "NUDE",
      "NULL",
      "NUMB",
      "OATH",
      "OBEY",
      "OBOE",
      "ODIN",
      "OHIO",
      "OILY",
      "OINT",
      "OKAY",
      "OLAF",
      "OLDY",
      "OLGA",
      "OLIN",
      "OMAN",
      "OMEN",
      "OMIT",
      "ONCE",
      "ONES",
      "ONLY",
      "ONTO",
      "ONUS",
      "ORAL",
      "ORGY",
      "OSLO",
      "OTIS",
      "OTTO",
      "OUCH",
      "OUST",
      "OUTS",
      "OVAL",
      "OVEN",
      "OVER",
      "OWLY",
      "OWNS",
      "QUAD",
      "QUIT",
      "QUOD",
      "RACE",
      "RACK",
      "RACY",
      "RAFT",
      "RAGE",
      "RAID",
      "RAIL",
      "RAIN",
      "RAKE",
      "RANK",
      "RANT",
      "RARE",
      "RASH",
      "RATE",
      "RAVE",
      "RAYS",
      "READ",
      "REAL",
      "REAM",
      "REAR",
      "RECK",
      "REED",
      "REEF",
      "REEK",
      "REEL",
      "REID",
      "REIN",
      "RENA",
      "REND",
      "RENT",
      "REST",
      "RICE",
      "RICH",
      "RICK",
      "RIDE",
      "RIFT",
      "RILL",
      "RIME",
      "RING",
      "RINK",
      "RISE",
      "RISK",
      "RITE",
      "ROAD",
      "ROAM",
      "ROAR",
      "ROBE",
      "ROCK",
      "RODE",
      "ROIL",
      "ROLL",
      "ROME",
      "ROOD",
      "ROOF",
      "ROOK",
      "ROOM",
      "ROOT",
      "ROSA",
      "ROSE",
      "ROSS",
      "ROSY",
      "ROTH",
      "ROUT",
      "ROVE",
      "ROWE",
      "ROWS",
      "RUBE",
      "RUBY",
      "RUDE",
      "RUDY",
      "RUIN",
      "RULE",
      "RUNG",
      "RUNS",
      "RUNT",
      "RUSE",
      "RUSH",
      "RUSK",
      "RUSS",
      "RUST",
      "RUTH",
      "SACK",
      "SAFE",
      "SAGE",
      "SAID",
      "SAIL",
      "SALE",
      "SALK",
      "SALT",
      "SAME",
      "SAND",
      "SANE",
      "SANG",
      "SANK",
      "SARA",
      "SAUL",
      "SAVE",
      "SAYS",
      "SCAN",
      "SCAR",
      "SCAT",
      "SCOT",
      "SEAL",
      "SEAM",
      "SEAR",
      "SEAT",
      "SEED",
      "SEEK",
      "SEEM",
      "SEEN",
      "SEES",
      "SELF",
      "SELL",
      "SEND",
      "SENT",
      "SETS",
      "SEWN",
      "SHAG",
      "SHAM",
      "SHAW",
      "SHAY",
      "SHED",
      "SHIM",
      "SHIN",
      "SHOD",
      "SHOE",
      "SHOT",
      "SHOW",
      "SHUN",
      "SHUT",
      "SICK",
      "SIDE",
      "SIFT",
      "SIGH",
      "SIGN",
      "SILK",
      "SILL",
      "SILO",
      "SILT",
      "SINE",
      "SING",
      "SINK",
      "SIRE",
      "SITE",
      "SITS",
      "SITU",
      "SKAT",
      "SKEW",
      "SKID",
      "SKIM",
      "SKIN",
      "SKIT",
      "SLAB",
      "SLAM",
      "SLAT",
      "SLAY",
      "SLED",
      "SLEW",
      "SLID",
      "SLIM",
      "SLIT",
      "SLOB",
      "SLOG",
      "SLOT",
      "SLOW",
      "SLUG",
      "SLUM",
      "SLUR",
      "SMOG",
      "SMUG",
      "SNAG",
      "SNOB",
      "SNOW",
      "SNUB",
      "SNUG",
      "SOAK",
      "SOAR",
      "SOCK",
      "SODA",
      "SOFA",
      "SOFT",
      "SOIL",
      "SOLD",
      "SOME",
      "SONG",
      "SOON",
      "SOOT",
      "SORE",
      "SORT",
      "SOUL",
      "SOUR",
      "SOWN",
      "STAB",
      "STAG",
      "STAN",
      "STAR",
      "STAY",
      "STEM",
      "STEW",
      "STIR",
      "STOW",
      "STUB",
      "STUN",
      "SUCH",
      "SUDS",
      "SUIT",
      "SULK",
      "SUMS",
      "SUNG",
      "SUNK",
      "SURE",
      "SURF",
      "SWAB",
      "SWAG",
      "SWAM",
      "SWAN",
      "SWAT",
      "SWAY",
      "SWIM",
      "SWUM",
      "TACK",
      "TACT",
      "TAIL",
      "TAKE",
      "TALE",
      "TALK",
      "TALL",
      "TANK",
      "TASK",
      "TATE",
      "TAUT",
      "TEAL",
      "TEAM",
      "TEAR",
      "TECH",
      "TEEM",
      "TEEN",
      "TEET",
      "TELL",
      "TEND",
      "TENT",
      "TERM",
      "TERN",
      "TESS",
      "TEST",
      "THAN",
      "THAT",
      "THEE",
      "THEM",
      "THEN",
      "THEY",
      "THIN",
      "THIS",
      "THUD",
      "THUG",
      "TICK",
      "TIDE",
      "TIDY",
      "TIED",
      "TIER",
      "TILE",
      "TILL",
      "TILT",
      "TIME",
      "TINA",
      "TINE",
      "TINT",
      "TINY",
      "TIRE",
      "TOAD",
      "TOGO",
      "TOIL",
      "TOLD",
      "TOLL",
      "TONE",
      "TONG",
      "TONY",
      "TOOK",
      "TOOL",
      "TOOT",
      "TORE",
      "TORN",
      "TOTE",
      "TOUR",
      "TOUT",
      "TOWN",
      "TRAG",
      "TRAM",
      "TRAY",
      "TREE",
      "TREK",
      "TRIG",
      "TRIM",
      "TRIO",
      "TROD",
      "TROT",
      "TROY",
      "TRUE",
      "TUBA",
      "TUBE",
      "TUCK",
      "TUFT",
      "TUNA",
      "TUNE",
      "TUNG",
      "TURF",
      "TURN",
      "TUSK",
      "TWIG",
      "TWIN",
      "TWIT",
      "ULAN",
      "UNIT",
      "URGE",
      "USED",
      "USER",
      "USES",
      "UTAH",
      "VAIL",
      "VAIN",
      "VALE",
      "VARY",
      "VASE",
      "VAST",
      "VEAL",
      "VEDA",
      "VEIL",
      "VEIN",
      "VEND",
      "VENT",
      "VERB",
      "VERY",
      "VETO",
      "VICE",
      "VIEW",
      "VINE",
      "VISE",
      "VOID",
      "VOLT",
      "VOTE",
      "WACK",
      "WADE",
      "WAGE",
      "WAIL",
      "WAIT",
      "WAKE",
      "WALE",
      "WALK",
      "WALL",
      "WALT",
      "WAND",
      "WANE",
      "WANG",
      "WANT",
      "WARD",
      "WARM",
      "WARN",
      "WART",
      "WASH",
      "WAST",
      "WATS",
      "WATT",
      "WAVE",
      "WAVY",
      "WAYS",
      "WEAK",
      "WEAL",
      "WEAN",
      "WEAR",
      "WEED",
      "WEEK",
      "WEIR",
      "WELD",
      "WELL",
      "WELT",
      "WENT",
      "WERE",
      "WERT",
      "WEST",
      "WHAM",
      "WHAT",
      "WHEE",
      "WHEN",
      "WHET",
      "WHOA",
      "WHOM",
      "WICK",
      "WIFE",
      "WILD",
      "WILL",
      "WIND",
      "WINE",
      "WING",
      "WINK",
      "WINO",
      "WIRE",
      "WISE",
      "WISH",
      "WITH",
      "WOLF",
      "WONT",
      "WOOD",
      "WOOL",
      "WORD",
      "WORE",
      "WORK",
      "WORM",
      "WORN",
      "WOVE",
      "WRIT",
      "WYNN",
      "YALE",
      "YANG",
      "YANK",
      "YARD",
      "YARN",
      "YAWL",
      "YAWN",
      "YEAH",
      "YEAR",
      "YELL",
      "YOGA",
      "YOKE"
    ];
  }
});

// node_modules/xrpl/dist/npm/Wallet/rfc1751.js
var require_rfc1751 = __commonJS({
  "node_modules/xrpl/dist/npm/Wallet/rfc1751.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keyToRFC1751Mnemonic = exports.rfc1751MnemonicToKey = void 0;
    var utils_1 = require_browser2();
    var rfc1751Words_json_1 = __importDefault(require_rfc1751Words());
    var rfc1751WordList = rfc1751Words_json_1.default;
    var BINARY = [
      "0000",
      "0001",
      "0010",
      "0011",
      "0100",
      "0101",
      "0110",
      "0111",
      "1000",
      "1001",
      "1010",
      "1011",
      "1100",
      "1101",
      "1110",
      "1111"
    ];
    function keyToBinary(key) {
      let res = "";
      for (const num of key) {
        res += BINARY[num >> 4] + BINARY[num & 15];
      }
      return res;
    }
    function extract(key, start, length) {
      const subKey = key.substring(start, start + length);
      let acc = 0;
      for (let index = 0; index < subKey.length; index++) {
        acc = acc * 2 + subKey.charCodeAt(index) - 48;
      }
      return acc;
    }
    function keyToRFC1751Mnemonic(hex_key) {
      const buf = (0, utils_1.hexToBytes)(hex_key.replace(/\s+/gu, ""));
      let key = bufferToArray(swap128(buf));
      const padding = [];
      for (let index = 0; index < (8 - key.length % 8) % 8; index++) {
        padding.push(0);
      }
      key = padding.concat(key);
      const english = [];
      for (let index = 0; index < key.length; index += 8) {
        const subKey = key.slice(index, index + 8);
        let skbin = keyToBinary(subKey);
        let parity = 0;
        for (let j3 = 0; j3 < 64; j3 += 2) {
          parity += extract(skbin, j3, 2);
        }
        subKey.push(parity << 6 & 255);
        skbin = keyToBinary(subKey);
        for (let j3 = 0; j3 < 64; j3 += 11) {
          english.push(rfc1751WordList[extract(skbin, j3, 11)]);
        }
      }
      return english.join(" ");
    }
    exports.keyToRFC1751Mnemonic = keyToRFC1751Mnemonic;
    function rfc1751MnemonicToKey(english) {
      const words = english.split(" ");
      let key = [];
      for (let index = 0; index < words.length; index += 6) {
        const { subKey, word } = getSubKey(words, index);
        const skbin = keyToBinary(subKey);
        let parity = 0;
        for (let j3 = 0; j3 < 64; j3 += 2) {
          parity += extract(skbin, j3, 2);
        }
        const cs0 = extract(skbin, 64, 2);
        const cs1 = parity & 3;
        if (cs0 !== cs1) {
          throw new Error(`Parity error at ${word}`);
        }
        key = key.concat(subKey.slice(0, 8));
      }
      const bufferKey = swap128(Uint8Array.from(key));
      return bufferKey;
    }
    exports.rfc1751MnemonicToKey = rfc1751MnemonicToKey;
    function getSubKey(words, index) {
      const sublist = words.slice(index, index + 6);
      let bits2 = 0;
      const ch = [0, 0, 0, 0, 0, 0, 0, 0, 0];
      let word = "";
      for (word of sublist) {
        const idx = rfc1751WordList.indexOf(word.toUpperCase());
        if (idx === -1) {
          throw new TypeError(`Expected an RFC1751 word, but received '${word}'. For the full list of words in the RFC1751 encoding see https://datatracker.ietf.org/doc/html/rfc1751`);
        }
        const shift = (8 - (bits2 + 11) % 8) % 8;
        const y = idx << shift;
        const cl = y >> 16;
        const cc = y >> 8 & 255;
        const cr = y & 255;
        const t = Math.floor(bits2 / 8);
        if (shift > 5) {
          ch[t] |= cl;
          ch[t + 1] |= cc;
          ch[t + 2] |= cr;
        } else if (shift > -3) {
          ch[t] |= cc;
          ch[t + 1] |= cr;
        } else {
          ch[t] |= cr;
        }
        bits2 += 11;
      }
      const subKey = ch.slice();
      return { subKey, word };
    }
    function bufferToArray(buf) {
      return Array.prototype.slice.call(buf);
    }
    function swap(arr, n, m) {
      const i = arr[n];
      arr[n] = arr[m];
      arr[m] = i;
    }
    function swap64(arr) {
      const len = arr.length;
      for (let i = 0; i < len; i += 8) {
        swap(arr, i, i + 7);
        swap(arr, i + 1, i + 6);
        swap(arr, i + 2, i + 5);
        swap(arr, i + 3, i + 4);
      }
      return arr;
    }
    function swap128(arr) {
      const reversedBytes = swap64(arr);
      return (0, utils_1.concat)([reversedBytes.slice(8, 16), reversedBytes.slice(0, 8)]);
    }
  }
});

// node_modules/xrpl/dist/npm/Wallet/utils.js
var require_utils12 = __commonJS({
  "node_modules/xrpl/dist/npm/Wallet/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDecodedTransaction = exports.addressToBigNumber = exports.NUM_BITS_IN_HEX = exports.compareSigners = void 0;
    var utils_1 = require_browser2();
    var bignumber_js_1 = __importDefault(require_bignumber());
    var ripple_address_codec_1 = require_dist();
    var ripple_binary_codec_1 = require_dist2();
    function compareSigners(left, right) {
      return addressToBigNumber(left.Account).comparedTo(addressToBigNumber(right.Account));
    }
    exports.compareSigners = compareSigners;
    exports.NUM_BITS_IN_HEX = 16;
    function addressToBigNumber(address) {
      const hex2 = (0, utils_1.bytesToHex)((0, ripple_address_codec_1.decodeAccountID)(address));
      return new bignumber_js_1.default(hex2, exports.NUM_BITS_IN_HEX);
    }
    exports.addressToBigNumber = addressToBigNumber;
    function getDecodedTransaction(txOrBlob) {
      if (typeof txOrBlob === "object") {
        return (0, ripple_binary_codec_1.decode)((0, ripple_binary_codec_1.encode)(txOrBlob));
      }
      return (0, ripple_binary_codec_1.decode)(txOrBlob);
    }
    exports.getDecodedTransaction = getDecodedTransaction;
  }
});

// node_modules/xrpl/dist/npm/Wallet/signer.js
var require_signer = __commonJS({
  "node_modules/xrpl/dist/npm/Wallet/signer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.multisign = exports.verifySignature = void 0;
    var ripple_binary_codec_1 = require_dist2();
    var ripple_keypairs_1 = require_dist3();
    var errors_1 = require_errors();
    var transactions_1 = require_transactions();
    var utils_1 = require_utils12();
    function multisign(transactions) {
      if (transactions.length === 0) {
        throw new errors_1.ValidationError("There were 0 transactions to multisign");
      }
      const decodedTransactions = transactions.map((txOrBlob) => {
        return (0, utils_1.getDecodedTransaction)(txOrBlob);
      });
      decodedTransactions.forEach((tx) => {
        (0, transactions_1.validate)(tx);
        if (tx.Signers == null || tx.Signers.length === 0) {
          throw new errors_1.ValidationError("For multisigning all transactions must include a Signers field containing an array of signatures. You may have forgotten to pass the 'forMultisign' parameter when signing.");
        }
        if (tx.SigningPubKey !== "") {
          throw new errors_1.ValidationError("SigningPubKey must be an empty string for all transactions when multisigning.");
        }
      });
      validateTransactionEquivalence(decodedTransactions);
      return (0, ripple_binary_codec_1.encode)(getTransactionWithAllSigners(decodedTransactions));
    }
    exports.multisign = multisign;
    function verifySignature(tx, publicKey2) {
      const decodedTx = (0, utils_1.getDecodedTransaction)(tx);
      let key = publicKey2;
      if (typeof decodedTx.TxnSignature !== "string" || !decodedTx.TxnSignature) {
        throw new Error("Transaction is missing a signature, TxnSignature");
      }
      if (!key) {
        if (typeof decodedTx.SigningPubKey !== "string" || !decodedTx.SigningPubKey) {
          throw new Error("Transaction is missing a public key, SigningPubKey");
        }
        key = decodedTx.SigningPubKey;
      }
      return (0, ripple_keypairs_1.verify)((0, ripple_binary_codec_1.encodeForSigning)(decodedTx), decodedTx.TxnSignature, key);
    }
    exports.verifySignature = verifySignature;
    function validateTransactionEquivalence(transactions) {
      const exampleTransaction = JSON.stringify(Object.assign(Object.assign({}, transactions[0]), { Signers: null }));
      if (transactions.slice(1).some((tx) => JSON.stringify(Object.assign(Object.assign({}, tx), { Signers: null })) !== exampleTransaction)) {
        throw new errors_1.ValidationError("txJSON is not the same for all signedTransactions");
      }
    }
    function getTransactionWithAllSigners(transactions) {
      const sortedSigners = transactions.flatMap((tx) => {
        var _a;
        return (_a = tx.Signers) !== null && _a !== void 0 ? _a : [];
      }).sort((signer1, signer2) => (0, utils_1.compareSigners)(signer1.Signer, signer2.Signer));
      return Object.assign(Object.assign({}, transactions[0]), { Signers: sortedSigners });
    }
  }
});

// node_modules/xrpl/dist/npm/Wallet/index.js
var require_Wallet = __commonJS({
  "node_modules/xrpl/dist/npm/Wallet/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wallet = void 0;
    var bip32_1 = require_lib3();
    var bip39_1 = require_bip39();
    var english_1 = require_english();
    var utils_1 = require_browser2();
    var bignumber_js_1 = __importDefault(require_bignumber());
    var ripple_address_codec_1 = require_dist();
    var ripple_binary_codec_1 = require_dist2();
    var ripple_keypairs_1 = require_dist3();
    var ECDSA_1 = __importDefault(require_ECDSA());
    var errors_1 = require_errors();
    var transactions_1 = require_transactions();
    var common_1 = require_common2();
    var utils_2 = require_utils8();
    var utils_3 = require_utils10();
    var collections_1 = require_collections();
    var hashLedger_1 = require_hashLedger();
    var rfc1751_1 = require_rfc1751();
    var signer_1 = require_signer();
    var DEFAULT_ALGORITHM = ECDSA_1.default.ed25519;
    var DEFAULT_DERIVATION_PATH = "m/44'/144'/0'/0/0";
    function validateKey(node) {
      if (!(node.privateKey instanceof Uint8Array)) {
        throw new errors_1.ValidationError("Unable to derive privateKey from mnemonic input");
      }
      if (!(node.publicKey instanceof Uint8Array)) {
        throw new errors_1.ValidationError("Unable to derive publicKey from mnemonic input");
      }
    }
    var Wallet = class _Wallet {
      constructor(publicKey2, privateKey, opts = {}) {
        this.publicKey = publicKey2;
        this.privateKey = privateKey;
        this.classicAddress = opts.masterAddress ? (0, utils_3.ensureClassicAddress)(opts.masterAddress) : (0, ripple_keypairs_1.deriveAddress)(publicKey2);
        this.seed = opts.seed;
      }
      get address() {
        return this.classicAddress;
      }
      static generate(algorithm = DEFAULT_ALGORITHM) {
        if (!Object.values(ECDSA_1.default).includes(algorithm)) {
          throw new errors_1.ValidationError("Invalid cryptographic signing algorithm");
        }
        const seed = (0, ripple_keypairs_1.generateSeed)({ algorithm });
        return _Wallet.fromSeed(seed, { algorithm });
      }
      static fromSeed(seed, opts = {}) {
        return _Wallet.deriveWallet(seed, {
          algorithm: opts.algorithm,
          masterAddress: opts.masterAddress
        });
      }
      static fromEntropy(entropy, opts = {}) {
        var _a;
        const algorithm = (_a = opts.algorithm) !== null && _a !== void 0 ? _a : DEFAULT_ALGORITHM;
        const options = {
          entropy: Uint8Array.from(entropy),
          algorithm
        };
        const seed = (0, ripple_keypairs_1.generateSeed)(options);
        return _Wallet.deriveWallet(seed, {
          algorithm,
          masterAddress: opts.masterAddress
        });
      }
      static fromMnemonic(mnemonic, opts = {}) {
        var _a;
        if (opts.mnemonicEncoding === "rfc1751") {
          return _Wallet.fromRFC1751Mnemonic(mnemonic, {
            masterAddress: opts.masterAddress,
            algorithm: opts.algorithm
          });
        }
        if (!(0, bip39_1.validateMnemonic)(mnemonic, english_1.wordlist)) {
          throw new errors_1.ValidationError("Unable to parse the given mnemonic using bip39 encoding");
        }
        const seed = (0, bip39_1.mnemonicToSeedSync)(mnemonic);
        const masterNode = bip32_1.HDKey.fromMasterSeed(seed);
        const node = masterNode.derive((_a = opts.derivationPath) !== null && _a !== void 0 ? _a : DEFAULT_DERIVATION_PATH);
        validateKey(node);
        const publicKey2 = (0, utils_1.bytesToHex)(node.publicKey);
        const privateKey = (0, utils_1.bytesToHex)(node.privateKey);
        return new _Wallet(publicKey2, `00${privateKey}`, {
          masterAddress: opts.masterAddress
        });
      }
      static fromRFC1751Mnemonic(mnemonic, opts) {
        const seed = (0, rfc1751_1.rfc1751MnemonicToKey)(mnemonic);
        let encodeAlgorithm;
        if (opts.algorithm === ECDSA_1.default.ed25519) {
          encodeAlgorithm = "ed25519";
        } else {
          encodeAlgorithm = "secp256k1";
        }
        const encodedSeed = (0, ripple_address_codec_1.encodeSeed)(seed, encodeAlgorithm);
        return _Wallet.fromSeed(encodedSeed, {
          masterAddress: opts.masterAddress,
          algorithm: opts.algorithm
        });
      }
      static deriveWallet(seed, opts = {}) {
        var _a;
        const { publicKey: publicKey2, privateKey } = (0, ripple_keypairs_1.deriveKeypair)(seed, {
          algorithm: (_a = opts.algorithm) !== null && _a !== void 0 ? _a : DEFAULT_ALGORITHM
        });
        return new _Wallet(publicKey2, privateKey, {
          seed,
          masterAddress: opts.masterAddress
        });
      }
      sign(transaction, multisign) {
        let multisignAddress = false;
        if (typeof multisign === "string") {
          multisignAddress = multisign;
        } else if (multisign) {
          multisignAddress = this.classicAddress;
        }
        const tx = (0, collections_1.omitBy)(Object.assign({}, transaction), (value) => value == null);
        if (tx.TxnSignature || tx.Signers) {
          throw new errors_1.ValidationError('txJSON must not contain "TxnSignature" or "Signers" properties');
        }
        removeTrailingZeros(tx);
        (0, transactions_1.validate)(tx);
        if ((0, utils_2.hasFlag)(tx, common_1.GlobalFlags.tfInnerBatchTxn, "tfInnerBatchTxn")) {
          throw new errors_1.ValidationError("Cannot sign a Batch inner transaction.");
        }
        const txToSignAndEncode = Object.assign({}, tx);
        if (multisignAddress) {
          txToSignAndEncode.SigningPubKey = "";
          const signer = {
            Account: multisignAddress,
            SigningPubKey: this.publicKey,
            TxnSignature: computeSignature(txToSignAndEncode, this.privateKey, multisignAddress)
          };
          txToSignAndEncode.Signers = [{ Signer: signer }];
        } else {
          txToSignAndEncode.SigningPubKey = this.publicKey;
          txToSignAndEncode.TxnSignature = computeSignature(txToSignAndEncode, this.privateKey);
        }
        const serialized = (0, ripple_binary_codec_1.encode)(txToSignAndEncode);
        return {
          tx_blob: serialized,
          hash: (0, hashLedger_1.hashSignedTx)(serialized)
        };
      }
      verifyTransaction(signedTransaction) {
        return (0, signer_1.verifySignature)(signedTransaction, this.publicKey);
      }
      getXAddress(tag = false, isTestnet = false) {
        return (0, ripple_address_codec_1.classicAddressToXAddress)(this.classicAddress, tag, isTestnet);
      }
    };
    exports.Wallet = Wallet;
    Wallet.fromSecret = Wallet.fromSeed;
    function computeSignature(tx, privateKey, signAs) {
      if (signAs) {
        const classicAddress = (0, ripple_address_codec_1.isValidXAddress)(signAs) ? (0, ripple_address_codec_1.xAddressToClassicAddress)(signAs).classicAddress : signAs;
        return (0, ripple_keypairs_1.sign)((0, ripple_binary_codec_1.encodeForMultisigning)(tx, classicAddress), privateKey);
      }
      return (0, ripple_keypairs_1.sign)((0, ripple_binary_codec_1.encodeForSigning)(tx), privateKey);
    }
    function removeTrailingZeros(tx) {
      if (tx.TransactionType === "Payment" && typeof tx.Amount !== "string" && tx.Amount.value.includes(".") && tx.Amount.value.endsWith("0")) {
        tx.Amount = Object.assign({}, tx.Amount);
        tx.Amount.value = new bignumber_js_1.default(tx.Amount.value).toString();
      }
    }
  }
});

// node_modules/xrpl/dist/npm/Wallet/defaultFaucets.js
var require_defaultFaucets = __commonJS({
  "node_modules/xrpl/dist/npm/Wallet/defaultFaucets.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFaucetPath = exports.getFaucetHost = exports.faucetNetworkIDs = exports.faucetNetworkPaths = exports.FaucetNetwork = void 0;
    var errors_1 = require_errors();
    var FaucetNetwork;
    (function(FaucetNetwork2) {
      FaucetNetwork2["Testnet"] = "faucet.altnet.rippletest.net";
      FaucetNetwork2["Devnet"] = "faucet.devnet.rippletest.net";
    })(FaucetNetwork || (exports.FaucetNetwork = FaucetNetwork = {}));
    exports.faucetNetworkPaths = {
      [FaucetNetwork.Testnet]: "/accounts",
      [FaucetNetwork.Devnet]: "/accounts"
    };
    exports.faucetNetworkIDs = /* @__PURE__ */ new Map([
      [1, FaucetNetwork.Testnet],
      [2, FaucetNetwork.Devnet]
    ]);
    function getFaucetHost(client) {
      if (client.networkID == null) {
        throw new errors_1.XRPLFaucetError("Cannot create faucet URL without networkID or the faucetHost information");
      }
      if (exports.faucetNetworkIDs.has(client.networkID)) {
        return exports.faucetNetworkIDs.get(client.networkID);
      }
      if (client.networkID === 0) {
        throw new errors_1.XRPLFaucetError("Faucet is not available for mainnet.");
      }
      throw new errors_1.XRPLFaucetError("Faucet URL is not defined or inferrable.");
    }
    exports.getFaucetHost = getFaucetHost;
    function getFaucetPath(hostname) {
      if (hostname === void 0) {
        return "/accounts";
      }
      return exports.faucetNetworkPaths[hostname] || "/accounts";
    }
    exports.getFaucetPath = getFaucetPath;
  }
});

// node_modules/xrpl/dist/npm/Wallet/fundWallet.js
var require_fundWallet = __commonJS({
  "node_modules/xrpl/dist/npm/Wallet/fundWallet.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.requestFunding = exports.getStartingBalance = exports.generateWalletToFund = void 0;
    var ripple_address_codec_1 = require_dist();
    var errors_1 = require_errors();
    var defaultFaucets_1 = require_defaultFaucets();
    var _1 = require_Wallet();
    var INTERVAL_SECONDS = 1;
    var MAX_ATTEMPTS = 20;
    function generateWalletToFund(wallet) {
      if (wallet && (0, ripple_address_codec_1.isValidClassicAddress)(wallet.classicAddress)) {
        return wallet;
      }
      return _1.Wallet.generate();
    }
    exports.generateWalletToFund = generateWalletToFund;
    function getStartingBalance(client, classicAddress) {
      return __awaiter2(this, void 0, void 0, function* () {
        let startingBalance = 0;
        try {
          startingBalance = Number(yield client.getXrpBalance(classicAddress));
        } catch (_a) {
        }
        return startingBalance;
      });
    }
    exports.getStartingBalance = getStartingBalance;
    function requestFunding(options, client, startingBalance, walletToFund, postBody) {
      var _a, _b, _c;
      return __awaiter2(this, void 0, void 0, function* () {
        const hostname = (_a = options.faucetHost) !== null && _a !== void 0 ? _a : (0, defaultFaucets_1.getFaucetHost)(client);
        if (!hostname) {
          throw new errors_1.XRPLFaucetError("No faucet hostname could be derived");
        }
        const pathname = (_b = options.faucetPath) !== null && _b !== void 0 ? _b : (0, defaultFaucets_1.getFaucetPath)(hostname);
        const response = yield fetch(`https://${hostname}${pathname}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(postBody)
        });
        const body = yield response.json();
        if (response.ok && ((_c = response.headers.get("Content-Type")) === null || _c === void 0 ? void 0 : _c.startsWith("application/json"))) {
          const classicAddress = body.account.classicAddress;
          return processSuccessfulResponse(client, classicAddress, walletToFund, startingBalance);
        }
        return processError(response, body);
      });
    }
    exports.requestFunding = requestFunding;
    function processSuccessfulResponse(client, classicAddress, walletToFund, startingBalance) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (!classicAddress) {
          return Promise.reject(new errors_1.XRPLFaucetError(`The faucet account is undefined`));
        }
        const updatedBalance = yield getUpdatedBalance(client, classicAddress, startingBalance);
        if (updatedBalance > startingBalance) {
          return {
            wallet: walletToFund,
            balance: updatedBalance
          };
        }
        throw new errors_1.XRPLFaucetError(`Unable to fund address with faucet after waiting ${INTERVAL_SECONDS * MAX_ATTEMPTS} seconds`);
      });
    }
    function processError(response, body) {
      return __awaiter2(this, void 0, void 0, function* () {
        return Promise.reject(new errors_1.XRPLFaucetError(`Request failed: ${JSON.stringify({
          body: body || {},
          contentType: response.headers.get("Content-Type"),
          statusCode: response.status
        })}`));
      });
    }
    function getUpdatedBalance(client, address, originalBalance) {
      return __awaiter2(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
          let attempts = MAX_ATTEMPTS;
          const interval2 = setInterval(() => __awaiter2(this, void 0, void 0, function* () {
            if (attempts < 0) {
              clearInterval(interval2);
              resolve(originalBalance);
            } else {
              attempts -= 1;
            }
            try {
              let newBalance;
              try {
                newBalance = Number(yield client.getXrpBalance(address));
              } catch (_a) {
              }
              if (newBalance > originalBalance) {
                clearInterval(interval2);
                resolve(newBalance);
              }
            } catch (err) {
              clearInterval(interval2);
              if (err instanceof Error) {
                reject(new errors_1.XRPLFaucetError(`Unable to check if the address ${address} balance has increased. Error: ${err.message}`));
              }
              reject(err);
            }
          }), INTERVAL_SECONDS * 1e3);
        });
      });
    }
  }
});

// node_modules/@xrplf/isomorphic/dist/ws/browser.js
var require_browser6 = __commonJS({
  "node_modules/@xrplf/isomorphic/dist/ws/browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var eventemitter3_1 = require_eventemitter3();
    var WSWrapper = class extends eventemitter3_1.EventEmitter {
      /**
       * Constructs a browser-safe websocket.
       *
       * @param url - URL to connect to.
       * @param _protocols - Not used.
       * @param _websocketOptions - Not used.
       */
      constructor(url, _protocols, _websocketOptions) {
        super();
        this.ws = new WebSocket(url);
        this.ws.onclose = (closeEvent) => {
          let reason;
          if (closeEvent.reason) {
            const enc = new TextEncoder();
            reason = enc.encode(closeEvent.reason);
          }
          this.emit("close", closeEvent.code, reason);
        };
        this.ws.onopen = () => {
          this.emit("open");
        };
        this.ws.onerror = (error) => {
          this.emit("error", error);
        };
        this.ws.onmessage = (message) => {
          this.emit("message", message.data);
        };
      }
      /**
       * Get the ready state of the websocket.
       *
       * @returns The Websocket's ready state.
       */
      get readyState() {
        return this.ws.readyState;
      }
      /**
       * Closes the websocket.
       *
       * @param code - Close code.
       * @param reason - Close reason.
       */
      close(code, reason) {
        if (this.readyState === 1) {
          this.ws.close(code, reason);
        }
      }
      /**
       * Sends a message over the Websocket connection.
       *
       * @param message - Message to send.
       */
      send(message) {
        this.ws.send(message);
      }
    };
    WSWrapper.CONNECTING = 0;
    WSWrapper.OPEN = 1;
    WSWrapper.CLOSING = 2;
    WSWrapper.CLOSED = 3;
    exports.default = WSWrapper;
  }
});

// node_modules/xrpl/dist/npm/client/ConnectionManager.js
var require_ConnectionManager = __commonJS({
  "node_modules/xrpl/dist/npm/client/ConnectionManager.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ConnectionManager = class {
      constructor() {
        this.promisesAwaitingConnection = [];
      }
      resolveAllAwaiting() {
        this.promisesAwaitingConnection.map(({ resolve }) => resolve());
        this.promisesAwaitingConnection = [];
      }
      rejectAllAwaiting(error) {
        this.promisesAwaitingConnection.map(({ reject }) => reject(error));
        this.promisesAwaitingConnection = [];
      }
      awaitConnection() {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            this.promisesAwaitingConnection.push({ resolve, reject });
          });
        });
      }
    };
    exports.default = ConnectionManager;
  }
});

// node_modules/xrpl/dist/npm/client/ExponentialBackoff.js
var require_ExponentialBackoff = __commonJS({
  "node_modules/xrpl/dist/npm/client/ExponentialBackoff.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DEFAULT_MIN = 100;
    var DEFAULT_MAX = 1e3;
    var ExponentialBackoff = class {
      constructor(opts = {}) {
        var _a, _b;
        this.factor = 2;
        this.numAttempts = 0;
        this.ms = (_a = opts.min) !== null && _a !== void 0 ? _a : DEFAULT_MIN;
        this.max = (_b = opts.max) !== null && _b !== void 0 ? _b : DEFAULT_MAX;
      }
      get attempts() {
        return this.numAttempts;
      }
      duration() {
        const ms = this.ms * Math.pow(this.factor, this.numAttempts);
        this.numAttempts += 1;
        return Math.floor(Math.min(ms, this.max));
      }
      reset() {
        this.numAttempts = 0;
      }
    };
    exports.default = ExponentialBackoff;
  }
});

// node_modules/xrpl/dist/npm/client/RequestManager.js
var require_RequestManager = __commonJS({
  "node_modules/xrpl/dist/npm/client/RequestManager.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var errors_1 = require_errors();
    var RequestManager = class {
      constructor() {
        this.nextId = 0;
        this.promisesAwaitingResponse = /* @__PURE__ */ new Map();
      }
      addPromise(newId, timer2) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            this.promisesAwaitingResponse.set(newId, {
              resolve,
              reject,
              timer: timer2
            });
          });
        });
      }
      resolve(id, response) {
        const promise = this.promisesAwaitingResponse.get(id);
        if (promise == null) {
          throw new errors_1.XrplError(`No existing promise with id ${id}`, {
            type: "resolve",
            response
          });
        }
        clearTimeout(promise.timer);
        promise.resolve(response);
        this.deletePromise(id);
      }
      reject(id, error) {
        const promise = this.promisesAwaitingResponse.get(id);
        if (promise == null) {
          throw new errors_1.XrplError(`No existing promise with id ${id}`, {
            type: "reject",
            error
          });
        }
        clearTimeout(promise.timer);
        promise.reject(error);
        this.deletePromise(id);
      }
      rejectAll(error) {
        this.promisesAwaitingResponse.forEach((_promise, id, _map) => {
          this.reject(id, error);
          this.deletePromise(id);
        });
      }
      createRequest(request, timeout2) {
        let newId;
        if (request.id == null) {
          newId = this.nextId;
          this.nextId += 1;
        } else {
          newId = request.id;
        }
        const newRequest = JSON.stringify(Object.assign(Object.assign({}, request), { id: newId }));
        const timer2 = setTimeout(() => {
          this.reject(newId, new errors_1.TimeoutError(`Timeout for request: ${JSON.stringify(request)} with id ${newId}`, request));
        }, timeout2);
        if (timer2.unref) {
          ;
          timer2.unref();
        }
        if (this.promisesAwaitingResponse.has(newId)) {
          clearTimeout(timer2);
          throw new errors_1.XrplError(`Response with id '${newId}' is already pending`, request);
        }
        const newPromise = new Promise((resolve, reject) => {
          this.promisesAwaitingResponse.set(newId, {
            resolve,
            reject,
            timer: timer2
          });
        });
        return [newId, newRequest, newPromise];
      }
      handleResponse(response) {
        var _a, _b, _c;
        if (response.id == null || !(typeof response.id === "string" || typeof response.id === "number")) {
          throw new errors_1.ResponseFormatError("valid id not found in response", response);
        }
        if (!this.promisesAwaitingResponse.has(response.id)) {
          return;
        }
        if (response.status == null) {
          const error = new errors_1.ResponseFormatError("Response has no status");
          this.reject(response.id, error);
        }
        if (response.status === "error") {
          const errorResponse = response;
          const error = new errors_1.RippledError((_b = (_a = errorResponse.error_message) !== null && _a !== void 0 ? _a : errorResponse.error_exception) !== null && _b !== void 0 ? _b : errorResponse.error, errorResponse);
          this.reject(response.id, error);
          return;
        }
        if (response.status !== "success") {
          const error = new errors_1.ResponseFormatError(`unrecognized response.status: ${(_c = response.status) !== null && _c !== void 0 ? _c : ""}`, response);
          this.reject(response.id, error);
          return;
        }
        delete response.status;
        this.resolve(response.id, response);
      }
      deletePromise(id) {
        this.promisesAwaitingResponse.delete(id);
      }
    };
    exports.default = RequestManager;
  }
});

// node_modules/xrpl/dist/npm/client/connection.js
var require_connection = __commonJS({
  "node_modules/xrpl/dist/npm/client/connection.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Connection = exports.INTENTIONAL_DISCONNECT_CODE = void 0;
    var utils_1 = require_browser2();
    var ws_1 = __importDefault(require_browser6());
    var eventemitter3_1 = require_eventemitter3();
    var errors_1 = require_errors();
    var ConnectionManager_1 = __importDefault(require_ConnectionManager());
    var ExponentialBackoff_1 = __importDefault(require_ExponentialBackoff());
    var RequestManager_1 = __importDefault(require_RequestManager());
    var SECONDS_PER_MINUTE = 60;
    var TIMEOUT = 20;
    var CONNECTION_TIMEOUT = 5;
    exports.INTENTIONAL_DISCONNECT_CODE = 4e3;
    function createWebSocket(url, config5) {
      const options = {
        agent: config5.agent
      };
      if (config5.headers) {
        options.headers = config5.headers;
      }
      if (config5.authorization != null) {
        options.headers = Object.assign(Object.assign({}, options.headers), { Authorization: `Basic ${btoa(config5.authorization)}` });
      }
      const websocketOptions = Object.assign({}, options);
      return new ws_1.default(url, websocketOptions);
    }
    function websocketSendAsync(ws, message) {
      return __awaiter2(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
          ws.send(message, (error) => {
            if (error) {
              reject(new errors_1.DisconnectedError(error.message, error));
            } else {
              resolve();
            }
          });
        });
      });
    }
    var Connection = class extends eventemitter3_1.EventEmitter {
      constructor(url, options = {}) {
        super();
        this.ws = null;
        this.reconnectTimeoutID = null;
        this.heartbeatIntervalID = null;
        this.retryConnectionBackoff = new ExponentialBackoff_1.default({
          min: 100,
          max: SECONDS_PER_MINUTE * 1e3
        });
        this.requestManager = new RequestManager_1.default();
        this.connectionManager = new ConnectionManager_1.default();
        this.trace = () => {
        };
        this.url = url;
        this.config = Object.assign({ timeout: TIMEOUT * 1e3, connectionTimeout: CONNECTION_TIMEOUT * 1e3 }, options);
        if (typeof options.trace === "function") {
          this.trace = options.trace;
        } else if (options.trace) {
          this.trace = console.log;
        }
      }
      get state() {
        return this.ws ? this.ws.readyState : ws_1.default.CLOSED;
      }
      get shouldBeConnected() {
        return this.ws !== null;
      }
      isConnected() {
        return this.state === ws_1.default.OPEN;
      }
      connect() {
        return __awaiter2(this, void 0, void 0, function* () {
          if (this.isConnected()) {
            return Promise.resolve();
          }
          if (this.state === ws_1.default.CONNECTING) {
            return this.connectionManager.awaitConnection();
          }
          if (!this.url) {
            return Promise.reject(new errors_1.ConnectionError("Cannot connect because no server was specified"));
          }
          if (this.ws != null) {
            return Promise.reject(new errors_1.XrplError("Websocket connection never cleaned up.", {
              state: this.state
            }));
          }
          const connectionTimeoutID = setTimeout(() => {
            this.onConnectionFailed(new errors_1.ConnectionError(`Error: connect() timed out after ${this.config.connectionTimeout} ms. If your internet connection is working, the rippled server may be blocked or inaccessible. You can also try setting the 'connectionTimeout' option in the Client constructor.`));
          }, this.config.connectionTimeout);
          this.ws = createWebSocket(this.url, this.config);
          if (this.ws == null) {
            throw new errors_1.XrplError("Connect: created null websocket");
          }
          this.ws.on("error", (error) => this.onConnectionFailed(error));
          this.ws.on("error", () => clearTimeout(connectionTimeoutID));
          this.ws.on("close", (reason) => this.onConnectionFailed(reason));
          this.ws.on("close", () => clearTimeout(connectionTimeoutID));
          this.ws.once("open", () => {
            void this.onceOpen(connectionTimeoutID);
          });
          return this.connectionManager.awaitConnection();
        });
      }
      disconnect() {
        return __awaiter2(this, void 0, void 0, function* () {
          this.clearHeartbeatInterval();
          if (this.reconnectTimeoutID !== null) {
            clearTimeout(this.reconnectTimeoutID);
            this.reconnectTimeoutID = null;
          }
          if (this.state === ws_1.default.CLOSED) {
            return Promise.resolve(void 0);
          }
          if (this.ws == null) {
            return Promise.resolve(void 0);
          }
          return new Promise((resolve) => {
            if (this.ws == null) {
              resolve(void 0);
            }
            if (this.ws != null) {
              this.ws.once("close", (code) => resolve(code));
            }
            if (this.ws != null && this.state !== ws_1.default.CLOSING) {
              this.ws.close(exports.INTENTIONAL_DISCONNECT_CODE);
            }
          });
        });
      }
      reconnect() {
        return __awaiter2(this, void 0, void 0, function* () {
          this.emit("reconnect");
          yield this.disconnect();
          yield this.connect();
        });
      }
      request(request, timeout2) {
        return __awaiter2(this, void 0, void 0, function* () {
          if (!this.shouldBeConnected || this.ws == null) {
            throw new errors_1.NotConnectedError(JSON.stringify(request), request);
          }
          const [id, message, responsePromise] = this.requestManager.createRequest(request, timeout2 !== null && timeout2 !== void 0 ? timeout2 : this.config.timeout);
          this.trace("send", message);
          websocketSendAsync(this.ws, message).catch((error) => {
            this.requestManager.reject(id, error);
          });
          return responsePromise;
        });
      }
      getUrl() {
        var _a;
        return (_a = this.url) !== null && _a !== void 0 ? _a : "";
      }
      onMessage(message) {
        this.trace("receive", message);
        let data;
        try {
          data = JSON.parse(message);
        } catch (error) {
          if (error instanceof Error) {
            this.emit("error", "badMessage", error.message, message);
          }
          return;
        }
        if (data.type == null && data.error) {
          this.emit("error", data.error, data.error_message, data);
          return;
        }
        if (data.type) {
          this.emit(data.type, data);
        }
        if (data.type === "response") {
          try {
            this.requestManager.handleResponse(data);
          } catch (error) {
            if (error instanceof Error) {
              this.emit("error", "badMessage", error.message, message);
            } else {
              this.emit("error", "badMessage", error, error);
            }
          }
        }
      }
      onceOpen(connectionTimeoutID) {
        return __awaiter2(this, void 0, void 0, function* () {
          if (this.ws == null) {
            throw new errors_1.XrplError("onceOpen: ws is null");
          }
          this.ws.removeAllListeners();
          clearTimeout(connectionTimeoutID);
          this.ws.on("message", (message) => this.onMessage(message));
          this.ws.on("error", (error) => this.emit("error", "websocket", error.message, error));
          this.ws.once("close", (code, reason) => {
            if (this.ws == null) {
              throw new errors_1.XrplError("onceClose: ws is null");
            }
            this.clearHeartbeatInterval();
            this.requestManager.rejectAll(new errors_1.DisconnectedError(`websocket was closed, ${reason ? (0, utils_1.hexToString)((0, utils_1.bytesToHex)(reason)) : ""}`));
            this.ws.removeAllListeners();
            this.ws = null;
            if (code === void 0) {
              const internalErrorCode = 1011;
              this.emit("disconnected", internalErrorCode);
            } else {
              this.emit("disconnected", code);
            }
            if (code !== exports.INTENTIONAL_DISCONNECT_CODE && code !== void 0) {
              this.intentionalDisconnect();
            }
          });
          try {
            this.retryConnectionBackoff.reset();
            this.startHeartbeatInterval();
            this.connectionManager.resolveAllAwaiting();
            this.emit("connected");
          } catch (error) {
            if (error instanceof Error) {
              this.connectionManager.rejectAllAwaiting(error);
              yield this.disconnect().catch(() => {
              });
            }
          }
        });
      }
      intentionalDisconnect() {
        const retryTimeout = this.retryConnectionBackoff.duration();
        this.trace("reconnect", `Retrying connection in ${retryTimeout}ms.`);
        this.emit("reconnecting", this.retryConnectionBackoff.attempts);
        this.reconnectTimeoutID = setTimeout(() => {
          this.reconnect().catch((error) => {
            this.emit("error", "reconnect", error.message, error);
          });
        }, retryTimeout);
      }
      clearHeartbeatInterval() {
        if (this.heartbeatIntervalID) {
          clearInterval(this.heartbeatIntervalID);
        }
      }
      startHeartbeatInterval() {
        this.clearHeartbeatInterval();
        this.heartbeatIntervalID = setInterval(() => {
          void this.heartbeat();
        }, this.config.timeout);
      }
      heartbeat() {
        return __awaiter2(this, void 0, void 0, function* () {
          this.request({ command: "ping" }).catch(() => __awaiter2(this, void 0, void 0, function* () {
            return this.reconnect().catch((error) => {
              this.emit("error", "reconnect", error.message, error);
            });
          }));
        });
      }
      onConnectionFailed(errorOrCode) {
        if (this.ws) {
          this.ws.removeAllListeners();
          this.ws.on("error", () => {
          });
          this.ws.close();
          this.ws = null;
        }
        if (typeof errorOrCode === "number") {
          this.connectionManager.rejectAllAwaiting(new errors_1.NotConnectedError(`Connection failed with code ${errorOrCode}.`, {
            code: errorOrCode
          }));
        } else if (errorOrCode === null || errorOrCode === void 0 ? void 0 : errorOrCode.message) {
          this.connectionManager.rejectAllAwaiting(new errors_1.NotConnectedError(errorOrCode.message, errorOrCode));
        } else {
          this.connectionManager.rejectAllAwaiting(new errors_1.NotConnectedError("Connection failed."));
        }
      }
    };
    exports.Connection = Connection;
  }
});

// node_modules/xrpl/dist/npm/client/partialPayment.js
var require_partialPayment = __commonJS({
  "node_modules/xrpl/dist/npm/client/partialPayment.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.handleStreamPartialPayment = exports.handlePartialPayment = void 0;
    var bignumber_js_1 = __importDefault(require_bignumber());
    var ripple_binary_codec_1 = require_dist2();
    var transactions_1 = require_transactions();
    var utils_1 = require_utils8();
    var WARN_PARTIAL_PAYMENT_CODE = 2001;
    function amountsEqual(amt1, amt2) {
      if (typeof amt1 === "string" && typeof amt2 === "string") {
        return amt1 === amt2;
      }
      if (typeof amt1 === "string" || typeof amt2 === "string") {
        return false;
      }
      if ((0, transactions_1.isMPTAmount)(amt1) && (0, transactions_1.isMPTAmount)(amt2)) {
        const aValue2 = new bignumber_js_1.default(amt1.value);
        const bValue2 = new bignumber_js_1.default(amt2.value);
        return amt1.mpt_issuance_id === amt2.mpt_issuance_id && aValue2.isEqualTo(bValue2);
      }
      if ((0, transactions_1.isMPTAmount)(amt1) || (0, transactions_1.isMPTAmount)(amt2)) {
        return false;
      }
      const aValue = new bignumber_js_1.default(amt1.value);
      const bValue = new bignumber_js_1.default(amt2.value);
      return amt1.currency === amt2.currency && amt1.issuer === amt2.issuer && aValue.isEqualTo(bValue);
    }
    function isPartialPayment(tx, metadata) {
      var _a, _b;
      if (tx == null || metadata == null || tx.TransactionType !== "Payment") {
        return false;
      }
      let meta = metadata;
      if (typeof meta === "string") {
        if (meta === "unavailable") {
          return false;
        }
        meta = (0, ripple_binary_codec_1.decode)(meta);
      }
      const tfPartial = typeof tx.Flags === "number" ? (0, utils_1.isFlagEnabled)(tx.Flags, transactions_1.PaymentFlags.tfPartialPayment) : (_a = tx.Flags) === null || _a === void 0 ? void 0 : _a.tfPartialPayment;
      if (!tfPartial) {
        return false;
      }
      const delivered = meta.delivered_amount;
      const amount = (_b = tx.DeliverMax) !== null && _b !== void 0 ? _b : tx.Amount;
      if (delivered === void 0) {
        return false;
      }
      return !amountsEqual(delivered, amount);
    }
    function txHasPartialPayment(response) {
      return isPartialPayment(response.result.tx_json, response.result.meta);
    }
    function txEntryHasPartialPayment(response) {
      return isPartialPayment(response.result.tx_json, response.result.metadata);
    }
    function accountTxHasPartialPayment(response) {
      const { transactions } = response.result;
      const foo = transactions.some((tx) => {
        if (tx.tx_json != null) {
          const transaction2 = tx;
          return isPartialPayment(transaction2.tx_json, transaction2.meta);
        }
        const transaction = tx;
        return isPartialPayment(transaction.tx, transaction.meta);
      });
      return foo;
    }
    function hasPartialPayment(command, response) {
      switch (command) {
        case "tx":
          return txHasPartialPayment(response);
        case "transaction_entry":
          return txEntryHasPartialPayment(response);
        case "account_tx":
          return accountTxHasPartialPayment(response);
        default:
          return false;
      }
    }
    function handlePartialPayment(command, response) {
      var _a;
      if (hasPartialPayment(command, response)) {
        const warnings = (_a = response.warnings) !== null && _a !== void 0 ? _a : [];
        const warning = {
          id: WARN_PARTIAL_PAYMENT_CODE,
          message: "This response contains a Partial Payment"
        };
        warnings.push(warning);
        response.warnings = warnings;
      }
    }
    exports.handlePartialPayment = handlePartialPayment;
    function handleStreamPartialPayment(stream, log) {
      var _a, _b;
      if (isPartialPayment((_a = stream.tx_json) !== null && _a !== void 0 ? _a : stream.transaction, stream.meta)) {
        const warnings = (_b = stream.warnings) !== null && _b !== void 0 ? _b : [];
        const warning = {
          id: WARN_PARTIAL_PAYMENT_CODE,
          message: "This response contains a Partial Payment"
        };
        warnings.push(warning);
        stream.warnings = warnings;
        log("Partial payment received", JSON.stringify(stream));
      }
    }
    exports.handleStreamPartialPayment = handleStreamPartialPayment;
  }
});

// node_modules/xrpl/dist/npm/client/index.js
var require_client = __commonJS({
  "node_modules/xrpl/dist/npm/client/index.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Client = void 0;
    var eventemitter3_1 = require_eventemitter3();
    var errors_1 = require_errors();
    var common_1 = require_common();
    var flags_1 = require_flags();
    var sugar_1 = require_sugar();
    var autofill_1 = require_autofill();
    var balances_1 = require_balances();
    var getOrderbook_1 = require_getOrderbook();
    var utils_1 = require_utils9();
    var Wallet_1 = require_Wallet();
    var fundWallet_1 = require_fundWallet();
    var connection_1 = require_connection();
    var partialPayment_1 = require_partialPayment();
    function getCollectKeyFromCommand(command) {
      switch (command) {
        case "account_channels":
          return "channels";
        case "account_lines":
          return "lines";
        case "account_objects":
          return "account_objects";
        case "account_tx":
          return "transactions";
        case "account_offers":
        case "book_offers":
          return "offers";
        case "ledger_data":
          return "state";
        default:
          return null;
      }
    }
    function clamp(value, min2, max3) {
      if (min2 > max3) {
        throw new Error("Illegal clamp bounds");
      }
      return Math.min(Math.max(value, min2), max3);
    }
    var DEFAULT_FEE_CUSHION = 1.2;
    var DEFAULT_MAX_FEE_XRP = "2";
    var MIN_LIMIT = 10;
    var MAX_LIMIT = 400;
    var NORMAL_DISCONNECT_CODE = 1e3;
    var Client = class extends eventemitter3_1.EventEmitter {
      constructor(server, options = {}) {
        var _a, _b;
        super();
        this.apiVersion = common_1.DEFAULT_API_VERSION;
        if (typeof server !== "string" || !/wss?(?:\+unix)?:\/\//u.exec(server)) {
          throw new errors_1.ValidationError("server URI must start with `wss://`, `ws://`, `wss+unix://`, or `ws+unix://`.");
        }
        this.feeCushion = (_a = options.feeCushion) !== null && _a !== void 0 ? _a : DEFAULT_FEE_CUSHION;
        this.maxFeeXRP = (_b = options.maxFeeXRP) !== null && _b !== void 0 ? _b : DEFAULT_MAX_FEE_XRP;
        this.connection = new connection_1.Connection(server, options);
        this.connection.on("error", (errorCode, errorMessage, data) => {
          this.emit("error", errorCode, errorMessage, data);
        });
        this.connection.on("reconnect", () => {
          this.connection.on("connected", () => this.emit("connected"));
        });
        this.connection.on("disconnected", (code) => {
          let finalCode = code;
          if (finalCode === connection_1.INTENTIONAL_DISCONNECT_CODE) {
            finalCode = NORMAL_DISCONNECT_CODE;
          }
          this.emit("disconnected", finalCode);
        });
        this.connection.on("ledgerClosed", (ledger) => {
          this.emit("ledgerClosed", ledger);
        });
        this.connection.on("transaction", (tx) => {
          (0, partialPayment_1.handleStreamPartialPayment)(tx, this.connection.trace);
          this.emit("transaction", tx);
        });
        this.connection.on("validationReceived", (validation) => {
          this.emit("validationReceived", validation);
        });
        this.connection.on("manifestReceived", (manifest) => {
          this.emit("manifestReceived", manifest);
        });
        this.connection.on("peerStatusChange", (status) => {
          this.emit("peerStatusChange", status);
        });
        this.connection.on("consensusPhase", (consensus) => {
          this.emit("consensusPhase", consensus);
        });
        this.connection.on("path_find", (path) => {
          this.emit("path_find", path);
        });
      }
      get url() {
        return this.connection.getUrl();
      }
      request(req) {
        var _a;
        return __awaiter2(this, void 0, void 0, function* () {
          const request = Object.assign(Object.assign({}, req), { account: typeof req.account === "string" ? (0, sugar_1.ensureClassicAddress)(req.account) : void 0, api_version: (_a = req.api_version) !== null && _a !== void 0 ? _a : this.apiVersion });
          const response = yield this.connection.request(request);
          (0, partialPayment_1.handlePartialPayment)(req.command, response);
          return response;
        });
      }
      requestNextPage(req, resp) {
        return __awaiter2(this, void 0, void 0, function* () {
          if (!resp.result.marker) {
            return Promise.reject(new errors_1.NotFoundError("response does not have a next page"));
          }
          const nextPageRequest = Object.assign(Object.assign({}, req), { marker: resp.result.marker });
          return this.request(nextPageRequest);
        });
      }
      on(eventName, listener) {
        return super.on(eventName, listener);
      }
      requestAll(request, collect) {
        return __awaiter2(this, void 0, void 0, function* () {
          const collectKey = collect !== null && collect !== void 0 ? collect : getCollectKeyFromCommand(request.command);
          if (!collectKey) {
            throw new errors_1.ValidationError(`no collect key for command ${request.command}`);
          }
          const countTo = request.limit == null ? Infinity : request.limit;
          let count2 = 0;
          let marker = request.marker;
          const results = [];
          do {
            const countRemaining = clamp(countTo - count2, MIN_LIMIT, MAX_LIMIT);
            const repeatProps = Object.assign(Object.assign({}, request), { limit: countRemaining, marker });
            const singleResponse = yield this.connection.request(repeatProps);
            const singleResult = singleResponse.result;
            if (!(collectKey in singleResult)) {
              throw new errors_1.XrplError(`${collectKey} not in result`);
            }
            const collectedData = singleResult[collectKey];
            marker = singleResult.marker;
            results.push(singleResponse);
            if (Array.isArray(collectedData)) {
              count2 += collectedData.length;
            }
          } while (Boolean(marker) && count2 < countTo);
          return results;
        });
      }
      getServerInfo() {
        var _a;
        return __awaiter2(this, void 0, void 0, function* () {
          try {
            const response = yield this.request({
              command: "server_info"
            });
            this.networkID = (_a = response.result.info.network_id) !== null && _a !== void 0 ? _a : void 0;
            this.buildVersion = response.result.info.build_version;
          } catch (error) {
            console.error(error);
          }
        });
      }
      connect() {
        return __awaiter2(this, void 0, void 0, function* () {
          return this.connection.connect().then(() => __awaiter2(this, void 0, void 0, function* () {
            yield this.getServerInfo();
            this.emit("connected");
          }));
        });
      }
      disconnect() {
        return __awaiter2(this, void 0, void 0, function* () {
          yield this.connection.disconnect();
        });
      }
      isConnected() {
        return this.connection.isConnected();
      }
      autofill(transaction, signersCount) {
        return __awaiter2(this, void 0, void 0, function* () {
          const tx = Object.assign({}, transaction);
          (0, autofill_1.setValidAddresses)(tx);
          tx.Flags = (0, flags_1.convertTxFlagsToNumber)(tx);
          const promises = [];
          if (tx.NetworkID == null) {
            tx.NetworkID = (0, autofill_1.txNeedsNetworkID)(this) ? this.networkID : void 0;
          }
          if (tx.Sequence == null) {
            promises.push((0, autofill_1.setNextValidSequenceNumber)(this, tx));
          }
          if (tx.Fee == null) {
            promises.push((0, autofill_1.getTransactionFee)(this, tx, signersCount));
          }
          if (tx.LastLedgerSequence == null) {
            promises.push((0, autofill_1.setLatestValidatedLedgerSequence)(this, tx));
          }
          if (tx.TransactionType === "AccountDelete") {
            promises.push((0, autofill_1.checkAccountDeleteBlockers)(this, tx));
          }
          if (tx.TransactionType === "Batch") {
            promises.push((0, autofill_1.autofillBatchTxn)(this, tx));
          }
          if (tx.TransactionType === "Payment" && tx.DeliverMax != null) {
            (0, autofill_1.handleDeliverMax)(tx);
          }
          return Promise.all(promises).then(() => tx);
        });
      }
      simulate(transaction, opts) {
        var _a;
        return __awaiter2(this, void 0, void 0, function* () {
          const binary = (_a = opts === null || opts === void 0 ? void 0 : opts.binary) !== null && _a !== void 0 ? _a : false;
          const request = typeof transaction === "string" ? { command: "simulate", tx_blob: transaction, binary } : { command: "simulate", tx_json: transaction, binary };
          return this.request(request);
        });
      }
      submit(transaction, opts) {
        return __awaiter2(this, void 0, void 0, function* () {
          const signedTx = yield (0, sugar_1.getSignedTx)(this, transaction, opts);
          return (0, sugar_1.submitRequest)(this, signedTx, opts === null || opts === void 0 ? void 0 : opts.failHard);
        });
      }
      submitAndWait(transaction, opts) {
        return __awaiter2(this, void 0, void 0, function* () {
          const signedTx = yield (0, sugar_1.getSignedTx)(this, transaction, opts);
          const lastLedger = (0, sugar_1.getLastLedgerSequence)(signedTx);
          if (lastLedger == null) {
            throw new errors_1.ValidationError("Transaction must contain a LastLedgerSequence value for reliable submission.");
          }
          const response = yield (0, sugar_1.submitRequest)(this, signedTx, opts === null || opts === void 0 ? void 0 : opts.failHard);
          if (response.result.engine_result.startsWith("tem")) {
            throw new errors_1.XrplError(`Transaction failed, ${response.result.engine_result}: ${response.result.engine_result_message}`);
          }
          const txHash = utils_1.hashes.hashSignedTx(signedTx);
          return (0, sugar_1.waitForFinalTransactionOutcome)(this, txHash, lastLedger, response.result.engine_result);
        });
      }
      prepareTransaction(transaction, signersCount) {
        return __awaiter2(this, void 0, void 0, function* () {
          return this.autofill(transaction, signersCount);
        });
      }
      getXrpBalance(address, options = {}) {
        var _a;
        return __awaiter2(this, void 0, void 0, function* () {
          const xrpRequest = {
            command: "account_info",
            account: address,
            ledger_index: (_a = options.ledger_index) !== null && _a !== void 0 ? _a : "validated",
            ledger_hash: options.ledger_hash
          };
          const response = yield this.request(xrpRequest);
          return (0, utils_1.dropsToXrp)(response.result.account_data.Balance);
        });
      }
      getBalances(address, options = {}) {
        var _a;
        return __awaiter2(this, void 0, void 0, function* () {
          const balances = [];
          let xrpPromise = Promise.resolve(0);
          if (!options.peer) {
            xrpPromise = this.getXrpBalance(address, {
              ledger_hash: options.ledger_hash,
              ledger_index: options.ledger_index
            });
          }
          const linesRequest = {
            command: "account_lines",
            account: address,
            ledger_index: (_a = options.ledger_index) !== null && _a !== void 0 ? _a : "validated",
            ledger_hash: options.ledger_hash,
            peer: options.peer,
            limit: options.limit
          };
          const linesPromise = this.requestAll(linesRequest);
          yield Promise.all([xrpPromise, linesPromise]).then(([xrpBalance, linesResponses]) => {
            const accountLinesBalance = linesResponses.flatMap((response) => (0, balances_1.formatBalances)(response.result.lines));
            if (xrpBalance !== 0) {
              balances.push({ currency: "XRP", value: xrpBalance.toString() });
            }
            balances.push(...accountLinesBalance);
          });
          return balances.slice(0, options.limit);
        });
      }
      getOrderbook(currency1, currency2, options = {}) {
        return __awaiter2(this, void 0, void 0, function* () {
          (0, getOrderbook_1.validateOrderbookOptions)(options);
          const request = (0, getOrderbook_1.createBookOffersRequest)(currency1, currency2, options);
          const directOfferResults = yield (0, getOrderbook_1.requestAllOffers)(this, request);
          const reverseOfferResults = yield (0, getOrderbook_1.requestAllOffers)(this, (0, getOrderbook_1.reverseRequest)(request));
          const directOffers = (0, getOrderbook_1.extractOffers)(directOfferResults);
          const reverseOffers = (0, getOrderbook_1.extractOffers)(reverseOfferResults);
          const orders = (0, getOrderbook_1.combineOrders)(directOffers, reverseOffers);
          const { buy, sell } = (0, getOrderbook_1.separateBuySellOrders)(orders);
          return {
            buy: (0, getOrderbook_1.sortAndLimitOffers)(buy, options.limit),
            sell: (0, getOrderbook_1.sortAndLimitOffers)(sell, options.limit)
          };
        });
      }
      getLedgerIndex() {
        return __awaiter2(this, void 0, void 0, function* () {
          const ledgerResponse = yield this.request({
            command: "ledger",
            ledger_index: "validated"
          });
          return ledgerResponse.result.ledger_index;
        });
      }
      fundWallet(wallet, options = {}) {
        return __awaiter2(this, void 0, void 0, function* () {
          if (!this.isConnected()) {
            throw new errors_1.RippledError("Client not connected, cannot call faucet");
          }
          const existingWallet = Boolean(wallet);
          const walletToFund = wallet && (0, utils_1.isValidClassicAddress)(wallet.classicAddress) ? wallet : Wallet_1.Wallet.generate();
          const postBody = {
            destination: walletToFund.classicAddress,
            xrpAmount: options.amount,
            usageContext: options.usageContext,
            userAgent: "xrpl.js"
          };
          let startingBalance = 0;
          if (existingWallet) {
            try {
              startingBalance = Number(yield this.getXrpBalance(walletToFund.classicAddress));
            } catch (_a) {
            }
          }
          return (0, fundWallet_1.requestFunding)(options, this, startingBalance, walletToFund, postBody);
        });
      }
    };
    exports.Client = Client;
  }
});

// node_modules/xrpl/dist/npm/models/ledger/Amendments.js
var require_Amendments = __commonJS({
  "node_modules/xrpl/dist/npm/models/ledger/Amendments.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AMENDMENTS_ID = void 0;
    exports.AMENDMENTS_ID = "7DB0788C020F02780A673DC74757F23823FA3014C1866E72CC4CD8B226CD6EF4";
  }
});

// node_modules/xrpl/dist/npm/models/ledger/FeeSettings.js
var require_FeeSettings = __commonJS({
  "node_modules/xrpl/dist/npm/models/ledger/FeeSettings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FEE_SETTINGS_ID = void 0;
    exports.FEE_SETTINGS_ID = "4BC50C9B0D8515D3EAAE1E74B29A95804346C491EE1A95BF25E4AAB854A6A651";
  }
});

// node_modules/xrpl/dist/npm/models/ledger/NegativeUNL.js
var require_NegativeUNL = __commonJS({
  "node_modules/xrpl/dist/npm/models/ledger/NegativeUNL.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NEGATIVE_UNL_ID = void 0;
    exports.NEGATIVE_UNL_ID = "2E8A59AA9D3B5B186B0B9E0F62E6C02587CA74A4D778938E957B6357D364B244";
  }
});

// node_modules/xrpl/dist/npm/models/ledger/RippleState.js
var require_RippleState = __commonJS({
  "node_modules/xrpl/dist/npm/models/ledger/RippleState.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RippleStateFlags = void 0;
    var RippleStateFlags;
    (function(RippleStateFlags2) {
      RippleStateFlags2[RippleStateFlags2["lsfLowReserve"] = 65536] = "lsfLowReserve";
      RippleStateFlags2[RippleStateFlags2["lsfHighReserve"] = 131072] = "lsfHighReserve";
      RippleStateFlags2[RippleStateFlags2["lsfLowAuth"] = 262144] = "lsfLowAuth";
      RippleStateFlags2[RippleStateFlags2["lsfHighAuth"] = 524288] = "lsfHighAuth";
      RippleStateFlags2[RippleStateFlags2["lsfLowNoRipple"] = 1048576] = "lsfLowNoRipple";
      RippleStateFlags2[RippleStateFlags2["lsfHighNoRipple"] = 2097152] = "lsfHighNoRipple";
      RippleStateFlags2[RippleStateFlags2["lsfLowFreeze"] = 4194304] = "lsfLowFreeze";
      RippleStateFlags2[RippleStateFlags2["lsfHighFreeze"] = 8388608] = "lsfHighFreeze";
      RippleStateFlags2[RippleStateFlags2["lsfAMMNode"] = 16777216] = "lsfAMMNode";
      RippleStateFlags2[RippleStateFlags2["lsfLowDeepFreeze"] = 33554432] = "lsfLowDeepFreeze";
      RippleStateFlags2[RippleStateFlags2["lsfHighDeepFreeze"] = 67108864] = "lsfHighDeepFreeze";
    })(RippleStateFlags || (exports.RippleStateFlags = RippleStateFlags = {}));
  }
});

// node_modules/xrpl/dist/npm/models/ledger/SignerList.js
var require_SignerList = __commonJS({
  "node_modules/xrpl/dist/npm/models/ledger/SignerList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignerListFlags = void 0;
    var SignerListFlags;
    (function(SignerListFlags2) {
      SignerListFlags2[SignerListFlags2["lsfOneOwnerCount"] = 65536] = "lsfOneOwnerCount";
    })(SignerListFlags || (exports.SignerListFlags = SignerListFlags = {}));
  }
});

// node_modules/xrpl/dist/npm/models/ledger/index.js
var require_ledger = __commonJS({
  "node_modules/xrpl/dist/npm/models/ledger/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignerListFlags = exports.RippleStateFlags = exports.OfferFlags = exports.NEGATIVE_UNL_ID = exports.FEE_SETTINGS_ID = exports.AMENDMENTS_ID = exports.AccountRootFlags = void 0;
    var AccountRoot_1 = require_AccountRoot();
    Object.defineProperty(exports, "AccountRootFlags", { enumerable: true, get: function() {
      return AccountRoot_1.AccountRootFlags;
    } });
    var Amendments_1 = require_Amendments();
    Object.defineProperty(exports, "AMENDMENTS_ID", { enumerable: true, get: function() {
      return Amendments_1.AMENDMENTS_ID;
    } });
    var FeeSettings_1 = require_FeeSettings();
    Object.defineProperty(exports, "FEE_SETTINGS_ID", { enumerable: true, get: function() {
      return FeeSettings_1.FEE_SETTINGS_ID;
    } });
    var NegativeUNL_1 = require_NegativeUNL();
    Object.defineProperty(exports, "NEGATIVE_UNL_ID", { enumerable: true, get: function() {
      return NegativeUNL_1.NEGATIVE_UNL_ID;
    } });
    var Offer_1 = require_Offer();
    Object.defineProperty(exports, "OfferFlags", { enumerable: true, get: function() {
      return Offer_1.OfferFlags;
    } });
    var RippleState_1 = require_RippleState();
    Object.defineProperty(exports, "RippleStateFlags", { enumerable: true, get: function() {
      return RippleState_1.RippleStateFlags;
    } });
    var SignerList_1 = require_SignerList();
    Object.defineProperty(exports, "SignerListFlags", { enumerable: true, get: function() {
      return SignerList_1.SignerListFlags;
    } });
  }
});

// node_modules/xrpl/dist/npm/models/methods/index.js
var require_methods = __commonJS({
  "node_modules/xrpl/dist/npm/models/methods/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/xrpl/dist/npm/models/index.js
var require_models = __commonJS({
  "node_modules/xrpl/dist/npm/models/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m, k2);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v3) {
      Object.defineProperty(o, "default", { enumerable: true, value: v3 });
    } : function(o, v3) {
      o["default"] = v3;
    });
    var __importStar = exports && exports.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule) return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k2 in mod2) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k2)) __createBinding(result, mod2, k2);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseTransactionFlags = exports.convertTxFlagsToNumber = exports.setTransactionFlagsToNumber = exports.parseAccountRootFlags = exports.LedgerEntry = void 0;
    exports.LedgerEntry = __importStar(require_ledger());
    var flags_1 = require_flags();
    Object.defineProperty(exports, "parseAccountRootFlags", { enumerable: true, get: function() {
      return flags_1.parseAccountRootFlags;
    } });
    Object.defineProperty(exports, "setTransactionFlagsToNumber", { enumerable: true, get: function() {
      return flags_1.setTransactionFlagsToNumber;
    } });
    Object.defineProperty(exports, "convertTxFlagsToNumber", { enumerable: true, get: function() {
      return flags_1.convertTxFlagsToNumber;
    } });
    Object.defineProperty(exports, "parseTransactionFlags", { enumerable: true, get: function() {
      return flags_1.parseTransactionFlags;
    } });
    __exportStar(require_methods(), exports);
    __exportStar(require_transactions(), exports);
    __exportStar(require_common(), exports);
  }
});

// node_modules/@xrplf/secret-numbers/dist/utils/index.js
var require_utils13 = __commonJS({
  "node_modules/@xrplf/secret-numbers/dist/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseSecretString = exports.checkChecksum = exports.calculateChecksum = exports.secretToEntropy = exports.entropyToSecret = exports.randomSecret = exports.randomEntropy = void 0;
    var utils_1 = require_browser2();
    function randomEntropy() {
      return (0, utils_1.randomBytes)(16);
    }
    exports.randomEntropy = randomEntropy;
    function calculateChecksum(position, value) {
      return value * (position * 2 + 1) % 9;
    }
    exports.calculateChecksum = calculateChecksum;
    function checkChecksum(position, value, checksum) {
      let normalizedChecksum;
      let normalizedValue;
      if (typeof value === "string") {
        if (value.length !== 6) {
          throw new Error("value must have a length of 6");
        }
        normalizedChecksum = parseInt(value.slice(5), 10);
        normalizedValue = parseInt(value.slice(0, 5), 10);
      } else {
        if (typeof checksum !== "number") {
          throw new Error("checksum must be a number when value is a number");
        }
        normalizedChecksum = checksum;
        normalizedValue = value;
      }
      return normalizedValue * (position * 2 + 1) % 9 === normalizedChecksum;
    }
    exports.checkChecksum = checkChecksum;
    function entropyToSecret(entropy) {
      const len = new Array(Math.ceil(entropy.length / 2));
      const chunks = Array.from(len, (_a, chunk) => {
        const buffChunk = entropy.slice(chunk * 2, (chunk + 1) * 2);
        const no = parseInt((0, utils_1.bytesToHex)(buffChunk), 16);
        const fill = "0".repeat(5 - String(no).length);
        return fill + String(no) + String(calculateChecksum(chunk, no));
      });
      if (chunks.length !== 8) {
        throw new Error("Chucks must have 8 digits");
      }
      return chunks;
    }
    exports.entropyToSecret = entropyToSecret;
    function randomSecret() {
      return entropyToSecret(randomEntropy());
    }
    exports.randomSecret = randomSecret;
    function secretToEntropy(secret) {
      return (0, utils_1.concat)(secret.map((chunk, i) => {
        const no = Number(chunk.slice(0, 5));
        const checksum = Number(chunk.slice(5));
        if (chunk.length !== 6) {
          throw new Error("Invalid secret: number invalid");
        }
        if (!checkChecksum(i, no, checksum)) {
          throw new Error("Invalid secret part: checksum invalid");
        }
        const hex2 = `0000${no.toString(16)}`.slice(-4);
        return (0, utils_1.hexToBytes)(hex2);
      }));
    }
    exports.secretToEntropy = secretToEntropy;
    function parseSecretString(secret) {
      const normalizedSecret = secret.replace(/[^0-9]/gu, "");
      if (normalizedSecret.length !== 48) {
        throw new Error("Invalid secret string (should contain 8 blocks of 6 digits");
      }
      return Array.from(new Array(8), (_a, index) => {
        return normalizedSecret.slice(index * 6, (index + 1) * 6);
      });
    }
    exports.parseSecretString = parseSecretString;
  }
});

// node_modules/@xrplf/secret-numbers/dist/schema/Account.js
var require_Account = __commonJS({
  "node_modules/@xrplf/secret-numbers/dist/schema/Account.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Account = void 0;
    var ripple_keypairs_1 = require_dist3();
    var utils_1 = require_utils13();
    var Account = class {
      constructor(secretNumbers) {
        this._account = {
          familySeed: "",
          address: "",
          keypair: {
            publicKey: "",
            privateKey: ""
          }
        };
        if (typeof secretNumbers === "string") {
          this._secret = (0, utils_1.parseSecretString)(secretNumbers);
        } else if (Array.isArray(secretNumbers)) {
          this._secret = secretNumbers;
        } else if (secretNumbers instanceof Uint8Array) {
          this._secret = (0, utils_1.entropyToSecret)(secretNumbers);
        } else {
          this._secret = (0, utils_1.randomSecret)();
        }
        validateLengths(this._secret);
        this.derive();
      }
      getSecret() {
        return this._secret;
      }
      getSecretString() {
        return this._secret.join(" ");
      }
      getAddress() {
        return this._account.address;
      }
      getFamilySeed() {
        return this._account.familySeed;
      }
      getKeypair() {
        return this._account.keypair;
      }
      toString() {
        return this.getSecretString();
      }
      derive() {
        try {
          const entropy = (0, utils_1.secretToEntropy)(this._secret);
          this._account.familySeed = (0, ripple_keypairs_1.generateSeed)({ entropy });
          this._account.keypair = (0, ripple_keypairs_1.deriveKeypair)(this._account.familySeed);
          this._account.address = (0, ripple_keypairs_1.deriveAddress)(this._account.keypair.publicKey);
        } catch (error) {
          let message = "Unknown Error";
          if (error instanceof Error) {
            message = error.message;
          }
          throw new Error(message);
        }
      }
    };
    exports.Account = Account;
    function validateLengths(secretNumbers) {
      if (secretNumbers.length !== 8) {
        throw new Error("Secret must have 8 numbers");
      }
      secretNumbers.forEach((num) => {
        if (num.length !== 6) {
          throw new Error("Each secret number must be 6 digits");
        }
      });
    }
  }
});

// node_modules/@xrplf/secret-numbers/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/@xrplf/secret-numbers/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m, k2);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Account(), exports);
    __exportStar(require_utils13(), exports);
  }
});

// node_modules/xrpl/dist/npm/Wallet/walletFromSecretNumbers.js
var require_walletFromSecretNumbers = __commonJS({
  "node_modules/xrpl/dist/npm/Wallet/walletFromSecretNumbers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.walletFromSecretNumbers = void 0;
    var secret_numbers_1 = require_dist4();
    var ECDSA_1 = __importDefault(require_ECDSA());
    var _1 = require_Wallet();
    function walletFromSecretNumbers(secretNumbers, opts) {
      var _a;
      const secret = new secret_numbers_1.Account(secretNumbers).getFamilySeed();
      const updatedOpts = {
        masterAddress: void 0,
        algorithm: void 0
      };
      if (opts === void 0) {
        updatedOpts.algorithm = ECDSA_1.default.secp256k1;
      } else {
        updatedOpts.masterAddress = opts.masterAddress;
        updatedOpts.algorithm = (_a = opts.algorithm) !== null && _a !== void 0 ? _a : ECDSA_1.default.secp256k1;
      }
      return _1.Wallet.fromSecret(secret, updatedOpts);
    }
    exports.walletFromSecretNumbers = walletFromSecretNumbers;
  }
});

// node_modules/xrpl/dist/npm/index.js
var require_npm = __commonJS({
  "node_modules/xrpl/dist/npm/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m, k2);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rfc1751MnemonicToKey = exports.keyToRFC1751Mnemonic = exports.walletFromSecretNumbers = exports.Wallet = exports.ECDSA = exports.Client = void 0;
    var client_1 = require_client();
    Object.defineProperty(exports, "Client", { enumerable: true, get: function() {
      return client_1.Client;
    } });
    __exportStar(require_models(), exports);
    __exportStar(require_utils9(), exports);
    var ECDSA_1 = require_ECDSA();
    Object.defineProperty(exports, "ECDSA", { enumerable: true, get: function() {
      return __importDefault(ECDSA_1).default;
    } });
    __exportStar(require_errors(), exports);
    var Wallet_1 = require_Wallet();
    Object.defineProperty(exports, "Wallet", { enumerable: true, get: function() {
      return Wallet_1.Wallet;
    } });
    var walletFromSecretNumbers_1 = require_walletFromSecretNumbers();
    Object.defineProperty(exports, "walletFromSecretNumbers", { enumerable: true, get: function() {
      return walletFromSecretNumbers_1.walletFromSecretNumbers;
    } });
    var rfc1751_1 = require_rfc1751();
    Object.defineProperty(exports, "keyToRFC1751Mnemonic", { enumerable: true, get: function() {
      return rfc1751_1.keyToRFC1751Mnemonic;
    } });
    Object.defineProperty(exports, "rfc1751MnemonicToKey", { enumerable: true, get: function() {
      return rfc1751_1.rfc1751MnemonicToKey;
    } });
    __exportStar(require_signer(), exports);
  }
});

// node_modules/fetch-ponyfill/build/fetch-browser.js
var require_fetch_browser = __commonJS({
  "node_modules/fetch-ponyfill/build/fetch-browser.js"(exports, module2) {
    (function(global2) {
      "use strict";
      function fetchPonyfill(options) {
        var Promise2 = options && options.Promise || global2.Promise;
        var XMLHttpRequest = options && options.XMLHttpRequest || global2.XMLHttpRequest;
        return function() {
          var globalThis2 = Object.create(global2, {
            fetch: {
              value: void 0,
              writable: true
            }
          });
          (function(global3, factory) {
            typeof exports === "object" && typeof module2 !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global3.WHATWGFetch = {});
          })(this, function(exports2) {
            "use strict";
            var global3 = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || typeof global3 !== "undefined" && global3;
            var support = {
              searchParams: "URLSearchParams" in global3,
              iterable: "Symbol" in global3 && "iterator" in Symbol,
              blob: "FileReader" in global3 && "Blob" in global3 && function() {
                try {
                  new Blob();
                  return true;
                } catch (e) {
                  return false;
                }
              }(),
              formData: "FormData" in global3,
              arrayBuffer: "ArrayBuffer" in global3
            };
            function isDataView(obj) {
              return obj && DataView.prototype.isPrototypeOf(obj);
            }
            if (support.arrayBuffer) {
              var viewClasses = [
                "[object Int8Array]",
                "[object Uint8Array]",
                "[object Uint8ClampedArray]",
                "[object Int16Array]",
                "[object Uint16Array]",
                "[object Int32Array]",
                "[object Uint32Array]",
                "[object Float32Array]",
                "[object Float64Array]"
              ];
              var isArrayBufferView = ArrayBuffer.isView || function(obj) {
                return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
              };
            }
            function normalizeName(name) {
              if (typeof name !== "string") {
                name = String(name);
              }
              if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
                throw new TypeError("Invalid character in header field name");
              }
              return name.toLowerCase();
            }
            function normalizeValue(value) {
              if (typeof value !== "string") {
                value = String(value);
              }
              return value;
            }
            function iteratorFor(items) {
              var iterator2 = {
                next: function() {
                  var value = items.shift();
                  return { done: value === void 0, value };
                }
              };
              if (support.iterable) {
                iterator2[Symbol.iterator] = function() {
                  return iterator2;
                };
              }
              return iterator2;
            }
            function Headers(headers) {
              this.map = {};
              if (headers instanceof Headers) {
                headers.forEach(function(value, name) {
                  this.append(name, value);
                }, this);
              } else if (Array.isArray(headers)) {
                headers.forEach(function(header) {
                  this.append(header[0], header[1]);
                }, this);
              } else if (headers) {
                Object.getOwnPropertyNames(headers).forEach(function(name) {
                  this.append(name, headers[name]);
                }, this);
              }
            }
            Headers.prototype.append = function(name, value) {
              name = normalizeName(name);
              value = normalizeValue(value);
              var oldValue = this.map[name];
              this.map[name] = oldValue ? oldValue + ", " + value : value;
            };
            Headers.prototype["delete"] = function(name) {
              delete this.map[normalizeName(name)];
            };
            Headers.prototype.get = function(name) {
              name = normalizeName(name);
              return this.has(name) ? this.map[name] : null;
            };
            Headers.prototype.has = function(name) {
              return this.map.hasOwnProperty(normalizeName(name));
            };
            Headers.prototype.set = function(name, value) {
              this.map[normalizeName(name)] = normalizeValue(value);
            };
            Headers.prototype.forEach = function(callback, thisArg) {
              for (var name in this.map) {
                if (this.map.hasOwnProperty(name)) {
                  callback.call(thisArg, this.map[name], name, this);
                }
              }
            };
            Headers.prototype.keys = function() {
              var items = [];
              this.forEach(function(value, name) {
                items.push(name);
              });
              return iteratorFor(items);
            };
            Headers.prototype.values = function() {
              var items = [];
              this.forEach(function(value) {
                items.push(value);
              });
              return iteratorFor(items);
            };
            Headers.prototype.entries = function() {
              var items = [];
              this.forEach(function(value, name) {
                items.push([name, value]);
              });
              return iteratorFor(items);
            };
            if (support.iterable) {
              Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
            }
            function consumed(body) {
              if (body.bodyUsed) {
                return Promise2.reject(new TypeError("Already read"));
              }
              body.bodyUsed = true;
            }
            function fileReaderReady(reader) {
              return new Promise2(function(resolve, reject) {
                reader.onload = function() {
                  resolve(reader.result);
                };
                reader.onerror = function() {
                  reject(reader.error);
                };
              });
            }
            function readBlobAsArrayBuffer(blob) {
              var reader = new FileReader();
              var promise = fileReaderReady(reader);
              reader.readAsArrayBuffer(blob);
              return promise;
            }
            function readBlobAsText(blob) {
              var reader = new FileReader();
              var promise = fileReaderReady(reader);
              reader.readAsText(blob);
              return promise;
            }
            function readArrayBufferAsText(buf) {
              var view = new Uint8Array(buf);
              var chars2 = new Array(view.length);
              for (var i = 0; i < view.length; i++) {
                chars2[i] = String.fromCharCode(view[i]);
              }
              return chars2.join("");
            }
            function bufferClone(buf) {
              if (buf.slice) {
                return buf.slice(0);
              } else {
                var view = new Uint8Array(buf.byteLength);
                view.set(new Uint8Array(buf));
                return view.buffer;
              }
            }
            function Body() {
              this.bodyUsed = false;
              this._initBody = function(body) {
                this.bodyUsed = this.bodyUsed;
                this._bodyInit = body;
                if (!body) {
                  this._bodyText = "";
                } else if (typeof body === "string") {
                  this._bodyText = body;
                } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                  this._bodyBlob = body;
                } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                  this._bodyFormData = body;
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                  this._bodyText = body.toString();
                } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                  this._bodyArrayBuffer = bufferClone(body.buffer);
                  this._bodyInit = new Blob([this._bodyArrayBuffer]);
                } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                  this._bodyArrayBuffer = bufferClone(body);
                } else {
                  this._bodyText = body = Object.prototype.toString.call(body);
                }
                if (!this.headers.get("content-type")) {
                  if (typeof body === "string") {
                    this.headers.set("content-type", "text/plain;charset=UTF-8");
                  } else if (this._bodyBlob && this._bodyBlob.type) {
                    this.headers.set("content-type", this._bodyBlob.type);
                  } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                    this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                  }
                }
              };
              if (support.blob) {
                this.blob = function() {
                  var rejected = consumed(this);
                  if (rejected) {
                    return rejected;
                  }
                  if (this._bodyBlob) {
                    return Promise2.resolve(this._bodyBlob);
                  } else if (this._bodyArrayBuffer) {
                    return Promise2.resolve(new Blob([this._bodyArrayBuffer]));
                  } else if (this._bodyFormData) {
                    throw new Error("could not read FormData body as blob");
                  } else {
                    return Promise2.resolve(new Blob([this._bodyText]));
                  }
                };
                this.arrayBuffer = function() {
                  if (this._bodyArrayBuffer) {
                    var isConsumed = consumed(this);
                    if (isConsumed) {
                      return isConsumed;
                    }
                    if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                      return Promise2.resolve(
                        this._bodyArrayBuffer.buffer.slice(
                          this._bodyArrayBuffer.byteOffset,
                          this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                        )
                      );
                    } else {
                      return Promise2.resolve(this._bodyArrayBuffer);
                    }
                  } else {
                    return this.blob().then(readBlobAsArrayBuffer);
                  }
                };
              }
              this.text = function() {
                var rejected = consumed(this);
                if (rejected) {
                  return rejected;
                }
                if (this._bodyBlob) {
                  return readBlobAsText(this._bodyBlob);
                } else if (this._bodyArrayBuffer) {
                  return Promise2.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
                } else if (this._bodyFormData) {
                  throw new Error("could not read FormData body as text");
                } else {
                  return Promise2.resolve(this._bodyText);
                }
              };
              if (support.formData) {
                this.formData = function() {
                  return this.text().then(decode2);
                };
              }
              this.json = function() {
                return this.text().then(JSON.parse);
              };
              return this;
            }
            var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
            function normalizeMethod(method) {
              var upcased = method.toUpperCase();
              return methods.indexOf(upcased) > -1 ? upcased : method;
            }
            function Request(input, options2) {
              if (!(this instanceof Request)) {
                throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
              }
              options2 = options2 || {};
              var body = options2.body;
              if (input instanceof Request) {
                if (input.bodyUsed) {
                  throw new TypeError("Already read");
                }
                this.url = input.url;
                this.credentials = input.credentials;
                if (!options2.headers) {
                  this.headers = new Headers(input.headers);
                }
                this.method = input.method;
                this.mode = input.mode;
                this.signal = input.signal;
                if (!body && input._bodyInit != null) {
                  body = input._bodyInit;
                  input.bodyUsed = true;
                }
              } else {
                this.url = String(input);
              }
              this.credentials = options2.credentials || this.credentials || "same-origin";
              if (options2.headers || !this.headers) {
                this.headers = new Headers(options2.headers);
              }
              this.method = normalizeMethod(options2.method || this.method || "GET");
              this.mode = options2.mode || this.mode || null;
              this.signal = options2.signal || this.signal;
              this.referrer = null;
              if ((this.method === "GET" || this.method === "HEAD") && body) {
                throw new TypeError("Body not allowed for GET or HEAD requests");
              }
              this._initBody(body);
              if (this.method === "GET" || this.method === "HEAD") {
                if (options2.cache === "no-store" || options2.cache === "no-cache") {
                  var reParamSearch = /([?&])_=[^&]*/;
                  if (reParamSearch.test(this.url)) {
                    this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
                  } else {
                    var reQueryString = /\?/;
                    this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
                  }
                }
              }
            }
            Request.prototype.clone = function() {
              return new Request(this, { body: this._bodyInit });
            };
            function decode2(body) {
              var form = new FormData();
              body.trim().split("&").forEach(function(bytes3) {
                if (bytes3) {
                  var split2 = bytes3.split("=");
                  var name = split2.shift().replace(/\+/g, " ");
                  var value = split2.join("=").replace(/\+/g, " ");
                  form.append(decodeURIComponent(name), decodeURIComponent(value));
                }
              });
              return form;
            }
            function parseHeaders(rawHeaders) {
              var headers = new Headers();
              var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
              preProcessedHeaders.split("\r").map(function(header) {
                return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
              }).forEach(function(line) {
                var parts = line.split(":");
                var key = parts.shift().trim();
                if (key) {
                  var value = parts.join(":").trim();
                  headers.append(key, value);
                }
              });
              return headers;
            }
            Body.call(Request.prototype);
            function Response(bodyInit, options2) {
              if (!(this instanceof Response)) {
                throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
              }
              if (!options2) {
                options2 = {};
              }
              this.type = "default";
              this.status = options2.status === void 0 ? 200 : options2.status;
              this.ok = this.status >= 200 && this.status < 300;
              this.statusText = "statusText" in options2 ? options2.statusText : "";
              this.headers = new Headers(options2.headers);
              this.url = options2.url || "";
              this._initBody(bodyInit);
            }
            Body.call(Response.prototype);
            Response.prototype.clone = function() {
              return new Response(this._bodyInit, {
                status: this.status,
                statusText: this.statusText,
                headers: new Headers(this.headers),
                url: this.url
              });
            };
            Response.error = function() {
              var response = new Response(null, { status: 0, statusText: "" });
              response.type = "error";
              return response;
            };
            var redirectStatuses = [301, 302, 303, 307, 308];
            Response.redirect = function(url, status) {
              if (redirectStatuses.indexOf(status) === -1) {
                throw new RangeError("Invalid status code");
              }
              return new Response(null, { status, headers: { location: url } });
            };
            exports2.DOMException = global3.DOMException;
            try {
              new exports2.DOMException();
            } catch (err) {
              exports2.DOMException = function(message, name) {
                this.message = message;
                this.name = name;
                var error = Error(message);
                this.stack = error.stack;
              };
              exports2.DOMException.prototype = Object.create(Error.prototype);
              exports2.DOMException.prototype.constructor = exports2.DOMException;
            }
            function fetch3(input, init2) {
              return new Promise2(function(resolve, reject) {
                var request = new Request(input, init2);
                if (request.signal && request.signal.aborted) {
                  return reject(new exports2.DOMException("Aborted", "AbortError"));
                }
                var xhr = new XMLHttpRequest();
                function abortXhr() {
                  xhr.abort();
                }
                xhr.onload = function() {
                  var options2 = {
                    status: xhr.status,
                    statusText: xhr.statusText,
                    headers: parseHeaders(xhr.getAllResponseHeaders() || "")
                  };
                  options2.url = "responseURL" in xhr ? xhr.responseURL : options2.headers.get("X-Request-URL");
                  var body = "response" in xhr ? xhr.response : xhr.responseText;
                  setTimeout(function() {
                    resolve(new Response(body, options2));
                  }, 0);
                };
                xhr.onerror = function() {
                  setTimeout(function() {
                    reject(new TypeError("Network request failed"));
                  }, 0);
                };
                xhr.ontimeout = function() {
                  setTimeout(function() {
                    reject(new TypeError("Network request failed"));
                  }, 0);
                };
                xhr.onabort = function() {
                  setTimeout(function() {
                    reject(new exports2.DOMException("Aborted", "AbortError"));
                  }, 0);
                };
                function fixUrl(url) {
                  try {
                    return url === "" && global3.location.href ? global3.location.href : url;
                  } catch (e) {
                    return url;
                  }
                }
                xhr.open(request.method, fixUrl(request.url), true);
                if (request.credentials === "include") {
                  xhr.withCredentials = true;
                } else if (request.credentials === "omit") {
                  xhr.withCredentials = false;
                }
                if ("responseType" in xhr) {
                  if (support.blob) {
                    xhr.responseType = "blob";
                  } else if (support.arrayBuffer && request.headers.get("Content-Type") && request.headers.get("Content-Type").indexOf("application/octet-stream") !== -1) {
                    xhr.responseType = "arraybuffer";
                  }
                }
                if (init2 && typeof init2.headers === "object" && !(init2.headers instanceof Headers)) {
                  Object.getOwnPropertyNames(init2.headers).forEach(function(name) {
                    xhr.setRequestHeader(name, normalizeValue(init2.headers[name]));
                  });
                } else {
                  request.headers.forEach(function(value, name) {
                    xhr.setRequestHeader(name, value);
                  });
                }
                if (request.signal) {
                  request.signal.addEventListener("abort", abortXhr);
                  xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                      request.signal.removeEventListener("abort", abortXhr);
                    }
                  };
                }
                xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
              });
            }
            fetch3.polyfill = true;
            if (!global3.fetch) {
              global3.fetch = fetch3;
              global3.Headers = Headers;
              global3.Request = Request;
              global3.Response = Response;
            }
            exports2.Headers = Headers;
            exports2.Request = Request;
            exports2.Response = Response;
            exports2.fetch = fetch3;
            Object.defineProperty(exports2, "__esModule", { value: true });
          });
          return {
            fetch: globalThis2.fetch,
            Headers: globalThis2.Headers,
            Request: globalThis2.Request,
            Response: globalThis2.Response,
            DOMException: globalThis2.DOMException
          };
        }();
      }
      if (typeof define === "function" && define.amd) {
        define(function() {
          return fetchPonyfill;
        });
      } else if (typeof exports === "object") {
        module2.exports = fetchPonyfill;
      } else {
        global2.fetchPonyfill = fetchPonyfill;
      }
    })(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof global !== "undefined" ? global : exports);
  }
});

// node_modules/os-browserify/browser.js
var require_browser7 = __commonJS({
  "node_modules/os-browserify/browser.js"(exports) {
    exports.endianness = function() {
      return "LE";
    };
    exports.hostname = function() {
      if (typeof location !== "undefined") {
        return location.hostname;
      } else return "";
    };
    exports.loadavg = function() {
      return [];
    };
    exports.uptime = function() {
      return 0;
    };
    exports.freemem = function() {
      return Number.MAX_VALUE;
    };
    exports.totalmem = function() {
      return Number.MAX_VALUE;
    };
    exports.cpus = function() {
      return [];
    };
    exports.type = function() {
      return "Browser";
    };
    exports.release = function() {
      if (typeof navigator !== "undefined") {
        return navigator.appVersion;
      }
      return "";
    };
    exports.networkInterfaces = exports.getNetworkInterfaces = function() {
      return {};
    };
    exports.arch = function() {
      return "javascript";
    };
    exports.platform = function() {
      return "browser";
    };
    exports.tmpdir = exports.tmpDir = function() {
      return "/tmp";
    };
    exports.EOL = "\n";
    exports.homedir = function() {
      return "/";
    };
  }
});

// node_modules/xumm-sdk/dist/src/utils.js
var require_utils14 = __commonJS({
  "node_modules/xumm-sdk/dist/src/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeferredPromise = exports.throwIfError = void 0;
    function throwIfError(call) {
      var _a, _b, _c, _d, _e2, _f;
      const isFatalError = call.message !== void 0;
      if (isFatalError) {
        throw new Error(call.message);
      }
      const isError2 = call.next === void 0 && ((_b = (_a = call) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.uuid) === void 0 && ((_d = (_c = call) === null || _c === void 0 ? void 0 : _c.application) === null || _d === void 0 ? void 0 : _d.uuidv4) === void 0 && ((_f = (_e2 = call) === null || _e2 === void 0 ? void 0 : _e2.error) === null || _f === void 0 ? void 0 : _f.code) !== void 0;
      if (isError2) {
        const e = call.error;
        throw new Error(`Error code ${e.code}, see XUMM Dev Console, reference: ${e.reference}`);
      }
    }
    exports.throwIfError = throwIfError;
    var DeferredPromise = class {
      constructor() {
        this.resolveFn = (_arg) => {
        };
        this.rejectFn = (_arg) => {
        };
        this.promise = new Promise((resolve, reject) => {
          this.resolveFn = resolve;
          this.rejectFn = reject;
        });
      }
      resolve(arg) {
        this.resolveFn(arg);
        return this.promise;
      }
      reject(arg) {
        this.rejectFn(arg);
        return this.promise;
      }
    };
    exports.DeferredPromise = DeferredPromise;
  }
});

// node_modules/xumm-sdk/dist/src/Meta.js
var require_Meta = __commonJS({
  "node_modules/xumm-sdk/dist/src/Meta.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Meta = void 0;
    var debug_1 = require_browser();
    var fetch_ponyfill_1 = __importDefault(require_fetch_browser());
    var { fetch: fetch3, Request, Response, Headers } = fetch_ponyfill_1.default();
    var os_browserify_1 = require_browser7();
    var utils_1 = require_utils14();
    var index_1 = require_src();
    var log = debug_1.debug("xumm-sdk:meta");
    var Meta = class {
      constructor(apiKey, apiSecret) {
        this.isBrowser = false;
        this.jwtFlow = false;
        this.injected = false;
        this.endpoint = "https://xumm.app";
        log("Constructed");
        const uuidRe = new RegExp("^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$");
        const secret = {
          split: apiSecret.split(":"),
          uuidv4: ""
        };
        if (secret.split.length === 3 && secret.split.slice(0, 2).join(":") === "xApp:OneTimeToken") {
          secret.uuidv4 = secret.split[2];
          this.jwtFlow = true;
        } else if (secret.split.length > 1 && secret.split[0] === "RAWJWT") {
          this.jwtFlow = true;
          this.jwt = secret.split.slice(1).join(":");
        } else {
          secret.uuidv4 = apiSecret;
        }
        if (!uuidRe.test(apiKey) || !uuidRe.test(secret.uuidv4)) {
          if (!this.jwtFlow) {
            throw new Error("Invalid API Key and/or API Secret. Use dotenv or constructor params.");
          } else {
            if (!this.jwt) {
              throw new Error("Invalid API Key and/or OTT (One Time Token). Provide OTT param (2nd param) or make sure `xAppToken` query param is present (Browser)");
            }
          }
        }
        if (typeof globalThis !== "undefined" && Object.keys(globalThis).indexOf("window") < 0) {
          log("Running in node");
        } else {
          console.log("XUMM SDK: Running in browser");
          this.isBrowser = true;
        }
        this.apiKey = apiKey;
        this.apiSecret = secret.uuidv4;
        if (this.jwtFlow && !this.jwt) {
          this.authPromise = new Promise((resolve) => {
            this.authPromiseResolve = resolve;
          });
          Promise.resolve().then(() => this.authorize()).catch((e) => {
            log("Authorize error:", e.message);
            if (this === null || this === void 0 ? void 0 : this.invoker) {
              this.invoker.caught(e);
            }
            if (this.authPromiseResolve) {
              this.authPromiseResolve();
            }
          });
        }
        return this;
      }
      setEndpoint(endpoint) {
        if (endpoint.match(/^http/)) {
          this.endpoint = endpoint.trim();
          return true;
        }
        return false;
      }
      authorize() {
        var _a, _b, _c, _d;
        return __awaiter2(this, void 0, void 0, function* () {
          log("JWT Authorize", this.apiSecret);
          let store;
          if ((this === null || this === void 0 ? void 0 : this.invoker) && this.invoker.constructor === index_1.XummSdkJwt) {
            store = this.invoker._jwtStore(this, (jwt) => this.jwt = jwt);
          }
          const authorizeData = (store === null || store === void 0 ? void 0 : store.get(this.apiSecret)) || (yield this.call("authorize"));
          if ((_b = (_a = authorizeData) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.code) {
            log(`Could not resolve API Key & OTT to JWT (already fetched? Unauthorized?)`);
            if ((this === null || this === void 0 ? void 0 : this.invoker) && this.invoker.constructor === index_1.XummSdkJwt && ((_c = this === null || this === void 0 ? void 0 : this.invoker) === null || _c === void 0 ? void 0 : _c.fatalHandler)) {
              this.invoker.fatalHandler(new Error(authorizeData.error.reference));
            } else {
              utils_1.throwIfError(authorizeData);
            }
          } else if ((_d = authorizeData) === null || _d === void 0 ? void 0 : _d.jwt) {
            const JwtOttResponse = authorizeData;
            store === null || store === void 0 ? void 0 : store.set(this.apiSecret, JwtOttResponse);
          } else {
            throw new Error(`Unexpected response for xApp JWT authorize request`);
          }
          if (this.authPromiseResolve) {
            this.authPromiseResolve();
          }
        });
      }
      call(endpoint, httpMethod = "GET", data) {
        var _a;
        return __awaiter2(this, void 0, void 0, function* () {
          const method = httpMethod.toUpperCase();
          const trEndpoint = endpoint.split("/")[0];
          if (this.jwtFlow && !(this === null || this === void 0 ? void 0 : this.jwt) && this.authPromise && endpoint !== "authorize") {
            yield this.authPromise;
          }
          try {
            let body;
            if (typeof data !== "undefined") {
              if (typeof data === "object" && data !== null) {
                body = JSON.stringify(data);
              }
              if (typeof data === "string") {
                body = data;
              }
            }
            const headers = {
              "Content-Type": "application/json"
            };
            if (!this.isBrowser) {
              Object.assign(headers, {
                "User-Agent": `xumm-sdk/node (${os_browserify_1.hostname()}) node-fetch`
              });
            }
            if (!this.jwtFlow) {
              Object.assign(headers, {
                "x-api-key": this.apiKey,
                "x-api-secret": this.apiSecret
              });
            } else {
              if (endpoint === "authorize") {
                Object.assign(headers, {
                  "x-api-key": this.apiKey,
                  "x-api-ott": this.apiSecret
                });
              } else {
                Object.assign(headers, {
                  "Authorization": "Bearer " + this.jwt
                });
              }
            }
            const jwtEndpoints = [
              "authorize",
              "ping",
              "curated-assets",
              "rates",
              "payload",
              "userdata",
              "xrpl-tx",
              "nftoken-detail",
              "rails",
              "hookhash"
            ];
            const endpointType = this.jwtFlow && jwtEndpoints.indexOf(trEndpoint) > -1 ? "jwt" : "platform";
            const request = yield fetch3(this.endpoint + "/api/v1/" + endpointType + "/" + endpoint, {
              method,
              body,
              headers
            });
            const json = yield request.json();
            return json;
          } catch (e) {
            const err = new Error(`Unexpected response from XUMM API [${method}:${trEndpoint}]`);
            err.stack = ((_a = e) === null || _a === void 0 ? void 0 : _a.stack) || void 0;
            throw err;
          }
        });
      }
      ping() {
        var _a, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const pong = yield this.call("ping");
          utils_1.throwIfError(pong);
          if (typeof pong.auth !== "undefined") {
            return pong.auth;
          }
          if (typeof ((_a = pong) === null || _a === void 0 ? void 0 : _a.ott_uuidv4) !== "undefined") {
            return {
              application: {
                uuidv4: pong.app_uuidv4,
                name: pong.app_name
              },
              jwtData: pong
            };
          }
          if (typeof ((_b = pong) === null || _b === void 0 ? void 0 : _b.usertoken_uuidv4) !== "undefined") {
            return {
              application: {
                uuidv4: pong.client_id,
                name: pong.app_name
              },
              jwtData: pong
            };
          }
          throw new Error(`Unexpected response for ping request`);
        });
      }
      getCuratedAssets() {
        return __awaiter2(this, void 0, void 0, function* () {
          return yield this.call("curated-assets");
        });
      }
      getRates(currencyCode) {
        return __awaiter2(this, void 0, void 0, function* () {
          return yield this.call("rates/" + currencyCode.trim().toUpperCase());
        });
      }
      getKycStatus(userTokenOrAccount) {
        return __awaiter2(this, void 0, void 0, function* () {
          if (userTokenOrAccount.trim().match(/^r/)) {
            const call = yield this.call("kyc-status/" + userTokenOrAccount.trim());
            return (call === null || call === void 0 ? void 0 : call.kycApproved) ? "SUCCESSFUL" : "NONE";
          } else {
            const call = yield this.call("kyc-status", "POST", {
              user_token: userTokenOrAccount
            });
            return (call === null || call === void 0 ? void 0 : call.kycStatus) || "NONE";
          }
        });
      }
      getRails() {
        return __awaiter2(this, void 0, void 0, function* () {
          return yield this.call("rails");
        });
      }
      getHookHash(hookHash) {
        return __awaiter2(this, void 0, void 0, function* () {
          if (typeof hookHash === "string" && hookHash.trim().match(/^[A-Fa-f0-9]{64}$/)) {
            return yield this.call("hookhash/" + hookHash.trim());
          }
          throw Error("Invalid Hook Hash (expecting 64 char hex)");
        });
      }
      getHookHashes() {
        return __awaiter2(this, void 0, void 0, function* () {
          return yield this.call("hookhash");
        });
      }
      getTransaction(txHash) {
        return __awaiter2(this, void 0, void 0, function* () {
          return yield this.call("xrpl-tx/" + txHash.trim());
        });
      }
      getNftokenDetail(tokenId) {
        return __awaiter2(this, void 0, void 0, function* () {
          if (!this.jwtFlow) {
            throw new Error("getNftokenDetail: only available in JWT (XummSdkJwt) mode");
          }
          return yield this.call("nftoken-detail/" + tokenId.trim());
        });
      }
      verifyUserTokens(userTokens) {
        return __awaiter2(this, void 0, void 0, function* () {
          return (yield this.call("user-tokens", "POST", {
            tokens: Array.isArray(userTokens) ? userTokens : [userTokens]
          })).tokens;
        });
      }
      // Internal
      _inject(Invoker) {
        if (!this.injected) {
          this.invoker = Invoker;
        } else {
          throw new Error("Cannot `_inject` twice");
        }
      }
    };
    exports.Meta = Meta;
  }
});

// node_modules/xumm-sdk/dist/src/Storage.js
var require_Storage = __commonJS({
  "node_modules/xumm-sdk/dist/src/Storage.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Storage = void 0;
    var debug_1 = require_browser();
    var utils_1 = require_utils14();
    var log = debug_1.debug("xumm-sdk:storage");
    var Storage = class {
      constructor(MetaObject) {
        log("Constructed");
        this.Meta = MetaObject;
      }
      get() {
        return __awaiter2(this, void 0, void 0, function* () {
          const call = yield this.Meta.call("app-storage", "GET");
          utils_1.throwIfError(call);
          return call.data;
        });
      }
      set(data) {
        return __awaiter2(this, void 0, void 0, function* () {
          const call = yield this.Meta.call("app-storage", "POST", data);
          utils_1.throwIfError(call);
          return call.stored;
        });
      }
      delete() {
        return __awaiter2(this, void 0, void 0, function* () {
          const call = yield this.Meta.call("app-storage", "DELETE");
          utils_1.throwIfError(call);
          return call.stored;
        });
      }
    };
    exports.Storage = Storage;
  }
});

// node_modules/es5-ext/global.js
var require_global = __commonJS({
  "node_modules/es5-ext/global.js"(exports, module2) {
    var naiveFallback = function() {
      if (typeof self === "object" && self) return self;
      if (typeof window === "object" && window) return window;
      throw new Error("Unable to resolve global `this`");
    };
    module2.exports = function() {
      if (this) return this;
      if (typeof globalThis === "object" && globalThis) return globalThis;
      try {
        Object.defineProperty(Object.prototype, "__global__", {
          get: function() {
            return this;
          },
          configurable: true
        });
      } catch (error) {
        return naiveFallback();
      }
      try {
        if (!__global__) return naiveFallback();
        return __global__;
      } finally {
        delete Object.prototype.__global__;
      }
    }();
  }
});

// node_modules/websocket/package.json
var require_package = __commonJS({
  "node_modules/websocket/package.json"(exports, module2) {
    module2.exports = {
      name: "websocket",
      description: "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",
      keywords: [
        "websocket",
        "websockets",
        "socket",
        "networking",
        "comet",
        "push",
        "RFC-6455",
        "realtime",
        "server",
        "client"
      ],
      author: "Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)",
      contributors: [
        "Iñaki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)"
      ],
      version: "1.0.35",
      repository: {
        type: "git",
        url: "https://github.com/theturtle32/WebSocket-Node.git"
      },
      homepage: "https://github.com/theturtle32/WebSocket-Node",
      engines: {
        node: ">=4.0.0"
      },
      dependencies: {
        bufferutil: "^4.0.1",
        debug: "^2.2.0",
        "es5-ext": "^0.10.63",
        "typedarray-to-buffer": "^3.1.5",
        "utf-8-validate": "^5.0.2",
        yaeti: "^0.0.6"
      },
      devDependencies: {
        "buffer-equal": "^1.0.0",
        gulp: "^4.0.2",
        "gulp-jshint": "^2.0.4",
        "jshint-stylish": "^2.2.1",
        jshint: "^2.0.0",
        tape: "^4.9.1"
      },
      config: {
        verbose: false
      },
      scripts: {
        test: "tape test/unit/*.js",
        gulp: "gulp"
      },
      main: "index",
      directories: {
        lib: "./lib"
      },
      browser: "lib/browser.js",
      license: "Apache-2.0"
    };
  }
});

// node_modules/websocket/lib/version.js
var require_version = __commonJS({
  "node_modules/websocket/lib/version.js"(exports, module2) {
    module2.exports = require_package().version;
  }
});

// node_modules/websocket/lib/browser.js
var require_browser8 = __commonJS({
  "node_modules/websocket/lib/browser.js"(exports, module2) {
    var _globalThis;
    if (typeof globalThis === "object") {
      _globalThis = globalThis;
    } else {
      try {
        _globalThis = require_global();
      } catch (error) {
      } finally {
        if (!_globalThis && typeof window !== "undefined") {
          _globalThis = window;
        }
        if (!_globalThis) {
          throw new Error("Could not determine global this");
        }
      }
    }
    var NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;
    var websocket_version = require_version();
    function W3CWebSocket(uri, protocols) {
      var native_instance;
      if (protocols) {
        native_instance = new NativeWebSocket(uri, protocols);
      } else {
        native_instance = new NativeWebSocket(uri);
      }
      return native_instance;
    }
    if (NativeWebSocket) {
      ["CONNECTING", "OPEN", "CLOSING", "CLOSED"].forEach(function(prop) {
        Object.defineProperty(W3CWebSocket, prop, {
          get: function() {
            return NativeWebSocket[prop];
          }
        });
      });
    }
    module2.exports = {
      "w3cwebsocket": NativeWebSocket ? W3CWebSocket : null,
      "version": websocket_version
    };
  }
});

// node_modules/xumm-sdk/dist/src/Payload.js
var require_Payload = __commonJS({
  "node_modules/xumm-sdk/dist/src/Payload.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Payload = void 0;
    var debug_1 = require_browser();
    var websocket_1 = require_browser8();
    var utils_1 = require_utils14();
    var log = debug_1.debug("xumm-sdk:payload");
    var logWs = debug_1.debug("xumm-sdk:payload:websocket");
    var maxSocketConnectAttempts = typeof jest !== "undefined" ? 0 : 30;
    var socketConnectAttemptSecondsDelay = 2;
    var socketKeepaliveSendSeconds = 2;
    var socketKeepaliveTimeoutSeconds = 10;
    var Payload = class {
      constructor(MetaObject) {
        log("Constructed");
        this.Meta = MetaObject;
      }
      resolvePayload(payload) {
        var _a, _b, _c;
        return __awaiter2(this, void 0, void 0, function* () {
          if (typeof payload === "string") {
            return yield this.get(payload, true);
          } else if (typeof ((_a = payload) === null || _a === void 0 ? void 0 : _a.uuid) !== "undefined") {
            return yield this.get(payload.uuid, true);
          } else if (typeof ((_c = (_b = payload) === null || _b === void 0 ? void 0 : _b.meta) === null || _c === void 0 ? void 0 : _c.uuid) !== "undefined") {
            return payload;
          }
          throw new Error("Could not resolve payload (not found)");
        });
      }
      create(payload, returnErrors = false) {
        var _a;
        return __awaiter2(this, void 0, void 0, function* () {
          const directTx = typeof payload.TransactionType !== "undefined" && typeof payload.txjson === "undefined";
          const call = yield this.Meta.call("payload", "POST", directTx ? { txjson: payload } : payload);
          if (returnErrors) {
            utils_1.throwIfError(call);
          }
          const isCreatedPayload = ((_a = call) === null || _a === void 0 ? void 0 : _a.next) !== void 0;
          if (!isCreatedPayload) {
            return null;
          }
          return call;
        });
      }
      get(payload, returnErrors = false) {
        var _a, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const payloadUuid = typeof payload === "string" ? payload : payload === null || payload === void 0 ? void 0 : payload.uuid;
          const call = yield this.Meta.call("payload/" + payloadUuid, "GET");
          if (returnErrors) {
            utils_1.throwIfError(call);
          }
          const isPayload = ((_b = (_a = call) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.uuid) !== void 0;
          if (!isPayload) {
            return null;
          }
          return call;
        });
      }
      subscribe(payload, callback) {
        return __awaiter2(this, void 0, void 0, function* () {
          const callbackPromise = new utils_1.DeferredPromise();
          const payloadDetails = yield this.resolvePayload(payload);
          if (payloadDetails) {
            const _u = "undefined";
            let socket;
            let keepAlivePing;
            let keepAliveReinstateTimer;
            let reconnectAttempts = 0;
            callbackPromise.promise.then(() => {
              clearTimeout(keepAlivePing);
              clearTimeout(keepAliveReinstateTimer);
              socket.close(1e3);
            });
            const connect3 = () => {
              var _a, _b;
              socket = typeof ((_a = globalThis) === null || _a === void 0 ? void 0 : _a.MockedWebSocket) !== _u && typeof jest !== _u ? new ((_b = globalThis) === null || _b === void 0 ? void 0 : _b.MockedWebSocket)("ws://xumm.local") : new websocket_1.w3cwebsocket(this.Meta.endpoint.replace(/^http/, "ws") + "/sign/" + payloadDetails.meta.uuid);
              socket.onopen = () => {
                console.log(`Payload ${payloadDetails.meta.uuid}: subscription active (WebSocket opened)`);
                keepAlivePing = setInterval(() => {
                  logWs("Send keepalive");
                  socket.send('{"ping":true}');
                }, socketKeepaliveSendSeconds * 1e3);
              };
              socket.onmessage = (MessageEvent2) => __awaiter2(this, void 0, void 0, function* () {
                reconnectAttempts = 0;
                const m = MessageEvent2.data;
                let json = void 0;
                try {
                  json = JSON.parse(m.toString());
                  if ((json === null || json === void 0 ? void 0 : json.message) && json.message === "Right back at you!") {
                    logWs("Keepalive response");
                    clearTimeout(keepAliveReinstateTimer);
                    keepAliveReinstateTimer = setTimeout(() => {
                      console.log(`WebSocket for ${payloadDetails.meta.uuid} keepalive response timeout, assume dead... (Reconnect)`);
                      socket.close(1002, "Assume dead");
                    }, socketKeepaliveTimeoutSeconds * 1e3);
                    return;
                  }
                  if ((json === null || json === void 0 ? void 0 : json.signed) || (json === null || json === void 0 ? void 0 : json.expired)) {
                    const updatedPayloadDetails = yield this.resolvePayload(payload);
                    Object.assign(payloadDetails, Object.assign({}, updatedPayloadDetails));
                  }
                } catch (e) {
                  logWs(`Payload ${payloadDetails.meta.uuid}: Received message, unable to parse as JSON`, e);
                }
                if (json && callback && typeof json.devapp_fetched === "undefined") {
                  try {
                    const callbackResult = yield callback({
                      uuid: payloadDetails.meta.uuid,
                      data: json,
                      resolve(resolveData) {
                        return __awaiter2(this, void 0, void 0, function* () {
                          yield callbackPromise.resolve(resolveData || void 0);
                        });
                      },
                      payload: payloadDetails
                    });
                    if (callbackResult !== void 0) {
                      callbackPromise.resolve(callbackResult);
                    }
                  } catch (e) {
                    logWs(`Payload ${payloadDetails.meta.uuid}: Callback exception`, e);
                    console.log(`Payload ${payloadDetails.meta.uuid}: Callback exception: ${e.message}`);
                  }
                }
              });
              socket.onclose = (_e2) => {
                logWs("Closed [code]", _e2.code);
                logWs("Closed [reason]", _e2.reason);
                logWs("Closed [wasClean]", _e2.wasClean);
                clearInterval(keepAlivePing);
                clearTimeout(keepAliveReinstateTimer);
                if (_e2.code > 1e3 || _e2.wasClean === false) {
                  console.log(_e2);
                  logWs("Unhealthy disconnect, reconnecting...", _e2.code);
                  if (reconnectAttempts < maxSocketConnectAttempts) {
                    if (reconnectAttempts === 0) {
                      console.log(`WebSocket for ${payloadDetails.meta.uuid} lost, reconnecting...`);
                    }
                    setTimeout(() => {
                      reconnectAttempts++;
                      logWs("# Reconnect");
                      if (typeof jest === "undefined") {
                        socket = connect3();
                      }
                    }, socketConnectAttemptSecondsDelay * 1e3);
                  } else {
                    if (typeof jest === "undefined") {
                      console.log(`WebSocket for ${payloadDetails.meta.uuid} exceeded reconnect timeouts, give up`);
                    }
                  }
                } else {
                }
                logWs(`Payload ${payloadDetails.meta.uuid}: Subscription ended (WebSocket closed)`);
              };
              return socket;
            };
            socket = connect3();
            return {
              payload: payloadDetails,
              resolve(resolveData) {
                callbackPromise.resolve(resolveData || void 0);
              },
              resolved: callbackPromise.promise,
              websocket: socket
            };
          }
          utils_1.throwIfError(payloadDetails);
          throw Error(`Couldn't subscribe: couldn't fetch payload`);
        });
      }
      cancel(payload, returnErrors = false) {
        var _a, _b, _c;
        return __awaiter2(this, void 0, void 0, function* () {
          const fullPayload = yield this.resolvePayload(payload);
          const call = yield this.Meta.call("payload/" + ((_a = fullPayload === null || fullPayload === void 0 ? void 0 : fullPayload.meta) === null || _a === void 0 ? void 0 : _a.uuid), "DELETE");
          if (returnErrors) {
            utils_1.throwIfError(call);
          }
          const isValidResponse = ((_c = (_b = call) === null || _b === void 0 ? void 0 : _b.meta) === null || _c === void 0 ? void 0 : _c.uuid) !== void 0;
          if (!isValidResponse) {
            return null;
          }
          return call;
        });
      }
      createAndSubscribe(payload, callback) {
        return __awaiter2(this, void 0, void 0, function* () {
          const createdPayload = yield this.create(payload, true);
          if (createdPayload) {
            const subscription = yield this.subscribe(createdPayload, callback);
            return Object.assign({ created: createdPayload }, subscription);
          }
          throw new Error(`Error creating payload or subscribing to created payload`);
        });
      }
    };
    exports.Payload = Payload;
  }
});

// node_modules/xumm-sdk/dist/src/JwtUserdata.js
var require_JwtUserdata = __commonJS({
  "node_modules/xumm-sdk/dist/src/JwtUserdata.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JwtUserdata = void 0;
    var debug_1 = require_browser();
    var utils_1 = require_utils14();
    var log = debug_1.debug("xumm-sdk:xapp:userdata");
    var validateKey = (key) => {
      if (!(typeof key === "string" && key.match(/^[a-z0-9]{3,}$/))) {
        throw new Error("Invalid key, only a-z0-9 (min three chars) allowed: " + key);
      }
    };
    var JwtUserdata = class {
      constructor(MetaObject) {
        log("Constructed");
        this.Meta = MetaObject;
      }
      list() {
        return __awaiter2(this, void 0, void 0, function* () {
          const call = yield this.Meta.call("userdata", "GET");
          utils_1.throwIfError(call);
          return call.keys;
        });
      }
      get(key) {
        var _a;
        return __awaiter2(this, void 0, void 0, function* () {
          const keys2 = Array.isArray(key) ? key.join(",") : key;
          keys2.split(",").forEach((k2) => validateKey(k2));
          const call = yield this.Meta.call("userdata/" + keys2, "GET");
          utils_1.throwIfError(call);
          return keys2.split(",").length > 1 ? call.data : ((_a = call.data) === null || _a === void 0 ? void 0 : _a[keys2]) || {};
        });
      }
      delete(key) {
        return __awaiter2(this, void 0, void 0, function* () {
          validateKey(key);
          const call = yield this.Meta.call("userdata/" + key, "DELETE");
          utils_1.throwIfError(call);
          return call.persisted;
        });
      }
      set(key, data) {
        return __awaiter2(this, void 0, void 0, function* () {
          validateKey(key);
          const call = yield this.Meta.call("userdata/" + key, "POST", data);
          utils_1.throwIfError(call);
          return call.persisted;
        });
      }
    };
    exports.JwtUserdata = JwtUserdata;
  }
});

// node_modules/xumm-sdk/dist/src/xApp.js
var require_xApp = __commonJS({
  "node_modules/xumm-sdk/dist/src/xApp.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.xApp = void 0;
    var debug_1 = require_browser();
    var JwtUserdata_1 = require_JwtUserdata();
    var utils_1 = require_utils14();
    var log = debug_1.debug("xumm-sdk:xapp");
    var xApp = class {
      constructor(MetaObject) {
        log("Constructed");
        this.Meta = MetaObject;
        this.userdata = new JwtUserdata_1.JwtUserdata(MetaObject);
      }
      get(ott) {
        return __awaiter2(this, void 0, void 0, function* () {
          const call = yield this.Meta.call("xapp/ott/" + ott, "GET");
          utils_1.throwIfError(call);
          return call;
        });
      }
    };
    exports.xApp = xApp;
  }
});

// node_modules/xumm-sdk/dist/src/Push.js
var require_Push = __commonJS({
  "node_modules/xumm-sdk/dist/src/Push.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Push = void 0;
    var debug_1 = require_browser();
    var JwtUserdata_1 = require_JwtUserdata();
    var utils_1 = require_utils14();
    var log = debug_1.debug("xumm-sdk:xapp");
    var Push = class {
      constructor(MetaObject) {
        log("Constructed");
        this.Meta = MetaObject;
        this.userdata = new JwtUserdata_1.JwtUserdata(MetaObject);
      }
      event(data) {
        return __awaiter2(this, void 0, void 0, function* () {
          const call = yield this.Meta.call("xapp/event", "POST", data);
          utils_1.throwIfError(call);
          return call;
        });
      }
      notification(data) {
        return __awaiter2(this, void 0, void 0, function* () {
          const call = yield this.Meta.call("xapp/push", "POST", data);
          utils_1.throwIfError(call);
          return call;
        });
      }
    };
    exports.Push = Push;
  }
});

// node_modules/xumm-sdk/dist/src/index.js
var require_src = __commonJS({
  "node_modules/xumm-sdk/dist/src/index.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XummSdkJwt = exports.XummSdk = void 0;
    var debug_1 = require_browser();
    var Meta_1 = require_Meta();
    var Storage_1 = require_Storage();
    var Payload_1 = require_Payload();
    var xApp_1 = require_xApp();
    var Push_1 = require_Push();
    var JwtUserdata_1 = require_JwtUserdata();
    var buffer_1 = require_buffer();
    var log = debug_1.debug("xumm-sdk");
    var XummSdk = class {
      constructor(apiKey, apiSecret) {
        log("Constructed");
        this.Meta = new Meta_1.Meta(apiKey || this.getEnv("XUMM_APIKEY"), apiSecret || this.getEnv("XUMM_APISECRET"));
        this.storage = new Storage_1.Storage(this.Meta);
        this.payload = new Payload_1.Payload(this.Meta);
        this.jwtUserdata = new JwtUserdata_1.JwtUserdata(this.Meta);
        this.Push = new Push_1.Push(this.Meta);
        this.xApp = new xApp_1.xApp(this.Meta);
        this.Meta._inject(this);
        return this;
      }
      getEnv(arg) {
        let value = "";
        try {
          value = (process === null || process === void 0 ? void 0 : process.env[arg]) || "";
        } catch (_e2) {
        }
        return value;
      }
      /**
       * Proxy methods to Meta class below
       */
      ping() {
        return this.Meta.ping();
      }
      getCuratedAssets() {
        return this.Meta.getCuratedAssets();
      }
      getRails() {
        return this.Meta.getRails();
      }
      getHookHashes() {
        return this.Meta.getHookHashes();
      }
      getHookHash(hookHash) {
        return this.Meta.getHookHash(hookHash);
      }
      getRates(currencyCode) {
        return this.Meta.getRates(currencyCode);
      }
      getKycStatus(userTokenOrAccount) {
        return this.Meta.getKycStatus(userTokenOrAccount);
      }
      getTransaction(txHash) {
        return this.Meta.getTransaction(txHash);
      }
      getNftokenDetail(tokenId) {
        return this.Meta.getNftokenDetail(tokenId);
      }
      verifyUserTokens(userTokens) {
        return this.Meta.verifyUserTokens(userTokens);
      }
      verifyUserToken(token) {
        return __awaiter2(this, void 0, void 0, function* () {
          const tokenResults = yield this.Meta.verifyUserTokens([token]);
          return Array.isArray(tokenResults) && tokenResults.length === 1 ? tokenResults[0] : null;
        });
      }
      setEndpoint(endpoint) {
        return this.Meta.setEndpoint(endpoint);
      }
      caught(error) {
        throw error;
      }
    };
    exports.XummSdk = XummSdk;
    var XummSdkJwt = class extends XummSdk {
      constructor(apiKeyOrJwt, ott, options) {
        var _a, _b, _c, _d, _f, _g, _h, _j;
        let _ott = String(ott || "").trim().toLowerCase();
        const isRawJwt = apiKeyOrJwt.length !== 36;
        if (!isRawJwt) {
          if (typeof ott === "undefined" && typeof window !== "undefined" && typeof window.URLSearchParams !== "undefined") {
            const urlSearchParams = new window.URLSearchParams(((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.search) || "");
            for (const pair of urlSearchParams.entries()) {
              if (pair[0] === "xAppToken") {
                _ott = pair[1].toLowerCase().trim();
              }
            }
            if (_ott === "" && !(options === null || options === void 0 ? void 0 : options.store) && !(options === null || options === void 0 ? void 0 : options.noAutoRetrieve)) {
              if (typeof ((_b = window === null || window === void 0 ? void 0 : window.localStorage) === null || _b === void 0 ? void 0 : _b["XummSdkJwt"]) === "string") {
                try {
                  const localStorageJwtData = (_d = (_c = window === null || window === void 0 ? void 0 : window.localStorage) === null || _c === void 0 ? void 0 : _c["XummSdkJwt"]) === null || _d === void 0 ? void 0 : _d.split(":");
                  const localStorageJwt = JSON.parse((_f = localStorageJwtData === null || localStorageJwtData === void 0 ? void 0 : localStorageJwtData.slice(1)) === null || _f === void 0 ? void 0 : _f.join(":"));
                  if (localStorageJwt === null || localStorageJwt === void 0 ? void 0 : localStorageJwt.jwt) {
                    const decodedJwt = buffer_1.Buffer.from((_g = localStorageJwt.jwt.split(".")) === null || _g === void 0 ? void 0 : _g[1], "base64").toString("utf8");
                    const jwtContents = JSON.parse(decodedJwt);
                    if (jwtContents === null || jwtContents === void 0 ? void 0 : jwtContents.exp) {
                      const validForSec = (jwtContents === null || jwtContents === void 0 ? void 0 : jwtContents.exp) - Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);
                      console.log("Restoring OTT " + (localStorageJwtData === null || localStorageJwtData === void 0 ? void 0 : localStorageJwtData[0]));
                      if (validForSec > 60 * 60) {
                        _ott = localStorageJwtData === null || localStorageJwtData === void 0 ? void 0 : localStorageJwtData[0];
                      } else {
                        console.log("Skip restore: not valid for one more hour");
                      }
                    }
                  }
                } catch (e) {
                  console.log("JWT Restore Error", e);
                }
              }
            }
          }
        }
        super(apiKeyOrJwt, !isRawJwt && _ott !== "" ? "xApp:OneTimeToken:" + _ott : "RAWJWT:" + apiKeyOrJwt);
        this.resolve = (ottData) => {
          log("OTT data resolved", ottData);
        };
        this.reject = (error) => {
          log("OTT data rejected", error.message);
        };
        this.ottResolved = isRawJwt ? Promise.resolve() : new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
        });
        if (options === null || options === void 0 ? void 0 : options.fatalHandler) {
          this.fatalHandler = options.fatalHandler;
        }
        this.store = {
          get(uuid) {
            var _a2;
            log("[JwtStore] » Builtin JWT store GET");
            if (typeof window !== "undefined" && typeof window.localStorage !== "undefined") {
              if (typeof window.localStorage["XummSdkJwt"] === "string") {
                const lsOttData = window.localStorage["XummSdkJwt"].split(":");
                if (lsOttData[0] === uuid) {
                  log("Restoring OTT from localStorage:", uuid);
                  try {
                    return JSON.parse(lsOttData.slice(1).join(":"));
                  } catch (e) {
                    log("Error restoring OTT Data (JWT) from localStorage", (_a2 = e) === null || _a2 === void 0 ? void 0 : _a2.message);
                  }
                }
              }
            }
          },
          set(uuid, ottData) {
            log("[JwtStore] » Builtin JWT store SET", uuid);
            if (typeof window !== "undefined" && typeof localStorage !== "undefined") {
              window.localStorage["XummSdkJwt"] = uuid + ":" + JSON.stringify(ottData);
            }
          }
        };
        if ((_h = options === null || options === void 0 ? void 0 : options.store) === null || _h === void 0 ? void 0 : _h.get) {
          this.store.get = options.store.get;
        }
        if ((_j = options === null || options === void 0 ? void 0 : options.store) === null || _j === void 0 ? void 0 : _j.set) {
          this.store.set = options.store.set;
        }
        if (isRawJwt) {
          this.reject(new Error("Not in OTT flow: in raw JWT (OAuth2-like) flow"));
          log("Using JWT (Raw, OAuth2) flow");
        } else {
          log("Using JWT (xApp) flow");
        }
      }
      _jwtStore(invoker, persistJwt) {
        if (invoker && (invoker === null || invoker === void 0 ? void 0 : invoker.constructor) === Meta_1.Meta) {
          return {
            get: (uuid) => {
              var _a;
              log("[JwtStore] Proxy GET");
              return (_a = this.store) === null || _a === void 0 ? void 0 : _a.get(uuid);
            },
            set: (uuid, ottData) => {
              var _a;
              log("[JwtStore] Proxy SET");
              this.resolve(ottData.ott);
              persistJwt(ottData.jwt);
              this.jwt = ottData.jwt;
              return (_a = this.store) === null || _a === void 0 ? void 0 : _a.set(uuid, ottData);
            }
          };
        }
        throw new Error("Invalid _jwtStore invoker");
      }
      getOttData() {
        return __awaiter2(this, void 0, void 0, function* () {
          const resolved2 = yield this.ottResolved;
          if (resolved2) {
            return resolved2;
          }
          throw new Error("Called getOttData on a non OTT-JWT flow");
        });
      }
      getJwt() {
        return __awaiter2(this, void 0, void 0, function* () {
          yield this.ottResolved;
          return this.jwt;
        });
      }
      caught(error) {
        this.reject(error);
      }
    };
    exports.XummSdkJwt = XummSdkJwt;
  }
});

// browser-external:crypto
var require_crypto2 = __commonJS({
  "browser-external:crypto"(exports, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/crypto-js/core.js
var require_core = __commonJS({
  "node_modules/crypto-js/core.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports, function() {
      var CryptoJS = CryptoJS || function(Math2, undefined2) {
        var crypto3;
        if (typeof window !== "undefined" && window.crypto) {
          crypto3 = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto3 = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto3 = globalThis.crypto;
        }
        if (!crypto3 && typeof window !== "undefined" && window.msCrypto) {
          crypto3 = window.msCrypto;
        }
        if (!crypto3 && typeof global !== "undefined" && global.crypto) {
          crypto3 = global.crypto;
        }
        if (!crypto3 && typeof __require === "function") {
          try {
            crypto3 = require_crypto2();
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto3) {
            if (typeof crypto3.getRandomValues === "function") {
              try {
                return crypto3.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto3.randomBytes === "function") {
              try {
                return crypto3.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create = Object.create || /* @__PURE__ */ function() {
          function F2() {
          }
          return function(obj) {
            var subtype;
            F2.prototype = obj;
            subtype = new F2();
            F2.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = /* @__PURE__ */ function() {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function() {
            },
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function(encoder2) {
            return (encoder2 || Hex).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              for (var j3 = 0; j3 < thatSigBytes; j3 += 4) {
                thisWords[thisSigBytes + j3 >>> 2] = thatWords[j3 >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function(nBytes) {
            var words = [];
            for (var i = 0; i < nBytes; i += 4) {
              words.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           */
          cfg: Base.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash2 = this._doFinalize();
            return hash2;
          },
          blockSize: 512 / 32,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function(hasher2) {
            return function(message, cfg) {
              return new hasher2.init(cfg).finalize(message);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function(hasher2) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher2, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS;
    });
  }
});

// node_modules/crypto-js/sha256.js
var require_sha2562 = __commonJS({
  "node_modules/crypto-js/sha256.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H2 = [];
        var K3 = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H2[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K3[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W2 = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H2.slice(0));
          },
          _doProcessBlock: function(M2, offset) {
            var H3 = this._hash.words;
            var a = H3[0];
            var b2 = H3[1];
            var c = H3[2];
            var d = H3[3];
            var e = H3[4];
            var f = H3[5];
            var g2 = H3[6];
            var h2 = H3[7];
            for (var i = 0; i < 64; i++) {
              if (i < 16) {
                W2[i] = M2[offset + i] | 0;
              } else {
                var gamma0x = W2[i - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W2[i - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W2[i] = gamma0 + W2[i - 7] + gamma1 + W2[i - 16];
              }
              var ch = e & f ^ ~e & g2;
              var maj = a & b2 ^ a & c ^ b2 & c;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
              var t1 = h2 + sigma1 + ch + K3[i] + W2[i];
              var t2 = sigma0 + maj;
              h2 = g2;
              g2 = f;
              f = e;
              e = d + t1 | 0;
              d = c;
              c = b2;
              b2 = a;
              a = t1 + t2 | 0;
            }
            H3[0] = H3[0] + a | 0;
            H3[1] = H3[1] + b2 | 0;
            H3[2] = H3[2] + c | 0;
            H3[3] = H3[3] + d | 0;
            H3[4] = H3[4] + e | 0;
            H3[5] = H3[5] + f | 0;
            H3[6] = H3[6] + g2 | 0;
            H3[7] = H3[7] + h2 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS.SHA256;
    });
  }
});

// node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "node_modules/crypto-js/enc-base64.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64 = C_enc.Base64 = {
          /**
           * Converts a word array to a Base64 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Base64 string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map3 = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j3 = 0; j3 < 4 && i + j3 * 0.75 < sigBytes; j3++) {
                base64Chars.push(map3.charAt(triplet >>> 6 * (3 - j3) & 63));
              }
            }
            var paddingChar = map3.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64 string to a word array.
           *
           * @param {string} base64Str The Base64 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
           */
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map3 = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j3 = 0; j3 < map3.length; j3++) {
                reverseMap[map3.charCodeAt(j3)] = j3;
              }
            }
            var paddingChar = map3.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64;
    });
  }
});

// node_modules/crypto-js/lib-typedarrays.js
var require_lib_typedarrays = __commonJS({
  "node_modules/crypto-js/lib-typedarrays.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words = [];
            for (var i = 0; i < typedArrayByteLength; i++) {
              words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
            }
            superInit.call(this, words, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS.lib.WordArray;
    });
  }
});

// node_modules/xumm-js-pkce/dist/PKCE.js
var require_PKCE = __commonJS({
  "node_modules/xumm-js-pkce/dist/PKCE.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var sha256_1 = __importDefault(require_sha2562());
    var enc_base64_1 = __importDefault(require_enc_base64());
    var lib_typedarrays_1 = __importDefault(require_lib_typedarrays());
    var PKCE = (
      /** @class */
      function() {
        function PKCE2(config5) {
          this.state = "";
          this.codeVerifier = "";
          this.config = config5;
        }
        PKCE2.prototype.authorizeUrl = function(additionalParams) {
          var _a, _b;
          if (additionalParams === void 0) {
            additionalParams = {};
          }
          var queryString = new URLSearchParams(Object.assign(__assign({ response_type: ((_a = this.config) === null || _a === void 0 ? void 0 : _a.implicit) ? "token" : "code", client_id: this.config.client_id, state: this.getState(additionalParams.state || null), scope: this.config.requested_scopes, redirect_uri: this.config.redirect_uri }, ((_b = this.config) === null || _b === void 0 ? void 0 : _b.implicit) ? {} : {
            code_challenge: this.pkceChallengeFromVerifier(),
            code_challenge_method: "S256"
          }), additionalParams)).toString();
          return "".concat(this.config.authorization_endpoint, "?").concat(queryString);
        };
        PKCE2.prototype.exchangeForAccessToken = function(url, additionalParams) {
          var _this = this;
          if (additionalParams === void 0) {
            additionalParams = {};
          }
          return this.parseAuthResponseUrl(url).then(function(q2) {
            var _a, _b;
            if ((_a = _this.config) === null || _a === void 0 ? void 0 : _a.implicit) {
              var tokenResponse_1 = {
                access_token: "",
                expires_in: 0,
                refresh_expires_in: 0,
                refresh_token: "",
                scope: "",
                token_type: ""
              };
              var urlParams = new URL(url).searchParams;
              urlParams.forEach(function(val, key) {
                if (Object.keys(tokenResponse_1).indexOf(key) > -1) {
                  tokenResponse_1[key] = typeof tokenResponse_1[key] === "number" ? Number(val) : String(val);
                }
              });
              return Promise.resolve(Object.assign(tokenResponse_1, additionalParams));
            }
            return fetch(_this.config.token_endpoint, {
              method: "POST",
              body: new URLSearchParams(Object.assign(__assign({ grant_type: "authorization_code", code: q2.code, client_id: _this.config.client_id, redirect_uri: _this.config.redirect_uri }, ((_b = _this.config) === null || _b === void 0 ? void 0 : _b.implicit) ? {} : {
                code_verifier: _this.getCodeVerifier()
              }), additionalParams)),
              headers: {
                Accept: "application/json",
                "Content-Type": "application/x-www-form-urlencoded;charset=UTF-8"
              }
            }).then(function(response) {
              return response.json();
            });
          });
        };
        PKCE2.prototype.getCodeVerifier = function() {
          if (this.codeVerifier === "") {
            this.codeVerifier = this.randomStringFromStorage("pkce_code_verifier");
          }
          return this.codeVerifier;
        };
        PKCE2.prototype.getState = function(explicit) {
          if (explicit === void 0) {
            explicit = null;
          }
          var stateKey = "pkce_state";
          if (explicit !== null) {
            this.getStore().setItem(stateKey, explicit);
          }
          if (this.state === "") {
            this.state = this.randomStringFromStorage(stateKey);
          }
          return this.state;
        };
        PKCE2.prototype.parseAuthResponseUrl = function(url) {
          var params = new URL(url).searchParams;
          return this.validateAuthResponse({
            error: params.get("error"),
            query: params.get("query"),
            state: params.get("state"),
            code: params.get("code")
          });
        };
        PKCE2.prototype.pkceChallengeFromVerifier = function() {
          var hashed = (0, sha256_1.default)(this.getCodeVerifier());
          return enc_base64_1.default.stringify(hashed).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
        };
        PKCE2.prototype.randomStringFromStorage = function(key) {
          var fromStorage = this.getStore().getItem(key);
          if (fromStorage === null) {
            this.getStore().setItem(key, lib_typedarrays_1.default.random(64));
          }
          return this.getStore().getItem(key) || "";
        };
        PKCE2.prototype.validateAuthResponse = function(queryParams) {
          var _this = this;
          return new Promise(function(resolve, reject) {
            var _a;
            if (queryParams.error) {
              return reject({ error: queryParams.error });
            }
            if (queryParams.state !== _this.getState() && !((_a = _this.config) === null || _a === void 0 ? void 0 : _a.implicit)) {
              return reject({ error: "Invalid State" });
            }
            return resolve(queryParams);
          });
        };
        PKCE2.prototype.getStore = function() {
          var _a;
          return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.storage) || sessionStorage;
        };
        return PKCE2;
      }()
    );
    exports.default = PKCE;
  }
});

// node_modules/xumm-oauth2-pkce/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/xumm-oauth2-pkce/dist/index.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XummPkce = exports.XummPkceThread = void 0;
    var events_1 = require_events();
    var xumm_sdk_1 = require_src();
    var xumm_js_pkce_1 = __importDefault(require_PKCE());
    var log = function(...args) {
      if (typeof localStorage !== "undefined") {
        if (localStorage === null || localStorage === void 0 ? void 0 : localStorage.debug) {
          console.log(...args);
        }
      }
    };
    if (typeof window !== "undefined") {
      log("Xumm OAuth2 PKCE Authorization Code Flow lib.");
    }
    var EventReadyPromise = (event) => {
      let _resolve = (value) => {
      };
      const promise = new Promise((resolve) => {
        _resolve = resolve;
      });
      return {
        promise,
        resolve: (value) => {
          return _resolve(value);
        }
      };
    };
    var XummPkceThread = class extends events_1.EventEmitter {
      constructor(xummApiKey, optionsOrRedirectUrl) {
        var _a, _b;
        super();
        this.popup = null;
        this.resolved = false;
        this.mobileRedirectFlow = false;
        this.eventPromises = {
          retrieved: EventReadyPromise("retrieved"),
          error: EventReadyPromise("error"),
          success: EventReadyPromise("success"),
          loggedout: EventReadyPromise("loggedout")
        };
        this.options = {
          redirectUrl: document.location.href,
          rememberJwt: true,
          storage: localStorage,
          implicit: false
        };
        if (typeof optionsOrRedirectUrl === "string") {
          this.options.redirectUrl = optionsOrRedirectUrl;
        } else if (typeof optionsOrRedirectUrl === "object" && optionsOrRedirectUrl) {
          if (typeof optionsOrRedirectUrl.redirectUrl === "string") {
            this.options.redirectUrl = optionsOrRedirectUrl.redirectUrl;
          }
          if (typeof optionsOrRedirectUrl.rememberJwt === "boolean") {
            this.options.rememberJwt = optionsOrRedirectUrl.rememberJwt;
          }
          if (typeof optionsOrRedirectUrl.storage === "object") {
            this.options.storage = optionsOrRedirectUrl.storage;
          }
          if (typeof optionsOrRedirectUrl.implicit === "boolean") {
            this.options.implicit = optionsOrRedirectUrl.implicit;
          }
        }
        const pkceOptions = {
          client_id: xummApiKey,
          redirect_uri: this.options.redirectUrl,
          authorization_endpoint: "https://oauth2.xumm.app/auth",
          token_endpoint: "https://oauth2.xumm.app/token",
          requested_scopes: "XummPkce",
          storage: this.options.storage,
          implicit: this.options.implicit
        };
        this.pkce = new xumm_js_pkce_1.default(pkceOptions);
        if (this.options.rememberJwt) {
          log("Remember JWT");
          try {
            const existingJwt = JSON.parse(((_a = this.options.storage) === null || _a === void 0 ? void 0 : _a.getItem("XummPkceJwt")) || "{}");
            if ((existingJwt === null || existingJwt === void 0 ? void 0 : existingJwt.jwt) && typeof existingJwt.jwt === "string") {
              const sdk = new xumm_sdk_1.XummSdkJwt(existingJwt.jwt);
              this.ping = sdk.ping();
              this.ping.then((pong) => __awaiter2(this, void 0, void 0, function* () {
                var _c;
                if ((_c = pong === null || pong === void 0 ? void 0 : pong.jwtData) === null || _c === void 0 ? void 0 : _c.sub) {
                  this.autoResolvedFlow = Object.assign(existingJwt, { sdk });
                  yield this.authorize();
                  this.emit("retrieved");
                } else {
                  this.logout();
                }
              })).catch((e) => {
                this.logout();
              });
            } else {
              this.logout();
            }
          } catch (e) {
          }
        }
        window.addEventListener("message", (event) => {
          var _a2;
          log("Received Event from ", event.origin);
          if (String((event === null || event === void 0 ? void 0 : event.data) || "").slice(0, 1) === "{" && String((event === null || event === void 0 ? void 0 : event.data) || "").slice(-1) === "}") {
            log("Got PostMessage with JSON");
            if (event.origin === "https://xumm.app" || event.origin === "https://oauth2.xumm.app") {
              log("Got PostMessage from https://xumm.app / https://oauth2.xumm.app");
              try {
                const postMessage = JSON.parse(event.data);
                if ((postMessage === null || postMessage === void 0 ? void 0 : postMessage.source) === "xumm_sign_request" && (postMessage === null || postMessage === void 0 ? void 0 : postMessage.payload)) {
                  log("Payload opened:", postMessage.payload);
                } else if ((postMessage === null || postMessage === void 0 ? void 0 : postMessage.source) === "xumm_sign_request_resolved" && (postMessage === null || postMessage === void 0 ? void 0 : postMessage.options)) {
                  log("Payload resolved, mostmessage containing options containing redirect URL: ", postMessage);
                  this.resolved = true;
                  this.pkce.exchangeForAccessToken(postMessage.options.full_redirect_uri).then((resp) => {
                    this.jwt = resp.access_token;
                    if (resp === null || resp === void 0 ? void 0 : resp.error_description) {
                      throw new Error(resp === null || resp === void 0 ? void 0 : resp.error_description);
                    }
                    fetch("https://oauth2.xumm.app/userinfo", {
                      headers: {
                        Authorization: "Bearer " + resp.access_token
                      }
                    }).then((r) => r.json()).then((me) => {
                      var _a3;
                      if (this.resolvePromise) {
                        if (this.options.rememberJwt) {
                          log("Remembering JWT");
                          try {
                            (_a3 = this.options.storage) === null || _a3 === void 0 ? void 0 : _a3.setItem("XummPkceJwt", JSON.stringify({ jwt: resp.access_token, me }));
                          } catch (e) {
                            log("Could not persist JWT to local storage", e);
                          }
                        }
                        this.resolvePromise({
                          jwt: resp.access_token,
                          sdk: new xumm_sdk_1.XummSdkJwt(resp.access_token),
                          me
                        });
                      }
                    });
                  }).catch((e) => {
                    if (this.rejectPromise) {
                      this.rejectPromise((e === null || e === void 0 ? void 0 : e.error) ? new Error(e.error) : e);
                    }
                    log((e === null || e === void 0 ? void 0 : e.error) || e);
                  });
                } else if ((postMessage === null || postMessage === void 0 ? void 0 : postMessage.source) === "xumm_sign_request_rejected") {
                  log("Payload rejected", postMessage === null || postMessage === void 0 ? void 0 : postMessage.options);
                  if (this.rejectPromise) {
                    this.rejectPromise(new Error(((_a2 = postMessage === null || postMessage === void 0 ? void 0 : postMessage.options) === null || _a2 === void 0 ? void 0 : _a2.error_description) || "Payload rejected"));
                  }
                } else if ((postMessage === null || postMessage === void 0 ? void 0 : postMessage.source) === "xumm_sign_request_popup_closed") {
                  log("Popup closed, wait 750ms");
                  setTimeout(() => {
                    if (!this.resolved && this.rejectPromise) {
                      this.rejectPromise(new Error("Sign In window closed"));
                    }
                  }, 750);
                } else {
                  log("Unexpected message, skipping", postMessage === null || postMessage === void 0 ? void 0 : postMessage.source);
                }
              } catch (e) {
                log("Error parsing message", (e === null || e === void 0 ? void 0 : e.message) || e);
              }
            }
          }
        }, false);
        const params = new URLSearchParams(((_b = document === null || document === void 0 ? void 0 : document.location) === null || _b === void 0 ? void 0 : _b.search) || "");
        if (params.get("authorization_code") || params.get("access_token") || params.get("error_description")) {
          this.mobileRedirectFlow = true;
          this.urlParams = params;
          let documentReadyExecuted = false;
          const onDocumentReady = (event) => __awaiter2(this, void 0, void 0, function* () {
            log("onDocumentReady", document.readyState);
            if (!documentReadyExecuted && document.readyState === "complete") {
              documentReadyExecuted = true;
              log("(readystatechange: [ " + document.readyState + " ])");
              this.handleMobileGrant();
              yield this.authorize();
              this.emit("retrieved");
            }
          });
          onDocumentReady();
          document.addEventListener("readystatechange", onDocumentReady);
        }
      }
      emit(event, ...args) {
        this.eventPromises[event].promise.then(() => {
          return super.emit(event, ...args);
        });
        return true;
      }
      on(event, listener) {
        this.eventPromises[event].resolve();
        return super.on(event, listener);
      }
      off(event, listener) {
        this.eventPromises[event] = EventReadyPromise(event);
        return super.off(event, listener);
      }
      // Todo: document, e.g. custom flow, plugin
      authorizeUrl() {
        return this.pkce.authorizeUrl();
      }
      handleMobileGrant() {
        if (this.urlParams && this.mobileRedirectFlow) {
          const messageEventData = {
            data: JSON.stringify(this.urlParams.get("authorization_code") || this.urlParams.get("access_token") ? {
              source: "xumm_sign_request_resolved",
              options: {
                full_redirect_uri: document.location.href
              }
            } : {
              source: "xumm_sign_request_rejected",
              options: {
                error: this.urlParams.get("error"),
                error_code: this.urlParams.get("error_code"),
                error_description: this.urlParams.get("error_description")
              }
            }),
            origin: "https://oauth2.xumm.app"
          };
          const event = new MessageEvent("message", messageEventData);
          window.dispatchEvent(event);
          return true;
        }
        return false;
      }
      authorize() {
        return __awaiter2(this, void 0, void 0, function* () {
          if (this.resolvedSuccessfully) {
            return this.promise;
          }
          this.resolved = false;
          try {
            yield this.ping;
          } catch (e) {
          }
          if (!this.mobileRedirectFlow && !this.autoResolvedFlow) {
            const url = this.authorizeUrl();
            const popup = window.open(url, "XummPkceLogin", "directories=no,titlebar=no,toolbar=no,location=no,status=no,menubar=no,scrollbars=no,resizable=no,width=600,height=790");
            this.popup = popup;
            log("Popup opened...", url);
          }
          this.resolved = false;
          const clearUrlParams = () => {
            var _a;
            const newUrlParams = new URLSearchParams(((_a = document === null || document === void 0 ? void 0 : document.location) === null || _a === void 0 ? void 0 : _a.search) || "");
            newUrlParams.delete("authorization_code");
            newUrlParams.delete("code");
            newUrlParams.delete("scope");
            newUrlParams.delete("state");
            newUrlParams.delete("access_token");
            newUrlParams.delete("refresh_token");
            newUrlParams.delete("token_type");
            newUrlParams.delete("expires_in");
            const newSearchParamsString = newUrlParams.toString();
            const url = document.location.href.split("?")[0] + (newSearchParamsString !== "" ? "?" : "") + newSearchParamsString;
            window.history.replaceState({ path: url }, "", url);
          };
          clearUrlParams();
          if (this.autoResolvedFlow) {
            if (!this.resolved) {
              this.resolved = true;
              this.promise = Promise.resolve(this.autoResolvedFlow);
              this.rejectPromise = this.resolvePromise = () => {
              };
              log("Auto resolved");
              this.emit("success");
            }
          } else {
            this.promise = new Promise((resolve, reject) => {
              this.resolvePromise = (_2) => {
                const resolved2 = resolve(_2);
                this.resolved = true;
                this.resolvedSuccessfully = true;
                log("Xumm Sign in RESOLVED");
                this.emit("success");
                return resolved2;
              };
              this.rejectPromise = (_2) => {
                const rejected = reject(_2);
                this.resolved = true;
                this.emit("error", typeof _2 === "string" ? new Error(_2) : _2);
                log("Xumm Sign in REJECTED");
                return rejected;
              };
            });
          }
          return this.promise;
        });
      }
      state() {
        return __awaiter2(this, void 0, void 0, function* () {
          return this.promise;
        });
      }
      logout() {
        var _a;
        setTimeout(() => this.emit("loggedout"), 0);
        try {
          this.resolved = false;
          this.resolvedSuccessfully = void 0;
          this.autoResolvedFlow = void 0;
          (_a = this.options.storage) === null || _a === void 0 ? void 0 : _a.removeItem("XummPkceJwt");
          this.mobileRedirectFlow = false;
        } catch (e) {
        }
        return;
      }
      getPopup() {
        return this === null || this === void 0 ? void 0 : this.popup;
      }
    };
    exports.XummPkceThread = XummPkceThread;
    var thread = (_XummPkce) => {
      let attached = false;
      if (_XummPkce) {
        if (typeof window === "object") {
          if (typeof window._XummPkce === "undefined") {
            window._XummPkce = _XummPkce;
            attached = true;
          }
        }
      }
      const instance = window === null || window === void 0 ? void 0 : window._XummPkce;
      if (instance && attached) {
        log("XummPkce attached to window");
      }
      return instance;
    };
    var XummPkce = class {
      constructor(xummApiKey, optionsOrRedirectUrl) {
        if (typeof window === "undefined" || typeof document === "undefined") {
          return;
        }
        if (!thread()) {
          thread(new XummPkceThread(xummApiKey, optionsOrRedirectUrl));
        }
      }
      on(event, listener) {
        const t = thread();
        if (!t) {
          return;
        }
        t.on(event, listener);
        return this;
      }
      off(event, listener) {
        const t = thread();
        if (!t) {
          return;
        }
        t.off(event, listener);
        return this;
      }
      authorize() {
        const t = thread();
        if (!t) {
          return;
        }
        return t.authorize();
      }
      state() {
        const t = thread();
        if (!t) {
          return;
        }
        return t.state();
      }
      logout() {
        const t = thread();
        if (!t) {
          return;
        }
        return t.logout();
      }
    };
    exports.XummPkce = XummPkce;
  }
});

// node_modules/xumm-xapp-sdk/dist/types.js
var require_types2 = __commonJS({
  "node_modules/xumm-xapp-sdk/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.xAppEvents = void 0;
    var xAppEvents;
    (function(xAppEvents2) {
      xAppEvents2["ready"] = "ready";
      xAppEvents2["scanQr"] = "scanQr";
      xAppEvents2["payloadResolved"] = "payloadResolved";
      xAppEvents2["selectDestination"] = "selectDestination";
      xAppEvents2["networkSwitch"] = "networkSwitch";
    })(xAppEvents = exports.xAppEvents || (exports.xAppEvents = {}));
  }
});

// node_modules/xumm-xapp-sdk/dist/index.js
var require_dist6 = __commonJS({
  "node_modules/xumm-xapp-sdk/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m, k2);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.xApp = void 0;
    var events_1 = require_events();
    var types_1 = require_types2();
    __exportStar(require_types2(), exports);
    var docMinAliveSec = 0.25;
    var attemptMs = 250;
    var attemptDuration = 2e3;
    var appStart = Number(/* @__PURE__ */ new Date());
    var documentIsReady;
    var documentReadyPromise = new Promise((resolve) => {
      documentIsReady = (value) => {
        console.log("Doc Ready...");
        const timeSinceDocLoad = (Number(/* @__PURE__ */ new Date()) - appStart) / 1e3;
        if (timeSinceDocLoad < docMinAliveSec) {
          console.log("Doc not alive >= " + docMinAliveSec + " sec, stalling for " + (docMinAliveSec - timeSinceDocLoad));
          setTimeout(function() {
            resolve(value);
          }, (docMinAliveSec - timeSinceDocLoad) * 1e3);
        } else {
          console.log("Doc alive " + docMinAliveSec + "+ sec, go ahead");
          resolve(value);
        }
      };
    });
    documentReadyPromise.then(() => {
      console.log("documentReadyPromise resolved");
    }).catch((e) => {
      console.log(e);
    });
    if (typeof document !== "undefined") {
      document.addEventListener("readystatechange", (event) => {
        console.log("(readystatechange: [ " + document.readyState + " ])");
        if (document.readyState === "complete") {
          documentIsReady();
        }
      });
    }
    if (typeof window !== "undefined") {
      console.log("Loading xApp SDK");
    }
    var _window = typeof window !== "undefined" ? window : {};
    var isSandbox = false;
    if (_window === null || _window === void 0 ? void 0 : _window.parent) {
      (_a = _window.parent) === null || _a === void 0 ? void 0 : _a.postMessage("XAPP_PROXY_INIT", "*");
    }
    var xAppActionAttempt = (command, options, attempt = 0) => __awaiter2(void 0, void 0, void 0, function* () {
      var _b, _c;
      yield documentReadyPromise;
      if (typeof (_window === null || _window === void 0 ? void 0 : _window.ReactNativeWebView) !== "undefined" || isSandbox) {
        const timeSinceDocLoad = (Number(/* @__PURE__ */ new Date()) - appStart) / 1e3;
        if (["close"].indexOf(command) > -1) {
          const minAliveTimeSec = 4;
          if (timeSinceDocLoad < minAliveTimeSec) {
            console.log("xApp close, doc alive < minAliveTimeSec, stall: " + (minAliveTimeSec - timeSinceDocLoad));
            yield new Promise((resolve) => {
              setTimeout(() => {
                resolve(true);
              }, (minAliveTimeSec - timeSinceDocLoad) * 1e3);
            });
          }
        }
        const msgToPost = JSON.stringify(Object.assign({ command }, options || {}));
        if (isSandbox) {
          (_b = _window.parent) === null || _b === void 0 ? void 0 : _b.postMessage(msgToPost, "*");
        } else {
          (_c = _window.ReactNativeWebView) === null || _c === void 0 ? void 0 : _c.postMessage(msgToPost);
        }
        console.log("xAppActionAttempt Success", command, options);
        return true;
      } else {
        if (attempt * attemptMs < attemptDuration) {
          console.log("xAppActionAttempt Attempt " + attempt + " » Retry", command, options);
          yield new Promise((resolve) => {
            setTimeout(resolve, attemptMs);
          });
          return xAppActionAttempt(command, options, attempt + 1);
        } else {
          console.log("xAppActionAttempt Failed after attempt " + attempt, command, options);
          return new Error("xApp." + command.replace(/^xApp/, "") + ": could not contact Xumm App Host");
        }
      }
    });
    var xAppThread = class extends events_1.EventEmitter {
      constructor() {
        super();
        if (document.readyState === "complete") {
          documentIsReady();
        }
        const eventHandler = (event) => {
          const rEvent = event;
          if (typeof (rEvent === null || rEvent === void 0 ? void 0 : rEvent.data) === "string" && rEvent.data === "XAPP_PROXY_INIT_ACK") {
            console.log("xApp Proxy ACK received, switching to PROXY (SANDBOX) mode");
            isSandbox = true;
            return;
          }
          try {
            const _event = JSON.parse((rEvent === null || rEvent === void 0 ? void 0 : rEvent.data) || "{}");
            console.log("_event (typeof, {_event}) ", typeof _event, { _event });
            if (typeof _event === "object" && _event !== null) {
              if (typeof _event.method === "string" && _event.method in types_1.xAppEvents) {
                console.log("xApp Event received", _event.method, _event);
                const method = _event.method;
                delete _event.method;
                switch (method) {
                  case String(types_1.xAppEvents.payloadResolved):
                    this.emit("payload", _event);
                    break;
                  case String(types_1.xAppEvents.scanQr):
                    this.emit("qr", _event);
                    break;
                  case String(types_1.xAppEvents.networkSwitch):
                    this.emit("networkswitch", _event);
                    break;
                  case String(types_1.xAppEvents.selectDestination):
                    this.emit("destination", _event);
                    break;
                }
              } else {
                console.log("xApp Event received, not in xAppEvents:", _event.method);
              }
            }
          } catch (e) {
            const emessage = (e === null || e === void 0 ? void 0 : e.message) || "";
            if (!emessage.match(/XAPP_PROXY_INIT/)) {
              console.log("xApp Event received, cannot parse as JSON", emessage);
            }
          }
        };
        if (typeof window.addEventListener === "function") {
          window.addEventListener("message", eventHandler);
        }
        if (typeof document.addEventListener === "function") {
          document.addEventListener("message", eventHandler);
        }
      }
      getEnvironment() {
        const t = thread();
        if (!t) {
          return { version: "", ott: "" };
        }
        return t.getEnvironment();
      }
      navigate(navigateOptions) {
        if (typeof (navigateOptions === null || navigateOptions === void 0 ? void 0 : navigateOptions.xApp) !== "string") {
          return Promise.reject(new Error("xApp.navigate: Invalid argument: `xApp`"));
        }
        return xAppActionAttempt("xAppNavigate", navigateOptions);
      }
      openSignRequest(openSignRequestOptions) {
        if (typeof (openSignRequestOptions === null || openSignRequestOptions === void 0 ? void 0 : openSignRequestOptions.uuid) !== "string") {
          return Promise.reject(new Error("xApp.openSignRequest: Invalid argument: `uuid`"));
        }
        if (!openSignRequestOptions.uuid.match(/^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i)) {
          return Promise.reject(new Error("xApp.openSignRequest: Invalid payload UUID"));
        }
        return xAppActionAttempt("openSignRequest", openSignRequestOptions);
      }
      selectDestination(selectDestinationOptions) {
        return xAppActionAttempt("selectDestination", selectDestinationOptions);
      }
      openBrowser(openBrowserOptions) {
        if (typeof (openBrowserOptions === null || openBrowserOptions === void 0 ? void 0 : openBrowserOptions.url) !== "string") {
          return Promise.reject(new Error("xApp.openBrowser: Invalid argument: `url`"));
        }
        return xAppActionAttempt("openBrowser", openBrowserOptions);
      }
      share(shareOptions) {
        if (typeof (shareOptions === null || shareOptions === void 0 ? void 0 : shareOptions.text) !== "string") {
          return Promise.reject(new Error("xApp.share: Invalid argument: `text`"));
        }
        return xAppActionAttempt("share", shareOptions);
      }
      scanQr() {
        return xAppActionAttempt("scanQr");
      }
      tx(txOptions) {
        if (typeof (txOptions === null || txOptions === void 0 ? void 0 : txOptions.tx) !== "string") {
          return Promise.reject(new Error("xApp.tx: Invalid argument: `tx`"));
        }
        if (typeof (txOptions === null || txOptions === void 0 ? void 0 : txOptions.account) !== "string") {
          return Promise.reject(new Error("xApp.tx: Invalid argument: `account`"));
        }
        return xAppActionAttempt("txDetails", txOptions);
      }
      close(closeOptions) {
        return xAppActionAttempt("close", closeOptions);
      }
      ready() {
        return xAppActionAttempt("ready");
      }
      customCommand(customCommand, customCommandOptions) {
        return xAppActionAttempt(customCommand, customCommandOptions);
      }
    };
    var thread = (_xApp) => {
      let attached = false;
      if (_xApp) {
        if (typeof _window === "object") {
          if (typeof _window._xAppSdk === "undefined") {
            _window._xAppSdk = _xApp;
            attached = true;
          }
        }
      }
      const instance = _window === null || _window === void 0 ? void 0 : _window._xAppSdk;
      if (instance && attached) {
        console.log("xAppSdk attached to window");
      }
      return instance;
    };
    var xApp = class {
      constructor() {
        this.xummEnvironment = {
          version: "",
          ott: ""
        };
        if (typeof window === "undefined" || typeof document === "undefined") {
          return;
        }
        if (typeof navigator !== "undefined") {
          if (typeof (navigator === null || navigator === void 0 ? void 0 : navigator.userAgent) === "string") {
            const uaMatch = navigator.userAgent.trim().match(/xumm\/xapp:([0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}).*ott:([0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})/);
            if (uaMatch) {
              this.xummEnvironment.version = uaMatch[1];
              this.xummEnvironment.ott = uaMatch[2];
            }
          }
        }
        if (this.xummEnvironment.version === "") {
          console.log("Warning: Xumm Version could not be retrieved from User Agent, possibly not loaded in xApp context?");
        }
        if (!thread()) {
          thread(new xAppThread());
        }
      }
      getEnvironment() {
        return this.xummEnvironment;
      }
      on(event, listener) {
        const t = thread();
        if (!t) {
          return;
        }
        t.on(event, listener);
        return this;
      }
      off(event, listener) {
        const t = thread();
        if (!t) {
          return;
        }
        t.off(event, listener);
        return this;
      }
      navigate(navigateOptions) {
        const t = thread();
        if (!t) {
          return;
        }
        return t.navigate(navigateOptions);
      }
      openSignRequest(openSignRequestOptions) {
        const t = thread();
        if (t) {
          if (openSignRequestOptions === null || openSignRequestOptions === void 0 ? void 0 : openSignRequestOptions.uuid) {
            return t.openSignRequest(openSignRequestOptions);
          }
        }
        return;
      }
      selectDestination(selectDestinationOptions) {
        const t = thread();
        if (!t) {
          return;
        }
        return t.selectDestination(selectDestinationOptions);
      }
      openBrowser(openBrowserOptions) {
        const t = thread();
        if (!t) {
          return;
        }
        return t.openBrowser(openBrowserOptions);
      }
      share(shareOptions) {
        const t = thread();
        if (!t) {
          return;
        }
        return t.share(shareOptions);
      }
      scanQr() {
        const t = thread();
        if (!t) {
          return;
        }
        return t.scanQr();
      }
      tx(txOptions) {
        const t = thread();
        if (!t) {
          return;
        }
        return t.tx(txOptions);
      }
      close(closeOptions) {
        const t = thread();
        if (!t) {
          return;
        }
        return t.close(closeOptions);
      }
      ready() {
        const t = thread();
        if (!t) {
          return;
        }
        return t.ready();
      }
      customCommand(customCommand, customCommandOptions) {
        const t = thread();
        if (!t) {
          return;
        }
        return t.customCommand(customCommand, customCommandOptions);
      }
    };
    exports.xApp = xApp;
  }
});

// node_modules/xumm/dist/index.js
var require_dist7 = __commonJS({
  "node_modules/xumm/dist/index.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Xumm = void 0;
    var xumm_oauth2_pkce_1 = require_dist5();
    var buffer_1 = require_buffer();
    var events_1 = require_events();
    var fromBinary = (encoded) => {
      return buffer_1.Buffer.from(encoded, "base64").toString("utf8");
    };
    var Runtimes;
    (function(Runtimes2) {
      Runtimes2["cli"] = "cli";
      Runtimes2["browser"] = "browser";
      Runtimes2["xapp"] = "xapp";
    })(Runtimes || (Runtimes = {}));
    var _runtime = {
      cli: false,
      browser: false,
      xapp: false
    };
    var uuidv4re = new RegExp("^[0-9(a-f|A-F)]{8}-[0-9(a-f|A-F)]{4}-4[0-9(a-f|A-F)]{3}-[89ab][0-9(a-f|A-F)]{3}-[0-9(a-f|A-F)]{12}$");
    var _classes = {};
    var _env = typeof process === "object" && process ? (process === null || process === void 0 ? void 0 : process.env) || {} : {};
    Object.assign(_runtime, {
      cli: Object.keys(_env).indexOf("NODE") > -1 || Object.keys(_env).indexOf("SHELL") > -1 || Object.keys(_env).indexOf("TERM") > -1 || Object.keys(_env).indexOf("PATH") > -1
    });
    Object.assign(_runtime, {
      browser: typeof process === "object" && process && (process === null || process === void 0 ? void 0 : process.browser) || typeof document === "object" && document && (document === null || document === void 0 ? void 0 : document.location)
    });
    Object.assign(_runtime, {
      xapp: _runtime.browser && (!!navigator.userAgent.match(/xumm\/xapp/i) || !!navigator.userAgent.match(/xAppBuilder/i))
    });
    var runtime34 = Object.keys(_runtime).filter((r) => _runtime[r]);
    var readyPromises = [];
    var Asyncify = (ReturnValue) => __awaiter2(void 0, void 0, void 0, function* () {
      yield Promise.all(readyPromises);
      return yield ReturnValue();
    });
    var Proxify = (ObjectToProxy) => {
      return new Proxy(ObjectToProxy, {
        get(obj, prop) {
          if (["on", "off"].indexOf(String(prop)) < 0 && // Events
          (typeof obj[prop] === "function" || obj.constructor.name === "Promise")) {
            return function() {
              if (obj.constructor.name === "Promise") {
                return obj.then((res) => Asyncify(() => {
                  return res[prop](...arguments);
                }));
              }
              return Asyncify(() => {
                return obj[prop](...arguments);
              });
            };
          }
          return obj[prop];
        }
      });
    };
    var _initialized = {
      XummSdk: false,
      XummSdkJwt: false,
      XummPkce: false,
      xApp: false
    };
    var _ott;
    var _jwt = "";
    var _jwtData = {};
    var _me = {};
    var instance = 0;
    var UnifiedUserData = class {
      constructor() {
        this.account = Asyncify(() => {
          var _a, _b, _c;
          return (_b = (_a = _jwtData === null || _jwtData === void 0 ? void 0 : _jwtData.sub) !== null && _a !== void 0 ? _a : _me === null || _me === void 0 ? void 0 : _me.sub) !== null && _b !== void 0 ? _b : (_c = _ott === null || _ott === void 0 ? void 0 : _ott.account_info) === null || _c === void 0 ? void 0 : _c.account;
        });
        this.picture = Asyncify(() => {
          var _a, _b, _c, _d, _e2, _f, _g;
          return (_a = _me === null || _me === void 0 ? void 0 : _me.picture) !== null && _a !== void 0 ? _a : ((_c = (_b = _jwtData === null || _jwtData === void 0 ? void 0 : _jwtData.sub) !== null && _b !== void 0 ? _b : _me === null || _me === void 0 ? void 0 : _me.sub) !== null && _c !== void 0 ? _c : (_d = _ott === null || _ott === void 0 ? void 0 : _ott.account_info) === null || _d === void 0 ? void 0 : _d.account) ? `https://xumm.app/avatar/${(_f = (_e2 = _jwtData === null || _jwtData === void 0 ? void 0 : _jwtData.sub) !== null && _e2 !== void 0 ? _e2 : _me === null || _me === void 0 ? void 0 : _me.sub) !== null && _f !== void 0 ? _f : (_g = _ott === null || _ott === void 0 ? void 0 : _ott.account_info) === null || _g === void 0 ? void 0 : _g.account}.png` : void 0;
        });
        this.name = Asyncify(() => {
          var _a, _b;
          return (_a = _me === null || _me === void 0 ? void 0 : _me.name) !== null && _a !== void 0 ? _a : (_b = _ott === null || _ott === void 0 ? void 0 : _ott.account_info) === null || _b === void 0 ? void 0 : _b.name;
        });
        this.domain = Asyncify(() => {
          var _a, _b;
          return (_a = _me === null || _me === void 0 ? void 0 : _me.domain) !== null && _a !== void 0 ? _a : (_b = _ott === null || _ott === void 0 ? void 0 : _ott.account_info) === null || _b === void 0 ? void 0 : _b.domain;
        });
        this.source = Asyncify(() => {
          var _a, _b;
          return (_a = _me === null || _me === void 0 ? void 0 : _me.source) !== null && _a !== void 0 ? _a : (_b = _ott === null || _ott === void 0 ? void 0 : _ott.account_info) === null || _b === void 0 ? void 0 : _b.source;
        });
        this.networkType = Asyncify(() => {
          var _a, _b;
          return (_b = (_a = _me === null || _me === void 0 ? void 0 : _me.networkType) !== null && _a !== void 0 ? _a : _jwtData.network_type) !== null && _b !== void 0 ? _b : _ott === null || _ott === void 0 ? void 0 : _ott.nodetype;
        });
        this.networkEndpoint = Asyncify(() => {
          var _a, _b;
          return (_b = (_a = _me === null || _me === void 0 ? void 0 : _me.networkEndpoint) !== null && _a !== void 0 ? _a : _jwtData.network_endpoint) !== null && _b !== void 0 ? _b : _ott === null || _ott === void 0 ? void 0 : _ott.nodewss;
        });
        this.networkId = Asyncify(() => {
          var _a, _b;
          return (_b = (_a = _me === null || _me === void 0 ? void 0 : _me.networkId) !== null && _a !== void 0 ? _a : _jwtData.network_id) !== null && _b !== void 0 ? _b : _ott === null || _ott === void 0 ? void 0 : _ott.networkid;
        });
        this.blocked = Asyncify(() => {
          var _a, _b;
          return (_a = _me === null || _me === void 0 ? void 0 : _me.blocked) !== null && _a !== void 0 ? _a : (_b = _ott === null || _ott === void 0 ? void 0 : _ott.account_info) === null || _b === void 0 ? void 0 : _b.blocked;
        });
        this.kycApproved = Asyncify(() => {
          var _a, _b;
          return (_a = _me === null || _me === void 0 ? void 0 : _me.kycApproved) !== null && _a !== void 0 ? _a : (_b = _ott === null || _ott === void 0 ? void 0 : _ott.account_info) === null || _b === void 0 ? void 0 : _b.kycApproved;
        });
        this.proSubscription = Asyncify(() => {
          var _a, _b;
          return (_a = _me === null || _me === void 0 ? void 0 : _me.proSubscription) !== null && _a !== void 0 ? _a : (_b = _ott === null || _ott === void 0 ? void 0 : _ott.account_info) === null || _b === void 0 ? void 0 : _b.proSubscription;
        });
        this.profile = Asyncify(() => {
          var _a, _b, _c;
          return (_a = _me === null || _me === void 0 ? void 0 : _me.profile) !== null && _a !== void 0 ? _a : ((_c = (_b = _ott === null || _ott === void 0 ? void 0 : _ott.account_info) === null || _b === void 0 ? void 0 : _b.profile) === null || _c === void 0 ? void 0 : _c.slug) ? _ott.account_info.profile : void 0;
        });
        this.token = Asyncify(() => {
          var _a;
          return (_a = _jwtData === null || _jwtData === void 0 ? void 0 : _jwtData.usertoken_uuidv4) !== null && _a !== void 0 ? _a : null;
        });
      }
    };
    var Xumm = class extends events_1.EventEmitter {
      constructor(apiKeyOrJwt, apiSecretOrOtt) {
        var _a, _b, _c, _d;
        super();
        this.instance = "0";
        this.jwtCredential = false;
        this.runtime = _runtime;
        this.apiKeyOrJwt = "";
        this.apiKeyOrJwt = apiKeyOrJwt;
        this.apiSecretOrOtt = apiSecretOrOtt;
        instance++;
        this.instance = String(instance);
        if (typeof (console === null || console === void 0 ? void 0 : console.log) !== "undefined") {
          if (!_runtime.cli)
            console.log("Constructed Xumm", { runtime: runtime34 });
        }
        let jwtExpired = false;
        if (typeof this.apiKeyOrJwt === "string" && this.apiKeyOrJwt.split(".").length === 3) {
          let _testJwtData;
          try {
            _testJwtData = JSON.parse(fromBinary((_a = this.apiKeyOrJwt.split(".")) === null || _a === void 0 ? void 0 : _a[1]));
          } catch (e) {
          }
          if (Date.now() >= _testJwtData.exp * 1e3) {
            jwtExpired = true;
            const appId = (_d = (_c = (_b = _testJwtData === null || _testJwtData === void 0 ? void 0 : _testJwtData.app_uuidv4) !== null && _b !== void 0 ? _b : _testJwtData === null || _testJwtData === void 0 ? void 0 : _testJwtData.client_id) !== null && _c !== void 0 ? _c : _testJwtData === null || _testJwtData === void 0 ? void 0 : _testJwtData.aud) !== null && _d !== void 0 ? _d : "";
            this.apiKeyOrJwt = appId;
            if (!_runtime.cli)
              console.log("JWT expired, falling back to API KEY: " + appId);
            if (_runtime.cli || _runtime.xapp) {
              const error = new Error("JWT Expired, cannot fall back to API credential: in CLI/xApp environment");
              this.emit("error", error);
              throw error;
            }
          }
          if (!jwtExpired) {
            this.jwtCredential = true;
            _jwt = this.apiKeyOrJwt;
          }
        }
        this.initialize();
        this.user = new UnifiedUserData();
        this.environment = {
          jwt: Asyncify(() => _jwtData),
          ott: Asyncify(() => _ott),
          openid: Asyncify(() => _me),
          bearer: Asyncify(() => _jwt),
          ready: new Promise((resolve) => this.on("ready", () => resolve(void 0))),
          success: new Promise((resolve) => this.on("success", () => resolve(void 0))),
          retrieved: new Promise((resolve) => this.on("retrieved", () => resolve(void 0))),
          retrieving: new Promise((resolve) => this.on("retrieving", () => resolve(void 0)))
        };
        this.state = {
          account: "",
          signedIn: false
        };
        this.helpers = Proxify(Asyncify(() => _classes.XummSdk || _classes.XummSdkJwt));
        this.push = Proxify(Asyncify(() => (_classes.XummSdk || _classes.XummSdkJwt).Push));
        this.payload = Proxify(Asyncify(() => (_classes.XummSdk || _classes.XummSdkJwt).payload));
        this.userstore = Proxify(Asyncify(() => (_classes.XummSdk || _classes.XummSdkJwt).jwtUserdata));
        this.backendstore = Proxify(Asyncify(() => (_classes.XummSdk || _classes.XummSdkJwt).storage));
        const xapp = _classes === null || _classes === void 0 ? void 0 : _classes.xApp;
        if (xapp)
          this.xapp = xapp;
        setTimeout(
          () => Promise.all([
            ...readyPromises.filter((p) => (p === null || p === void 0 ? void 0 : p.promiseType) !== "pkceRetrieverResolver"),
            /**
             * If PKCE flow: wait for `ready` till account is known
             */
            _runtime.xapp ? Promise.resolve() : new Promise((resolve) => {
              var _a2;
              if (_classes === null || _classes === void 0 ? void 0 : _classes.XummPkce) {
                this.user.account.then(() => resolve());
                (_a2 = _classes.XummPkce) === null || _a2 === void 0 ? void 0 : _a2.on("loggedout", () => resolve());
              } else {
                resolve();
              }
            })
          ]).then(() => this.emit("ready")),
          // Constructor ready
          0
        );
      }
      initialize() {
        _ott = void 0;
        if (typeof this.apiKeyOrJwt === "string" && this.apiKeyOrJwt.split(".").length === 3 && _jwt === this.apiKeyOrJwt) {
        } else {
          _jwt = "";
          _jwtData = {};
        }
        _me = {};
        _initialized.XummSdkJwt = false;
        const handleXappEvents = () => __awaiter2(this, void 0, void 0, function* () {
          if (_classes === null || _classes === void 0 ? void 0 : _classes.xApp) {
            _initialized.xApp = true;
            _classes.xApp.on("qr", (data) => {
              this.emit("qr", data, this.instance);
            });
            _classes.xApp.on("payload", (data) => {
              this.emit("payload", data, this.instance);
            });
            _classes.xApp.on("networkswitch", (data) => {
              this.emit("networkswitch", data, this.instance);
            });
            _classes.xApp.on("destination", (data) => {
              this.emit("destination", data, this.instance);
            });
          }
        });
        this.handlePkceEvents();
        const handleOttJwt = () => __awaiter2(this, void 0, void 0, function* () {
          var _a;
          if ((_classes === null || _classes === void 0 ? void 0 : _classes.XummSdkJwt) && !_initialized.XummSdkJwt) {
            _initialized.XummSdkJwt = true;
            const doNotFetchJwtOtt = this.jwtCredential || _jwt !== "";
            if (!doNotFetchJwtOtt) {
              readyPromises.push(_classes.XummSdkJwt.getOttData());
              readyPromises.push(_classes.XummSdkJwt.getJwt());
            }
            const ott = !doNotFetchJwtOtt ? yield _classes.XummSdkJwt.getOttData() : null;
            const jwt = !doNotFetchJwtOtt ? yield _classes.XummSdkJwt.getJwt() : _jwt;
            if (ott) {
              _ott = ott;
              if (_ott === null || _ott === void 0 ? void 0 : _ott.account) {
                this.state.account = _ott.account;
                this.state.signedIn = true;
              }
              this.emit("retrieved");
              this.emit("success");
            }
            if (jwt) {
              _jwt = jwt;
              try {
                _jwtData = JSON.parse(fromBinary((_a = _jwt.split(".")) === null || _a === void 0 ? void 0 : _a[1]));
                if (doNotFetchJwtOtt && this.jwtCredential) {
                  setTimeout(() => this.emit("retrieved"), 0);
                  setTimeout(() => this.emit("success"), 0);
                }
              } catch (e) {
                if (typeof (console === null || console === void 0 ? void 0 : console.log) !== "undefined") {
                  if (!_runtime.cli)
                    console.log("Error decoding JWT", (e === null || e === void 0 ? void 0 : e.message) || "");
                }
              }
            }
            if (typeof (console === null || console === void 0 ? void 0 : console.log) !== "undefined") {
            }
          }
        });
        const initOttJwtRuntime = () => {
          var _a, _b, _c;
          if (!(_classes === null || _classes === void 0 ? void 0 : _classes.XummSdkJwt)) {
            Object.assign(_classes, {
              XummSdkJwt: new (require_src()).XummSdkJwt(
                this.apiKeyOrJwt,
                // Get OTT from UA if present, otherwise fall back to default behaviour
                typeof ((_a = _classes === null || _classes === void 0 ? void 0 : _classes.xApp) === null || _a === void 0 ? void 0 : _a.getEnvironment) !== "undefined" ? ((_c = (_b = _classes === null || _classes === void 0 ? void 0 : _classes.xApp) === null || _b === void 0 ? void 0 : _b.getEnvironment()) === null || _c === void 0 ? void 0 : _c.ott) || void 0 : void 0
              )
            });
            readyPromises.push(handleOttJwt());
          }
        };
        if (_runtime.xapp) {
          if (typeof this.apiKeyOrJwt !== "string" || !(uuidv4re.test(this.apiKeyOrJwt) || this.jwtCredential)) {
            throw new Error("Running in xApp, constructor requires first param. to be Xumm API Key or JWT");
          }
          if (!(_classes === null || _classes === void 0 ? void 0 : _classes.xApp)) {
            Object.assign(_classes, {
              xApp: new (require_dist6()).xApp()
            });
          }
          readyPromises.push(handleXappEvents());
          initOttJwtRuntime();
        } else if (_runtime.browser) {
          if (typeof this.apiKeyOrJwt !== "string" || !(uuidv4re.test(this.apiKeyOrJwt) || this.jwtCredential)) {
            throw new Error("Running in browser, constructor requires first param. to be Xumm API Key or JWT");
          }
          if (!(_classes === null || _classes === void 0 ? void 0 : _classes.XummPkce) && !_runtime.xapp) {
            Object.assign(_classes, {
              XummPkce: new xumm_oauth2_pkce_1.XummPkce(this.apiKeyOrJwt, {
                implicit: true
              })
            });
            if (_classes.XummPkce) {
              if (this.jwtCredential) {
                initOttJwtRuntime();
              } else {
                setTimeout(() => this.emit("retrieving"), 0);
                const handlePkceState = (resolve) => {
                  var _a, _b;
                  (_b = (_a = _classes.XummPkce) === null || _a === void 0 ? void 0 : _a.state()) === null || _b === void 0 ? void 0 : _b.then((state) => {
                    var _a2;
                    if ((state === null || state === void 0 ? void 0 : state.sdk) && !(_classes === null || _classes === void 0 ? void 0 : _classes.XummSdkJwt)) {
                      Object.assign(_classes, { XummSdkJwt: state.sdk });
                      Object.assign(_me, Object.assign({}, (state === null || state === void 0 ? void 0 : state.me) || {}));
                      if ((_a2 = state === null || state === void 0 ? void 0 : state.me) === null || _a2 === void 0 ? void 0 : _a2.account) {
                        this.state.account = state.me.account;
                        this.state.signedIn = true;
                      }
                    }
                    if ((state === null || state === void 0 ? void 0 : state.jwt) && _jwt === "") {
                      _jwt = state.jwt;
                      handleOttJwt();
                    }
                    resolve(state);
                  });
                };
                readyPromises.push(this.handlePkceEvents());
                const pkceRetrieverResolver = new Promise((resolve) => {
                  var _a, _b;
                  (_a = _classes.XummPkce) === null || _a === void 0 ? void 0 : _a.on("retrieved", () => {
                    handlePkceState(resolve);
                  });
                  (_b = _classes.XummPkce) === null || _b === void 0 ? void 0 : _b.on("success", () => {
                    handlePkceState(resolve);
                  });
                });
                readyPromises.push(Object.assign(pkceRetrieverResolver, {
                  promiseType: "pkceRetrieverResolver"
                }));
              }
            }
          }
        } else if (_runtime.cli) {
          if (typeof this.apiKeyOrJwt !== "string") {
            throw new Error("Running CLI, constructor needs first param. to be Xumm API Key / raw JWT");
          } else {
            if (uuidv4re.test(this.apiKeyOrJwt)) {
              if (typeof this.apiSecretOrOtt !== "string" || !uuidv4re.test(this.apiSecretOrOtt)) {
                throw new Error("Running CLI, constructor first param. is API Key, but second param. isn't a valid API Secret");
              }
            }
            if (!uuidv4re.test(this.apiKeyOrJwt) && this.apiKeyOrJwt.split(".").length !== 3) {
              throw new Error("Running CLI, constructor first param. not a valid JWT, nor a valid API Key");
            }
            if (this.jwtCredential) {
              initOttJwtRuntime();
            } else {
              if (!(_classes === null || _classes === void 0 ? void 0 : _classes.XummSdk)) {
                Object.assign(_classes, {
                  XummSdk: new (require_src()).XummSdk(this.apiKeyOrJwt, this.apiSecretOrOtt)
                });
              }
            }
          }
        }
      }
      /**
       * PKCE
       */
      authorize() {
        var _a;
        return __awaiter2(this, void 0, void 0, function* () {
          try {
            return yield (_a = _classes === null || _classes === void 0 ? void 0 : _classes.XummPkce) === null || _a === void 0 ? void 0 : _a.authorize();
          } catch (e) {
            return e;
          }
        });
      }
      /**
       * TODO: CHECK IF EVENTS ARE NOT REGISTERED AND FIRING TWICE
       */
      handlePkceEvents() {
        return __awaiter2(this, void 0, void 0, function* () {
          if ((_classes === null || _classes === void 0 ? void 0 : _classes.XummPkce) && !_initialized.XummPkce) {
            _initialized.XummPkce = true;
            const retrievedHandler = () => this.emit("retrieved");
            const successHandler = () => this.emit("success");
            const errorHandler = (data) => this.emit("error", data);
            _classes.XummPkce.on("retrieved", retrievedHandler);
            _classes.XummPkce.on("success", successHandler);
            _classes.XummPkce.on("error", errorHandler);
          }
          return;
        });
      }
      logout() {
        var _a;
        return __awaiter2(this, void 0, void 0, function* () {
          if (_runtime.xapp) {
            return;
          }
          let downgradeJwtLogin = false;
          this.state.account = "";
          this.state.signedIn = false;
          if (typeof this.apiKeyOrJwt === "string" && this.apiKeyOrJwt.split(".").length === 3 && (_jwtData === null || _jwtData === void 0 ? void 0 : _jwtData.app_uuidv4) && this.jwtCredential) {
            this.apiKeyOrJwt = _jwtData.app_uuidv4;
            this.jwtCredential = false;
            downgradeJwtLogin = true;
            window._XummPkce = void 0;
          }
          if (_runtime.browser && ((_me === null || _me === void 0 ? void 0 : _me.sub) || downgradeJwtLogin)) {
            (_a = _classes === null || _classes === void 0 ? void 0 : _classes.XummPkce) === null || _a === void 0 ? void 0 : _a.logout();
            Object.assign(_classes, {
              XummSdk: void 0,
              XummSdkJwt: void 0,
              XummPkce: void 0
            });
            readyPromises.length = 0;
            this.jwtCredential = false;
            this.initialize();
            this.user = new UnifiedUserData();
            this.environment = {
              jwt: Asyncify(() => _jwtData),
              ott: Asyncify(() => _ott),
              openid: Asyncify(() => _me),
              bearer: Asyncify(() => _jwt),
              ready: new Promise((resolve) => this.on("ready", () => resolve(void 0))),
              success: new Promise((resolve) => this.on("success", () => resolve(void 0))),
              retrieved: new Promise((resolve) => this.on("retrieved", () => resolve(void 0))),
              retrieving: new Promise((resolve) => this.on("retrieving", () => resolve(void 0)))
            };
            this.emit("logout");
          }
        });
      }
      /**
       * SDK
       */
      ping() {
        var _a;
        return __awaiter2(this, void 0, void 0, function* () {
          yield Promise.all(readyPromises);
          return (_a = (_classes === null || _classes === void 0 ? void 0 : _classes.XummSdkJwt) || (_classes === null || _classes === void 0 ? void 0 : _classes.XummSdk)) === null || _a === void 0 ? void 0 : _a.ping();
        });
      }
    };
    exports.Xumm = Xumm;
  }
});

// node_modules/@polkadot/types/lookup.js
var lookup_exports = {};
__export(lookup_exports, {
  __TYPES_LOOKUP: () => __TYPES_LOOKUP
});
var __TYPES_LOOKUP;
var init_lookup2 = __esm({
  "node_modules/@polkadot/types/lookup.js"() {
    __TYPES_LOOKUP = "augmented";
  }
});

// node_modules/@polkadot/api-base/types/consts.js
var consts_exports = {};
var init_consts3 = __esm({
  "node_modules/@polkadot/api-base/types/consts.js"() {
  }
});

// node_modules/@therootnetwork/api-types/dist/augment/api-consts.js
var require_api_consts = __commonJS({
  "node_modules/@therootnetwork/api-types/dist/augment/api-consts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    init_consts3();
  }
});

// node_modules/@polkadot/api-base/types/errors.js
var errors_exports = {};
var init_errors3 = __esm({
  "node_modules/@polkadot/api-base/types/errors.js"() {
  }
});

// node_modules/@therootnetwork/api-types/dist/augment/api-errors.js
var require_api_errors = __commonJS({
  "node_modules/@therootnetwork/api-types/dist/augment/api-errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    init_errors3();
  }
});

// node_modules/@polkadot/api-base/types/events.js
var events_exports = {};
var init_events3 = __esm({
  "node_modules/@polkadot/api-base/types/events.js"() {
  }
});

// node_modules/@therootnetwork/api-types/dist/augment/api-events.js
var require_api_events = __commonJS({
  "node_modules/@therootnetwork/api-types/dist/augment/api-events.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    init_events3();
  }
});

// node_modules/@polkadot/api-base/types/storage.js
var storage_exports = {};
var init_storage3 = __esm({
  "node_modules/@polkadot/api-base/types/storage.js"() {
  }
});

// node_modules/@therootnetwork/api-types/dist/augment/api-query.js
var require_api_query = __commonJS({
  "node_modules/@therootnetwork/api-types/dist/augment/api-query.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    init_storage3();
  }
});

// node_modules/@polkadot/api-base/types/submittable.js
var submittable_exports = {};
var init_submittable2 = __esm({
  "node_modules/@polkadot/api-base/types/submittable.js"() {
  }
});

// node_modules/@therootnetwork/api-types/dist/augment/api-tx.js
var require_api_tx = __commonJS({
  "node_modules/@therootnetwork/api-types/dist/augment/api-tx.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    init_submittable2();
  }
});

// node_modules/@therootnetwork/api-types/dist/augment/api-rpc.js
var require_api_rpc = __commonJS({
  "node_modules/@therootnetwork/api-types/dist/augment/api-rpc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    init_jsonrpc();
  }
});

// node_modules/@polkadot/api-base/types/calls.js
var calls_exports = {};
var init_calls = __esm({
  "node_modules/@polkadot/api-base/types/calls.js"() {
  }
});

// node_modules/@therootnetwork/api-types/dist/augment/api-runtime.js
var require_api_runtime = __commonJS({
  "node_modules/@therootnetwork/api-types/dist/augment/api-runtime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    init_calls();
  }
});

// node_modules/@therootnetwork/api-types/dist/augment/api.js
var require_api = __commonJS({
  "node_modules/@therootnetwork/api-types/dist/augment/api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    require_api_consts();
    require_api_errors();
    require_api_events();
    require_api_query();
    require_api_tx();
    require_api_rpc();
    require_api_runtime();
  }
});

// node_modules/@therootnetwork/api-types/dist/lookup/rootnet.js
var require_rootnet = __commonJS({
  "node_modules/@therootnetwork/api-types/dist/lookup/rootnet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      /**
       * Lookup0: seed_primitives::signature::AccountId20
       **/
      SeedPrimitivesSignatureAccountId20: "[u8;20]",
      /**
       * Lookup3: frame_system::AccountInfo<Nonce, pallet_balances::types::AccountData<Balance>>
       **/
      FrameSystemAccountInfo: {
        nonce: "u32",
        consumers: "u32",
        providers: "u32",
        sufficients: "u32",
        data: "PalletBalancesAccountData"
      },
      /**
       * Lookup5: pallet_balances::types::AccountData<Balance>
       **/
      PalletBalancesAccountData: {
        free: "u128",
        reserved: "u128",
        frozen: "u128",
        flags: "u128"
      },
      /**
       * Lookup8: frame_support::dispatch::PerDispatchClass<sp_weights::weight_v2::Weight>
       **/
      FrameSupportDispatchPerDispatchClassWeight: {
        normal: "SpWeightsWeightV2Weight",
        operational: "SpWeightsWeightV2Weight",
        mandatory: "SpWeightsWeightV2Weight"
      },
      /**
       * Lookup9: sp_weights::weight_v2::Weight
       **/
      SpWeightsWeightV2Weight: {
        refTime: "Compact<u64>",
        proofSize: "Compact<u64>"
      },
      /**
       * Lookup15: sp_runtime::generic::digest::Digest
       **/
      SpRuntimeDigest: {
        logs: "Vec<SpRuntimeDigestDigestItem>"
      },
      /**
       * Lookup17: sp_runtime::generic::digest::DigestItem
       **/
      SpRuntimeDigestDigestItem: {
        _enum: {
          Other: "Bytes",
          __Unused1: "Null",
          __Unused2: "Null",
          __Unused3: "Null",
          Consensus: "([u8;4],Bytes)",
          Seal: "([u8;4],Bytes)",
          PreRuntime: "([u8;4],Bytes)",
          __Unused7: "Null",
          RuntimeEnvironmentUpdated: "Null"
        }
      },
      /**
       * Lookup20: frame_system::EventRecord<seed_runtime::RuntimeEvent, primitive_types::H256>
       **/
      FrameSystemEventRecord: {
        phase: "FrameSystemPhase",
        event: "Event",
        topics: "Vec<H256>"
      },
      /**
       * Lookup22: frame_system::pallet::Event<T>
       **/
      FrameSystemEvent: {
        _enum: {
          ExtrinsicSuccess: {
            dispatchInfo: "FrameSupportDispatchDispatchInfo"
          },
          ExtrinsicFailed: {
            dispatchError: "SpRuntimeDispatchError",
            dispatchInfo: "FrameSupportDispatchDispatchInfo"
          },
          CodeUpdated: "Null",
          NewAccount: {
            account: "SeedPrimitivesSignatureAccountId20"
          },
          KilledAccount: {
            account: "SeedPrimitivesSignatureAccountId20"
          },
          Remarked: {
            _alias: {
              hash_: "hash"
            },
            sender: "SeedPrimitivesSignatureAccountId20",
            hash_: "H256"
          }
        }
      },
      /**
       * Lookup23: frame_support::dispatch::DispatchInfo
       **/
      FrameSupportDispatchDispatchInfo: {
        weight: "SpWeightsWeightV2Weight",
        class: "FrameSupportDispatchDispatchClass",
        paysFee: "FrameSupportDispatchPays"
      },
      /**
       * Lookup24: frame_support::dispatch::DispatchClass
       **/
      FrameSupportDispatchDispatchClass: {
        _enum: ["Normal", "Operational", "Mandatory"]
      },
      /**
       * Lookup25: frame_support::dispatch::Pays
       **/
      FrameSupportDispatchPays: {
        _enum: ["Yes", "No"]
      },
      /**
       * Lookup26: sp_runtime::DispatchError
       **/
      SpRuntimeDispatchError: {
        _enum: {
          Other: "Null",
          CannotLookup: "Null",
          BadOrigin: "Null",
          Module: "SpRuntimeModuleError",
          ConsumerRemaining: "Null",
          NoProviders: "Null",
          TooManyConsumers: "Null",
          Token: "SpRuntimeTokenError",
          Arithmetic: "SpArithmeticArithmeticError",
          Transactional: "SpRuntimeTransactionalError",
          Exhausted: "Null",
          Corruption: "Null",
          Unavailable: "Null",
          RootNotAllowed: "Null"
        }
      },
      /**
       * Lookup27: sp_runtime::ModuleError
       **/
      SpRuntimeModuleError: {
        index: "u8",
        error: "[u8;4]"
      },
      /**
       * Lookup28: sp_runtime::TokenError
       **/
      SpRuntimeTokenError: {
        _enum: [
          "FundsUnavailable",
          "OnlyProvider",
          "BelowMinimum",
          "CannotCreate",
          "UnknownAsset",
          "Frozen",
          "Unsupported",
          "CannotCreateHold",
          "NotExpendable",
          "Blocked"
        ]
      },
      /**
       * Lookup29: sp_arithmetic::ArithmeticError
       **/
      SpArithmeticArithmeticError: {
        _enum: ["Underflow", "Overflow", "DivisionByZero"]
      },
      /**
       * Lookup30: sp_runtime::TransactionalError
       **/
      SpRuntimeTransactionalError: {
        _enum: ["LimitReached", "NoLayer"]
      },
      /**
       * Lookup31: pallet_scheduler::pallet::Event<T>
       **/
      PalletSchedulerEvent: {
        _enum: {
          Scheduled: {
            when: "u32",
            index: "u32"
          },
          Canceled: {
            when: "u32",
            index: "u32"
          },
          Dispatched: {
            task: "(u32,u32)",
            id: "Option<[u8;32]>",
            result: "Result<Null, SpRuntimeDispatchError>"
          },
          CallUnavailable: {
            task: "(u32,u32)",
            id: "Option<[u8;32]>"
          },
          PeriodicFailed: {
            task: "(u32,u32)",
            id: "Option<[u8;32]>"
          },
          PermanentlyOverweight: {
            task: "(u32,u32)",
            id: "Option<[u8;32]>"
          }
        }
      },
      /**
       * Lookup36: pallet_utility::pallet::Event
       **/
      PalletUtilityEvent: {
        _enum: {
          BatchInterrupted: {
            index: "u32",
            error: "SpRuntimeDispatchError"
          },
          BatchCompleted: "Null",
          BatchCompletedWithErrors: "Null",
          ItemCompleted: "Null",
          ItemFailed: {
            error: "SpRuntimeDispatchError"
          },
          DispatchedAs: {
            result: "Result<Null, SpRuntimeDispatchError>"
          }
        }
      },
      /**
       * Lookup37: pallet_recovery::pallet::Event<T>
       **/
      PalletRecoveryEvent: {
        _enum: {
          RecoveryCreated: {
            account: "SeedPrimitivesSignatureAccountId20"
          },
          RecoveryInitiated: {
            lostAccount: "SeedPrimitivesSignatureAccountId20",
            rescuerAccount: "SeedPrimitivesSignatureAccountId20"
          },
          RecoveryVouched: {
            lostAccount: "SeedPrimitivesSignatureAccountId20",
            rescuerAccount: "SeedPrimitivesSignatureAccountId20",
            sender: "SeedPrimitivesSignatureAccountId20"
          },
          RecoveryClosed: {
            lostAccount: "SeedPrimitivesSignatureAccountId20",
            rescuerAccount: "SeedPrimitivesSignatureAccountId20"
          },
          AccountRecovered: {
            lostAccount: "SeedPrimitivesSignatureAccountId20",
            rescuerAccount: "SeedPrimitivesSignatureAccountId20"
          },
          RecoveryRemoved: {
            lostAccount: "SeedPrimitivesSignatureAccountId20"
          }
        }
      },
      /**
       * Lookup38: pallet_multisig::pallet::Event<T>
       **/
      PalletMultisigEvent: {
        _enum: {
          NewMultisig: {
            approving: "SeedPrimitivesSignatureAccountId20",
            multisig: "SeedPrimitivesSignatureAccountId20",
            callHash: "[u8;32]"
          },
          MultisigApproval: {
            approving: "SeedPrimitivesSignatureAccountId20",
            timepoint: "PalletMultisigTimepoint",
            multisig: "SeedPrimitivesSignatureAccountId20",
            callHash: "[u8;32]"
          },
          MultisigExecuted: {
            approving: "SeedPrimitivesSignatureAccountId20",
            timepoint: "PalletMultisigTimepoint",
            multisig: "SeedPrimitivesSignatureAccountId20",
            callHash: "[u8;32]",
            result: "Result<Null, SpRuntimeDispatchError>"
          },
          MultisigCancelled: {
            cancelling: "SeedPrimitivesSignatureAccountId20",
            timepoint: "PalletMultisigTimepoint",
            multisig: "SeedPrimitivesSignatureAccountId20",
            callHash: "[u8;32]"
          }
        }
      },
      /**
       * Lookup39: pallet_multisig::Timepoint<BlockNumber>
       **/
      PalletMultisigTimepoint: {
        height: "u32",
        index: "u32"
      },
      /**
       * Lookup40: pallet_balances::pallet::Event<T, I>
       **/
      PalletBalancesEvent: {
        _enum: {
          Endowed: {
            account: "SeedPrimitivesSignatureAccountId20",
            freeBalance: "u128"
          },
          DustLost: {
            account: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Transfer: {
            from: "SeedPrimitivesSignatureAccountId20",
            to: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          BalanceSet: {
            who: "SeedPrimitivesSignatureAccountId20",
            free: "u128"
          },
          Reserved: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Unreserved: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          ReserveRepatriated: {
            from: "SeedPrimitivesSignatureAccountId20",
            to: "SeedPrimitivesSignatureAccountId20",
            amount: "u128",
            destinationStatus: "FrameSupportTokensMiscBalanceStatus"
          },
          Deposit: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Withdraw: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Slashed: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Minted: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Burned: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Suspended: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Restored: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Upgraded: {
            who: "SeedPrimitivesSignatureAccountId20"
          },
          Issued: {
            amount: "u128"
          },
          Rescinded: {
            amount: "u128"
          },
          Locked: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Unlocked: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Frozen: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Thawed: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          }
        }
      },
      /**
       * Lookup41: frame_support::traits::tokens::misc::BalanceStatus
       **/
      FrameSupportTokensMiscBalanceStatus: {
        _enum: ["Free", "Reserved"]
      },
      /**
       * Lookup42: pallet_assets::pallet::Event<T, I>
       **/
      PalletAssetsEvent: {
        _enum: {
          Created: {
            assetId: "u32",
            creator: "SeedPrimitivesSignatureAccountId20",
            owner: "SeedPrimitivesSignatureAccountId20"
          },
          Issued: {
            assetId: "u32",
            owner: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Transferred: {
            assetId: "u32",
            from: "SeedPrimitivesSignatureAccountId20",
            to: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Burned: {
            assetId: "u32",
            owner: "SeedPrimitivesSignatureAccountId20",
            balance: "u128"
          },
          TeamChanged: {
            assetId: "u32",
            issuer: "SeedPrimitivesSignatureAccountId20",
            admin: "SeedPrimitivesSignatureAccountId20",
            freezer: "SeedPrimitivesSignatureAccountId20"
          },
          OwnerChanged: {
            assetId: "u32",
            owner: "SeedPrimitivesSignatureAccountId20"
          },
          Frozen: {
            assetId: "u32",
            who: "SeedPrimitivesSignatureAccountId20"
          },
          Thawed: {
            assetId: "u32",
            who: "SeedPrimitivesSignatureAccountId20"
          },
          AssetFrozen: {
            assetId: "u32"
          },
          AssetThawed: {
            assetId: "u32"
          },
          AccountsDestroyed: {
            assetId: "u32",
            accountsDestroyed: "u32",
            accountsRemaining: "u32"
          },
          ApprovalsDestroyed: {
            assetId: "u32",
            approvalsDestroyed: "u32",
            approvalsRemaining: "u32"
          },
          DestructionStarted: {
            assetId: "u32"
          },
          Destroyed: {
            assetId: "u32"
          },
          ForceCreated: {
            assetId: "u32",
            owner: "SeedPrimitivesSignatureAccountId20"
          },
          MetadataSet: {
            assetId: "u32",
            name: "Bytes",
            symbol: "Bytes",
            decimals: "u8",
            isFrozen: "bool"
          },
          MetadataCleared: {
            assetId: "u32"
          },
          ApprovedTransfer: {
            assetId: "u32",
            source: "SeedPrimitivesSignatureAccountId20",
            delegate: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          ApprovalCancelled: {
            assetId: "u32",
            owner: "SeedPrimitivesSignatureAccountId20",
            delegate: "SeedPrimitivesSignatureAccountId20"
          },
          TransferredApproved: {
            assetId: "u32",
            owner: "SeedPrimitivesSignatureAccountId20",
            delegate: "SeedPrimitivesSignatureAccountId20",
            destination: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          AssetStatusChanged: {
            assetId: "u32"
          },
          AssetMinBalanceChanged: {
            assetId: "u32",
            newMinBalance: "u128"
          },
          Touched: {
            assetId: "u32",
            who: "SeedPrimitivesSignatureAccountId20",
            depositor: "SeedPrimitivesSignatureAccountId20"
          },
          Blocked: {
            assetId: "u32",
            who: "SeedPrimitivesSignatureAccountId20"
          }
        }
      },
      /**
       * Lookup44: pallet_assets_ext::pallet::Event<T>
       **/
      PalletAssetsExtEvent: {
        _enum: {
          PlaceHold: {
            assetId: "u32",
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128",
            palletId: "[u8;8]"
          },
          ReleaseHold: {
            assetId: "u32",
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128",
            palletId: "[u8;8]"
          },
          SpendHold: {
            assetId: "u32",
            who: "SeedPrimitivesSignatureAccountId20",
            spends: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>",
            palletId: "[u8;8]"
          },
          SplitTransfer: {
            assetId: "u32",
            who: "SeedPrimitivesSignatureAccountId20",
            transfers: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>"
          },
          CreateAsset: {
            assetId: "u32",
            creator: "SeedPrimitivesSignatureAccountId20",
            initialBalance: "u128"
          },
          InternalWithdraw: {
            assetId: "u32",
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          InternalDeposit: {
            assetId: "u32",
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          AssetDepositSet: {
            assetDeposit: "u128"
          }
        }
      },
      /**
       * Lookup48: pallet_staking::pallet::pallet::Event<T>
       **/
      PalletStakingPalletEvent: {
        _enum: {
          EraPaid: {
            eraIndex: "u32",
            validatorPayout: "u128",
            remainder: "u128"
          },
          Rewarded: {
            stash: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Slashed: {
            staker: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          SlashReported: {
            validator: "SeedPrimitivesSignatureAccountId20",
            fraction: "Perbill",
            slashEra: "u32"
          },
          OldSlashingReportDiscarded: {
            sessionIndex: "u32"
          },
          StakersElected: "Null",
          Bonded: {
            stash: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Unbonded: {
            stash: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Withdrawn: {
            stash: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          Kicked: {
            nominator: "SeedPrimitivesSignatureAccountId20",
            stash: "SeedPrimitivesSignatureAccountId20"
          },
          StakingElectionFailed: "Null",
          Chilled: {
            stash: "SeedPrimitivesSignatureAccountId20"
          },
          PayoutStarted: {
            eraIndex: "u32",
            validatorStash: "SeedPrimitivesSignatureAccountId20"
          },
          ValidatorPrefsSet: {
            stash: "SeedPrimitivesSignatureAccountId20",
            prefs: "PalletStakingValidatorPrefs"
          },
          ForceEra: {
            mode: "PalletStakingForcing"
          }
        }
      },
      /**
       * Lookup50: pallet_staking::ValidatorPrefs
       **/
      PalletStakingValidatorPrefs: {
        commission: "Compact<Perbill>",
        blocked: "bool"
      },
      /**
       * Lookup52: pallet_staking::Forcing
       **/
      PalletStakingForcing: {
        _enum: ["NotForcing", "ForceNew", "ForceNone", "ForceAlways"]
      },
      /**
       * Lookup53: pallet_offences::pallet::Event
       **/
      PalletOffencesEvent: {
        _enum: {
          Offence: {
            kind: "[u8;16]",
            timeslot: "Bytes"
          }
        }
      },
      /**
       * Lookup55: pallet_session::pallet::Event
       **/
      PalletSessionEvent: {
        _enum: {
          NewSession: {
            sessionIndex: "u32"
          }
        }
      },
      /**
       * Lookup56: pallet_grandpa::pallet::Event
       **/
      PalletGrandpaEvent: {
        _enum: {
          NewAuthorities: {
            authoritySet: "Vec<(SpConsensusGrandpaAppPublic,u64)>"
          },
          Paused: "Null",
          Resumed: "Null"
        }
      },
      /**
       * Lookup59: sp_consensus_grandpa::app::Public
       **/
      SpConsensusGrandpaAppPublic: "SpCoreEd25519Public",
      /**
       * Lookup60: sp_core::ed25519::Public
       **/
      SpCoreEd25519Public: "[u8;32]",
      /**
       * Lookup61: pallet_im_online::pallet::Event<T>
       **/
      PalletImOnlineEvent: {
        _enum: {
          HeartbeatReceived: {
            authorityId: "PalletImOnlineSr25519AppSr25519Public"
          },
          AllGood: "Null",
          SomeOffline: {
            offline: "Vec<(SeedPrimitivesSignatureAccountId20,PalletStakingExposure)>"
          }
        }
      },
      /**
       * Lookup62: pallet_im_online::sr25519::app_sr25519::Public
       **/
      PalletImOnlineSr25519AppSr25519Public: "SpCoreSr25519Public",
      /**
       * Lookup63: sp_core::sr25519::Public
       **/
      SpCoreSr25519Public: "[u8;32]",
      /**
       * Lookup66: pallet_staking::Exposure<seed_primitives::signature::AccountId20, Balance>
       **/
      PalletStakingExposure: {
        total: "Compact<u128>",
        own: "Compact<u128>",
        others: "Vec<PalletStakingIndividualExposure>"
      },
      /**
       * Lookup69: pallet_staking::IndividualExposure<seed_primitives::signature::AccountId20, Balance>
       **/
      PalletStakingIndividualExposure: {
        who: "SeedPrimitivesSignatureAccountId20",
        value: "Compact<u128>"
      },
      /**
       * Lookup70: pallet_sudo::pallet::Event<T>
       **/
      PalletSudoEvent: {
        _enum: {
          Sudid: {
            sudoResult: "Result<Null, SpRuntimeDispatchError>"
          },
          KeyChanged: {
            oldSudoer: "Option<SeedPrimitivesSignatureAccountId20>"
          },
          SudoAsDone: {
            sudoResult: "Result<Null, SpRuntimeDispatchError>"
          }
        }
      },
      /**
       * Lookup72: pallet_transaction_payment::pallet::Event<T>
       **/
      PalletTransactionPaymentEvent: {
        _enum: {
          TransactionFeePaid: {
            who: "SeedPrimitivesSignatureAccountId20",
            actualFee: "u128",
            tip: "u128"
          }
        }
      },
      /**
       * Lookup73: pallet_dex::pallet::Event<T>
       **/
      PalletDexEvent: {
        _enum: {
          FeeToSet: "Option<SeedPrimitivesSignatureAccountId20>",
          AddProvision: "(SeedPrimitivesSignatureAccountId20,u32,u128,u32,u128)",
          AddLiquidity: "(SeedPrimitivesSignatureAccountId20,u32,u128,u32,u128,u128,SeedPrimitivesSignatureAccountId20)",
          RemoveLiquidity: "(SeedPrimitivesSignatureAccountId20,u32,u128,u32,u128,u128,SeedPrimitivesSignatureAccountId20)",
          Swap: "(SeedPrimitivesSignatureAccountId20,Vec<u32>,u128,u128,SeedPrimitivesSignatureAccountId20)",
          EnableTradingPair: "PalletDexTradingPair",
          DisableTradingPair: "PalletDexTradingPair",
          ProvisioningToEnabled: "(PalletDexTradingPair,u128,u128,u128)"
        }
      },
      /**
       * Lookup75: pallet_dex::types::TradingPair
       **/
      PalletDexTradingPair: "(u32,u32)",
      /**
       * Lookup76: pallet_nft::pallet::Event<T>
       **/
      PalletNftEvent: {
        _enum: {
          CollectionCreate: {
            collectionUuid: "u32",
            initialIssuance: "u32",
            maxIssuance: "Option<u32>",
            collectionOwner: "SeedPrimitivesSignatureAccountId20",
            metadataScheme: "Bytes",
            name: "Bytes",
            royaltiesSchedule: "Option<SeedPrimitivesNftRoyaltiesSchedule>",
            originChain: "SeedPrimitivesNftOriginChain",
            compatibility: "SeedPrimitivesNftCrossChainCompatibility"
          },
          PublicMintToggle: {
            collectionId: "u32",
            enabled: "bool"
          },
          Mint: {
            collectionId: "u32",
            start: "u32",
            end: "u32",
            owner: "SeedPrimitivesSignatureAccountId20"
          },
          MintFeePaid: {
            who: "SeedPrimitivesSignatureAccountId20",
            collectionId: "u32",
            paymentAsset: "u32",
            paymentAmount: "u128",
            tokenCount: "u32"
          },
          MintPriceSet: {
            collectionId: "u32",
            paymentAsset: "Option<u32>",
            mintPrice: "Option<u128>"
          },
          BridgedMint: {
            collectionId: "u32",
            serialNumbers: "Vec<u32>",
            owner: "SeedPrimitivesSignatureAccountId20"
          },
          OwnerSet: {
            collectionId: "u32",
            newOwner: "SeedPrimitivesSignatureAccountId20"
          },
          MaxIssuanceSet: {
            collectionId: "u32",
            maxIssuance: "u32"
          },
          BaseUriSet: {
            collectionId: "u32",
            baseUri: "Bytes"
          },
          NameSet: {
            collectionId: "u32",
            name: "Bytes"
          },
          RoyaltiesScheduleSet: {
            collectionId: "u32",
            royaltiesSchedule: "SeedPrimitivesNftRoyaltiesSchedule"
          },
          Transfer: {
            previousOwner: "SeedPrimitivesSignatureAccountId20",
            collectionId: "u32",
            serialNumbers: "Vec<u32>",
            newOwner: "SeedPrimitivesSignatureAccountId20"
          },
          Burn: {
            tokenOwner: "SeedPrimitivesSignatureAccountId20",
            collectionId: "u32",
            serialNumber: "u32"
          },
          CollectionClaimed: {
            account: "SeedPrimitivesSignatureAccountId20",
            collectionId: "u32"
          },
          UtilityFlagsSet: {
            collectionId: "u32",
            utilityFlags: "SeedPalletCommonUtilsCollectionUtilityFlags"
          },
          TokenTransferableFlagSet: {
            tokenId: "(u32,u32)",
            transferable: "bool"
          },
          PendingIssuanceCreated: {
            collectionId: "u32",
            issuanceId: "u32",
            tokenOwner: "SeedPrimitivesSignatureAccountId20",
            quantity: "u32",
            burnAuthority: "SeedPalletCommonUtilsTokenBurnAuthority"
          },
          Issued: {
            tokenOwner: "SeedPrimitivesSignatureAccountId20",
            start: "u32",
            end: "u32",
            burnAuthority: "SeedPalletCommonUtilsTokenBurnAuthority"
          },
          AdditionalDataSet: {
            tokenId: "(u32,u32)",
            additionalData: "Option<Bytes>"
          }
        }
      },
      /**
       * Lookup81: seed_primitives::nft::RoyaltiesSchedule<seed_primitives::signature::AccountId20>
       **/
      SeedPrimitivesNftRoyaltiesSchedule: {
        entitlements: "Vec<(SeedPrimitivesSignatureAccountId20,Permill)>"
      },
      /**
       * Lookup86: seed_primitives::nft::OriginChain
       **/
      SeedPrimitivesNftOriginChain: {
        _enum: ["Ethereum", "Root", "XRPL"]
      },
      /**
       * Lookup87: seed_primitives::nft::CrossChainCompatibility
       **/
      SeedPrimitivesNftCrossChainCompatibility: {
        xrpl: "bool"
      },
      /**
       * Lookup91: seed_pallet_common::utils::CollectionUtilityFlags
       **/
      SeedPalletCommonUtilsCollectionUtilityFlags: {
        transferable: "bool",
        burnable: "bool",
        mintable: "bool"
      },
      /**
       * Lookup92: seed_pallet_common::utils::TokenBurnAuthority
       **/
      SeedPalletCommonUtilsTokenBurnAuthority: {
        _enum: ["CollectionOwner", "TokenOwner", "Both", "Neither"]
      },
      /**
       * Lookup95: pallet_sft::pallet::Event<T>
       **/
      PalletSftEvent: {
        _enum: {
          CollectionCreate: {
            collectionId: "u32",
            collectionOwner: "SeedPrimitivesSignatureAccountId20",
            metadataScheme: "Bytes",
            name: "Bytes",
            royaltiesSchedule: "Option<SeedPrimitivesNftRoyaltiesSchedule>",
            originChain: "SeedPrimitivesNftOriginChain"
          },
          PublicMintToggle: {
            tokenId: "(u32,u32)",
            enabled: "bool"
          },
          Mint: {
            collectionId: "u32",
            serialNumbers: "Vec<u32>",
            balances: "Vec<u128>",
            owner: "SeedPrimitivesSignatureAccountId20"
          },
          MintFeePaid: {
            who: "SeedPrimitivesSignatureAccountId20",
            tokenId: "(u32,u32)",
            paymentAsset: "u32",
            paymentAmount: "u128",
            tokenCount: "u128"
          },
          MintPriceSet: {
            tokenId: "(u32,u32)",
            paymentAsset: "Option<u32>",
            mintPrice: "Option<u128>"
          },
          OwnerSet: {
            collectionId: "u32",
            newOwner: "SeedPrimitivesSignatureAccountId20"
          },
          MaxIssuanceSet: {
            tokenId: "(u32,u32)",
            maxIssuance: "u128"
          },
          BaseUriSet: {
            collectionId: "u32",
            metadataScheme: "Bytes"
          },
          NameSet: {
            collectionId: "u32",
            collectionName: "Bytes"
          },
          TokenNameSet: {
            tokenId: "(u32,u32)",
            tokenName: "Bytes"
          },
          RoyaltiesScheduleSet: {
            collectionId: "u32",
            royaltiesSchedule: "SeedPrimitivesNftRoyaltiesSchedule"
          },
          TokenCreate: {
            tokenId: "(u32,u32)",
            initialIssuance: "u128",
            maxIssuance: "Option<u128>",
            tokenName: "Bytes",
            tokenOwner: "SeedPrimitivesSignatureAccountId20"
          },
          Transfer: {
            previousOwner: "SeedPrimitivesSignatureAccountId20",
            collectionId: "u32",
            serialNumbers: "Vec<u32>",
            balances: "Vec<u128>",
            newOwner: "SeedPrimitivesSignatureAccountId20"
          },
          Burn: {
            collectionId: "u32",
            serialNumbers: "Vec<u32>",
            balances: "Vec<u128>",
            owner: "SeedPrimitivesSignatureAccountId20"
          },
          UtilityFlagsSet: {
            collectionId: "u32",
            utilityFlags: "SeedPalletCommonUtilsCollectionUtilityFlags"
          },
          TokenTransferableFlagSet: {
            tokenId: "(u32,u32)",
            transferable: "bool"
          },
          TokenBurnAuthoritySet: {
            tokenId: "(u32,u32)",
            burnAuthority: "SeedPalletCommonUtilsTokenBurnAuthority"
          },
          PendingIssuanceCreated: {
            collectionId: "u32",
            issuanceId: "u32",
            serialNumbers: "Vec<u32>",
            balances: "Vec<u128>",
            tokenOwner: "SeedPrimitivesSignatureAccountId20"
          },
          Issued: {
            tokenOwner: "SeedPrimitivesSignatureAccountId20",
            serialNumbers: "Vec<u32>",
            balances: "Vec<u128>"
          },
          AdditionalDataSet: {
            tokenId: "(u32,u32)",
            additionalData: "Option<Bytes>"
          }
        }
      },
      /**
       * Lookup101: pallet_xrpl_bridge::pallet::Event<T>
       **/
      PalletXrplBridgeEvent: {
        _enum: {
          TransactionAdded: "(u64,H512)",
          TransactionChallenge: "(u64,H512)",
          PaymentDelaySet: {
            assetId: "u32",
            paymentThreshold: "u128",
            delay: "u32"
          },
          PaymentDelayRemoved: {
            assetId: "u32"
          },
          ProcessingOk: "(u64,H512)",
          ProcessingFailed: "(u64,H512,SpRuntimeDispatchError)",
          NotSupportedTransaction: "Null",
          WithdrawRequest: {
            proofId: "u64",
            sender: "SeedPrimitivesSignatureAccountId20",
            assetId: "u32",
            amount: "u128",
            destination: "H160"
          },
          WithdrawDelayed: {
            sender: "SeedPrimitivesSignatureAccountId20",
            assetId: "u32",
            amount: "u128",
            destination: "H160",
            delayedPaymentId: "u64",
            paymentBlock: "u32"
          },
          RelayerAdded: "SeedPrimitivesSignatureAccountId20",
          RelayerRemoved: "SeedPrimitivesSignatureAccountId20",
          DoorAddressSet: {
            doorAccount: "PalletXrplBridgeXrplDoorAccount",
            address: "Option<H160>"
          },
          DoorNextTicketSequenceParamSet: {
            doorAccount: "PalletXrplBridgeXrplDoorAccount",
            ticketSequenceStartNext: "u32",
            ticketBucketSizeNext: "u32"
          },
          DoorTicketSequenceParamSet: {
            doorAccount: "PalletXrplBridgeXrplDoorAccount",
            ticketSequence: "u32",
            ticketSequenceStart: "u32",
            ticketBucketSize: "u32"
          },
          LedgerIndexManualPrune: {
            ledgerIndex: "u32",
            totalCleared: "u32"
          },
          TicketSequenceThresholdReached: {
            doorAccount: "PalletXrplBridgeXrplDoorAccount",
            currentTicket: "u32"
          },
          XrplAssetMapSet: {
            assetId: "u32",
            xrplCurrency: "PalletXrplBridgeXrplCurrency"
          },
          XrplAssetMapRemoved: {
            assetId: "u32",
            xrplCurrency: "PalletXrplBridgeXrplCurrency"
          },
          XrplTxSignRequest: {
            proofId: "u64",
            tx: "PalletXrplBridgeXrplTransaction"
          }
        }
      },
      /**
       * Lookup105: pallet_xrpl_bridge::types::XRPLDoorAccount
       **/
      PalletXrplBridgeXrplDoorAccount: {
        _enum: ["Main", "NFT"]
      },
      /**
       * Lookup107: pallet_xrpl_bridge::types::XRPLCurrency
       **/
      PalletXrplBridgeXrplCurrency: {
        symbol: "PalletXrplBridgeXrplCurrencyType",
        issuer: "H160"
      },
      /**
       * Lookup108: pallet_xrpl_bridge::types::XRPLCurrencyType
       **/
      PalletXrplBridgeXrplCurrencyType: {
        _enum: {
          Standard: "[u8;3]",
          NonStandard: "[u8;20]"
        }
      },
      /**
       * Lookup110: pallet_xrpl_bridge::types::XrplTransaction
       **/
      PalletXrplBridgeXrplTransaction: {
        _enum: {
          NFTokenAcceptOffer: "PalletXrplBridgeNfTokenAcceptOfferTransaction",
          NFTokenCreateOffer: "PalletXrplBridgeNfTokenCreateOfferTransaction"
        }
      },
      /**
       * Lookup111: pallet_xrpl_bridge::types::NFTokenAcceptOfferTransaction
       **/
      PalletXrplBridgeNfTokenAcceptOfferTransaction: {
        nftokenSellOffer: "[u8;32]",
        txFee: "u64",
        txTicketSequence: "u32",
        account: "H160"
      },
      /**
       * Lookup112: pallet_xrpl_bridge::types::NFTokenCreateOfferTransaction
       **/
      PalletXrplBridgeNfTokenCreateOfferTransaction: {
        nftokenId: "[u8;32]",
        txFee: "u64",
        txTicketSequence: "u32",
        account: "H160",
        destination: "H160"
      },
      /**
       * Lookup113: pallet_xrpl::pallet::Event<T>
       **/
      PalletXrplEvent: {
        _enum: {
          XRPLExtrinsicExecuted: {
            publicKey: "PalletXrplXrplPublicKey",
            caller: "SeedPrimitivesSignatureAccountId20",
            rAddress: "Text",
            call: "Call"
          }
        }
      },
      /**
       * Lookup114: pallet_xrpl::types::XrplPublicKey
       **/
      PalletXrplXrplPublicKey: {
        _enum: {
          ED25519: "SpCoreEd25519Public",
          ECDSA: "SpCoreEcdsaPublic"
        }
      },
      /**
       * Lookup115: sp_core::ecdsa::Public
       **/
      SpCoreEcdsaPublic: "[u8;33]",
      /**
       * Lookup119: frame_system::pallet::Call<T>
       **/
      FrameSystemCall: {
        _enum: {
          remark: {
            remark: "Bytes"
          },
          set_heap_pages: {
            pages: "u64"
          },
          set_code: {
            code: "Bytes"
          },
          set_code_without_checks: {
            code: "Bytes"
          },
          set_storage: {
            items: "Vec<(Bytes,Bytes)>"
          },
          kill_storage: {
            _alias: {
              keys_: "keys"
            },
            keys_: "Vec<Bytes>"
          },
          kill_prefix: {
            prefix: "Bytes",
            subkeys: "u32"
          },
          remark_with_event: {
            remark: "Bytes"
          }
        }
      },
      /**
       * Lookup123: pallet_babe::pallet::Call<T>
       **/
      PalletBabeCall: {
        _enum: {
          report_equivocation: {
            equivocationProof: "SpConsensusSlotsEquivocationProof",
            keyOwnerProof: "SpSessionMembershipProof"
          },
          report_equivocation_unsigned: {
            equivocationProof: "SpConsensusSlotsEquivocationProof",
            keyOwnerProof: "SpSessionMembershipProof"
          },
          plan_config_change: {
            config: "SpConsensusBabeDigestsNextConfigDescriptor"
          }
        }
      },
      /**
       * Lookup124: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, Hash>, sp_consensus_babe::app::Public>
       **/
      SpConsensusSlotsEquivocationProof: {
        offender: "SpConsensusBabeAppPublic",
        slot: "u64",
        firstHeader: "SpRuntimeHeader",
        secondHeader: "SpRuntimeHeader"
      },
      /**
       * Lookup125: sp_runtime::generic::header::Header<Number, Hash>
       **/
      SpRuntimeHeader: {
        parentHash: "H256",
        number: "Compact<u32>",
        stateRoot: "H256",
        extrinsicsRoot: "H256",
        digest: "SpRuntimeDigest"
      },
      /**
       * Lookup127: sp_consensus_babe::app::Public
       **/
      SpConsensusBabeAppPublic: "SpCoreSr25519Public",
      /**
       * Lookup129: sp_session::MembershipProof
       **/
      SpSessionMembershipProof: {
        session: "u32",
        trieNodes: "Vec<Bytes>",
        validatorCount: "u32"
      },
      /**
       * Lookup130: sp_consensus_babe::digests::NextConfigDescriptor
       **/
      SpConsensusBabeDigestsNextConfigDescriptor: {
        _enum: {
          __Unused0: "Null",
          V1: {
            c: "(u64,u64)",
            allowedSlots: "SpConsensusBabeAllowedSlots"
          }
        }
      },
      /**
       * Lookup132: sp_consensus_babe::AllowedSlots
       **/
      SpConsensusBabeAllowedSlots: {
        _enum: ["PrimarySlots", "PrimaryAndSecondaryPlainSlots", "PrimaryAndSecondaryVRFSlots"]
      },
      /**
       * Lookup133: pallet_timestamp::pallet::Call<T>
       **/
      PalletTimestampCall: {
        _enum: {
          set: {
            now: "Compact<u64>"
          }
        }
      },
      /**
       * Lookup134: pallet_scheduler::pallet::Call<T>
       **/
      PalletSchedulerCall: {
        _enum: {
          schedule: {
            when: "u32",
            maybePeriodic: "Option<(u32,u32)>",
            priority: "u8",
            call: "Call"
          },
          cancel: {
            when: "u32",
            index: "u32"
          },
          schedule_named: {
            id: "[u8;32]",
            when: "u32",
            maybePeriodic: "Option<(u32,u32)>",
            priority: "u8",
            call: "Call"
          },
          cancel_named: {
            id: "[u8;32]"
          },
          schedule_after: {
            after: "u32",
            maybePeriodic: "Option<(u32,u32)>",
            priority: "u8",
            call: "Call"
          },
          schedule_named_after: {
            id: "[u8;32]",
            after: "u32",
            maybePeriodic: "Option<(u32,u32)>",
            priority: "u8",
            call: "Call"
          }
        }
      },
      /**
       * Lookup136: pallet_utility::pallet::Call<T>
       **/
      PalletUtilityCall: {
        _enum: {
          batch: {
            calls: "Vec<Call>"
          },
          as_derivative: {
            index: "u16",
            call: "Call"
          },
          batch_all: {
            calls: "Vec<Call>"
          },
          dispatch_as: {
            asOrigin: "SeedRuntimeOriginCaller",
            call: "Call"
          },
          force_batch: {
            calls: "Vec<Call>"
          },
          with_weight: {
            call: "Call",
            weight: "SpWeightsWeightV2Weight"
          }
        }
      },
      /**
       * Lookup139: seed_runtime::OriginCaller
       **/
      SeedRuntimeOriginCaller: {
        _enum: {
          system: "FrameSupportDispatchRawOrigin",
          __Unused1: "Null",
          __Unused2: "Null",
          Void: "SpCoreVoid",
          __Unused4: "Null",
          __Unused5: "Null",
          __Unused6: "Null",
          __Unused7: "Null",
          __Unused8: "Null",
          __Unused9: "Null",
          __Unused10: "Null",
          __Unused11: "Null",
          __Unused12: "Null",
          __Unused13: "Null",
          __Unused14: "Null",
          __Unused15: "Null",
          __Unused16: "Null",
          __Unused17: "Null",
          __Unused18: "Null",
          __Unused19: "Null",
          __Unused20: "Null",
          __Unused21: "Null",
          __Unused22: "Null",
          __Unused23: "Null",
          __Unused24: "Null",
          __Unused25: "Null",
          Ethereum: "PalletEthereumRawOrigin",
          __Unused27: "Null",
          __Unused28: "Null",
          __Unused29: "Null",
          __Unused30: "Null",
          __Unused31: "Null",
          __Unused32: "Null",
          __Unused33: "Null",
          __Unused34: "Null",
          Xrpl: "SeedPrimitivesSignatureAccountId20"
        }
      },
      /**
       * Lookup140: frame_support::dispatch::RawOrigin<seed_primitives::signature::AccountId20>
       **/
      FrameSupportDispatchRawOrigin: {
        _enum: {
          Root: "Null",
          Signed: "SeedPrimitivesSignatureAccountId20",
          None: "Null"
        }
      },
      /**
       * Lookup141: pallet_ethereum::RawOrigin
       **/
      PalletEthereumRawOrigin: {
        _enum: {
          EthereumTransaction: "H160"
        }
      },
      /**
       * Lookup142: sp_core::Void
       **/
      SpCoreVoid: "Null",
      /**
       * Lookup143: pallet_recovery::pallet::Call<T>
       **/
      PalletRecoveryCall: {
        _enum: {
          as_recovered: {
            account: "SeedPrimitivesSignatureAccountId20",
            call: "Call"
          },
          set_recovered: {
            lost: "SeedPrimitivesSignatureAccountId20",
            rescuer: "SeedPrimitivesSignatureAccountId20"
          },
          create_recovery: {
            friends: "Vec<SeedPrimitivesSignatureAccountId20>",
            threshold: "u16",
            delayPeriod: "u32"
          },
          initiate_recovery: {
            account: "SeedPrimitivesSignatureAccountId20"
          },
          vouch_recovery: {
            lost: "SeedPrimitivesSignatureAccountId20",
            rescuer: "SeedPrimitivesSignatureAccountId20"
          },
          claim_recovery: {
            account: "SeedPrimitivesSignatureAccountId20"
          },
          close_recovery: {
            rescuer: "SeedPrimitivesSignatureAccountId20"
          },
          remove_recovery: "Null",
          cancel_recovered: {
            account: "SeedPrimitivesSignatureAccountId20"
          }
        }
      },
      /**
       * Lookup145: pallet_multisig::pallet::Call<T>
       **/
      PalletMultisigCall: {
        _enum: {
          as_multi_threshold_1: {
            otherSignatories: "Vec<SeedPrimitivesSignatureAccountId20>",
            call: "Call"
          },
          as_multi: {
            threshold: "u16",
            otherSignatories: "Vec<SeedPrimitivesSignatureAccountId20>",
            maybeTimepoint: "Option<PalletMultisigTimepoint>",
            call: "Call",
            maxWeight: "SpWeightsWeightV2Weight"
          },
          approve_as_multi: {
            threshold: "u16",
            otherSignatories: "Vec<SeedPrimitivesSignatureAccountId20>",
            maybeTimepoint: "Option<PalletMultisigTimepoint>",
            callHash: "[u8;32]",
            maxWeight: "SpWeightsWeightV2Weight"
          },
          cancel_as_multi: {
            threshold: "u16",
            otherSignatories: "Vec<SeedPrimitivesSignatureAccountId20>",
            timepoint: "PalletMultisigTimepoint",
            callHash: "[u8;32]"
          }
        }
      },
      /**
       * Lookup147: pallet_balances::pallet::Call<T, I>
       **/
      PalletBalancesCall: {
        _enum: {
          transfer_allow_death: {
            dest: "SeedPrimitivesSignatureAccountId20",
            value: "Compact<u128>"
          },
          set_balance_deprecated: {
            who: "SeedPrimitivesSignatureAccountId20",
            newFree: "Compact<u128>",
            oldReserved: "Compact<u128>"
          },
          force_transfer: {
            source: "SeedPrimitivesSignatureAccountId20",
            dest: "SeedPrimitivesSignatureAccountId20",
            value: "Compact<u128>"
          },
          transfer_keep_alive: {
            dest: "SeedPrimitivesSignatureAccountId20",
            value: "Compact<u128>"
          },
          transfer_all: {
            dest: "SeedPrimitivesSignatureAccountId20",
            keepAlive: "bool"
          },
          force_unreserve: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          upgrade_accounts: {
            who: "Vec<SeedPrimitivesSignatureAccountId20>"
          },
          transfer: {
            dest: "SeedPrimitivesSignatureAccountId20",
            value: "Compact<u128>"
          },
          force_set_balance: {
            who: "SeedPrimitivesSignatureAccountId20",
            newFree: "Compact<u128>"
          }
        }
      },
      /**
       * Lookup148: pallet_assets::pallet::Call<T, I>
       **/
      PalletAssetsCall: {
        _enum: {
          create: {
            id: "u32",
            admin: "SeedPrimitivesSignatureAccountId20",
            minBalance: "u128"
          },
          force_create: {
            id: "u32",
            owner: "SeedPrimitivesSignatureAccountId20",
            isSufficient: "bool",
            minBalance: "Compact<u128>"
          },
          start_destroy: {
            id: "u32"
          },
          destroy_accounts: {
            id: "u32"
          },
          destroy_approvals: {
            id: "u32"
          },
          finish_destroy: {
            id: "u32"
          },
          mint: {
            id: "u32",
            beneficiary: "SeedPrimitivesSignatureAccountId20",
            amount: "Compact<u128>"
          },
          burn: {
            id: "u32",
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "Compact<u128>"
          },
          transfer: {
            id: "u32",
            target: "SeedPrimitivesSignatureAccountId20",
            amount: "Compact<u128>"
          },
          transfer_keep_alive: {
            id: "u32",
            target: "SeedPrimitivesSignatureAccountId20",
            amount: "Compact<u128>"
          },
          force_transfer: {
            id: "u32",
            source: "SeedPrimitivesSignatureAccountId20",
            dest: "SeedPrimitivesSignatureAccountId20",
            amount: "Compact<u128>"
          },
          freeze: {
            id: "u32",
            who: "SeedPrimitivesSignatureAccountId20"
          },
          thaw: {
            id: "u32",
            who: "SeedPrimitivesSignatureAccountId20"
          },
          freeze_asset: {
            id: "u32"
          },
          thaw_asset: {
            id: "u32"
          },
          transfer_ownership: {
            id: "u32",
            owner: "SeedPrimitivesSignatureAccountId20"
          },
          set_team: {
            id: "u32",
            issuer: "SeedPrimitivesSignatureAccountId20",
            admin: "SeedPrimitivesSignatureAccountId20",
            freezer: "SeedPrimitivesSignatureAccountId20"
          },
          set_metadata: {
            id: "u32",
            name: "Bytes",
            symbol: "Bytes",
            decimals: "u8"
          },
          clear_metadata: {
            id: "u32"
          },
          force_set_metadata: {
            id: "u32",
            name: "Bytes",
            symbol: "Bytes",
            decimals: "u8",
            isFrozen: "bool"
          },
          force_clear_metadata: {
            id: "u32"
          },
          force_asset_status: {
            id: "u32",
            owner: "SeedPrimitivesSignatureAccountId20",
            issuer: "SeedPrimitivesSignatureAccountId20",
            admin: "SeedPrimitivesSignatureAccountId20",
            freezer: "SeedPrimitivesSignatureAccountId20",
            minBalance: "Compact<u128>",
            isSufficient: "bool",
            isFrozen: "bool"
          },
          approve_transfer: {
            id: "u32",
            delegate: "SeedPrimitivesSignatureAccountId20",
            amount: "Compact<u128>"
          },
          cancel_approval: {
            id: "u32",
            delegate: "SeedPrimitivesSignatureAccountId20"
          },
          force_cancel_approval: {
            id: "u32",
            owner: "SeedPrimitivesSignatureAccountId20",
            delegate: "SeedPrimitivesSignatureAccountId20"
          },
          transfer_approved: {
            id: "u32",
            owner: "SeedPrimitivesSignatureAccountId20",
            destination: "SeedPrimitivesSignatureAccountId20",
            amount: "Compact<u128>"
          },
          touch: {
            id: "u32"
          },
          refund: {
            id: "u32",
            allowBurn: "bool"
          },
          set_min_balance: {
            id: "u32",
            minBalance: "u128"
          },
          touch_other: {
            id: "u32",
            who: "SeedPrimitivesSignatureAccountId20"
          },
          refund_other: {
            id: "u32",
            who: "SeedPrimitivesSignatureAccountId20"
          },
          block: {
            id: "u32",
            who: "SeedPrimitivesSignatureAccountId20"
          }
        }
      },
      /**
       * Lookup149: pallet_assets_ext::pallet::Call<T>
       **/
      PalletAssetsExtCall: {
        _enum: {
          set_asset_deposit: {
            assetDeposit: "u128"
          },
          create_asset: {
            name: "Bytes",
            symbol: "Bytes",
            decimals: "u8",
            minBalance: "Option<u128>",
            owner: "Option<SeedPrimitivesSignatureAccountId20>"
          },
          mint: {
            assetId: "u32",
            beneficiary: "SeedPrimitivesSignatureAccountId20",
            amount: "Compact<u128>"
          },
          transfer: {
            assetId: "u32",
            destination: "SeedPrimitivesSignatureAccountId20",
            amount: "Compact<u128>",
            keepAlive: "bool"
          },
          burn_from: {
            assetId: "u32",
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "Compact<u128>"
          }
        }
      },
      /**
       * Lookup150: pallet_staking::pallet::pallet::Call<T>
       **/
      PalletStakingPalletCall: {
        _enum: {
          bond: {
            value: "Compact<u128>",
            payee: "PalletStakingRewardDestination"
          },
          bond_extra: {
            maxAdditional: "Compact<u128>"
          },
          unbond: {
            value: "Compact<u128>"
          },
          withdraw_unbonded: {
            numSlashingSpans: "u32"
          },
          validate: {
            prefs: "PalletStakingValidatorPrefs"
          },
          nominate: {
            targets: "Vec<SeedPrimitivesSignatureAccountId20>"
          },
          chill: "Null",
          set_payee: {
            payee: "PalletStakingRewardDestination"
          },
          set_controller: "Null",
          set_validator_count: {
            _alias: {
              new_: "new"
            },
            new_: "Compact<u32>"
          },
          increase_validator_count: {
            additional: "Compact<u32>"
          },
          scale_validator_count: {
            factor: "Percent"
          },
          force_no_eras: "Null",
          force_new_era: "Null",
          set_invulnerables: {
            invulnerables: "Vec<SeedPrimitivesSignatureAccountId20>"
          },
          force_unstake: {
            stash: "SeedPrimitivesSignatureAccountId20",
            numSlashingSpans: "u32"
          },
          force_new_era_always: "Null",
          cancel_deferred_slash: {
            era: "u32",
            slashIndices: "Vec<u32>"
          },
          payout_stakers: {
            validatorStash: "SeedPrimitivesSignatureAccountId20",
            era: "u32"
          },
          rebond: {
            value: "Compact<u128>"
          },
          reap_stash: {
            stash: "SeedPrimitivesSignatureAccountId20",
            numSlashingSpans: "u32"
          },
          kick: {
            who: "Vec<SeedPrimitivesSignatureAccountId20>"
          },
          set_staking_configs: {
            minNominatorBond: "PalletStakingPalletConfigOpU128",
            minValidatorBond: "PalletStakingPalletConfigOpU128",
            maxNominatorCount: "PalletStakingPalletConfigOpU32",
            maxValidatorCount: "PalletStakingPalletConfigOpU32",
            chillThreshold: "PalletStakingPalletConfigOpPercent",
            minCommission: "PalletStakingPalletConfigOpPerbill"
          },
          chill_other: {
            controller: "SeedPrimitivesSignatureAccountId20"
          },
          force_apply_min_commission: {
            validatorStash: "SeedPrimitivesSignatureAccountId20"
          },
          set_min_commission: {
            _alias: {
              new_: "new"
            },
            new_: "Perbill"
          }
        }
      },
      /**
       * Lookup151: pallet_staking::RewardDestination<seed_primitives::signature::AccountId20>
       **/
      PalletStakingRewardDestination: {
        _enum: {
          Staked: "Null",
          Stash: "Null",
          Controller: "Null",
          Account: "SeedPrimitivesSignatureAccountId20",
          None: "Null"
        }
      },
      /**
       * Lookup153: pallet_staking::pallet::pallet::ConfigOp<T>
       **/
      PalletStakingPalletConfigOpU128: {
        _enum: {
          Noop: "Null",
          Set: "u128",
          Remove: "Null"
        }
      },
      /**
       * Lookup154: pallet_staking::pallet::pallet::ConfigOp<T>
       **/
      PalletStakingPalletConfigOpU32: {
        _enum: {
          Noop: "Null",
          Set: "u32",
          Remove: "Null"
        }
      },
      /**
       * Lookup155: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
       **/
      PalletStakingPalletConfigOpPercent: {
        _enum: {
          Noop: "Null",
          Set: "Percent",
          Remove: "Null"
        }
      },
      /**
       * Lookup156: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
       **/
      PalletStakingPalletConfigOpPerbill: {
        _enum: {
          Noop: "Null",
          Set: "Perbill",
          Remove: "Null"
        }
      },
      /**
       * Lookup157: pallet_session::pallet::Call<T>
       **/
      PalletSessionCall: {
        _enum: {
          set_keys: {
            _alias: {
              keys_: "keys"
            },
            keys_: "SeedRuntimeSessionKeys",
            proof: "Bytes"
          },
          purge_keys: "Null"
        }
      },
      /**
       * Lookup158: seed_runtime::SessionKeys
       **/
      SeedRuntimeSessionKeys: {
        babe: "SpConsensusBabeAppPublic",
        imOnline: "PalletImOnlineSr25519AppSr25519Public",
        grandpa: "SpConsensusGrandpaAppPublic",
        ethy: "SeedPrimitivesEthyCryptoAppCryptoPublic"
      },
      /**
       * Lookup159: seed_primitives::ethy::crypto::app_crypto::Public
       **/
      SeedPrimitivesEthyCryptoAppCryptoPublic: "SpCoreEcdsaPublic",
      /**
       * Lookup160: pallet_grandpa::pallet::Call<T>
       **/
      PalletGrandpaCall: {
        _enum: {
          report_equivocation: {
            equivocationProof: "SpConsensusGrandpaEquivocationProof",
            keyOwnerProof: "SpSessionMembershipProof"
          },
          report_equivocation_unsigned: {
            equivocationProof: "SpConsensusGrandpaEquivocationProof",
            keyOwnerProof: "SpSessionMembershipProof"
          },
          note_stalled: {
            delay: "u32",
            bestFinalizedBlockNumber: "u32"
          }
        }
      },
      /**
       * Lookup161: sp_consensus_grandpa::EquivocationProof<primitive_types::H256, N>
       **/
      SpConsensusGrandpaEquivocationProof: {
        setId: "u64",
        equivocation: "SpConsensusGrandpaEquivocation"
      },
      /**
       * Lookup162: sp_consensus_grandpa::Equivocation<primitive_types::H256, N>
       **/
      SpConsensusGrandpaEquivocation: {
        _enum: {
          Prevote: "FinalityGrandpaEquivocationPrevote",
          Precommit: "FinalityGrandpaEquivocationPrecommit"
        }
      },
      /**
       * Lookup163: finality_grandpa::Equivocation<sp_consensus_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_consensus_grandpa::app::Signature>
       **/
      FinalityGrandpaEquivocationPrevote: {
        roundNumber: "u64",
        identity: "SpConsensusGrandpaAppPublic",
        first: "(FinalityGrandpaPrevote,SpConsensusGrandpaAppSignature)",
        second: "(FinalityGrandpaPrevote,SpConsensusGrandpaAppSignature)"
      },
      /**
       * Lookup164: finality_grandpa::Prevote<primitive_types::H256, N>
       **/
      FinalityGrandpaPrevote: {
        targetHash: "H256",
        targetNumber: "u32"
      },
      /**
       * Lookup165: sp_consensus_grandpa::app::Signature
       **/
      SpConsensusGrandpaAppSignature: "SpCoreEd25519Signature",
      /**
       * Lookup166: sp_core::ed25519::Signature
       **/
      SpCoreEd25519Signature: "[u8;64]",
      /**
       * Lookup168: finality_grandpa::Equivocation<sp_consensus_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_consensus_grandpa::app::Signature>
       **/
      FinalityGrandpaEquivocationPrecommit: {
        roundNumber: "u64",
        identity: "SpConsensusGrandpaAppPublic",
        first: "(FinalityGrandpaPrecommit,SpConsensusGrandpaAppSignature)",
        second: "(FinalityGrandpaPrecommit,SpConsensusGrandpaAppSignature)"
      },
      /**
       * Lookup169: finality_grandpa::Precommit<primitive_types::H256, N>
       **/
      FinalityGrandpaPrecommit: {
        targetHash: "H256",
        targetNumber: "u32"
      },
      /**
       * Lookup171: pallet_im_online::pallet::Call<T>
       **/
      PalletImOnlineCall: {
        _enum: {
          heartbeat: {
            heartbeat: "PalletImOnlineHeartbeat",
            signature: "PalletImOnlineSr25519AppSr25519Signature"
          }
        }
      },
      /**
       * Lookup172: pallet_im_online::Heartbeat<BlockNumber>
       **/
      PalletImOnlineHeartbeat: {
        blockNumber: "u32",
        sessionIndex: "u32",
        authorityIndex: "u32",
        validatorsLen: "u32"
      },
      /**
       * Lookup173: pallet_im_online::sr25519::app_sr25519::Signature
       **/
      PalletImOnlineSr25519AppSr25519Signature: "SpCoreSr25519Signature",
      /**
       * Lookup174: sp_core::sr25519::Signature
       **/
      SpCoreSr25519Signature: "[u8;64]",
      /**
       * Lookup175: pallet_sudo::pallet::Call<T>
       **/
      PalletSudoCall: {
        _enum: {
          sudo: {
            call: "Call"
          },
          sudo_unchecked_weight: {
            call: "Call",
            weight: "SpWeightsWeightV2Weight"
          },
          set_key: {
            _alias: {
              new_: "new"
            },
            new_: "SeedPrimitivesSignatureAccountId20"
          },
          sudo_as: {
            who: "SeedPrimitivesSignatureAccountId20",
            call: "Call"
          }
        }
      },
      /**
       * Lookup176: pallet_dex::pallet::Call<T>
       **/
      PalletDexCall: {
        _enum: {
          set_fee_to: {
            feeTo: "Option<SeedPrimitivesSignatureAccountId20>"
          },
          swap_with_exact_supply: {
            amountIn: "Compact<u128>",
            amountOutMin: "Compact<u128>",
            path: "Vec<u32>",
            to: "Option<SeedPrimitivesSignatureAccountId20>",
            deadline: "Option<u32>"
          },
          swap_with_exact_target: {
            amountOut: "Compact<u128>",
            amountInMax: "Compact<u128>",
            path: "Vec<u32>",
            to: "Option<SeedPrimitivesSignatureAccountId20>",
            deadline: "Option<u32>"
          },
          add_liquidity: {
            tokenA: "u32",
            tokenB: "u32",
            amountADesired: "Compact<u128>",
            amountBDesired: "Compact<u128>",
            amountAMin: "Compact<u128>",
            amountBMin: "Compact<u128>",
            to: "Option<SeedPrimitivesSignatureAccountId20>",
            deadline: "Option<u32>"
          },
          remove_liquidity: {
            tokenA: "u32",
            tokenB: "u32",
            liquidity: "Compact<u128>",
            amountAMin: "Compact<u128>",
            amountBMin: "Compact<u128>",
            to: "Option<SeedPrimitivesSignatureAccountId20>",
            deadline: "Option<u32>"
          },
          reenable_trading_pair: {
            tokenA: "u32",
            tokenB: "u32"
          },
          disable_trading_pair: {
            tokenA: "u32",
            tokenB: "u32"
          }
        }
      },
      /**
       * Lookup177: pallet_nft::pallet::Call<T>
       **/
      PalletNftCall: {
        _enum: {
          claim_unowned_collection: {
            collectionId: "u32",
            newOwner: "SeedPrimitivesSignatureAccountId20"
          },
          set_owner: {
            collectionId: "u32",
            newOwner: "SeedPrimitivesSignatureAccountId20"
          },
          set_max_issuance: {
            collectionId: "u32",
            maxIssuance: "u32"
          },
          set_base_uri: {
            collectionId: "u32",
            baseUri: "Bytes"
          },
          create_collection: {
            name: "Bytes",
            initialIssuance: "u32",
            maxIssuance: "Option<u32>",
            tokenOwner: "Option<SeedPrimitivesSignatureAccountId20>",
            metadataScheme: "Bytes",
            royaltiesSchedule: "Option<SeedPrimitivesNftRoyaltiesSchedule>",
            crossChainCompatibility: "SeedPrimitivesNftCrossChainCompatibility"
          },
          toggle_public_mint: {
            collectionId: "u32",
            enabled: "bool"
          },
          set_mint_fee: {
            collectionId: "u32",
            pricingDetails: "Option<(u32,u128)>"
          },
          mint: {
            collectionId: "u32",
            quantity: "u32",
            tokenOwner: "Option<SeedPrimitivesSignatureAccountId20>"
          },
          transfer: {
            collectionId: "u32",
            serialNumbers: "Vec<u32>",
            newOwner: "SeedPrimitivesSignatureAccountId20"
          },
          burn: {
            tokenId: "(u32,u32)"
          },
          set_name: {
            collectionId: "u32",
            name: "Bytes"
          },
          set_royalties_schedule: {
            collectionId: "u32",
            royaltiesSchedule: "SeedPrimitivesNftRoyaltiesSchedule"
          },
          set_utility_flags: {
            collectionId: "u32",
            utilityFlags: "SeedPalletCommonUtilsCollectionUtilityFlags"
          },
          set_token_transferable_flag: {
            tokenId: "(u32,u32)",
            transferable: "bool"
          },
          issue_soulbound: {
            collectionId: "u32",
            quantity: "u32",
            tokenOwner: "SeedPrimitivesSignatureAccountId20",
            burnAuthority: "SeedPalletCommonUtilsTokenBurnAuthority"
          },
          accept_soulbound_issuance: {
            collectionId: "u32",
            issuanceId: "u32"
          },
          set_additional_data: {
            tokenId: "(u32,u32)",
            additionalData: "Option<Bytes>"
          },
          mint_with_additional_data: {
            collectionId: "u32",
            tokenOwner: "Option<SeedPrimitivesSignatureAccountId20>",
            additionalData: "Bytes"
          }
        }
      },
      /**
       * Lookup181: pallet_sft::pallet::Call<T>
       **/
      PalletSftCall: {
        _enum: {
          create_collection: {
            collectionName: "Bytes",
            collectionOwner: "Option<SeedPrimitivesSignatureAccountId20>",
            metadataScheme: "Bytes",
            royaltiesSchedule: "Option<SeedPrimitivesNftRoyaltiesSchedule>"
          },
          create_token: {
            collectionId: "u32",
            tokenName: "Bytes",
            initialIssuance: "u128",
            maxIssuance: "Option<u128>",
            tokenOwner: "Option<SeedPrimitivesSignatureAccountId20>"
          },
          mint: {
            collectionId: "u32",
            serialNumbers: "Vec<(u32,u128)>",
            tokenOwner: "Option<SeedPrimitivesSignatureAccountId20>"
          },
          transfer: {
            collectionId: "u32",
            serialNumbers: "Vec<(u32,u128)>",
            newOwner: "SeedPrimitivesSignatureAccountId20"
          },
          burn: {
            collectionId: "u32",
            serialNumbers: "Vec<(u32,u128)>"
          },
          set_owner: {
            collectionId: "u32",
            newOwner: "SeedPrimitivesSignatureAccountId20"
          },
          set_max_issuance: {
            tokenId: "(u32,u32)",
            maxIssuance: "u128"
          },
          set_base_uri: {
            collectionId: "u32",
            metadataScheme: "Bytes"
          },
          set_name: {
            collectionId: "u32",
            collectionName: "Bytes"
          },
          set_royalties_schedule: {
            collectionId: "u32",
            royaltiesSchedule: "SeedPrimitivesNftRoyaltiesSchedule"
          },
          toggle_public_mint: {
            tokenId: "(u32,u32)",
            enabled: "bool"
          },
          set_mint_fee: {
            tokenId: "(u32,u32)",
            pricingDetails: "Option<(u32,u128)>"
          },
          set_utility_flags: {
            collectionId: "u32",
            utilityFlags: "SeedPalletCommonUtilsCollectionUtilityFlags"
          },
          set_token_name: {
            tokenId: "(u32,u32)",
            tokenName: "Bytes"
          },
          set_token_transferable_flag: {
            tokenId: "(u32,u32)",
            transferable: "bool"
          },
          set_token_burn_authority: {
            tokenId: "(u32,u32)",
            burnAuthority: "SeedPalletCommonUtilsTokenBurnAuthority"
          },
          burn_as_collection_owner: {
            tokenOwner: "SeedPrimitivesSignatureAccountId20",
            collectionId: "u32",
            serialNumbers: "Vec<(u32,u128)>"
          },
          issue_soulbound: {
            collectionId: "u32",
            serialNumbers: "Vec<(u32,u128)>",
            tokenOwner: "SeedPrimitivesSignatureAccountId20"
          },
          accept_soulbound_issuance: {
            collectionId: "u32",
            issuanceId: "u32"
          },
          set_additional_data: {
            tokenId: "(u32,u32)",
            additionalData: "Option<Bytes>"
          },
          create_token_with_additional_data: {
            collectionId: "u32",
            tokenName: "Bytes",
            initialIssuance: "u128",
            maxIssuance: "Option<u128>",
            tokenOwner: "Option<SeedPrimitivesSignatureAccountId20>",
            additionalData: "Bytes"
          }
        }
      },
      /**
       * Lookup184: pallet_xrpl_bridge::pallet::Call<T>
       **/
      PalletXrplBridgeCall: {
        _enum: {
          submit_transaction: {
            ledgerIndex: "u64",
            transactionHash: "H512",
            transaction: "PalletXrplBridgeXrplTxData",
            timestamp: "u64"
          },
          submit_challenge: {
            transactionHash: "H512"
          },
          set_payment_delay: {
            assetId: "u32",
            paymentDelay: "Option<(u128,u32)>"
          },
          withdraw_xrp: {
            amount: "u128",
            destination: "H160"
          },
          withdraw_xrp_with_destination_tag: {
            amount: "u128",
            destination: "H160",
            destinationTag: "u32"
          },
          add_relayer: {
            relayer: "SeedPrimitivesSignatureAccountId20"
          },
          remove_relayer: {
            relayer: "SeedPrimitivesSignatureAccountId20"
          },
          set_door_tx_fee: {
            doorType: "PalletXrplBridgeXrplDoorAccount",
            fee: "u64"
          },
          set_xrp_source_tag: {
            sourceTag: "u32"
          },
          set_door_address: {
            doorAccount: "PalletXrplBridgeXrplDoorAccount",
            doorAddress: "Option<H160>"
          },
          set_ticket_sequence_next_allocation: {
            doorAccount: "PalletXrplBridgeXrplDoorAccount",
            startTicketSequence: "u32",
            ticketBucketSize: "u32"
          },
          set_ticket_sequence_current_allocation: {
            doorAccount: "PalletXrplBridgeXrplDoorAccount",
            ticketSequence: "u32",
            startTicketSequence: "u32",
            ticketBucketSize: "u32"
          },
          reset_settled_xrpl_tx_data: {
            highestSettledLedgerIndex: "u32",
            submissionWindowWidth: "u32",
            highestPrunedLedgerIndex: "Option<u32>",
            settledTxData: "Option<Vec<(H512,u32,PalletXrplBridgeXrpTransaction,SeedPrimitivesSignatureAccountId20)>>"
          },
          prune_settled_ledger_index: {
            ledgerIndex: "u32"
          },
          set_xrpl_asset_map: {
            assetId: "u32",
            xrplCurrency: "Option<PalletXrplBridgeXrplCurrency>"
          },
          withdraw: {
            assetId: "u32",
            amount: "u128",
            destination: "H160",
            destinationTag: "Option<u32>"
          },
          generate_nft_accept_offer: {
            nftokenSellOffer: "[u8;32]"
          },
          withdraw_nft: {
            tokenId: "(u32,u32)",
            destination: "H160"
          }
        }
      },
      /**
       * Lookup185: pallet_xrpl_bridge::types::XrplTxData
       **/
      PalletXrplBridgeXrplTxData: {
        _enum: {
          Payment: {
            amount: "u128",
            address: "H160"
          },
          CurrencyPayment: {
            amount: "u128",
            address: "H160",
            currency: "PalletXrplBridgeXrplCurrency"
          },
          Xls20: {
            tokenId: "[u8;32]",
            address: "H160"
          }
        }
      },
      /**
       * Lookup191: pallet_xrpl_bridge::types::XrpTransaction
       **/
      PalletXrplBridgeXrpTransaction: {
        transactionHash: "H512",
        transaction: "PalletXrplBridgeXrplTxData",
        timestamp: "u64"
      },
      /**
       * Lookup193: pallet_xrpl::pallet::Call<T>
       **/
      PalletXrplCall: {
        _enum: {
          transact: {
            encodedMsg: "Bytes",
            signature: "Bytes",
            call: "Call"
          }
        }
      },
      /**
       * Lookup196: pallet_token_approvals::pallet::Call<T>
       **/
      PalletTokenApprovalsCall: {
        _enum: {
          erc721_approval: {
            operatorAccount: "SeedPrimitivesSignatureAccountId20",
            tokenId: "(u32,u32)"
          },
          erc721_remove_approval: {
            tokenId: "(u32,u32)"
          },
          erc20_approval: {
            spender: "SeedPrimitivesSignatureAccountId20",
            assetId: "u32",
            amount: "u128"
          },
          erc20_update_approval: {
            spender: "SeedPrimitivesSignatureAccountId20",
            assetId: "u32",
            amount: "u128"
          },
          erc721_approval_for_all: {
            operatorAccount: "SeedPrimitivesSignatureAccountId20",
            collectionUuid: "u32",
            approved: "bool"
          },
          erc1155_approval_for_all: {
            operatorAccount: "SeedPrimitivesSignatureAccountId20",
            collectionUuid: "u32",
            approved: "bool"
          }
        }
      },
      /**
       * Lookup197: pallet_echo::pallet::Call<T>
       **/
      PalletEchoCall: {
        _enum: {
          ping: {
            destination: "H160"
          }
        }
      },
      /**
       * Lookup198: pallet_marketplace::pallet::Call<T>
       **/
      PalletMarketplaceCall: {
        _enum: {
          register_marketplace: {
            marketplaceAccount: "Option<SeedPrimitivesSignatureAccountId20>",
            entitlement: "Permill"
          },
          sell_nft: {
            collectionId: "u32",
            serialNumbers: "Vec<u32>",
            buyer: "Option<SeedPrimitivesSignatureAccountId20>",
            paymentAsset: "u32",
            fixedPrice: "u128",
            duration: "Option<u32>",
            marketplaceId: "Option<u32>"
          },
          sell: {
            tokens: "PalletMarketplaceListingTokens",
            buyer: "Option<SeedPrimitivesSignatureAccountId20>",
            paymentAsset: "u32",
            fixedPrice: "u128",
            duration: "Option<u32>",
            marketplaceId: "Option<u32>"
          },
          update_fixed_price: {
            listingId: "u128",
            newPrice: "u128"
          },
          buy: {
            listingId: "u128"
          },
          buy_multi: {
            listingIds: "Vec<u128>"
          },
          auction_nft: {
            collectionId: "u32",
            serialNumbers: "Vec<u32>",
            paymentAsset: "u32",
            reservePrice: "u128",
            duration: "Option<u32>",
            marketplaceId: "Option<u32>"
          },
          auction: {
            tokens: "PalletMarketplaceListingTokens",
            paymentAsset: "u32",
            reservePrice: "u128",
            duration: "Option<u32>",
            marketplaceId: "Option<u32>"
          },
          bid: {
            listingId: "u128",
            amount: "u128"
          },
          cancel_sale: {
            listingId: "u128"
          },
          make_simple_offer: {
            tokenId: "(u32,u32)",
            amount: "u128",
            assetId: "u32",
            marketplaceId: "Option<u32>"
          },
          cancel_offer: {
            offerId: "u64"
          },
          accept_offer: {
            offerId: "u64"
          },
          set_fee_to: {
            feeTo: "Option<SeedPrimitivesSignatureAccountId20>"
          }
        }
      },
      /**
       * Lookup200: pallet_marketplace::types::ListingTokens<T>
       **/
      PalletMarketplaceListingTokens: {
        _enum: {
          Nft: "PalletMarketplaceNftListing",
          Sft: "PalletMarketplaceSftListing"
        }
      },
      /**
       * Lookup201: pallet_marketplace::types::NftListing<T>
       **/
      PalletMarketplaceNftListing: {
        collectionId: "u32",
        serialNumbers: "Vec<u32>"
      },
      /**
       * Lookup202: pallet_marketplace::types::SftListing<T>
       **/
      PalletMarketplaceSftListing: {
        collectionId: "u32",
        serialNumbers: "Vec<(u32,u128)>"
      },
      /**
       * Lookup205: pallet_preimage::pallet::Call<T>
       **/
      PalletPreimageCall: {
        _enum: {
          note_preimage: {
            bytes: "Bytes"
          },
          unnote_preimage: {
            _alias: {
              hash_: "hash"
            },
            hash_: "H256"
          },
          request_preimage: {
            _alias: {
              hash_: "hash"
            },
            hash_: "H256"
          },
          unrequest_preimage: {
            _alias: {
              hash_: "hash"
            },
            hash_: "H256"
          }
        }
      },
      /**
       * Lookup206: pallet_vortex_distribution::pallet::Call<T>
       **/
      PalletVortexDistributionCall: {
        _enum: {
          set_admin: {
            _alias: {
              new_: "new"
            },
            new_: "SeedPrimitivesSignatureAccountId20"
          },
          create_vtx_dist: "Null",
          disable_vtx_dist: {
            id: "u32"
          },
          set_fee_pot_asset_balances: {
            id: "u32",
            assetsBalances: "Vec<(u32,u128)>"
          },
          set_vtx_vault_asset_balances: {
            id: "u32",
            assetsBalances: "Vec<(u32,u128)>"
          },
          set_vtx_total_supply: {
            id: "u32",
            supply: "u128"
          },
          register_reward_points: {
            id: "u32",
            rewardPoints: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>"
          },
          register_work_points: {
            id: "u32",
            workPoints: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>"
          },
          set_consider_current_balance: {
            value: "bool"
          },
          set_disable_redeem: {
            value: "bool"
          },
          set_enable_manual_reward_input: {
            value: "bool"
          },
          set_asset_prices: {
            id: "u32",
            assetPrices: "Vec<(u32,u128)>"
          },
          trigger_vtx_distribution: {
            id: "u32"
          },
          set_vtx_vault_redeem_asset_list: {
            assetsList: "Vec<u32>"
          },
          start_vtx_dist: {
            id: "u32"
          },
          pay_unsigned: {
            id: "u32",
            currentBlock: "u32"
          },
          redeem_tokens_from_vault: {
            vortexTokenAmount: "u128"
          },
          register_rewards: {
            id: "u32",
            rewards: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>"
          }
        }
      },
      /**
       * Lookup210: pallet_partner_attribution::pallet::Call<T>
       **/
      PalletPartnerAttributionCall: {
        _enum: {
          register_partner_account: {
            account: "SeedPrimitivesSignatureAccountId20"
          },
          update_partner_account: {
            partnerId: "Compact<u128>",
            partnerAccount: "SeedPrimitivesSignatureAccountId20"
          },
          attribute_account: {
            partnerId: "u128"
          },
          upgrade_partner: {
            partnerId: "Compact<u128>",
            feePercentage: "Compact<Permill>"
          },
          create_futurepass_with_partner: {
            partnerId: "u128",
            account: "SeedPrimitivesSignatureAccountId20"
          }
        }
      },
      /**
       * Lookup212: pallet_fee_proxy::pallet::Call<T>
       **/
      PalletFeeProxyCall: {
        _enum: {
          call_with_fee_preferences: {
            paymentAsset: "u32",
            maxPayment: "u128",
            call: "Call"
          }
        }
      },
      /**
       * Lookup213: pallet_fee_control::pallet::Call<T>
       **/
      PalletFeeControlCall: {
        _enum: {
          set_evm_base_fee: {
            value: "U256"
          },
          set_weight_multiplier: {
            value: "Perbill"
          },
          set_length_multiplier: {
            value: "u128"
          }
        }
      },
      /**
       * Lookup216: pallet_xls20::pallet::Call<T>
       **/
      PalletXls20Call: {
        _enum: {
          set_relayer: {
            relayer: "SeedPrimitivesSignatureAccountId20"
          },
          set_xls20_fee: {
            newFee: "u128"
          },
          enable_xls20_compatibility: {
            collectionId: "u32"
          },
          re_request_xls20_mint: {
            collectionId: "u32",
            serialNumbers: "Vec<u32>"
          },
          fulfill_xls20_mint: {
            collectionId: "u32",
            tokenMappings: "Vec<(u32,[u8;32])>"
          },
          set_collection_mappings: {
            mappings: "Vec<(u32,PalletXls20Xls20Collection)>"
          }
        }
      },
      /**
       * Lookup223: pallet_xls20::types::Xls20Collection
       **/
      PalletXls20Xls20Collection: {
        issuerAddress: "H160",
        taxon: "u32"
      },
      /**
       * Lookup224: pallet_doughnut::pallet::Call<T>
       **/
      PalletDoughnutCall: {
        _enum: {
          transact: {
            call: "Call",
            doughnut: "Bytes",
            nonce: "u32",
            genesisHash: "H256",
            tip: "u64",
            signature: "Bytes"
          },
          revoke_doughnut: {
            doughnut: "Bytes",
            revoke: "bool"
          },
          revoke_holder: {
            holder: "SeedPrimitivesSignatureAccountId20",
            revoke: "bool"
          },
          update_whitelisted_holders: {
            holder: "SeedPrimitivesSignatureAccountId20",
            add: "bool"
          }
        }
      },
      /**
       * Lookup225: pallet_maintenance_mode::pallet::Call<T>
       **/
      PalletMaintenanceModeCall: {
        _enum: {
          enable_maintenance_mode: {
            enabled: "bool"
          },
          block_account: {
            account: "SeedPrimitivesSignatureAccountId20",
            blocked: "bool"
          },
          block_evm_target: {
            targetAddress: "H160",
            blocked: "bool"
          },
          block_call: {
            palletName: "Bytes",
            callName: "Bytes",
            blocked: "bool"
          },
          block_pallet: {
            palletName: "Bytes",
            blocked: "bool"
          }
        }
      },
      /**
       * Lookup227: pallet_crowdsale::pallet::Call<T>
       **/
      PalletCrowdsaleCall: {
        _enum: {
          initialize: {
            paymentAssetId: "u32",
            collectionId: "u32",
            softCapPrice: "u128",
            saleDuration: "u32",
            voucherName: "Option<Bytes>",
            voucherSymbol: "Option<Bytes>"
          },
          enable: {
            saleId: "u64"
          },
          participate: {
            saleId: "u64",
            amount: "u128"
          },
          distribute_crowdsale_rewards: "Null",
          claim_voucher: {
            saleId: "u64"
          },
          redeem_voucher: {
            saleId: "u64",
            quantity: "u32"
          },
          proxy_vault_call: {
            saleId: "u64",
            call: "Call"
          },
          try_force_distribution: {
            saleId: "u64"
          }
        }
      },
      /**
       * Lookup229: pallet_nfi::pallet::Call<T>
       **/
      PalletNfiCall: {
        _enum: {
          set_relayer: {
            relayer: "SeedPrimitivesSignatureAccountId20"
          },
          set_fee_to: {
            feeTo: "Option<SeedPrimitivesSignatureAccountId20>"
          },
          set_fee_details: {
            subType: "PalletNfiNfiSubType",
            feeDetails: "Option<PalletNfiFeeDetails>"
          },
          enable_nfi_for_trn_collection: {
            collectionId: "u32",
            subType: "PalletNfiNfiSubType"
          },
          manual_data_request: {
            tokenId: "PalletNfiMultiChainTokenId",
            subType: "PalletNfiNfiSubType"
          },
          submit_nfi_data: {
            tokenId: "PalletNfiMultiChainTokenId",
            dataItem: "PalletNfiNfiDataType"
          }
        }
      },
      /**
       * Lookup230: pallet_nfi::types::NFISubType
       **/
      PalletNfiNfiSubType: {
        _enum: ["NFI"]
      },
      /**
       * Lookup232: pallet_nfi::types::FeeDetails<seed_primitives::signature::AccountId20>
       **/
      PalletNfiFeeDetails: {
        assetId: "u32",
        amount: "u128",
        receiver: "SeedPrimitivesSignatureAccountId20"
      },
      /**
       * Lookup233: pallet_nfi::types::MultiChainTokenId<MaxByteLength>
       **/
      PalletNfiMultiChainTokenId: {
        chainId: "u64",
        collectionId: "PalletNfiGenericCollectionId",
        serialNumber: "PalletNfiGenericSerialNumber"
      },
      /**
       * Lookup234: pallet_nfi::types::GenericCollectionId<MaxByteLength>
       **/
      PalletNfiGenericCollectionId: {
        _enum: {
          U32: "u32",
          U64: "u64",
          U128: "u128",
          H160: "H160",
          H256: "H256",
          Bytes: "Bytes",
          Empty: "Null",
          U256: "U256"
        }
      },
      /**
       * Lookup236: pallet_nfi::types::GenericSerialNumber<MaxByteLength>
       **/
      PalletNfiGenericSerialNumber: {
        _enum: {
          U32: "u32",
          U64: "u64",
          U128: "u128",
          Bytes: "Bytes",
          U256: "U256"
        }
      },
      /**
       * Lookup237: pallet_nfi::types::NFIDataType<MaxDataLength>
       **/
      PalletNfiNfiDataType: {
        _enum: {
          NFI: "PalletNfiNfiMatrix"
        }
      },
      /**
       * Lookup238: pallet_nfi::types::NFIMatrix<MaxDataLength>
       **/
      PalletNfiNfiMatrix: {
        metadataLink: "Bytes",
        verificationHash: "H256"
      },
      /**
       * Lookup240: pallet_migration::pallet::Call<T>
       **/
      PalletMigrationCall: {
        _enum: {
          enable_migration: {
            enabled: "bool"
          },
          set_block_delay: {
            blockDelay: "Option<u32>"
          },
          set_block_limit: {
            blockLimit: "u32"
          }
        }
      },
      /**
       * Lookup241: pallet_sylo_data_verification::pallet::Call<T>
       **/
      PalletSyloDataVerificationCall: {
        _enum: {
          set_payment_asset: {
            paymentAsset: "u32"
          },
          set_sylo_resolver_method: {
            resolverMethod: "Bytes"
          },
          register_resolver: {
            identifier: "Bytes",
            serviceEndpoints: "Vec<Bytes>"
          },
          update_resolver: {
            identifier: "Bytes",
            serviceEndpoints: "Vec<Bytes>"
          },
          deregister_resolver: {
            identifier: "Bytes"
          },
          create_validation_record: {
            dataId: "Bytes",
            resolvers: "Vec<SeedPalletCommonSyloResolverId>",
            dataType: "Bytes",
            tags: "Vec<Bytes>",
            checksum: "H256"
          },
          add_validation_record_entry: {
            dataAuthor: "SeedPrimitivesSignatureAccountId20",
            dataId: "Bytes",
            checksum: "H256"
          },
          update_validation_record: {
            dataId: "Bytes",
            resolvers: "Option<Vec<SeedPalletCommonSyloResolverId>>",
            dataType: "Option<Bytes>",
            tags: "Option<Vec<Bytes>>"
          },
          delete_validation_record: {
            dataId: "Bytes"
          }
        }
      },
      /**
       * Lookup246: seed_pallet_common::sylo::ResolverId<StringLimit>
       **/
      SeedPalletCommonSyloResolverId: {
        method: "Bytes",
        identifier: "Bytes"
      },
      /**
       * Lookup252: pallet_liquidity_pools::pallet::Call<T>
       **/
      PalletLiquidityPoolsCall: {
        _enum: {
          create_pool: {
            rewardAssetId: "u32",
            stakedAssetId: "u32",
            interestRate: "u32",
            maxTokens: "u128",
            lockStartBlock: "u32",
            lockEndBlock: "u32"
          },
          set_pool_succession: {
            predecessorPoolId: "u32",
            successorPoolId: "u32"
          },
          set_pool_rollover: {
            id: "u32",
            shouldRollover: "bool"
          },
          close_pool: {
            id: "u32"
          },
          enter_pool: {
            poolId: "u32",
            amount: "u128"
          },
          exit_pool: {
            id: "u32"
          },
          claim_reward: {
            id: "u32"
          },
          rollover_unsigned: {
            id: "u32",
            currentBlock: "u32"
          }
        }
      },
      /**
       * Lookup253: pallet_sylo_data_permissions::pallet::Call<T>
       **/
      PalletSyloDataPermissionsCall: {
        _enum: {
          grant_data_permissions: {
            dataAuthor: "SeedPrimitivesSignatureAccountId20",
            grantee: "SeedPrimitivesSignatureAccountId20",
            dataIds: "Vec<Bytes>",
            permission: "SeedPalletCommonSyloDataPermission",
            expiry: "Option<u32>",
            irrevocable: "bool"
          },
          revoke_data_permission: {
            dataAuthor: "SeedPrimitivesSignatureAccountId20",
            permissionId: "u32",
            grantee: "SeedPrimitivesSignatureAccountId20",
            dataId: "Bytes"
          },
          grant_tagged_permissions: {
            grantee: "SeedPrimitivesSignatureAccountId20",
            permission: "SeedPalletCommonSyloDataPermission",
            tags: "Vec<Bytes>",
            expiry: "Option<u32>",
            irrevocable: "bool"
          },
          revoke_tagged_permission: {
            grantee: "SeedPrimitivesSignatureAccountId20",
            permissionId: "u32"
          },
          grant_permission_reference: {
            grantee: "SeedPrimitivesSignatureAccountId20",
            permissionRecordId: "Bytes"
          },
          revoke_permission_reference: {
            grantee: "SeedPrimitivesSignatureAccountId20"
          }
        }
      },
      /**
       * Lookup255: seed_pallet_common::sylo::DataPermission
       **/
      SeedPalletCommonSyloDataPermission: {
        _enum: ["VIEW", "MODIFY", "DISTRIBUTE"]
      },
      /**
       * Lookup256: pallet_sylo_action_permissions::pallet::Call<T>
       **/
      PalletSyloActionPermissionsCall: {
        _enum: {
          grant_transact_permission: {
            grantee: "SeedPrimitivesSignatureAccountId20",
            spender: "PalletSyloActionPermissionsSpender",
            spendingBalance: "Option<u128>",
            allowedCalls: "BTreeSet<(Bytes,Bytes)>",
            expiry: "Option<u32>"
          },
          update_transact_permission: {
            grantee: "SeedPrimitivesSignatureAccountId20",
            spender: "Option<PalletSyloActionPermissionsSpender>",
            spendingBalance: "Option<Option<u128>>",
            allowedCalls: "Option<BTreeSet<(Bytes,Bytes)>>",
            expiry: "Option<Option<u32>>"
          },
          revoke_transact_permission: {
            grantee: "SeedPrimitivesSignatureAccountId20"
          },
          accept_transact_permission: {
            permissionToken: "PalletSyloActionPermissionsTransactPermissionToken",
            tokenSignature: "PalletSyloActionPermissionsTransactPermissionTokenSignature"
          },
          transact: {
            grantor: "SeedPrimitivesSignatureAccountId20",
            call: "Call"
          }
        }
      },
      /**
       * Lookup257: pallet_sylo_action_permissions::types::Spender
       **/
      PalletSyloActionPermissionsSpender: {
        _enum: ["GRANTOR", "GRANTEE"]
      },
      /**
       * Lookup266: pallet_sylo_action_permissions::types::TransactPermissionToken<seed_primitives::signature::AccountId20, BlockNumber, MaxCallIds, StringLimit>
       **/
      PalletSyloActionPermissionsTransactPermissionToken: {
        grantee: "SeedPrimitivesSignatureAccountId20",
        useFuturepass: "bool",
        spender: "PalletSyloActionPermissionsSpender",
        spendingBalance: "Option<u128>",
        allowedCalls: "BTreeSet<(Bytes,Bytes)>",
        expiry: "Option<u32>",
        nonce: "U256"
      },
      /**
       * Lookup267: pallet_sylo_action_permissions::types::TransactPermissionTokenSignature<XrplMaxMessageLength, XrplMaxSignatureLength>
       **/
      PalletSyloActionPermissionsTransactPermissionTokenSignature: {
        _enum: {
          EIP191: "[u8;65]",
          XRPL: "PalletSyloActionPermissionsXrplTokenSignature"
        }
      },
      /**
       * Lookup269: pallet_sylo_action_permissions::types::XrplTokenSignature<XrplMaxMessageLength, XrplMaxSignatureLength>
       **/
      PalletSyloActionPermissionsXrplTokenSignature: {
        encodedMsg: "Bytes",
        signature: "Bytes"
      },
      /**
       * Lookup272: pallet_election_provider_multi_phase::pallet::Call<T>
       **/
      PalletElectionProviderMultiPhaseCall: {
        _enum: {
          submit_unsigned: {
            rawSolution: "PalletElectionProviderMultiPhaseRawSolution",
            witness: "PalletElectionProviderMultiPhaseSolutionOrSnapshotSize"
          },
          set_minimum_untrusted_score: {
            maybeNextScore: "Option<SpNposElectionsElectionScore>"
          },
          set_emergency_election_result: {
            supports: "Vec<(SeedPrimitivesSignatureAccountId20,SpNposElectionsSupport)>"
          },
          submit: {
            rawSolution: "PalletElectionProviderMultiPhaseRawSolution"
          },
          governance_fallback: {
            maybeMaxVoters: "Option<u32>",
            maybeMaxTargets: "Option<u32>"
          }
        }
      },
      /**
       * Lookup273: pallet_election_provider_multi_phase::RawSolution<seed_runtime::NposCompactSolution16>
       **/
      PalletElectionProviderMultiPhaseRawSolution: {
        solution: "SeedRuntimeNposCompactSolution16",
        score: "SpNposElectionsElectionScore",
        round: "u32"
      },
      /**
       * Lookup274: seed_runtime::NposCompactSolution16
       **/
      SeedRuntimeNposCompactSolution16: {
        votes1: "Vec<(Compact<u32>,Compact<u16>)>",
        votes2: "Vec<(Compact<u32>,(Compact<u16>,Compact<PerU16>),Compact<u16>)>",
        votes3: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);2],Compact<u16>)>",
        votes4: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);3],Compact<u16>)>",
        votes5: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);4],Compact<u16>)>",
        votes6: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);5],Compact<u16>)>",
        votes7: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);6],Compact<u16>)>",
        votes8: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);7],Compact<u16>)>",
        votes9: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);8],Compact<u16>)>",
        votes10: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);9],Compact<u16>)>",
        votes11: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);10],Compact<u16>)>",
        votes12: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);11],Compact<u16>)>",
        votes13: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);12],Compact<u16>)>",
        votes14: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);13],Compact<u16>)>",
        votes15: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);14],Compact<u16>)>",
        votes16: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);15],Compact<u16>)>"
      },
      /**
       * Lookup325: sp_npos_elections::ElectionScore
       **/
      SpNposElectionsElectionScore: {
        minimalStake: "u128",
        sumStake: "u128",
        sumStakeSquared: "u128"
      },
      /**
       * Lookup326: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
       **/
      PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
        voters: "Compact<u32>",
        targets: "Compact<u32>"
      },
      /**
       * Lookup330: sp_npos_elections::Support<seed_primitives::signature::AccountId20>
       **/
      SpNposElectionsSupport: {
        total: "u128",
        voters: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>"
      },
      /**
       * Lookup331: pallet_bags_list::pallet::Call<T, I>
       **/
      PalletBagsListCall: {
        _enum: {
          rebag: {
            dislocated: "SeedPrimitivesSignatureAccountId20"
          },
          put_in_front_of: {
            lighter: "SeedPrimitivesSignatureAccountId20"
          }
        }
      },
      /**
       * Lookup332: pallet_ethereum::pallet::Call<T>
       **/
      PalletEthereumCall: {
        _enum: {
          transact: {
            transaction: "EthereumTransactionTransactionV2"
          }
        }
      },
      /**
       * Lookup333: ethereum::transaction::TransactionV2
       **/
      EthereumTransactionTransactionV2: {
        _enum: {
          Legacy: "EthereumTransactionLegacyTransaction",
          EIP2930: "EthereumTransactionEip2930Transaction",
          EIP1559: "EthereumTransactionEip1559Transaction"
        }
      },
      /**
       * Lookup334: ethereum::transaction::LegacyTransaction
       **/
      EthereumTransactionLegacyTransaction: {
        nonce: "U256",
        gasPrice: "U256",
        gasLimit: "U256",
        action: "EthereumTransactionTransactionAction",
        value: "U256",
        input: "Bytes",
        signature: "EthereumTransactionTransactionSignature"
      },
      /**
       * Lookup335: ethereum::transaction::TransactionAction
       **/
      EthereumTransactionTransactionAction: {
        _enum: {
          Call: "H160",
          Create: "Null"
        }
      },
      /**
       * Lookup336: ethereum::transaction::TransactionSignature
       **/
      EthereumTransactionTransactionSignature: {
        v: "u64",
        r: "H256",
        s: "H256"
      },
      /**
       * Lookup338: ethereum::transaction::EIP2930Transaction
       **/
      EthereumTransactionEip2930Transaction: {
        chainId: "u64",
        nonce: "U256",
        gasPrice: "U256",
        gasLimit: "U256",
        action: "EthereumTransactionTransactionAction",
        value: "U256",
        input: "Bytes",
        accessList: "Vec<EthereumTransactionAccessListItem>",
        oddYParity: "bool",
        r: "H256",
        s: "H256"
      },
      /**
       * Lookup340: ethereum::transaction::AccessListItem
       **/
      EthereumTransactionAccessListItem: {
        address: "H160",
        storageKeys: "Vec<H256>"
      },
      /**
       * Lookup342: ethereum::transaction::EIP1559Transaction
       **/
      EthereumTransactionEip1559Transaction: {
        chainId: "u64",
        nonce: "U256",
        maxPriorityFeePerGas: "U256",
        maxFeePerGas: "U256",
        gasLimit: "U256",
        action: "EthereumTransactionTransactionAction",
        value: "U256",
        input: "Bytes",
        accessList: "Vec<EthereumTransactionAccessListItem>",
        oddYParity: "bool",
        r: "H256",
        s: "H256"
      },
      /**
       * Lookup343: pallet_evm::pallet::Call<T>
       **/
      PalletEvmCall: {
        _enum: {
          withdraw: {
            address: "H160",
            value: "u128"
          },
          call: {
            source: "H160",
            target: "H160",
            input: "Bytes",
            value: "U256",
            gasLimit: "u64",
            maxFeePerGas: "U256",
            maxPriorityFeePerGas: "Option<U256>",
            nonce: "Option<U256>",
            accessList: "Vec<(H160,Vec<H256>)>"
          },
          create: {
            source: "H160",
            init: "Bytes",
            value: "U256",
            gasLimit: "u64",
            maxFeePerGas: "U256",
            maxPriorityFeePerGas: "Option<U256>",
            nonce: "Option<U256>",
            accessList: "Vec<(H160,Vec<H256>)>"
          },
          create2: {
            source: "H160",
            init: "Bytes",
            salt: "H256",
            value: "U256",
            gasLimit: "u64",
            maxFeePerGas: "U256",
            maxPriorityFeePerGas: "Option<U256>",
            nonce: "Option<U256>",
            accessList: "Vec<(H160,Vec<H256>)>"
          }
        }
      },
      /**
       * Lookup347: pallet_evm_chain_id::pallet::Call<T>
       **/
      PalletEvmChainIdCall: {
        _enum: {
          set_chain_id: {
            chainId: "Compact<u64>"
          }
        }
      },
      /**
       * Lookup348: pallet_ethy::pallet::Call<T>
       **/
      PalletEthyCall: {
        _enum: {
          set_xrpl_door_signers: {
            newSigners: "Vec<(SeedPrimitivesEthyCryptoAppCryptoPublic,bool)>"
          },
          set_relayer: {
            relayer: "SeedPrimitivesSignatureAccountId20"
          },
          deposit_relayer_bond: "Null",
          withdraw_relayer_bond: "Null",
          set_event_block_confirmations: {
            confirmations: "u64"
          },
          set_delayed_event_proofs_per_block: {
            count: "u8"
          },
          set_challenge_period: {
            blocks: "u32"
          },
          set_contract_address: {
            contractAddress: "H160"
          },
          set_bridge_paused: {
            paused: "bool"
          },
          finalise_authorities_change: {
            nextNotaryKeys: "Vec<SeedPrimitivesEthyCryptoAppCryptoPublic>"
          },
          remove_missing_event_id: {
            eventIdRange: "(u64,u64)"
          },
          submit_missing_event: {
            txHash: "H256",
            event: "Bytes"
          },
          submit_event: {
            txHash: "H256",
            event: "Bytes"
          },
          submit_challenge: {
            eventClaimId: "u64"
          },
          submit_notarization: {
            payload: "PalletEthyNotarizationPayload",
            signature: "SeedPrimitivesEthyCryptoAppCryptoSignature"
          }
        }
      },
      /**
       * Lookup353: pallet_ethy::types::NotarizationPayload
       **/
      PalletEthyNotarizationPayload: {
        _enum: {
          Call: {
            callId: "u64",
            authorityIndex: "u16",
            result: "PalletEthyCheckedEthCallResult"
          },
          Event: {
            eventClaimId: "u64",
            authorityIndex: "u16",
            result: "PalletEthyEventClaimResult"
          }
        }
      },
      /**
       * Lookup354: pallet_ethy::types::CheckedEthCallResult
       **/
      PalletEthyCheckedEthCallResult: {
        _enum: {
          Ok: "([u8;32],u64,u64)",
          ReturnDataExceedsLimit: "Null",
          ReturnDataEmpty: "Null",
          DataProviderErr: "Null",
          InvalidEthBlock: "Null",
          InvalidTimestamp: "Null"
        }
      },
      /**
       * Lookup355: pallet_ethy::types::EventClaimResult
       **/
      PalletEthyEventClaimResult: {
        _enum: [
          "Valid",
          "DataProviderErr",
          "TxStatusFailed",
          "UnexpectedContractAddress",
          "NoTxLogs",
          "NotEnoughConfirmations",
          "UnexpectedData",
          "NoTxReceipt",
          "UnexpectedSource"
        ]
      },
      /**
       * Lookup356: seed_primitives::ethy::crypto::app_crypto::Signature
       **/
      SeedPrimitivesEthyCryptoAppCryptoSignature: "SpCoreEcdsaSignature",
      /**
       * Lookup357: sp_core::ecdsa::Signature
       **/
      SpCoreEcdsaSignature: "[u8;65]",
      /**
       * Lookup358: pallet_erc20_peg::pallet::Call<T>
       **/
      PalletErc20PegCall: {
        _enum: {
          activate_deposits: {
            activate: "bool"
          },
          activate_withdrawals: {
            activate: "bool"
          },
          activate_deposits_delay: {
            activate: "bool"
          },
          activate_withdrawals_delay: {
            activate: "bool"
          },
          withdraw: {
            assetId: "u32",
            amount: "u128",
            beneficiary: "H160"
          },
          set_erc20_peg_address: {
            ethAddress: "H160"
          },
          set_root_peg_address: {
            ethAddress: "H160"
          },
          set_erc20_meta: {
            details: "Vec<(H160,Bytes,u8)>"
          },
          set_erc20_asset_map: {
            assetId: "u32",
            ethAddress: "H160"
          },
          set_payment_delay: {
            assetId: "u32",
            minBalance: "u128",
            delay: "u32"
          },
          claim_delayed_payment: {
            blockNumber: "u32",
            paymentId: "u64"
          }
        }
      },
      /**
       * Lookup361: pallet_nft_peg::pallet::Call<T>
       **/
      PalletNftPegCall: {
        _enum: {
          set_contract_address: {
            contract: "H160"
          },
          withdraw: {
            collectionIds: "Vec<u32>",
            serialNumbers: "Vec<Vec<u32>>",
            destination: "H160"
          },
          reclaim_blocked_nfts: {
            blockedMintId: "u32",
            destination: "H160"
          }
        }
      },
      /**
       * Lookup366: pallet_proxy::pallet::Call<T>
       **/
      PalletProxyCall: {
        _enum: {
          proxy: {
            real: "SeedPrimitivesSignatureAccountId20",
            forceProxyType: "Option<SeedRuntimeImplsProxyType>",
            call: "Call"
          },
          add_proxy: {
            delegate: "SeedPrimitivesSignatureAccountId20",
            proxyType: "SeedRuntimeImplsProxyType",
            delay: "u32"
          },
          remove_proxy: {
            delegate: "SeedPrimitivesSignatureAccountId20",
            proxyType: "SeedRuntimeImplsProxyType",
            delay: "u32"
          },
          remove_proxies: "Null",
          create_pure: {
            proxyType: "SeedRuntimeImplsProxyType",
            delay: "u32",
            index: "u16"
          },
          kill_pure: {
            spawner: "SeedPrimitivesSignatureAccountId20",
            proxyType: "SeedRuntimeImplsProxyType",
            index: "u16",
            height: "Compact<u32>",
            extIndex: "Compact<u32>"
          },
          announce: {
            real: "SeedPrimitivesSignatureAccountId20",
            callHash: "H256"
          },
          remove_announcement: {
            real: "SeedPrimitivesSignatureAccountId20",
            callHash: "H256"
          },
          reject_announcement: {
            delegate: "SeedPrimitivesSignatureAccountId20",
            callHash: "H256"
          },
          proxy_announced: {
            delegate: "SeedPrimitivesSignatureAccountId20",
            real: "SeedPrimitivesSignatureAccountId20",
            forceProxyType: "Option<SeedRuntimeImplsProxyType>",
            call: "Call"
          }
        }
      },
      /**
       * Lookup368: seed_runtime::impls::ProxyType
       **/
      SeedRuntimeImplsProxyType: {
        _enum: [
          "NoPermission",
          "Any",
          "NonTransfer",
          "Governance",
          "Staking",
          "__Unused5",
          "__Unused6",
          "__Unused7",
          "__Unused8",
          "__Unused9",
          "__Unused10",
          "__Unused11",
          "__Unused12",
          "__Unused13",
          "__Unused14",
          "__Unused15",
          "__Unused16",
          "__Unused17",
          "__Unused18",
          "__Unused19",
          "__Unused20",
          "__Unused21",
          "__Unused22",
          "__Unused23",
          "__Unused24",
          "__Unused25",
          "__Unused26",
          "__Unused27",
          "__Unused28",
          "__Unused29",
          "__Unused30",
          "__Unused31",
          "__Unused32",
          "__Unused33",
          "__Unused34",
          "__Unused35",
          "__Unused36",
          "__Unused37",
          "__Unused38",
          "__Unused39",
          "__Unused40",
          "__Unused41",
          "__Unused42",
          "__Unused43",
          "__Unused44",
          "__Unused45",
          "__Unused46",
          "__Unused47",
          "__Unused48",
          "__Unused49",
          "__Unused50",
          "__Unused51",
          "__Unused52",
          "__Unused53",
          "__Unused54",
          "__Unused55",
          "__Unused56",
          "__Unused57",
          "__Unused58",
          "__Unused59",
          "__Unused60",
          "__Unused61",
          "__Unused62",
          "__Unused63",
          "__Unused64",
          "__Unused65",
          "__Unused66",
          "__Unused67",
          "__Unused68",
          "__Unused69",
          "__Unused70",
          "__Unused71",
          "__Unused72",
          "__Unused73",
          "__Unused74",
          "__Unused75",
          "__Unused76",
          "__Unused77",
          "__Unused78",
          "__Unused79",
          "__Unused80",
          "__Unused81",
          "__Unused82",
          "__Unused83",
          "__Unused84",
          "__Unused85",
          "__Unused86",
          "__Unused87",
          "__Unused88",
          "__Unused89",
          "__Unused90",
          "__Unused91",
          "__Unused92",
          "__Unused93",
          "__Unused94",
          "__Unused95",
          "__Unused96",
          "__Unused97",
          "__Unused98",
          "__Unused99",
          "__Unused100",
          "__Unused101",
          "__Unused102",
          "__Unused103",
          "__Unused104",
          "__Unused105",
          "__Unused106",
          "__Unused107",
          "__Unused108",
          "__Unused109",
          "__Unused110",
          "__Unused111",
          "__Unused112",
          "__Unused113",
          "__Unused114",
          "__Unused115",
          "__Unused116",
          "__Unused117",
          "__Unused118",
          "__Unused119",
          "__Unused120",
          "__Unused121",
          "__Unused122",
          "__Unused123",
          "__Unused124",
          "__Unused125",
          "__Unused126",
          "__Unused127",
          "__Unused128",
          "__Unused129",
          "__Unused130",
          "__Unused131",
          "__Unused132",
          "__Unused133",
          "__Unused134",
          "__Unused135",
          "__Unused136",
          "__Unused137",
          "__Unused138",
          "__Unused139",
          "__Unused140",
          "__Unused141",
          "__Unused142",
          "__Unused143",
          "__Unused144",
          "__Unused145",
          "__Unused146",
          "__Unused147",
          "__Unused148",
          "__Unused149",
          "__Unused150",
          "__Unused151",
          "__Unused152",
          "__Unused153",
          "__Unused154",
          "__Unused155",
          "__Unused156",
          "__Unused157",
          "__Unused158",
          "__Unused159",
          "__Unused160",
          "__Unused161",
          "__Unused162",
          "__Unused163",
          "__Unused164",
          "__Unused165",
          "__Unused166",
          "__Unused167",
          "__Unused168",
          "__Unused169",
          "__Unused170",
          "__Unused171",
          "__Unused172",
          "__Unused173",
          "__Unused174",
          "__Unused175",
          "__Unused176",
          "__Unused177",
          "__Unused178",
          "__Unused179",
          "__Unused180",
          "__Unused181",
          "__Unused182",
          "__Unused183",
          "__Unused184",
          "__Unused185",
          "__Unused186",
          "__Unused187",
          "__Unused188",
          "__Unused189",
          "__Unused190",
          "__Unused191",
          "__Unused192",
          "__Unused193",
          "__Unused194",
          "__Unused195",
          "__Unused196",
          "__Unused197",
          "__Unused198",
          "__Unused199",
          "__Unused200",
          "__Unused201",
          "__Unused202",
          "__Unused203",
          "__Unused204",
          "__Unused205",
          "__Unused206",
          "__Unused207",
          "__Unused208",
          "__Unused209",
          "__Unused210",
          "__Unused211",
          "__Unused212",
          "__Unused213",
          "__Unused214",
          "__Unused215",
          "__Unused216",
          "__Unused217",
          "__Unused218",
          "__Unused219",
          "__Unused220",
          "__Unused221",
          "__Unused222",
          "__Unused223",
          "__Unused224",
          "__Unused225",
          "__Unused226",
          "__Unused227",
          "__Unused228",
          "__Unused229",
          "__Unused230",
          "__Unused231",
          "__Unused232",
          "__Unused233",
          "__Unused234",
          "__Unused235",
          "__Unused236",
          "__Unused237",
          "__Unused238",
          "__Unused239",
          "__Unused240",
          "__Unused241",
          "__Unused242",
          "__Unused243",
          "__Unused244",
          "__Unused245",
          "__Unused246",
          "__Unused247",
          "__Unused248",
          "__Unused249",
          "__Unused250",
          "__Unused251",
          "__Unused252",
          "__Unused253",
          "__Unused254",
          "Owner"
        ]
      },
      /**
       * Lookup369: pallet_futurepass::pallet::Call<T>
       **/
      PalletFuturepassCall: {
        _enum: {
          create: {
            account: "SeedPrimitivesSignatureAccountId20"
          },
          register_delegate_with_signature: {
            futurepass: "SeedPrimitivesSignatureAccountId20",
            delegate: "SeedPrimitivesSignatureAccountId20",
            proxyType: "SeedRuntimeImplsProxyType",
            deadline: "u32",
            signature: "[u8;65]"
          },
          unregister_delegate: {
            futurepass: "SeedPrimitivesSignatureAccountId20",
            delegate: "SeedPrimitivesSignatureAccountId20"
          },
          transfer_futurepass: {
            currentOwner: "SeedPrimitivesSignatureAccountId20",
            newOwner: "Option<SeedPrimitivesSignatureAccountId20>"
          },
          proxy_extrinsic: {
            futurepass: "SeedPrimitivesSignatureAccountId20",
            call: "Call"
          }
        }
      },
      /**
       * Lookup370: pallet_echo::pallet::Event
       **/
      PalletEchoEvent: {
        _enum: {
          PingSent: {
            sessionId: "u64",
            source: "H160",
            destination: "H160",
            eventProofId: "u64"
          },
          PongReceived: {
            sessionId: "u64",
            source: "H160",
            data: "Bytes"
          },
          PingReceived: {
            sessionId: "u64",
            source: "H160",
            data: "Bytes"
          },
          PongSent: {
            sessionId: "u64",
            source: "H160",
            destination: "H160",
            eventProofId: "u64"
          }
        }
      },
      /**
       * Lookup371: pallet_marketplace::pallet::Event<T>
       **/
      PalletMarketplaceEvent: {
        _enum: {
          FixedPriceSaleList: {
            tokens: "PalletMarketplaceListingTokens",
            listingId: "u128",
            marketplaceId: "Option<u32>",
            price: "u128",
            paymentAsset: "u32",
            seller: "SeedPrimitivesSignatureAccountId20",
            close: "u32"
          },
          FixedPriceSaleComplete: {
            tokens: "PalletMarketplaceListingTokens",
            listingId: "u128",
            marketplaceId: "Option<u32>",
            price: "u128",
            paymentAsset: "u32",
            buyer: "SeedPrimitivesSignatureAccountId20",
            seller: "SeedPrimitivesSignatureAccountId20"
          },
          FixedPriceSaleClose: {
            tokens: "PalletMarketplaceListingTokens",
            listingId: "u128",
            marketplaceId: "Option<u32>",
            reason: "PalletMarketplaceFixedPriceClosureReason"
          },
          FixedPriceSalePriceUpdate: {
            tokens: "PalletMarketplaceListingTokens",
            listingId: "u128",
            marketplaceId: "Option<u32>",
            newPrice: "u128"
          },
          AuctionOpen: {
            tokens: "PalletMarketplaceListingTokens",
            listingId: "u128",
            marketplaceId: "Option<u32>",
            paymentAsset: "u32",
            reservePrice: "u128",
            seller: "SeedPrimitivesSignatureAccountId20",
            close: "u32"
          },
          AuctionSold: {
            tokens: "PalletMarketplaceListingTokens",
            listingId: "u128",
            marketplaceId: "Option<u32>",
            paymentAsset: "u32",
            hammerPrice: "u128",
            winner: "SeedPrimitivesSignatureAccountId20"
          },
          AuctionClose: {
            tokens: "PalletMarketplaceListingTokens",
            listingId: "u128",
            marketplaceId: "Option<u32>",
            reason: "PalletMarketplaceAuctionClosureReason"
          },
          Bid: {
            tokens: "PalletMarketplaceListingTokens",
            listingId: "u128",
            marketplaceId: "Option<u32>",
            amount: "u128",
            bidder: "SeedPrimitivesSignatureAccountId20"
          },
          MarketplaceRegister: {
            account: "SeedPrimitivesSignatureAccountId20",
            entitlement: "Permill",
            marketplaceId: "u32"
          },
          Offer: {
            offerId: "u64",
            amount: "u128",
            assetId: "u32",
            marketplaceId: "Option<u32>",
            buyer: "SeedPrimitivesSignatureAccountId20"
          },
          OfferCancel: {
            offerId: "u64",
            marketplaceId: "Option<u32>",
            tokenId: "(u32,u32)"
          },
          OfferAccept: {
            offerId: "u64",
            marketplaceId: "Option<u32>",
            tokenId: "(u32,u32)",
            amount: "u128",
            assetId: "u32"
          },
          FeeToSet: {
            account: "Option<SeedPrimitivesSignatureAccountId20>"
          }
        }
      },
      /**
       * Lookup372: pallet_marketplace::types::FixedPriceClosureReason
       **/
      PalletMarketplaceFixedPriceClosureReason: {
        _enum: ["VendorCancelled", "Expired", "OfferAccepted"]
      },
      /**
       * Lookup373: pallet_marketplace::types::AuctionClosureReason
       **/
      PalletMarketplaceAuctionClosureReason: {
        _enum: ["ExpiredNoBids", "SettlementFailed", "VendorCancelled"]
      },
      /**
       * Lookup374: pallet_preimage::pallet::Event<T>
       **/
      PalletPreimageEvent: {
        _enum: {
          Noted: {
            _alias: {
              hash_: "hash"
            },
            hash_: "H256"
          },
          Requested: {
            _alias: {
              hash_: "hash"
            },
            hash_: "H256"
          },
          Cleared: {
            _alias: {
              hash_: "hash"
            },
            hash_: "H256"
          }
        }
      },
      /**
       * Lookup375: pallet_vortex_distribution::pallet::Event<T>
       **/
      PalletVortexDistributionEvent: {
        _enum: {
          AdminAccountChanged: {
            oldKey: "Option<SeedPrimitivesSignatureAccountId20>",
            newKey: "SeedPrimitivesSignatureAccountId20"
          },
          VtxDistCreated: {
            id: "u32"
          },
          VtxDistDisabled: {
            id: "u32"
          },
          VtxDistDone: {
            id: "u32"
          },
          VtxDistPaidOut: {
            id: "u32",
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          VtxDistPayFailed: {
            id: "u32",
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          VtxDistStarted: {
            id: "u32"
          },
          SetFeePotAssetBalances: {
            id: "u32",
            assetsBalances: "Vec<(u32,u128)>"
          },
          SetVtxVaultAssetBalances: {
            id: "u32",
            assetsBalances: "Vec<(u32,u128)>"
          },
          SetAssetPrices: {
            id: "u32",
            assetPrices: "Vec<(u32,u128)>"
          },
          VtxWorkPointRegistered: {
            id: "u32",
            workPoints: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>"
          },
          VtxRewardPointRegistered: {
            id: "u32",
            rewardPoints: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>"
          },
          VtxDistributionTriggered: {
            id: "u32"
          },
          VtxDistributionTriggering: {
            id: "u32"
          },
          SetVtxTotalSupply: {
            id: "u32",
            totalSupply: "u128"
          },
          SetConsiderCurrentBalance: {
            value: "bool"
          },
          SetDisableRedeem: {
            value: "bool"
          },
          SetVtxVaultRedeemAssetList: {
            assetList: "Vec<u32>"
          },
          VtxRedeemed: {
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          SetEnableManualRewardInput: {
            value: "bool"
          },
          RewardRegistered: {
            id: "u32",
            rewards: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>"
          },
          PivotStringTooLong: {
            id: "u32"
          }
        }
      },
      /**
       * Lookup376: pallet_partner_attribution::pallet::Event<T>
       **/
      PalletPartnerAttributionEvent: {
        _enum: {
          PartnerRegistered: {
            partnerId: "u128",
            partner: "PalletPartnerAttributionPartnerInformation"
          },
          PartnerUpdated: {
            partnerId: "u128",
            account: "SeedPrimitivesSignatureAccountId20"
          },
          PartnerRemoved: {
            partnerId: "u128",
            account: "SeedPrimitivesSignatureAccountId20"
          },
          PartnerUpgraded: {
            partnerId: "u128",
            account: "SeedPrimitivesSignatureAccountId20",
            feePercentage: "Permill"
          },
          AccountAttributed: {
            partnerId: "u128",
            account: "SeedPrimitivesSignatureAccountId20"
          }
        }
      },
      /**
       * Lookup377: pallet_partner_attribution::PartnerInformation<seed_primitives::signature::AccountId20>
       **/
      PalletPartnerAttributionPartnerInformation: {
        owner: "SeedPrimitivesSignatureAccountId20",
        account: "SeedPrimitivesSignatureAccountId20",
        feePercentage: "Option<Permill>",
        accumulatedFees: "u128"
      },
      /**
       * Lookup379: pallet_fee_proxy::pallet::Event<T>
       **/
      PalletFeeProxyEvent: {
        _enum: {
          CallWithFeePreferences: {
            who: "SeedPrimitivesSignatureAccountId20",
            paymentAsset: "u32",
            maxPayment: "u128"
          }
        }
      },
      /**
       * Lookup380: pallet_fee_control::pallet::Event<T>
       **/
      PalletFeeControlEvent: {
        _enum: {
          EvmBaseFeeSet: {
            baseFee: "U256"
          },
          WeightMultiplierSet: {
            weightMultiplier: "Perbill"
          },
          LengthMultiplierSet: {
            lengthMultiplier: "u128"
          }
        }
      },
      /**
       * Lookup381: pallet_xls20::pallet::Event<T>
       **/
      PalletXls20Event: {
        _enum: {
          Xls20MintRequest: {
            collectionId: "u32",
            serialNumbers: "Vec<u32>",
            tokenUris: "Vec<Bytes>"
          },
          RelayerSet: {
            account: "SeedPrimitivesSignatureAccountId20"
          },
          Xls20MintFeeSet: {
            newFee: "u128"
          },
          Xls20MappingSet: {
            collectionId: "u32",
            mappings: "Vec<(u32,[u8;32])>"
          },
          Xls20CollectionMappingsSet: {
            mappings: "Vec<(u32,PalletXls20Xls20Collection)>"
          },
          Xls20CompatibilityEnabled: {
            collectionId: "u32"
          },
          Xls20MintFeePaid: {
            collectionOwner: "SeedPrimitivesSignatureAccountId20",
            totalFee: "u128"
          }
        }
      },
      /**
       * Lookup382: pallet_doughnut::pallet::Event<T>
       **/
      PalletDoughnutEvent: {
        _enum: {
          DoughnutCallExecuted: {
            doughnut: "Bytes",
            call: "Call",
            result: "Result<Null, SpRuntimeDispatchError>"
          },
          WhitelistedHoldersUpdated: {
            holder: "SeedPrimitivesSignatureAccountId20",
            enabled: "bool"
          },
          DoughnutRevokeStateUpdated: {
            doughnutHash: "[u8;32]",
            revoked: "bool"
          },
          HolderRevokeStateUpdated: {
            issuer: "SeedPrimitivesSignatureAccountId20",
            holder: "SeedPrimitivesSignatureAccountId20",
            revoked: "bool"
          }
        }
      },
      /**
       * Lookup383: pallet_maintenance_mode::pallet::Event<T>
       **/
      PalletMaintenanceModeEvent: {
        _enum: {
          MaintenanceModeActivated: {
            enabled: "bool"
          },
          AccountBlocked: {
            account: "SeedPrimitivesSignatureAccountId20",
            blocked: "bool"
          },
          EVMTargetBlocked: {
            targetAddress: "H160",
            blocked: "bool"
          },
          CallBlocked: {
            palletName: "Bytes",
            callName: "Bytes",
            blocked: "bool"
          },
          PalletBlocked: {
            palletName: "Bytes",
            blocked: "bool"
          }
        }
      },
      /**
       * Lookup384: pallet_crowdsale::pallet::Event<T>
       **/
      PalletCrowdsaleEvent: {
        _enum: {
          CrowdsaleCreated: {
            saleId: "u64",
            info: "PalletCrowdsaleSaleInformation"
          },
          VaultCallProxied: {
            saleId: "u64",
            who: "SeedPrimitivesSignatureAccountId20",
            vault: "SeedPrimitivesSignatureAccountId20",
            call: "Call"
          },
          CrowdsaleEnabled: {
            saleId: "u64",
            info: "PalletCrowdsaleSaleInformation",
            endBlock: "u32"
          },
          CrowdsaleParticipated: {
            saleId: "u64",
            who: "SeedPrimitivesSignatureAccountId20",
            asset: "u32",
            amount: "u128"
          },
          CrowdsaleNFTRedeemed: {
            saleId: "u64",
            who: "SeedPrimitivesSignatureAccountId20",
            collectionId: "u32",
            quantity: "u32"
          },
          CrowdsaleClosed: {
            saleId: "u64",
            info: "PalletCrowdsaleSaleInformation"
          },
          CrowdsaleManualDistribution: {
            saleId: "u64",
            info: "PalletCrowdsaleSaleInformation",
            who: "SeedPrimitivesSignatureAccountId20"
          },
          CrowdsaleVouchersClaimed: {
            saleId: "u64",
            who: "SeedPrimitivesSignatureAccountId20",
            amount: "u128"
          },
          CrowdsaleDistributionComplete: {
            saleId: "u64",
            vouchersDistributed: "u128"
          }
        }
      },
      /**
       * Lookup385: pallet_crowdsale::types::SaleInformation<seed_primitives::signature::AccountId20, BlockNumber>
       **/
      PalletCrowdsaleSaleInformation: {
        status: "PalletCrowdsaleSaleStatus",
        admin: "SeedPrimitivesSignatureAccountId20",
        vault: "SeedPrimitivesSignatureAccountId20",
        paymentAssetId: "u32",
        rewardCollectionId: "u32",
        softCapPrice: "u128",
        fundsRaised: "u128",
        participantCount: "u64",
        voucherAssetId: "u32",
        duration: "u32"
      },
      /**
       * Lookup386: pallet_crowdsale::types::SaleStatus<BlockNumber>
       **/
      PalletCrowdsaleSaleStatus: {
        _enum: {
          Pending: "u32",
          Enabled: "u32",
          Distributing: "(u32,u128)",
          Ended: "u32",
          DistributionFailed: "u32"
        }
      },
      /**
       * Lookup387: pallet_nfi::pallet::Event<T>
       **/
      PalletNfiEvent: {
        _enum: {
          DataRequestNew: {
            subType: "PalletNfiNfiSubType",
            caller: "SeedPrimitivesSignatureAccountId20",
            tokenId: "PalletNfiMultiChainTokenId"
          },
          DataRequestExisting: {
            subType: "PalletNfiNfiSubType",
            caller: "SeedPrimitivesSignatureAccountId20",
            tokenId: "PalletNfiMultiChainTokenId"
          },
          DataSet: {
            subType: "PalletNfiNfiSubType",
            tokenId: "PalletNfiMultiChainTokenId",
            dataItem: "PalletNfiNfiDataType"
          },
          DataRemoved: {
            tokenId: "PalletNfiMultiChainTokenId"
          },
          FeeDetailsSet: {
            subType: "PalletNfiNfiSubType",
            feeDetails: "Option<PalletNfiFeeDetails>"
          },
          FeeToSet: {
            account: "Option<SeedPrimitivesSignatureAccountId20>"
          },
          MintFeePaid: {
            subType: "PalletNfiNfiSubType",
            who: "SeedPrimitivesSignatureAccountId20",
            assetId: "u32",
            totalFee: "u128"
          },
          NfiEnabled: {
            subType: "PalletNfiNfiSubType",
            collectionId: "PalletNfiGenericCollectionId"
          },
          RelayerSet: {
            account: "SeedPrimitivesSignatureAccountId20"
          }
        }
      },
      /**
       * Lookup388: pallet_migration::pallet::Event
       **/
      PalletMigrationEvent: {
        _enum: {
          MigrationRuntimeUpgrade: "Null",
          MigrationEnabled: "Null",
          MigrationDisabled: "Null",
          MigrationComplete: {
            itemsMigrated: "u32"
          },
          MigrationSet: "Null",
          BlockDelaySet: {
            blockDelay: "Option<u32>"
          },
          BlockLimitSet: {
            blockLimit: "u32"
          }
        }
      },
      /**
       * Lookup389: pallet_sylo_data_verification::pallet::Event<T>
       **/
      PalletSyloDataVerificationEvent: {
        _enum: {
          PaymentAssetSet: {
            assetId: "u32"
          },
          SyloResolverMethodSet: {
            method: "Bytes"
          },
          ResolverRegistered: {
            id: "Bytes",
            controller: "SeedPrimitivesSignatureAccountId20",
            serviceEndpoints: "Vec<Bytes>"
          },
          ResolverUpdated: {
            id: "Bytes",
            controller: "SeedPrimitivesSignatureAccountId20",
            serviceEndpoints: "Vec<Bytes>"
          },
          ResolverDeregistered: {
            id: "Bytes"
          },
          ValidationRecordCreated: {
            author: "SeedPrimitivesSignatureAccountId20",
            id: "Bytes"
          },
          ValidationEntryAdded: {
            author: "SeedPrimitivesSignatureAccountId20",
            id: "Bytes",
            checksum: "H256"
          },
          ValidationRecordUpdated: {
            author: "SeedPrimitivesSignatureAccountId20",
            id: "Bytes",
            resolvers: "Option<Vec<Bytes>>",
            dataType: "Option<Bytes>",
            tags: "Option<Vec<Bytes>>"
          },
          ValidationRecordDeleted: {
            author: "SeedPrimitivesSignatureAccountId20",
            id: "Bytes"
          }
        }
      },
      /**
       * Lookup392: pallet_liquidity_pools::pallet::Event<T>
       **/
      PalletLiquidityPoolsEvent: {
        _enum: {
          PoolOpen: {
            poolId: "u32",
            rewardAssetId: "u32",
            stakedAssetId: "u32",
            interestRate: "u32",
            maxTokens: "u128",
            lockStartBlock: "u32",
            lockEndBlock: "u32"
          },
          PoolStarted: {
            poolId: "u32"
          },
          PoolRenewing: {
            poolId: "u32"
          },
          PoolMatured: {
            poolId: "u32"
          },
          PoolClosed: {
            poolId: "u32",
            rewardAssetAmount: "u128",
            stakedAssetAmount: "u128",
            receiver: "SeedPrimitivesSignatureAccountId20"
          },
          SetSuccession: {
            predecessorPoolId: "u32",
            successorPoolId: "u32"
          },
          UserInfoUpdated: {
            poolId: "u32",
            accountId: "SeedPrimitivesSignatureAccountId20",
            shouldRollover: "bool"
          },
          UserJoined: {
            accountId: "SeedPrimitivesSignatureAccountId20",
            poolId: "u32",
            amount: "u128"
          },
          UserExited: {
            accountId: "SeedPrimitivesSignatureAccountId20",
            poolId: "u32",
            amount: "u128"
          },
          UserRolledOver: {
            accountId: "SeedPrimitivesSignatureAccountId20",
            poolId: "u32",
            rolledToPoolId: "u32",
            amount: "u128"
          },
          RewardsClaimed: {
            accountId: "SeedPrimitivesSignatureAccountId20",
            poolId: "u32",
            amount: "u128"
          }
        }
      },
      /**
       * Lookup393: pallet_sylo_data_permissions::pallet::Event<T>
       **/
      PalletSyloDataPermissionsEvent: {
        _enum: {
          DataPermissionGranted: {
            dataAuthor: "SeedPrimitivesSignatureAccountId20",
            grantor: "SeedPrimitivesSignatureAccountId20",
            grantee: "SeedPrimitivesSignatureAccountId20",
            dataId: "Bytes",
            permission: "SeedPalletCommonSyloDataPermission",
            expiry: "Option<u32>",
            irrevocable: "bool"
          },
          DataPermissionRevoked: {
            revoker: "SeedPrimitivesSignatureAccountId20",
            grantee: "SeedPrimitivesSignatureAccountId20",
            permission: "SeedPalletCommonSyloDataPermission",
            dataId: "Bytes"
          },
          TaggedDataPermissionsGranted: {
            grantor: "SeedPrimitivesSignatureAccountId20",
            grantee: "SeedPrimitivesSignatureAccountId20",
            permission: "SeedPalletCommonSyloDataPermission",
            tags: "Vec<Bytes>",
            expiry: "Option<u32>",
            irrevocable: "bool"
          },
          TaggedDataPermissionsRevoked: {
            revoker: "SeedPrimitivesSignatureAccountId20",
            grantee: "SeedPrimitivesSignatureAccountId20",
            permission: "SeedPalletCommonSyloDataPermission",
            tags: "Vec<Bytes>"
          },
          PermissionReferenceGranted: {
            grantor: "SeedPrimitivesSignatureAccountId20",
            grantee: "SeedPrimitivesSignatureAccountId20",
            permissionRecordId: "Bytes"
          },
          PermissionReferenceRevoked: {
            grantor: "SeedPrimitivesSignatureAccountId20",
            grantee: "SeedPrimitivesSignatureAccountId20",
            permissionRecordId: "Bytes"
          },
          ExpiredDataPermissionRemoved: {
            dataAuthor: "SeedPrimitivesSignatureAccountId20",
            grantee: "SeedPrimitivesSignatureAccountId20",
            dataId: "Bytes",
            permissionId: "u32"
          },
          ExpiredTaggedPermissionRemoved: {
            dataAuthor: "SeedPrimitivesSignatureAccountId20",
            grantee: "SeedPrimitivesSignatureAccountId20",
            permissionId: "u32"
          }
        }
      },
      /**
       * Lookup394: pallet_sylo_action_permissions::pallet::Event<T>
       **/
      PalletSyloActionPermissionsEvent: {
        _enum: {
          TransactPermissionGranted: {
            grantor: "SeedPrimitivesSignatureAccountId20",
            grantee: "SeedPrimitivesSignatureAccountId20",
            spender: "PalletSyloActionPermissionsSpender",
            spendingBalance: "Option<u128>",
            allowedCalls: "Vec<(Bytes,Bytes)>",
            expiry: "Option<u32>"
          },
          PermissionTransactExecuted: {
            grantor: "SeedPrimitivesSignatureAccountId20",
            grantee: "SeedPrimitivesSignatureAccountId20"
          },
          TransactPermissionUpdated: {
            grantor: "SeedPrimitivesSignatureAccountId20",
            grantee: "SeedPrimitivesSignatureAccountId20",
            spender: "PalletSyloActionPermissionsSpender",
            spendingBalance: "Option<u128>",
            allowedCalls: "Vec<(Bytes,Bytes)>",
            expiry: "Option<u32>"
          },
          TransactPermissionRevoked: {
            grantor: "SeedPrimitivesSignatureAccountId20",
            grantee: "SeedPrimitivesSignatureAccountId20"
          },
          TransactPermissionAccepted: {
            grantor: "SeedPrimitivesSignatureAccountId20",
            grantee: "SeedPrimitivesSignatureAccountId20"
          }
        }
      },
      /**
       * Lookup395: pallet_election_provider_multi_phase::pallet::Event<T>
       **/
      PalletElectionProviderMultiPhaseEvent: {
        _enum: {
          SolutionStored: {
            compute: "PalletElectionProviderMultiPhaseElectionCompute",
            origin: "Option<SeedPrimitivesSignatureAccountId20>",
            prevEjected: "bool"
          },
          ElectionFinalized: {
            compute: "PalletElectionProviderMultiPhaseElectionCompute",
            score: "SpNposElectionsElectionScore"
          },
          ElectionFailed: "Null",
          Rewarded: {
            account: "SeedPrimitivesSignatureAccountId20",
            value: "u128"
          },
          Slashed: {
            account: "SeedPrimitivesSignatureAccountId20",
            value: "u128"
          },
          PhaseTransitioned: {
            from: "PalletElectionProviderMultiPhasePhase",
            to: "PalletElectionProviderMultiPhasePhase",
            round: "u32"
          }
        }
      },
      /**
       * Lookup396: pallet_election_provider_multi_phase::ElectionCompute
       **/
      PalletElectionProviderMultiPhaseElectionCompute: {
        _enum: ["OnChain", "Signed", "Unsigned", "Fallback", "Emergency"]
      },
      /**
       * Lookup397: pallet_election_provider_multi_phase::Phase<Bn>
       **/
      PalletElectionProviderMultiPhasePhase: {
        _enum: {
          Off: "Null",
          Signed: "Null",
          Unsigned: "(bool,u32)",
          Emergency: "Null"
        }
      },
      /**
       * Lookup399: pallet_bags_list::pallet::Event<T, I>
       **/
      PalletBagsListEvent: {
        _enum: {
          Rebagged: {
            who: "SeedPrimitivesSignatureAccountId20",
            from: "u64",
            to: "u64"
          },
          ScoreUpdated: {
            who: "SeedPrimitivesSignatureAccountId20",
            newScore: "u64"
          }
        }
      },
      /**
       * Lookup400: pallet_ethereum::pallet::Event
       **/
      PalletEthereumEvent: {
        _enum: {
          Executed: {
            from: "H160",
            to: "H160",
            transactionHash: "H256",
            exitReason: "EvmCoreErrorExitReason",
            extraData: "Bytes"
          }
        }
      },
      /**
       * Lookup401: evm_core::error::ExitReason
       **/
      EvmCoreErrorExitReason: {
        _enum: {
          Succeed: "EvmCoreErrorExitSucceed",
          Error: "EvmCoreErrorExitError",
          Revert: "EvmCoreErrorExitRevert",
          Fatal: "EvmCoreErrorExitFatal"
        }
      },
      /**
       * Lookup402: evm_core::error::ExitSucceed
       **/
      EvmCoreErrorExitSucceed: {
        _enum: ["Stopped", "Returned", "Suicided"]
      },
      /**
       * Lookup403: evm_core::error::ExitError
       **/
      EvmCoreErrorExitError: {
        _enum: {
          StackUnderflow: "Null",
          StackOverflow: "Null",
          InvalidJump: "Null",
          InvalidRange: "Null",
          DesignatedInvalid: "Null",
          CallTooDeep: "Null",
          CreateCollision: "Null",
          CreateContractLimit: "Null",
          OutOfOffset: "Null",
          OutOfGas: "Null",
          OutOfFund: "Null",
          PCUnderflow: "Null",
          CreateEmpty: "Null",
          Other: "Text",
          MaxNonce: "Null",
          InvalidCode: "u8"
        }
      },
      /**
       * Lookup406: evm_core::error::ExitRevert
       **/
      EvmCoreErrorExitRevert: {
        _enum: ["Reverted"]
      },
      /**
       * Lookup407: evm_core::error::ExitFatal
       **/
      EvmCoreErrorExitFatal: {
        _enum: {
          NotSupported: "Null",
          UnhandledInterrupt: "Null",
          CallErrorAsFatal: "EvmCoreErrorExitError",
          Other: "Text"
        }
      },
      /**
       * Lookup408: pallet_evm::pallet::Event<T>
       **/
      PalletEvmEvent: {
        _enum: {
          Log: {
            log: "EthereumLog"
          },
          Created: {
            address: "H160"
          },
          CreatedFailed: {
            address: "H160"
          },
          Executed: {
            address: "H160"
          },
          ExecutedFailed: {
            address: "H160"
          }
        }
      },
      /**
       * Lookup409: ethereum::log::Log
       **/
      EthereumLog: {
        address: "H160",
        topics: "Vec<H256>",
        data: "Bytes"
      },
      /**
       * Lookup410: pallet_evm_chain_id::pallet::Event<T>
       **/
      PalletEvmChainIdEvent: {
        _enum: {
          ChainIdSet: "u64"
        }
      },
      /**
       * Lookup411: pallet_ethy::pallet::Event<T>
       **/
      PalletEthyEvent: {
        _enum: {
          Verified: {
            eventClaimId: "u64"
          },
          Invalid: {
            eventClaimId: "u64"
          },
          AuthoritySetChange: {
            eventProofId: "u64",
            validatorSetId: "u64"
          },
          XrplAuthoritySetChange: {
            eventProofIds: "Vec<u64>",
            validatorSetId: "u64"
          },
          ProofDelayed: {
            eventProofId: "u64"
          },
          ProcessingOk: {
            eventClaimId: "u64"
          },
          ProcessingFailed: {
            eventClaimId: "u64",
            routerError: "SeedPalletCommonEventRouterError"
          },
          Challenged: {
            eventClaimId: "u64",
            challenger: "SeedPrimitivesSignatureAccountId20"
          },
          ProcessAtExtended: {
            eventClaimId: "u64",
            processAt: "u32"
          },
          EventSend: {
            eventProofId: "u64",
            signingRequest: "PalletEthyEthySigningRequest"
          },
          EventSubmit: {
            eventClaimId: "u64",
            eventClaim: "PalletEthyEventClaim",
            processAt: "u32"
          },
          RelayerBondDeposit: {
            relayer: "SeedPrimitivesSignatureAccountId20",
            bond: "u128"
          },
          RelayerBondWithdraw: {
            relayer: "SeedPrimitivesSignatureAccountId20",
            bond: "u128"
          },
          RelayerSet: {
            relayer: "Option<SeedPrimitivesSignatureAccountId20>"
          },
          XrplDoorSignersSet: {
            newSigners: "Vec<(SeedPrimitivesEthyCryptoAppCryptoPublic,bool)>"
          },
          FinaliseScheduleFail: {
            scheduledBlock: "u32"
          },
          SetContractAddress: {
            address: "H160"
          },
          XrplAuthoritySetChangeRequestFailed: {
            error: "SpRuntimeDispatchError"
          },
          EventBlockConfirmationsSet: {
            confirmations: "u64"
          },
          DelayedEventProofsPerBlockSet: {
            count: "u8"
          },
          ChallengePeriodSet: {
            period: "u32"
          },
          BridgeManualPause: {
            paused: "bool"
          },
          MissingEventIdsRemoved: {
            range: "(u64,u64)"
          }
        }
      },
      /**
       * Lookup413: seed_pallet_common::EventRouterError
       **/
      SeedPalletCommonEventRouterError: {
        _enum: {
          FailedProcessing: "SpRuntimeDispatchError",
          NoReceiver: "Null"
        }
      },
      /**
       * Lookup414: pallet_ethy::types::EthySigningRequest<MaxEthData>
       **/
      PalletEthyEthySigningRequest: {
        _enum: {
          Ethereum: "PalletEthyEthereumEventInfo",
          XrplTx: "Bytes"
        }
      },
      /**
       * Lookup415: pallet_ethy::types::EthereumEventInfo<MaxEthData>
       **/
      PalletEthyEthereumEventInfo: {
        source: "H160",
        destination: "H160",
        message: "Bytes",
        validatorSetId: "u64",
        eventProofId: "u64"
      },
      /**
       * Lookup417: pallet_ethy::types::EventClaim<MaxEthData>
       **/
      PalletEthyEventClaim: {
        txHash: "H256",
        source: "H160",
        destination: "H160",
        data: "Bytes"
      },
      /**
       * Lookup418: pallet_erc20_peg::pallet::Event<T>
       **/
      PalletErc20PegEvent: {
        _enum: {
          Erc20DepositDelayed: {
            paymentId: "u64",
            scheduledBlock: "u32",
            amount: "u128",
            beneficiary: "SeedPrimitivesSignatureAccountId20",
            assetId: "u32"
          },
          Erc20WithdrawalDelayed: {
            paymentId: "u64",
            scheduledBlock: "u32",
            amount: "u128",
            beneficiary: "H160",
            assetId: "u32",
            source: "SeedPrimitivesSignatureAccountId20"
          },
          Erc20DelayFailed: {
            paymentId: "u64",
            scheduledBlock: "u32",
            assetId: "u32",
            source: "SeedPrimitivesSignatureAccountId20"
          },
          DelayedErc20DepositFailed: {
            paymentId: "u64",
            beneficiary: "SeedPrimitivesSignatureAccountId20"
          },
          DelayedErc20WithdrawalFailed: {
            assetId: "u32",
            beneficiary: "H160"
          },
          Erc20Deposit: {
            assetId: "u32",
            amount: "u128",
            beneficiary: "SeedPrimitivesSignatureAccountId20"
          },
          Erc20Withdraw: {
            assetId: "u32",
            amount: "u128",
            beneficiary: "H160",
            source: "SeedPrimitivesSignatureAccountId20"
          },
          Erc20DepositFail: {
            source: "H160",
            abiData: "Bytes"
          },
          SetContractAddress: {
            address: "H160"
          },
          SetRootPegContract: {
            address: "H160"
          },
          PaymentDelaySet: {
            assetId: "u32",
            minBalance: "u128",
            delay: "u32"
          },
          NoAvailableDelayedPaymentIds: "Null",
          ActivateDepositDelay: {
            active: "bool"
          },
          ActivateWithdrawalDelay: {
            active: "bool"
          },
          ActivateDeposits: {
            active: "bool"
          },
          ActivateWithdrawals: {
            active: "bool"
          }
        }
      },
      /**
       * Lookup419: pallet_nft_peg::pallet::Event<T>
       **/
      PalletNftPegEvent: {
        _enum: {
          Erc721Deposit: {
            destination: "SeedPrimitivesSignatureAccountId20"
          },
          Erc721Mint: {
            collectionId: "u32",
            serialNumbers: "Vec<u32>",
            owner: "SeedPrimitivesSignatureAccountId20"
          },
          ERC721Blocked: {
            blockedMintId: "u32",
            destinationAddress: "SeedPrimitivesSignatureAccountId20",
            collectionId: "u32",
            serialNumbers: "Vec<u32>"
          },
          Erc721Withdraw: {
            origin: "SeedPrimitivesSignatureAccountId20",
            collectionIds: "Vec<u32>",
            serialNumbers: "Vec<Vec<u32>>",
            destination: "H160"
          },
          ContractAddressSet: {
            contract: "H160"
          }
        }
      },
      /**
       * Lookup421: pallet_proxy::pallet::Event<T>
       **/
      PalletProxyEvent: {
        _enum: {
          ProxyExecuted: {
            result: "Result<Null, SpRuntimeDispatchError>"
          },
          PureCreated: {
            pure: "SeedPrimitivesSignatureAccountId20",
            who: "SeedPrimitivesSignatureAccountId20",
            proxyType: "SeedRuntimeImplsProxyType",
            disambiguationIndex: "u16"
          },
          Announced: {
            real: "SeedPrimitivesSignatureAccountId20",
            proxy: "SeedPrimitivesSignatureAccountId20",
            callHash: "H256"
          },
          ProxyAdded: {
            delegator: "SeedPrimitivesSignatureAccountId20",
            delegatee: "SeedPrimitivesSignatureAccountId20",
            proxyType: "SeedRuntimeImplsProxyType",
            delay: "u32"
          },
          ProxyRemoved: {
            delegator: "SeedPrimitivesSignatureAccountId20",
            delegatee: "SeedPrimitivesSignatureAccountId20",
            proxyType: "SeedRuntimeImplsProxyType",
            delay: "u32"
          }
        }
      },
      /**
       * Lookup422: pallet_futurepass::pallet::Event<T>
       **/
      PalletFuturepassEvent: {
        _enum: {
          FuturepassCreated: {
            futurepass: "SeedPrimitivesSignatureAccountId20",
            delegate: "SeedPrimitivesSignatureAccountId20"
          },
          DelegateRegistered: {
            futurepass: "SeedPrimitivesSignatureAccountId20",
            delegate: "SeedPrimitivesSignatureAccountId20",
            proxyType: "SeedRuntimeImplsProxyType"
          },
          DelegateUnregistered: {
            futurepass: "SeedPrimitivesSignatureAccountId20",
            delegate: "SeedPrimitivesSignatureAccountId20"
          },
          FuturepassTransferred: {
            oldOwner: "SeedPrimitivesSignatureAccountId20",
            newOwner: "Option<SeedPrimitivesSignatureAccountId20>",
            futurepass: "SeedPrimitivesSignatureAccountId20"
          },
          ProxyExecuted: {
            delegate: "SeedPrimitivesSignatureAccountId20",
            result: "Result<Null, SpRuntimeDispatchError>"
          }
        }
      },
      /**
       * Lookup423: frame_system::Phase
       **/
      FrameSystemPhase: {
        _enum: {
          ApplyExtrinsic: "u32",
          Finalization: "Null",
          Initialization: "Null"
        }
      },
      /**
       * Lookup425: frame_system::LastRuntimeUpgradeInfo
       **/
      FrameSystemLastRuntimeUpgradeInfo: {
        specVersion: "Compact<u32>",
        specName: "Text"
      },
      /**
       * Lookup426: frame_system::limits::BlockWeights
       **/
      FrameSystemLimitsBlockWeights: {
        baseBlock: "SpWeightsWeightV2Weight",
        maxBlock: "SpWeightsWeightV2Weight",
        perClass: "FrameSupportDispatchPerDispatchClassWeightsPerClass"
      },
      /**
       * Lookup427: frame_support::dispatch::PerDispatchClass<frame_system::limits::WeightsPerClass>
       **/
      FrameSupportDispatchPerDispatchClassWeightsPerClass: {
        normal: "FrameSystemLimitsWeightsPerClass",
        operational: "FrameSystemLimitsWeightsPerClass",
        mandatory: "FrameSystemLimitsWeightsPerClass"
      },
      /**
       * Lookup428: frame_system::limits::WeightsPerClass
       **/
      FrameSystemLimitsWeightsPerClass: {
        baseExtrinsic: "SpWeightsWeightV2Weight",
        maxExtrinsic: "Option<SpWeightsWeightV2Weight>",
        maxTotal: "Option<SpWeightsWeightV2Weight>",
        reserved: "Option<SpWeightsWeightV2Weight>"
      },
      /**
       * Lookup430: frame_system::limits::BlockLength
       **/
      FrameSystemLimitsBlockLength: {
        max: "FrameSupportDispatchPerDispatchClassU32"
      },
      /**
       * Lookup431: frame_support::dispatch::PerDispatchClass<T>
       **/
      FrameSupportDispatchPerDispatchClassU32: {
        normal: "u32",
        operational: "u32",
        mandatory: "u32"
      },
      /**
       * Lookup432: sp_weights::RuntimeDbWeight
       **/
      SpWeightsRuntimeDbWeight: {
        read: "u64",
        write: "u64"
      },
      /**
       * Lookup433: sp_version::RuntimeVersion
       **/
      SpVersionRuntimeVersion: {
        specName: "Text",
        implName: "Text",
        authoringVersion: "u32",
        specVersion: "u32",
        implVersion: "u32",
        apis: "Vec<([u8;8],u32)>",
        transactionVersion: "u32",
        stateVersion: "u8"
      },
      /**
       * Lookup437: frame_system::pallet::Error<T>
       **/
      FrameSystemError: {
        _enum: [
          "InvalidSpecName",
          "SpecVersionNeedsToIncrease",
          "FailedToExtractRuntimeVersion",
          "NonDefaultComposite",
          "NonZeroRefCount",
          "CallFiltered"
        ]
      },
      /**
       * Lookup444: sp_consensus_babe::digests::PreDigest
       **/
      SpConsensusBabeDigestsPreDigest: {
        _enum: {
          __Unused0: "Null",
          Primary: "SpConsensusBabeDigestsPrimaryPreDigest",
          SecondaryPlain: "SpConsensusBabeDigestsSecondaryPlainPreDigest",
          SecondaryVRF: "SpConsensusBabeDigestsSecondaryVRFPreDigest"
        }
      },
      /**
       * Lookup445: sp_consensus_babe::digests::PrimaryPreDigest
       **/
      SpConsensusBabeDigestsPrimaryPreDigest: {
        authorityIndex: "u32",
        slot: "u64",
        vrfSignature: "SpCoreSr25519VrfVrfSignature"
      },
      /**
       * Lookup446: sp_core::sr25519::vrf::VrfSignature
       **/
      SpCoreSr25519VrfVrfSignature: {
        output: "[u8;32]",
        proof: "[u8;64]"
      },
      /**
       * Lookup447: sp_consensus_babe::digests::SecondaryPlainPreDigest
       **/
      SpConsensusBabeDigestsSecondaryPlainPreDigest: {
        authorityIndex: "u32",
        slot: "u64"
      },
      /**
       * Lookup448: sp_consensus_babe::digests::SecondaryVRFPreDigest
       **/
      SpConsensusBabeDigestsSecondaryVRFPreDigest: {
        authorityIndex: "u32",
        slot: "u64",
        vrfSignature: "SpCoreSr25519VrfVrfSignature"
      },
      /**
       * Lookup449: sp_consensus_babe::BabeEpochConfiguration
       **/
      SpConsensusBabeBabeEpochConfiguration: {
        c: "(u64,u64)",
        allowedSlots: "SpConsensusBabeAllowedSlots"
      },
      /**
       * Lookup453: pallet_babe::pallet::Error<T>
       **/
      PalletBabeError: {
        _enum: [
          "InvalidEquivocationProof",
          "InvalidKeyOwnershipProof",
          "DuplicateOffenceReport",
          "InvalidConfiguration"
        ]
      },
      /**
       * Lookup456: pallet_scheduler::Scheduled<Name, frame_support::traits::preimages::Bounded<seed_runtime::RuntimeCall>, BlockNumber, seed_runtime::OriginCaller, seed_primitives::signature::AccountId20>
       **/
      PalletSchedulerScheduled: {
        maybeId: "Option<[u8;32]>",
        priority: "u8",
        call: "FrameSupportPreimagesBounded",
        maybePeriodic: "Option<(u32,u32)>",
        origin: "SeedRuntimeOriginCaller"
      },
      /**
       * Lookup457: frame_support::traits::preimages::Bounded<seed_runtime::RuntimeCall>
       **/
      FrameSupportPreimagesBounded: {
        _enum: {
          Legacy: {
            _alias: {
              hash_: "hash"
            },
            hash_: "H256"
          },
          Inline: "Bytes",
          Lookup: {
            _alias: {
              hash_: "hash"
            },
            hash_: "H256",
            len: "u32"
          }
        }
      },
      /**
       * Lookup460: pallet_scheduler::pallet::Error<T>
       **/
      PalletSchedulerError: {
        _enum: [
          "FailedToSchedule",
          "NotFound",
          "TargetBlockNumberInPast",
          "RescheduleNoChange",
          "Named"
        ]
      },
      /**
       * Lookup461: pallet_utility::pallet::Error<T>
       **/
      PalletUtilityError: {
        _enum: ["TooManyCalls"]
      },
      /**
       * Lookup462: pallet_recovery::RecoveryConfig<BlockNumber, Balance, bounded_collections::bounded_vec::BoundedVec<seed_primitives::signature::AccountId20, S>>
       **/
      PalletRecoveryRecoveryConfig: {
        delayPeriod: "u32",
        deposit: "u128",
        friends: "Vec<SeedPrimitivesSignatureAccountId20>",
        threshold: "u16"
      },
      /**
       * Lookup465: pallet_recovery::ActiveRecovery<BlockNumber, Balance, bounded_collections::bounded_vec::BoundedVec<seed_primitives::signature::AccountId20, S>>
       **/
      PalletRecoveryActiveRecovery: {
        created: "u32",
        deposit: "u128",
        friends: "Vec<SeedPrimitivesSignatureAccountId20>"
      },
      /**
       * Lookup466: pallet_recovery::pallet::Error<T>
       **/
      PalletRecoveryError: {
        _enum: [
          "NotAllowed",
          "ZeroThreshold",
          "NotEnoughFriends",
          "MaxFriends",
          "NotSorted",
          "NotRecoverable",
          "AlreadyRecoverable",
          "AlreadyStarted",
          "NotStarted",
          "NotFriend",
          "DelayPeriod",
          "AlreadyVouched",
          "Threshold",
          "StillActive",
          "AlreadyProxy",
          "BadState"
        ]
      },
      /**
       * Lookup468: pallet_multisig::Multisig<BlockNumber, Balance, seed_primitives::signature::AccountId20, MaxApprovals>
       **/
      PalletMultisigMultisig: {
        when: "PalletMultisigTimepoint",
        deposit: "u128",
        depositor: "SeedPrimitivesSignatureAccountId20",
        approvals: "Vec<SeedPrimitivesSignatureAccountId20>"
      },
      /**
       * Lookup470: pallet_multisig::pallet::Error<T>
       **/
      PalletMultisigError: {
        _enum: [
          "MinimumThreshold",
          "AlreadyApproved",
          "NoApprovalsNeeded",
          "TooFewSignatories",
          "TooManySignatories",
          "SignatoriesOutOfOrder",
          "SenderInSignatories",
          "NotFound",
          "NotOwner",
          "NoTimepoint",
          "WrongTimepoint",
          "UnexpectedTimepoint",
          "MaxWeightTooLow",
          "AlreadyStored"
        ]
      },
      /**
       * Lookup472: pallet_balances::types::BalanceLock<Balance>
       **/
      PalletBalancesBalanceLock: {
        id: "[u8;8]",
        amount: "u128",
        reasons: "PalletBalancesReasons"
      },
      /**
       * Lookup473: pallet_balances::types::Reasons
       **/
      PalletBalancesReasons: {
        _enum: ["Fee", "Misc", "All"]
      },
      /**
       * Lookup476: pallet_balances::types::ReserveData<ReserveIdentifier, Balance>
       **/
      PalletBalancesReserveData: {
        id: "[u8;8]",
        amount: "u128"
      },
      /**
       * Lookup479: pallet_balances::types::IdAmount<Id, Balance>
       **/
      PalletBalancesIdAmount: {
        id: "Null",
        amount: "u128"
      },
      /**
       * Lookup481: pallet_balances::pallet::Error<T, I>
       **/
      PalletBalancesError: {
        _enum: [
          "VestingBalance",
          "LiquidityRestrictions",
          "InsufficientBalance",
          "ExistentialDeposit",
          "Expendability",
          "ExistingVestingSchedule",
          "DeadAccount",
          "TooManyReserves",
          "TooManyHolds",
          "TooManyFreezes"
        ]
      },
      /**
       * Lookup482: pallet_assets::types::AssetDetails<Balance, seed_primitives::signature::AccountId20, DepositBalance>
       **/
      PalletAssetsAssetDetails: {
        owner: "SeedPrimitivesSignatureAccountId20",
        issuer: "SeedPrimitivesSignatureAccountId20",
        admin: "SeedPrimitivesSignatureAccountId20",
        freezer: "SeedPrimitivesSignatureAccountId20",
        supply: "u128",
        deposit: "u128",
        minBalance: "u128",
        isSufficient: "bool",
        accounts: "u32",
        sufficients: "u32",
        approvals: "u32",
        status: "PalletAssetsAssetStatus"
      },
      /**
       * Lookup483: pallet_assets::types::AssetStatus
       **/
      PalletAssetsAssetStatus: {
        _enum: ["Live", "Frozen", "Destroying"]
      },
      /**
       * Lookup485: pallet_assets::types::AssetAccount<Balance, DepositBalance, Extra, seed_primitives::signature::AccountId20>
       **/
      PalletAssetsAssetAccount: {
        balance: "u128",
        status: "PalletAssetsAccountStatus",
        reason: "PalletAssetsExistenceReason",
        extra: "Null"
      },
      /**
       * Lookup486: pallet_assets::types::AccountStatus
       **/
      PalletAssetsAccountStatus: {
        _enum: ["Liquid", "Frozen", "Blocked"]
      },
      /**
       * Lookup487: pallet_assets::types::ExistenceReason<Balance, seed_primitives::signature::AccountId20>
       **/
      PalletAssetsExistenceReason: {
        _enum: {
          Consumer: "Null",
          Sufficient: "Null",
          DepositHeld: "u128",
          DepositRefunded: "Null",
          DepositFrom: "(SeedPrimitivesSignatureAccountId20,u128)"
        }
      },
      /**
       * Lookup489: pallet_assets::types::Approval<Balance, DepositBalance>
       **/
      PalletAssetsApproval: {
        amount: "u128",
        deposit: "u128"
      },
      /**
       * Lookup490: pallet_assets::types::AssetMetadata<DepositBalance, bounded_collections::bounded_vec::BoundedVec<T, S>>
       **/
      PalletAssetsAssetMetadata: {
        deposit: "u128",
        name: "Bytes",
        symbol: "Bytes",
        decimals: "u8",
        isFrozen: "bool"
      },
      /**
       * Lookup491: pallet_assets::pallet::Error<T, I>
       **/
      PalletAssetsError: {
        _enum: [
          "BalanceLow",
          "NoAccount",
          "NoPermission",
          "Unknown",
          "Frozen",
          "InUse",
          "BadWitness",
          "MinBalanceZero",
          "UnavailableConsumer",
          "BadMetadata",
          "Unapproved",
          "WouldDie",
          "AlreadyExists",
          "NoDeposit",
          "WouldBurn",
          "LiveAsset",
          "AssetNotLive",
          "IncorrectStatus",
          "NotFrozen",
          "CallbackFailed"
        ]
      },
      /**
       * Lookup495: frame_support::PalletId
       **/
      FrameSupportPalletId: "[u8;8]",
      /**
       * Lookup496: pallet_assets_ext::pallet::Error<T>
       **/
      PalletAssetsExtError: {
        _enum: [
          "DecimalsTooHigh",
          "NoAvailableIds",
          "NoPermission",
          "BalanceLow",
          "NoAccount",
          "Overflow",
          "MaxHolds",
          "CreateAssetFailed"
        ]
      },
      /**
       * Lookup497: pallet_staking::StakingLedger<T>
       **/
      PalletStakingStakingLedger: {
        stash: "SeedPrimitivesSignatureAccountId20",
        total: "Compact<u128>",
        active: "Compact<u128>",
        unlocking: "Vec<PalletStakingUnlockChunk>",
        claimedRewards: "Vec<u32>"
      },
      /**
       * Lookup499: pallet_staking::UnlockChunk<Balance>
       **/
      PalletStakingUnlockChunk: {
        value: "Compact<u128>",
        era: "Compact<u32>"
      },
      /**
       * Lookup502: pallet_staking::Nominations<T>
       **/
      PalletStakingNominations: {
        targets: "Vec<SeedPrimitivesSignatureAccountId20>",
        submittedIn: "u32",
        suppressed: "bool"
      },
      /**
       * Lookup504: pallet_staking::ActiveEraInfo
       **/
      PalletStakingActiveEraInfo: {
        index: "u32",
        start: "Option<u64>"
      },
      /**
       * Lookup506: pallet_staking::EraRewardPoints<seed_primitives::signature::AccountId20>
       **/
      PalletStakingEraRewardPoints: {
        total: "u32",
        individual: "BTreeMap<SeedPrimitivesSignatureAccountId20, u32>"
      },
      /**
       * Lookup511: pallet_staking::UnappliedSlash<seed_primitives::signature::AccountId20, Balance>
       **/
      PalletStakingUnappliedSlash: {
        validator: "SeedPrimitivesSignatureAccountId20",
        own: "u128",
        others: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>",
        reporters: "Vec<SeedPrimitivesSignatureAccountId20>",
        payout: "u128"
      },
      /**
       * Lookup513: pallet_staking::slashing::SlashingSpans
       **/
      PalletStakingSlashingSlashingSpans: {
        spanIndex: "u32",
        lastStart: "u32",
        lastNonzeroSlash: "u32",
        prior: "Vec<u32>"
      },
      /**
       * Lookup514: pallet_staking::slashing::SpanRecord<Balance>
       **/
      PalletStakingSlashingSpanRecord: {
        slashed: "u128",
        paidOut: "u128"
      },
      /**
       * Lookup517: pallet_staking::pallet::pallet::Error<T>
       **/
      PalletStakingPalletError: {
        _enum: [
          "NotController",
          "NotStash",
          "AlreadyBonded",
          "AlreadyPaired",
          "EmptyTargets",
          "DuplicateIndex",
          "InvalidSlashIndex",
          "InsufficientBond",
          "NoMoreChunks",
          "NoUnlockChunk",
          "FundedTarget",
          "InvalidEraToReward",
          "InvalidNumberOfNominations",
          "NotSortedAndUnique",
          "AlreadyClaimed",
          "IncorrectHistoryDepth",
          "IncorrectSlashingSpans",
          "BadState",
          "TooManyTargets",
          "BadTarget",
          "CannotChillOther",
          "TooManyNominators",
          "TooManyValidators",
          "CommissionTooLow",
          "BoundNotMet"
        ]
      },
      /**
       * Lookup518: sp_staking::offence::OffenceDetails<seed_primitives::signature::AccountId20, Offender>
       **/
      SpStakingOffenceOffenceDetails: {
        offender: "(SeedPrimitivesSignatureAccountId20,PalletStakingExposure)",
        reporters: "Vec<SeedPrimitivesSignatureAccountId20>"
      },
      /**
       * Lookup523: sp_core::crypto::KeyTypeId
       **/
      SpCoreCryptoKeyTypeId: "[u8;4]",
      /**
       * Lookup524: pallet_session::pallet::Error<T>
       **/
      PalletSessionError: {
        _enum: ["InvalidProof", "NoAssociatedValidatorId", "DuplicatedKey", "NoKeys", "NoAccount"]
      },
      /**
       * Lookup525: pallet_grandpa::StoredState<N>
       **/
      PalletGrandpaStoredState: {
        _enum: {
          Live: "Null",
          PendingPause: {
            scheduledAt: "u32",
            delay: "u32"
          },
          Paused: "Null",
          PendingResume: {
            scheduledAt: "u32",
            delay: "u32"
          }
        }
      },
      /**
       * Lookup526: pallet_grandpa::StoredPendingChange<N, Limit>
       **/
      PalletGrandpaStoredPendingChange: {
        scheduledAt: "u32",
        delay: "u32",
        nextAuthorities: "Vec<(SpConsensusGrandpaAppPublic,u64)>",
        forced: "Option<u32>"
      },
      /**
       * Lookup528: pallet_grandpa::pallet::Error<T>
       **/
      PalletGrandpaError: {
        _enum: [
          "PauseFailed",
          "ResumeFailed",
          "ChangePending",
          "TooSoon",
          "InvalidKeyOwnershipProof",
          "InvalidEquivocationProof",
          "DuplicateOffenceReport"
        ]
      },
      /**
       * Lookup531: pallet_im_online::pallet::Error<T>
       **/
      PalletImOnlineError: {
        _enum: ["InvalidKey", "DuplicatedHeartbeat"]
      },
      /**
       * Lookup532: pallet_sudo::pallet::Error<T>
       **/
      PalletSudoError: {
        _enum: ["RequireSudo"]
      },
      /**
       * Lookup534: pallet_transaction_payment::Releases
       **/
      PalletTransactionPaymentReleases: {
        _enum: ["V1Ancient", "V2"]
      },
      /**
       * Lookup536: pallet_dex::TradingPairStatus
       **/
      PalletDexTradingPairStatus: {
        _enum: ["NotEnabled", "Enabled"]
      },
      /**
       * Lookup538: pallet_dex::pallet::Error<T>
       **/
      PalletDexError: {
        _enum: [
          "MustBeEnabled",
          "MustBeNotEnabled",
          "InsufficientInputAmount",
          "InvalidInputAmounts",
          "InsufficientAmount",
          "InsufficientAmountA",
          "InsufficientAmountB",
          "InsufficientLiquidityBurnt",
          "InsufficientWithdrawnAmountA",
          "InsufficientWithdrawnAmountB",
          "InsufficientOutputAmount",
          "InvalidLiquidityIncrement",
          "InvalidConstantProduct",
          "IdenticalTokenAddress",
          "InvalidAssetId",
          "InvalidTradingPathLength",
          "InsufficientTargetAmount",
          "ExcessiveSupplyAmount",
          "InsufficientLiquidity",
          "ZeroSupplyAmount",
          "ZeroTargetAmount",
          "LiquidityProviderTokenNotCreated",
          "ExpiredDeadline"
        ]
      },
      /**
       * Lookup539: pallet_nft::types::CollectionInformation<seed_primitives::signature::AccountId20, StringLimit>
       **/
      PalletNftCollectionInformation: {
        owner: "SeedPrimitivesSignatureAccountId20",
        name: "Bytes",
        metadataScheme: "Bytes",
        royaltiesSchedule: "Option<SeedPrimitivesNftRoyaltiesSchedule>",
        maxIssuance: "Option<u32>",
        originChain: "SeedPrimitivesNftOriginChain",
        nextSerialNumber: "u32",
        collectionIssuance: "u32",
        crossChainCompatibility: "SeedPrimitivesNftCrossChainCompatibility"
      },
      /**
       * Lookup540: pallet_nft::types::TokenInformation<seed_primitives::signature::AccountId20>
       **/
      PalletNftTokenInformation: {
        owner: "SeedPrimitivesSignatureAccountId20",
        lockStatus: "Option<SeedPrimitivesNftTokenLockReason>",
        utilityFlags: "SeedPalletCommonUtilsTokenUtilityFlags"
      },
      /**
       * Lookup542: seed_primitives::nft::TokenLockReason
       **/
      SeedPrimitivesNftTokenLockReason: {
        _enum: {
          Listed: "u128"
        }
      },
      /**
       * Lookup543: seed_pallet_common::utils::TokenUtilityFlags
       **/
      SeedPalletCommonUtilsTokenUtilityFlags: {
        transferable: "bool",
        burnAuthority: "Option<SeedPalletCommonUtilsTokenBurnAuthority>"
      },
      /**
       * Lookup545: seed_pallet_common::utils::PublicMintInformation
       **/
      SeedPalletCommonUtilsPublicMintInformation: {
        enabled: "bool",
        pricingDetails: "Option<(u32,u128)>"
      },
      /**
       * Lookup546: pallet_nft::types::CollectionPendingIssuances<seed_primitives::signature::AccountId20, MaxPendingIssuances>
       **/
      PalletNftCollectionPendingIssuances: {
        nextIssuanceId: "u32",
        pendingIssuances: "Vec<(SeedPrimitivesSignatureAccountId20,Vec<PalletNftPendingIssuance>)>"
      },
      /**
       * Lookup550: pallet_nft::types::PendingIssuance
       **/
      PalletNftPendingIssuance: {
        issuanceId: "u32",
        quantity: "u32",
        burnAuthority: "SeedPalletCommonUtilsTokenBurnAuthority"
      },
      /**
       * Lookup553: pallet_nft::pallet::Error<T>
       **/
      PalletNftError: {
        _enum: [
          "CollectionNameInvalid",
          "NoAvailableIds",
          "NotTokenOwner",
          "NoToken",
          "NotCollectionOwner",
          "PublicMintDisabled",
          "TokenLocked",
          "RoyaltiesInvalid",
          "NoCollectionFound",
          "InvalidMetadataPath",
          "InvalidNewOwner",
          "InvalidAdditionalData",
          "TokenLimitExceeded",
          "MintLimitExceeded",
          "InvalidMaxIssuance",
          "MaxIssuanceAlreadySet",
          "MaxIssuanceReached",
          "AttemptedMintOnBridgedToken",
          "CannotClaimNonClaimableCollections",
          "CannotUpdateMetadata",
          "InitialIssuanceNotZero",
          "CollectionIssuanceNotZero",
          "BlockedMint",
          "MintUtilityBlocked",
          "TransferUtilityBlocked",
          "BurnUtilityBlocked",
          "PendingIssuanceLimitExceeded",
          "InvalidPendingIssuance",
          "CannotUpdateTokenUtility",
          "InvalidBurnAuthority",
          "SerialNumbersNotUnique"
        ]
      },
      /**
       * Lookup554: pallet_sft::types::SftCollectionInformation<seed_primitives::signature::AccountId20, StringLimit>
       **/
      PalletSftSftCollectionInformation: {
        collectionOwner: "SeedPrimitivesSignatureAccountId20",
        collectionName: "Bytes",
        metadataScheme: "Bytes",
        royaltiesSchedule: "Option<SeedPrimitivesNftRoyaltiesSchedule>",
        originChain: "SeedPrimitivesNftOriginChain",
        nextSerialNumber: "u32"
      },
      /**
       * Lookup555: pallet_sft::types::SftTokenInformation<seed_primitives::signature::AccountId20, StringLimit, MaxOwnersPerSftToken>
       **/
      PalletSftSftTokenInformation: {
        tokenName: "Bytes",
        maxIssuance: "Option<u128>",
        tokenIssuance: "u128",
        ownedTokens: "Vec<(SeedPrimitivesSignatureAccountId20,PalletSftSftTokenBalance)>"
      },
      /**
       * Lookup558: pallet_sft::types::SftTokenBalance
       **/
      PalletSftSftTokenBalance: {
        freeBalance: "u128",
        reservedBalance: "u128"
      },
      /**
       * Lookup560: pallet_sft::types::SftCollectionPendingIssuances<seed_primitives::signature::AccountId20, MaxSerialsPerMint, MaxPendingIssuances>
       **/
      PalletSftSftCollectionPendingIssuances: {
        nextIssuanceId: "u32",
        pendingIssuances: "Vec<(SeedPrimitivesSignatureAccountId20,Vec<PalletSftSftPendingIssuance>)>"
      },
      /**
       * Lookup564: pallet_sft::types::SftPendingIssuance<MaxSerialsPerMint>
       **/
      PalletSftSftPendingIssuance: {
        issuanceId: "u32",
        serialNumbers: "Vec<(u32,u128)>"
      },
      /**
       * Lookup567: pallet_sft::pallet::Error<T>
       **/
      PalletSftError: {
        _enum: [
          "NameInvalid",
          "NoToken",
          "NotCollectionOwner",
          "RoyaltiesInvalid",
          "NoCollectionFound",
          "InsufficientBalance",
          "InvalidQuantity",
          "InvalidMaxIssuance",
          "InvalidNewOwner",
          "InvalidAdditionalData",
          "MaxIssuanceAlreadySet",
          "MaxIssuanceReached",
          "MaxOwnersReached",
          "Overflow",
          "PublicMintDisabled",
          "TokenLimitExceeded",
          "MintUtilityBlocked",
          "TransferUtilityBlocked",
          "BurnUtilityBlocked",
          "BurnAuthorityAlreadySet",
          "TokenAlreadyIssued",
          "PendingIssuanceLimitExceeded",
          "NoBurnAuthority",
          "InvalidPendingIssuance",
          "CannotUpdateTokenUtility",
          "InvalidBurnAuthority",
          "SerialNumbersNotUnique"
        ]
      },
      /**
       * Lookup572: pallet_xrpl_bridge::types::DelayedWithdrawal<seed_primitives::signature::AccountId20>
       **/
      PalletXrplBridgeDelayedWithdrawal: {
        sender: "SeedPrimitivesSignatureAccountId20",
        destinationTag: "Option<u32>",
        withdrawTx: "PalletXrplBridgeWithdrawTransaction"
      },
      /**
       * Lookup573: pallet_xrpl_bridge::types::WithdrawTransaction
       **/
      PalletXrplBridgeWithdrawTransaction: {
        _enum: {
          XRP: "PalletXrplBridgeXrpWithdrawTransaction",
          Asset: "PalletXrplBridgeAssetWithdrawTransaction"
        }
      },
      /**
       * Lookup574: pallet_xrpl_bridge::types::XrpWithdrawTransaction
       **/
      PalletXrplBridgeXrpWithdrawTransaction: {
        txFee: "u64",
        txNonce: "u32",
        txTicketSequence: "u32",
        amount: "u128",
        destination: "H160"
      },
      /**
       * Lookup575: pallet_xrpl_bridge::types::AssetWithdrawTransaction
       **/
      PalletXrplBridgeAssetWithdrawTransaction: {
        txFee: "u64",
        txNonce: "u32",
        txTicketSequence: "u32",
        amount: "u128",
        destination: "H160",
        assetId: "u32",
        currency: "PalletXrplBridgeXrplCurrencyType",
        issuer: "H160"
      },
      /**
       * Lookup577: pallet_xrpl_bridge::types::XrplTicketSequenceParams
       **/
      PalletXrplBridgeXrplTicketSequenceParams: {
        startSequence: "u32",
        bucketSize: "u32"
      },
      /**
       * Lookup578: pallet_xrpl_bridge::pallet::Error<T>
       **/
      PalletXrplBridgeError: {
        _enum: [
          "AssetNotSupported",
          "NotPermitted",
          "NoAvailablePaymentIds",
          "DelayScheduleAtCapacity",
          "NoTransactionDetails",
          "RelayerDoesNotExists",
          "WithdrawInvalidAmount",
          "DoorAddressNotSet",
          "TooManySigners",
          "InvalidAssetDecimals",
          "InvalidCurrencyCode",
          "InvalidMantissaExponentConversion",
          "InvalidSigners",
          "InvalidHighestPrunedIndex",
          "TxReplay",
          "NextTicketSequenceParamsNotSet",
          "NextTicketSequenceParamsInvalid",
          "TicketSequenceParamsInvalid",
          "CannotProcessMoreTransactionsAtThatBlock",
          "CannotPruneActiveLedgerIndex",
          "OutSideSubmissionWindow",
          "TooManyTransactionsPerLedger",
          "InvalidSymbolMapping",
          "AssetRoundingTooHigh",
          "Xls20Incompatible",
          "Xls20TokenIDNotFound",
          "TestErrorRemoveAfterUsing"
        ]
      },
      /**
       * Lookup579: pallet_xrpl::pallet::Error<T>
       **/
      PalletXrplError: {
        _enum: ["XRPLTransaction", "XRPLTransactionAccount", "CallFiltered"]
      },
      /**
       * Lookup582: pallet_token_approvals::pallet::Error<T>
       **/
      PalletTokenApprovalsError: {
        _enum: [
          "NoToken",
          "NotTokenOwner",
          "NotTokenOwnerOrApproved",
          "CallerNotOperator",
          "ApprovedAmountTooLow",
          "CallerNotApproved",
          "AlreadyApproved",
          "ApprovalDoesntExist"
        ]
      },
      /**
       * Lookup584: pallet_echo::pallet::Error<T>
       **/
      PalletEchoError: {
        _enum: ["NoAvailableIds", "InvalidParameter", "InvalidAbiEncoding"]
      },
      /**
       * Lookup585: pallet_marketplace::types::Marketplace<seed_primitives::signature::AccountId20>
       **/
      PalletMarketplaceMarketplace: {
        account: "SeedPrimitivesSignatureAccountId20",
        entitlement: "Permill"
      },
      /**
       * Lookup586: pallet_marketplace::types::Listing<T>
       **/
      PalletMarketplaceListing: {
        _enum: {
          FixedPrice: "PalletMarketplaceFixedPriceListing",
          Auction: "PalletMarketplaceAuctionListing"
        }
      },
      /**
       * Lookup587: pallet_marketplace::types::FixedPriceListing<T>
       **/
      PalletMarketplaceFixedPriceListing: {
        paymentAsset: "u32",
        fixedPrice: "u128",
        close: "u32",
        buyer: "Option<SeedPrimitivesSignatureAccountId20>",
        seller: "SeedPrimitivesSignatureAccountId20",
        tokens: "PalletMarketplaceListingTokens",
        royaltiesSchedule: "SeedPrimitivesNftRoyaltiesSchedule",
        marketplaceId: "Option<u32>"
      },
      /**
       * Lookup588: pallet_marketplace::types::AuctionListing<T>
       **/
      PalletMarketplaceAuctionListing: {
        paymentAsset: "u32",
        reservePrice: "u128",
        close: "u32",
        seller: "SeedPrimitivesSignatureAccountId20",
        tokens: "PalletMarketplaceListingTokens",
        royaltiesSchedule: "SeedPrimitivesNftRoyaltiesSchedule",
        marketplaceId: "Option<u32>"
      },
      /**
       * Lookup589: pallet_marketplace::types::OfferType<seed_primitives::signature::AccountId20>
       **/
      PalletMarketplaceOfferType: {
        _enum: {
          Simple: "PalletMarketplaceSimpleOffer"
        }
      },
      /**
       * Lookup590: pallet_marketplace::types::SimpleOffer<seed_primitives::signature::AccountId20>
       **/
      PalletMarketplaceSimpleOffer: {
        tokenId: "(u32,u32)",
        assetId: "u32",
        amount: "u128",
        buyer: "SeedPrimitivesSignatureAccountId20",
        marketplaceId: "Option<u32>"
      },
      /**
       * Lookup592: pallet_marketplace::pallet::Error<T>
       **/
      PalletMarketplaceError: {
        _enum: [
          "NoAvailableIds",
          "NotTokenOwner",
          "NotForFixedPriceSale",
          "NotForAuction",
          "NotCollectionOwner",
          "TokenNotListed",
          "MaxOffersReached",
          "TokenLocked",
          "RoyaltiesInvalid",
          "BidTooLow",
          "MixedBundleSale",
          "MarketplaceNotRegistered",
          "InvalidMetadataPath",
          "InvalidOffer",
          "NotBuyer",
          "NotSeller",
          "IsTokenOwner",
          "ZeroOffer",
          "ZeroBalance",
          "TokenOnAuction",
          "EmptyTokens",
          "NoToken",
          "DurationTooShort",
          "DuplicateTokens"
        ]
      },
      /**
       * Lookup593: pallet_preimage::RequestStatus<seed_primitives::signature::AccountId20, Balance>
       **/
      PalletPreimageRequestStatus: {
        _enum: {
          Unrequested: {
            deposit: "(SeedPrimitivesSignatureAccountId20,u128)",
            len: "u32"
          },
          Requested: {
            deposit: "Option<(SeedPrimitivesSignatureAccountId20,u128)>",
            count: "u32",
            len: "Option<u32>"
          }
        }
      },
      /**
       * Lookup596: pallet_preimage::pallet::Error<T>
       **/
      PalletPreimageError: {
        _enum: ["TooBig", "AlreadyNoted", "NotAuthorized", "NotNoted", "Requested", "NotRequested"]
      },
      /**
       * Lookup597: pallet_vortex_distribution::VtxDistStatus
       **/
      PalletVortexDistributionVtxDistStatus: {
        _enum: ["Disabled", "Enabled", "Triggering", "Triggered", "Paying", "Done"]
      },
      /**
       * Lookup600: pallet_vortex_distribution::pallet::Error<T>
       **/
      PalletVortexDistributionError: {
        _enum: [
          "RequireAdmin",
          "VtxDistIdNotAvailable",
          "VtxDistAlreadyEnabled",
          "VtxDistDisabled",
          "NoVtxAssetMinted",
          "InvalidAmount",
          "VtxDistIdInUse",
          "NotAValidator",
          "VortexPeriodNotSet",
          "PivotStringTooLong",
          "AssetsShouldNotIncludeVtxAsset",
          "CannotTrigger",
          "CannotRedeem",
          "NotTriggered",
          "ExceededMaxRewards",
          "VortexPriceIsZero",
          "RootPriceIsZero",
          "VtxRedeemDisabled",
          "ManualRewardInputDisabled",
          "VtxRewardPayoutFailed",
          "RewardPointsNotRegistered"
        ]
      },
      /**
       * Lookup601: pallet_partner_attribution::pallet::Error<T>
       **/
      PalletPartnerAttributionError: {
        _enum: [
          "NoAvailableIds",
          "PartnerNotFound",
          "PartnerAlreadyExists",
          "Unauthorized",
          "CallerNotFuturepass",
          "AccountAlreadyAttributed"
        ]
      },
      /**
       * Lookup602: pallet_fee_proxy::pallet::Error<T>
       **/
      PalletFeeProxyError: {
        _enum: ["NestedFeePreferenceCall", "FeeTokenIsGasToken"]
      },
      /**
       * Lookup603: pallet_fee_control::FeeControlFeeConfig
       **/
      PalletFeeControlFeeControlFeeConfig: {
        evmBaseFeePerGas: "U256",
        weightMultiplier: "Perbill",
        lengthMultiplier: "u128"
      },
      /**
       * Lookup604: pallet_xls20::pallet::Error<T>
       **/
      PalletXls20Error: {
        _enum: [
          "NotRelayer",
          "MappingAlreadyExists",
          "Xls20MintFeeTooLow",
          "NotXLS20Compatible",
          "NoToken",
          "NotCollectionOwner",
          "CouldNotDecodeXls20Token",
          "CannotBridgeBurnableToken"
        ]
      },
      /**
       * Lookup605: pallet_doughnut::pallet::Error<T>
       **/
      PalletDoughnutError: {
        _enum: [
          "DoughnutDecodeFailed",
          "UnsupportedDoughnutVersion",
          "DoughnutVerifyFailed",
          "UnauthorizedSender",
          "CallerNotIssuer",
          "DoughnutRevoked",
          "HolderRevoked",
          "ToppingDecodeFailed",
          "TRNDomainNotfound",
          "ToppingPermissionDenied",
          "UnsupportedInnerCall",
          "HolderNotWhitelisted"
        ]
      },
      /**
       * Lookup607: pallet_maintenance_mode::pallet::Error<T>
       **/
      PalletMaintenanceModeError: {
        _enum: [
          "AccountBlocked",
          "MaintenanceModeActive",
          "InvalidPalletName",
          "InvalidCallName",
          "CannotBlock"
        ]
      },
      /**
       * Lookup611: pallet_crowdsale::pallet::Error<T>
       **/
      PalletCrowdsaleError: {
        _enum: [
          "AccessDenied",
          "NoAvailableIds",
          "InvalidBlockRange",
          "CrowdsaleNotFound",
          "InvalidCrowdsaleStatus",
          "CrowdsaleNotEnabled",
          "InvalidSoftCapPrice",
          "InvalidAsset",
          "InvalidMaxIssuance",
          "InvalidAmount",
          "InvalidQuantity",
          "VoucherClaimFailed",
          "MaxIssuanceNotSet",
          "CollectionIssuanceNotZero",
          "CollectionPublicMintable",
          "TooManySales",
          "VouchersAlreadyClaimed",
          "SaleDistributionFailed",
          "SaleDurationTooLong",
          "ExtrinsicForbidden"
        ]
      },
      /**
       * Lookup615: pallet_nfi::pallet::Error<T>
       **/
      PalletNfiError: {
        _enum: [
          "InvalidMintFee",
          "InvalidTokenFormat",
          "NotEnabled",
          "NotRelayer",
          "NotCollectionOwner",
          "NotTokenOwner",
          "NoToken"
        ]
      },
      /**
       * Lookup616: pallet_migration::MigrationStatus
       **/
      PalletMigrationMigrationStatus: {
        _enum: {
          NoMigrationInProgress: "Null",
          InProgress: {
            stepsDone: "u32"
          },
          Completed: "Null"
        }
      },
      /**
       * Lookup617: pallet_migration::pallet::Error<T>
       **/
      PalletMigrationError: {
        _enum: ["MigrationInProgress", "InvalidBlockDelay", "InvalidBlockLimit"]
      },
      /**
       * Lookup618: seed_pallet_common::sylo::Resolver<seed_primitives::signature::AccountId20, MaxServiceEndpoints, StringLimit>
       **/
      SeedPalletCommonSyloResolver: {
        controller: "SeedPrimitivesSignatureAccountId20",
        serviceEndpoints: "Vec<Bytes>"
      },
      /**
       * Lookup620: seed_pallet_common::sylo::ValidationRecord<seed_primitives::signature::AccountId20, BlockNumber, MaxResolvers, MaxTags, MaxEntries, StringLimit>
       **/
      SeedPalletCommonSyloValidationRecord: {
        _alias: {
          entries_: "entries"
        },
        author: "SeedPrimitivesSignatureAccountId20",
        resolvers: "Vec<SeedPalletCommonSyloResolverId>",
        dataType: "Bytes",
        tags: "Vec<Bytes>",
        entries_: "Vec<SeedPalletCommonSyloValidationEntry>"
      },
      /**
       * Lookup622: seed_pallet_common::sylo::ValidationEntry<BlockNumber>
       **/
      SeedPalletCommonSyloValidationEntry: {
        checksum: "H256",
        block: "u32"
      },
      /**
       * Lookup624: pallet_sylo_data_verification::pallet::Error<T>
       **/
      PalletSyloDataVerificationError: {
        _enum: [
          "ResolverAlreadyRegistered",
          "ResolverNotRegistered",
          "NotController",
          "RecordAlreadyCreated",
          "NoValidationRecord",
          "MissingModifyPermission"
        ]
      },
      /**
       * Lookup625: pallet_liquidity_pools::types::PoolInfo<PoolId, AssetId, Balance, BlockNumber>
       **/
      PalletLiquidityPoolsPoolInfo: {
        id: "u32",
        creator: "SeedPrimitivesSignatureAccountId20",
        rewardAssetId: "u32",
        stakedAssetId: "u32",
        interestRate: "u32",
        maxTokens: "u128",
        lastUpdated: "u32",
        lockStartBlock: "u32",
        lockEndBlock: "u32",
        lockedAmount: "u128",
        poolStatus: "PalletLiquidityPoolsPoolStatus"
      },
      /**
       * Lookup626: pallet_liquidity_pools::types::PoolStatus
       **/
      PalletLiquidityPoolsPoolStatus: {
        _enum: ["Closed", "Open", "Started", "Renewing", "Matured"]
      },
      /**
       * Lookup627: pallet_liquidity_pools::types::UserInfo<Balance>
       **/
      PalletLiquidityPoolsUserInfo: {
        amount: "u128",
        rewardDebt: "u128",
        shouldRollover: "bool",
        rolledOver: "bool"
      },
      /**
       * Lookup628: pallet_liquidity_pools::types::PoolRelationship<PoolId>
       **/
      PalletLiquidityPoolsPoolRelationship: {
        successorId: "Option<u32>"
      },
      /**
       * Lookup629: pallet_liquidity_pools::pallet::Error<T>
       **/
      PalletLiquidityPoolsError: {
        _enum: [
          "NotPoolCreator",
          "InvalidBlockRange",
          "PoolAlreadyExists",
          "PoolDoesNotExist",
          "SuccessorPoolDoesNotExist",
          "PredecessorPoolDoesNotExist",
          "SuccessorPoolSizeShouldBeGreaterThanPredecessor",
          "SuccessorPoolSizeShouldBeLockedAfterPredecessor",
          "RolloverPoolsShouldBeTheSameAsset",
          "NoTokensStaked",
          "PoolNotOpen",
          "NotReadyForClaimingReward",
          "NoAvailablePoolId",
          "StakingLimitExceeded",
          "OffchainErrNotValidator",
          "OffchainErrTooEarly",
          "OffchainErrSubmitTransaction",
          "OffchainErrWrongTransactionSource",
          "PivotStringTooLong"
        ]
      },
      /**
       * Lookup633: pallet_sylo_data_permissions::types::PermissionRecord<seed_primitives::signature::AccountId20, BlockNumber>
       **/
      PalletSyloDataPermissionsPermissionRecord: {
        grantor: "SeedPrimitivesSignatureAccountId20",
        permission: "SeedPalletCommonSyloDataPermission",
        block: "u32",
        expiry: "Option<u32>",
        irrevocable: "bool"
      },
      /**
       * Lookup640: pallet_sylo_data_permissions::types::TaggedPermissionRecord<BlockNumber, MaxTags, StringLimit>
       **/
      PalletSyloDataPermissionsTaggedPermissionRecord: {
        permission: "SeedPalletCommonSyloDataPermission",
        tags: "Vec<Bytes>",
        block: "u32",
        expiry: "Option<u32>",
        irrevocable: "bool"
      },
      /**
       * Lookup645: pallet_sylo_data_permissions::types::PermissionReference<StringLimit>
       **/
      PalletSyloDataPermissionsPermissionReference: {
        permissionRecordId: "Bytes"
      },
      /**
       * Lookup646: pallet_sylo_data_permissions::pallet::Error<T>
       **/
      PalletSyloDataPermissionsError: {
        _enum: [
          "DataRecordDoesNotExist",
          "IrrevocableCannotBeExpirable",
          "InvalidExpiry",
          "ExceededMaxPermissions",
          "MissingDistributePermission",
          "CannotGrantDistributePermission",
          "CannotGrantIrrevocablePermission",
          "PermissionIrrevocable",
          "NotPermissionGrantor",
          "PermissionNotFound",
          "MissingValidationRecord",
          "PermissionReferenceAlreadyExists",
          "ExceededMaxExpiringPermissions",
          "InvalidString"
        ]
      },
      /**
       * Lookup647: pallet_sylo_action_permissions::types::TransactPermission<BlockNumber, MaxCallIds, StringLimit>
       **/
      PalletSyloActionPermissionsTransactPermission: {
        spender: "PalletSyloActionPermissionsSpender",
        spendingBalance: "Option<u128>",
        allowedCalls: "BTreeSet<(Bytes,Bytes)>",
        block: "u32",
        expiry: "Option<u32>"
      },
      /**
       * Lookup648: pallet_sylo_action_permissions::pallet::Error<T>
       **/
      PalletSyloActionPermissionsError: {
        _enum: [
          "PermissionNotGranted",
          "NotAuthorizedCall",
          "PermissionExpired",
          "InvalidExpiry",
          "PermissionAlreadyExists",
          "InvalidSpendingBalance",
          "InvalidTokenSignature",
          "GranteeDoesNotMatch",
          "NonceAlreadyUsed",
          "InvalidFuturepassInToken",
          "InsufficientSpendingBalance"
        ]
      },
      /**
       * Lookup649: pallet_election_provider_multi_phase::ReadySolution<AccountId, MaxWinners>
       **/
      PalletElectionProviderMultiPhaseReadySolution: {
        supports: "Vec<(SeedPrimitivesSignatureAccountId20,SpNposElectionsSupport)>",
        score: "SpNposElectionsElectionScore",
        compute: "PalletElectionProviderMultiPhaseElectionCompute"
      },
      /**
       * Lookup651: pallet_election_provider_multi_phase::RoundSnapshot<seed_primitives::signature::AccountId20, DataProvider>
       **/
      PalletElectionProviderMultiPhaseRoundSnapshot: {
        voters: "Vec<(SeedPrimitivesSignatureAccountId20,u64,Vec<SeedPrimitivesSignatureAccountId20>)>",
        targets: "Vec<SeedPrimitivesSignatureAccountId20>"
      },
      /**
       * Lookup657: pallet_election_provider_multi_phase::signed::SignedSubmission<seed_primitives::signature::AccountId20, Balance, seed_runtime::NposCompactSolution16>
       **/
      PalletElectionProviderMultiPhaseSignedSignedSubmission: {
        who: "SeedPrimitivesSignatureAccountId20",
        deposit: "u128",
        rawSolution: "PalletElectionProviderMultiPhaseRawSolution",
        callFee: "u128"
      },
      /**
       * Lookup658: pallet_election_provider_multi_phase::pallet::Error<T>
       **/
      PalletElectionProviderMultiPhaseError: {
        _enum: [
          "PreDispatchEarlySubmission",
          "PreDispatchWrongWinnerCount",
          "PreDispatchWeakSubmission",
          "SignedQueueFull",
          "SignedCannotPayDeposit",
          "SignedInvalidWitness",
          "SignedTooMuchWeight",
          "OcwCallWrongEra",
          "MissingSnapshotMetadata",
          "InvalidSubmissionIndex",
          "CallNotAllowed",
          "FallbackFailed",
          "BoundNotMet",
          "TooManyWinners"
        ]
      },
      /**
       * Lookup659: pallet_bags_list::list::Node<T, I>
       **/
      PalletBagsListListNode: {
        id: "SeedPrimitivesSignatureAccountId20",
        prev: "Option<SeedPrimitivesSignatureAccountId20>",
        next: "Option<SeedPrimitivesSignatureAccountId20>",
        bagUpper: "u64",
        score: "u64"
      },
      /**
       * Lookup660: pallet_bags_list::list::Bag<T, I>
       **/
      PalletBagsListListBag: {
        head: "Option<SeedPrimitivesSignatureAccountId20>",
        tail: "Option<SeedPrimitivesSignatureAccountId20>"
      },
      /**
       * Lookup661: pallet_bags_list::pallet::Error<T, I>
       **/
      PalletBagsListError: {
        _enum: {
          List: "PalletBagsListListListError"
        }
      },
      /**
       * Lookup662: pallet_bags_list::list::ListError
       **/
      PalletBagsListListListError: {
        _enum: ["Duplicate", "NotHeavier", "NotInSameBag", "NodeNotFound"]
      },
      /**
       * Lookup665: fp_rpc::TransactionStatus
       **/
      FpRpcTransactionStatus: {
        transactionHash: "H256",
        transactionIndex: "u32",
        from: "H160",
        to: "Option<H160>",
        contractAddress: "Option<H160>",
        logs: "Vec<EthereumLog>",
        logsBloom: "EthbloomBloom"
      },
      /**
       * Lookup667: ethbloom::Bloom
       **/
      EthbloomBloom: "[u8;256]",
      /**
       * Lookup669: ethereum::receipt::ReceiptV3
       **/
      EthereumReceiptReceiptV3: {
        _enum: {
          Legacy: "EthereumReceiptEip658ReceiptData",
          EIP2930: "EthereumReceiptEip658ReceiptData",
          EIP1559: "EthereumReceiptEip658ReceiptData"
        }
      },
      /**
       * Lookup670: ethereum::receipt::EIP658ReceiptData
       **/
      EthereumReceiptEip658ReceiptData: {
        statusCode: "u8",
        usedGas: "U256",
        logsBloom: "EthbloomBloom",
        logs: "Vec<EthereumLog>"
      },
      /**
       * Lookup671: ethereum::block::Block<ethereum::transaction::TransactionV2>
       **/
      EthereumBlock: {
        header: "EthereumHeader",
        transactions: "Vec<EthereumTransactionTransactionV2>",
        ommers: "Vec<EthereumHeader>"
      },
      /**
       * Lookup672: ethereum::header::Header
       **/
      EthereumHeader: {
        parentHash: "H256",
        ommersHash: "H256",
        beneficiary: "H160",
        stateRoot: "H256",
        transactionsRoot: "H256",
        receiptsRoot: "H256",
        logsBloom: "EthbloomBloom",
        difficulty: "U256",
        number: "U256",
        gasLimit: "U256",
        gasUsed: "U256",
        timestamp: "u64",
        extraData: "Bytes",
        mixHash: "H256",
        nonce: "EthereumTypesHashH64"
      },
      /**
       * Lookup673: ethereum_types::hash::H64
       **/
      EthereumTypesHashH64: "[u8;8]",
      /**
       * Lookup678: pallet_ethereum::pallet::Error<T>
       **/
      PalletEthereumError: {
        _enum: [
          "InvalidSignature",
          "PreLogExists",
          "GasLimitTooLow",
          "GasLimitTooHigh",
          "GasPriceTooLow",
          "BalanceLow",
          "InvalidNonce",
          "Undefined"
        ]
      },
      /**
       * Lookup679: pallet_evm::CodeMetadata
       **/
      PalletEvmCodeMetadata: {
        _alias: {
          size_: "size",
          hash_: "hash"
        },
        size_: "u64",
        hash_: "H256"
      },
      /**
       * Lookup681: pallet_evm::pallet::Error<T>
       **/
      PalletEvmError: {
        _enum: [
          "BalanceLow",
          "FeeOverflow",
          "PaymentOverflow",
          "WithdrawFailed",
          "GasPriceTooLow",
          "InvalidNonce",
          "GasLimitTooLow",
          "GasLimitTooHigh",
          "Undefined",
          "Reentrancy",
          "TransactionMustComeFromEOA"
        ]
      },
      /**
       * Lookup682: pallet_ethy::types::BridgePauseStatus
       **/
      PalletEthyBridgePauseStatus: {
        manualPause: "bool",
        authoritiesChange: "bool"
      },
      /**
       * Lookup685: pallet_ethy::types::EventClaimStatus
       **/
      PalletEthyEventClaimStatus: {
        _enum: ["Pending", "Challenged", "ProvenValid"]
      },
      /**
       * Lookup692: pallet_ethy::types::CheckedEthCallRequest<MaxEthData>
       **/
      PalletEthyCheckedEthCallRequest: {
        input: "Bytes",
        target: "H160",
        timestamp: "u64",
        maxBlockLookBehind: "u64",
        tryBlockNumber: "u64",
        checkTimestamp: "u64"
      },
      /**
       * Lookup693: pallet_ethy::pallet::Error<T>
       **/
      PalletEthyError: {
        _enum: [
          "NoLocalSigningAccount",
          "OffchainUnsignedTxSignedPayload",
          "InvalidNotarization",
          "HttpFetch",
          "InvalidClaim",
          "OcwConfig",
          "EventReplayPending",
          "EventReplayProcessed",
          "BridgePaused",
          "Internal",
          "NoPermission",
          "NoClaim",
          "ClaimAlreadyChallenged",
          "CantUnbondRelayer",
          "CantBondRelayer",
          "NoBondPaid",
          "MaxNewSignersExceeded",
          "MaxChallengesExceeded",
          "MessageTooLarge"
        ]
      },
      /**
       * Lookup695: pallet_erc20_peg::types::PendingPayment<seed_primitives::signature::AccountId20>
       **/
      PalletErc20PegPendingPayment: {
        _enum: {
          Deposit: "PalletErc20PegErc20DepositEvent",
          Withdrawal: "(SeedPrimitivesSignatureAccountId20,PalletErc20PegWithdrawMessage)"
        }
      },
      /**
       * Lookup696: pallet_erc20_peg::types::Erc20DepositEvent
       **/
      PalletErc20PegErc20DepositEvent: {
        tokenAddress: "H160",
        amount: "U256",
        beneficiary: "H160"
      },
      /**
       * Lookup698: pallet_erc20_peg::types::WithdrawMessage
       **/
      PalletErc20PegWithdrawMessage: {
        tokenAddress: "H160",
        amount: "U256",
        beneficiary: "H160"
      },
      /**
       * Lookup701: pallet_erc20_peg::pallet::Error<T>
       **/
      PalletErc20PegError: {
        _enum: [
          "CreateAssetFailed",
          "InvalidAmount",
          "InvalidPalletId",
          "InvalidSourceAddress",
          "DepositsPaused",
          "WithdrawalsPaused",
          "UnsupportedAsset",
          "EvmWithdrawalFailed",
          "InvalidAbiEncoding",
          "PaymentIdNotFound"
        ]
      },
      /**
       * Lookup702: pallet_nft_peg::types::BlockedTokenInfo<T>
       **/
      PalletNftPegBlockedTokenInfo: {
        collectionId: "u32",
        destinationAddress: "SeedPrimitivesSignatureAccountId20",
        serialNumbers: "Vec<u32>"
      },
      /**
       * Lookup703: pallet_nft_peg::pallet::Error<T>
       **/
      PalletNftPegError: {
        _enum: [
          "ExceedsMaxAddresses",
          "ExceedsMaxTokens",
          "InvalidAbiEncoding",
          "InvalidAbiPrefix",
          "NoCollectionFound",
          "NoMappedTokenExists",
          "NoPermissionToBridge",
          "StateSyncDisabled",
          "TokenListLengthMismatch",
          "ExceedsMaxVecLength",
          "NoBlockedTokensFound",
          "NotBlockedTokenDestination"
        ]
      },
      /**
       * Lookup706: pallet_proxy::ProxyDefinition<seed_primitives::signature::AccountId20, seed_runtime::impls::ProxyType, BlockNumber>
       **/
      PalletProxyProxyDefinition: {
        delegate: "SeedPrimitivesSignatureAccountId20",
        proxyType: "SeedRuntimeImplsProxyType",
        delay: "u32"
      },
      /**
       * Lookup710: pallet_proxy::Announcement<seed_primitives::signature::AccountId20, primitive_types::H256, BlockNumber>
       **/
      PalletProxyAnnouncement: {
        real: "SeedPrimitivesSignatureAccountId20",
        callHash: "H256",
        height: "u32"
      },
      /**
       * Lookup712: pallet_proxy::pallet::Error<T>
       **/
      PalletProxyError: {
        _enum: [
          "TooMany",
          "NotFound",
          "NotProxy",
          "Unproxyable",
          "Duplicate",
          "NoPermission",
          "Unannounced",
          "NoSelfProxy"
        ]
      },
      /**
       * Lookup713: pallet_futurepass::pallet::Error<T>
       **/
      PalletFuturepassError: {
        _enum: [
          "AccountAlreadyRegistered",
          "DelegateNotRegistered",
          "DelegateAlreadyExists",
          "BlacklistedExtrinsic",
          "NotFuturepassOwner",
          "OwnerCannotUnregister",
          "PermissionDenied",
          "InvalidProxyType",
          "ExpiredDeadline",
          "InvalidSignature",
          "AccountParsingFailure",
          "RegisterDelegateSignerMismatch"
        ]
      },
      /**
       * Lookup715: seed_primitives::signature::EthereumSignature
       **/
      SeedPrimitivesSignatureEthereumSignature: "SpCoreEcdsaSignature",
      /**
       * Lookup717: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
       **/
      FrameSystemExtensionsCheckNonZeroSender: "Null",
      /**
       * Lookup718: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
       **/
      FrameSystemExtensionsCheckSpecVersion: "Null",
      /**
       * Lookup719: frame_system::extensions::check_tx_version::CheckTxVersion<T>
       **/
      FrameSystemExtensionsCheckTxVersion: "Null",
      /**
       * Lookup720: frame_system::extensions::check_genesis::CheckGenesis<T>
       **/
      FrameSystemExtensionsCheckGenesis: "Null",
      /**
       * Lookup723: frame_system::extensions::check_nonce::CheckNonce<T>
       **/
      FrameSystemExtensionsCheckNonce: "Compact<u32>",
      /**
       * Lookup724: frame_system::extensions::check_weight::CheckWeight<T>
       **/
      FrameSystemExtensionsCheckWeight: "Null",
      /**
       * Lookup725: pallet_maintenance_mode::MaintenanceChecker<T>
       **/
      PalletMaintenanceModeMaintenanceChecker: "Null",
      /**
       * Lookup726: pallet_transaction_payment::ChargeTransactionPayment<T>
       **/
      PalletTransactionPaymentChargeTransactionPayment: "Compact<u128>",
      /**
       * Lookup728: seed_runtime::Runtime
       **/
      SeedRuntimeRuntime: "Null"
    };
  }
});

// node_modules/@therootnetwork/api-types/dist/lookup/types-rootnet.js
var require_types_rootnet = __commonJS({
  "node_modules/@therootnetwork/api-types/dist/lookup/types-rootnet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    init_lookup2();
  }
});

// node_modules/@therootnetwork/api-types/dist/index.js
var require_dist8 = __commonJS({
  "node_modules/@therootnetwork/api-types/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m, k2);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v3) {
      Object.defineProperty(o, "default", { enumerable: true, value: v3 });
    } : function(o, v3) {
      o["default"] = v3;
    });
    var __importStar = exports && exports.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule) return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k2 in mod2) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k2)) __createBinding(result, mod2, k2);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lookupTypes = void 0;
    init_lookup2();
    require_api();
    require_rootnet();
    require_types_rootnet();
    exports.lookupTypes = __importStar(require_rootnet());
  }
});

// node_modules/@therootnetwork/api/dist/index.js
var require_dist9 = __commonJS({
  "node_modules/@therootnetwork/api/dist/index.js"(exports, module2) {
    "use strict";
    var d = Object.defineProperty;
    var R2 = Object.defineProperties;
    var D = Object.getOwnPropertyDescriptor;
    var w2 = Object.getOwnPropertyDescriptors;
    var _2 = Object.getOwnPropertyNames;
    var A2 = Object.getOwnPropertySymbols;
    var g2 = Object.prototype.hasOwnProperty;
    var F2 = Object.prototype.propertyIsEnumerable;
    var S = (e, t, n) => t in e ? d(e, t, { enumerable: true, configurable: true, writable: true, value: n }) : e[t] = n;
    var r = (e, t) => {
      for (var n in t || (t = {})) g2.call(t, n) && S(e, n, t[n]);
      if (A2) for (var n of A2(t)) F2.call(t, n) && S(e, n, t[n]);
      return e;
    };
    var i = (e, t) => R2(e, w2(t));
    var y = (e, t) => {
      for (var n in t) d(e, n, { get: t[n], enumerable: true });
    };
    var V3 = (e, t, n, m) => {
      if (t && typeof t == "object" || typeof t == "function") for (let o of _2(t)) !g2.call(e, o) && o !== n && d(e, o, { get: () => t[o], enumerable: !(m = D(t, o)) || m.enumerable });
      return e;
    };
    var M2 = (e) => V3(d({}, "__esModule", { value: true }), e);
    var q2 = {};
    y(q2, { getApiOptions: () => L2, getLocalProvider: () => W2, getProvider: () => p, getPublicProvider: () => X2, getPublicProviderUrl: () => B, getRpcOptions: () => O2, getTypesOptions: () => N3 });
    module2.exports = M2(q2);
    var l17 = {};
    y(l17, { default: () => H2 });
    var H2 = { SeedPrimitivesSignatureAccountId20: "[u8;20]", FrameSystemAccountInfo: { nonce: "u32", consumers: "u32", providers: "u32", sufficients: "u32", data: "PalletBalancesAccountData" }, PalletBalancesAccountData: { free: "u128", reserved: "u128", frozen: "u128", flags: "u128" }, FrameSupportDispatchPerDispatchClassWeight: { normal: "SpWeightsWeightV2Weight", operational: "SpWeightsWeightV2Weight", mandatory: "SpWeightsWeightV2Weight" }, SpWeightsWeightV2Weight: { refTime: "Compact<u64>", proofSize: "Compact<u64>" }, SpRuntimeDigest: { logs: "Vec<SpRuntimeDigestDigestItem>" }, SpRuntimeDigestDigestItem: { _enum: { Other: "Bytes", __Unused1: "Null", __Unused2: "Null", __Unused3: "Null", Consensus: "([u8;4],Bytes)", Seal: "([u8;4],Bytes)", PreRuntime: "([u8;4],Bytes)", __Unused7: "Null", RuntimeEnvironmentUpdated: "Null" } }, FrameSystemEventRecord: { phase: "FrameSystemPhase", event: "Event", topics: "Vec<H256>" }, FrameSystemEvent: { _enum: { ExtrinsicSuccess: { dispatchInfo: "FrameSupportDispatchDispatchInfo" }, ExtrinsicFailed: { dispatchError: "SpRuntimeDispatchError", dispatchInfo: "FrameSupportDispatchDispatchInfo" }, CodeUpdated: "Null", NewAccount: { account: "SeedPrimitivesSignatureAccountId20" }, KilledAccount: { account: "SeedPrimitivesSignatureAccountId20" }, Remarked: { _alias: { hash_: "hash" }, sender: "SeedPrimitivesSignatureAccountId20", hash_: "H256" } } }, FrameSupportDispatchDispatchInfo: { weight: "SpWeightsWeightV2Weight", class: "FrameSupportDispatchDispatchClass", paysFee: "FrameSupportDispatchPays" }, FrameSupportDispatchDispatchClass: { _enum: ["Normal", "Operational", "Mandatory"] }, FrameSupportDispatchPays: { _enum: ["Yes", "No"] }, SpRuntimeDispatchError: { _enum: { Other: "Null", CannotLookup: "Null", BadOrigin: "Null", Module: "SpRuntimeModuleError", ConsumerRemaining: "Null", NoProviders: "Null", TooManyConsumers: "Null", Token: "SpRuntimeTokenError", Arithmetic: "SpArithmeticArithmeticError", Transactional: "SpRuntimeTransactionalError", Exhausted: "Null", Corruption: "Null", Unavailable: "Null", RootNotAllowed: "Null" } }, SpRuntimeModuleError: { index: "u8", error: "[u8;4]" }, SpRuntimeTokenError: { _enum: ["FundsUnavailable", "OnlyProvider", "BelowMinimum", "CannotCreate", "UnknownAsset", "Frozen", "Unsupported", "CannotCreateHold", "NotExpendable", "Blocked"] }, SpArithmeticArithmeticError: { _enum: ["Underflow", "Overflow", "DivisionByZero"] }, SpRuntimeTransactionalError: { _enum: ["LimitReached", "NoLayer"] }, PalletSchedulerEvent: { _enum: { Scheduled: { when: "u32", index: "u32" }, Canceled: { when: "u32", index: "u32" }, Dispatched: { task: "(u32,u32)", id: "Option<[u8;32]>", result: "Result<Null, SpRuntimeDispatchError>" }, CallUnavailable: { task: "(u32,u32)", id: "Option<[u8;32]>" }, PeriodicFailed: { task: "(u32,u32)", id: "Option<[u8;32]>" }, PermanentlyOverweight: { task: "(u32,u32)", id: "Option<[u8;32]>" } } }, PalletUtilityEvent: { _enum: { BatchInterrupted: { index: "u32", error: "SpRuntimeDispatchError" }, BatchCompleted: "Null", BatchCompletedWithErrors: "Null", ItemCompleted: "Null", ItemFailed: { error: "SpRuntimeDispatchError" }, DispatchedAs: { result: "Result<Null, SpRuntimeDispatchError>" } } }, PalletRecoveryEvent: { _enum: { RecoveryCreated: { account: "SeedPrimitivesSignatureAccountId20" }, RecoveryInitiated: { lostAccount: "SeedPrimitivesSignatureAccountId20", rescuerAccount: "SeedPrimitivesSignatureAccountId20" }, RecoveryVouched: { lostAccount: "SeedPrimitivesSignatureAccountId20", rescuerAccount: "SeedPrimitivesSignatureAccountId20", sender: "SeedPrimitivesSignatureAccountId20" }, RecoveryClosed: { lostAccount: "SeedPrimitivesSignatureAccountId20", rescuerAccount: "SeedPrimitivesSignatureAccountId20" }, AccountRecovered: { lostAccount: "SeedPrimitivesSignatureAccountId20", rescuerAccount: "SeedPrimitivesSignatureAccountId20" }, RecoveryRemoved: { lostAccount: "SeedPrimitivesSignatureAccountId20" } } }, PalletMultisigEvent: { _enum: { NewMultisig: { approving: "SeedPrimitivesSignatureAccountId20", multisig: "SeedPrimitivesSignatureAccountId20", callHash: "[u8;32]" }, MultisigApproval: { approving: "SeedPrimitivesSignatureAccountId20", timepoint: "PalletMultisigTimepoint", multisig: "SeedPrimitivesSignatureAccountId20", callHash: "[u8;32]" }, MultisigExecuted: { approving: "SeedPrimitivesSignatureAccountId20", timepoint: "PalletMultisigTimepoint", multisig: "SeedPrimitivesSignatureAccountId20", callHash: "[u8;32]", result: "Result<Null, SpRuntimeDispatchError>" }, MultisigCancelled: { cancelling: "SeedPrimitivesSignatureAccountId20", timepoint: "PalletMultisigTimepoint", multisig: "SeedPrimitivesSignatureAccountId20", callHash: "[u8;32]" } } }, PalletMultisigTimepoint: { height: "u32", index: "u32" }, PalletBalancesEvent: { _enum: { Endowed: { account: "SeedPrimitivesSignatureAccountId20", freeBalance: "u128" }, DustLost: { account: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Transfer: { from: "SeedPrimitivesSignatureAccountId20", to: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, BalanceSet: { who: "SeedPrimitivesSignatureAccountId20", free: "u128" }, Reserved: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Unreserved: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, ReserveRepatriated: { from: "SeedPrimitivesSignatureAccountId20", to: "SeedPrimitivesSignatureAccountId20", amount: "u128", destinationStatus: "FrameSupportTokensMiscBalanceStatus" }, Deposit: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Withdraw: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Slashed: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Minted: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Burned: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Suspended: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Restored: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Upgraded: { who: "SeedPrimitivesSignatureAccountId20" }, Issued: { amount: "u128" }, Rescinded: { amount: "u128" }, Locked: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Unlocked: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Frozen: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Thawed: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" } } }, FrameSupportTokensMiscBalanceStatus: { _enum: ["Free", "Reserved"] }, PalletAssetsEvent: { _enum: { Created: { assetId: "u32", creator: "SeedPrimitivesSignatureAccountId20", owner: "SeedPrimitivesSignatureAccountId20" }, Issued: { assetId: "u32", owner: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Transferred: { assetId: "u32", from: "SeedPrimitivesSignatureAccountId20", to: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Burned: { assetId: "u32", owner: "SeedPrimitivesSignatureAccountId20", balance: "u128" }, TeamChanged: { assetId: "u32", issuer: "SeedPrimitivesSignatureAccountId20", admin: "SeedPrimitivesSignatureAccountId20", freezer: "SeedPrimitivesSignatureAccountId20" }, OwnerChanged: { assetId: "u32", owner: "SeedPrimitivesSignatureAccountId20" }, Frozen: { assetId: "u32", who: "SeedPrimitivesSignatureAccountId20" }, Thawed: { assetId: "u32", who: "SeedPrimitivesSignatureAccountId20" }, AssetFrozen: { assetId: "u32" }, AssetThawed: { assetId: "u32" }, AccountsDestroyed: { assetId: "u32", accountsDestroyed: "u32", accountsRemaining: "u32" }, ApprovalsDestroyed: { assetId: "u32", approvalsDestroyed: "u32", approvalsRemaining: "u32" }, DestructionStarted: { assetId: "u32" }, Destroyed: { assetId: "u32" }, ForceCreated: { assetId: "u32", owner: "SeedPrimitivesSignatureAccountId20" }, MetadataSet: { assetId: "u32", name: "Bytes", symbol: "Bytes", decimals: "u8", isFrozen: "bool" }, MetadataCleared: { assetId: "u32" }, ApprovedTransfer: { assetId: "u32", source: "SeedPrimitivesSignatureAccountId20", delegate: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, ApprovalCancelled: { assetId: "u32", owner: "SeedPrimitivesSignatureAccountId20", delegate: "SeedPrimitivesSignatureAccountId20" }, TransferredApproved: { assetId: "u32", owner: "SeedPrimitivesSignatureAccountId20", delegate: "SeedPrimitivesSignatureAccountId20", destination: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, AssetStatusChanged: { assetId: "u32" }, AssetMinBalanceChanged: { assetId: "u32", newMinBalance: "u128" }, Touched: { assetId: "u32", who: "SeedPrimitivesSignatureAccountId20", depositor: "SeedPrimitivesSignatureAccountId20" }, Blocked: { assetId: "u32", who: "SeedPrimitivesSignatureAccountId20" } } }, PalletAssetsExtEvent: { _enum: { PlaceHold: { assetId: "u32", who: "SeedPrimitivesSignatureAccountId20", amount: "u128", palletId: "[u8;8]" }, ReleaseHold: { assetId: "u32", who: "SeedPrimitivesSignatureAccountId20", amount: "u128", palletId: "[u8;8]" }, SpendHold: { assetId: "u32", who: "SeedPrimitivesSignatureAccountId20", spends: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>", palletId: "[u8;8]" }, SplitTransfer: { assetId: "u32", who: "SeedPrimitivesSignatureAccountId20", transfers: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>" }, CreateAsset: { assetId: "u32", creator: "SeedPrimitivesSignatureAccountId20", initialBalance: "u128" }, InternalWithdraw: { assetId: "u32", who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, InternalDeposit: { assetId: "u32", who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, AssetDepositSet: { assetDeposit: "u128" } } }, PalletStakingPalletEvent: { _enum: { EraPaid: { eraIndex: "u32", validatorPayout: "u128", remainder: "u128" }, Rewarded: { stash: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Slashed: { staker: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, SlashReported: { validator: "SeedPrimitivesSignatureAccountId20", fraction: "Perbill", slashEra: "u32" }, OldSlashingReportDiscarded: { sessionIndex: "u32" }, StakersElected: "Null", Bonded: { stash: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Unbonded: { stash: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Withdrawn: { stash: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, Kicked: { nominator: "SeedPrimitivesSignatureAccountId20", stash: "SeedPrimitivesSignatureAccountId20" }, StakingElectionFailed: "Null", Chilled: { stash: "SeedPrimitivesSignatureAccountId20" }, PayoutStarted: { eraIndex: "u32", validatorStash: "SeedPrimitivesSignatureAccountId20" }, ValidatorPrefsSet: { stash: "SeedPrimitivesSignatureAccountId20", prefs: "PalletStakingValidatorPrefs" }, ForceEra: { mode: "PalletStakingForcing" } } }, PalletStakingValidatorPrefs: { commission: "Compact<Perbill>", blocked: "bool" }, PalletStakingForcing: { _enum: ["NotForcing", "ForceNew", "ForceNone", "ForceAlways"] }, PalletOffencesEvent: { _enum: { Offence: { kind: "[u8;16]", timeslot: "Bytes" } } }, PalletSessionEvent: { _enum: { NewSession: { sessionIndex: "u32" } } }, PalletGrandpaEvent: { _enum: { NewAuthorities: { authoritySet: "Vec<(SpConsensusGrandpaAppPublic,u64)>" }, Paused: "Null", Resumed: "Null" } }, SpConsensusGrandpaAppPublic: "SpCoreEd25519Public", SpCoreEd25519Public: "[u8;32]", PalletImOnlineEvent: { _enum: { HeartbeatReceived: { authorityId: "PalletImOnlineSr25519AppSr25519Public" }, AllGood: "Null", SomeOffline: { offline: "Vec<(SeedPrimitivesSignatureAccountId20,PalletStakingExposure)>" } } }, PalletImOnlineSr25519AppSr25519Public: "SpCoreSr25519Public", SpCoreSr25519Public: "[u8;32]", PalletStakingExposure: { total: "Compact<u128>", own: "Compact<u128>", others: "Vec<PalletStakingIndividualExposure>" }, PalletStakingIndividualExposure: { who: "SeedPrimitivesSignatureAccountId20", value: "Compact<u128>" }, PalletSudoEvent: { _enum: { Sudid: { sudoResult: "Result<Null, SpRuntimeDispatchError>" }, KeyChanged: { oldSudoer: "Option<SeedPrimitivesSignatureAccountId20>" }, SudoAsDone: { sudoResult: "Result<Null, SpRuntimeDispatchError>" } } }, PalletTransactionPaymentEvent: { _enum: { TransactionFeePaid: { who: "SeedPrimitivesSignatureAccountId20", actualFee: "u128", tip: "u128" } } }, PalletDexEvent: { _enum: { FeeToSet: "Option<SeedPrimitivesSignatureAccountId20>", AddProvision: "(SeedPrimitivesSignatureAccountId20,u32,u128,u32,u128)", AddLiquidity: "(SeedPrimitivesSignatureAccountId20,u32,u128,u32,u128,u128,SeedPrimitivesSignatureAccountId20)", RemoveLiquidity: "(SeedPrimitivesSignatureAccountId20,u32,u128,u32,u128,u128,SeedPrimitivesSignatureAccountId20)", Swap: "(SeedPrimitivesSignatureAccountId20,Vec<u32>,u128,u128,SeedPrimitivesSignatureAccountId20)", EnableTradingPair: "PalletDexTradingPair", DisableTradingPair: "PalletDexTradingPair", ProvisioningToEnabled: "(PalletDexTradingPair,u128,u128,u128)" } }, PalletDexTradingPair: "(u32,u32)", PalletNftEvent: { _enum: { CollectionCreate: { collectionUuid: "u32", initialIssuance: "u32", maxIssuance: "Option<u32>", collectionOwner: "SeedPrimitivesSignatureAccountId20", metadataScheme: "Bytes", name: "Bytes", royaltiesSchedule: "Option<SeedPrimitivesNftRoyaltiesSchedule>", originChain: "SeedPrimitivesNftOriginChain", compatibility: "SeedPrimitivesNftCrossChainCompatibility" }, PublicMintToggle: { collectionId: "u32", enabled: "bool" }, Mint: { collectionId: "u32", start: "u32", end: "u32", owner: "SeedPrimitivesSignatureAccountId20" }, MintFeePaid: { who: "SeedPrimitivesSignatureAccountId20", collectionId: "u32", paymentAsset: "u32", paymentAmount: "u128", tokenCount: "u32" }, MintPriceSet: { collectionId: "u32", paymentAsset: "Option<u32>", mintPrice: "Option<u128>" }, BridgedMint: { collectionId: "u32", serialNumbers: "Vec<u32>", owner: "SeedPrimitivesSignatureAccountId20" }, OwnerSet: { collectionId: "u32", newOwner: "SeedPrimitivesSignatureAccountId20" }, MaxIssuanceSet: { collectionId: "u32", maxIssuance: "u32" }, BaseUriSet: { collectionId: "u32", baseUri: "Bytes" }, NameSet: { collectionId: "u32", name: "Bytes" }, RoyaltiesScheduleSet: { collectionId: "u32", royaltiesSchedule: "SeedPrimitivesNftRoyaltiesSchedule" }, Transfer: { previousOwner: "SeedPrimitivesSignatureAccountId20", collectionId: "u32", serialNumbers: "Vec<u32>", newOwner: "SeedPrimitivesSignatureAccountId20" }, Burn: { tokenOwner: "SeedPrimitivesSignatureAccountId20", collectionId: "u32", serialNumber: "u32" }, CollectionClaimed: { account: "SeedPrimitivesSignatureAccountId20", collectionId: "u32" }, UtilityFlagsSet: { collectionId: "u32", utilityFlags: "SeedPalletCommonUtilsCollectionUtilityFlags" }, TokenTransferableFlagSet: { tokenId: "(u32,u32)", transferable: "bool" }, PendingIssuanceCreated: { collectionId: "u32", issuanceId: "u32", tokenOwner: "SeedPrimitivesSignatureAccountId20", quantity: "u32", burnAuthority: "SeedPalletCommonUtilsTokenBurnAuthority" }, Issued: { tokenOwner: "SeedPrimitivesSignatureAccountId20", start: "u32", end: "u32", burnAuthority: "SeedPalletCommonUtilsTokenBurnAuthority" }, AdditionalDataSet: { tokenId: "(u32,u32)", additionalData: "Option<Bytes>" } } }, SeedPrimitivesNftRoyaltiesSchedule: { entitlements: "Vec<(SeedPrimitivesSignatureAccountId20,Permill)>" }, SeedPrimitivesNftOriginChain: { _enum: ["Ethereum", "Root", "XRPL"] }, SeedPrimitivesNftCrossChainCompatibility: { xrpl: "bool" }, SeedPalletCommonUtilsCollectionUtilityFlags: { transferable: "bool", burnable: "bool", mintable: "bool" }, SeedPalletCommonUtilsTokenBurnAuthority: { _enum: ["CollectionOwner", "TokenOwner", "Both", "Neither"] }, PalletSftEvent: { _enum: { CollectionCreate: { collectionId: "u32", collectionOwner: "SeedPrimitivesSignatureAccountId20", metadataScheme: "Bytes", name: "Bytes", royaltiesSchedule: "Option<SeedPrimitivesNftRoyaltiesSchedule>", originChain: "SeedPrimitivesNftOriginChain" }, PublicMintToggle: { tokenId: "(u32,u32)", enabled: "bool" }, Mint: { collectionId: "u32", serialNumbers: "Vec<u32>", balances: "Vec<u128>", owner: "SeedPrimitivesSignatureAccountId20" }, MintFeePaid: { who: "SeedPrimitivesSignatureAccountId20", tokenId: "(u32,u32)", paymentAsset: "u32", paymentAmount: "u128", tokenCount: "u128" }, MintPriceSet: { tokenId: "(u32,u32)", paymentAsset: "Option<u32>", mintPrice: "Option<u128>" }, OwnerSet: { collectionId: "u32", newOwner: "SeedPrimitivesSignatureAccountId20" }, MaxIssuanceSet: { tokenId: "(u32,u32)", maxIssuance: "u128" }, BaseUriSet: { collectionId: "u32", metadataScheme: "Bytes" }, NameSet: { collectionId: "u32", collectionName: "Bytes" }, TokenNameSet: { tokenId: "(u32,u32)", tokenName: "Bytes" }, RoyaltiesScheduleSet: { collectionId: "u32", royaltiesSchedule: "SeedPrimitivesNftRoyaltiesSchedule" }, TokenCreate: { tokenId: "(u32,u32)", initialIssuance: "u128", maxIssuance: "Option<u128>", tokenName: "Bytes", tokenOwner: "SeedPrimitivesSignatureAccountId20" }, Transfer: { previousOwner: "SeedPrimitivesSignatureAccountId20", collectionId: "u32", serialNumbers: "Vec<u32>", balances: "Vec<u128>", newOwner: "SeedPrimitivesSignatureAccountId20" }, Burn: { collectionId: "u32", serialNumbers: "Vec<u32>", balances: "Vec<u128>", owner: "SeedPrimitivesSignatureAccountId20" }, UtilityFlagsSet: { collectionId: "u32", utilityFlags: "SeedPalletCommonUtilsCollectionUtilityFlags" }, TokenTransferableFlagSet: { tokenId: "(u32,u32)", transferable: "bool" }, TokenBurnAuthoritySet: { tokenId: "(u32,u32)", burnAuthority: "SeedPalletCommonUtilsTokenBurnAuthority" }, PendingIssuanceCreated: { collectionId: "u32", issuanceId: "u32", serialNumbers: "Vec<u32>", balances: "Vec<u128>", tokenOwner: "SeedPrimitivesSignatureAccountId20" }, Issued: { tokenOwner: "SeedPrimitivesSignatureAccountId20", serialNumbers: "Vec<u32>", balances: "Vec<u128>" }, AdditionalDataSet: { tokenId: "(u32,u32)", additionalData: "Option<Bytes>" } } }, PalletXrplBridgeEvent: { _enum: { TransactionAdded: "(u64,H512)", TransactionChallenge: "(u64,H512)", PaymentDelaySet: { assetId: "u32", paymentThreshold: "u128", delay: "u32" }, PaymentDelayRemoved: { assetId: "u32" }, ProcessingOk: "(u64,H512)", ProcessingFailed: "(u64,H512,SpRuntimeDispatchError)", NotSupportedTransaction: "Null", WithdrawRequest: { proofId: "u64", sender: "SeedPrimitivesSignatureAccountId20", assetId: "u32", amount: "u128", destination: "H160" }, WithdrawDelayed: { sender: "SeedPrimitivesSignatureAccountId20", assetId: "u32", amount: "u128", destination: "H160", delayedPaymentId: "u64", paymentBlock: "u32" }, RelayerAdded: "SeedPrimitivesSignatureAccountId20", RelayerRemoved: "SeedPrimitivesSignatureAccountId20", DoorAddressSet: { doorAccount: "PalletXrplBridgeXrplDoorAccount", address: "Option<H160>" }, DoorNextTicketSequenceParamSet: { doorAccount: "PalletXrplBridgeXrplDoorAccount", ticketSequenceStartNext: "u32", ticketBucketSizeNext: "u32" }, DoorTicketSequenceParamSet: { doorAccount: "PalletXrplBridgeXrplDoorAccount", ticketSequence: "u32", ticketSequenceStart: "u32", ticketBucketSize: "u32" }, LedgerIndexManualPrune: { ledgerIndex: "u32", totalCleared: "u32" }, TicketSequenceThresholdReached: { doorAccount: "PalletXrplBridgeXrplDoorAccount", currentTicket: "u32" }, XrplAssetMapSet: { assetId: "u32", xrplCurrency: "PalletXrplBridgeXrplCurrency" }, XrplAssetMapRemoved: { assetId: "u32", xrplCurrency: "PalletXrplBridgeXrplCurrency" }, XrplTxSignRequest: { proofId: "u64", tx: "PalletXrplBridgeXrplTransaction" } } }, PalletXrplBridgeXrplDoorAccount: { _enum: ["Main", "NFT"] }, PalletXrplBridgeXrplCurrency: { symbol: "PalletXrplBridgeXrplCurrencyType", issuer: "H160" }, PalletXrplBridgeXrplCurrencyType: { _enum: { Standard: "[u8;3]", NonStandard: "[u8;20]" } }, PalletXrplBridgeXrplTransaction: { _enum: { NFTokenAcceptOffer: "PalletXrplBridgeNfTokenAcceptOfferTransaction", NFTokenCreateOffer: "PalletXrplBridgeNfTokenCreateOfferTransaction" } }, PalletXrplBridgeNfTokenAcceptOfferTransaction: { nftokenSellOffer: "[u8;32]", txFee: "u64", txTicketSequence: "u32", account: "H160" }, PalletXrplBridgeNfTokenCreateOfferTransaction: { nftokenId: "[u8;32]", txFee: "u64", txTicketSequence: "u32", account: "H160", destination: "H160" }, PalletXrplEvent: { _enum: { XRPLExtrinsicExecuted: { publicKey: "PalletXrplXrplPublicKey", caller: "SeedPrimitivesSignatureAccountId20", rAddress: "Text", call: "Call" } } }, PalletXrplXrplPublicKey: { _enum: { ED25519: "SpCoreEd25519Public", ECDSA: "SpCoreEcdsaPublic" } }, SpCoreEcdsaPublic: "[u8;33]", FrameSystemCall: { _enum: { remark: { remark: "Bytes" }, set_heap_pages: { pages: "u64" }, set_code: { code: "Bytes" }, set_code_without_checks: { code: "Bytes" }, set_storage: { items: "Vec<(Bytes,Bytes)>" }, kill_storage: { _alias: { keys_: "keys" }, keys_: "Vec<Bytes>" }, kill_prefix: { prefix: "Bytes", subkeys: "u32" }, remark_with_event: { remark: "Bytes" } } }, PalletBabeCall: { _enum: { report_equivocation: { equivocationProof: "SpConsensusSlotsEquivocationProof", keyOwnerProof: "SpSessionMembershipProof" }, report_equivocation_unsigned: { equivocationProof: "SpConsensusSlotsEquivocationProof", keyOwnerProof: "SpSessionMembershipProof" }, plan_config_change: { config: "SpConsensusBabeDigestsNextConfigDescriptor" } } }, SpConsensusSlotsEquivocationProof: { offender: "SpConsensusBabeAppPublic", slot: "u64", firstHeader: "SpRuntimeHeader", secondHeader: "SpRuntimeHeader" }, SpRuntimeHeader: { parentHash: "H256", number: "Compact<u32>", stateRoot: "H256", extrinsicsRoot: "H256", digest: "SpRuntimeDigest" }, SpConsensusBabeAppPublic: "SpCoreSr25519Public", SpSessionMembershipProof: { session: "u32", trieNodes: "Vec<Bytes>", validatorCount: "u32" }, SpConsensusBabeDigestsNextConfigDescriptor: { _enum: { __Unused0: "Null", V1: { c: "(u64,u64)", allowedSlots: "SpConsensusBabeAllowedSlots" } } }, SpConsensusBabeAllowedSlots: { _enum: ["PrimarySlots", "PrimaryAndSecondaryPlainSlots", "PrimaryAndSecondaryVRFSlots"] }, PalletTimestampCall: { _enum: { set: { now: "Compact<u64>" } } }, PalletSchedulerCall: { _enum: { schedule: { when: "u32", maybePeriodic: "Option<(u32,u32)>", priority: "u8", call: "Call" }, cancel: { when: "u32", index: "u32" }, schedule_named: { id: "[u8;32]", when: "u32", maybePeriodic: "Option<(u32,u32)>", priority: "u8", call: "Call" }, cancel_named: { id: "[u8;32]" }, schedule_after: { after: "u32", maybePeriodic: "Option<(u32,u32)>", priority: "u8", call: "Call" }, schedule_named_after: { id: "[u8;32]", after: "u32", maybePeriodic: "Option<(u32,u32)>", priority: "u8", call: "Call" } } }, PalletUtilityCall: { _enum: { batch: { calls: "Vec<Call>" }, as_derivative: { index: "u16", call: "Call" }, batch_all: { calls: "Vec<Call>" }, dispatch_as: { asOrigin: "SeedRuntimeOriginCaller", call: "Call" }, force_batch: { calls: "Vec<Call>" }, with_weight: { call: "Call", weight: "SpWeightsWeightV2Weight" } } }, SeedRuntimeOriginCaller: { _enum: { system: "FrameSupportDispatchRawOrigin", __Unused1: "Null", __Unused2: "Null", Void: "SpCoreVoid", __Unused4: "Null", __Unused5: "Null", __Unused6: "Null", __Unused7: "Null", __Unused8: "Null", __Unused9: "Null", __Unused10: "Null", __Unused11: "Null", __Unused12: "Null", __Unused13: "Null", __Unused14: "Null", __Unused15: "Null", __Unused16: "Null", __Unused17: "Null", __Unused18: "Null", __Unused19: "Null", __Unused20: "Null", __Unused21: "Null", __Unused22: "Null", __Unused23: "Null", __Unused24: "Null", __Unused25: "Null", Ethereum: "PalletEthereumRawOrigin", __Unused27: "Null", __Unused28: "Null", __Unused29: "Null", __Unused30: "Null", __Unused31: "Null", __Unused32: "Null", __Unused33: "Null", __Unused34: "Null", Xrpl: "SeedPrimitivesSignatureAccountId20" } }, FrameSupportDispatchRawOrigin: { _enum: { Root: "Null", Signed: "SeedPrimitivesSignatureAccountId20", None: "Null" } }, PalletEthereumRawOrigin: { _enum: { EthereumTransaction: "H160" } }, SpCoreVoid: "Null", PalletRecoveryCall: { _enum: { as_recovered: { account: "SeedPrimitivesSignatureAccountId20", call: "Call" }, set_recovered: { lost: "SeedPrimitivesSignatureAccountId20", rescuer: "SeedPrimitivesSignatureAccountId20" }, create_recovery: { friends: "Vec<SeedPrimitivesSignatureAccountId20>", threshold: "u16", delayPeriod: "u32" }, initiate_recovery: { account: "SeedPrimitivesSignatureAccountId20" }, vouch_recovery: { lost: "SeedPrimitivesSignatureAccountId20", rescuer: "SeedPrimitivesSignatureAccountId20" }, claim_recovery: { account: "SeedPrimitivesSignatureAccountId20" }, close_recovery: { rescuer: "SeedPrimitivesSignatureAccountId20" }, remove_recovery: "Null", cancel_recovered: { account: "SeedPrimitivesSignatureAccountId20" } } }, PalletMultisigCall: { _enum: { as_multi_threshold_1: { otherSignatories: "Vec<SeedPrimitivesSignatureAccountId20>", call: "Call" }, as_multi: { threshold: "u16", otherSignatories: "Vec<SeedPrimitivesSignatureAccountId20>", maybeTimepoint: "Option<PalletMultisigTimepoint>", call: "Call", maxWeight: "SpWeightsWeightV2Weight" }, approve_as_multi: { threshold: "u16", otherSignatories: "Vec<SeedPrimitivesSignatureAccountId20>", maybeTimepoint: "Option<PalletMultisigTimepoint>", callHash: "[u8;32]", maxWeight: "SpWeightsWeightV2Weight" }, cancel_as_multi: { threshold: "u16", otherSignatories: "Vec<SeedPrimitivesSignatureAccountId20>", timepoint: "PalletMultisigTimepoint", callHash: "[u8;32]" } } }, PalletBalancesCall: { _enum: { transfer_allow_death: { dest: "SeedPrimitivesSignatureAccountId20", value: "Compact<u128>" }, set_balance_deprecated: { who: "SeedPrimitivesSignatureAccountId20", newFree: "Compact<u128>", oldReserved: "Compact<u128>" }, force_transfer: { source: "SeedPrimitivesSignatureAccountId20", dest: "SeedPrimitivesSignatureAccountId20", value: "Compact<u128>" }, transfer_keep_alive: { dest: "SeedPrimitivesSignatureAccountId20", value: "Compact<u128>" }, transfer_all: { dest: "SeedPrimitivesSignatureAccountId20", keepAlive: "bool" }, force_unreserve: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, upgrade_accounts: { who: "Vec<SeedPrimitivesSignatureAccountId20>" }, transfer: { dest: "SeedPrimitivesSignatureAccountId20", value: "Compact<u128>" }, force_set_balance: { who: "SeedPrimitivesSignatureAccountId20", newFree: "Compact<u128>" } } }, PalletAssetsCall: { _enum: { create: { id: "u32", admin: "SeedPrimitivesSignatureAccountId20", minBalance: "u128" }, force_create: { id: "u32", owner: "SeedPrimitivesSignatureAccountId20", isSufficient: "bool", minBalance: "Compact<u128>" }, start_destroy: { id: "u32" }, destroy_accounts: { id: "u32" }, destroy_approvals: { id: "u32" }, finish_destroy: { id: "u32" }, mint: { id: "u32", beneficiary: "SeedPrimitivesSignatureAccountId20", amount: "Compact<u128>" }, burn: { id: "u32", who: "SeedPrimitivesSignatureAccountId20", amount: "Compact<u128>" }, transfer: { id: "u32", target: "SeedPrimitivesSignatureAccountId20", amount: "Compact<u128>" }, transfer_keep_alive: { id: "u32", target: "SeedPrimitivesSignatureAccountId20", amount: "Compact<u128>" }, force_transfer: { id: "u32", source: "SeedPrimitivesSignatureAccountId20", dest: "SeedPrimitivesSignatureAccountId20", amount: "Compact<u128>" }, freeze: { id: "u32", who: "SeedPrimitivesSignatureAccountId20" }, thaw: { id: "u32", who: "SeedPrimitivesSignatureAccountId20" }, freeze_asset: { id: "u32" }, thaw_asset: { id: "u32" }, transfer_ownership: { id: "u32", owner: "SeedPrimitivesSignatureAccountId20" }, set_team: { id: "u32", issuer: "SeedPrimitivesSignatureAccountId20", admin: "SeedPrimitivesSignatureAccountId20", freezer: "SeedPrimitivesSignatureAccountId20" }, set_metadata: { id: "u32", name: "Bytes", symbol: "Bytes", decimals: "u8" }, clear_metadata: { id: "u32" }, force_set_metadata: { id: "u32", name: "Bytes", symbol: "Bytes", decimals: "u8", isFrozen: "bool" }, force_clear_metadata: { id: "u32" }, force_asset_status: { id: "u32", owner: "SeedPrimitivesSignatureAccountId20", issuer: "SeedPrimitivesSignatureAccountId20", admin: "SeedPrimitivesSignatureAccountId20", freezer: "SeedPrimitivesSignatureAccountId20", minBalance: "Compact<u128>", isSufficient: "bool", isFrozen: "bool" }, approve_transfer: { id: "u32", delegate: "SeedPrimitivesSignatureAccountId20", amount: "Compact<u128>" }, cancel_approval: { id: "u32", delegate: "SeedPrimitivesSignatureAccountId20" }, force_cancel_approval: { id: "u32", owner: "SeedPrimitivesSignatureAccountId20", delegate: "SeedPrimitivesSignatureAccountId20" }, transfer_approved: { id: "u32", owner: "SeedPrimitivesSignatureAccountId20", destination: "SeedPrimitivesSignatureAccountId20", amount: "Compact<u128>" }, touch: { id: "u32" }, refund: { id: "u32", allowBurn: "bool" }, set_min_balance: { id: "u32", minBalance: "u128" }, touch_other: { id: "u32", who: "SeedPrimitivesSignatureAccountId20" }, refund_other: { id: "u32", who: "SeedPrimitivesSignatureAccountId20" }, block: { id: "u32", who: "SeedPrimitivesSignatureAccountId20" } } }, PalletAssetsExtCall: { _enum: { set_asset_deposit: { assetDeposit: "u128" }, create_asset: { name: "Bytes", symbol: "Bytes", decimals: "u8", minBalance: "Option<u128>", owner: "Option<SeedPrimitivesSignatureAccountId20>" }, mint: { assetId: "u32", beneficiary: "SeedPrimitivesSignatureAccountId20", amount: "Compact<u128>" }, transfer: { assetId: "u32", destination: "SeedPrimitivesSignatureAccountId20", amount: "Compact<u128>", keepAlive: "bool" }, burn_from: { assetId: "u32", who: "SeedPrimitivesSignatureAccountId20", amount: "Compact<u128>" } } }, PalletStakingPalletCall: { _enum: { bond: { value: "Compact<u128>", payee: "PalletStakingRewardDestination" }, bond_extra: { maxAdditional: "Compact<u128>" }, unbond: { value: "Compact<u128>" }, withdraw_unbonded: { numSlashingSpans: "u32" }, validate: { prefs: "PalletStakingValidatorPrefs" }, nominate: { targets: "Vec<SeedPrimitivesSignatureAccountId20>" }, chill: "Null", set_payee: { payee: "PalletStakingRewardDestination" }, set_controller: "Null", set_validator_count: { _alias: { new_: "new" }, new_: "Compact<u32>" }, increase_validator_count: { additional: "Compact<u32>" }, scale_validator_count: { factor: "Percent" }, force_no_eras: "Null", force_new_era: "Null", set_invulnerables: { invulnerables: "Vec<SeedPrimitivesSignatureAccountId20>" }, force_unstake: { stash: "SeedPrimitivesSignatureAccountId20", numSlashingSpans: "u32" }, force_new_era_always: "Null", cancel_deferred_slash: { era: "u32", slashIndices: "Vec<u32>" }, payout_stakers: { validatorStash: "SeedPrimitivesSignatureAccountId20", era: "u32" }, rebond: { value: "Compact<u128>" }, reap_stash: { stash: "SeedPrimitivesSignatureAccountId20", numSlashingSpans: "u32" }, kick: { who: "Vec<SeedPrimitivesSignatureAccountId20>" }, set_staking_configs: { minNominatorBond: "PalletStakingPalletConfigOpU128", minValidatorBond: "PalletStakingPalletConfigOpU128", maxNominatorCount: "PalletStakingPalletConfigOpU32", maxValidatorCount: "PalletStakingPalletConfigOpU32", chillThreshold: "PalletStakingPalletConfigOpPercent", minCommission: "PalletStakingPalletConfigOpPerbill" }, chill_other: { controller: "SeedPrimitivesSignatureAccountId20" }, force_apply_min_commission: { validatorStash: "SeedPrimitivesSignatureAccountId20" }, set_min_commission: { _alias: { new_: "new" }, new_: "Perbill" } } }, PalletStakingRewardDestination: { _enum: { Staked: "Null", Stash: "Null", Controller: "Null", Account: "SeedPrimitivesSignatureAccountId20", None: "Null" } }, PalletStakingPalletConfigOpU128: { _enum: { Noop: "Null", Set: "u128", Remove: "Null" } }, PalletStakingPalletConfigOpU32: { _enum: { Noop: "Null", Set: "u32", Remove: "Null" } }, PalletStakingPalletConfigOpPercent: { _enum: { Noop: "Null", Set: "Percent", Remove: "Null" } }, PalletStakingPalletConfigOpPerbill: { _enum: { Noop: "Null", Set: "Perbill", Remove: "Null" } }, PalletSessionCall: { _enum: { set_keys: { _alias: { keys_: "keys" }, keys_: "SeedRuntimeSessionKeys", proof: "Bytes" }, purge_keys: "Null" } }, SeedRuntimeSessionKeys: { babe: "SpConsensusBabeAppPublic", imOnline: "PalletImOnlineSr25519AppSr25519Public", grandpa: "SpConsensusGrandpaAppPublic", ethy: "SeedPrimitivesEthyCryptoAppCryptoPublic" }, SeedPrimitivesEthyCryptoAppCryptoPublic: "SpCoreEcdsaPublic", PalletGrandpaCall: { _enum: { report_equivocation: { equivocationProof: "SpConsensusGrandpaEquivocationProof", keyOwnerProof: "SpSessionMembershipProof" }, report_equivocation_unsigned: { equivocationProof: "SpConsensusGrandpaEquivocationProof", keyOwnerProof: "SpSessionMembershipProof" }, note_stalled: { delay: "u32", bestFinalizedBlockNumber: "u32" } } }, SpConsensusGrandpaEquivocationProof: { setId: "u64", equivocation: "SpConsensusGrandpaEquivocation" }, SpConsensusGrandpaEquivocation: { _enum: { Prevote: "FinalityGrandpaEquivocationPrevote", Precommit: "FinalityGrandpaEquivocationPrecommit" } }, FinalityGrandpaEquivocationPrevote: { roundNumber: "u64", identity: "SpConsensusGrandpaAppPublic", first: "(FinalityGrandpaPrevote,SpConsensusGrandpaAppSignature)", second: "(FinalityGrandpaPrevote,SpConsensusGrandpaAppSignature)" }, FinalityGrandpaPrevote: { targetHash: "H256", targetNumber: "u32" }, SpConsensusGrandpaAppSignature: "SpCoreEd25519Signature", SpCoreEd25519Signature: "[u8;64]", FinalityGrandpaEquivocationPrecommit: { roundNumber: "u64", identity: "SpConsensusGrandpaAppPublic", first: "(FinalityGrandpaPrecommit,SpConsensusGrandpaAppSignature)", second: "(FinalityGrandpaPrecommit,SpConsensusGrandpaAppSignature)" }, FinalityGrandpaPrecommit: { targetHash: "H256", targetNumber: "u32" }, PalletImOnlineCall: { _enum: { heartbeat: { heartbeat: "PalletImOnlineHeartbeat", signature: "PalletImOnlineSr25519AppSr25519Signature" } } }, PalletImOnlineHeartbeat: { blockNumber: "u32", sessionIndex: "u32", authorityIndex: "u32", validatorsLen: "u32" }, PalletImOnlineSr25519AppSr25519Signature: "SpCoreSr25519Signature", SpCoreSr25519Signature: "[u8;64]", PalletSudoCall: { _enum: { sudo: { call: "Call" }, sudo_unchecked_weight: { call: "Call", weight: "SpWeightsWeightV2Weight" }, set_key: { _alias: { new_: "new" }, new_: "SeedPrimitivesSignatureAccountId20" }, sudo_as: { who: "SeedPrimitivesSignatureAccountId20", call: "Call" } } }, PalletDexCall: { _enum: { set_fee_to: { feeTo: "Option<SeedPrimitivesSignatureAccountId20>" }, swap_with_exact_supply: { amountIn: "Compact<u128>", amountOutMin: "Compact<u128>", path: "Vec<u32>", to: "Option<SeedPrimitivesSignatureAccountId20>", deadline: "Option<u32>" }, swap_with_exact_target: { amountOut: "Compact<u128>", amountInMax: "Compact<u128>", path: "Vec<u32>", to: "Option<SeedPrimitivesSignatureAccountId20>", deadline: "Option<u32>" }, add_liquidity: { tokenA: "u32", tokenB: "u32", amountADesired: "Compact<u128>", amountBDesired: "Compact<u128>", amountAMin: "Compact<u128>", amountBMin: "Compact<u128>", to: "Option<SeedPrimitivesSignatureAccountId20>", deadline: "Option<u32>" }, remove_liquidity: { tokenA: "u32", tokenB: "u32", liquidity: "Compact<u128>", amountAMin: "Compact<u128>", amountBMin: "Compact<u128>", to: "Option<SeedPrimitivesSignatureAccountId20>", deadline: "Option<u32>" }, reenable_trading_pair: { tokenA: "u32", tokenB: "u32" }, disable_trading_pair: { tokenA: "u32", tokenB: "u32" } } }, PalletNftCall: { _enum: { claim_unowned_collection: { collectionId: "u32", newOwner: "SeedPrimitivesSignatureAccountId20" }, set_owner: { collectionId: "u32", newOwner: "SeedPrimitivesSignatureAccountId20" }, set_max_issuance: { collectionId: "u32", maxIssuance: "u32" }, set_base_uri: { collectionId: "u32", baseUri: "Bytes" }, create_collection: { name: "Bytes", initialIssuance: "u32", maxIssuance: "Option<u32>", tokenOwner: "Option<SeedPrimitivesSignatureAccountId20>", metadataScheme: "Bytes", royaltiesSchedule: "Option<SeedPrimitivesNftRoyaltiesSchedule>", crossChainCompatibility: "SeedPrimitivesNftCrossChainCompatibility" }, toggle_public_mint: { collectionId: "u32", enabled: "bool" }, set_mint_fee: { collectionId: "u32", pricingDetails: "Option<(u32,u128)>" }, mint: { collectionId: "u32", quantity: "u32", tokenOwner: "Option<SeedPrimitivesSignatureAccountId20>" }, transfer: { collectionId: "u32", serialNumbers: "Vec<u32>", newOwner: "SeedPrimitivesSignatureAccountId20" }, burn: { tokenId: "(u32,u32)" }, set_name: { collectionId: "u32", name: "Bytes" }, set_royalties_schedule: { collectionId: "u32", royaltiesSchedule: "SeedPrimitivesNftRoyaltiesSchedule" }, set_utility_flags: { collectionId: "u32", utilityFlags: "SeedPalletCommonUtilsCollectionUtilityFlags" }, set_token_transferable_flag: { tokenId: "(u32,u32)", transferable: "bool" }, issue_soulbound: { collectionId: "u32", quantity: "u32", tokenOwner: "SeedPrimitivesSignatureAccountId20", burnAuthority: "SeedPalletCommonUtilsTokenBurnAuthority" }, accept_soulbound_issuance: { collectionId: "u32", issuanceId: "u32" }, set_additional_data: { tokenId: "(u32,u32)", additionalData: "Option<Bytes>" }, mint_with_additional_data: { collectionId: "u32", tokenOwner: "Option<SeedPrimitivesSignatureAccountId20>", additionalData: "Bytes" } } }, PalletSftCall: { _enum: { create_collection: { collectionName: "Bytes", collectionOwner: "Option<SeedPrimitivesSignatureAccountId20>", metadataScheme: "Bytes", royaltiesSchedule: "Option<SeedPrimitivesNftRoyaltiesSchedule>" }, create_token: { collectionId: "u32", tokenName: "Bytes", initialIssuance: "u128", maxIssuance: "Option<u128>", tokenOwner: "Option<SeedPrimitivesSignatureAccountId20>" }, mint: { collectionId: "u32", serialNumbers: "Vec<(u32,u128)>", tokenOwner: "Option<SeedPrimitivesSignatureAccountId20>" }, transfer: { collectionId: "u32", serialNumbers: "Vec<(u32,u128)>", newOwner: "SeedPrimitivesSignatureAccountId20" }, burn: { collectionId: "u32", serialNumbers: "Vec<(u32,u128)>" }, set_owner: { collectionId: "u32", newOwner: "SeedPrimitivesSignatureAccountId20" }, set_max_issuance: { tokenId: "(u32,u32)", maxIssuance: "u128" }, set_base_uri: { collectionId: "u32", metadataScheme: "Bytes" }, set_name: { collectionId: "u32", collectionName: "Bytes" }, set_royalties_schedule: { collectionId: "u32", royaltiesSchedule: "SeedPrimitivesNftRoyaltiesSchedule" }, toggle_public_mint: { tokenId: "(u32,u32)", enabled: "bool" }, set_mint_fee: { tokenId: "(u32,u32)", pricingDetails: "Option<(u32,u128)>" }, set_utility_flags: { collectionId: "u32", utilityFlags: "SeedPalletCommonUtilsCollectionUtilityFlags" }, set_token_name: { tokenId: "(u32,u32)", tokenName: "Bytes" }, set_token_transferable_flag: { tokenId: "(u32,u32)", transferable: "bool" }, set_token_burn_authority: { tokenId: "(u32,u32)", burnAuthority: "SeedPalletCommonUtilsTokenBurnAuthority" }, burn_as_collection_owner: { tokenOwner: "SeedPrimitivesSignatureAccountId20", collectionId: "u32", serialNumbers: "Vec<(u32,u128)>" }, issue_soulbound: { collectionId: "u32", serialNumbers: "Vec<(u32,u128)>", tokenOwner: "SeedPrimitivesSignatureAccountId20" }, accept_soulbound_issuance: { collectionId: "u32", issuanceId: "u32" }, set_additional_data: { tokenId: "(u32,u32)", additionalData: "Option<Bytes>" }, create_token_with_additional_data: { collectionId: "u32", tokenName: "Bytes", initialIssuance: "u128", maxIssuance: "Option<u128>", tokenOwner: "Option<SeedPrimitivesSignatureAccountId20>", additionalData: "Bytes" } } }, PalletXrplBridgeCall: { _enum: { submit_transaction: { ledgerIndex: "u64", transactionHash: "H512", transaction: "PalletXrplBridgeXrplTxData", timestamp: "u64" }, submit_challenge: { transactionHash: "H512" }, set_payment_delay: { assetId: "u32", paymentDelay: "Option<(u128,u32)>" }, withdraw_xrp: { amount: "u128", destination: "H160" }, withdraw_xrp_with_destination_tag: { amount: "u128", destination: "H160", destinationTag: "u32" }, add_relayer: { relayer: "SeedPrimitivesSignatureAccountId20" }, remove_relayer: { relayer: "SeedPrimitivesSignatureAccountId20" }, set_door_tx_fee: { doorType: "PalletXrplBridgeXrplDoorAccount", fee: "u64" }, set_xrp_source_tag: { sourceTag: "u32" }, set_door_address: { doorAccount: "PalletXrplBridgeXrplDoorAccount", doorAddress: "Option<H160>" }, set_ticket_sequence_next_allocation: { doorAccount: "PalletXrplBridgeXrplDoorAccount", startTicketSequence: "u32", ticketBucketSize: "u32" }, set_ticket_sequence_current_allocation: { doorAccount: "PalletXrplBridgeXrplDoorAccount", ticketSequence: "u32", startTicketSequence: "u32", ticketBucketSize: "u32" }, reset_settled_xrpl_tx_data: { highestSettledLedgerIndex: "u32", submissionWindowWidth: "u32", highestPrunedLedgerIndex: "Option<u32>", settledTxData: "Option<Vec<(H512,u32,PalletXrplBridgeXrpTransaction,SeedPrimitivesSignatureAccountId20)>>" }, prune_settled_ledger_index: { ledgerIndex: "u32" }, set_xrpl_asset_map: { assetId: "u32", xrplCurrency: "Option<PalletXrplBridgeXrplCurrency>" }, withdraw: { assetId: "u32", amount: "u128", destination: "H160", destinationTag: "Option<u32>" }, generate_nft_accept_offer: { nftokenSellOffer: "[u8;32]" }, withdraw_nft: { tokenId: "(u32,u32)", destination: "H160" } } }, PalletXrplBridgeXrplTxData: { _enum: { Payment: { amount: "u128", address: "H160" }, CurrencyPayment: { amount: "u128", address: "H160", currency: "PalletXrplBridgeXrplCurrency" }, Xls20: { tokenId: "[u8;32]", address: "H160" } } }, PalletXrplBridgeXrpTransaction: { transactionHash: "H512", transaction: "PalletXrplBridgeXrplTxData", timestamp: "u64" }, PalletXrplCall: { _enum: { transact: { encodedMsg: "Bytes", signature: "Bytes", call: "Call" } } }, PalletTokenApprovalsCall: { _enum: { erc721_approval: { operatorAccount: "SeedPrimitivesSignatureAccountId20", tokenId: "(u32,u32)" }, erc721_remove_approval: { tokenId: "(u32,u32)" }, erc20_approval: { spender: "SeedPrimitivesSignatureAccountId20", assetId: "u32", amount: "u128" }, erc20_update_approval: { spender: "SeedPrimitivesSignatureAccountId20", assetId: "u32", amount: "u128" }, erc721_approval_for_all: { operatorAccount: "SeedPrimitivesSignatureAccountId20", collectionUuid: "u32", approved: "bool" }, erc1155_approval_for_all: { operatorAccount: "SeedPrimitivesSignatureAccountId20", collectionUuid: "u32", approved: "bool" } } }, PalletEchoCall: { _enum: { ping: { destination: "H160" } } }, PalletMarketplaceCall: { _enum: { register_marketplace: { marketplaceAccount: "Option<SeedPrimitivesSignatureAccountId20>", entitlement: "Permill" }, sell_nft: { collectionId: "u32", serialNumbers: "Vec<u32>", buyer: "Option<SeedPrimitivesSignatureAccountId20>", paymentAsset: "u32", fixedPrice: "u128", duration: "Option<u32>", marketplaceId: "Option<u32>" }, sell: { tokens: "PalletMarketplaceListingTokens", buyer: "Option<SeedPrimitivesSignatureAccountId20>", paymentAsset: "u32", fixedPrice: "u128", duration: "Option<u32>", marketplaceId: "Option<u32>" }, update_fixed_price: { listingId: "u128", newPrice: "u128" }, buy: { listingId: "u128" }, buy_multi: { listingIds: "Vec<u128>" }, auction_nft: { collectionId: "u32", serialNumbers: "Vec<u32>", paymentAsset: "u32", reservePrice: "u128", duration: "Option<u32>", marketplaceId: "Option<u32>" }, auction: { tokens: "PalletMarketplaceListingTokens", paymentAsset: "u32", reservePrice: "u128", duration: "Option<u32>", marketplaceId: "Option<u32>" }, bid: { listingId: "u128", amount: "u128" }, cancel_sale: { listingId: "u128" }, make_simple_offer: { tokenId: "(u32,u32)", amount: "u128", assetId: "u32", marketplaceId: "Option<u32>" }, cancel_offer: { offerId: "u64" }, accept_offer: { offerId: "u64" }, set_fee_to: { feeTo: "Option<SeedPrimitivesSignatureAccountId20>" } } }, PalletMarketplaceListingTokens: { _enum: { Nft: "PalletMarketplaceNftListing", Sft: "PalletMarketplaceSftListing" } }, PalletMarketplaceNftListing: { collectionId: "u32", serialNumbers: "Vec<u32>" }, PalletMarketplaceSftListing: { collectionId: "u32", serialNumbers: "Vec<(u32,u128)>" }, PalletPreimageCall: { _enum: { note_preimage: { bytes: "Bytes" }, unnote_preimage: { _alias: { hash_: "hash" }, hash_: "H256" }, request_preimage: { _alias: { hash_: "hash" }, hash_: "H256" }, unrequest_preimage: { _alias: { hash_: "hash" }, hash_: "H256" } } }, PalletVortexDistributionCall: { _enum: { set_admin: { _alias: { new_: "new" }, new_: "SeedPrimitivesSignatureAccountId20" }, create_vtx_dist: "Null", disable_vtx_dist: { id: "u32" }, set_fee_pot_asset_balances: { id: "u32", assetsBalances: "Vec<(u32,u128)>" }, set_vtx_vault_asset_balances: { id: "u32", assetsBalances: "Vec<(u32,u128)>" }, set_vtx_total_supply: { id: "u32", supply: "u128" }, register_reward_points: { id: "u32", rewardPoints: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>" }, register_work_points: { id: "u32", workPoints: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>" }, set_consider_current_balance: { value: "bool" }, set_disable_redeem: { value: "bool" }, set_enable_manual_reward_input: { value: "bool" }, set_asset_prices: { id: "u32", assetPrices: "Vec<(u32,u128)>" }, trigger_vtx_distribution: { id: "u32" }, set_vtx_vault_redeem_asset_list: { assetsList: "Vec<u32>" }, start_vtx_dist: { id: "u32" }, pay_unsigned: { id: "u32", currentBlock: "u32" }, redeem_tokens_from_vault: { vortexTokenAmount: "u128" }, register_rewards: { id: "u32", rewards: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>" } } }, PalletPartnerAttributionCall: { _enum: { register_partner_account: { account: "SeedPrimitivesSignatureAccountId20" }, update_partner_account: { partnerId: "Compact<u128>", partnerAccount: "SeedPrimitivesSignatureAccountId20" }, attribute_account: { partnerId: "u128" }, upgrade_partner: { partnerId: "Compact<u128>", feePercentage: "Compact<Permill>" }, create_futurepass_with_partner: { partnerId: "u128", account: "SeedPrimitivesSignatureAccountId20" } } }, PalletFeeProxyCall: { _enum: { call_with_fee_preferences: { paymentAsset: "u32", maxPayment: "u128", call: "Call" } } }, PalletFeeControlCall: { _enum: { set_evm_base_fee: { value: "U256" }, set_weight_multiplier: { value: "Perbill" }, set_length_multiplier: { value: "u128" } } }, PalletXls20Call: { _enum: { set_relayer: { relayer: "SeedPrimitivesSignatureAccountId20" }, set_xls20_fee: { newFee: "u128" }, enable_xls20_compatibility: { collectionId: "u32" }, re_request_xls20_mint: { collectionId: "u32", serialNumbers: "Vec<u32>" }, fulfill_xls20_mint: { collectionId: "u32", tokenMappings: "Vec<(u32,[u8;32])>" }, set_collection_mappings: { mappings: "Vec<(u32,PalletXls20Xls20Collection)>" } } }, PalletXls20Xls20Collection: { issuerAddress: "H160", taxon: "u32" }, PalletDoughnutCall: { _enum: { transact: { call: "Call", doughnut: "Bytes", nonce: "u32", genesisHash: "H256", tip: "u64", signature: "Bytes" }, revoke_doughnut: { doughnut: "Bytes", revoke: "bool" }, revoke_holder: { holder: "SeedPrimitivesSignatureAccountId20", revoke: "bool" }, update_whitelisted_holders: { holder: "SeedPrimitivesSignatureAccountId20", add: "bool" } } }, PalletMaintenanceModeCall: { _enum: { enable_maintenance_mode: { enabled: "bool" }, block_account: { account: "SeedPrimitivesSignatureAccountId20", blocked: "bool" }, block_evm_target: { targetAddress: "H160", blocked: "bool" }, block_call: { palletName: "Bytes", callName: "Bytes", blocked: "bool" }, block_pallet: { palletName: "Bytes", blocked: "bool" } } }, PalletCrowdsaleCall: { _enum: { initialize: { paymentAssetId: "u32", collectionId: "u32", softCapPrice: "u128", saleDuration: "u32", voucherName: "Option<Bytes>", voucherSymbol: "Option<Bytes>" }, enable: { saleId: "u64" }, participate: { saleId: "u64", amount: "u128" }, distribute_crowdsale_rewards: "Null", claim_voucher: { saleId: "u64" }, redeem_voucher: { saleId: "u64", quantity: "u32" }, proxy_vault_call: { saleId: "u64", call: "Call" }, try_force_distribution: { saleId: "u64" } } }, PalletNfiCall: { _enum: { set_relayer: { relayer: "SeedPrimitivesSignatureAccountId20" }, set_fee_to: { feeTo: "Option<SeedPrimitivesSignatureAccountId20>" }, set_fee_details: { subType: "PalletNfiNfiSubType", feeDetails: "Option<PalletNfiFeeDetails>" }, enable_nfi_for_trn_collection: { collectionId: "u32", subType: "PalletNfiNfiSubType" }, manual_data_request: { tokenId: "PalletNfiMultiChainTokenId", subType: "PalletNfiNfiSubType" }, submit_nfi_data: { tokenId: "PalletNfiMultiChainTokenId", dataItem: "PalletNfiNfiDataType" } } }, PalletNfiNfiSubType: { _enum: ["NFI"] }, PalletNfiFeeDetails: { assetId: "u32", amount: "u128", receiver: "SeedPrimitivesSignatureAccountId20" }, PalletNfiMultiChainTokenId: { chainId: "u64", collectionId: "PalletNfiGenericCollectionId", serialNumber: "PalletNfiGenericSerialNumber" }, PalletNfiGenericCollectionId: { _enum: { U32: "u32", U64: "u64", U128: "u128", H160: "H160", H256: "H256", Bytes: "Bytes", Empty: "Null", U256: "U256" } }, PalletNfiGenericSerialNumber: { _enum: { U32: "u32", U64: "u64", U128: "u128", Bytes: "Bytes", U256: "U256" } }, PalletNfiNfiDataType: { _enum: { NFI: "PalletNfiNfiMatrix" } }, PalletNfiNfiMatrix: { metadataLink: "Bytes", verificationHash: "H256" }, PalletMigrationCall: { _enum: { enable_migration: { enabled: "bool" }, set_block_delay: { blockDelay: "Option<u32>" }, set_block_limit: { blockLimit: "u32" } } }, PalletSyloDataVerificationCall: { _enum: { set_payment_asset: { paymentAsset: "u32" }, set_sylo_resolver_method: { resolverMethod: "Bytes" }, register_resolver: { identifier: "Bytes", serviceEndpoints: "Vec<Bytes>" }, update_resolver: { identifier: "Bytes", serviceEndpoints: "Vec<Bytes>" }, deregister_resolver: { identifier: "Bytes" }, create_validation_record: { dataId: "Bytes", resolvers: "Vec<SeedPalletCommonSyloResolverId>", dataType: "Bytes", tags: "Vec<Bytes>", checksum: "H256" }, add_validation_record_entry: { dataAuthor: "SeedPrimitivesSignatureAccountId20", dataId: "Bytes", checksum: "H256" }, update_validation_record: { dataId: "Bytes", resolvers: "Option<Vec<SeedPalletCommonSyloResolverId>>", dataType: "Option<Bytes>", tags: "Option<Vec<Bytes>>" }, delete_validation_record: { dataId: "Bytes" } } }, SeedPalletCommonSyloResolverId: { method: "Bytes", identifier: "Bytes" }, PalletLiquidityPoolsCall: { _enum: { create_pool: { rewardAssetId: "u32", stakedAssetId: "u32", interestRate: "u32", maxTokens: "u128", lockStartBlock: "u32", lockEndBlock: "u32" }, set_pool_succession: { predecessorPoolId: "u32", successorPoolId: "u32" }, set_pool_rollover: { id: "u32", shouldRollover: "bool" }, close_pool: { id: "u32" }, enter_pool: { poolId: "u32", amount: "u128" }, exit_pool: { id: "u32" }, claim_reward: { id: "u32" }, rollover_unsigned: { id: "u32", currentBlock: "u32" } } }, PalletSyloDataPermissionsCall: { _enum: { grant_data_permissions: { dataAuthor: "SeedPrimitivesSignatureAccountId20", grantee: "SeedPrimitivesSignatureAccountId20", dataIds: "Vec<Bytes>", permission: "SeedPalletCommonSyloDataPermission", expiry: "Option<u32>", irrevocable: "bool" }, revoke_data_permission: { dataAuthor: "SeedPrimitivesSignatureAccountId20", permissionId: "u32", grantee: "SeedPrimitivesSignatureAccountId20", dataId: "Bytes" }, grant_tagged_permissions: { grantee: "SeedPrimitivesSignatureAccountId20", permission: "SeedPalletCommonSyloDataPermission", tags: "Vec<Bytes>", expiry: "Option<u32>", irrevocable: "bool" }, revoke_tagged_permission: { grantee: "SeedPrimitivesSignatureAccountId20", permissionId: "u32" }, grant_permission_reference: { grantee: "SeedPrimitivesSignatureAccountId20", permissionRecordId: "Bytes" }, revoke_permission_reference: { grantee: "SeedPrimitivesSignatureAccountId20" } } }, SeedPalletCommonSyloDataPermission: { _enum: ["VIEW", "MODIFY", "DISTRIBUTE"] }, PalletSyloActionPermissionsCall: { _enum: { grant_transact_permission: { grantee: "SeedPrimitivesSignatureAccountId20", spender: "PalletSyloActionPermissionsSpender", spendingBalance: "Option<u128>", allowedCalls: "BTreeSet<(Bytes,Bytes)>", expiry: "Option<u32>" }, update_transact_permission: { grantee: "SeedPrimitivesSignatureAccountId20", spender: "Option<PalletSyloActionPermissionsSpender>", spendingBalance: "Option<Option<u128>>", allowedCalls: "Option<BTreeSet<(Bytes,Bytes)>>", expiry: "Option<Option<u32>>" }, revoke_transact_permission: { grantee: "SeedPrimitivesSignatureAccountId20" }, accept_transact_permission: { permissionToken: "PalletSyloActionPermissionsTransactPermissionToken", tokenSignature: "PalletSyloActionPermissionsTransactPermissionTokenSignature" }, transact: { grantor: "SeedPrimitivesSignatureAccountId20", call: "Call" } } }, PalletSyloActionPermissionsSpender: { _enum: ["GRANTOR", "GRANTEE"] }, PalletSyloActionPermissionsTransactPermissionToken: { grantee: "SeedPrimitivesSignatureAccountId20", useFuturepass: "bool", spender: "PalletSyloActionPermissionsSpender", spendingBalance: "Option<u128>", allowedCalls: "BTreeSet<(Bytes,Bytes)>", expiry: "Option<u32>", nonce: "U256" }, PalletSyloActionPermissionsTransactPermissionTokenSignature: { _enum: { EIP191: "[u8;65]", XRPL: "PalletSyloActionPermissionsXrplTokenSignature" } }, PalletSyloActionPermissionsXrplTokenSignature: { encodedMsg: "Bytes", signature: "Bytes" }, PalletElectionProviderMultiPhaseCall: { _enum: { submit_unsigned: { rawSolution: "PalletElectionProviderMultiPhaseRawSolution", witness: "PalletElectionProviderMultiPhaseSolutionOrSnapshotSize" }, set_minimum_untrusted_score: { maybeNextScore: "Option<SpNposElectionsElectionScore>" }, set_emergency_election_result: { supports: "Vec<(SeedPrimitivesSignatureAccountId20,SpNposElectionsSupport)>" }, submit: { rawSolution: "PalletElectionProviderMultiPhaseRawSolution" }, governance_fallback: { maybeMaxVoters: "Option<u32>", maybeMaxTargets: "Option<u32>" } } }, PalletElectionProviderMultiPhaseRawSolution: { solution: "SeedRuntimeNposCompactSolution16", score: "SpNposElectionsElectionScore", round: "u32" }, SeedRuntimeNposCompactSolution16: { votes1: "Vec<(Compact<u32>,Compact<u16>)>", votes2: "Vec<(Compact<u32>,(Compact<u16>,Compact<PerU16>),Compact<u16>)>", votes3: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);2],Compact<u16>)>", votes4: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);3],Compact<u16>)>", votes5: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);4],Compact<u16>)>", votes6: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);5],Compact<u16>)>", votes7: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);6],Compact<u16>)>", votes8: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);7],Compact<u16>)>", votes9: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);8],Compact<u16>)>", votes10: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);9],Compact<u16>)>", votes11: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);10],Compact<u16>)>", votes12: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);11],Compact<u16>)>", votes13: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);12],Compact<u16>)>", votes14: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);13],Compact<u16>)>", votes15: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);14],Compact<u16>)>", votes16: "Vec<(Compact<u32>,[(Compact<u16>,Compact<PerU16>);15],Compact<u16>)>" }, SpNposElectionsElectionScore: { minimalStake: "u128", sumStake: "u128", sumStakeSquared: "u128" }, PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: { voters: "Compact<u32>", targets: "Compact<u32>" }, SpNposElectionsSupport: { total: "u128", voters: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>" }, PalletBagsListCall: { _enum: { rebag: { dislocated: "SeedPrimitivesSignatureAccountId20" }, put_in_front_of: { lighter: "SeedPrimitivesSignatureAccountId20" } } }, PalletEthereumCall: { _enum: { transact: { transaction: "EthereumTransactionTransactionV2" } } }, EthereumTransactionTransactionV2: { _enum: { Legacy: "EthereumTransactionLegacyTransaction", EIP2930: "EthereumTransactionEip2930Transaction", EIP1559: "EthereumTransactionEip1559Transaction" } }, EthereumTransactionLegacyTransaction: { nonce: "U256", gasPrice: "U256", gasLimit: "U256", action: "EthereumTransactionTransactionAction", value: "U256", input: "Bytes", signature: "EthereumTransactionTransactionSignature" }, EthereumTransactionTransactionAction: { _enum: { Call: "H160", Create: "Null" } }, EthereumTransactionTransactionSignature: { v: "u64", r: "H256", s: "H256" }, EthereumTransactionEip2930Transaction: { chainId: "u64", nonce: "U256", gasPrice: "U256", gasLimit: "U256", action: "EthereumTransactionTransactionAction", value: "U256", input: "Bytes", accessList: "Vec<EthereumTransactionAccessListItem>", oddYParity: "bool", r: "H256", s: "H256" }, EthereumTransactionAccessListItem: { address: "H160", storageKeys: "Vec<H256>" }, EthereumTransactionEip1559Transaction: { chainId: "u64", nonce: "U256", maxPriorityFeePerGas: "U256", maxFeePerGas: "U256", gasLimit: "U256", action: "EthereumTransactionTransactionAction", value: "U256", input: "Bytes", accessList: "Vec<EthereumTransactionAccessListItem>", oddYParity: "bool", r: "H256", s: "H256" }, PalletEvmCall: { _enum: { withdraw: { address: "H160", value: "u128" }, call: { source: "H160", target: "H160", input: "Bytes", value: "U256", gasLimit: "u64", maxFeePerGas: "U256", maxPriorityFeePerGas: "Option<U256>", nonce: "Option<U256>", accessList: "Vec<(H160,Vec<H256>)>" }, create: { source: "H160", init: "Bytes", value: "U256", gasLimit: "u64", maxFeePerGas: "U256", maxPriorityFeePerGas: "Option<U256>", nonce: "Option<U256>", accessList: "Vec<(H160,Vec<H256>)>" }, create2: { source: "H160", init: "Bytes", salt: "H256", value: "U256", gasLimit: "u64", maxFeePerGas: "U256", maxPriorityFeePerGas: "Option<U256>", nonce: "Option<U256>", accessList: "Vec<(H160,Vec<H256>)>" } } }, PalletEvmChainIdCall: { _enum: { set_chain_id: { chainId: "Compact<u64>" } } }, PalletEthyCall: { _enum: { set_xrpl_door_signers: { newSigners: "Vec<(SeedPrimitivesEthyCryptoAppCryptoPublic,bool)>" }, set_relayer: { relayer: "SeedPrimitivesSignatureAccountId20" }, deposit_relayer_bond: "Null", withdraw_relayer_bond: "Null", set_event_block_confirmations: { confirmations: "u64" }, set_delayed_event_proofs_per_block: { count: "u8" }, set_challenge_period: { blocks: "u32" }, set_contract_address: { contractAddress: "H160" }, set_bridge_paused: { paused: "bool" }, finalise_authorities_change: { nextNotaryKeys: "Vec<SeedPrimitivesEthyCryptoAppCryptoPublic>" }, remove_missing_event_id: { eventIdRange: "(u64,u64)" }, submit_missing_event: { txHash: "H256", event: "Bytes" }, submit_event: { txHash: "H256", event: "Bytes" }, submit_challenge: { eventClaimId: "u64" }, submit_notarization: { payload: "PalletEthyNotarizationPayload", signature: "SeedPrimitivesEthyCryptoAppCryptoSignature" } } }, PalletEthyNotarizationPayload: { _enum: { Call: { callId: "u64", authorityIndex: "u16", result: "PalletEthyCheckedEthCallResult" }, Event: { eventClaimId: "u64", authorityIndex: "u16", result: "PalletEthyEventClaimResult" } } }, PalletEthyCheckedEthCallResult: { _enum: { Ok: "([u8;32],u64,u64)", ReturnDataExceedsLimit: "Null", ReturnDataEmpty: "Null", DataProviderErr: "Null", InvalidEthBlock: "Null", InvalidTimestamp: "Null" } }, PalletEthyEventClaimResult: { _enum: ["Valid", "DataProviderErr", "TxStatusFailed", "UnexpectedContractAddress", "NoTxLogs", "NotEnoughConfirmations", "UnexpectedData", "NoTxReceipt", "UnexpectedSource"] }, SeedPrimitivesEthyCryptoAppCryptoSignature: "SpCoreEcdsaSignature", SpCoreEcdsaSignature: "[u8;65]", PalletErc20PegCall: { _enum: { activate_deposits: { activate: "bool" }, activate_withdrawals: { activate: "bool" }, activate_deposits_delay: { activate: "bool" }, activate_withdrawals_delay: { activate: "bool" }, withdraw: { assetId: "u32", amount: "u128", beneficiary: "H160" }, set_erc20_peg_address: { ethAddress: "H160" }, set_root_peg_address: { ethAddress: "H160" }, set_erc20_meta: { details: "Vec<(H160,Bytes,u8)>" }, set_erc20_asset_map: { assetId: "u32", ethAddress: "H160" }, set_payment_delay: { assetId: "u32", minBalance: "u128", delay: "u32" }, claim_delayed_payment: { blockNumber: "u32", paymentId: "u64" } } }, PalletNftPegCall: { _enum: { set_contract_address: { contract: "H160" }, withdraw: { collectionIds: "Vec<u32>", serialNumbers: "Vec<Vec<u32>>", destination: "H160" }, reclaim_blocked_nfts: { blockedMintId: "u32", destination: "H160" } } }, PalletProxyCall: { _enum: { proxy: { real: "SeedPrimitivesSignatureAccountId20", forceProxyType: "Option<SeedRuntimeImplsProxyType>", call: "Call" }, add_proxy: { delegate: "SeedPrimitivesSignatureAccountId20", proxyType: "SeedRuntimeImplsProxyType", delay: "u32" }, remove_proxy: { delegate: "SeedPrimitivesSignatureAccountId20", proxyType: "SeedRuntimeImplsProxyType", delay: "u32" }, remove_proxies: "Null", create_pure: { proxyType: "SeedRuntimeImplsProxyType", delay: "u32", index: "u16" }, kill_pure: { spawner: "SeedPrimitivesSignatureAccountId20", proxyType: "SeedRuntimeImplsProxyType", index: "u16", height: "Compact<u32>", extIndex: "Compact<u32>" }, announce: { real: "SeedPrimitivesSignatureAccountId20", callHash: "H256" }, remove_announcement: { real: "SeedPrimitivesSignatureAccountId20", callHash: "H256" }, reject_announcement: { delegate: "SeedPrimitivesSignatureAccountId20", callHash: "H256" }, proxy_announced: { delegate: "SeedPrimitivesSignatureAccountId20", real: "SeedPrimitivesSignatureAccountId20", forceProxyType: "Option<SeedRuntimeImplsProxyType>", call: "Call" } } }, SeedRuntimeImplsProxyType: { _enum: ["NoPermission", "Any", "NonTransfer", "Governance", "Staking", "__Unused5", "__Unused6", "__Unused7", "__Unused8", "__Unused9", "__Unused10", "__Unused11", "__Unused12", "__Unused13", "__Unused14", "__Unused15", "__Unused16", "__Unused17", "__Unused18", "__Unused19", "__Unused20", "__Unused21", "__Unused22", "__Unused23", "__Unused24", "__Unused25", "__Unused26", "__Unused27", "__Unused28", "__Unused29", "__Unused30", "__Unused31", "__Unused32", "__Unused33", "__Unused34", "__Unused35", "__Unused36", "__Unused37", "__Unused38", "__Unused39", "__Unused40", "__Unused41", "__Unused42", "__Unused43", "__Unused44", "__Unused45", "__Unused46", "__Unused47", "__Unused48", "__Unused49", "__Unused50", "__Unused51", "__Unused52", "__Unused53", "__Unused54", "__Unused55", "__Unused56", "__Unused57", "__Unused58", "__Unused59", "__Unused60", "__Unused61", "__Unused62", "__Unused63", "__Unused64", "__Unused65", "__Unused66", "__Unused67", "__Unused68", "__Unused69", "__Unused70", "__Unused71", "__Unused72", "__Unused73", "__Unused74", "__Unused75", "__Unused76", "__Unused77", "__Unused78", "__Unused79", "__Unused80", "__Unused81", "__Unused82", "__Unused83", "__Unused84", "__Unused85", "__Unused86", "__Unused87", "__Unused88", "__Unused89", "__Unused90", "__Unused91", "__Unused92", "__Unused93", "__Unused94", "__Unused95", "__Unused96", "__Unused97", "__Unused98", "__Unused99", "__Unused100", "__Unused101", "__Unused102", "__Unused103", "__Unused104", "__Unused105", "__Unused106", "__Unused107", "__Unused108", "__Unused109", "__Unused110", "__Unused111", "__Unused112", "__Unused113", "__Unused114", "__Unused115", "__Unused116", "__Unused117", "__Unused118", "__Unused119", "__Unused120", "__Unused121", "__Unused122", "__Unused123", "__Unused124", "__Unused125", "__Unused126", "__Unused127", "__Unused128", "__Unused129", "__Unused130", "__Unused131", "__Unused132", "__Unused133", "__Unused134", "__Unused135", "__Unused136", "__Unused137", "__Unused138", "__Unused139", "__Unused140", "__Unused141", "__Unused142", "__Unused143", "__Unused144", "__Unused145", "__Unused146", "__Unused147", "__Unused148", "__Unused149", "__Unused150", "__Unused151", "__Unused152", "__Unused153", "__Unused154", "__Unused155", "__Unused156", "__Unused157", "__Unused158", "__Unused159", "__Unused160", "__Unused161", "__Unused162", "__Unused163", "__Unused164", "__Unused165", "__Unused166", "__Unused167", "__Unused168", "__Unused169", "__Unused170", "__Unused171", "__Unused172", "__Unused173", "__Unused174", "__Unused175", "__Unused176", "__Unused177", "__Unused178", "__Unused179", "__Unused180", "__Unused181", "__Unused182", "__Unused183", "__Unused184", "__Unused185", "__Unused186", "__Unused187", "__Unused188", "__Unused189", "__Unused190", "__Unused191", "__Unused192", "__Unused193", "__Unused194", "__Unused195", "__Unused196", "__Unused197", "__Unused198", "__Unused199", "__Unused200", "__Unused201", "__Unused202", "__Unused203", "__Unused204", "__Unused205", "__Unused206", "__Unused207", "__Unused208", "__Unused209", "__Unused210", "__Unused211", "__Unused212", "__Unused213", "__Unused214", "__Unused215", "__Unused216", "__Unused217", "__Unused218", "__Unused219", "__Unused220", "__Unused221", "__Unused222", "__Unused223", "__Unused224", "__Unused225", "__Unused226", "__Unused227", "__Unused228", "__Unused229", "__Unused230", "__Unused231", "__Unused232", "__Unused233", "__Unused234", "__Unused235", "__Unused236", "__Unused237", "__Unused238", "__Unused239", "__Unused240", "__Unused241", "__Unused242", "__Unused243", "__Unused244", "__Unused245", "__Unused246", "__Unused247", "__Unused248", "__Unused249", "__Unused250", "__Unused251", "__Unused252", "__Unused253", "__Unused254", "Owner"] }, PalletFuturepassCall: { _enum: { create: { account: "SeedPrimitivesSignatureAccountId20" }, register_delegate_with_signature: { futurepass: "SeedPrimitivesSignatureAccountId20", delegate: "SeedPrimitivesSignatureAccountId20", proxyType: "SeedRuntimeImplsProxyType", deadline: "u32", signature: "[u8;65]" }, unregister_delegate: { futurepass: "SeedPrimitivesSignatureAccountId20", delegate: "SeedPrimitivesSignatureAccountId20" }, transfer_futurepass: { currentOwner: "SeedPrimitivesSignatureAccountId20", newOwner: "Option<SeedPrimitivesSignatureAccountId20>" }, proxy_extrinsic: { futurepass: "SeedPrimitivesSignatureAccountId20", call: "Call" } } }, PalletEchoEvent: { _enum: { PingSent: { sessionId: "u64", source: "H160", destination: "H160", eventProofId: "u64" }, PongReceived: { sessionId: "u64", source: "H160", data: "Bytes" }, PingReceived: { sessionId: "u64", source: "H160", data: "Bytes" }, PongSent: { sessionId: "u64", source: "H160", destination: "H160", eventProofId: "u64" } } }, PalletMarketplaceEvent: { _enum: { FixedPriceSaleList: { tokens: "PalletMarketplaceListingTokens", listingId: "u128", marketplaceId: "Option<u32>", price: "u128", paymentAsset: "u32", seller: "SeedPrimitivesSignatureAccountId20", close: "u32" }, FixedPriceSaleComplete: { tokens: "PalletMarketplaceListingTokens", listingId: "u128", marketplaceId: "Option<u32>", price: "u128", paymentAsset: "u32", buyer: "SeedPrimitivesSignatureAccountId20", seller: "SeedPrimitivesSignatureAccountId20" }, FixedPriceSaleClose: { tokens: "PalletMarketplaceListingTokens", listingId: "u128", marketplaceId: "Option<u32>", reason: "PalletMarketplaceFixedPriceClosureReason" }, FixedPriceSalePriceUpdate: { tokens: "PalletMarketplaceListingTokens", listingId: "u128", marketplaceId: "Option<u32>", newPrice: "u128" }, AuctionOpen: { tokens: "PalletMarketplaceListingTokens", listingId: "u128", marketplaceId: "Option<u32>", paymentAsset: "u32", reservePrice: "u128", seller: "SeedPrimitivesSignatureAccountId20", close: "u32" }, AuctionSold: { tokens: "PalletMarketplaceListingTokens", listingId: "u128", marketplaceId: "Option<u32>", paymentAsset: "u32", hammerPrice: "u128", winner: "SeedPrimitivesSignatureAccountId20" }, AuctionClose: { tokens: "PalletMarketplaceListingTokens", listingId: "u128", marketplaceId: "Option<u32>", reason: "PalletMarketplaceAuctionClosureReason" }, Bid: { tokens: "PalletMarketplaceListingTokens", listingId: "u128", marketplaceId: "Option<u32>", amount: "u128", bidder: "SeedPrimitivesSignatureAccountId20" }, MarketplaceRegister: { account: "SeedPrimitivesSignatureAccountId20", entitlement: "Permill", marketplaceId: "u32" }, Offer: { offerId: "u64", amount: "u128", assetId: "u32", marketplaceId: "Option<u32>", buyer: "SeedPrimitivesSignatureAccountId20" }, OfferCancel: { offerId: "u64", marketplaceId: "Option<u32>", tokenId: "(u32,u32)" }, OfferAccept: { offerId: "u64", marketplaceId: "Option<u32>", tokenId: "(u32,u32)", amount: "u128", assetId: "u32" }, FeeToSet: { account: "Option<SeedPrimitivesSignatureAccountId20>" } } }, PalletMarketplaceFixedPriceClosureReason: { _enum: ["VendorCancelled", "Expired", "OfferAccepted"] }, PalletMarketplaceAuctionClosureReason: { _enum: ["ExpiredNoBids", "SettlementFailed", "VendorCancelled"] }, PalletPreimageEvent: { _enum: { Noted: { _alias: { hash_: "hash" }, hash_: "H256" }, Requested: { _alias: { hash_: "hash" }, hash_: "H256" }, Cleared: { _alias: { hash_: "hash" }, hash_: "H256" } } }, PalletVortexDistributionEvent: { _enum: { AdminAccountChanged: { oldKey: "Option<SeedPrimitivesSignatureAccountId20>", newKey: "SeedPrimitivesSignatureAccountId20" }, VtxDistCreated: { id: "u32" }, VtxDistDisabled: { id: "u32" }, VtxDistDone: { id: "u32" }, VtxDistPaidOut: { id: "u32", who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, VtxDistPayFailed: { id: "u32", who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, VtxDistStarted: { id: "u32" }, SetFeePotAssetBalances: { id: "u32", assetsBalances: "Vec<(u32,u128)>" }, SetVtxVaultAssetBalances: { id: "u32", assetsBalances: "Vec<(u32,u128)>" }, SetAssetPrices: { id: "u32", assetPrices: "Vec<(u32,u128)>" }, VtxWorkPointRegistered: { id: "u32", workPoints: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>" }, VtxRewardPointRegistered: { id: "u32", rewardPoints: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>" }, VtxDistributionTriggered: { id: "u32" }, VtxDistributionTriggering: { id: "u32" }, SetVtxTotalSupply: { id: "u32", totalSupply: "u128" }, SetConsiderCurrentBalance: { value: "bool" }, SetDisableRedeem: { value: "bool" }, SetVtxVaultRedeemAssetList: { assetList: "Vec<u32>" }, VtxRedeemed: { who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, SetEnableManualRewardInput: { value: "bool" }, RewardRegistered: { id: "u32", rewards: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>" }, PivotStringTooLong: { id: "u32" } } }, PalletPartnerAttributionEvent: { _enum: { PartnerRegistered: { partnerId: "u128", partner: "PalletPartnerAttributionPartnerInformation" }, PartnerUpdated: { partnerId: "u128", account: "SeedPrimitivesSignatureAccountId20" }, PartnerRemoved: { partnerId: "u128", account: "SeedPrimitivesSignatureAccountId20" }, PartnerUpgraded: { partnerId: "u128", account: "SeedPrimitivesSignatureAccountId20", feePercentage: "Permill" }, AccountAttributed: { partnerId: "u128", account: "SeedPrimitivesSignatureAccountId20" } } }, PalletPartnerAttributionPartnerInformation: { owner: "SeedPrimitivesSignatureAccountId20", account: "SeedPrimitivesSignatureAccountId20", feePercentage: "Option<Permill>", accumulatedFees: "u128" }, PalletFeeProxyEvent: { _enum: { CallWithFeePreferences: { who: "SeedPrimitivesSignatureAccountId20", paymentAsset: "u32", maxPayment: "u128" } } }, PalletFeeControlEvent: { _enum: { EvmBaseFeeSet: { baseFee: "U256" }, WeightMultiplierSet: { weightMultiplier: "Perbill" }, LengthMultiplierSet: { lengthMultiplier: "u128" } } }, PalletXls20Event: { _enum: { Xls20MintRequest: { collectionId: "u32", serialNumbers: "Vec<u32>", tokenUris: "Vec<Bytes>" }, RelayerSet: { account: "SeedPrimitivesSignatureAccountId20" }, Xls20MintFeeSet: { newFee: "u128" }, Xls20MappingSet: { collectionId: "u32", mappings: "Vec<(u32,[u8;32])>" }, Xls20CollectionMappingsSet: { mappings: "Vec<(u32,PalletXls20Xls20Collection)>" }, Xls20CompatibilityEnabled: { collectionId: "u32" }, Xls20MintFeePaid: { collectionOwner: "SeedPrimitivesSignatureAccountId20", totalFee: "u128" } } }, PalletDoughnutEvent: { _enum: { DoughnutCallExecuted: { doughnut: "Bytes", call: "Call", result: "Result<Null, SpRuntimeDispatchError>" }, WhitelistedHoldersUpdated: { holder: "SeedPrimitivesSignatureAccountId20", enabled: "bool" }, DoughnutRevokeStateUpdated: { doughnutHash: "[u8;32]", revoked: "bool" }, HolderRevokeStateUpdated: { issuer: "SeedPrimitivesSignatureAccountId20", holder: "SeedPrimitivesSignatureAccountId20", revoked: "bool" } } }, PalletMaintenanceModeEvent: { _enum: { MaintenanceModeActivated: { enabled: "bool" }, AccountBlocked: { account: "SeedPrimitivesSignatureAccountId20", blocked: "bool" }, EVMTargetBlocked: { targetAddress: "H160", blocked: "bool" }, CallBlocked: { palletName: "Bytes", callName: "Bytes", blocked: "bool" }, PalletBlocked: { palletName: "Bytes", blocked: "bool" } } }, PalletCrowdsaleEvent: { _enum: { CrowdsaleCreated: { saleId: "u64", info: "PalletCrowdsaleSaleInformation" }, VaultCallProxied: { saleId: "u64", who: "SeedPrimitivesSignatureAccountId20", vault: "SeedPrimitivesSignatureAccountId20", call: "Call" }, CrowdsaleEnabled: { saleId: "u64", info: "PalletCrowdsaleSaleInformation", endBlock: "u32" }, CrowdsaleParticipated: { saleId: "u64", who: "SeedPrimitivesSignatureAccountId20", asset: "u32", amount: "u128" }, CrowdsaleNFTRedeemed: { saleId: "u64", who: "SeedPrimitivesSignatureAccountId20", collectionId: "u32", quantity: "u32" }, CrowdsaleClosed: { saleId: "u64", info: "PalletCrowdsaleSaleInformation" }, CrowdsaleManualDistribution: { saleId: "u64", info: "PalletCrowdsaleSaleInformation", who: "SeedPrimitivesSignatureAccountId20" }, CrowdsaleVouchersClaimed: { saleId: "u64", who: "SeedPrimitivesSignatureAccountId20", amount: "u128" }, CrowdsaleDistributionComplete: { saleId: "u64", vouchersDistributed: "u128" } } }, PalletCrowdsaleSaleInformation: { status: "PalletCrowdsaleSaleStatus", admin: "SeedPrimitivesSignatureAccountId20", vault: "SeedPrimitivesSignatureAccountId20", paymentAssetId: "u32", rewardCollectionId: "u32", softCapPrice: "u128", fundsRaised: "u128", participantCount: "u64", voucherAssetId: "u32", duration: "u32" }, PalletCrowdsaleSaleStatus: { _enum: { Pending: "u32", Enabled: "u32", Distributing: "(u32,u128)", Ended: "u32", DistributionFailed: "u32" } }, PalletNfiEvent: { _enum: { DataRequestNew: { subType: "PalletNfiNfiSubType", caller: "SeedPrimitivesSignatureAccountId20", tokenId: "PalletNfiMultiChainTokenId" }, DataRequestExisting: { subType: "PalletNfiNfiSubType", caller: "SeedPrimitivesSignatureAccountId20", tokenId: "PalletNfiMultiChainTokenId" }, DataSet: { subType: "PalletNfiNfiSubType", tokenId: "PalletNfiMultiChainTokenId", dataItem: "PalletNfiNfiDataType" }, DataRemoved: { tokenId: "PalletNfiMultiChainTokenId" }, FeeDetailsSet: { subType: "PalletNfiNfiSubType", feeDetails: "Option<PalletNfiFeeDetails>" }, FeeToSet: { account: "Option<SeedPrimitivesSignatureAccountId20>" }, MintFeePaid: { subType: "PalletNfiNfiSubType", who: "SeedPrimitivesSignatureAccountId20", assetId: "u32", totalFee: "u128" }, NfiEnabled: { subType: "PalletNfiNfiSubType", collectionId: "PalletNfiGenericCollectionId" }, RelayerSet: { account: "SeedPrimitivesSignatureAccountId20" } } }, PalletMigrationEvent: { _enum: { MigrationRuntimeUpgrade: "Null", MigrationEnabled: "Null", MigrationDisabled: "Null", MigrationComplete: { itemsMigrated: "u32" }, MigrationSet: "Null", BlockDelaySet: { blockDelay: "Option<u32>" }, BlockLimitSet: { blockLimit: "u32" } } }, PalletSyloDataVerificationEvent: { _enum: { PaymentAssetSet: { assetId: "u32" }, SyloResolverMethodSet: { method: "Bytes" }, ResolverRegistered: { id: "Bytes", controller: "SeedPrimitivesSignatureAccountId20", serviceEndpoints: "Vec<Bytes>" }, ResolverUpdated: { id: "Bytes", controller: "SeedPrimitivesSignatureAccountId20", serviceEndpoints: "Vec<Bytes>" }, ResolverDeregistered: { id: "Bytes" }, ValidationRecordCreated: { author: "SeedPrimitivesSignatureAccountId20", id: "Bytes" }, ValidationEntryAdded: { author: "SeedPrimitivesSignatureAccountId20", id: "Bytes", checksum: "H256" }, ValidationRecordUpdated: { author: "SeedPrimitivesSignatureAccountId20", id: "Bytes", resolvers: "Option<Vec<Bytes>>", dataType: "Option<Bytes>", tags: "Option<Vec<Bytes>>" }, ValidationRecordDeleted: { author: "SeedPrimitivesSignatureAccountId20", id: "Bytes" } } }, PalletLiquidityPoolsEvent: { _enum: { PoolOpen: { poolId: "u32", rewardAssetId: "u32", stakedAssetId: "u32", interestRate: "u32", maxTokens: "u128", lockStartBlock: "u32", lockEndBlock: "u32" }, PoolStarted: { poolId: "u32" }, PoolRenewing: { poolId: "u32" }, PoolMatured: { poolId: "u32" }, PoolClosed: { poolId: "u32", rewardAssetAmount: "u128", stakedAssetAmount: "u128", receiver: "SeedPrimitivesSignatureAccountId20" }, SetSuccession: { predecessorPoolId: "u32", successorPoolId: "u32" }, UserInfoUpdated: { poolId: "u32", accountId: "SeedPrimitivesSignatureAccountId20", shouldRollover: "bool" }, UserJoined: { accountId: "SeedPrimitivesSignatureAccountId20", poolId: "u32", amount: "u128" }, UserExited: { accountId: "SeedPrimitivesSignatureAccountId20", poolId: "u32", amount: "u128" }, UserRolledOver: { accountId: "SeedPrimitivesSignatureAccountId20", poolId: "u32", rolledToPoolId: "u32", amount: "u128" }, RewardsClaimed: { accountId: "SeedPrimitivesSignatureAccountId20", poolId: "u32", amount: "u128" } } }, PalletSyloDataPermissionsEvent: { _enum: { DataPermissionGranted: { dataAuthor: "SeedPrimitivesSignatureAccountId20", grantor: "SeedPrimitivesSignatureAccountId20", grantee: "SeedPrimitivesSignatureAccountId20", dataId: "Bytes", permission: "SeedPalletCommonSyloDataPermission", expiry: "Option<u32>", irrevocable: "bool" }, DataPermissionRevoked: { revoker: "SeedPrimitivesSignatureAccountId20", grantee: "SeedPrimitivesSignatureAccountId20", permission: "SeedPalletCommonSyloDataPermission", dataId: "Bytes" }, TaggedDataPermissionsGranted: { grantor: "SeedPrimitivesSignatureAccountId20", grantee: "SeedPrimitivesSignatureAccountId20", permission: "SeedPalletCommonSyloDataPermission", tags: "Vec<Bytes>", expiry: "Option<u32>", irrevocable: "bool" }, TaggedDataPermissionsRevoked: { revoker: "SeedPrimitivesSignatureAccountId20", grantee: "SeedPrimitivesSignatureAccountId20", permission: "SeedPalletCommonSyloDataPermission", tags: "Vec<Bytes>" }, PermissionReferenceGranted: { grantor: "SeedPrimitivesSignatureAccountId20", grantee: "SeedPrimitivesSignatureAccountId20", permissionRecordId: "Bytes" }, PermissionReferenceRevoked: { grantor: "SeedPrimitivesSignatureAccountId20", grantee: "SeedPrimitivesSignatureAccountId20", permissionRecordId: "Bytes" }, ExpiredDataPermissionRemoved: { dataAuthor: "SeedPrimitivesSignatureAccountId20", grantee: "SeedPrimitivesSignatureAccountId20", dataId: "Bytes", permissionId: "u32" }, ExpiredTaggedPermissionRemoved: { dataAuthor: "SeedPrimitivesSignatureAccountId20", grantee: "SeedPrimitivesSignatureAccountId20", permissionId: "u32" } } }, PalletSyloActionPermissionsEvent: { _enum: { TransactPermissionGranted: { grantor: "SeedPrimitivesSignatureAccountId20", grantee: "SeedPrimitivesSignatureAccountId20", spender: "PalletSyloActionPermissionsSpender", spendingBalance: "Option<u128>", allowedCalls: "Vec<(Bytes,Bytes)>", expiry: "Option<u32>" }, PermissionTransactExecuted: { grantor: "SeedPrimitivesSignatureAccountId20", grantee: "SeedPrimitivesSignatureAccountId20" }, TransactPermissionUpdated: { grantor: "SeedPrimitivesSignatureAccountId20", grantee: "SeedPrimitivesSignatureAccountId20", spender: "PalletSyloActionPermissionsSpender", spendingBalance: "Option<u128>", allowedCalls: "Vec<(Bytes,Bytes)>", expiry: "Option<u32>" }, TransactPermissionRevoked: { grantor: "SeedPrimitivesSignatureAccountId20", grantee: "SeedPrimitivesSignatureAccountId20" }, TransactPermissionAccepted: { grantor: "SeedPrimitivesSignatureAccountId20", grantee: "SeedPrimitivesSignatureAccountId20" } } }, PalletElectionProviderMultiPhaseEvent: { _enum: { SolutionStored: { compute: "PalletElectionProviderMultiPhaseElectionCompute", origin: "Option<SeedPrimitivesSignatureAccountId20>", prevEjected: "bool" }, ElectionFinalized: { compute: "PalletElectionProviderMultiPhaseElectionCompute", score: "SpNposElectionsElectionScore" }, ElectionFailed: "Null", Rewarded: { account: "SeedPrimitivesSignatureAccountId20", value: "u128" }, Slashed: { account: "SeedPrimitivesSignatureAccountId20", value: "u128" }, PhaseTransitioned: { from: "PalletElectionProviderMultiPhasePhase", to: "PalletElectionProviderMultiPhasePhase", round: "u32" } } }, PalletElectionProviderMultiPhaseElectionCompute: { _enum: ["OnChain", "Signed", "Unsigned", "Fallback", "Emergency"] }, PalletElectionProviderMultiPhasePhase: { _enum: { Off: "Null", Signed: "Null", Unsigned: "(bool,u32)", Emergency: "Null" } }, PalletBagsListEvent: { _enum: { Rebagged: { who: "SeedPrimitivesSignatureAccountId20", from: "u64", to: "u64" }, ScoreUpdated: { who: "SeedPrimitivesSignatureAccountId20", newScore: "u64" } } }, PalletEthereumEvent: { _enum: { Executed: { from: "H160", to: "H160", transactionHash: "H256", exitReason: "EvmCoreErrorExitReason", extraData: "Bytes" } } }, EvmCoreErrorExitReason: { _enum: { Succeed: "EvmCoreErrorExitSucceed", Error: "EvmCoreErrorExitError", Revert: "EvmCoreErrorExitRevert", Fatal: "EvmCoreErrorExitFatal" } }, EvmCoreErrorExitSucceed: { _enum: ["Stopped", "Returned", "Suicided"] }, EvmCoreErrorExitError: { _enum: { StackUnderflow: "Null", StackOverflow: "Null", InvalidJump: "Null", InvalidRange: "Null", DesignatedInvalid: "Null", CallTooDeep: "Null", CreateCollision: "Null", CreateContractLimit: "Null", OutOfOffset: "Null", OutOfGas: "Null", OutOfFund: "Null", PCUnderflow: "Null", CreateEmpty: "Null", Other: "Text", MaxNonce: "Null", InvalidCode: "u8" } }, EvmCoreErrorExitRevert: { _enum: ["Reverted"] }, EvmCoreErrorExitFatal: { _enum: { NotSupported: "Null", UnhandledInterrupt: "Null", CallErrorAsFatal: "EvmCoreErrorExitError", Other: "Text" } }, PalletEvmEvent: { _enum: { Log: { log: "EthereumLog" }, Created: { address: "H160" }, CreatedFailed: { address: "H160" }, Executed: { address: "H160" }, ExecutedFailed: { address: "H160" } } }, EthereumLog: { address: "H160", topics: "Vec<H256>", data: "Bytes" }, PalletEvmChainIdEvent: { _enum: { ChainIdSet: "u64" } }, PalletEthyEvent: { _enum: { Verified: { eventClaimId: "u64" }, Invalid: { eventClaimId: "u64" }, AuthoritySetChange: { eventProofId: "u64", validatorSetId: "u64" }, XrplAuthoritySetChange: { eventProofIds: "Vec<u64>", validatorSetId: "u64" }, ProofDelayed: { eventProofId: "u64" }, ProcessingOk: { eventClaimId: "u64" }, ProcessingFailed: { eventClaimId: "u64", routerError: "SeedPalletCommonEventRouterError" }, Challenged: { eventClaimId: "u64", challenger: "SeedPrimitivesSignatureAccountId20" }, ProcessAtExtended: { eventClaimId: "u64", processAt: "u32" }, EventSend: { eventProofId: "u64", signingRequest: "PalletEthyEthySigningRequest" }, EventSubmit: { eventClaimId: "u64", eventClaim: "PalletEthyEventClaim", processAt: "u32" }, RelayerBondDeposit: { relayer: "SeedPrimitivesSignatureAccountId20", bond: "u128" }, RelayerBondWithdraw: { relayer: "SeedPrimitivesSignatureAccountId20", bond: "u128" }, RelayerSet: { relayer: "Option<SeedPrimitivesSignatureAccountId20>" }, XrplDoorSignersSet: { newSigners: "Vec<(SeedPrimitivesEthyCryptoAppCryptoPublic,bool)>" }, FinaliseScheduleFail: { scheduledBlock: "u32" }, SetContractAddress: { address: "H160" }, XrplAuthoritySetChangeRequestFailed: { error: "SpRuntimeDispatchError" }, EventBlockConfirmationsSet: { confirmations: "u64" }, DelayedEventProofsPerBlockSet: { count: "u8" }, ChallengePeriodSet: { period: "u32" }, BridgeManualPause: { paused: "bool" }, MissingEventIdsRemoved: { range: "(u64,u64)" } } }, SeedPalletCommonEventRouterError: { _enum: { FailedProcessing: "SpRuntimeDispatchError", NoReceiver: "Null" } }, PalletEthyEthySigningRequest: { _enum: { Ethereum: "PalletEthyEthereumEventInfo", XrplTx: "Bytes" } }, PalletEthyEthereumEventInfo: { source: "H160", destination: "H160", message: "Bytes", validatorSetId: "u64", eventProofId: "u64" }, PalletEthyEventClaim: { txHash: "H256", source: "H160", destination: "H160", data: "Bytes" }, PalletErc20PegEvent: { _enum: { Erc20DepositDelayed: { paymentId: "u64", scheduledBlock: "u32", amount: "u128", beneficiary: "SeedPrimitivesSignatureAccountId20", assetId: "u32" }, Erc20WithdrawalDelayed: { paymentId: "u64", scheduledBlock: "u32", amount: "u128", beneficiary: "H160", assetId: "u32", source: "SeedPrimitivesSignatureAccountId20" }, Erc20DelayFailed: { paymentId: "u64", scheduledBlock: "u32", assetId: "u32", source: "SeedPrimitivesSignatureAccountId20" }, DelayedErc20DepositFailed: { paymentId: "u64", beneficiary: "SeedPrimitivesSignatureAccountId20" }, DelayedErc20WithdrawalFailed: { assetId: "u32", beneficiary: "H160" }, Erc20Deposit: { assetId: "u32", amount: "u128", beneficiary: "SeedPrimitivesSignatureAccountId20" }, Erc20Withdraw: { assetId: "u32", amount: "u128", beneficiary: "H160", source: "SeedPrimitivesSignatureAccountId20" }, Erc20DepositFail: { source: "H160", abiData: "Bytes" }, SetContractAddress: { address: "H160" }, SetRootPegContract: { address: "H160" }, PaymentDelaySet: { assetId: "u32", minBalance: "u128", delay: "u32" }, NoAvailableDelayedPaymentIds: "Null", ActivateDepositDelay: { active: "bool" }, ActivateWithdrawalDelay: { active: "bool" }, ActivateDeposits: { active: "bool" }, ActivateWithdrawals: { active: "bool" } } }, PalletNftPegEvent: { _enum: { Erc721Deposit: { destination: "SeedPrimitivesSignatureAccountId20" }, Erc721Mint: { collectionId: "u32", serialNumbers: "Vec<u32>", owner: "SeedPrimitivesSignatureAccountId20" }, ERC721Blocked: { blockedMintId: "u32", destinationAddress: "SeedPrimitivesSignatureAccountId20", collectionId: "u32", serialNumbers: "Vec<u32>" }, Erc721Withdraw: { origin: "SeedPrimitivesSignatureAccountId20", collectionIds: "Vec<u32>", serialNumbers: "Vec<Vec<u32>>", destination: "H160" }, ContractAddressSet: { contract: "H160" } } }, PalletProxyEvent: { _enum: { ProxyExecuted: { result: "Result<Null, SpRuntimeDispatchError>" }, PureCreated: { pure: "SeedPrimitivesSignatureAccountId20", who: "SeedPrimitivesSignatureAccountId20", proxyType: "SeedRuntimeImplsProxyType", disambiguationIndex: "u16" }, Announced: { real: "SeedPrimitivesSignatureAccountId20", proxy: "SeedPrimitivesSignatureAccountId20", callHash: "H256" }, ProxyAdded: { delegator: "SeedPrimitivesSignatureAccountId20", delegatee: "SeedPrimitivesSignatureAccountId20", proxyType: "SeedRuntimeImplsProxyType", delay: "u32" }, ProxyRemoved: { delegator: "SeedPrimitivesSignatureAccountId20", delegatee: "SeedPrimitivesSignatureAccountId20", proxyType: "SeedRuntimeImplsProxyType", delay: "u32" } } }, PalletFuturepassEvent: { _enum: { FuturepassCreated: { futurepass: "SeedPrimitivesSignatureAccountId20", delegate: "SeedPrimitivesSignatureAccountId20" }, DelegateRegistered: { futurepass: "SeedPrimitivesSignatureAccountId20", delegate: "SeedPrimitivesSignatureAccountId20", proxyType: "SeedRuntimeImplsProxyType" }, DelegateUnregistered: { futurepass: "SeedPrimitivesSignatureAccountId20", delegate: "SeedPrimitivesSignatureAccountId20" }, FuturepassTransferred: { oldOwner: "SeedPrimitivesSignatureAccountId20", newOwner: "Option<SeedPrimitivesSignatureAccountId20>", futurepass: "SeedPrimitivesSignatureAccountId20" }, ProxyExecuted: { delegate: "SeedPrimitivesSignatureAccountId20", result: "Result<Null, SpRuntimeDispatchError>" } } }, FrameSystemPhase: { _enum: { ApplyExtrinsic: "u32", Finalization: "Null", Initialization: "Null" } }, FrameSystemLastRuntimeUpgradeInfo: { specVersion: "Compact<u32>", specName: "Text" }, FrameSystemLimitsBlockWeights: { baseBlock: "SpWeightsWeightV2Weight", maxBlock: "SpWeightsWeightV2Weight", perClass: "FrameSupportDispatchPerDispatchClassWeightsPerClass" }, FrameSupportDispatchPerDispatchClassWeightsPerClass: { normal: "FrameSystemLimitsWeightsPerClass", operational: "FrameSystemLimitsWeightsPerClass", mandatory: "FrameSystemLimitsWeightsPerClass" }, FrameSystemLimitsWeightsPerClass: { baseExtrinsic: "SpWeightsWeightV2Weight", maxExtrinsic: "Option<SpWeightsWeightV2Weight>", maxTotal: "Option<SpWeightsWeightV2Weight>", reserved: "Option<SpWeightsWeightV2Weight>" }, FrameSystemLimitsBlockLength: { max: "FrameSupportDispatchPerDispatchClassU32" }, FrameSupportDispatchPerDispatchClassU32: { normal: "u32", operational: "u32", mandatory: "u32" }, SpWeightsRuntimeDbWeight: { read: "u64", write: "u64" }, SpVersionRuntimeVersion: { specName: "Text", implName: "Text", authoringVersion: "u32", specVersion: "u32", implVersion: "u32", apis: "Vec<([u8;8],u32)>", transactionVersion: "u32", stateVersion: "u8" }, FrameSystemError: { _enum: ["InvalidSpecName", "SpecVersionNeedsToIncrease", "FailedToExtractRuntimeVersion", "NonDefaultComposite", "NonZeroRefCount", "CallFiltered"] }, SpConsensusBabeDigestsPreDigest: { _enum: { __Unused0: "Null", Primary: "SpConsensusBabeDigestsPrimaryPreDigest", SecondaryPlain: "SpConsensusBabeDigestsSecondaryPlainPreDigest", SecondaryVRF: "SpConsensusBabeDigestsSecondaryVRFPreDigest" } }, SpConsensusBabeDigestsPrimaryPreDigest: { authorityIndex: "u32", slot: "u64", vrfSignature: "SpCoreSr25519VrfVrfSignature" }, SpCoreSr25519VrfVrfSignature: { output: "[u8;32]", proof: "[u8;64]" }, SpConsensusBabeDigestsSecondaryPlainPreDigest: { authorityIndex: "u32", slot: "u64" }, SpConsensusBabeDigestsSecondaryVRFPreDigest: { authorityIndex: "u32", slot: "u64", vrfSignature: "SpCoreSr25519VrfVrfSignature" }, SpConsensusBabeBabeEpochConfiguration: { c: "(u64,u64)", allowedSlots: "SpConsensusBabeAllowedSlots" }, PalletBabeError: { _enum: ["InvalidEquivocationProof", "InvalidKeyOwnershipProof", "DuplicateOffenceReport", "InvalidConfiguration"] }, PalletSchedulerScheduled: { maybeId: "Option<[u8;32]>", priority: "u8", call: "FrameSupportPreimagesBounded", maybePeriodic: "Option<(u32,u32)>", origin: "SeedRuntimeOriginCaller" }, FrameSupportPreimagesBounded: { _enum: { Legacy: { _alias: { hash_: "hash" }, hash_: "H256" }, Inline: "Bytes", Lookup: { _alias: { hash_: "hash" }, hash_: "H256", len: "u32" } } }, PalletSchedulerError: { _enum: ["FailedToSchedule", "NotFound", "TargetBlockNumberInPast", "RescheduleNoChange", "Named"] }, PalletUtilityError: { _enum: ["TooManyCalls"] }, PalletRecoveryRecoveryConfig: { delayPeriod: "u32", deposit: "u128", friends: "Vec<SeedPrimitivesSignatureAccountId20>", threshold: "u16" }, PalletRecoveryActiveRecovery: { created: "u32", deposit: "u128", friends: "Vec<SeedPrimitivesSignatureAccountId20>" }, PalletRecoveryError: { _enum: ["NotAllowed", "ZeroThreshold", "NotEnoughFriends", "MaxFriends", "NotSorted", "NotRecoverable", "AlreadyRecoverable", "AlreadyStarted", "NotStarted", "NotFriend", "DelayPeriod", "AlreadyVouched", "Threshold", "StillActive", "AlreadyProxy", "BadState"] }, PalletMultisigMultisig: { when: "PalletMultisigTimepoint", deposit: "u128", depositor: "SeedPrimitivesSignatureAccountId20", approvals: "Vec<SeedPrimitivesSignatureAccountId20>" }, PalletMultisigError: { _enum: ["MinimumThreshold", "AlreadyApproved", "NoApprovalsNeeded", "TooFewSignatories", "TooManySignatories", "SignatoriesOutOfOrder", "SenderInSignatories", "NotFound", "NotOwner", "NoTimepoint", "WrongTimepoint", "UnexpectedTimepoint", "MaxWeightTooLow", "AlreadyStored"] }, PalletBalancesBalanceLock: { id: "[u8;8]", amount: "u128", reasons: "PalletBalancesReasons" }, PalletBalancesReasons: { _enum: ["Fee", "Misc", "All"] }, PalletBalancesReserveData: { id: "[u8;8]", amount: "u128" }, PalletBalancesIdAmount: { id: "Null", amount: "u128" }, PalletBalancesError: { _enum: ["VestingBalance", "LiquidityRestrictions", "InsufficientBalance", "ExistentialDeposit", "Expendability", "ExistingVestingSchedule", "DeadAccount", "TooManyReserves", "TooManyHolds", "TooManyFreezes"] }, PalletAssetsAssetDetails: { owner: "SeedPrimitivesSignatureAccountId20", issuer: "SeedPrimitivesSignatureAccountId20", admin: "SeedPrimitivesSignatureAccountId20", freezer: "SeedPrimitivesSignatureAccountId20", supply: "u128", deposit: "u128", minBalance: "u128", isSufficient: "bool", accounts: "u32", sufficients: "u32", approvals: "u32", status: "PalletAssetsAssetStatus" }, PalletAssetsAssetStatus: { _enum: ["Live", "Frozen", "Destroying"] }, PalletAssetsAssetAccount: { balance: "u128", status: "PalletAssetsAccountStatus", reason: "PalletAssetsExistenceReason", extra: "Null" }, PalletAssetsAccountStatus: { _enum: ["Liquid", "Frozen", "Blocked"] }, PalletAssetsExistenceReason: { _enum: { Consumer: "Null", Sufficient: "Null", DepositHeld: "u128", DepositRefunded: "Null", DepositFrom: "(SeedPrimitivesSignatureAccountId20,u128)" } }, PalletAssetsApproval: { amount: "u128", deposit: "u128" }, PalletAssetsAssetMetadata: { deposit: "u128", name: "Bytes", symbol: "Bytes", decimals: "u8", isFrozen: "bool" }, PalletAssetsError: { _enum: ["BalanceLow", "NoAccount", "NoPermission", "Unknown", "Frozen", "InUse", "BadWitness", "MinBalanceZero", "UnavailableConsumer", "BadMetadata", "Unapproved", "WouldDie", "AlreadyExists", "NoDeposit", "WouldBurn", "LiveAsset", "AssetNotLive", "IncorrectStatus", "NotFrozen", "CallbackFailed"] }, FrameSupportPalletId: "[u8;8]", PalletAssetsExtError: { _enum: ["DecimalsTooHigh", "NoAvailableIds", "NoPermission", "BalanceLow", "NoAccount", "Overflow", "MaxHolds", "CreateAssetFailed"] }, PalletStakingStakingLedger: { stash: "SeedPrimitivesSignatureAccountId20", total: "Compact<u128>", active: "Compact<u128>", unlocking: "Vec<PalletStakingUnlockChunk>", claimedRewards: "Vec<u32>" }, PalletStakingUnlockChunk: { value: "Compact<u128>", era: "Compact<u32>" }, PalletStakingNominations: { targets: "Vec<SeedPrimitivesSignatureAccountId20>", submittedIn: "u32", suppressed: "bool" }, PalletStakingActiveEraInfo: { index: "u32", start: "Option<u64>" }, PalletStakingEraRewardPoints: { total: "u32", individual: "BTreeMap<SeedPrimitivesSignatureAccountId20, u32>" }, PalletStakingUnappliedSlash: { validator: "SeedPrimitivesSignatureAccountId20", own: "u128", others: "Vec<(SeedPrimitivesSignatureAccountId20,u128)>", reporters: "Vec<SeedPrimitivesSignatureAccountId20>", payout: "u128" }, PalletStakingSlashingSlashingSpans: { spanIndex: "u32", lastStart: "u32", lastNonzeroSlash: "u32", prior: "Vec<u32>" }, PalletStakingSlashingSpanRecord: { slashed: "u128", paidOut: "u128" }, PalletStakingPalletError: { _enum: ["NotController", "NotStash", "AlreadyBonded", "AlreadyPaired", "EmptyTargets", "DuplicateIndex", "InvalidSlashIndex", "InsufficientBond", "NoMoreChunks", "NoUnlockChunk", "FundedTarget", "InvalidEraToReward", "InvalidNumberOfNominations", "NotSortedAndUnique", "AlreadyClaimed", "IncorrectHistoryDepth", "IncorrectSlashingSpans", "BadState", "TooManyTargets", "BadTarget", "CannotChillOther", "TooManyNominators", "TooManyValidators", "CommissionTooLow", "BoundNotMet"] }, SpStakingOffenceOffenceDetails: { offender: "(SeedPrimitivesSignatureAccountId20,PalletStakingExposure)", reporters: "Vec<SeedPrimitivesSignatureAccountId20>" }, SpCoreCryptoKeyTypeId: "[u8;4]", PalletSessionError: { _enum: ["InvalidProof", "NoAssociatedValidatorId", "DuplicatedKey", "NoKeys", "NoAccount"] }, PalletGrandpaStoredState: { _enum: { Live: "Null", PendingPause: { scheduledAt: "u32", delay: "u32" }, Paused: "Null", PendingResume: { scheduledAt: "u32", delay: "u32" } } }, PalletGrandpaStoredPendingChange: { scheduledAt: "u32", delay: "u32", nextAuthorities: "Vec<(SpConsensusGrandpaAppPublic,u64)>", forced: "Option<u32>" }, PalletGrandpaError: { _enum: ["PauseFailed", "ResumeFailed", "ChangePending", "TooSoon", "InvalidKeyOwnershipProof", "InvalidEquivocationProof", "DuplicateOffenceReport"] }, PalletImOnlineError: { _enum: ["InvalidKey", "DuplicatedHeartbeat"] }, PalletSudoError: { _enum: ["RequireSudo"] }, PalletTransactionPaymentReleases: { _enum: ["V1Ancient", "V2"] }, PalletDexTradingPairStatus: { _enum: ["NotEnabled", "Enabled"] }, PalletDexError: { _enum: ["MustBeEnabled", "MustBeNotEnabled", "InsufficientInputAmount", "InvalidInputAmounts", "InsufficientAmount", "InsufficientAmountA", "InsufficientAmountB", "InsufficientLiquidityBurnt", "InsufficientWithdrawnAmountA", "InsufficientWithdrawnAmountB", "InsufficientOutputAmount", "InvalidLiquidityIncrement", "InvalidConstantProduct", "IdenticalTokenAddress", "InvalidAssetId", "InvalidTradingPathLength", "InsufficientTargetAmount", "ExcessiveSupplyAmount", "InsufficientLiquidity", "ZeroSupplyAmount", "ZeroTargetAmount", "LiquidityProviderTokenNotCreated", "ExpiredDeadline"] }, PalletNftCollectionInformation: { owner: "SeedPrimitivesSignatureAccountId20", name: "Bytes", metadataScheme: "Bytes", royaltiesSchedule: "Option<SeedPrimitivesNftRoyaltiesSchedule>", maxIssuance: "Option<u32>", originChain: "SeedPrimitivesNftOriginChain", nextSerialNumber: "u32", collectionIssuance: "u32", crossChainCompatibility: "SeedPrimitivesNftCrossChainCompatibility" }, PalletNftTokenInformation: { owner: "SeedPrimitivesSignatureAccountId20", lockStatus: "Option<SeedPrimitivesNftTokenLockReason>", utilityFlags: "SeedPalletCommonUtilsTokenUtilityFlags" }, SeedPrimitivesNftTokenLockReason: { _enum: { Listed: "u128" } }, SeedPalletCommonUtilsTokenUtilityFlags: { transferable: "bool", burnAuthority: "Option<SeedPalletCommonUtilsTokenBurnAuthority>" }, SeedPalletCommonUtilsPublicMintInformation: { enabled: "bool", pricingDetails: "Option<(u32,u128)>" }, PalletNftCollectionPendingIssuances: { nextIssuanceId: "u32", pendingIssuances: "Vec<(SeedPrimitivesSignatureAccountId20,Vec<PalletNftPendingIssuance>)>" }, PalletNftPendingIssuance: { issuanceId: "u32", quantity: "u32", burnAuthority: "SeedPalletCommonUtilsTokenBurnAuthority" }, PalletNftError: { _enum: ["CollectionNameInvalid", "NoAvailableIds", "NotTokenOwner", "NoToken", "NotCollectionOwner", "PublicMintDisabled", "TokenLocked", "RoyaltiesInvalid", "NoCollectionFound", "InvalidMetadataPath", "InvalidNewOwner", "InvalidAdditionalData", "TokenLimitExceeded", "MintLimitExceeded", "InvalidMaxIssuance", "MaxIssuanceAlreadySet", "MaxIssuanceReached", "AttemptedMintOnBridgedToken", "CannotClaimNonClaimableCollections", "CannotUpdateMetadata", "InitialIssuanceNotZero", "CollectionIssuanceNotZero", "BlockedMint", "MintUtilityBlocked", "TransferUtilityBlocked", "BurnUtilityBlocked", "PendingIssuanceLimitExceeded", "InvalidPendingIssuance", "CannotUpdateTokenUtility", "InvalidBurnAuthority", "SerialNumbersNotUnique"] }, PalletSftSftCollectionInformation: { collectionOwner: "SeedPrimitivesSignatureAccountId20", collectionName: "Bytes", metadataScheme: "Bytes", royaltiesSchedule: "Option<SeedPrimitivesNftRoyaltiesSchedule>", originChain: "SeedPrimitivesNftOriginChain", nextSerialNumber: "u32" }, PalletSftSftTokenInformation: { tokenName: "Bytes", maxIssuance: "Option<u128>", tokenIssuance: "u128", ownedTokens: "Vec<(SeedPrimitivesSignatureAccountId20,PalletSftSftTokenBalance)>" }, PalletSftSftTokenBalance: { freeBalance: "u128", reservedBalance: "u128" }, PalletSftSftCollectionPendingIssuances: { nextIssuanceId: "u32", pendingIssuances: "Vec<(SeedPrimitivesSignatureAccountId20,Vec<PalletSftSftPendingIssuance>)>" }, PalletSftSftPendingIssuance: { issuanceId: "u32", serialNumbers: "Vec<(u32,u128)>" }, PalletSftError: { _enum: ["NameInvalid", "NoToken", "NotCollectionOwner", "RoyaltiesInvalid", "NoCollectionFound", "InsufficientBalance", "InvalidQuantity", "InvalidMaxIssuance", "InvalidNewOwner", "InvalidAdditionalData", "MaxIssuanceAlreadySet", "MaxIssuanceReached", "MaxOwnersReached", "Overflow", "PublicMintDisabled", "TokenLimitExceeded", "MintUtilityBlocked", "TransferUtilityBlocked", "BurnUtilityBlocked", "BurnAuthorityAlreadySet", "TokenAlreadyIssued", "PendingIssuanceLimitExceeded", "NoBurnAuthority", "InvalidPendingIssuance", "CannotUpdateTokenUtility", "InvalidBurnAuthority", "SerialNumbersNotUnique"] }, PalletXrplBridgeDelayedWithdrawal: { sender: "SeedPrimitivesSignatureAccountId20", destinationTag: "Option<u32>", withdrawTx: "PalletXrplBridgeWithdrawTransaction" }, PalletXrplBridgeWithdrawTransaction: { _enum: { XRP: "PalletXrplBridgeXrpWithdrawTransaction", Asset: "PalletXrplBridgeAssetWithdrawTransaction" } }, PalletXrplBridgeXrpWithdrawTransaction: { txFee: "u64", txNonce: "u32", txTicketSequence: "u32", amount: "u128", destination: "H160" }, PalletXrplBridgeAssetWithdrawTransaction: { txFee: "u64", txNonce: "u32", txTicketSequence: "u32", amount: "u128", destination: "H160", assetId: "u32", currency: "PalletXrplBridgeXrplCurrencyType", issuer: "H160" }, PalletXrplBridgeXrplTicketSequenceParams: { startSequence: "u32", bucketSize: "u32" }, PalletXrplBridgeError: { _enum: ["AssetNotSupported", "NotPermitted", "NoAvailablePaymentIds", "DelayScheduleAtCapacity", "NoTransactionDetails", "RelayerDoesNotExists", "WithdrawInvalidAmount", "DoorAddressNotSet", "TooManySigners", "InvalidAssetDecimals", "InvalidCurrencyCode", "InvalidMantissaExponentConversion", "InvalidSigners", "InvalidHighestPrunedIndex", "TxReplay", "NextTicketSequenceParamsNotSet", "NextTicketSequenceParamsInvalid", "TicketSequenceParamsInvalid", "CannotProcessMoreTransactionsAtThatBlock", "CannotPruneActiveLedgerIndex", "OutSideSubmissionWindow", "TooManyTransactionsPerLedger", "InvalidSymbolMapping", "AssetRoundingTooHigh", "Xls20Incompatible", "Xls20TokenIDNotFound", "TestErrorRemoveAfterUsing"] }, PalletXrplError: { _enum: ["XRPLTransaction", "XRPLTransactionAccount", "CallFiltered"] }, PalletTokenApprovalsError: { _enum: ["NoToken", "NotTokenOwner", "NotTokenOwnerOrApproved", "CallerNotOperator", "ApprovedAmountTooLow", "CallerNotApproved", "AlreadyApproved", "ApprovalDoesntExist"] }, PalletEchoError: { _enum: ["NoAvailableIds", "InvalidParameter", "InvalidAbiEncoding"] }, PalletMarketplaceMarketplace: { account: "SeedPrimitivesSignatureAccountId20", entitlement: "Permill" }, PalletMarketplaceListing: { _enum: { FixedPrice: "PalletMarketplaceFixedPriceListing", Auction: "PalletMarketplaceAuctionListing" } }, PalletMarketplaceFixedPriceListing: { paymentAsset: "u32", fixedPrice: "u128", close: "u32", buyer: "Option<SeedPrimitivesSignatureAccountId20>", seller: "SeedPrimitivesSignatureAccountId20", tokens: "PalletMarketplaceListingTokens", royaltiesSchedule: "SeedPrimitivesNftRoyaltiesSchedule", marketplaceId: "Option<u32>" }, PalletMarketplaceAuctionListing: { paymentAsset: "u32", reservePrice: "u128", close: "u32", seller: "SeedPrimitivesSignatureAccountId20", tokens: "PalletMarketplaceListingTokens", royaltiesSchedule: "SeedPrimitivesNftRoyaltiesSchedule", marketplaceId: "Option<u32>" }, PalletMarketplaceOfferType: { _enum: { Simple: "PalletMarketplaceSimpleOffer" } }, PalletMarketplaceSimpleOffer: { tokenId: "(u32,u32)", assetId: "u32", amount: "u128", buyer: "SeedPrimitivesSignatureAccountId20", marketplaceId: "Option<u32>" }, PalletMarketplaceError: { _enum: ["NoAvailableIds", "NotTokenOwner", "NotForFixedPriceSale", "NotForAuction", "NotCollectionOwner", "TokenNotListed", "MaxOffersReached", "TokenLocked", "RoyaltiesInvalid", "BidTooLow", "MixedBundleSale", "MarketplaceNotRegistered", "InvalidMetadataPath", "InvalidOffer", "NotBuyer", "NotSeller", "IsTokenOwner", "ZeroOffer", "ZeroBalance", "TokenOnAuction", "EmptyTokens", "NoToken", "DurationTooShort", "DuplicateTokens"] }, PalletPreimageRequestStatus: { _enum: { Unrequested: { deposit: "(SeedPrimitivesSignatureAccountId20,u128)", len: "u32" }, Requested: { deposit: "Option<(SeedPrimitivesSignatureAccountId20,u128)>", count: "u32", len: "Option<u32>" } } }, PalletPreimageError: { _enum: ["TooBig", "AlreadyNoted", "NotAuthorized", "NotNoted", "Requested", "NotRequested"] }, PalletVortexDistributionVtxDistStatus: { _enum: ["Disabled", "Enabled", "Triggering", "Triggered", "Paying", "Done"] }, PalletVortexDistributionError: { _enum: ["RequireAdmin", "VtxDistIdNotAvailable", "VtxDistAlreadyEnabled", "VtxDistDisabled", "NoVtxAssetMinted", "InvalidAmount", "VtxDistIdInUse", "NotAValidator", "VortexPeriodNotSet", "PivotStringTooLong", "AssetsShouldNotIncludeVtxAsset", "CannotTrigger", "CannotRedeem", "NotTriggered", "ExceededMaxRewards", "VortexPriceIsZero", "RootPriceIsZero", "VtxRedeemDisabled", "ManualRewardInputDisabled", "VtxRewardPayoutFailed", "RewardPointsNotRegistered"] }, PalletPartnerAttributionError: { _enum: ["NoAvailableIds", "PartnerNotFound", "PartnerAlreadyExists", "Unauthorized", "CallerNotFuturepass", "AccountAlreadyAttributed"] }, PalletFeeProxyError: { _enum: ["NestedFeePreferenceCall", "FeeTokenIsGasToken"] }, PalletFeeControlFeeControlFeeConfig: { evmBaseFeePerGas: "U256", weightMultiplier: "Perbill", lengthMultiplier: "u128" }, PalletXls20Error: { _enum: ["NotRelayer", "MappingAlreadyExists", "Xls20MintFeeTooLow", "NotXLS20Compatible", "NoToken", "NotCollectionOwner", "CouldNotDecodeXls20Token", "CannotBridgeBurnableToken"] }, PalletDoughnutError: { _enum: ["DoughnutDecodeFailed", "UnsupportedDoughnutVersion", "DoughnutVerifyFailed", "UnauthorizedSender", "CallerNotIssuer", "DoughnutRevoked", "HolderRevoked", "ToppingDecodeFailed", "TRNDomainNotfound", "ToppingPermissionDenied", "UnsupportedInnerCall", "HolderNotWhitelisted"] }, PalletMaintenanceModeError: { _enum: ["AccountBlocked", "MaintenanceModeActive", "InvalidPalletName", "InvalidCallName", "CannotBlock"] }, PalletCrowdsaleError: { _enum: ["AccessDenied", "NoAvailableIds", "InvalidBlockRange", "CrowdsaleNotFound", "InvalidCrowdsaleStatus", "CrowdsaleNotEnabled", "InvalidSoftCapPrice", "InvalidAsset", "InvalidMaxIssuance", "InvalidAmount", "InvalidQuantity", "VoucherClaimFailed", "MaxIssuanceNotSet", "CollectionIssuanceNotZero", "CollectionPublicMintable", "TooManySales", "VouchersAlreadyClaimed", "SaleDistributionFailed", "SaleDurationTooLong", "ExtrinsicForbidden"] }, PalletNfiError: { _enum: ["InvalidMintFee", "InvalidTokenFormat", "NotEnabled", "NotRelayer", "NotCollectionOwner", "NotTokenOwner", "NoToken"] }, PalletMigrationMigrationStatus: { _enum: { NoMigrationInProgress: "Null", InProgress: { stepsDone: "u32" }, Completed: "Null" } }, PalletMigrationError: { _enum: ["MigrationInProgress", "InvalidBlockDelay", "InvalidBlockLimit"] }, SeedPalletCommonSyloResolver: { controller: "SeedPrimitivesSignatureAccountId20", serviceEndpoints: "Vec<Bytes>" }, SeedPalletCommonSyloValidationRecord: { _alias: { entries_: "entries" }, author: "SeedPrimitivesSignatureAccountId20", resolvers: "Vec<SeedPalletCommonSyloResolverId>", dataType: "Bytes", tags: "Vec<Bytes>", entries_: "Vec<SeedPalletCommonSyloValidationEntry>" }, SeedPalletCommonSyloValidationEntry: { checksum: "H256", block: "u32" }, PalletSyloDataVerificationError: { _enum: ["ResolverAlreadyRegistered", "ResolverNotRegistered", "NotController", "RecordAlreadyCreated", "NoValidationRecord", "MissingModifyPermission"] }, PalletLiquidityPoolsPoolInfo: { id: "u32", creator: "SeedPrimitivesSignatureAccountId20", rewardAssetId: "u32", stakedAssetId: "u32", interestRate: "u32", maxTokens: "u128", lastUpdated: "u32", lockStartBlock: "u32", lockEndBlock: "u32", lockedAmount: "u128", poolStatus: "PalletLiquidityPoolsPoolStatus" }, PalletLiquidityPoolsPoolStatus: { _enum: ["Closed", "Open", "Started", "Renewing", "Matured"] }, PalletLiquidityPoolsUserInfo: { amount: "u128", rewardDebt: "u128", shouldRollover: "bool", rolledOver: "bool" }, PalletLiquidityPoolsPoolRelationship: { successorId: "Option<u32>" }, PalletLiquidityPoolsError: { _enum: ["NotPoolCreator", "InvalidBlockRange", "PoolAlreadyExists", "PoolDoesNotExist", "SuccessorPoolDoesNotExist", "PredecessorPoolDoesNotExist", "SuccessorPoolSizeShouldBeGreaterThanPredecessor", "SuccessorPoolSizeShouldBeLockedAfterPredecessor", "RolloverPoolsShouldBeTheSameAsset", "NoTokensStaked", "PoolNotOpen", "NotReadyForClaimingReward", "NoAvailablePoolId", "StakingLimitExceeded", "OffchainErrNotValidator", "OffchainErrTooEarly", "OffchainErrSubmitTransaction", "OffchainErrWrongTransactionSource", "PivotStringTooLong"] }, PalletSyloDataPermissionsPermissionRecord: { grantor: "SeedPrimitivesSignatureAccountId20", permission: "SeedPalletCommonSyloDataPermission", block: "u32", expiry: "Option<u32>", irrevocable: "bool" }, PalletSyloDataPermissionsTaggedPermissionRecord: { permission: "SeedPalletCommonSyloDataPermission", tags: "Vec<Bytes>", block: "u32", expiry: "Option<u32>", irrevocable: "bool" }, PalletSyloDataPermissionsPermissionReference: { permissionRecordId: "Bytes" }, PalletSyloDataPermissionsError: { _enum: ["DataRecordDoesNotExist", "IrrevocableCannotBeExpirable", "InvalidExpiry", "ExceededMaxPermissions", "MissingDistributePermission", "CannotGrantDistributePermission", "CannotGrantIrrevocablePermission", "PermissionIrrevocable", "NotPermissionGrantor", "PermissionNotFound", "MissingValidationRecord", "PermissionReferenceAlreadyExists", "ExceededMaxExpiringPermissions", "InvalidString"] }, PalletSyloActionPermissionsTransactPermission: { spender: "PalletSyloActionPermissionsSpender", spendingBalance: "Option<u128>", allowedCalls: "BTreeSet<(Bytes,Bytes)>", block: "u32", expiry: "Option<u32>" }, PalletSyloActionPermissionsError: { _enum: ["PermissionNotGranted", "NotAuthorizedCall", "PermissionExpired", "InvalidExpiry", "PermissionAlreadyExists", "InvalidSpendingBalance", "InvalidTokenSignature", "GranteeDoesNotMatch", "NonceAlreadyUsed", "InvalidFuturepassInToken", "InsufficientSpendingBalance"] }, PalletElectionProviderMultiPhaseReadySolution: { supports: "Vec<(SeedPrimitivesSignatureAccountId20,SpNposElectionsSupport)>", score: "SpNposElectionsElectionScore", compute: "PalletElectionProviderMultiPhaseElectionCompute" }, PalletElectionProviderMultiPhaseRoundSnapshot: { voters: "Vec<(SeedPrimitivesSignatureAccountId20,u64,Vec<SeedPrimitivesSignatureAccountId20>)>", targets: "Vec<SeedPrimitivesSignatureAccountId20>" }, PalletElectionProviderMultiPhaseSignedSignedSubmission: { who: "SeedPrimitivesSignatureAccountId20", deposit: "u128", rawSolution: "PalletElectionProviderMultiPhaseRawSolution", callFee: "u128" }, PalletElectionProviderMultiPhaseError: { _enum: ["PreDispatchEarlySubmission", "PreDispatchWrongWinnerCount", "PreDispatchWeakSubmission", "SignedQueueFull", "SignedCannotPayDeposit", "SignedInvalidWitness", "SignedTooMuchWeight", "OcwCallWrongEra", "MissingSnapshotMetadata", "InvalidSubmissionIndex", "CallNotAllowed", "FallbackFailed", "BoundNotMet", "TooManyWinners"] }, PalletBagsListListNode: { id: "SeedPrimitivesSignatureAccountId20", prev: "Option<SeedPrimitivesSignatureAccountId20>", next: "Option<SeedPrimitivesSignatureAccountId20>", bagUpper: "u64", score: "u64" }, PalletBagsListListBag: { head: "Option<SeedPrimitivesSignatureAccountId20>", tail: "Option<SeedPrimitivesSignatureAccountId20>" }, PalletBagsListError: { _enum: { List: "PalletBagsListListListError" } }, PalletBagsListListListError: { _enum: ["Duplicate", "NotHeavier", "NotInSameBag", "NodeNotFound"] }, FpRpcTransactionStatus: { transactionHash: "H256", transactionIndex: "u32", from: "H160", to: "Option<H160>", contractAddress: "Option<H160>", logs: "Vec<EthereumLog>", logsBloom: "EthbloomBloom" }, EthbloomBloom: "[u8;256]", EthereumReceiptReceiptV3: { _enum: { Legacy: "EthereumReceiptEip658ReceiptData", EIP2930: "EthereumReceiptEip658ReceiptData", EIP1559: "EthereumReceiptEip658ReceiptData" } }, EthereumReceiptEip658ReceiptData: { statusCode: "u8", usedGas: "U256", logsBloom: "EthbloomBloom", logs: "Vec<EthereumLog>" }, EthereumBlock: { header: "EthereumHeader", transactions: "Vec<EthereumTransactionTransactionV2>", ommers: "Vec<EthereumHeader>" }, EthereumHeader: { parentHash: "H256", ommersHash: "H256", beneficiary: "H160", stateRoot: "H256", transactionsRoot: "H256", receiptsRoot: "H256", logsBloom: "EthbloomBloom", difficulty: "U256", number: "U256", gasLimit: "U256", gasUsed: "U256", timestamp: "u64", extraData: "Bytes", mixHash: "H256", nonce: "EthereumTypesHashH64" }, EthereumTypesHashH64: "[u8;8]", PalletEthereumError: { _enum: ["InvalidSignature", "PreLogExists", "GasLimitTooLow", "GasLimitTooHigh", "GasPriceTooLow", "BalanceLow", "InvalidNonce", "Undefined"] }, PalletEvmCodeMetadata: { _alias: { size_: "size", hash_: "hash" }, size_: "u64", hash_: "H256" }, PalletEvmError: { _enum: ["BalanceLow", "FeeOverflow", "PaymentOverflow", "WithdrawFailed", "GasPriceTooLow", "InvalidNonce", "GasLimitTooLow", "GasLimitTooHigh", "Undefined", "Reentrancy", "TransactionMustComeFromEOA"] }, PalletEthyBridgePauseStatus: { manualPause: "bool", authoritiesChange: "bool" }, PalletEthyEventClaimStatus: { _enum: ["Pending", "Challenged", "ProvenValid"] }, PalletEthyCheckedEthCallRequest: { input: "Bytes", target: "H160", timestamp: "u64", maxBlockLookBehind: "u64", tryBlockNumber: "u64", checkTimestamp: "u64" }, PalletEthyError: { _enum: ["NoLocalSigningAccount", "OffchainUnsignedTxSignedPayload", "InvalidNotarization", "HttpFetch", "InvalidClaim", "OcwConfig", "EventReplayPending", "EventReplayProcessed", "BridgePaused", "Internal", "NoPermission", "NoClaim", "ClaimAlreadyChallenged", "CantUnbondRelayer", "CantBondRelayer", "NoBondPaid", "MaxNewSignersExceeded", "MaxChallengesExceeded", "MessageTooLarge"] }, PalletErc20PegPendingPayment: { _enum: { Deposit: "PalletErc20PegErc20DepositEvent", Withdrawal: "(SeedPrimitivesSignatureAccountId20,PalletErc20PegWithdrawMessage)" } }, PalletErc20PegErc20DepositEvent: { tokenAddress: "H160", amount: "U256", beneficiary: "H160" }, PalletErc20PegWithdrawMessage: { tokenAddress: "H160", amount: "U256", beneficiary: "H160" }, PalletErc20PegError: { _enum: ["CreateAssetFailed", "InvalidAmount", "InvalidPalletId", "InvalidSourceAddress", "DepositsPaused", "WithdrawalsPaused", "UnsupportedAsset", "EvmWithdrawalFailed", "InvalidAbiEncoding", "PaymentIdNotFound"] }, PalletNftPegBlockedTokenInfo: { collectionId: "u32", destinationAddress: "SeedPrimitivesSignatureAccountId20", serialNumbers: "Vec<u32>" }, PalletNftPegError: { _enum: ["ExceedsMaxAddresses", "ExceedsMaxTokens", "InvalidAbiEncoding", "InvalidAbiPrefix", "NoCollectionFound", "NoMappedTokenExists", "NoPermissionToBridge", "StateSyncDisabled", "TokenListLengthMismatch", "ExceedsMaxVecLength", "NoBlockedTokensFound", "NotBlockedTokenDestination"] }, PalletProxyProxyDefinition: { delegate: "SeedPrimitivesSignatureAccountId20", proxyType: "SeedRuntimeImplsProxyType", delay: "u32" }, PalletProxyAnnouncement: { real: "SeedPrimitivesSignatureAccountId20", callHash: "H256", height: "u32" }, PalletProxyError: { _enum: ["TooMany", "NotFound", "NotProxy", "Unproxyable", "Duplicate", "NoPermission", "Unannounced", "NoSelfProxy"] }, PalletFuturepassError: { _enum: ["AccountAlreadyRegistered", "DelegateNotRegistered", "DelegateAlreadyExists", "BlacklistedExtrinsic", "NotFuturepassOwner", "OwnerCannotUnregister", "PermissionDenied", "InvalidProxyType", "ExpiredDeadline", "InvalidSignature", "AccountParsingFailure", "RegisterDelegateSignerMismatch"] }, SeedPrimitivesSignatureEthereumSignature: "SpCoreEcdsaSignature", FrameSystemExtensionsCheckNonZeroSender: "Null", FrameSystemExtensionsCheckSpecVersion: "Null", FrameSystemExtensionsCheckTxVersion: "Null", FrameSystemExtensionsCheckGenesis: "Null", FrameSystemExtensionsCheckNonce: "Compact<u32>", FrameSystemExtensionsCheckWeight: "Null", PalletMaintenanceModeMaintenanceChecker: "Null", PalletTransactionPaymentChargeTransactionPayment: "Compact<u128>", SeedRuntimeRuntime: "Null" };
    var a = {};
    y(a, { assetsExt: () => x, dex: () => b2, ethWallet: () => P2, ethy: () => v3, nft: () => I2, runtime: () => C, sft: () => k2, syloDataPermissions: () => U2, xrplBridge: () => f });
    var b2 = { rpc: { quote: { description: "Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset", params: [{ name: "amountA", type: "u128" }, { name: "reserveA", type: "u128" }, { name: "reserveB", type: "u128" }], type: "Json" }, getAmountsOut: { description: "Given an array of AssetIds, return amounts out for an amount in", params: [{ name: "amountIn", type: "u128" }, { name: "path", type: "Vec<AssetId>" }], type: "Json" }, getAmountsIn: { description: "Given an array of AssetIds, return amounts in for an amount out", params: [{ name: "amountOut", type: "u128" }, { name: "path", type: "Vec<AssetId>" }], type: "Json" }, getLPTokenID: { description: "Given two AssetIds, return liquidity token created for the pair", params: [{ name: "assetA", type: "AssetId" }, { name: "assetB", type: "AssetId" }], type: "Json" }, getLiquidity: { description: "Given two AssetIds, return liquidity", params: [{ name: "assetA", type: "AssetId" }, { name: "assetB", type: "AssetId" }], type: "Json" }, getTradingPairStatus: { description: "Given two AssetIds, return whether trading pair is enabled or disabled", params: [{ name: "assetA", type: "AssetId" }, { name: "assetB", type: "AssetId" }], type: "Text" } }, types: {} };
    var P2 = { rpc: {}, types: { EthWalletCall: { nonce: "u32" } } };
    var v3 = { rpc: { getEventProof: { description: "Get ETH event proof for event Id", params: [{ name: "eventId", type: "EventProofId" }], type: "Option<EthEventProofResponse>" }, getXrplTxProof: { description: "Get XRPL event proof for event Id", params: [{ name: "eventId", type: "EventProofId" }], type: "Option<XrplEventProofResponse>" }, subscribeEventProofs: { alias: ["ethy_subscribeEventProofs", "ethy_unsubscribeEventProofs"], description: "Subscribe to Eth event proof.", params: [], pubsub: ["subscribeEventProofs", "unsubscribeEventProofs"], type: "Null" } }, types: { VersionedEventProof: { _enum: { sentinel: null, EventProof: "EventProof" } }, ExtrinsicSignature: "EthereumSignature", EthyId: "[u8; 32]", EthyEventId: "u64", EthEventProofResponse: { event_id: "EventProofId", signatures: "Vec<Bytes>", validators: "Vec<AccountId20>", validator_set_id: "ValidatorSetId", block: "H256", tag: "Option<Bytes>" }, EventProofId: "u64", EthereumSignature: { r: "H256", s: "H256", v: "U8" }, EventProof: { digest: "EthyId", eventId: "EventProofId", validatorSetId: "ValidatorSetId", signatures: "Vec<Bytes>", block: "[u8; 32]" } } };
    var I2 = { rpc: { ownedTokens: { description: "Get all NFTs owned by an account", params: [{ name: "collectionId", type: "CollectionUuid" }, { name: "who", type: "AccountId" }, { name: "cursor", type: "SerialNumber" }, { name: "limit", type: "u16" }], type: "Json" }, tokenUri: { description: "Get the URI of a token", params: [{ name: "tokenId", type: "TokenId" }], type: "Json" }, collectionDetails: { description: "Returns the collection info for a NFT collection", params: [{ name: "collectionId", type: "u32" }], type: "Result<CollectionDetail, Text>" } }, types: { CollectionUuid: "u32", SerialNumber: "u32", TokenId: "(CollectionUuid, SerialNumber)", CollectionDetail: { owner: "AccountId", name: "Vec<u8>", metadataScheme: "Vec<u8>", royaltiesSchedule: "Option<Vec<(T::AccountId, Permill)>>", maxIssuance: "Option<u32>", originChain: "Text", nextSerialNumber: "u32", collectionIssuance: "u32", crossChainCompatibility: "CrossChainCompatibility" }, CrossChainCompatibility: { xrpl: "bool" } } };
    var u = { execute_block: { description: "Execute the given block.", params: [{ name: "block", type: "Block" }], type: "Null" } };
    var T = { version: { description: "Returns the version of the runtime.", params: [], type: "RuntimeVersionPre3" } };
    var c = { initialize_block: { description: "Initialize a block with the given header.", params: [{ name: "header", type: "Header" }], type: "Null" } };
    var E2 = { Core: [{ methods: r(r({ version: { description: "Returns the version of the runtime.", params: [], type: "RuntimeVersion" } }, u), c), version: 4 }, { methods: r(r({ version: { description: "Returns the version of the runtime.", params: [], type: "RuntimeVersionPre4" } }, u), c), version: 3 }, { methods: r(r(r({}, T), u), c), version: 2 }, { methods: r(r({ initialise_block: { description: "Initialize a block with the given header.", params: [{ name: "header", type: "Header" }], type: "Null" } }, T), u), version: 1 }] };
    var Q = { Fixed64: "Int<64, Fixed64>", FixedI64: "Int<64, FixedI64>", FixedU64: "UInt<64, FixedU64>", Fixed128: "Int<128, Fixed128>", FixedI128: "Int<128, FixedI128>", FixedU128: "UInt<128, FixedU128>", I32F32: "Int<64, I32F32>", U32F32: "UInt<64, U32F32>", PerU16: "UInt<16, PerU16>", Perbill: "UInt<32, Perbill>", Percent: "UInt<8, Percent>", Permill: "UInt<32, Permill>", Perquintill: "UInt<64, Perquintill>" };
    var h2 = { rpc: {}, runtime: E2, types: i(r({}, Q), { AccountId: "AccountId32", AccountId20: "GenericEthereumAccountId", AccountId32: "GenericAccountId32", AccountId33: "GenericAccountId33", AccountIdOf: "AccountId", AccountIndex: "GenericAccountIndex", Address: "MultiAddress", AssetId: "u32", Balance: "UInt<128, Balance>", BalanceOf: "Balance", Block: "GenericBlock", BlockNumber: "u32", BlockNumberFor: "BlockNumber", BlockNumberOf: "BlockNumber", Call: "GenericCall", CallHash: "Hash", CallHashOf: "CallHash", ChangesTrieConfiguration: { digestInterval: "u32", digestLevels: "u32" }, ChangesTrieSignal: { _enum: { NewConfiguration: "Option<ChangesTrieConfiguration>" } }, ConsensusEngineId: "GenericConsensusEngineId", CodecHash: "Hash", CrateVersion: { major: "u16", minor: "u8", patch: "u8" }, Digest: { logs: "Vec<DigestItem>" }, DigestItem: { _enum: { Other: "Bytes", AuthoritiesChange: "Vec<AuthorityId>", ChangesTrieRoot: "Hash", SealV0: "SealV0", Consensus: "Consensus", Seal: "Seal", PreRuntime: "PreRuntime", ChangesTrieSignal: "ChangesTrieSignal", RuntimeEnvironmentUpdated: "Null" } }, ExtrinsicsWeight: { normal: "Weight", operational: "Weight" }, H32: "[u8; 4; H32]", H64: "[u8; 8; H64]", H128: "[u8; 16; H128]", H160: "[u8; 20; H160]", H256: "[u8; 32; H256]", H512: "[u8; 64; H512]", H1024: "[u8; 128; H1024]", H2048: "[u8; 256; H2048]", Hash: "H256", Header: { parentHash: "Hash", number: "Compact<BlockNumber>", stateRoot: "Hash", extrinsicsRoot: "Hash", digest: "Digest" }, HeaderPartial: { parentHash: "Hash", number: "BlockNumber" }, IndicesLookupSource: "GenericLookupSource", Index: "u32", Justification: "(ConsensusEngineId, EncodedJustification)", EncodedJustification: "Bytes", Justifications: "Vec<Justification>", KeyValue: "(StorageKey, StorageData)", KeyTypeId: "u32", LockIdentifier: "[u8; 8]", LookupSource: "MultiAddress", LookupTarget: "AccountId", ModuleId: "LockIdentifier", MultiAddress: "GenericMultiAddress", MultiSigner: { _enum: { Ed25519: "[u8; 32]", Sr25519: "[u8; 32]", Ecdsa: "[u8; 33]" } }, Moment: "UInt<64, Moment>", OpaqueCall: "Bytes", Origin: "DoNotConstruct<Origin>", OriginCaller: { _enum: { System: "SystemOrigin" } }, PalletId: "LockIdentifier", PalletsOrigin: "OriginCaller", PalletVersion: { major: "u16", minor: "u8", patch: "u8" }, Pays: { _enum: ["Yes", "No"] }, Phantom: "Null", PhantomData: "Null", Releases: { _enum: ["V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10"] }, RuntimeCall: "Call", RuntimeEvent: "Event", RuntimeDbWeight: { read: "Weight", write: "Weight" }, SignedBlock: "SignedBlockWithJustifications", SignedBlockWithJustification: { block: "Block", justification: "Option<EncodedJustification>" }, SignedBlockWithJustifications: { block: "Block", justifications: "Option<Justifications>" }, Slot: "u64", SlotDuration: "u64", StorageData: "Bytes", StorageInfo: { palletName: "Bytes", storage_name: "Bytes", prefix: "Bytes", maxValues: "Option<u32>", maxSize: "Option<u32>" }, StorageProof: { trieNodes: "Vec<Bytes>" }, TransactionPriority: "u64", TransactionLongevity: "u64", TransactionTag: "Bytes", TransactionInfo: { _alias: { dataSize: "size" }, chunkRoot: "H256", contentHash: "H256", dataSize: "u32", blockChunks: "u32" }, TransactionStorageProof: { chunk: "Vec<u8>", proof: "Vec<Vec<u8>>" }, ValidatorId: "AccountId", ValidatorIdOf: "ValidatorId", WeightV0: "u32", WeightV1: "u64", WeightV2: { refTime: "Compact<u64>", proofSize: "Compact<u64>" }, Weight: "WeightV2", WeightMultiplier: "Fixed64", PreRuntime: "(ConsensusEngineId, Bytes)", SealV0: "(u64, Signature)", Seal: "(ConsensusEngineId, Bytes)", Consensus: "(ConsensusEngineId, Bytes)" }) };
    var C = { rpc: {}, types: i(r({}, h2.types), { AccountId: "EthereumAccountId", AccountId20: "EthereumAccountId", AccountId32: "EthereumAccountId", Address: "AccountId", LookupSource: "AccountId", Lookup0: "AccountId", AssetId: "u32", Balance: "u128" }) };
    var f = { rpc: {}, types: { XRPLTxData: { _enum: { Payment: { amount: "Balance", destination: "H160" }, CurrencyPayment: { amount: "Balance", address: "H160", currencyId: "H256" } } }, XrplEventProofResponse: { event_id: "EventProofId", signatures: "Vec<Bytes>", validators: "Vec<Bytes>", validator_set_id: "ValidatorSetId", block: "H256", tag: "Option<Bytes>" } } };
    var x = { rpc: { freeBalance: { description: "Given asset id and address, returns free balance", params: [{ name: "asset", type: "AssetId" }, { name: "who", type: "AccountId" }], type: "Text" } }, types: {} };
    var k2 = { rpc: { tokenUri: { description: "Get the URI of a token", params: [{ name: "tokenId", type: "TokenId" }], type: "Json" } }, types: {} };
    var U2 = { rpc: { getPermissions: { description: "Get all permissions granted to a grantee by a data author for a given set of data ids", params: [{ name: "dataAuthor", type: "AccountId" }, { name: "grantee", type: "AccountId" }, { name: "dataIds", type: "Vec<Text>" }], type: "Result<GetPermissionsResult, Text>" } }, types: { DataPermission: "Text", PermissionReferenceRecord: { permission_record_id: "Text", resolvers: "Vec<(Text, Vec<Text>)>" }, GetPermissionsResult: { permissions: "Vec<(Text, Vec<DataPermission>)>", permission_reference: "Option<PermissionReferenceRecord>" } } };
    function L2() {
      return { types: r({}, N3()), rpc: r({}, O2()) };
    }
    function N3() {
      let e = Object.values(a).reduce((t, { types: n }) => r(r({}, t), n), {});
      return r(r({}, e), l17);
    }
    function O2() {
      return Object.keys(a).reduce((e, t) => {
        let n = a[t].rpc;
        return !n || !Object.keys(n).length ? e : i(r({}, e), { [t]: a[t].rpc });
      }, {});
    }
    var s = (init_api(), __toCommonJS(api_exports));
    function p(e) {
      if (e.indexOf("http") === 0) return { provider: new s.HttpProvider(e) };
      if (e.indexOf("ws") === 0) return { provider: new s.WsProvider(e) };
      throw new Error(`Unrecognized provider url: "${e}"`);
    }
    function X2(e, t = true, n = false) {
      return p(B(e, t, n));
    }
    function B(e, t = true, n = false) {
      if (e === "root") return t ? `wss://root.rootnet.live/${n ? "archive/" : ""}ws` : `https://root.rootnet.live/${n ? "archive" : ""}`;
      if (e === "porcini") return t ? `wss://porcini.rootnet.app/${n ? "archive/" : ""}ws` : `https://porcini.rootnet.app/${n ? "archive" : ""}`;
      if (e === "sprout-1") return t ? `wss://porcini.devnet.rootnet.app/${n ? "archive/" : ""}ws` : `https://porcini.devnet.rootnet.app/${n ? "archive" : ""}`;
      if (e === "sprout-2") return t ? `wss://root.devnet.rootnet.app/${n ? "archive/" : ""}ws` : `https://root.devnet.rootnet.app/${n ? "archive" : ""}`;
      throw new Error(`Unrecognized network name: "${e}"`);
    }
    function W2(e = true) {
      return p(e ? "ws://127.0.0.1:9944" : "http://127.0.0.1:9933");
    }
  }
});

// node_modules/@futureverse/signer/index.mjs
init_api();
init_util();
init_util_crypto();
var import_ripple_binary_codec = __toESM(require_dist2(), 1);
var import_ripple_keypairs = __toESM(require_dist3(), 1);
init_ethereum();
var import_blakejs = __toESM(require_blakejs(), 1);
var import_xrpl = __toESM(require_npm(), 1);
function F(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error("positive integer expected, got " + t);
}
function Ue(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function L(t, ...e) {
  if (!Ue(t))
    throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length))
    throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function N2(t, e = true) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function Re(t, e) {
  L(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error("digestInto() expects output buffer of length at least " + n);
}
var P = BigInt(2 ** 32 - 1);
var j = BigInt(32);
function Le(t, e = false) {
  return e ? { h: Number(t & P), l: Number(t >> j & P) } : { h: Number(t >> j & P) | 0, l: Number(t & P) | 0 };
}
function Oe(t, e = false) {
  let n = new Uint32Array(t.length), s = new Uint32Array(t.length);
  for (let r = 0; r < t.length; r++) {
    const { h: i, l: o } = Le(t[r], e);
    [n[r], s[r]] = [i, o];
  }
  return [n, s];
}
var He = (t, e, n) => t << n | e >>> 32 - n;
var ze = (t, e, n) => e << n | t >>> 32 - n;
var Be = (t, e, n) => e << n - 32 | t >>> 64 - n;
var Ce = (t, e, n) => t << n - 32 | e >>> 64 - n;
function De(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
var K = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Fe(t) {
  return t << 24 & 4278190080 | t << 8 & 16711680 | t >>> 8 & 65280 | t >>> 24 & 255;
}
function q(t) {
  for (let e = 0; e < t.length; e++)
    t[e] = Fe(t[e]);
}
typeof Uint8Array.from([]).toHex == "function" && Uint8Array.fromHex;
function Ne(t) {
  if (typeof t != "string")
    throw new Error("utf8ToBytes expected string, got " + typeof t);
  return new Uint8Array(new TextEncoder().encode(t));
}
function re(t) {
  return typeof t == "string" && (t = Ne(t)), L(t), t;
}
var je = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function Ke(t) {
  const e = (s) => t().update(re(s)).digest(), n = t();
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = () => t(), e;
}
var ie = [];
var oe = [];
var ae = [];
var qe = BigInt(0);
var A = BigInt(1);
var Xe = BigInt(2);
var Ve = BigInt(7);
var We = BigInt(256);
var Ze = BigInt(113);
for (let t = 0, e = A, n = 1, s = 0; t < 24; t++) {
  [n, s] = [s, (2 * n + 3 * s) % 5], ie.push(2 * (5 * s + n)), oe.push((t + 1) * (t + 2) / 2 % 64);
  let r = qe;
  for (let i = 0; i < 7; i++)
    e = (e << A ^ (e >> Ve) * Ze) % We, e & Xe && (r ^= A << (A << BigInt(i)) - A);
  ae.push(r);
}
var [Ge, Je] = Oe(ae, true);
var X = (t, e, n) => n > 32 ? Be(t, e, n) : He(t, e, n);
var V = (t, e, n) => n > 32 ? Ce(t, e, n) : ze(t, e, n);
function Qe(t, e = 24) {
  const n = new Uint32Array(10);
  for (let s = 24 - e; s < 24; s++) {
    for (let o = 0; o < 10; o++)
      n[o] = t[o] ^ t[o + 10] ^ t[o + 20] ^ t[o + 30] ^ t[o + 40];
    for (let o = 0; o < 10; o += 2) {
      const a = (o + 8) % 10, c = (o + 2) % 10, u = n[c], d = n[c + 1], f = X(u, d, 1) ^ n[a], p = V(u, d, 1) ^ n[a + 1];
      for (let m = 0; m < 50; m += 10)
        t[o + m] ^= f, t[o + m + 1] ^= p;
    }
    let r = t[2], i = t[3];
    for (let o = 0; o < 24; o++) {
      const a = oe[o], c = X(r, i, a), u = V(r, i, a), d = ie[o];
      r = t[d], i = t[d + 1], t[d] = c, t[d + 1] = u;
    }
    for (let o = 0; o < 50; o += 10) {
      for (let a = 0; a < 10; a++)
        n[a] = t[o + a];
      for (let a = 0; a < 10; a++)
        t[o + a] ^= ~n[(a + 2) % 10] & n[(a + 4) % 10];
    }
    t[0] ^= Ge[s], t[1] ^= Je[s];
  }
  n.fill(0);
}
var O = class _O extends je {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(e, n, s, r = false, i = 24) {
    if (super(), this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, this.enableXOF = false, this.blockLen = e, this.suffix = n, this.outputLen = s, this.enableXOF = r, this.rounds = i, F(s), 0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = De(this.state);
  }
  keccak() {
    K || q(this.state32), Qe(this.state32, this.rounds), K || q(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(e) {
    N2(this);
    const { blockLen: n, state: s } = this;
    e = re(e);
    const r = e.length;
    for (let i = 0; i < r; ) {
      const o = Math.min(n - this.pos, r - i);
      for (let a = 0; a < o; a++)
        s[this.pos++] ^= e[i++];
      this.pos === n && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state: e, suffix: n, pos: s, blockLen: r } = this;
    e[s] ^= n, (n & 128) !== 0 && s === r - 1 && this.keccak(), e[r - 1] ^= 128, this.keccak();
  }
  writeInto(e) {
    N2(this, false), L(e), this.finish();
    const n = this.state, { blockLen: s } = this;
    for (let r = 0, i = e.length; r < i; ) {
      this.posOut >= s && this.keccak();
      const o = Math.min(s - this.posOut, i - r);
      e.set(n.subarray(this.posOut, this.posOut + o), r), this.posOut += o, r += o;
    }
    return e;
  }
  xofInto(e) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(e);
  }
  xof(e) {
    return F(e), this.xofInto(new Uint8Array(e));
  }
  digestInto(e) {
    if (Re(e, this), this.finished)
      throw new Error("digest() was already called");
    return this.writeInto(e), this.destroy(), e;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, this.state.fill(0);
  }
  _cloneInto(e) {
    const { blockLen: n, suffix: s, outputLen: r, rounds: i, enableXOF: o } = this;
    return e || (e = new _O(n, s, r, o, i)), e.state32.set(this.state32), e.pos = this.pos, e.posOut = this.posOut, e.finished = this.finished, e.rounds = i, e.suffix = s, e.outputLen = r, e.enableXOF = o, e.destroyed = this.destroyed, e;
  }
};
var Ye = (t, e, n) => Ke(() => new O(e, t, n));
var et = Ye(1, 136, 256 / 8);
function H(t, { strict: e = true } = {}) {
  return !t || typeof t != "string" ? false : e ? /^0x[0-9a-fA-F]*$/.test(t) : t.startsWith("0x");
}
var ce = "2.29.0";
var $ = {
  getDocsUrl: ({ docsBaseUrl: t, docsPath: e = "", docsSlug: n }) => e ? `${t ?? "https://viem.sh"}${e}${n ? `#${n}` : ""}` : void 0,
  version: `viem@${ce}`
};
var h = class _h extends Error {
  constructor(e, n = {}) {
    var a;
    const s = (() => {
      var c;
      return n.cause instanceof _h ? n.cause.details : (c = n.cause) != null && c.message ? n.cause.message : n.details;
    })(), r = n.cause instanceof _h && n.cause.docsPath || n.docsPath, i = (a = $.getDocsUrl) == null ? void 0 : a.call($, { ...n, docsPath: r }), o = [
      e || "An error occurred.",
      "",
      ...n.metaMessages ? [...n.metaMessages, ""] : [],
      ...i ? [`Docs: ${i}`] : [],
      ...s ? [`Details: ${s}`] : [],
      ...$.version ? [`Version: ${$.version}`] : []
    ].join(`
`);
    super(o, n.cause ? { cause: n.cause } : void 0), Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }), Object.defineProperty(this, "docsPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }), Object.defineProperty(this, "metaMessages", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }), Object.defineProperty(this, "shortMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }), Object.defineProperty(this, "version", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }), Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "BaseError"
    }), this.details = s, this.docsPath = r, this.metaMessages = n.metaMessages, this.name = n.name ?? this.name, this.shortMessage = e, this.version = ce;
  }
  walk(e) {
    return ue(this, e);
  }
};
function ue(t, e) {
  return e != null && e(t) ? t : t && typeof t == "object" && "cause" in t && t.cause !== void 0 ? ue(t.cause, e) : e ? null : t;
}
var de = class extends h {
  constructor({ size: e, targetSize: n, type: s }) {
    super(`${s.charAt(0).toUpperCase()}${s.slice(1).toLowerCase()} size (${e}) exceeds padding size (${n}).`, { name: "SizeExceedsPaddingSizeError" });
  }
};
function M(t, { dir: e, size: n = 32 } = {}) {
  return typeof t == "string" ? tt(t, { dir: e, size: n }) : nt(t, { dir: e, size: n });
}
function tt(t, { dir: e, size: n = 32 } = {}) {
  if (n === null)
    return t;
  const s = t.replace("0x", "");
  if (s.length > n * 2)
    throw new de({
      size: Math.ceil(s.length / 2),
      targetSize: n,
      type: "hex"
    });
  return `0x${s[e === "right" ? "padEnd" : "padStart"](n * 2, "0")}`;
}
function nt(t, { dir: e, size: n = 32 } = {}) {
  if (n === null)
    return t;
  if (t.length > n)
    throw new de({
      size: t.length,
      targetSize: n,
      type: "bytes"
    });
  const s = new Uint8Array(n);
  for (let r = 0; r < n; r++) {
    const i = e === "right";
    s[i ? r : n - r - 1] = t[i ? r : t.length - r - 1];
  }
  return s;
}
var st = class extends h {
  constructor({ max: e, min: n, signed: s, size: r, value: i }) {
    super(`Number "${i}" is not in safe ${r ? `${r * 8}-bit ${s ? "signed" : "unsigned"} ` : ""}integer range ${e ? `(${n} to ${e})` : `(above ${n})`}`, { name: "IntegerOutOfRangeError" });
  }
};
var rt = class extends h {
  constructor({ givenSize: e, maxSize: n }) {
    super(`Size cannot exceed ${n} bytes. Given size: ${e} bytes.`, { name: "SizeOverflowError" });
  }
};
function W(t) {
  return H(t, { strict: false }) ? Math.ceil((t.length - 2) / 2) : t.length;
}
function z(t, { size: e }) {
  if (W(t) > e)
    throw new rt({
      givenSize: W(t),
      maxSize: e
    });
}
function it(t, e = {}) {
  const { signed: n, size: s } = e, r = BigInt(t);
  let i;
  s ? n ? i = (1n << BigInt(s) * 8n - 1n) - 1n : i = 2n ** (BigInt(s) * 8n) - 1n : typeof t == "number" && (i = BigInt(Number.MAX_SAFE_INTEGER));
  const o = typeof i == "bigint" && n ? -i - 1n : 0;
  if (i && r > i || r < o) {
    const c = typeof t == "bigint" ? "n" : "";
    throw new st({
      max: i ? `${i}${c}` : void 0,
      min: `${o}${c}`,
      signed: n,
      size: s,
      value: `${t}${c}`
    });
  }
  const a = `0x${(n && r < 0 ? (1n << BigInt(s * 8)) + BigInt(r) : r).toString(16)}`;
  return s ? M(a, { size: s }) : a;
}
var ot = new TextEncoder();
function at(t, e = {}) {
  return typeof t == "number" || typeof t == "bigint" ? ut(t, e) : typeof t == "boolean" ? ct(t, e) : H(t) ? fe(t, e) : le(t, e);
}
function ct(t, e = {}) {
  const n = new Uint8Array(1);
  return n[0] = Number(t), typeof e.size == "number" ? (z(n, { size: e.size }), M(n, { size: e.size })) : n;
}
var l16 = {
  zero: 48,
  nine: 57,
  A: 65,
  F: 70,
  a: 97,
  f: 102
};
function Z(t) {
  if (t >= l16.zero && t <= l16.nine)
    return t - l16.zero;
  if (t >= l16.A && t <= l16.F)
    return t - (l16.A - 10);
  if (t >= l16.a && t <= l16.f)
    return t - (l16.a - 10);
}
function fe(t, e = {}) {
  let n = t;
  e.size && (z(n, { size: e.size }), n = M(n, { dir: "right", size: e.size }));
  let s = n.slice(2);
  s.length % 2 && (s = `0${s}`);
  const r = s.length / 2, i = new Uint8Array(r);
  for (let o = 0, a = 0; o < r; o++) {
    const c = Z(s.charCodeAt(a++)), u = Z(s.charCodeAt(a++));
    if (c === void 0 || u === void 0)
      throw new h(`Invalid byte sequence ("${s[a - 2]}${s[a - 1]}" in "${s}").`);
    i[o] = c * 16 + u;
  }
  return i;
}
function ut(t, e) {
  const n = it(t, e);
  return fe(n);
}
function le(t, e = {}) {
  const n = ot.encode(t);
  return typeof e.size == "number" ? (z(n, { size: e.size }), M(n, { dir: "right", size: e.size })) : n;
}
function dt(t, e) {
  return et(H(t, { strict: false }) ? at(t) : t);
}
var ft = class extends h {
  constructor({ address: e }) {
    super(`Address "${e}" is invalid.`, {
      metaMessages: [
        "- Address must be a hex value of 20 bytes (40 hex characters).",
        "- Address must match its checksum counterpart."
      ],
      name: "InvalidAddressError"
    });
  }
};
var he = class extends Map {
  constructor(e) {
    super(), Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }), this.maxSize = e;
  }
  get(e) {
    const n = super.get(e);
    return super.has(e) && n !== void 0 && (this.delete(e), super.set(e, n)), n;
  }
  set(e, n) {
    if (super.set(e, n), this.maxSize && this.size > this.maxSize) {
      const s = this.keys().next().value;
      s && this.delete(s);
    }
    return this;
  }
};
var k = new he(8192);
function ge(t, e) {
  if (k.has(`${t}.${e}`))
    return k.get(`${t}.${e}`);
  const n = t.substring(2).toLowerCase(), s = dt(le(n)), r = n.split("");
  for (let o = 0; o < 40; o += 2)
    s[o >> 1] >> 4 >= 8 && r[o] && (r[o] = r[o].toUpperCase()), (s[o >> 1] & 15) >= 8 && r[o + 1] && (r[o + 1] = r[o + 1].toUpperCase());
  const i = `0x${r.join("")}`;
  return k.set(`${t}.${e}`, i), i;
}
function lt(t, e) {
  if (!gt(t, { strict: false }))
    throw new ft({ address: t });
  return ge(t, e);
}
var ht = /^0x[a-fA-F0-9]{40}$/;
var U = new he(8192);
function gt(t, e) {
  const { strict: n = true } = e ?? {}, s = `${t}.${n}`;
  if (U.has(s))
    return U.get(s);
  const r = ht.test(t) ? t.toLowerCase() === t ? true : n ? ge(t) === t : true : false;
  return U.set(s, r), r;
}
var w = class extends h {
  constructor(e) {
    const { docsPath: n, field: s, metaMessages: r } = e;
    super(`Invalid Sign-In with Ethereum message field "${s}".`, {
      docsPath: n,
      metaMessages: r,
      name: "SiweInvalidMessageFieldError"
    });
  }
};
function G(t) {
  if (/[^a-z0-9\:\/\?\#\[\]\@\!\$\&\'\(\)\*\+\,\;\=\.\-\_\~\%]/i.test(t) || /%[^0-9a-f]/i.test(t) || /%[0-9a-f](:?[^0-9a-f]|$)/i.test(t))
    return false;
  const e = mt(t), n = e[1], s = e[2], r = e[3], i = e[4], o = e[5];
  if (!(n != null && n.length && r.length >= 0))
    return false;
  if (s != null && s.length) {
    if (!(r.length === 0 || /^\//.test(r)))
      return false;
  } else if (/^\/\//.test(r))
    return false;
  if (!/^[a-z][a-z0-9\+\-\.]*$/.test(n.toLowerCase()))
    return false;
  let a = "";
  return a += `${n}:`, s != null && s.length && (a += `//${s}`), a += r, i != null && i.length && (a += `?${i}`), o != null && o.length && (a += `#${o}`), a;
}
function mt(t) {
  return t.match(/(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/);
}
function yt(t) {
  const { chainId: e, domain: n, expirationTime: s, issuedAt: r = /* @__PURE__ */ new Date(), nonce: i, notBefore: o, requestId: a, resources: c, scheme: u, uri: d, version: f } = t;
  {
    if (e !== Math.floor(e))
      throw new w({
        field: "chainId",
        metaMessages: [
          "- Chain ID must be a EIP-155 chain ID.",
          "- See https://eips.ethereum.org/EIPS/eip-155",
          "",
          `Provided value: ${e}`
        ]
      });
    if (!(wt.test(n) || pt.test(n) || xt.test(n)))
      throw new w({
        field: "domain",
        metaMessages: [
          "- Domain must be an RFC 3986 authority.",
          "- See https://www.rfc-editor.org/rfc/rfc3986",
          "",
          `Provided value: ${n}`
        ]
      });
    if (!bt.test(i))
      throw new w({
        field: "nonce",
        metaMessages: [
          "- Nonce must be at least 8 characters.",
          "- Nonce must be alphanumeric.",
          "",
          `Provided value: ${i}`
        ]
      });
    if (!G(d))
      throw new w({
        field: "uri",
        metaMessages: [
          "- URI must be a RFC 3986 URI referring to the resource that is the subject of the signing.",
          "- See https://www.rfc-editor.org/rfc/rfc3986",
          "",
          `Provided value: ${d}`
        ]
      });
    if (f !== "1")
      throw new w({
        field: "version",
        metaMessages: [
          "- Version must be '1'.",
          "",
          `Provided value: ${f}`
        ]
      });
    if (u && !St.test(u))
      throw new w({
        field: "scheme",
        metaMessages: [
          "- Scheme must be an RFC 3986 URI scheme.",
          "- See https://www.rfc-editor.org/rfc/rfc3986#section-3.1",
          "",
          `Provided value: ${u}`
        ]
      });
    const x = t.statement;
    if (x != null && x.includes(`
`))
      throw new w({
        field: "statement",
        metaMessages: [
          "- Statement must not include '\\n'.",
          "",
          `Provided value: ${x}`
        ]
      });
  }
  const p = lt(t.address), m = u ? `${u}://${n}` : n, y = t.statement ? `${t.statement}
` : "", xe = `${m} wants you to sign in with your Ethereum account:
${p}

${y}`;
  let S = `URI: ${d}
Version: ${f}
Chain ID: ${e}
Nonce: ${i}
Issued At: ${r.toISOString()}`;
  if (s && (S += `
Expiration Time: ${s.toISOString()}`), o && (S += `
Not Before: ${o.toISOString()}`), a && (S += `
Request ID: ${a}`), c) {
    let x = `
Resources:`;
    for (const T of c) {
      if (!G(T))
        throw new w({
          field: "resources",
          metaMessages: [
            "- Every resource must be a RFC 3986 URI.",
            "- See https://www.rfc-editor.org/rfc/rfc3986",
            "",
            `Provided value: ${T}`
          ]
        });
      x += `
- ${T}`;
    }
    S += x;
  }
  return `${xe}
${S}`;
}
var wt = /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}(:[0-9]{1,5})?$/;
var pt = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(:[0-9]{1,5})?$/;
var xt = /^localhost(:[0-9]{1,5})?$/;
var bt = /^[a-zA-Z0-9]{8,}$/;
var St = /^([a-zA-Z][a-zA-Z0-9+-.]*)$/;
var R = 256;
var I = R;
var v;
function At(t = 11) {
  if (!v || I + t > R * 2) {
    v = "", I = 0;
    for (let e = 0; e < R; e++)
      v += (256 + Math.random() * 256 | 0).toString(16).substring(1);
  }
  return v.substring(I, I++ + t);
}
function $t() {
  return At(96);
}
var g = class _g {
  async signPassOIDC(e) {
    if (!e.address)
      throw new Error("Address required");
    const n = $t(), s = /* @__PURE__ */ new Date(), r = getAddress(e.address), i = yt({
      version: "1",
      nonce: n,
      address: r,
      uri: e.idpURL,
      domain: e.domain,
      chainId: e.chainId,
      issuedAt: s
    }), o = await this.signMessage(i);
    if (o == null)
      throw new Error("Failed to sign auth message");
    return { hint: "eoa:" + new URLSearchParams({
      nonce: n,
      address: r,
      issuedAt: s.toISOString(),
      domain: e.domain,
      signature: o
    }).toString(), nonce: n };
  }
  static async verifySignature(e, n) {
    return { ethAddress: await recoverMessageAddress({
      message: e,
      signature: n
    }) };
  }
  verifySignature(e, n) {
    return _g.verifySignature(e, n);
  }
  async signExtrinsic(e, n, s) {
    const r = await this.createExtrinsicPayload(e, s, n), i = await this.signPayload(r);
    return n.addSignature(
      s,
      i,
      r.trnPayload.toPayload()
    );
  }
  async signPayload(e, n) {
    const r = {
      raw: e.ethPayload.toString()
    }, i = {
      transaction: n == null ? void 0 : n.toHex()
    }, o = await this.signMessage(
      r,
      i
    );
    if (!Pt(o))
      throw new Error('Expected signature to start with "0x"');
    return o;
  }
  async signExtrinsicWithPayload(e, n, s, r) {
    const i = await this.signPayload(s, n);
    return n.addSignature(
      r,
      i,
      s.trnPayload.toPayload()
    );
  }
  async createExtrinsicPayload(e, n, s, r) {
    const { header: i, mortalLength: o, nonce: a } = await e.derive.tx.signingInfo(
      n
    ), c = {
      address: n,
      blockHash: i == null ? void 0 : i.hash,
      blockNumber: i == null ? void 0 : i.number,
      era: e.registry.createTypeUnsafe("ExtrinsicEra", [
        {
          current: i == null ? void 0 : i.number,
          period: o
        }
      ]),
      genesisHash: e.genesisHash,
      method: s.method,
      nonce: a,
      runtimeVersion: e.runtimeVersion,
      signedExtensions: e.registry.signedExtensions,
      version: e.extrinsicVersion,
      ...r
    }, u = e.registry.createTypeUnsafe("SignerPayload", [
      c
    ]), { data: d } = u.toRaw(), f = d.length > 257 * 2 ? blake2AsHex(d) : d, p = blake2AsHex(f);
    return { trnPayload: u, ethPayload: p };
  }
};
var Et = /^0x[a-fA-F0-9]/;
function Pt(t) {
  return Et.test(t.toString());
}
var Tt = class extends g {
  constructor(e) {
    super(), this._walletClient = e;
  }
  async getAddress() {
    var e;
    return (e = this._walletClient.account) == null ? void 0 : e.address;
  }
  async signMessage(e) {
    if (console.log(this._walletClient), !this._walletClient.signMessage)
      throw new Error("No signMessage on wallet client");
    return this._walletClient.signMessage({ message: e });
  }
};
function jt(t) {
  const { signer: e } = t;
  return e instanceof g ? e : new Tt(t);
}

// node_modules/@futureverse/wagmi-connectors/index.js
var import_xumm = __toESM(require_dist7());

// node_modules/@futureverse/transact/index.mjs
var import_api_types = __toESM(require_dist8(), 1);
init_util_crypto();
init_util();

// node_modules/@futureverse/wagmi-connectors/index.js
init_api();
var import_api3 = __toESM(require_dist9());

// node_modules/@wagmi/connectors/dist/esm/coinbaseWallet.js
coinbaseWallet.type = "coinbaseWallet";
function coinbaseWallet(parameters = {}) {
  if (parameters.version === "3" || parameters.headlessMode)
    return version3(parameters);
  return version4(parameters);
}
function version4(parameters) {
  let walletProvider;
  let accountsChanged;
  let chainChanged;
  let disconnect2;
  return createConnector((config5) => ({
    id: "coinbaseWalletSDK",
    name: "Coinbase Wallet",
    rdns: "com.coinbase.wallet",
    type: coinbaseWallet.type,
    async connect({ chainId, ...rest } = {}) {
      try {
        const provider = await this.getProvider();
        const accounts2 = (await provider.request({
          method: "eth_requestAccounts",
          params: "instantOnboarding" in rest && rest.instantOnboarding ? [{ onboarding: "instant" }] : []
        })).map((x) => getAddress(x));
        if (!accountsChanged) {
          accountsChanged = this.onAccountsChanged.bind(this);
          provider.on("accountsChanged", accountsChanged);
        }
        if (!chainChanged) {
          chainChanged = this.onChainChanged.bind(this);
          provider.on("chainChanged", chainChanged);
        }
        if (!disconnect2) {
          disconnect2 = this.onDisconnect.bind(this);
          provider.on("disconnect", disconnect2);
        }
        let currentChainId = await this.getChainId();
        if (chainId && currentChainId !== chainId) {
          const chain = await this.switchChain({ chainId }).catch((error) => {
            if (error.code === UserRejectedRequestError.code)
              throw error;
            return { id: currentChainId };
          });
          currentChainId = chain?.id ?? currentChainId;
        }
        return { accounts: accounts2, chainId: currentChainId };
      } catch (error) {
        if (/(user closed modal|accounts received is empty|user denied account|request rejected)/i.test(error.message))
          throw new UserRejectedRequestError(error);
        throw error;
      }
    },
    async disconnect() {
      const provider = await this.getProvider();
      if (accountsChanged) {
        provider.removeListener("accountsChanged", accountsChanged);
        accountsChanged = void 0;
      }
      if (chainChanged) {
        provider.removeListener("chainChanged", chainChanged);
        chainChanged = void 0;
      }
      if (disconnect2) {
        provider.removeListener("disconnect", disconnect2);
        disconnect2 = void 0;
      }
      provider.disconnect();
      provider.close?.();
    },
    async getAccounts() {
      const provider = await this.getProvider();
      return (await provider.request({
        method: "eth_accounts"
      })).map((x) => getAddress(x));
    },
    async getChainId() {
      const provider = await this.getProvider();
      const chainId = await provider.request({
        method: "eth_chainId"
      });
      return Number(chainId);
    },
    async getProvider() {
      if (!walletProvider) {
        const preference = (() => {
          if (typeof parameters.preference === "string")
            return { options: parameters.preference };
          return {
            ...parameters.preference,
            options: parameters.preference?.options ?? "all"
          };
        })();
        const { createCoinbaseWalletSDK } = await import("./dist-6LNQDUMX.js");
        const sdk = createCoinbaseWalletSDK({
          ...parameters,
          appChainIds: config5.chains.map((x) => x.id),
          preference
        });
        walletProvider = sdk.getProvider();
      }
      return walletProvider;
    },
    async isAuthorized() {
      try {
        const accounts2 = await this.getAccounts();
        return !!accounts2.length;
      } catch {
        return false;
      }
    },
    async switchChain({ addEthereumChainParameter, chainId }) {
      const chain = config5.chains.find((chain2) => chain2.id === chainId);
      if (!chain)
        throw new SwitchChainError(new ChainNotConfiguredError());
      const provider = await this.getProvider();
      try {
        await provider.request({
          method: "wallet_switchEthereumChain",
          params: [{ chainId: numberToHex(chain.id) }]
        });
        return chain;
      } catch (error) {
        if (error.code === 4902) {
          try {
            let blockExplorerUrls;
            if (addEthereumChainParameter?.blockExplorerUrls)
              blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls;
            else
              blockExplorerUrls = chain.blockExplorers?.default.url ? [chain.blockExplorers?.default.url] : [];
            let rpcUrls;
            if (addEthereumChainParameter?.rpcUrls?.length)
              rpcUrls = addEthereumChainParameter.rpcUrls;
            else
              rpcUrls = [chain.rpcUrls.default?.http[0] ?? ""];
            const addEthereumChain = {
              blockExplorerUrls,
              chainId: numberToHex(chainId),
              chainName: addEthereumChainParameter?.chainName ?? chain.name,
              iconUrls: addEthereumChainParameter?.iconUrls,
              nativeCurrency: addEthereumChainParameter?.nativeCurrency ?? chain.nativeCurrency,
              rpcUrls
            };
            await provider.request({
              method: "wallet_addEthereumChain",
              params: [addEthereumChain]
            });
            return chain;
          } catch (error2) {
            throw new UserRejectedRequestError(error2);
          }
        }
        throw new SwitchChainError(error);
      }
    },
    onAccountsChanged(accounts2) {
      if (accounts2.length === 0)
        this.onDisconnect();
      else
        config5.emitter.emit("change", {
          accounts: accounts2.map((x) => getAddress(x))
        });
    },
    onChainChanged(chain) {
      const chainId = Number(chain);
      config5.emitter.emit("change", { chainId });
    },
    async onDisconnect(_error) {
      config5.emitter.emit("disconnect");
      const provider = await this.getProvider();
      if (accountsChanged) {
        provider.removeListener("accountsChanged", accountsChanged);
        accountsChanged = void 0;
      }
      if (chainChanged) {
        provider.removeListener("chainChanged", chainChanged);
        chainChanged = void 0;
      }
      if (disconnect2) {
        provider.removeListener("disconnect", disconnect2);
        disconnect2 = void 0;
      }
    }
  }));
}
function version3(parameters) {
  const reloadOnDisconnect = false;
  let sdk;
  let walletProvider;
  let accountsChanged;
  let chainChanged;
  let disconnect2;
  return createConnector((config5) => ({
    id: "coinbaseWalletSDK",
    name: "Coinbase Wallet",
    rdns: "com.coinbase.wallet",
    type: coinbaseWallet.type,
    async connect({ chainId } = {}) {
      try {
        const provider = await this.getProvider();
        const accounts2 = (await provider.request({
          method: "eth_requestAccounts"
        })).map((x) => getAddress(x));
        if (!accountsChanged) {
          accountsChanged = this.onAccountsChanged.bind(this);
          provider.on("accountsChanged", accountsChanged);
        }
        if (!chainChanged) {
          chainChanged = this.onChainChanged.bind(this);
          provider.on("chainChanged", chainChanged);
        }
        if (!disconnect2) {
          disconnect2 = this.onDisconnect.bind(this);
          provider.on("disconnect", disconnect2);
        }
        let currentChainId = await this.getChainId();
        if (chainId && currentChainId !== chainId) {
          const chain = await this.switchChain({ chainId }).catch((error) => {
            if (error.code === UserRejectedRequestError.code)
              throw error;
            return { id: currentChainId };
          });
          currentChainId = chain?.id ?? currentChainId;
        }
        return { accounts: accounts2, chainId: currentChainId };
      } catch (error) {
        if (/(user closed modal|accounts received is empty|user denied account)/i.test(error.message))
          throw new UserRejectedRequestError(error);
        throw error;
      }
    },
    async disconnect() {
      const provider = await this.getProvider();
      if (accountsChanged) {
        provider.removeListener("accountsChanged", accountsChanged);
        accountsChanged = void 0;
      }
      if (chainChanged) {
        provider.removeListener("chainChanged", chainChanged);
        chainChanged = void 0;
      }
      if (disconnect2) {
        provider.removeListener("disconnect", disconnect2);
        disconnect2 = void 0;
      }
      provider.disconnect();
      provider.close();
    },
    async getAccounts() {
      const provider = await this.getProvider();
      return (await provider.request({
        method: "eth_accounts"
      })).map((x) => getAddress(x));
    },
    async getChainId() {
      const provider = await this.getProvider();
      const chainId = await provider.request({
        method: "eth_chainId"
      });
      return Number(chainId);
    },
    async getProvider() {
      if (!walletProvider) {
        const CoinbaseWalletSDK = await (async () => {
          const { default: SDK } = await import("./dist-N54JCSJJ.js");
          if (typeof SDK !== "function" && typeof SDK.default === "function")
            return SDK.default;
          return SDK;
        })();
        sdk = new CoinbaseWalletSDK({ ...parameters, reloadOnDisconnect });
        const walletExtensionChainId = sdk.walletExtension?.getChainId();
        const chain = config5.chains.find((chain2) => parameters.chainId ? chain2.id === parameters.chainId : chain2.id === walletExtensionChainId) || config5.chains[0];
        const chainId = parameters.chainId || chain?.id;
        const jsonRpcUrl = parameters.jsonRpcUrl || chain?.rpcUrls.default.http[0];
        walletProvider = sdk.makeWeb3Provider(jsonRpcUrl, chainId);
      }
      return walletProvider;
    },
    async isAuthorized() {
      try {
        const accounts2 = await this.getAccounts();
        return !!accounts2.length;
      } catch {
        return false;
      }
    },
    async switchChain({ addEthereumChainParameter, chainId }) {
      const chain = config5.chains.find((chain2) => chain2.id === chainId);
      if (!chain)
        throw new SwitchChainError(new ChainNotConfiguredError());
      const provider = await this.getProvider();
      try {
        await provider.request({
          method: "wallet_switchEthereumChain",
          params: [{ chainId: numberToHex(chain.id) }]
        });
        return chain;
      } catch (error) {
        if (error.code === 4902) {
          try {
            let blockExplorerUrls;
            if (addEthereumChainParameter?.blockExplorerUrls)
              blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls;
            else
              blockExplorerUrls = chain.blockExplorers?.default.url ? [chain.blockExplorers?.default.url] : [];
            let rpcUrls;
            if (addEthereumChainParameter?.rpcUrls?.length)
              rpcUrls = addEthereumChainParameter.rpcUrls;
            else
              rpcUrls = [chain.rpcUrls.default?.http[0] ?? ""];
            const addEthereumChain = {
              blockExplorerUrls,
              chainId: numberToHex(chainId),
              chainName: addEthereumChainParameter?.chainName ?? chain.name,
              iconUrls: addEthereumChainParameter?.iconUrls,
              nativeCurrency: addEthereumChainParameter?.nativeCurrency ?? chain.nativeCurrency,
              rpcUrls
            };
            await provider.request({
              method: "wallet_addEthereumChain",
              params: [addEthereumChain]
            });
            return chain;
          } catch (error2) {
            throw new UserRejectedRequestError(error2);
          }
        }
        throw new SwitchChainError(error);
      }
    },
    onAccountsChanged(accounts2) {
      if (accounts2.length === 0)
        this.onDisconnect();
      else
        config5.emitter.emit("change", {
          accounts: accounts2.map((x) => getAddress(x))
        });
    },
    onChainChanged(chain) {
      const chainId = Number(chain);
      config5.emitter.emit("change", { chainId });
    },
    async onDisconnect(_error) {
      config5.emitter.emit("disconnect");
      const provider = await this.getProvider();
      if (accountsChanged) {
        provider.removeListener("accountsChanged", accountsChanged);
        accountsChanged = void 0;
      }
      if (chainChanged) {
        provider.removeListener("chainChanged", chainChanged);
        chainChanged = void 0;
      }
      if (disconnect2) {
        provider.removeListener("disconnect", disconnect2);
        disconnect2 = void 0;
      }
    }
  }));
}

// node_modules/@wagmi/connectors/dist/esm/metaMask.js
metaMask.type = "metaMask";
function metaMask(parameters = {}) {
  let sdk;
  let provider;
  let providerPromise;
  let accountsChanged;
  let chainChanged;
  let connect3;
  let displayUri;
  let disconnect2;
  return createConnector((config5) => ({
    id: "metaMaskSDK",
    name: "MetaMask",
    rdns: ["io.metamask", "io.metamask.mobile"],
    type: metaMask.type,
    async setup() {
      const provider2 = await this.getProvider();
      if (provider2?.on) {
        if (!connect3) {
          connect3 = this.onConnect.bind(this);
          provider2.on("connect", connect3);
        }
        if (!accountsChanged) {
          accountsChanged = this.onAccountsChanged.bind(this);
          provider2.on("accountsChanged", accountsChanged);
        }
      }
    },
    async connect({ chainId, isReconnecting } = {}) {
      const provider2 = await this.getProvider();
      if (!displayUri) {
        displayUri = this.onDisplayUri;
        provider2.on("display_uri", displayUri);
      }
      let accounts2 = [];
      if (isReconnecting)
        accounts2 = await this.getAccounts().catch(() => []);
      try {
        let signResponse;
        let connectWithResponse;
        if (!accounts2?.length) {
          if (parameters.connectAndSign || parameters.connectWith) {
            if (parameters.connectAndSign)
              signResponse = await sdk.connectAndSign({
                msg: parameters.connectAndSign
              });
            else if (parameters.connectWith)
              connectWithResponse = await sdk.connectWith({
                method: parameters.connectWith.method,
                params: parameters.connectWith.params
              });
            accounts2 = await this.getAccounts();
          } else {
            const requestedAccounts = await sdk.connect();
            accounts2 = requestedAccounts.map((x) => getAddress(x));
          }
        }
        let currentChainId = await this.getChainId();
        if (chainId && currentChainId !== chainId) {
          const chain = await this.switchChain({ chainId }).catch((error) => {
            if (error.code === UserRejectedRequestError.code)
              throw error;
            return { id: currentChainId };
          });
          currentChainId = chain?.id ?? currentChainId;
        }
        if (displayUri) {
          provider2.removeListener("display_uri", displayUri);
          displayUri = void 0;
        }
        if (signResponse)
          provider2.emit("connectAndSign", {
            accounts: accounts2,
            chainId: currentChainId,
            signResponse
          });
        else if (connectWithResponse)
          provider2.emit("connectWith", {
            accounts: accounts2,
            chainId: currentChainId,
            connectWithResponse
          });
        if (connect3) {
          provider2.removeListener("connect", connect3);
          connect3 = void 0;
        }
        if (!accountsChanged) {
          accountsChanged = this.onAccountsChanged.bind(this);
          provider2.on("accountsChanged", accountsChanged);
        }
        if (!chainChanged) {
          chainChanged = this.onChainChanged.bind(this);
          provider2.on("chainChanged", chainChanged);
        }
        if (!disconnect2) {
          disconnect2 = this.onDisconnect.bind(this);
          provider2.on("disconnect", disconnect2);
        }
        return { accounts: accounts2, chainId: currentChainId };
      } catch (err) {
        const error = err;
        if (error.code === UserRejectedRequestError.code)
          throw new UserRejectedRequestError(error);
        if (error.code === ResourceUnavailableRpcError.code)
          throw new ResourceUnavailableRpcError(error);
        throw error;
      }
    },
    async disconnect() {
      const provider2 = await this.getProvider();
      if (chainChanged) {
        provider2.removeListener("chainChanged", chainChanged);
        chainChanged = void 0;
      }
      if (disconnect2) {
        provider2.removeListener("disconnect", disconnect2);
        disconnect2 = void 0;
      }
      if (!connect3) {
        connect3 = this.onConnect.bind(this);
        provider2.on("connect", connect3);
      }
      await sdk.terminate();
    },
    async getAccounts() {
      const provider2 = await this.getProvider();
      const accounts2 = await provider2.request({
        method: "eth_accounts"
      });
      return accounts2.map((x) => getAddress(x));
    },
    async getChainId() {
      const provider2 = await this.getProvider();
      const chainId = provider2.getChainId() || await provider2?.request({ method: "eth_chainId" });
      return Number(chainId);
    },
    async getProvider() {
      async function initProvider() {
        const MetaMaskSDK = await (async () => {
          const { default: SDK } = await import("./metamask-sdk-4QJC7EVX.js");
          if (typeof SDK !== "function" && typeof SDK.default === "function")
            return SDK.default;
          return SDK;
        })();
        const readonlyRPCMap = {};
        for (const chain of config5.chains)
          readonlyRPCMap[numberToHex(chain.id)] = extractRpcUrls({
            chain,
            transports: config5.transports
          })?.[0];
        sdk = new MetaMaskSDK({
          _source: "wagmi",
          forceDeleteProvider: false,
          forceInjectProvider: false,
          injectProvider: false,
          // Workaround cast since MetaMask SDK does not support `'exactOptionalPropertyTypes'`
          ...parameters,
          readonlyRPCMap,
          dappMetadata: {
            ...parameters.dappMetadata,
            // Test if name and url are set AND not empty
            name: parameters.dappMetadata?.name ? parameters.dappMetadata?.name : "wagmi",
            url: parameters.dappMetadata?.url ? parameters.dappMetadata?.url : typeof window !== "undefined" ? window.location.origin : "https://wagmi.sh"
          },
          useDeeplink: parameters.useDeeplink ?? true
        });
        const result = await sdk.init();
        const provider2 = (() => {
          if (result?.activeProvider)
            return result.activeProvider;
          return sdk.getProvider();
        })();
        if (!provider2)
          throw new ProviderNotFoundError();
        return provider2;
      }
      if (!provider) {
        if (!providerPromise)
          providerPromise = initProvider();
        provider = await providerPromise;
      }
      return provider;
    },
    async isAuthorized() {
      try {
        const timeout2 = 200;
        const accounts2 = await withRetry(() => withTimeout(() => this.getAccounts(), { timeout: timeout2 }), {
          delay: timeout2 + 1,
          retryCount: 3
        });
        return !!accounts2.length;
      } catch {
        return false;
      }
    },
    async switchChain({ addEthereumChainParameter, chainId }) {
      const provider2 = await this.getProvider();
      const chain = config5.chains.find((x) => x.id === chainId);
      if (!chain)
        throw new SwitchChainError(new ChainNotConfiguredError());
      try {
        await provider2.request({
          method: "wallet_switchEthereumChain",
          params: [{ chainId: numberToHex(chainId) }]
        });
        await waitForChainIdToSync();
        await sendAndWaitForChangeEvent(chainId);
        return chain;
      } catch (err) {
        const error = err;
        if (error.code === UserRejectedRequestError.code)
          throw new UserRejectedRequestError(error);
        if (error.code === 4902 || // Unwrapping for MetaMask Mobile
        // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719
        error?.data?.originalError?.code === 4902) {
          try {
            await provider2.request({
              method: "wallet_addEthereumChain",
              params: [
                {
                  blockExplorerUrls: (() => {
                    const { default: blockExplorer, ...blockExplorers } = chain.blockExplorers ?? {};
                    if (addEthereumChainParameter?.blockExplorerUrls)
                      return addEthereumChainParameter.blockExplorerUrls;
                    if (blockExplorer)
                      return [
                        blockExplorer.url,
                        ...Object.values(blockExplorers).map((x) => x.url)
                      ];
                    return;
                  })(),
                  chainId: numberToHex(chainId),
                  chainName: addEthereumChainParameter?.chainName ?? chain.name,
                  iconUrls: addEthereumChainParameter?.iconUrls,
                  nativeCurrency: addEthereumChainParameter?.nativeCurrency ?? chain.nativeCurrency,
                  rpcUrls: (() => {
                    if (addEthereumChainParameter?.rpcUrls?.length)
                      return addEthereumChainParameter.rpcUrls;
                    return [chain.rpcUrls.default?.http[0] ?? ""];
                  })()
                }
              ]
            });
            await waitForChainIdToSync();
            await sendAndWaitForChangeEvent(chainId);
            return chain;
          } catch (err2) {
            const error2 = err2;
            if (error2.code === UserRejectedRequestError.code)
              throw new UserRejectedRequestError(error2);
            throw new SwitchChainError(error2);
          }
        }
        throw new SwitchChainError(error);
      }
      async function waitForChainIdToSync() {
        await withRetry(async () => {
          const value = hexToNumber(
            // `'eth_chainId'` is cached by the MetaMask SDK side to avoid unnecessary deeplinks
            await provider2.request({ method: "eth_chainId" })
          );
          if (value !== chainId)
            throw new Error("User rejected switch after adding network.");
          return value;
        }, {
          delay: 50,
          retryCount: 20
          // android device encryption is slower
        });
      }
      async function sendAndWaitForChangeEvent(chainId2) {
        await new Promise((resolve) => {
          const listener = (data) => {
            if ("chainId" in data && data.chainId === chainId2) {
              config5.emitter.off("change", listener);
              resolve();
            }
          };
          config5.emitter.on("change", listener);
          config5.emitter.emit("change", { chainId: chainId2 });
        });
      }
    },
    async onAccountsChanged(accounts2) {
      if (accounts2.length === 0) {
        if (sdk.isExtensionActive())
          this.onDisconnect();
        else
          return;
      } else if (config5.emitter.listenerCount("connect")) {
        const chainId = (await this.getChainId()).toString();
        this.onConnect({ chainId });
      } else
        config5.emitter.emit("change", {
          accounts: accounts2.map((x) => getAddress(x))
        });
    },
    onChainChanged(chain) {
      const chainId = Number(chain);
      config5.emitter.emit("change", { chainId });
    },
    async onConnect(connectInfo) {
      const accounts2 = await this.getAccounts();
      if (accounts2.length === 0)
        return;
      const chainId = Number(connectInfo.chainId);
      config5.emitter.emit("connect", { accounts: accounts2, chainId });
      const provider2 = await this.getProvider();
      if (connect3) {
        provider2.removeListener("connect", connect3);
        connect3 = void 0;
      }
      if (!accountsChanged) {
        accountsChanged = this.onAccountsChanged.bind(this);
        provider2.on("accountsChanged", accountsChanged);
      }
      if (!chainChanged) {
        chainChanged = this.onChainChanged.bind(this);
        provider2.on("chainChanged", chainChanged);
      }
      if (!disconnect2) {
        disconnect2 = this.onDisconnect.bind(this);
        provider2.on("disconnect", disconnect2);
      }
    },
    async onDisconnect(error) {
      const provider2 = await this.getProvider();
      if (error && error.code === 1013) {
        if (provider2 && !!(await this.getAccounts()).length)
          return;
      }
      config5.emitter.emit("disconnect");
      if (chainChanged) {
        provider2.removeListener("chainChanged", chainChanged);
        chainChanged = void 0;
      }
      if (disconnect2) {
        provider2.removeListener("disconnect", disconnect2);
        disconnect2 = void 0;
      }
      if (!connect3) {
        connect3 = this.onConnect.bind(this);
        provider2.on("connect", connect3);
      }
    },
    onDisplayUri(uri) {
      config5.emitter.emit("message", { type: "display_uri", data: uri });
    }
  }));
}

// node_modules/@wagmi/connectors/dist/esm/safe.js
safe.type = "safe";
function safe(parameters = {}) {
  const { shimDisconnect = false } = parameters;
  let provider_;
  let disconnect2;
  return createConnector((config5) => ({
    id: "safe",
    name: "Safe",
    type: safe.type,
    async connect() {
      const provider = await this.getProvider();
      if (!provider)
        throw new ProviderNotFoundError();
      const accounts2 = await this.getAccounts();
      const chainId = await this.getChainId();
      if (!disconnect2) {
        disconnect2 = this.onDisconnect.bind(this);
        provider.on("disconnect", disconnect2);
      }
      if (shimDisconnect)
        await config5.storage?.removeItem("safe.disconnected");
      return { accounts: accounts2, chainId };
    },
    async disconnect() {
      const provider = await this.getProvider();
      if (!provider)
        throw new ProviderNotFoundError();
      if (disconnect2) {
        provider.removeListener("disconnect", disconnect2);
        disconnect2 = void 0;
      }
      if (shimDisconnect)
        await config5.storage?.setItem("safe.disconnected", true);
    },
    async getAccounts() {
      const provider = await this.getProvider();
      if (!provider)
        throw new ProviderNotFoundError();
      return (await provider.request({ method: "eth_accounts" })).map(getAddress);
    },
    async getProvider() {
      const isIframe = typeof window !== "undefined" && window?.parent !== window;
      if (!isIframe)
        return;
      if (!provider_) {
        const { default: SDK } = await import("./esm-OT5RMHVW.js");
        const sdk = new SDK(parameters);
        const safe2 = await withTimeout(() => sdk.safe.getInfo(), {
          timeout: parameters.unstable_getInfoTimeout ?? 10
        });
        if (!safe2)
          throw new Error("Could not load Safe information");
        const SafeAppProvider = await (async () => {
          const Provider = await import("./dist-MZBPCCWG.js");
          if (typeof Provider.SafeAppProvider !== "function" && typeof Provider.default.SafeAppProvider === "function")
            return Provider.default.SafeAppProvider;
          return Provider.SafeAppProvider;
        })();
        provider_ = new SafeAppProvider(safe2, sdk);
      }
      return provider_;
    },
    async getChainId() {
      const provider = await this.getProvider();
      if (!provider)
        throw new ProviderNotFoundError();
      return Number(provider.chainId);
    },
    async isAuthorized() {
      try {
        const isDisconnected = shimDisconnect && // If shim exists in storage, connector is disconnected
        await config5.storage?.getItem("safe.disconnected");
        if (isDisconnected)
          return false;
        const accounts2 = await this.getAccounts();
        return !!accounts2.length;
      } catch {
        return false;
      }
    },
    onAccountsChanged() {
    },
    onChainChanged() {
    },
    onDisconnect() {
      config5.emitter.emit("disconnect");
    }
  }));
}

// node_modules/@wagmi/connectors/dist/esm/walletConnect.js
walletConnect.type = "walletConnect";
function walletConnect(parameters) {
  const isNewChainsStale = parameters.isNewChainsStale ?? true;
  let provider_;
  let providerPromise;
  const NAMESPACE = "eip155";
  let accountsChanged;
  let chainChanged;
  let connect3;
  let displayUri;
  let sessionDelete;
  let disconnect2;
  return createConnector((config5) => ({
    id: "walletConnect",
    name: "WalletConnect",
    type: walletConnect.type,
    async setup() {
      const provider = await this.getProvider().catch(() => null);
      if (!provider)
        return;
      if (!connect3) {
        connect3 = this.onConnect.bind(this);
        provider.on("connect", connect3);
      }
      if (!sessionDelete) {
        sessionDelete = this.onSessionDelete.bind(this);
        provider.on("session_delete", sessionDelete);
      }
    },
    async connect({ chainId, ...rest } = {}) {
      try {
        const provider = await this.getProvider();
        if (!provider)
          throw new ProviderNotFoundError();
        if (!displayUri) {
          displayUri = this.onDisplayUri;
          provider.on("display_uri", displayUri);
        }
        let targetChainId = chainId;
        if (!targetChainId) {
          const state = await config5.storage?.getItem("state") ?? {};
          const isChainSupported = config5.chains.some((x) => x.id === state.chainId);
          if (isChainSupported)
            targetChainId = state.chainId;
          else
            targetChainId = config5.chains[0]?.id;
        }
        if (!targetChainId)
          throw new Error("No chains found on connector.");
        const isChainsStale = await this.isChainsStale();
        if (provider.session && isChainsStale)
          await provider.disconnect();
        if (!provider.session || isChainsStale) {
          const optionalChains = config5.chains.filter((chain) => chain.id !== targetChainId).map((optionalChain) => optionalChain.id);
          await provider.connect({
            optionalChains: [targetChainId, ...optionalChains],
            ..."pairingTopic" in rest ? { pairingTopic: rest.pairingTopic } : {}
          });
          this.setRequestedChainsIds(config5.chains.map((x) => x.id));
        }
        const accounts2 = (await provider.enable()).map((x) => getAddress(x));
        const currentChainId = await this.getChainId();
        if (displayUri) {
          provider.removeListener("display_uri", displayUri);
          displayUri = void 0;
        }
        if (connect3) {
          provider.removeListener("connect", connect3);
          connect3 = void 0;
        }
        if (!accountsChanged) {
          accountsChanged = this.onAccountsChanged.bind(this);
          provider.on("accountsChanged", accountsChanged);
        }
        if (!chainChanged) {
          chainChanged = this.onChainChanged.bind(this);
          provider.on("chainChanged", chainChanged);
        }
        if (!disconnect2) {
          disconnect2 = this.onDisconnect.bind(this);
          provider.on("disconnect", disconnect2);
        }
        if (!sessionDelete) {
          sessionDelete = this.onSessionDelete.bind(this);
          provider.on("session_delete", sessionDelete);
        }
        return { accounts: accounts2, chainId: currentChainId };
      } catch (error) {
        if (/(user rejected|connection request reset)/i.test(error?.message)) {
          throw new UserRejectedRequestError(error);
        }
        throw error;
      }
    },
    async disconnect() {
      const provider = await this.getProvider();
      try {
        await provider?.disconnect();
      } catch (error) {
        if (!/No matching key/i.test(error.message))
          throw error;
      } finally {
        if (chainChanged) {
          provider?.removeListener("chainChanged", chainChanged);
          chainChanged = void 0;
        }
        if (disconnect2) {
          provider?.removeListener("disconnect", disconnect2);
          disconnect2 = void 0;
        }
        if (!connect3) {
          connect3 = this.onConnect.bind(this);
          provider?.on("connect", connect3);
        }
        if (accountsChanged) {
          provider?.removeListener("accountsChanged", accountsChanged);
          accountsChanged = void 0;
        }
        if (sessionDelete) {
          provider?.removeListener("session_delete", sessionDelete);
          sessionDelete = void 0;
        }
        this.setRequestedChainsIds([]);
      }
    },
    async getAccounts() {
      const provider = await this.getProvider();
      return provider.accounts.map((x) => getAddress(x));
    },
    async getProvider({ chainId } = {}) {
      async function initProvider() {
        const optionalChains = config5.chains.map((x) => x.id);
        if (!optionalChains.length)
          return;
        const { EthereumProvider } = await import("./index.es-KL4MJ37U.js");
        return await EthereumProvider.init({
          ...parameters,
          disableProviderPing: true,
          optionalChains,
          projectId: parameters.projectId,
          rpcMap: Object.fromEntries(config5.chains.map((chain) => {
            const [url] = extractRpcUrls({
              chain,
              transports: config5.transports
            });
            return [chain.id, url];
          })),
          showQrModal: parameters.showQrModal ?? true
        });
      }
      if (!provider_) {
        if (!providerPromise)
          providerPromise = initProvider();
        provider_ = await providerPromise;
        provider_?.events.setMaxListeners(Number.POSITIVE_INFINITY);
      }
      if (chainId)
        await this.switchChain?.({ chainId });
      return provider_;
    },
    async getChainId() {
      const provider = await this.getProvider();
      return provider.chainId;
    },
    async isAuthorized() {
      try {
        const [accounts2, provider] = await Promise.all([
          this.getAccounts(),
          this.getProvider()
        ]);
        if (!accounts2.length)
          return false;
        const isChainsStale = await this.isChainsStale();
        if (isChainsStale && provider.session) {
          await provider.disconnect().catch(() => {
          });
          return false;
        }
        return true;
      } catch {
        return false;
      }
    },
    async switchChain({ addEthereumChainParameter, chainId }) {
      const provider = await this.getProvider();
      if (!provider)
        throw new ProviderNotFoundError();
      const chain = config5.chains.find((x) => x.id === chainId);
      if (!chain)
        throw new SwitchChainError(new ChainNotConfiguredError());
      try {
        await Promise.all([
          new Promise((resolve) => {
            const listener = ({ chainId: currentChainId }) => {
              if (currentChainId === chainId) {
                config5.emitter.off("change", listener);
                resolve();
              }
            };
            config5.emitter.on("change", listener);
          }),
          provider.request({
            method: "wallet_switchEthereumChain",
            params: [{ chainId: numberToHex(chainId) }]
          })
        ]);
        const requestedChains = await this.getRequestedChainsIds();
        this.setRequestedChainsIds([...requestedChains, chainId]);
        return chain;
      } catch (err) {
        const error = err;
        if (/(user rejected)/i.test(error.message))
          throw new UserRejectedRequestError(error);
        try {
          let blockExplorerUrls;
          if (addEthereumChainParameter?.blockExplorerUrls)
            blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls;
          else
            blockExplorerUrls = chain.blockExplorers?.default.url ? [chain.blockExplorers?.default.url] : [];
          let rpcUrls;
          if (addEthereumChainParameter?.rpcUrls?.length)
            rpcUrls = addEthereumChainParameter.rpcUrls;
          else
            rpcUrls = [...chain.rpcUrls.default.http];
          const addEthereumChain = {
            blockExplorerUrls,
            chainId: numberToHex(chainId),
            chainName: addEthereumChainParameter?.chainName ?? chain.name,
            iconUrls: addEthereumChainParameter?.iconUrls,
            nativeCurrency: addEthereumChainParameter?.nativeCurrency ?? chain.nativeCurrency,
            rpcUrls
          };
          await provider.request({
            method: "wallet_addEthereumChain",
            params: [addEthereumChain]
          });
          const requestedChains = await this.getRequestedChainsIds();
          this.setRequestedChainsIds([...requestedChains, chainId]);
          return chain;
        } catch (error2) {
          throw new UserRejectedRequestError(error2);
        }
      }
    },
    onAccountsChanged(accounts2) {
      if (accounts2.length === 0)
        this.onDisconnect();
      else
        config5.emitter.emit("change", {
          accounts: accounts2.map((x) => getAddress(x))
        });
    },
    onChainChanged(chain) {
      const chainId = Number(chain);
      config5.emitter.emit("change", { chainId });
    },
    async onConnect(connectInfo) {
      const chainId = Number(connectInfo.chainId);
      const accounts2 = await this.getAccounts();
      config5.emitter.emit("connect", { accounts: accounts2, chainId });
    },
    async onDisconnect(_error) {
      this.setRequestedChainsIds([]);
      config5.emitter.emit("disconnect");
      const provider = await this.getProvider();
      if (accountsChanged) {
        provider.removeListener("accountsChanged", accountsChanged);
        accountsChanged = void 0;
      }
      if (chainChanged) {
        provider.removeListener("chainChanged", chainChanged);
        chainChanged = void 0;
      }
      if (disconnect2) {
        provider.removeListener("disconnect", disconnect2);
        disconnect2 = void 0;
      }
      if (sessionDelete) {
        provider.removeListener("session_delete", sessionDelete);
        sessionDelete = void 0;
      }
      if (!connect3) {
        connect3 = this.onConnect.bind(this);
        provider.on("connect", connect3);
      }
    },
    onDisplayUri(uri) {
      config5.emitter.emit("message", { type: "display_uri", data: uri });
    },
    onSessionDelete() {
      this.onDisconnect();
    },
    getNamespaceChainsIds() {
      if (!provider_)
        return [];
      const chainIds = provider_.session?.namespaces[NAMESPACE]?.accounts?.map((account3) => Number.parseInt(account3.split(":")[1] || ""));
      return chainIds ?? [];
    },
    async getRequestedChainsIds() {
      return await config5.storage?.getItem(this.requestedChainsStorageKey) ?? [];
    },
    /**
     * Checks if the target chains match the chains that were
     * initially requested by the connector for the WalletConnect session.
     * If there is a mismatch, this means that the chains on the connector
     * are considered stale, and need to be revalidated at a later point (via
     * connection).
     *
     * There may be a scenario where a dapp adds a chain to the
     * connector later on, however, this chain will not have been approved or rejected
     * by the wallet. In this case, the chain is considered stale.
     */
    async isChainsStale() {
      if (!isNewChainsStale)
        return false;
      const connectorChains = config5.chains.map((x) => x.id);
      const namespaceChains = this.getNamespaceChainsIds();
      if (namespaceChains.length && !namespaceChains.some((id) => connectorChains.includes(id)))
        return false;
      const requestedChains = await this.getRequestedChainsIds();
      return !connectorChains.every((id) => requestedChains.includes(id));
    },
    async setRequestedChainsIds(chains) {
      await config5.storage?.setItem(this.requestedChainsStorageKey, chains);
    },
    get requestedChainsStorageKey() {
      return `${this.id}.requestedChains`;
    }
  }));
}

// node_modules/@futureverse/wagmi-connectors/index.js
var b = { exports: {} };
var K2;
function UM() {
  if (K2) return b.exports;
  K2 = 1;
  var s = typeof Reflect == "object" ? Reflect : null, j3 = s && typeof s.apply == "function" ? s.apply : function(e, t, N3) {
    return Function.prototype.apply.call(e, t, N3);
  }, D;
  s && typeof s.ownKeys == "function" ? D = s.ownKeys : Object.getOwnPropertySymbols ? D = function(e) {
    return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
  } : D = function(e) {
    return Object.getOwnPropertyNames(e);
  };
  function I2(n) {
    console && console.warn && console.warn(n);
  }
  var y = Number.isNaN || function(e) {
    return e !== e;
  };
  function g2() {
    g2.init.call(this);
  }
  b.exports = g2, b.exports.once = w2, g2.EventEmitter = g2, g2.prototype._events = void 0, g2.prototype._eventsCount = 0, g2.prototype._maxListeners = void 0;
  var L2 = 10;
  function r(n) {
    if (typeof n != "function")
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof n);
  }
  Object.defineProperty(g2, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
      return L2;
    },
    set: function(n) {
      if (typeof n != "number" || n < 0 || y(n))
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + n + ".");
      L2 = n;
    }
  }), g2.init = function() {
    (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
  }, g2.prototype.setMaxListeners = function(e) {
    if (typeof e != "number" || e < 0 || y(e))
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
    return this._maxListeners = e, this;
  };
  function o(n) {
    return n._maxListeners === void 0 ? g2.defaultMaxListeners : n._maxListeners;
  }
  g2.prototype.getMaxListeners = function() {
    return o(this);
  }, g2.prototype.emit = function(e) {
    for (var t = [], N3 = 1; N3 < arguments.length; N3++) t.push(arguments[N3]);
    var u = e === "error", x = this._events;
    if (x !== void 0)
      u = u && x.error === void 0;
    else if (!u)
      return false;
    if (u) {
      var A2;
      if (t.length > 0 && (A2 = t[0]), A2 instanceof Error)
        throw A2;
      var c = new Error("Unhandled error." + (A2 ? " (" + A2.message + ")" : ""));
      throw c.context = A2, c;
    }
    var O2 = x[e];
    if (O2 === void 0)
      return false;
    if (typeof O2 == "function")
      j3(O2, this, t);
    else
      for (var l17 = O2.length, f = i(O2, l17), N3 = 0; N3 < l17; ++N3)
        j3(f[N3], this, t);
    return true;
  };
  function E2(n, e, t, N3) {
    var u, x, A2;
    if (r(t), x = n._events, x === void 0 ? (x = n._events = /* @__PURE__ */ Object.create(null), n._eventsCount = 0) : (x.newListener !== void 0 && (n.emit(
      "newListener",
      e,
      t.listener ? t.listener : t
    ), x = n._events), A2 = x[e]), A2 === void 0)
      A2 = x[e] = t, ++n._eventsCount;
    else if (typeof A2 == "function" ? A2 = x[e] = N3 ? [t, A2] : [A2, t] : N3 ? A2.unshift(t) : A2.push(t), u = o(n), u > 0 && A2.length > u && !A2.warned) {
      A2.warned = true;
      var c = new Error("Possible EventEmitter memory leak detected. " + A2.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
      c.name = "MaxListenersExceededWarning", c.emitter = n, c.type = e, c.count = A2.length, I2(c);
    }
    return n;
  }
  g2.prototype.addListener = function(e, t) {
    return E2(this, e, t, false);
  }, g2.prototype.on = g2.prototype.addListener, g2.prototype.prependListener = function(e, t) {
    return E2(this, e, t, true);
  };
  function a() {
    if (!this.fired)
      return this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
  }
  function C(n, e, t) {
    var N3 = { fired: false, wrapFn: void 0, target: n, type: e, listener: t }, u = a.bind(N3);
    return u.listener = t, N3.wrapFn = u, u;
  }
  g2.prototype.once = function(e, t) {
    return r(t), this.on(e, C(this, e, t)), this;
  }, g2.prototype.prependOnceListener = function(e, t) {
    return r(t), this.prependListener(e, C(this, e, t)), this;
  }, g2.prototype.removeListener = function(e, t) {
    var N3, u, x, A2, c;
    if (r(t), u = this._events, u === void 0)
      return this;
    if (N3 = u[e], N3 === void 0)
      return this;
    if (N3 === t || N3.listener === t)
      --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete u[e], u.removeListener && this.emit("removeListener", e, N3.listener || t));
    else if (typeof N3 != "function") {
      for (x = -1, A2 = N3.length - 1; A2 >= 0; A2--)
        if (N3[A2] === t || N3[A2].listener === t) {
          c = N3[A2].listener, x = A2;
          break;
        }
      if (x < 0)
        return this;
      x === 0 ? N3.shift() : z2(N3, x), N3.length === 1 && (u[e] = N3[0]), u.removeListener !== void 0 && this.emit("removeListener", e, c || t);
    }
    return this;
  }, g2.prototype.off = g2.prototype.removeListener, g2.prototype.removeAllListeners = function(e) {
    var t, N3, u;
    if (N3 = this._events, N3 === void 0)
      return this;
    if (N3.removeListener === void 0)
      return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : N3[e] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete N3[e]), this;
    if (arguments.length === 0) {
      var x = Object.keys(N3), A2;
      for (u = 0; u < x.length; ++u)
        A2 = x[u], A2 !== "removeListener" && this.removeAllListeners(A2);
      return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
    }
    if (t = N3[e], typeof t == "function")
      this.removeListener(e, t);
    else if (t !== void 0)
      for (u = t.length - 1; u >= 0; u--)
        this.removeListener(e, t[u]);
    return this;
  };
  function d(n, e, t) {
    var N3 = n._events;
    if (N3 === void 0)
      return [];
    var u = N3[e];
    return u === void 0 ? [] : typeof u == "function" ? t ? [u.listener || u] : [u] : t ? T(u) : i(u, u.length);
  }
  g2.prototype.listeners = function(e) {
    return d(this, e, true);
  }, g2.prototype.rawListeners = function(e) {
    return d(this, e, false);
  }, g2.listenerCount = function(n, e) {
    return typeof n.listenerCount == "function" ? n.listenerCount(e) : M2.call(n, e);
  }, g2.prototype.listenerCount = M2;
  function M2(n) {
    var e = this._events;
    if (e !== void 0) {
      var t = e[n];
      if (typeof t == "function")
        return 1;
      if (t !== void 0)
        return t.length;
    }
    return 0;
  }
  g2.prototype.eventNames = function() {
    return this._eventsCount > 0 ? D(this._events) : [];
  };
  function i(n, e) {
    for (var t = new Array(e), N3 = 0; N3 < e; ++N3)
      t[N3] = n[N3];
    return t;
  }
  function z2(n, e) {
    for (; e + 1 < n.length; e++)
      n[e] = n[e + 1];
    n.pop();
  }
  function T(n) {
    for (var e = new Array(n.length), t = 0; t < e.length; ++t)
      e[t] = n[t].listener || n[t];
    return e;
  }
  function w2(n, e) {
    return new Promise(function(t, N3) {
      function u(A2) {
        n.removeListener(e, x), N3(A2);
      }
      function x() {
        typeof n.removeListener == "function" && n.removeListener("error", u), t([].slice.call(arguments));
      }
      S(n, e, x, { once: true }), e !== "error" && U2(n, u, { once: true });
    });
  }
  function U2(n, e, t) {
    typeof n.on == "function" && S(n, "error", e, t);
  }
  function S(n, e, t, N3) {
    if (typeof n.on == "function")
      N3.once ? n.once(e, t) : n.on(e, t);
    else if (typeof n.addEventListener == "function")
      n.addEventListener(e, function u(x) {
        N3.once && n.removeEventListener(e, u), t(x);
      });
    else
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof n);
  }
  return b.exports;
}
var SM = UM();
var QM = class extends SM.EventEmitter {
  constructor({
    payload: j3,
    headerText: D,
    bodyText: I2
  }) {
    super(), this.modal = null, this.imageSrc = "", this.headerText = "", this.bodyText = "", this.uuid = "", this.uuid = j3.uuid, this.imageSrc = j3.refs.qr_png, this.headerText = D && D !== "" ? D : "Scan QR code to sign transaction", I2 && I2 !== "" && (this.bodyText = I2), console.log("Creating modal"), console.log("Image src:", this.imageSrc), console.log("Header text:", this.headerText), console.log("Body text:", this.bodyText), this.createModal();
  }
  createModal() {
    const j3 = Math.random().toString(36).substring(7);
    this.modal = document.createElement("div"), this.modal.id = "fv-signer-modal", this.modal.className = `fv-signer-modal-${j3}`;
    const D = document.createElement("img");
    D.src = this.imageSrc;
    const I2 = document.createElement("div");
    I2.className = "modal-content", I2.style.position = "absolute";
    const y = document.createElement("div");
    y.className = "modal-header", y.innerText = this.headerText, y.style.cursor = "move";
    const g2 = document.createElement("div");
    g2.className = "modal-body", g2.innerText = this.bodyText;
    const L2 = document.createElement("button");
    L2.className = "close", L2.innerHTML = "&times;";
    const r = document.createElement("div");
    r.className = "button-row";
    const o = document.createElement("button");
    o.className = "close-button", o.innerText = "Close";
    const E2 = document.createElement("button");
    E2.className = "cancel-close-button", E2.innerText = "Cancel", I2.appendChild(y), I2.appendChild(L2), I2.appendChild(D), this.bodyText !== "" && I2.appendChild(g2), I2.appendChild(r), r.appendChild(o), r.appendChild(E2), this.modal.appendChild(I2), document.body.appendChild(this.modal), this.modal.addEventListener("click", (C) => {
      C.target === this.modal && this.destroy();
    }), E2.addEventListener("click", () => {
      this.cancelAndDestroy();
    }), o.addEventListener("click", () => {
      this.destroy();
    }), L2.addEventListener("click", () => {
      this.destroy();
    }), this.makeDraggable(y, I2);
    const a = document.createElement("style");
    a.innerHTML = `
      .fv-signer-modal-${j3} {
        display: block;
        position: fixed;
        z-index: 9999;
        left: 0;
        top: 0;
        width: 100vw;
        height: 100vh;
        overflow: auto;
        background-color: rgba(0,0,0,0.8);
      }

      .fv-signer-modal-${j3} .modal-content {
        position: absolute;
        background-color: #fff;
        padding: 16px;
        border: 1px solid #000;
        width: 100%;
        max-width: 300px;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        border-radius: 16px;
        -webkit-box-shadow: 0px 16px 16px -8px rgba(0,0,0,0.84);
        -moz-box-shadow: 0px 16px 16px -8px rgba(0,0,0,0.84);
        box-shadow: 0px 16px 16px -8px rgba(0,0,0,0.84);
      }

      .fv-signer-modal-${j3} .modal-header {
        font-weight: 700;
        font-size: 1.4rem;
      }

      .fv-signer-modal-${j3} .modal-content img {
        width: 100%;
      }

      .fv-signer-modal-${j3} .button-row {
        padding: 0;
        width: 100%;
        display: grid;
        grid-template-columns: repeat(2, auto);
        gap: 8px;
      }

      .fv-signer-modal-${j3} .close-button,
      .fv-signer-modal-${j3} .cancel-close-button {
        width: 100%;
        text-transform: uppercase;
        border: none;
        margin: 0;
        padding: 16px;
        line-height: 1;
        letter-spacing: 1.1px;
        font-weight: 700;
        font-size: 0.8rem;
        appearance: none;
        border: 1px solid transparent;
        transition: all 0.3s;
        cursor: pointer;

      }

      .fv-signer-modal-${j3} .close-button {
        background: black;
        color: white;
      }

      .fv-signer-modal-${j3} .cancel-close-button {
        background: transparent;
        color: black;
        border: 1px solid black;
      }

      .fv-signer-modal-${j3} .close-button:hover,
      .fv-signer-modal-${j3} .cancel-close-button:hover {
        border: 1px solid #0029fe;
        background: #0029fe;
        color: #fff;
      }

      .fv-signer-modal-${j3} .close {
        appearance: none;
        color: #373737;
        float: right;
        font-size: 23px;
        font-weight: bold;
        width: 32px;
        height: 32px;
        line-height: 0;
        text-align: center;
        position: absolute;
        border: none;
        background: #fff;
        padding: 8px;
        border-radius: 50px;
        top: -16px;
        right: -16px;
        box-shadow: 0 0 8px rgba(0, 0, 0, 0.6);
      }

      .fv-signer-modal-${j3} .close:hover,
      .fv-signer-modal-${j3} .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
      }
    `, document.head.appendChild(a);
  }
  makeDraggable(j3, D) {
    let I2, y, g2, L2;
    const r = (a) => {
      a.preventDefault(), I2 = a.clientX, y = a.clientY, g2 = D.offsetLeft, L2 = D.offsetTop, document.onmouseup = E2, document.onmousemove = o;
    }, o = (a) => {
      a.preventDefault();
      const C = a.clientX - I2, d = a.clientY - y, M2 = g2 + C, i = L2 + d, z2 = window.innerHeight - D.offsetHeight / 2, T = window.innerWidth - (D.offsetWidth / 2 + 16);
      D.style.top = `${Math.max(
        D.offsetHeight / 2 + 16,
        Math.min(i, z2)
      )}px`, D.style.left = `${Math.max(
        D.offsetWidth / 2,
        Math.min(M2, T)
      )}px`;
    }, E2 = () => {
      document.onmouseup = null, document.onmousemove = null;
    };
    j3.onmousedown = r;
  }
  cancelAndDestroy() {
    console.log("Cancelling and destroying modal"), this.emit("cancel", this.uuid), this.destroy();
  }
  destroy() {
    this.modal && document.body.contains(this.modal) && (document.body.removeChild(this.modal), this.modal = null);
  }
};
var NM = class extends Error {
  constructor(j3) {
    super(j3), this.name = "UnsupportedWallet";
  }
};
var jM = async (s, j3) => {
  const D = getConnectors(j3);
  try {
    const I2 = D.find((r) => r.id === s);
    if (!I2)
      throw console.log("No connector", s), new Error(`Failed to find connector ${s}`);
    const g2 = getAccount(j3).connector;
    return I2 !== g2 && await (g2 == null ? void 0 : g2.disconnect()), await I2.isAuthorized() || await connect(j3, { connector: I2 }), await I2.getAccounts();
  } catch (I2) {
    if (I2 instanceof NM)
      throw I2;
    return null;
  }
};
var RM = async (s, j3, D, I2) => {
  const y = getConnectors(D);
  if (await jM(s, D), ["xaman"].includes(s) || s.startsWith("futureverseCustodial"))
    return;
  const g2 = y.find((a) => a.id === s);
  if (!g2)
    throw new Error(`Did not find wagmi connector for ${s}`);
  const L2 = await getWalletClient(D, { connector: g2 }), r = getAccount(D);
  if (!r.address)
    throw new Error("Wallet not connected");
  const o = r.address, E2 = jt(L2);
  return j3.generateFuturepassSignInArgs({
    type: "eoa",
    signer: E2,
    address: o,
    extraQueryParams: { connector_id: s },
    ...I2
  });
};
var XM = async (s, j3, D, I2) => {
  const y = getConnectors(D);
  if (await jM(s, D), ["xaman"].includes(s) || s.startsWith("futureverseCustodial"))
    return;
  const g2 = y.find((a) => a.id === s);
  if (!g2)
    throw new Error(`Did not find wagmi connector for ${s}`);
  const L2 = await getWalletClient(D, { connector: g2 }), r = getAccount(D);
  if (!r.address)
    throw new Error("Wallet not connected");
  const o = r.address, E2 = jt(L2);
  await j3.signInPass({
    type: "eoa",
    signer: E2,
    address: o,
    extraQueryParams: { connector_id: s },
    ...I2
  });
};
sM.type = "walletConnectCustom";
function sM(s) {
  const j3 = s.isNewChainsStale ?? true, D = s.allowedWalletNames;
  let I2, y;
  const g2 = "eip155";
  let L2, r, o, E2, a, C;
  return createConnector((d) => ({
    id: s.connectorId,
    name: s.connectorName,
    type: sM.type,
    icon: s.icon,
    async setup() {
      const M2 = await this.getProvider().catch(() => null);
      M2 && (o || (o = this.onConnect.bind(this), M2.on("connect", o)), a || (a = this.onSessionDelete.bind(this), M2.on("session_delete", a)));
    },
    async connect({ chainId: M2, ...i } = {}) {
      var z2, T, w2, U2, S, n, e;
      try {
        const t = await this.getProvider();
        if (!t) throw new ProviderNotFoundError();
        E2 || (E2 = this.onDisplayUri, t.on("display_uri", E2));
        let N3 = M2;
        if (!N3) {
          const O2 = await ((z2 = d.storage) == null ? void 0 : z2.getItem("state")) ?? {};
          d.chains.some(
            (f) => f.id === O2.chainId
          ) ? N3 = O2.chainId : N3 = (T = d.chains[0]) == null ? void 0 : T.id;
        }
        if (!N3) throw new Error("No chains found on connector.");
        const u = await this.isChainsStale();
        if (t.session && u && await t.disconnect(), !t.session || u) {
          const O2 = d.chains.filter((l17) => l17.id !== N3).map((l17) => l17.id);
          await t.connect({
            optionalChains: [N3, ...O2],
            ..."pairingTopic" in i ? { pairingTopic: i.pairingTopic } : {}
          }), this.setRequestedChainsIds(d.chains.map((l17) => l17.id));
        }
        const x = (S = (U2 = (w2 = t.session) == null ? void 0 : w2.peer) == null ? void 0 : U2.metadata) == null ? void 0 : S.name;
        if (console.debug("connecting wallet", (e = (n = t.session) == null ? void 0 : n.peer) == null ? void 0 : e.metadata, { allowedWalletNames: D }), x && !(D != null && D.includes(x)))
          throw console.warn("Unsupported Wallet called from connector", x), await t.disconnect().catch(() => {
          }), new NM(x);
        const A2 = (await t.enable()).map((O2) => getAddress(O2)), c = await this.getChainId();
        return E2 && (t.removeListener("display_uri", E2), E2 = void 0), o && (t.removeListener("connect", o), o = void 0), L2 || (L2 = this.onAccountsChanged.bind(this), t.on("accountsChanged", L2)), r || (r = this.onChainChanged.bind(this), t.on("chainChanged", r)), C || (C = this.onDisconnect.bind(this), t.on("disconnect", C)), a || (a = this.onSessionDelete.bind(this), t.on("session_delete", a)), { accounts: A2, chainId: c };
      } catch (t) {
        throw /(user rejected|connection request reset)/i.test(
          t == null ? void 0 : t.message
        ) ? new UserRejectedRequestError(t) : t;
      }
    },
    async disconnect() {
      const M2 = await this.getProvider();
      try {
        await (M2 == null ? void 0 : M2.disconnect());
      } catch (i) {
        if (!/No matching key/i.test(i.message)) throw i;
      } finally {
        r && (M2 == null || M2.removeListener("chainChanged", r), r = void 0), C && (M2 == null || M2.removeListener("disconnect", C), C = void 0), o || (o = this.onConnect.bind(this), M2 == null || M2.on("connect", o)), L2 && (M2 == null || M2.removeListener("accountsChanged", L2), L2 = void 0), a && (M2 == null || M2.removeListener("session_delete", a), a = void 0), this.setRequestedChainsIds([]);
      }
    },
    async getAccounts() {
      return (await this.getProvider()).accounts.map((i) => getAddress(i));
    },
    async getProvider({ chainId: M2 } = {}) {
      var z2;
      async function i() {
        const T = d.chains.map((U2) => U2.id);
        if (!T.length) return;
        const { EthereumProvider: w2 } = await import("./index.es-U5PLIEID.js");
        return await w2.init({
          ...s,
          disableProviderPing: true,
          optionalChains: T,
          projectId: s.projectId,
          rpcMap: Object.fromEntries(
            d.chains.map((U2) => {
              const [S] = extractRpcUrls({
                chain: U2,
                transports: d.transports
              });
              return [U2.id, S];
            })
          ),
          showQrModal: s.showQrModal ?? true
        });
      }
      return I2 || (y || (y = i()), I2 = await y, I2 == null || I2.events.setMaxListeners(Number.POSITIVE_INFINITY)), M2 && await ((z2 = this.switchChain) == null ? void 0 : z2.call(this, { chainId: M2 })), I2;
    },
    async getChainId() {
      return (await this.getProvider()).chainId;
    },
    async isAuthorized() {
      var M2, i, z2;
      try {
        const [T, w2] = await Promise.all([
          this.getAccounts(),
          this.getProvider()
        ]);
        if (!T.length) return false;
        if (await this.isChainsStale() && w2.session)
          return await w2.disconnect().catch(() => {
          }), false;
        const S = (z2 = (i = (M2 = w2.session) == null ? void 0 : M2.peer) == null ? void 0 : i.metadata) == null ? void 0 : z2.name;
        return S && !(D != null && D.includes(S)) ? (await w2.disconnect().catch(() => {
        }), console.warn("Unsupported Wallet called from connector", S), false) : true;
      } catch {
        return false;
      }
    },
    async switchChain({ addEthereumChainParameter: M2, chainId: i }) {
      var w2, U2, S;
      const z2 = await this.getProvider();
      if (!z2) throw new ProviderNotFoundError();
      const T = d.chains.find((n) => n.id === i);
      if (!T) throw new SwitchChainError(new ChainNotConfiguredError());
      try {
        await Promise.all([
          new Promise((e) => {
            const t = ({
              chainId: N3
            }) => {
              N3 === i && (d.emitter.off("change", t), e());
            };
            d.emitter.on("change", t);
          }),
          z2.request({
            method: "wallet_switchEthereumChain",
            params: [{ chainId: numberToHex(i) }]
          })
        ]);
        const n = await this.getRequestedChainsIds();
        return this.setRequestedChainsIds([...n, i]), T;
      } catch (n) {
        const e = n;
        if (/(user rejected)/i.test(e.message))
          throw new UserRejectedRequestError(e);
        try {
          let t;
          M2 != null && M2.blockExplorerUrls ? t = M2.blockExplorerUrls : t = (w2 = T.blockExplorers) != null && w2.default.url ? [(U2 = T.blockExplorers) == null ? void 0 : U2.default.url] : [];
          let N3;
          (S = M2 == null ? void 0 : M2.rpcUrls) != null && S.length ? N3 = M2.rpcUrls : N3 = [...T.rpcUrls.default.http];
          const u = {
            blockExplorerUrls: t,
            chainId: numberToHex(i),
            chainName: (M2 == null ? void 0 : M2.chainName) ?? T.name,
            iconUrls: M2 == null ? void 0 : M2.iconUrls,
            nativeCurrency: (M2 == null ? void 0 : M2.nativeCurrency) ?? T.nativeCurrency,
            rpcUrls: N3
          };
          await z2.request({
            method: "wallet_addEthereumChain",
            params: [u]
          });
          const x = await this.getRequestedChainsIds();
          return this.setRequestedChainsIds([...x, i]), T;
        } catch (t) {
          throw new UserRejectedRequestError(t);
        }
      }
    },
    onAccountsChanged(M2) {
      M2.length === 0 ? this.onDisconnect() : d.emitter.emit("change", {
        accounts: M2.map((i) => getAddress(i))
      });
    },
    onChainChanged(M2) {
      const i = Number(M2);
      d.emitter.emit("change", { chainId: i });
    },
    async onConnect(M2) {
      const i = Number(M2.chainId), z2 = await this.getAccounts();
      d.emitter.emit("connect", { accounts: z2, chainId: i });
    },
    async onDisconnect(M2) {
      this.setRequestedChainsIds([]), d.emitter.emit("disconnect");
      const i = await this.getProvider();
      L2 && (i.removeListener("accountsChanged", L2), L2 = void 0), r && (i.removeListener("chainChanged", r), r = void 0), C && (i.removeListener("disconnect", C), C = void 0), a && (i.removeListener("session_delete", a), a = void 0), o || (o = this.onConnect.bind(this), i.on("connect", o));
    },
    onDisplayUri(M2) {
      d.emitter.emit("message", { type: "display_uri", data: M2 });
    },
    onSessionDelete() {
      this.onDisconnect();
    },
    getNamespaceChainsIds() {
      var i, z2, T;
      return I2 ? ((T = (z2 = (i = I2.session) == null ? void 0 : i.namespaces[g2]) == null ? void 0 : z2.accounts) == null ? void 0 : T.map(
        (w2) => Number.parseInt(w2.split(":")[1] || "")
      )) ?? [] : [];
    },
    async getRequestedChainsIds() {
      var M2;
      return await ((M2 = d.storage) == null ? void 0 : M2.getItem(this.requestedChainsStorageKey)) ?? [];
    },
    /**
     * Checks if the target chains match the chains that were
     * initially requested by the connector for the WalletConnect session.
     * If there is a mismatch, this means that the chains on the connector
     * are considered stale, and need to be revalidated at a later point (via
     * connection).
     *
     * There may be a scenario where a dapp adds a chain to the
     * connector later on, however, this chain will not have been approved or rejected
     * by the wallet. In this case, the chain is considered stale.
     */
    async isChainsStale() {
      if (!j3) return false;
      const M2 = d.chains.map((T) => T.id), i = this.getNamespaceChainsIds();
      if (i.length && !i.some((T) => M2.includes(T)))
        return false;
      const z2 = await this.getRequestedChainsIds();
      return !M2.every((T) => z2.includes(T));
    },
    async setRequestedChainsIds(M2) {
      var i;
      await ((i = d.storage) == null ? void 0 : i.setItem(this.requestedChainsStorageKey, M2));
    },
    get requestedChainsStorageKey() {
      return `${this.id}.requestedChains`;
    }
  }));
}

export {
  jt,
  NM,
  RM,
  XM
};
/*! Bundled license information:

@noble/curves/esm/abstract/edwards.js:
@noble/curves/esm/abstract/montgomery.js:
@noble/curves/esm/ed25519.js:
@noble/curves/utils.js:
@noble/curves/abstract/modular.js:
@noble/curves/abstract/curve.js:
@noble/curves/abstract/weierstrass.js:
@noble/curves/_shortw_utils.js:
@noble/curves/secp256k1.js:
@noble/curves/abstract/edwards.js:
@noble/curves/abstract/montgomery.js:
@noble/curves/ed25519.js:
@noble/curves/abstract/utils.js:
@noble/curves/abstract/modular.js:
@noble/curves/abstract/curve.js:
@noble/curves/abstract/weierstrass.js:
@noble/curves/_shortw_utils.js:
@noble/curves/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/base/lib/index.js:
@scure/base/lib/index.js:
@scure/base/lib/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/hashes/utils.js:
@futureverse/signer/index.mjs:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/bip32/lib/index.js:
  (*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) *)

@scure/bip39/index.js:
  (*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=chunk-GTHX6AIB.js.map

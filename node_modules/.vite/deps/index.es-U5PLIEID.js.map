{
  "version": 3,
  "sources": ["../../@walletconnect/utils/node_modules/viem/accounts/utils/publicKeyToAddress.ts", "../../@walletconnect/utils/node_modules/viem/utils/signature/recoverPublicKey.ts", "../../@walletconnect/utils/node_modules/viem/utils/signature/recoverAddress.ts", "../../@walletconnect/utils/node_modules/viem/utils/formatters/transaction.ts", "../../@walletconnect/utils/node_modules/viem/utils/formatters/block.ts", "../../@walletconnect/utils/node_modules/viem/actions/public/getTransactionCount.ts", "../../@walletconnect/utils/node_modules/viem/constants/blob.ts", "../../@walletconnect/utils/node_modules/viem/utils/formatters/log.ts", "../../@walletconnect/utils/node_modules/viem/actions/wallet/sendTransaction.ts", "../../@walletconnect/utils/node_modules/viem/utils/formatters/transactionReceipt.ts", "../../@walletconnect/utils/node_modules/viem/actions/wallet/sendCalls.ts", "../../@walletconnect/utils/node_modules/viem/utils/promise/withDedupe.ts", "../../@walletconnect/utils/node_modules/viem/utils/rpc/id.ts", "../../@walletconnect/utils/node_modules/@noble/hashes/src/legacy.ts", "../../@walletconnect/utils/node_modules/viem/utils/nonceManager.ts", "../../@walletconnect/utils/node_modules/ox/core/Hash.ts", "../../@walletconnect/utils/node_modules/ox/core/internal/lru.ts", "../../@walletconnect/utils/node_modules/ox/core/Caches.ts", "../../@walletconnect/utils/node_modules/ox/core/Address.ts", "../../@walletconnect/utils/node_modules/ox/core/Solidity.ts", "../../@walletconnect/utils/node_modules/ox/core/internal/cursor.ts", "../../@walletconnect/utils/node_modules/ox/core/AbiParameters.ts", "../../@msgpack/msgpack/src/utils/utf8.ts", "../../@msgpack/msgpack/src/ExtData.ts", "../../@msgpack/msgpack/src/DecodeError.ts", "../../@msgpack/msgpack/src/utils/int.ts", "../../@msgpack/msgpack/src/timestamp.ts", "../../@msgpack/msgpack/src/ExtensionCodec.ts", "../../@msgpack/msgpack/src/utils/typedArrays.ts", "../../@msgpack/msgpack/src/Encoder.ts", "../../@msgpack/msgpack/src/encode.ts", "../../@msgpack/msgpack/src/utils/prettyByte.ts", "../../@msgpack/msgpack/src/CachedKeyDecoder.ts", "../../@msgpack/msgpack/src/Decoder.ts", "../../@msgpack/msgpack/src/decode.ts", "../../uint8arrays/esm/src/util/as-uint8array.js", "../../uint8arrays/esm/src/alloc.js", "../../uint8arrays/esm/src/concat.js", "../../uint8arrays/esm/src/util/bases.js", "../../uint8arrays/esm/src/from-string.js", "../../uint8arrays/esm/src/to-string.js", "../../@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.CoCt7NXC.mjs", "../../@walletconnect/core/node_modules/unstorage/dist/index.mjs"],
  "sourcesContent": ["import type { Address } from 'abitype'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport {\r\n  type ChecksumAddressErrorType,\r\n  checksumAddress,\r\n} from '../../utils/address/getAddress.js'\r\nimport {\r\n  type Keccak256ErrorType,\r\n  keccak256,\r\n} from '../../utils/hash/keccak256.js'\r\n\r\nexport type PublicKeyToAddressErrorType =\r\n  | ChecksumAddressErrorType\r\n  | Keccak256ErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * @description Converts an ECDSA public key to an address.\r\n *\r\n * @param publicKey The public key to convert.\r\n *\r\n * @returns The address.\r\n */\r\nexport function publicKeyToAddress(publicKey: Hex): Address {\r\n  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26)\r\n  return checksumAddress(`0x${address}`) as Address\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\r\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\r\nimport { size } from '../data/size.js'\r\nimport {\r\n  type HexToNumberErrorType,\r\n  hexToBigInt,\r\n  hexToNumber,\r\n} from '../encoding/fromHex.js'\r\nimport { toHex } from '../encoding/toHex.js'\r\n\r\nexport type RecoverPublicKeyParameters = {\r\n  hash: Hex | ByteArray\r\n  signature: Hex | ByteArray | Signature\r\n}\r\n\r\nexport type RecoverPublicKeyReturnType = Hex\r\n\r\nexport type RecoverPublicKeyErrorType =\r\n  | HexToNumberErrorType\r\n  | IsHexErrorType\r\n  | ErrorType\r\n\r\nexport async function recoverPublicKey({\r\n  hash,\r\n  signature,\r\n}: RecoverPublicKeyParameters): Promise<RecoverPublicKeyReturnType> {\r\n  const hashHex = isHex(hash) ? hash : toHex(hash)\r\n\r\n  const { secp256k1 } = await import('@noble/curves/secp256k1')\r\n  const signature_ = (() => {\r\n    // typeof signature: `Signature`\r\n    if (typeof signature === 'object' && 'r' in signature && 's' in signature) {\r\n      const { r, s, v, yParity } = signature\r\n      const yParityOrV = Number(yParity ?? v)!\r\n      const recoveryBit = toRecoveryBit(yParityOrV)\r\n      return new secp256k1.Signature(\r\n        hexToBigInt(r),\r\n        hexToBigInt(s),\r\n      ).addRecoveryBit(recoveryBit)\r\n    }\r\n\r\n    // typeof signature: `Hex | ByteArray`\r\n    const signatureHex = isHex(signature) ? signature : toHex(signature)\r\n    if (size(signatureHex) !== 65) throw new Error('invalid signature length')\r\n    const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`)\r\n    const recoveryBit = toRecoveryBit(yParityOrV)\r\n    return secp256k1.Signature.fromCompact(\r\n      signatureHex.substring(2, 130),\r\n    ).addRecoveryBit(recoveryBit)\r\n  })()\r\n\r\n  const publicKey = signature_\r\n    .recoverPublicKey(hashHex.substring(2))\r\n    .toHex(false)\r\n  return `0x${publicKey}`\r\n}\r\n\r\nfunction toRecoveryBit(yParityOrV: number) {\r\n  if (yParityOrV === 0 || yParityOrV === 1) return yParityOrV\r\n  if (yParityOrV === 27) return 0\r\n  if (yParityOrV === 28) return 1\r\n  throw new Error('Invalid yParityOrV value')\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport { publicKeyToAddress } from '../../accounts/utils/publicKeyToAddress.js'\r\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport { recoverPublicKey } from './recoverPublicKey.js'\r\n\r\nexport type RecoverAddressParameters = {\r\n  hash: Hex | ByteArray\r\n  signature: Hex | ByteArray | Signature\r\n}\r\n\r\nexport type RecoverAddressReturnType = Address\r\n\r\nexport type RecoverAddressErrorType = ErrorType\r\n\r\nexport async function recoverAddress({\r\n  hash,\r\n  signature,\r\n}: RecoverAddressParameters): Promise<RecoverAddressReturnType> {\r\n  return publicKeyToAddress(await recoverPublicKey({ hash, signature }))\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { SignedAuthorizationList } from '../../types/authorization.js'\r\nimport type { BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type {\r\n  ExtractChainFormatterExclude,\r\n  ExtractChainFormatterReturnType,\r\n} from '../../types/chain.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { RpcAuthorizationList, RpcTransaction } from '../../types/rpc.js'\r\nimport type { Transaction, TransactionType } from '../../types/transaction.js'\r\nimport type { ExactPartial, UnionLooseOmit } from '../../types/utils.js'\r\nimport { hexToNumber } from '../encoding/fromHex.js'\r\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\r\n\r\ntype TransactionPendingDependencies =\r\n  | 'blockHash'\r\n  | 'blockNumber'\r\n  | 'transactionIndex'\r\n\r\nexport type FormattedTransaction<\r\n  chain extends Chain | undefined = undefined,\r\n  blockTag extends BlockTag = BlockTag,\r\n  _FormatterReturnType = ExtractChainFormatterReturnType<\r\n    chain,\r\n    'transaction',\r\n    Transaction\r\n  >,\r\n  _ExcludedPendingDependencies extends string = TransactionPendingDependencies &\r\n    ExtractChainFormatterExclude<chain, 'transaction'>,\r\n> = UnionLooseOmit<_FormatterReturnType, TransactionPendingDependencies> & {\r\n  [_K in _ExcludedPendingDependencies]: never\r\n} & Pick<\r\n    Transaction<bigint, number, blockTag extends 'pending' ? true : false>,\r\n    TransactionPendingDependencies\r\n  >\r\n\r\nexport const transactionType = {\r\n  '0x0': 'legacy',\r\n  '0x1': 'eip2930',\r\n  '0x2': 'eip1559',\r\n  '0x3': 'eip4844',\r\n  '0x4': 'eip7702',\r\n} as const satisfies Record<Hex, TransactionType>\r\n\r\nexport type FormatTransactionErrorType = ErrorType\r\n\r\nexport function formatTransaction(transaction: ExactPartial<RpcTransaction>) {\r\n  const transaction_ = {\r\n    ...transaction,\r\n    blockHash: transaction.blockHash ? transaction.blockHash : null,\r\n    blockNumber: transaction.blockNumber\r\n      ? BigInt(transaction.blockNumber)\r\n      : null,\r\n    chainId: transaction.chainId ? hexToNumber(transaction.chainId) : undefined,\r\n    gas: transaction.gas ? BigInt(transaction.gas) : undefined,\r\n    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : undefined,\r\n    maxFeePerBlobGas: transaction.maxFeePerBlobGas\r\n      ? BigInt(transaction.maxFeePerBlobGas)\r\n      : undefined,\r\n    maxFeePerGas: transaction.maxFeePerGas\r\n      ? BigInt(transaction.maxFeePerGas)\r\n      : undefined,\r\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas\r\n      ? BigInt(transaction.maxPriorityFeePerGas)\r\n      : undefined,\r\n    nonce: transaction.nonce ? hexToNumber(transaction.nonce) : undefined,\r\n    to: transaction.to ? transaction.to : null,\r\n    transactionIndex: transaction.transactionIndex\r\n      ? Number(transaction.transactionIndex)\r\n      : null,\r\n    type: transaction.type\r\n      ? (transactionType as any)[transaction.type]\r\n      : undefined,\r\n    typeHex: transaction.type ? transaction.type : undefined,\r\n    value: transaction.value ? BigInt(transaction.value) : undefined,\r\n    v: transaction.v ? BigInt(transaction.v) : undefined,\r\n  } as Transaction\r\n\r\n  if (transaction.authorizationList)\r\n    transaction_.authorizationList = formatAuthorizationList(\r\n      transaction.authorizationList,\r\n    )\r\n\r\n  transaction_.yParity = (() => {\r\n    // If `yParity` is provided, we will use it.\r\n    if (transaction.yParity) return Number(transaction.yParity)\r\n\r\n    // If no `yParity` provided, try derive from `v`.\r\n    if (typeof transaction_.v === 'bigint') {\r\n      if (transaction_.v === 0n || transaction_.v === 27n) return 0\r\n      if (transaction_.v === 1n || transaction_.v === 28n) return 1\r\n      if (transaction_.v >= 35n) return transaction_.v % 2n === 0n ? 1 : 0\r\n    }\r\n\r\n    return undefined\r\n  })()\r\n\r\n  if (transaction_.type === 'legacy') {\r\n    delete transaction_.accessList\r\n    delete transaction_.maxFeePerBlobGas\r\n    delete transaction_.maxFeePerGas\r\n    delete transaction_.maxPriorityFeePerGas\r\n    delete transaction_.yParity\r\n  }\r\n  if (transaction_.type === 'eip2930') {\r\n    delete transaction_.maxFeePerBlobGas\r\n    delete transaction_.maxFeePerGas\r\n    delete transaction_.maxPriorityFeePerGas\r\n  }\r\n  if (transaction_.type === 'eip1559') {\r\n    delete transaction_.maxFeePerBlobGas\r\n  }\r\n  return transaction_\r\n}\r\n\r\nexport type DefineTransactionErrorType = DefineFormatterErrorType | ErrorType\r\n\r\nexport const defineTransaction = /*#__PURE__*/ defineFormatter(\r\n  'transaction',\r\n  formatTransaction,\r\n)\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction formatAuthorizationList(\r\n  authorizationList: RpcAuthorizationList,\r\n): SignedAuthorizationList {\r\n  return authorizationList.map((authorization) => ({\r\n    address: (authorization as any).address,\r\n    chainId: Number(authorization.chainId),\r\n    nonce: Number(authorization.nonce),\r\n    r: authorization.r,\r\n    s: authorization.s,\r\n    yParity: Number(authorization.yParity),\r\n  })) as SignedAuthorizationList\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { Block, BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type {\r\n  ExtractChainFormatterExclude,\r\n  ExtractChainFormatterReturnType,\r\n} from '../../types/chain.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport type { RpcBlock } from '../../types/rpc.js'\r\nimport type { ExactPartial, Prettify } from '../../types/utils.js'\r\n\r\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\r\nimport { type FormattedTransaction, formatTransaction } from './transaction.js'\r\n\r\ntype BlockPendingDependencies = 'hash' | 'logsBloom' | 'nonce' | 'number'\r\n\r\nexport type FormattedBlock<\r\n  chain extends Chain | undefined = undefined,\r\n  includeTransactions extends boolean = boolean,\r\n  blockTag extends BlockTag = BlockTag,\r\n  _FormatterReturnType = ExtractChainFormatterReturnType<\r\n    chain,\r\n    'block',\r\n    Block<bigint, includeTransactions>\r\n  >,\r\n  _ExcludedPendingDependencies extends string = BlockPendingDependencies &\r\n    ExtractChainFormatterExclude<chain, 'block'>,\r\n  _Formatted = Omit<_FormatterReturnType, BlockPendingDependencies> & {\r\n    [_key in _ExcludedPendingDependencies]: never\r\n  } & Pick<\r\n      Block<bigint, includeTransactions, blockTag>,\r\n      BlockPendingDependencies\r\n    >,\r\n  _Transactions = includeTransactions extends true\r\n    ? Prettify<FormattedTransaction<chain, blockTag>>[]\r\n    : Hash[],\r\n> = Omit<_Formatted, 'transactions'> & {\r\n  transactions: _Transactions\r\n}\r\n\r\nexport type FormatBlockErrorType = ErrorType\r\n\r\nexport function formatBlock(block: ExactPartial<RpcBlock>) {\r\n  const transactions = (block.transactions ?? []).map((transaction) => {\r\n    if (typeof transaction === 'string') return transaction\r\n    return formatTransaction(transaction)\r\n  })\r\n  return {\r\n    ...block,\r\n    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,\r\n    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : undefined,\r\n    difficulty: block.difficulty ? BigInt(block.difficulty) : undefined,\r\n    excessBlobGas: block.excessBlobGas\r\n      ? BigInt(block.excessBlobGas)\r\n      : undefined,\r\n    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : undefined,\r\n    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : undefined,\r\n    hash: block.hash ? block.hash : null,\r\n    logsBloom: block.logsBloom ? block.logsBloom : null,\r\n    nonce: block.nonce ? block.nonce : null,\r\n    number: block.number ? BigInt(block.number) : null,\r\n    size: block.size ? BigInt(block.size) : undefined,\r\n    timestamp: block.timestamp ? BigInt(block.timestamp) : undefined,\r\n    transactions,\r\n    totalDifficulty: block.totalDifficulty\r\n      ? BigInt(block.totalDifficulty)\r\n      : null,\r\n  } as Block\r\n}\r\n\r\nexport type DefineBlockErrorType = DefineFormatterErrorType | ErrorType\r\n\r\nexport const defineBlock = /*#__PURE__*/ defineFormatter('block', formatBlock)\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Account } from '../../accounts/types.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type HexToNumberErrorType,\r\n  hexToNumber,\r\n} from '../../utils/encoding/fromHex.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\n\r\nexport type GetTransactionCountParameters = {\r\n  /** The account address. */\r\n  address: Address\r\n} & (\r\n  | {\r\n      /** The block number. */\r\n      blockNumber?: bigint | undefined\r\n      blockTag?: undefined\r\n    }\r\n  | {\r\n      blockNumber?: undefined\r\n      /** The block tag. Defaults to 'latest'. */\r\n      blockTag?: BlockTag | undefined\r\n    }\r\n)\r\nexport type GetTransactionCountReturnType = number\r\n\r\nexport type GetTransactionCountErrorType =\r\n  | RequestErrorType\r\n  | NumberToHexErrorType\r\n  | HexToNumberErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms#transaction) an Account has sent.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/getTransactionCount\r\n * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetTransactionCountParameters}\r\n * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getTransactionCount } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const transactionCount = await getTransactionCount(client, {\r\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n * })\r\n */\r\nexport async function getTransactionCount<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined,\r\n>(\r\n  client: Client<Transport, chain, account>,\r\n  { address, blockTag = 'latest', blockNumber }: GetTransactionCountParameters,\r\n): Promise<GetTransactionCountReturnType> {\r\n  const count = await client.request(\r\n    {\r\n      method: 'eth_getTransactionCount',\r\n      params: [\r\n        address,\r\n        typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : blockTag,\r\n      ],\r\n    },\r\n    {\r\n      dedupe: Boolean(blockNumber),\r\n    },\r\n  )\r\n  return hexToNumber(count)\r\n}\r\n", "// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#parameters\r\n\r\n/** Blob limit per transaction. */\r\nconst blobsPerTransaction = 6\r\n\r\n/** The number of bytes in a BLS scalar field element. */\r\nexport const bytesPerFieldElement = 32\r\n\r\n/** The number of field elements in a blob. */\r\nexport const fieldElementsPerBlob = 4096\r\n\r\n/** The number of bytes in a blob. */\r\nexport const bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob\r\n\r\n/** Blob bytes limit per transaction. */\r\nexport const maxBytesPerTransaction =\r\n  bytesPerBlob * blobsPerTransaction -\r\n  // terminator byte (0x80).\r\n  1 -\r\n  // zero byte (0x00) appended to each field element.\r\n  1 * fieldElementsPerBlob * blobsPerTransaction\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { Log } from '../../types/log.js'\r\nimport type { RpcLog } from '../../types/rpc.js'\r\nimport type { ExactPartial } from '../../types/utils.js'\r\n\r\nexport type FormatLogErrorType = ErrorType\r\n\r\nexport function formatLog(\r\n  log: ExactPartial<RpcLog>,\r\n  {\r\n    args,\r\n    eventName,\r\n  }: { args?: unknown | undefined; eventName?: string | undefined } = {},\r\n) {\r\n  return {\r\n    ...log,\r\n    blockHash: log.blockHash ? log.blockHash : null,\r\n    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,\r\n    logIndex: log.logIndex ? Number(log.logIndex) : null,\r\n    transactionHash: log.transactionHash ? log.transactionHash : null,\r\n    transactionIndex: log.transactionIndex\r\n      ? Number(log.transactionIndex)\r\n      : null,\r\n    ...(eventName ? { args, eventName } : {}),\r\n  } as Log\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Account } from '../../accounts/types.js'\r\nimport {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../../accounts/utils/parseAccount.js'\r\nimport type { SignTransactionErrorType } from '../../accounts/utils/signTransaction.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport {\r\n  AccountNotFoundError,\r\n  type AccountNotFoundErrorType,\r\n  AccountTypeNotSupportedError,\r\n  type AccountTypeNotSupportedErrorType,\r\n} from '../../errors/account.js'\r\nimport { BaseError } from '../../errors/base.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { GetAccountParameter } from '../../types/account.js'\r\nimport type {\r\n  Chain,\r\n  DeriveChain,\r\n  GetChainParameter,\r\n} from '../../types/chain.js'\r\nimport type { GetTransactionRequestKzgParameter } from '../../types/kzg.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport type { TransactionRequest } from '../../types/transaction.js'\r\nimport type { UnionOmit } from '../../types/utils.js'\r\nimport {\r\n  type RecoverAuthorizationAddressErrorType,\r\n  recoverAuthorizationAddress,\r\n} from '../../utils/authorization/recoverAuthorizationAddress.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type AssertCurrentChainErrorType,\r\n  assertCurrentChain,\r\n} from '../../utils/chain/assertCurrentChain.js'\r\nimport {\r\n  type GetTransactionErrorReturnType,\r\n  getTransactionError,\r\n} from '../../utils/errors/getTransactionError.js'\r\nimport { extract } from '../../utils/formatters/extract.js'\r\nimport {\r\n  type FormattedTransactionRequest,\r\n  formatTransactionRequest,\r\n} from '../../utils/formatters/transactionRequest.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport { LruMap } from '../../utils/lru.js'\r\nimport {\r\n  type AssertRequestErrorType,\r\n  type AssertRequestParameters,\r\n  assertRequest,\r\n} from '../../utils/transaction/assertRequest.js'\r\nimport { type GetChainIdErrorType, getChainId } from '../public/getChainId.js'\r\nimport {\r\n  type PrepareTransactionRequestErrorType,\r\n  defaultParameters,\r\n  prepareTransactionRequest,\r\n} from './prepareTransactionRequest.js'\r\nimport {\r\n  type SendRawTransactionErrorType,\r\n  sendRawTransaction,\r\n} from './sendRawTransaction.js'\r\n\r\nconst supportsWalletNamespace = new LruMap<boolean>(128)\r\n\r\nexport type SendTransactionRequest<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  chainOverride extends Chain | undefined = Chain | undefined,\r\n  ///\r\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\r\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\r\n  GetTransactionRequestKzgParameter\r\n\r\nexport type SendTransactionParameters<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends Account | undefined = Account | undefined,\r\n  chainOverride extends Chain | undefined = Chain | undefined,\r\n  request extends SendTransactionRequest<\r\n    chain,\r\n    chainOverride\r\n  > = SendTransactionRequest<chain, chainOverride>,\r\n> = request &\r\n  GetAccountParameter<account, Account | Address, true, true> &\r\n  GetChainParameter<chain, chainOverride> &\r\n  GetTransactionRequestKzgParameter<request>\r\n\r\nexport type SendTransactionReturnType = Hash\r\n\r\nexport type SendTransactionErrorType =\r\n  | ParseAccountErrorType\r\n  | GetTransactionErrorReturnType<\r\n      | AccountNotFoundErrorType\r\n      | AccountTypeNotSupportedErrorType\r\n      | AssertCurrentChainErrorType\r\n      | AssertRequestErrorType\r\n      | GetChainIdErrorType\r\n      | PrepareTransactionRequestErrorType\r\n      | SendRawTransactionErrorType\r\n      | RecoverAuthorizationAddressErrorType\r\n      | SignTransactionErrorType\r\n      | RequestErrorType\r\n    >\r\n  | ErrorType\r\n\r\n/**\r\n * Creates, signs, and sends a new transaction to the network.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\r\n * - JSON-RPC Methods:\r\n *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\r\n *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link SendTransactionParameters}\r\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\r\n *\r\n * @example\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { sendTransaction } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * const hash = await sendTransaction(client, {\r\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\r\n *   value: 1000000000000000000n,\r\n * })\r\n *\r\n * @example\r\n * // Account Hoisting\r\n * import { createWalletClient, http } from 'viem'\r\n * import { privateKeyToAccount } from 'viem/accounts'\r\n * import { mainnet } from 'viem/chains'\r\n * import { sendTransaction } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   account: privateKeyToAccount('0x…'),\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const hash = await sendTransaction(client, {\r\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\r\n *   value: 1000000000000000000n,\r\n * })\r\n */\r\nexport async function sendTransaction<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined,\r\n  const request extends SendTransactionRequest<chain, chainOverride>,\r\n  chainOverride extends Chain | undefined = undefined,\r\n>(\r\n  client: Client<Transport, chain, account>,\r\n  parameters: SendTransactionParameters<chain, account, chainOverride, request>,\r\n): Promise<SendTransactionReturnType> {\r\n  const {\r\n    account: account_ = client.account,\r\n    chain = client.chain,\r\n    accessList,\r\n    authorizationList,\r\n    blobs,\r\n    data,\r\n    gas,\r\n    gasPrice,\r\n    maxFeePerBlobGas,\r\n    maxFeePerGas,\r\n    maxPriorityFeePerGas,\r\n    nonce,\r\n    type,\r\n    value,\r\n    ...rest\r\n  } = parameters\r\n\r\n  if (typeof account_ === 'undefined')\r\n    throw new AccountNotFoundError({\r\n      docsPath: '/docs/actions/wallet/sendTransaction',\r\n    })\r\n  const account = account_ ? parseAccount(account_) : null\r\n\r\n  try {\r\n    assertRequest(parameters as AssertRequestParameters)\r\n\r\n    const to = await (async () => {\r\n      // If `to` exists on the parameters, use that.\r\n      if (parameters.to) return parameters.to\r\n\r\n      // If `to` is null, we are sending a deployment transaction.\r\n      if (parameters.to === null) return undefined\r\n\r\n      // If no `to` exists, and we are sending a EIP-7702 transaction, use the\r\n      // address of the first authorization in the list.\r\n      if (authorizationList && authorizationList.length > 0)\r\n        return await recoverAuthorizationAddress({\r\n          authorization: authorizationList[0],\r\n        }).catch(() => {\r\n          throw new BaseError(\r\n            '`to` is required. Could not infer from `authorizationList`.',\r\n          )\r\n        })\r\n\r\n      // Otherwise, we are sending a deployment transaction.\r\n      return undefined\r\n    })()\r\n\r\n    if (account?.type === 'json-rpc' || account === null) {\r\n      let chainId: number | undefined\r\n      if (chain !== null) {\r\n        chainId = await getAction(client, getChainId, 'getChainId')({})\r\n        assertCurrentChain({\r\n          currentChainId: chainId,\r\n          chain,\r\n        })\r\n      }\r\n\r\n      const chainFormat = client.chain?.formatters?.transactionRequest?.format\r\n      const format = chainFormat || formatTransactionRequest\r\n\r\n      const request = format({\r\n        // Pick out extra data that might exist on the chain's transaction request type.\r\n        ...extract(rest, { format: chainFormat }),\r\n        accessList,\r\n        authorizationList,\r\n        blobs,\r\n        chainId,\r\n        data,\r\n        from: account?.address,\r\n        gas,\r\n        gasPrice,\r\n        maxFeePerBlobGas,\r\n        maxFeePerGas,\r\n        maxPriorityFeePerGas,\r\n        nonce,\r\n        to,\r\n        type,\r\n        value,\r\n      } as TransactionRequest)\r\n\r\n      const isWalletNamespaceSupported = supportsWalletNamespace.get(client.uid)\r\n      const method = isWalletNamespaceSupported\r\n        ? 'wallet_sendTransaction'\r\n        : 'eth_sendTransaction'\r\n\r\n      try {\r\n        return await client.request(\r\n          {\r\n            method,\r\n            params: [request],\r\n          },\r\n          { retryCount: 0 },\r\n        )\r\n      } catch (e) {\r\n        if (isWalletNamespaceSupported === false) throw e\r\n\r\n        const error = e as BaseError\r\n        // If the transport does not support the method or input, attempt to use the\r\n        // `wallet_sendTransaction` method.\r\n        if (\r\n          error.name === 'InvalidInputRpcError' ||\r\n          error.name === 'InvalidParamsRpcError' ||\r\n          error.name === 'MethodNotFoundRpcError' ||\r\n          error.name === 'MethodNotSupportedRpcError'\r\n        ) {\r\n          return await client\r\n            .request(\r\n              {\r\n                method: 'wallet_sendTransaction',\r\n                params: [request],\r\n              },\r\n              { retryCount: 0 },\r\n            )\r\n            .then((hash) => {\r\n              supportsWalletNamespace.set(client.uid, true)\r\n              return hash\r\n            })\r\n            .catch((e) => {\r\n              const walletNamespaceError = e as BaseError\r\n              if (\r\n                walletNamespaceError.name === 'MethodNotFoundRpcError' ||\r\n                walletNamespaceError.name === 'MethodNotSupportedRpcError'\r\n              ) {\r\n                supportsWalletNamespace.set(client.uid, false)\r\n                throw error\r\n              }\r\n\r\n              throw walletNamespaceError\r\n            })\r\n        }\r\n\r\n        throw error\r\n      }\r\n    }\r\n\r\n    if (account?.type === 'local') {\r\n      // Prepare the request for signing (assign appropriate fees, etc.)\r\n      const request = await getAction(\r\n        client,\r\n        prepareTransactionRequest,\r\n        'prepareTransactionRequest',\r\n      )({\r\n        account,\r\n        accessList,\r\n        authorizationList,\r\n        blobs,\r\n        chain,\r\n        data,\r\n        gas,\r\n        gasPrice,\r\n        maxFeePerBlobGas,\r\n        maxFeePerGas,\r\n        maxPriorityFeePerGas,\r\n        nonce,\r\n        nonceManager: account.nonceManager,\r\n        parameters: [...defaultParameters, 'sidecars'],\r\n        type,\r\n        value,\r\n        ...rest,\r\n        to,\r\n      } as any)\r\n\r\n      const serializer = chain?.serializers?.transaction\r\n      const serializedTransaction = (await account.signTransaction(request, {\r\n        serializer,\r\n      })) as Hash\r\n      return await getAction(\r\n        client,\r\n        sendRawTransaction,\r\n        'sendRawTransaction',\r\n      )({\r\n        serializedTransaction,\r\n      })\r\n    }\r\n\r\n    if (account?.type === 'smart')\r\n      throw new AccountTypeNotSupportedError({\r\n        metaMessages: [\r\n          'Consider using the `sendUserOperation` Action instead.',\r\n        ],\r\n        docsPath: '/docs/actions/bundler/sendUserOperation',\r\n        type: 'smart',\r\n      })\r\n\r\n    throw new AccountTypeNotSupportedError({\r\n      docsPath: '/docs/actions/wallet/sendTransaction',\r\n      type: (account as any)?.type,\r\n    })\r\n  } catch (err) {\r\n    if (err instanceof AccountTypeNotSupportedError) throw err\r\n    throw getTransactionError(err as BaseError, {\r\n      ...parameters,\r\n      account,\r\n      chain: parameters.chain || undefined,\r\n    })\r\n  }\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type {\r\n  Chain,\r\n  ExtractChainFormatterReturnType,\r\n} from '../../types/chain.js'\r\nimport type { RpcTransactionReceipt } from '../../types/rpc.js'\r\nimport type { TransactionReceipt } from '../../types/transaction.js'\r\nimport type { ExactPartial } from '../../types/utils.js'\r\nimport { hexToNumber } from '../encoding/fromHex.js'\r\n\r\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\r\nimport { formatLog } from './log.js'\r\nimport { transactionType } from './transaction.js'\r\n\r\nexport type FormattedTransactionReceipt<\r\n  chain extends Chain | undefined = undefined,\r\n> = ExtractChainFormatterReturnType<\r\n  chain,\r\n  'transactionReceipt',\r\n  TransactionReceipt\r\n>\r\n\r\nexport const receiptStatuses = {\r\n  '0x0': 'reverted',\r\n  '0x1': 'success',\r\n} as const\r\n\r\nexport type FormatTransactionReceiptErrorType = ErrorType\r\n\r\nexport function formatTransactionReceipt(\r\n  transactionReceipt: ExactPartial<RpcTransactionReceipt>,\r\n) {\r\n  const receipt = {\r\n    ...transactionReceipt,\r\n    blockNumber: transactionReceipt.blockNumber\r\n      ? BigInt(transactionReceipt.blockNumber)\r\n      : null,\r\n    contractAddress: transactionReceipt.contractAddress\r\n      ? transactionReceipt.contractAddress\r\n      : null,\r\n    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed\r\n      ? BigInt(transactionReceipt.cumulativeGasUsed)\r\n      : null,\r\n    effectiveGasPrice: transactionReceipt.effectiveGasPrice\r\n      ? BigInt(transactionReceipt.effectiveGasPrice)\r\n      : null,\r\n    gasUsed: transactionReceipt.gasUsed\r\n      ? BigInt(transactionReceipt.gasUsed)\r\n      : null,\r\n    logs: transactionReceipt.logs\r\n      ? transactionReceipt.logs.map((log) => formatLog(log))\r\n      : null,\r\n    to: transactionReceipt.to ? transactionReceipt.to : null,\r\n    transactionIndex: transactionReceipt.transactionIndex\r\n      ? hexToNumber(transactionReceipt.transactionIndex)\r\n      : null,\r\n    status: transactionReceipt.status\r\n      ? receiptStatuses[transactionReceipt.status]\r\n      : null,\r\n    type: transactionReceipt.type\r\n      ? transactionType[\r\n          transactionReceipt.type as keyof typeof transactionType\r\n        ] || transactionReceipt.type\r\n      : null,\r\n  } as TransactionReceipt\r\n\r\n  if (transactionReceipt.blobGasPrice)\r\n    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice)\r\n  if (transactionReceipt.blobGasUsed)\r\n    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed)\r\n\r\n  return receipt\r\n}\r\n\r\nexport type DefineTransactionReceiptErrorType =\r\n  | DefineFormatterErrorType\r\n  | ErrorType\r\n\r\nexport const defineTransactionReceipt = /*#__PURE__*/ defineFormatter(\r\n  'transactionReceipt',\r\n  formatTransactionReceipt,\r\n)\r\n", "import type { Address, Narrow } from 'abitype'\r\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport { BaseError } from '../../errors/base.js'\r\nimport {\r\n  AtomicityNotSupportedError,\r\n  UnsupportedNonOptionalCapabilityError,\r\n} from '../../errors/rpc.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Account, GetAccountParameter } from '../../types/account.js'\r\nimport type { Call, Calls } from '../../types/calls.js'\r\nimport type { ExtractCapabilities } from '../../types/capabilities.js'\r\nimport type { Chain, DeriveChain } from '../../types/chain.js'\r\nimport type { WalletSendCallsParameters } from '../../types/eip1193.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { Prettify } from '../../types/utils.js'\r\nimport { encodeFunctionData } from '../../utils/abi/encodeFunctionData.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport { concat } from '../../utils/data/concat.js'\r\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\r\nimport { numberToHex } from '../../utils/encoding/toHex.js'\r\nimport { getTransactionError } from '../../utils/errors/getTransactionError.js'\r\nimport { sendTransaction } from './sendTransaction.js'\r\n\r\nexport const fallbackMagicIdentifier =\r\n  '0x5792579257925792579257925792579257925792579257925792579257925792'\r\nexport const fallbackTransactionErrorMagicIdentifier = numberToHex(0, {\r\n  size: 32,\r\n})\r\n\r\nexport type SendCallsParameters<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends Account | undefined = Account | undefined,\r\n  chainOverride extends Chain | undefined = Chain | undefined,\r\n  calls extends readonly unknown[] = readonly unknown[],\r\n  //\r\n  _chain extends Chain | undefined = DeriveChain<chain, chainOverride>,\r\n> = {\r\n  chain?: chainOverride | Chain | undefined\r\n  calls: Calls<Narrow<calls>>\r\n  capabilities?: ExtractCapabilities<'sendCalls', 'Request'> | undefined\r\n  experimental_fallback?: boolean | undefined\r\n  experimental_fallbackDelay?: number | undefined\r\n  forceAtomic?: boolean | undefined\r\n  id?: string | undefined\r\n  version?: WalletSendCallsParameters[number]['version'] | undefined\r\n} & GetAccountParameter<account, Account | Address, false, true>\r\n\r\nexport type SendCallsReturnType = Prettify<{\r\n  capabilities?: ExtractCapabilities<'sendCalls', 'ReturnType'> | undefined\r\n  id: string\r\n}>\r\n\r\nexport type SendCallsErrorType = RequestErrorType | ErrorType\r\n\r\n/**\r\n * Requests the connected wallet to send a batch of calls.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/wallet/sendCalls\r\n * - JSON-RPC Methods: [`wallet_sendCalls`](https://eips.ethereum.org/EIPS/eip-5792)\r\n *\r\n * @param client - Client to use\r\n * @returns Transaction identifier. {@link SendCallsReturnType}\r\n *\r\n * @example\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { sendCalls } from 'viem/actions'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * const id = await sendCalls(client, {\r\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n *   calls: [\r\n *     {\r\n *       data: '0xdeadbeef',\r\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\r\n *     },\r\n *     {\r\n *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\r\n *       value: 69420n,\r\n *     },\r\n *   ],\r\n * })\r\n */\r\nexport async function sendCalls<\r\n  const calls extends readonly unknown[],\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined = undefined,\r\n  chainOverride extends Chain | undefined = undefined,\r\n>(\r\n  client: Client<Transport, chain, account>,\r\n  parameters: SendCallsParameters<chain, account, chainOverride, calls>,\r\n): Promise<SendCallsReturnType> {\r\n  const {\r\n    account: account_ = client.account,\r\n    capabilities,\r\n    chain = client.chain,\r\n    experimental_fallback,\r\n    experimental_fallbackDelay = 32,\r\n    forceAtomic = false,\r\n    id,\r\n    version = '2.0.0',\r\n  } = parameters\r\n\r\n  const account = account_ ? parseAccount(account_) : null\r\n\r\n  const calls = parameters.calls.map((call_: unknown) => {\r\n    const call = call_ as Call\r\n\r\n    const data = call.abi\r\n      ? encodeFunctionData({\r\n          abi: call.abi,\r\n          functionName: call.functionName,\r\n          args: call.args,\r\n        })\r\n      : call.data\r\n\r\n    return {\r\n      data,\r\n      to: call.to,\r\n      value: call.value ? numberToHex(call.value) : undefined,\r\n    }\r\n  })\r\n\r\n  try {\r\n    const response = await client.request(\r\n      {\r\n        method: 'wallet_sendCalls',\r\n        params: [\r\n          {\r\n            atomicRequired: forceAtomic,\r\n            calls,\r\n            capabilities,\r\n            chainId: numberToHex(chain!.id),\r\n            from: account?.address,\r\n            id,\r\n            version,\r\n          },\r\n        ],\r\n      },\r\n      { retryCount: 0 },\r\n    )\r\n    if (typeof response === 'string') return { id: response }\r\n    return response as never\r\n  } catch (err) {\r\n    const error = err as BaseError\r\n\r\n    // If the transport does not support EIP-5792, fall back to\r\n    // `eth_sendTransaction`.\r\n    if (\r\n      experimental_fallback &&\r\n      (error.name === 'MethodNotFoundRpcError' ||\r\n        error.name === 'MethodNotSupportedRpcError' ||\r\n        error.details\r\n          .toLowerCase()\r\n          .includes('does not exist / is not available') ||\r\n        error.details.toLowerCase().includes('missing or invalid. request()') ||\r\n        error.details\r\n          .toLowerCase()\r\n          .includes('did not match any variant of untagged enum'))\r\n    ) {\r\n      if (capabilities) {\r\n        const hasNonOptionalCapability = Object.values(capabilities).some(\r\n          (capability) => !capability.optional,\r\n        )\r\n        if (hasNonOptionalCapability) {\r\n          const message =\r\n            'non-optional `capabilities` are not supported on fallback to `eth_sendTransaction`.'\r\n          throw new UnsupportedNonOptionalCapabilityError(\r\n            new BaseError(message, {\r\n              details: message,\r\n            }),\r\n          )\r\n        }\r\n      }\r\n      if (forceAtomic && calls.length > 1) {\r\n        const message =\r\n          '`forceAtomic` is not supported on fallback to `eth_sendTransaction`.'\r\n        throw new AtomicityNotSupportedError(\r\n          new BaseError(message, {\r\n            details: message,\r\n          }),\r\n        )\r\n      }\r\n\r\n      const promises: Promise<Hex>[] = []\r\n      for (const call of calls) {\r\n        const promise = sendTransaction(client, {\r\n          account,\r\n          chain,\r\n          data: call.data,\r\n          to: call.to,\r\n          value: call.value ? hexToBigInt(call.value) : undefined,\r\n        })\r\n        promises.push(promise)\r\n\r\n        // Note: some browser wallets require a small delay between transactions\r\n        // to prevent duplicate JSON-RPC requests.\r\n        if (experimental_fallbackDelay > 0)\r\n          await new Promise((resolve) =>\r\n            setTimeout(resolve, experimental_fallbackDelay),\r\n          )\r\n      }\r\n\r\n      const results = await Promise.allSettled(promises)\r\n      if (results.every((r) => r.status === 'rejected')) throw results[0].reason\r\n\r\n      const hashes = results.map((result) => {\r\n        if (result.status === 'fulfilled') return result.value\r\n        return fallbackTransactionErrorMagicIdentifier\r\n      })\r\n      return {\r\n        id: concat([\r\n          ...hashes,\r\n          numberToHex(chain!.id, { size: 32 }),\r\n          fallbackMagicIdentifier,\r\n        ]),\r\n      }\r\n    }\r\n\r\n    throw getTransactionError(err as BaseError, {\r\n      ...parameters,\r\n      account,\r\n      chain: parameters.chain!,\r\n    })\r\n  }\r\n}\r\n", "import { LruMap } from '../lru.js'\r\n\r\n/** @internal */\r\nexport const promiseCache = /*#__PURE__*/ new LruMap<Promise<any>>(8192)\r\n\r\ntype WithDedupeOptions = {\r\n  enabled?: boolean | undefined\r\n  id?: string | undefined\r\n}\r\n\r\n/** Deduplicates in-flight promises. */\r\nexport function withDedupe<data>(\r\n  fn: () => Promise<data>,\r\n  { enabled = true, id }: WithDedupeOptions,\r\n): Promise<data> {\r\n  if (!enabled || !id) return fn()\r\n  if (promiseCache.get(id)) return promiseCache.get(id)!\r\n  const promise = fn().finally(() => promiseCache.delete(id))\r\n  promiseCache.set(id, promise)\r\n  return promise\r\n}\r\n", "function createIdStore() {\r\n  return {\r\n    current: 0,\r\n    take() {\r\n      return this.current++\r\n    },\r\n    reset() {\r\n      this.current = 0\r\n    },\r\n  }\r\n}\r\n\r\nexport const idCache = /*#__PURE__*/ createIdStore()\r\n", "/**\r\n\r\nSHA1 (RFC 3174), MD5 (RFC 1321) and RIPEMD160 (RFC 2286) legacy, weak hash functions.\r\nDon't use them in a new protocol. What \"weak\" means:\r\n\r\n- Collisions can be made with 2^18 effort in MD5, 2^60 in SHA1, 2^80 in RIPEMD160.\r\n- No practical pre-image attacks (only theoretical, 2^123.4)\r\n- HMAC seems kinda ok: https://datatracker.ietf.org/doc/html/rfc6151\r\n * @module\r\n */\r\nimport { Chi, HashMD, Maj } from './_md.ts';\r\nimport { type CHash, clean, createHasher, rotl } from './utils.ts';\r\n\r\n/** Initial SHA1 state */\r\nconst SHA1_IV = /* @__PURE__ */ Uint32Array.from([\r\n  0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\r\n]);\r\n\r\n// Reusable temporary buffer\r\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\r\n\r\n/** SHA1 legacy hash class. */\r\nexport class SHA1 extends HashMD<SHA1> {\r\n  private A = SHA1_IV[0] | 0;\r\n  private B = SHA1_IV[1] | 0;\r\n  private C = SHA1_IV[2] | 0;\r\n  private D = SHA1_IV[3] | 0;\r\n  private E = SHA1_IV[4] | 0;\r\n\r\n  constructor() {\r\n    super(64, 20, 8, false);\r\n  }\r\n  protected get(): [number, number, number, number, number] {\r\n    const { A, B, C, D, E } = this;\r\n    return [A, B, C, D, E];\r\n  }\r\n  protected set(A: number, B: number, C: number, D: number, E: number): void {\r\n    this.A = A | 0;\r\n    this.B = B | 0;\r\n    this.C = C | 0;\r\n    this.D = D | 0;\r\n    this.E = E | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    for (let i = 0; i < 16; i++, offset += 4) SHA1_W[i] = view.getUint32(offset, false);\r\n    for (let i = 16; i < 80; i++)\r\n      SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\r\n    // Compression function main loop, 80 rounds\r\n    let { A, B, C, D, E } = this;\r\n    for (let i = 0; i < 80; i++) {\r\n      let F, K;\r\n      if (i < 20) {\r\n        F = Chi(B, C, D);\r\n        K = 0x5a827999;\r\n      } else if (i < 40) {\r\n        F = B ^ C ^ D;\r\n        K = 0x6ed9eba1;\r\n      } else if (i < 60) {\r\n        F = Maj(B, C, D);\r\n        K = 0x8f1bbcdc;\r\n      } else {\r\n        F = B ^ C ^ D;\r\n        K = 0xca62c1d6;\r\n      }\r\n      const T = (rotl(A, 5) + F + E + K + SHA1_W[i]) | 0;\r\n      E = D;\r\n      D = C;\r\n      C = rotl(B, 30);\r\n      B = A;\r\n      A = T;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    A = (A + this.A) | 0;\r\n    B = (B + this.B) | 0;\r\n    C = (C + this.C) | 0;\r\n    D = (D + this.D) | 0;\r\n    E = (E + this.E) | 0;\r\n    this.set(A, B, C, D, E);\r\n  }\r\n  protected roundClean(): void {\r\n    clean(SHA1_W);\r\n  }\r\n  destroy(): void {\r\n    this.set(0, 0, 0, 0, 0);\r\n    clean(this.buffer);\r\n  }\r\n}\r\n\r\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */\r\nexport const sha1: CHash = /* @__PURE__ */ createHasher(() => new SHA1());\r\n\r\n/** Per-round constants */\r\nconst p32 = /* @__PURE__ */ Math.pow(2, 32);\r\nconst K = /* @__PURE__ */ Array.from({ length: 64 }, (_, i) =>\r\n  Math.floor(p32 * Math.abs(Math.sin(i + 1)))\r\n);\r\n\r\n/** md5 initial state: same as sha1, but 4 u32 instead of 5. */\r\nconst MD5_IV = /* @__PURE__ */ SHA1_IV.slice(0, 4);\r\n\r\n// Reusable temporary buffer\r\nconst MD5_W = /* @__PURE__ */ new Uint32Array(16);\r\n/** MD5 legacy hash class. */\r\nexport class MD5 extends HashMD<MD5> {\r\n  private A = MD5_IV[0] | 0;\r\n  private B = MD5_IV[1] | 0;\r\n  private C = MD5_IV[2] | 0;\r\n  private D = MD5_IV[3] | 0;\r\n\r\n  constructor() {\r\n    super(64, 16, 8, true);\r\n  }\r\n  protected get(): [number, number, number, number] {\r\n    const { A, B, C, D } = this;\r\n    return [A, B, C, D];\r\n  }\r\n  protected set(A: number, B: number, C: number, D: number): void {\r\n    this.A = A | 0;\r\n    this.B = B | 0;\r\n    this.C = C | 0;\r\n    this.D = D | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    for (let i = 0; i < 16; i++, offset += 4) MD5_W[i] = view.getUint32(offset, true);\r\n    // Compression function main loop, 64 rounds\r\n    let { A, B, C, D } = this;\r\n    for (let i = 0; i < 64; i++) {\r\n      let F, g, s;\r\n      if (i < 16) {\r\n        F = Chi(B, C, D);\r\n        g = i;\r\n        s = [7, 12, 17, 22];\r\n      } else if (i < 32) {\r\n        F = Chi(D, B, C);\r\n        g = (5 * i + 1) % 16;\r\n        s = [5, 9, 14, 20];\r\n      } else if (i < 48) {\r\n        F = B ^ C ^ D;\r\n        g = (3 * i + 5) % 16;\r\n        s = [4, 11, 16, 23];\r\n      } else {\r\n        F = C ^ (B | ~D);\r\n        g = (7 * i) % 16;\r\n        s = [6, 10, 15, 21];\r\n      }\r\n      F = F + A + K[i] + MD5_W[g];\r\n      A = D;\r\n      D = C;\r\n      C = B;\r\n      B = B + rotl(F, s[i % 4]);\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    A = (A + this.A) | 0;\r\n    B = (B + this.B) | 0;\r\n    C = (C + this.C) | 0;\r\n    D = (D + this.D) | 0;\r\n    this.set(A, B, C, D);\r\n  }\r\n  protected roundClean(): void {\r\n    clean(MD5_W);\r\n  }\r\n  destroy(): void {\r\n    this.set(0, 0, 0, 0);\r\n    clean(this.buffer);\r\n  }\r\n}\r\n\r\n/**\r\n * MD5 (RFC 1321) legacy hash function. It was cryptographically broken.\r\n * MD5 architecture is similar to SHA1, with some differences:\r\n * - Reduced output length: 16 bytes (128 bit) instead of 20\r\n * - 64 rounds, instead of 80\r\n * - Little-endian: could be faster, but will require more code\r\n * - Non-linear index selection: huge speed-up for unroll\r\n * - Per round constants: more memory accesses, additional speed-up for unroll\r\n */\r\nexport const md5: CHash = /* @__PURE__ */ createHasher(() => new MD5());\r\n\r\n// RIPEMD-160\r\n\r\nconst Rho160 = /* @__PURE__ */ Uint8Array.from([\r\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\r\n]);\r\nconst Id160 = /* @__PURE__ */ (() => Uint8Array.from(new Array(16).fill(0).map((_, i) => i)))();\r\nconst Pi160 = /* @__PURE__ */ (() => Id160.map((i) => (9 * i + 5) % 16))();\r\nconst idxLR = /* @__PURE__ */ (() => {\r\n  const L = [Id160];\r\n  const R = [Pi160];\r\n  const res = [L, R];\r\n  for (let i = 0; i < 4; i++) for (let j of res) j.push(j[i].map((k) => Rho160[k]));\r\n  return res;\r\n})();\r\nconst idxL = /* @__PURE__ */ (() => idxLR[0])();\r\nconst idxR = /* @__PURE__ */ (() => idxLR[1])();\r\n// const [idxL, idxR] = idxLR;\r\n\r\nconst shifts160 = /* @__PURE__ */ [\r\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\r\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\r\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\r\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\r\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\r\n].map((i) => Uint8Array.from(i));\r\nconst shiftsL160 = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts160[i][j]));\r\nconst shiftsR160 = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts160[i][j]));\r\nconst Kl160 = /* @__PURE__ */ Uint32Array.from([\r\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\r\n]);\r\nconst Kr160 = /* @__PURE__ */ Uint32Array.from([\r\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\r\n]);\r\n// It's called f() in spec.\r\nfunction ripemd_f(group: number, x: number, y: number, z: number): number {\r\n  if (group === 0) return x ^ y ^ z;\r\n  if (group === 1) return (x & y) | (~x & z);\r\n  if (group === 2) return (x | ~y) ^ z;\r\n  if (group === 3) return (x & z) | (y & ~z);\r\n  return x ^ (y | ~z);\r\n}\r\n// Reusable temporary buffer\r\nconst BUF_160 = /* @__PURE__ */ new Uint32Array(16);\r\nexport class RIPEMD160 extends HashMD<RIPEMD160> {\r\n  private h0 = 0x67452301 | 0;\r\n  private h1 = 0xefcdab89 | 0;\r\n  private h2 = 0x98badcfe | 0;\r\n  private h3 = 0x10325476 | 0;\r\n  private h4 = 0xc3d2e1f0 | 0;\r\n\r\n  constructor() {\r\n    super(64, 20, 8, true);\r\n  }\r\n  protected get(): [number, number, number, number, number] {\r\n    const { h0, h1, h2, h3, h4 } = this;\r\n    return [h0, h1, h2, h3, h4];\r\n  }\r\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number): void {\r\n    this.h0 = h0 | 0;\r\n    this.h1 = h1 | 0;\r\n    this.h2 = h2 | 0;\r\n    this.h3 = h3 | 0;\r\n    this.h4 = h4 | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    for (let i = 0; i < 16; i++, offset += 4) BUF_160[i] = view.getUint32(offset, true);\r\n    // prettier-ignore\r\n    let al = this.h0 | 0, ar = al,\r\n        bl = this.h1 | 0, br = bl,\r\n        cl = this.h2 | 0, cr = cl,\r\n        dl = this.h3 | 0, dr = dl,\r\n        el = this.h4 | 0, er = el;\r\n\r\n    // Instead of iterating 0 to 80, we split it into 5 groups\r\n    // And use the groups in constants, functions, etc. Much simpler\r\n    for (let group = 0; group < 5; group++) {\r\n      const rGroup = 4 - group;\r\n      const hbl = Kl160[group], hbr = Kr160[group]; // prettier-ignore\r\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\r\n      const sl = shiftsL160[group], sr = shiftsR160[group]; // prettier-ignore\r\n      for (let i = 0; i < 16; i++) {\r\n        const tl = (rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el) | 0;\r\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\r\n      }\r\n      // 2 loops are 10% faster\r\n      for (let i = 0; i < 16; i++) {\r\n        const tr = (rotl(ar + ripemd_f(rGroup, br, cr, dr) + BUF_160[rr[i]] + hbr, sr[i]) + er) | 0;\r\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\r\n      }\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    this.set(\r\n      (this.h1 + cl + dr) | 0,\r\n      (this.h2 + dl + er) | 0,\r\n      (this.h3 + el + ar) | 0,\r\n      (this.h4 + al + br) | 0,\r\n      (this.h0 + bl + cr) | 0\r\n    );\r\n  }\r\n  protected roundClean(): void {\r\n    clean(BUF_160);\r\n  }\r\n  destroy(): void {\r\n    this.destroyed = true;\r\n    clean(this.buffer);\r\n    this.set(0, 0, 0, 0, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * RIPEMD-160 - a legacy hash function from 1990s.\r\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\r\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\r\n */\r\nexport const ripemd160: CHash = /* @__PURE__ */ createHasher(() => new RIPEMD160());\r\n", "import type { Address } from 'abitype'\r\n\r\nimport { getTransactionCount } from '../actions/public/getTransactionCount.js'\r\nimport type { Client } from '../clients/createClient.js'\r\nimport type { MaybePromise } from '../types/utils.js'\r\nimport { LruMap } from './lru.js'\r\n\r\nexport type CreateNonceManagerParameters = {\r\n  source: NonceManagerSource\r\n}\r\n\r\ntype FunctionParameters = {\r\n  address: Address\r\n  chainId: number\r\n}\r\n\r\nexport type NonceManager = {\r\n  /** Get and increment a nonce. */\r\n  consume: (\r\n    parameters: FunctionParameters & { client: Client },\r\n  ) => Promise<number>\r\n  /** Increment a nonce. */\r\n  increment: (chainId: FunctionParameters) => void\r\n  /** Get a nonce. */\r\n  get: (chainId: FunctionParameters & { client: Client }) => Promise<number>\r\n  /** Reset a nonce. */\r\n  reset: (chainId: FunctionParameters) => void\r\n}\r\n\r\n/**\r\n * Creates a nonce manager for auto-incrementing transaction nonces.\r\n *\r\n * - Docs: https://viem.sh/docs/accounts/createNonceManager\r\n *\r\n * @example\r\n * ```ts\r\n * const nonceManager = createNonceManager({\r\n *   source: jsonRpc(),\r\n * })\r\n * ```\r\n */\r\nexport function createNonceManager(\r\n  parameters: CreateNonceManagerParameters,\r\n): NonceManager {\r\n  const { source } = parameters\r\n\r\n  const deltaMap = new Map()\r\n  const nonceMap = new LruMap<number>(8192)\r\n  const promiseMap = new Map<string, Promise<number>>()\r\n\r\n  const getKey = ({ address, chainId }: FunctionParameters) =>\r\n    `${address}.${chainId}`\r\n\r\n  return {\r\n    async consume({ address, chainId, client }) {\r\n      const key = getKey({ address, chainId })\r\n      const promise = this.get({ address, chainId, client })\r\n\r\n      this.increment({ address, chainId })\r\n      const nonce = await promise\r\n\r\n      await source.set({ address, chainId }, nonce)\r\n      nonceMap.set(key, nonce)\r\n\r\n      return nonce\r\n    },\r\n    async increment({ address, chainId }) {\r\n      const key = getKey({ address, chainId })\r\n      const delta = deltaMap.get(key) ?? 0\r\n      deltaMap.set(key, delta + 1)\r\n    },\r\n    async get({ address, chainId, client }) {\r\n      const key = getKey({ address, chainId })\r\n\r\n      let promise = promiseMap.get(key)\r\n      if (!promise) {\r\n        promise = (async () => {\r\n          try {\r\n            const nonce = await source.get({ address, chainId, client })\r\n            const previousNonce = nonceMap.get(key) ?? 0\r\n            if (previousNonce > 0 && nonce <= previousNonce)\r\n              return previousNonce + 1\r\n            nonceMap.delete(key)\r\n            return nonce\r\n          } finally {\r\n            this.reset({ address, chainId })\r\n          }\r\n        })()\r\n        promiseMap.set(key, promise)\r\n      }\r\n\r\n      const delta = deltaMap.get(key) ?? 0\r\n      return delta + (await promise)\r\n    },\r\n    reset({ address, chainId }) {\r\n      const key = getKey({ address, chainId })\r\n      deltaMap.delete(key)\r\n      promiseMap.delete(key)\r\n    },\r\n  }\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n// Sources\r\n\r\nexport type NonceManagerSource = {\r\n  /** Get a nonce. */\r\n  get(parameters: FunctionParameters & { client: Client }): MaybePromise<number>\r\n  /** Set a nonce. */\r\n  set(parameters: FunctionParameters, nonce: number): MaybePromise<void>\r\n}\r\n\r\n/** JSON-RPC source for a nonce manager. */\r\nexport function jsonRpc(): NonceManagerSource {\r\n  return {\r\n    async get(parameters) {\r\n      const { address, client } = parameters\r\n      return getTransactionCount(client, {\r\n        address,\r\n        blockTag: 'pending',\r\n      })\r\n    },\r\n    set() {},\r\n  }\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n// Default\r\n\r\n/** Default Nonce Manager with a JSON-RPC source. */\r\nexport const nonceManager = /*#__PURE__*/ createNonceManager({\r\n  source: jsonRpc(),\r\n})\r\n", "import { ripemd160 as noble_ripemd160 } from '@noble/hashes/ripemd160'\r\nimport { keccak_256 as noble_keccak256 } from '@noble/hashes/sha3'\r\nimport { sha256 as noble_sha256 } from '@noble/hashes/sha256'\r\nimport * as Bytes from './Bytes.js'\r\nimport type * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\n\r\n/**\r\n * Calculates the [Keccak256](https://en.wikipedia.org/wiki/SHA-3) hash of a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\r\n *\r\n * This function is a re-export of `keccak_256` from [`@noble/hashes`](https://github.com/paulmillr/noble-hashes), an audited & minimal JS hashing library.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hash } from 'ox'\r\n *\r\n * Hash.keccak256('0xdeadbeef')\r\n * // @log: '0xd4fd4e189132273036449fc9e11198c739161b4c0116a9a2dccdfa1c492006f1'\r\n * ```\r\n *\r\n * @example\r\n * ### Calculate Hash of a String\r\n *\r\n * ```ts twoslash\r\n * import { Hash, Hex } from 'ox'\r\n *\r\n * Hash.keccak256(Hex.fromString('hello world'))\r\n * // @log: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0'\r\n * ```\r\n *\r\n * @example\r\n * ### Configure Return Type\r\n *\r\n * ```ts twoslash\r\n * import { Hash } from 'ox'\r\n *\r\n * Hash.keccak256('0xdeadbeef', { as: 'Bytes' })\r\n * // @log: Uint8Array [...]\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\r\n * @param options - Options.\r\n * @returns Keccak256 hash.\r\n */\r\nexport function keccak256<\r\n  value extends Hex.Hex | Bytes.Bytes,\r\n  as extends 'Hex' | 'Bytes' =\r\n    | (value extends Hex.Hex ? 'Hex' : never)\r\n    | (value extends Bytes.Bytes ? 'Bytes' : never),\r\n>(\r\n  value: value | Hex.Hex | Bytes.Bytes,\r\n  options: keccak256.Options<as> = {},\r\n): keccak256.ReturnType<as> {\r\n  const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options\r\n  const bytes = noble_keccak256(Bytes.from(value))\r\n  if (as === 'Bytes') return bytes as never\r\n  return Hex.fromBytes(bytes) as never\r\n}\r\n\r\nexport declare namespace keccak256 {\r\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> = {\r\n    /** The return type. @default 'Hex' */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\r\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\r\n    | (as extends 'Hex' ? Hex.Hex : never)\r\n\r\n  type ErrorType =\r\n    | Bytes.from.ErrorType\r\n    | Hex.fromBytes.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Calculates the [Ripemd160](https://en.wikipedia.org/wiki/RIPEMD) hash of a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\r\n *\r\n * This function is a re-export of `ripemd160` from [`@noble/hashes`](https://github.com/paulmillr/noble-hashes), an audited & minimal JS hashing library.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hash } from 'ox'\r\n *\r\n * Hash.ripemd160('0xdeadbeef')\r\n * // '0x226821c2f5423e11fe9af68bd285c249db2e4b5a'\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\r\n * @param options - Options.\r\n * @returns Ripemd160 hash.\r\n */\r\nexport function ripemd160<\r\n  value extends Hex.Hex | Bytes.Bytes,\r\n  as extends 'Hex' | 'Bytes' =\r\n    | (value extends Hex.Hex ? 'Hex' : never)\r\n    | (value extends Bytes.Bytes ? 'Bytes' : never),\r\n>(\r\n  value: value | Hex.Hex | Bytes.Bytes,\r\n  options: ripemd160.Options<as> = {},\r\n): ripemd160.ReturnType<as> {\r\n  const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options\r\n  const bytes = noble_ripemd160(Bytes.from(value))\r\n  if (as === 'Bytes') return bytes as never\r\n  return Hex.fromBytes(bytes) as never\r\n}\r\n\r\nexport declare namespace ripemd160 {\r\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> = {\r\n    /** The return type. @default 'Hex' */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\r\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\r\n    | (as extends 'Hex' ? Hex.Hex : never)\r\n\r\n  type ErrorType =\r\n    | Bytes.from.ErrorType\r\n    | Hex.fromBytes.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Calculates the [Sha256](https://en.wikipedia.org/wiki/SHA-256) hash of a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\r\n *\r\n * This function is a re-export of `sha256` from [`@noble/hashes`](https://github.com/paulmillr/noble-hashes), an audited & minimal JS hashing library.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hash } from 'ox'\r\n *\r\n * Hash.sha256('0xdeadbeef')\r\n * // '0x5f78c33274e43fa9de5659265c1d917e25c03722dcb0b8d27db8d5feaa813953'\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value.\r\n * @param options - Options.\r\n * @returns Sha256 hash.\r\n */\r\nexport function sha256<\r\n  value extends Hex.Hex | Bytes.Bytes,\r\n  as extends 'Hex' | 'Bytes' =\r\n    | (value extends Hex.Hex ? 'Hex' : never)\r\n    | (value extends Bytes.Bytes ? 'Bytes' : never),\r\n>(\r\n  value: value | Hex.Hex | Bytes.Bytes,\r\n  options: sha256.Options<as> = {},\r\n): sha256.ReturnType<as> {\r\n  const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options\r\n  const bytes = noble_sha256(Bytes.from(value))\r\n  if (as === 'Bytes') return bytes as never\r\n  return Hex.fromBytes(bytes) as never\r\n}\r\n\r\nexport declare namespace sha256 {\r\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\r\n    /** The return type. @default 'Hex' */\r\n    as?: as | 'Hex' | 'Bytes' | undefined\r\n  }\r\n\r\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex'> =\r\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\r\n    | (as extends 'Hex' ? Hex.Hex : never)\r\n\r\n  type ErrorType =\r\n    | Bytes.from.ErrorType\r\n    | Hex.fromBytes.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Checks if a string is a valid hash value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hash } from 'ox'\r\n *\r\n * Hash.validate('0x')\r\n * // @log: false\r\n *\r\n * Hash.validate('0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0')\r\n * // @log: true\r\n * ```\r\n *\r\n * @param value - Value to check.\r\n * @returns Whether the value is a valid hash.\r\n */\r\nexport function validate(value: string): value is Hex.Hex {\r\n  return Hex.validate(value) && Hex.size(value) === 32\r\n}\r\n\r\nexport declare namespace validate {\r\n  type ErrorType =\r\n    | Hex.validate.ErrorType\r\n    | Hex.size.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n", "/**\r\n * @internal\r\n *\r\n * Map with a LRU (Least recently used) policy.\r\n * @see https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\r\n */\r\nexport class LruMap<value = unknown> extends Map<string, value> {\r\n  maxSize: number\r\n\r\n  constructor(size: number) {\r\n    super()\r\n    this.maxSize = size\r\n  }\r\n\r\n  override get(key: string) {\r\n    const value = super.get(key)\r\n\r\n    if (super.has(key) && value !== undefined) {\r\n      this.delete(key)\r\n      super.set(key, value)\r\n    }\r\n\r\n    return value\r\n  }\r\n\r\n  override set(key: string, value: value) {\r\n    super.set(key, value)\r\n    if (this.maxSize && this.size > this.maxSize) {\r\n      const firstKey = this.keys().next().value\r\n      if (firstKey) this.delete(firstKey)\r\n    }\r\n    return this\r\n  }\r\n}\r\n", "import type * as Address from './Address.js'\r\nimport { LruMap } from './internal/lru.js'\r\n\r\nconst caches = {\r\n  checksum: /*#__PURE__*/ new LruMap<Address.Address>(8192),\r\n}\r\n\r\nexport const checksum = caches.checksum\r\n\r\n/**\r\n * Clears all global caches.\r\n *\r\n * @example\r\n * ```ts\r\n * import { Caches } from 'ox'\r\n * Caches.clear()\r\n * ```\r\n */\r\nexport function clear() {\r\n  for (const cache of Object.values(caches)) cache.clear()\r\n}\r\n", "import type { Address as abitype_Address } from 'abitype'\r\nimport * as Bytes from './Bytes.js'\r\nimport * as Caches from './Caches.js'\r\nimport * as Errors from './Errors.js'\r\nimport * as Hash from './Hash.js'\r\nimport * as PublicKey from './PublicKey.js'\r\n\r\nconst addressRegex = /*#__PURE__*/ /^0x[a-fA-F0-9]{40}$/\r\n\r\n/** Root type for Address. */\r\nexport type Address = abitype_Address\r\n\r\n/**\r\n * Asserts that the given value is a valid {@link ox#Address.Address}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.assert('0xA0Cf798816D4b9b9866b5330EEa46a18382f251e')\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.assert('0xdeadbeef')\r\n * // @error: InvalidAddressError: Address \"0xdeadbeef\" is invalid.\r\n * ```\r\n *\r\n * @param value - Value to assert if it is a valid address.\r\n * @param options - Assertion options.\r\n */\r\nexport function assert(\r\n  value: string,\r\n  options: assert.Options = {},\r\n): asserts value is Address {\r\n  const { strict = true } = options\r\n\r\n  if (!addressRegex.test(value))\r\n    throw new InvalidAddressError({\r\n      address: value,\r\n      cause: new InvalidInputError(),\r\n    })\r\n\r\n  if (strict) {\r\n    if (value.toLowerCase() === value) return\r\n    if (checksum(value as Address) !== value)\r\n      throw new InvalidAddressError({\r\n        address: value,\r\n        cause: new InvalidChecksumError(),\r\n      })\r\n  }\r\n}\r\n\r\nexport declare namespace assert {\r\n  type Options = {\r\n    /**\r\n     * Enables strict mode. Whether or not to compare the address against its checksum.\r\n     *\r\n     * @default true\r\n     */\r\n    strict?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType = InvalidAddressError | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Computes the checksum address for the given {@link ox#Address.Address}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.checksum('0xa0cf798816d4b9b9866b5330eea46a18382f251e')\r\n * // @log: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'\r\n * ```\r\n *\r\n * @param address - The address to compute the checksum for.\r\n * @returns The checksummed address.\r\n */\r\nexport function checksum(address: string): Address {\r\n  if (Caches.checksum.has(address)) return Caches.checksum.get(address)!\r\n\r\n  assert(address, { strict: false })\r\n\r\n  const hexAddress = address.substring(2).toLowerCase()\r\n  const hash = Hash.keccak256(Bytes.fromString(hexAddress), { as: 'Bytes' })\r\n\r\n  const characters = hexAddress.split('')\r\n  for (let i = 0; i < 40; i += 2) {\r\n    if (hash[i >> 1]! >> 4 >= 8 && characters[i]) {\r\n      characters[i] = characters[i]!.toUpperCase()\r\n    }\r\n    if ((hash[i >> 1]! & 0x0f) >= 8 && characters[i + 1]) {\r\n      characters[i + 1] = characters[i + 1]!.toUpperCase()\r\n    }\r\n  }\r\n\r\n  const result = `0x${characters.join('')}` as const\r\n  Caches.checksum.set(address, result)\r\n  return result\r\n}\r\n\r\nexport declare namespace checksum {\r\n  type ErrorType =\r\n    | assert.ErrorType\r\n    | Hash.keccak256.ErrorType\r\n    | Bytes.fromString.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a stringified address to a typed (checksummed) {@link ox#Address.Address}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.from('0xa0cf798816d4b9b9866b5330eea46a18382f251e')\r\n * // @log: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.from('0xa0cf798816d4b9b9866b5330eea46a18382f251e', {\r\n *   checksum: false\r\n * })\r\n * // @log: '0xa0cf798816d4b9b9866b5330eea46a18382f251e'\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.from('hello')\r\n * // @error: InvalidAddressError: Address \"0xa\" is invalid.\r\n * ```\r\n *\r\n * @param address - An address string to convert to a typed Address.\r\n * @param options - Conversion options.\r\n * @returns The typed Address.\r\n */\r\nexport function from(address: string, options: from.Options = {}): Address {\r\n  const { checksum: checksumVal = false } = options\r\n  assert(address)\r\n  if (checksumVal) return checksum(address)\r\n  return address as Address\r\n}\r\n\r\nexport declare namespace from {\r\n  type Options = {\r\n    /**\r\n     * Whether to checksum the address.\r\n     *\r\n     * @default false\r\n     */\r\n    checksum?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | assert.ErrorType\r\n    | checksum.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts an ECDSA public key to an {@link ox#Address.Address}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address, PublicKey } from 'ox'\r\n *\r\n * const publicKey = PublicKey.from(\r\n *   '0x048318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5',\r\n * )\r\n * const address = Address.fromPublicKey(publicKey)\r\n * // @log: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'\r\n * ```\r\n *\r\n * @param publicKey - The ECDSA public key to convert to an {@link ox#Address.Address}.\r\n * @param options - Conversion options.\r\n * @returns The {@link ox#Address.Address} corresponding to the public key.\r\n */\r\nexport function fromPublicKey(\r\n  publicKey: PublicKey.PublicKey,\r\n  options: fromPublicKey.Options = {},\r\n): Address {\r\n  const address = Hash.keccak256(\r\n    `0x${PublicKey.toHex(publicKey).slice(4)}`,\r\n  ).substring(26)\r\n  return from(`0x${address}`, options)\r\n}\r\n\r\nexport declare namespace fromPublicKey {\r\n  type Options = {\r\n    /**\r\n     * Whether to checksum the address.\r\n     *\r\n     * @default false\r\n     */\r\n    checksum?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | Hash.keccak256.ErrorType\r\n    | PublicKey.toHex.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Checks if two {@link ox#Address.Address} are equal.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.isEqual(\r\n *   '0xa0cf798816d4b9b9866b5330eea46a18382f251e',\r\n *   '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'\r\n * )\r\n * // @log: true\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.isEqual(\r\n *   '0xa0cf798816d4b9b9866b5330eea46a18382f251e',\r\n *   '0xA0Cf798816D4b9b9866b5330EEa46a18382f251f'\r\n * )\r\n * // @log: false\r\n * ```\r\n *\r\n * @param addressA - The first address to compare.\r\n * @param addressB - The second address to compare.\r\n * @returns Whether the addresses are equal.\r\n */\r\nexport function isEqual(addressA: Address, addressB: Address): boolean {\r\n  assert(addressA, { strict: false })\r\n  assert(addressB, { strict: false })\r\n  return addressA.toLowerCase() === addressB.toLowerCase()\r\n}\r\n\r\nexport declare namespace isEqual {\r\n  type ErrorType = assert.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Checks if the given address is a valid {@link ox#Address.Address}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.validate('0xA0Cf798816D4b9b9866b5330EEa46a18382f251e')\r\n * // @log: true\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.validate('0xdeadbeef')\r\n * // @log: false\r\n * ```\r\n *\r\n * @param address - Value to check if it is a valid address.\r\n * @param options - Check options.\r\n * @returns Whether the address is a valid address.\r\n */\r\nexport function validate(\r\n  address: string,\r\n  options: validate.Options = {},\r\n): address is Address {\r\n  const { strict = true } = options ?? {}\r\n  try {\r\n    assert(address, { strict })\r\n    return true\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nexport declare namespace validate {\r\n  type Options = {\r\n    /**\r\n     * Enables strict mode. Whether or not to compare the address against its checksum.\r\n     *\r\n     * @default true\r\n     */\r\n    strict?: boolean | undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when an address is invalid.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Address } from 'ox'\r\n *\r\n * Address.from('0x123')\r\n * // @error: Address.InvalidAddressError: Address `0x123` is invalid.\r\n * ```\r\n */\r\nexport class InvalidAddressError<\r\n  cause extends InvalidInputError | InvalidChecksumError =\r\n    | InvalidInputError\r\n    | InvalidChecksumError,\r\n> extends Errors.BaseError<cause> {\r\n  override readonly name = 'Address.InvalidAddressError'\r\n\r\n  constructor({ address, cause }: { address: string; cause: cause }) {\r\n    super(`Address \"${address}\" is invalid.`, {\r\n      cause,\r\n    })\r\n  }\r\n}\r\n\r\n/** Thrown when an address is not a 20 byte (40 hexadecimal character) value. */\r\nexport class InvalidInputError extends Errors.BaseError {\r\n  override readonly name = 'Address.InvalidInputError'\r\n\r\n  constructor() {\r\n    super('Address is not a 20 byte (40 hexadecimal character) value.')\r\n  }\r\n}\r\n\r\n/** Thrown when an address does not match its checksum counterpart. */\r\nexport class InvalidChecksumError extends Errors.BaseError {\r\n  override readonly name = 'Address.InvalidChecksumError'\r\n\r\n  constructor() {\r\n    super('Address does not match its checksum counterpart.')\r\n  }\r\n}\r\n", "export const arrayRegex = /^(.*)\\[([0-9]*)\\]$/\r\n\r\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\r\n// https://regexr.com/6va55\r\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/\r\n\r\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\r\n// https://regexr.com/6v8hp\r\nexport const integerRegex =\r\n  /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/\r\n\r\nexport const maxInt8 = 2n ** (8n - 1n) - 1n\r\nexport const maxInt16 = 2n ** (16n - 1n) - 1n\r\nexport const maxInt24 = 2n ** (24n - 1n) - 1n\r\nexport const maxInt32 = 2n ** (32n - 1n) - 1n\r\nexport const maxInt40 = 2n ** (40n - 1n) - 1n\r\nexport const maxInt48 = 2n ** (48n - 1n) - 1n\r\nexport const maxInt56 = 2n ** (56n - 1n) - 1n\r\nexport const maxInt64 = 2n ** (64n - 1n) - 1n\r\nexport const maxInt72 = 2n ** (72n - 1n) - 1n\r\nexport const maxInt80 = 2n ** (80n - 1n) - 1n\r\nexport const maxInt88 = 2n ** (88n - 1n) - 1n\r\nexport const maxInt96 = 2n ** (96n - 1n) - 1n\r\nexport const maxInt104 = 2n ** (104n - 1n) - 1n\r\nexport const maxInt112 = 2n ** (112n - 1n) - 1n\r\nexport const maxInt120 = 2n ** (120n - 1n) - 1n\r\nexport const maxInt128 = 2n ** (128n - 1n) - 1n\r\nexport const maxInt136 = 2n ** (136n - 1n) - 1n\r\nexport const maxInt144 = 2n ** (144n - 1n) - 1n\r\nexport const maxInt152 = 2n ** (152n - 1n) - 1n\r\nexport const maxInt160 = 2n ** (160n - 1n) - 1n\r\nexport const maxInt168 = 2n ** (168n - 1n) - 1n\r\nexport const maxInt176 = 2n ** (176n - 1n) - 1n\r\nexport const maxInt184 = 2n ** (184n - 1n) - 1n\r\nexport const maxInt192 = 2n ** (192n - 1n) - 1n\r\nexport const maxInt200 = 2n ** (200n - 1n) - 1n\r\nexport const maxInt208 = 2n ** (208n - 1n) - 1n\r\nexport const maxInt216 = 2n ** (216n - 1n) - 1n\r\nexport const maxInt224 = 2n ** (224n - 1n) - 1n\r\nexport const maxInt232 = 2n ** (232n - 1n) - 1n\r\nexport const maxInt240 = 2n ** (240n - 1n) - 1n\r\nexport const maxInt248 = 2n ** (248n - 1n) - 1n\r\nexport const maxInt256 = 2n ** (256n - 1n) - 1n\r\n\r\nexport const minInt8 = -(2n ** (8n - 1n))\r\nexport const minInt16 = -(2n ** (16n - 1n))\r\nexport const minInt24 = -(2n ** (24n - 1n))\r\nexport const minInt32 = -(2n ** (32n - 1n))\r\nexport const minInt40 = -(2n ** (40n - 1n))\r\nexport const minInt48 = -(2n ** (48n - 1n))\r\nexport const minInt56 = -(2n ** (56n - 1n))\r\nexport const minInt64 = -(2n ** (64n - 1n))\r\nexport const minInt72 = -(2n ** (72n - 1n))\r\nexport const minInt80 = -(2n ** (80n - 1n))\r\nexport const minInt88 = -(2n ** (88n - 1n))\r\nexport const minInt96 = -(2n ** (96n - 1n))\r\nexport const minInt104 = -(2n ** (104n - 1n))\r\nexport const minInt112 = -(2n ** (112n - 1n))\r\nexport const minInt120 = -(2n ** (120n - 1n))\r\nexport const minInt128 = -(2n ** (128n - 1n))\r\nexport const minInt136 = -(2n ** (136n - 1n))\r\nexport const minInt144 = -(2n ** (144n - 1n))\r\nexport const minInt152 = -(2n ** (152n - 1n))\r\nexport const minInt160 = -(2n ** (160n - 1n))\r\nexport const minInt168 = -(2n ** (168n - 1n))\r\nexport const minInt176 = -(2n ** (176n - 1n))\r\nexport const minInt184 = -(2n ** (184n - 1n))\r\nexport const minInt192 = -(2n ** (192n - 1n))\r\nexport const minInt200 = -(2n ** (200n - 1n))\r\nexport const minInt208 = -(2n ** (208n - 1n))\r\nexport const minInt216 = -(2n ** (216n - 1n))\r\nexport const minInt224 = -(2n ** (224n - 1n))\r\nexport const minInt232 = -(2n ** (232n - 1n))\r\nexport const minInt240 = -(2n ** (240n - 1n))\r\nexport const minInt248 = -(2n ** (248n - 1n))\r\nexport const minInt256 = -(2n ** (256n - 1n))\r\n\r\nexport const maxUint8 = 2n ** 8n - 1n\r\nexport const maxUint16 = 2n ** 16n - 1n\r\nexport const maxUint24 = 2n ** 24n - 1n\r\nexport const maxUint32 = 2n ** 32n - 1n\r\nexport const maxUint40 = 2n ** 40n - 1n\r\nexport const maxUint48 = 2n ** 48n - 1n\r\nexport const maxUint56 = 2n ** 56n - 1n\r\nexport const maxUint64 = 2n ** 64n - 1n\r\nexport const maxUint72 = 2n ** 72n - 1n\r\nexport const maxUint80 = 2n ** 80n - 1n\r\nexport const maxUint88 = 2n ** 88n - 1n\r\nexport const maxUint96 = 2n ** 96n - 1n\r\nexport const maxUint104 = 2n ** 104n - 1n\r\nexport const maxUint112 = 2n ** 112n - 1n\r\nexport const maxUint120 = 2n ** 120n - 1n\r\nexport const maxUint128 = 2n ** 128n - 1n\r\nexport const maxUint136 = 2n ** 136n - 1n\r\nexport const maxUint144 = 2n ** 144n - 1n\r\nexport const maxUint152 = 2n ** 152n - 1n\r\nexport const maxUint160 = 2n ** 160n - 1n\r\nexport const maxUint168 = 2n ** 168n - 1n\r\nexport const maxUint176 = 2n ** 176n - 1n\r\nexport const maxUint184 = 2n ** 184n - 1n\r\nexport const maxUint192 = 2n ** 192n - 1n\r\nexport const maxUint200 = 2n ** 200n - 1n\r\nexport const maxUint208 = 2n ** 208n - 1n\r\nexport const maxUint216 = 2n ** 216n - 1n\r\nexport const maxUint224 = 2n ** 224n - 1n\r\nexport const maxUint232 = 2n ** 232n - 1n\r\nexport const maxUint240 = 2n ** 240n - 1n\r\nexport const maxUint248 = 2n ** 248n - 1n\r\nexport const maxUint256 = 2n ** 256n - 1n\r\n", "import type { Bytes } from '../Bytes.js'\r\nimport * as Errors from '../Errors.js'\r\n\r\n/** @internal */\r\nexport type Cursor = {\r\n  bytes: Bytes\r\n  dataView: DataView\r\n  position: number\r\n  positionReadCount: Map<number, number>\r\n  recursiveReadCount: number\r\n  recursiveReadLimit: number\r\n  remaining: number\r\n  assertReadLimit(position?: number): void\r\n  assertPosition(position: number): void\r\n  decrementPosition(offset: number): void\r\n  getReadCount(position?: number): number\r\n  incrementPosition(offset: number): void\r\n  inspectByte(position?: number): Bytes[number]\r\n  inspectBytes(length: number, position?: number): Bytes\r\n  inspectUint8(position?: number): number\r\n  inspectUint16(position?: number): number\r\n  inspectUint24(position?: number): number\r\n  inspectUint32(position?: number): number\r\n  pushByte(byte: Bytes[number]): void\r\n  pushBytes(bytes: Bytes): void\r\n  pushUint8(value: number): void\r\n  pushUint16(value: number): void\r\n  pushUint24(value: number): void\r\n  pushUint32(value: number): void\r\n  readByte(): Bytes[number]\r\n  readBytes(length: number, size?: number): Bytes\r\n  readUint8(): number\r\n  readUint16(): number\r\n  readUint24(): number\r\n  readUint32(): number\r\n  setPosition(position: number): () => void\r\n  _touch(): void\r\n}\r\n\r\nconst staticCursor: Cursor = /*#__PURE__*/ {\r\n  bytes: new Uint8Array(),\r\n  dataView: new DataView(new ArrayBuffer(0)),\r\n  position: 0,\r\n  positionReadCount: new Map(),\r\n  recursiveReadCount: 0,\r\n  recursiveReadLimit: Number.POSITIVE_INFINITY,\r\n  assertReadLimit() {\r\n    if (this.recursiveReadCount >= this.recursiveReadLimit)\r\n      throw new RecursiveReadLimitExceededError({\r\n        count: this.recursiveReadCount + 1,\r\n        limit: this.recursiveReadLimit,\r\n      })\r\n  },\r\n  assertPosition(position) {\r\n    if (position < 0 || position > this.bytes.length - 1)\r\n      throw new PositionOutOfBoundsError({\r\n        length: this.bytes.length,\r\n        position,\r\n      })\r\n  },\r\n  decrementPosition(offset) {\r\n    if (offset < 0) throw new NegativeOffsetError({ offset })\r\n    const position = this.position - offset\r\n    this.assertPosition(position)\r\n    this.position = position\r\n  },\r\n  getReadCount(position) {\r\n    return this.positionReadCount.get(position || this.position) || 0\r\n  },\r\n  incrementPosition(offset) {\r\n    if (offset < 0) throw new NegativeOffsetError({ offset })\r\n    const position = this.position + offset\r\n    this.assertPosition(position)\r\n    this.position = position\r\n  },\r\n  inspectByte(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position)\r\n    return this.bytes[position]!\r\n  },\r\n  inspectBytes(length, position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position + length - 1)\r\n    return this.bytes.subarray(position, position + length)\r\n  },\r\n  inspectUint8(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position)\r\n    return this.bytes[position]!\r\n  },\r\n  inspectUint16(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position + 1)\r\n    return this.dataView.getUint16(position)\r\n  },\r\n  inspectUint24(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position + 2)\r\n    return (\r\n      (this.dataView.getUint16(position) << 8) +\r\n      this.dataView.getUint8(position + 2)\r\n    )\r\n  },\r\n  inspectUint32(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position + 3)\r\n    return this.dataView.getUint32(position)\r\n  },\r\n  pushByte(byte: Bytes[number]) {\r\n    this.assertPosition(this.position)\r\n    this.bytes[this.position] = byte\r\n    this.position++\r\n  },\r\n  pushBytes(bytes: Bytes) {\r\n    this.assertPosition(this.position + bytes.length - 1)\r\n    this.bytes.set(bytes, this.position)\r\n    this.position += bytes.length\r\n  },\r\n  pushUint8(value: number) {\r\n    this.assertPosition(this.position)\r\n    this.bytes[this.position] = value\r\n    this.position++\r\n  },\r\n  pushUint16(value: number) {\r\n    this.assertPosition(this.position + 1)\r\n    this.dataView.setUint16(this.position, value)\r\n    this.position += 2\r\n  },\r\n  pushUint24(value: number) {\r\n    this.assertPosition(this.position + 2)\r\n    this.dataView.setUint16(this.position, value >> 8)\r\n    this.dataView.setUint8(this.position + 2, value & ~4294967040)\r\n    this.position += 3\r\n  },\r\n  pushUint32(value: number) {\r\n    this.assertPosition(this.position + 3)\r\n    this.dataView.setUint32(this.position, value)\r\n    this.position += 4\r\n  },\r\n  readByte() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectByte()\r\n    this.position++\r\n    return value\r\n  },\r\n  readBytes(length, size) {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectBytes(length)\r\n    this.position += size ?? length\r\n    return value\r\n  },\r\n  readUint8() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectUint8()\r\n    this.position += 1\r\n    return value\r\n  },\r\n  readUint16() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectUint16()\r\n    this.position += 2\r\n    return value\r\n  },\r\n  readUint24() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectUint24()\r\n    this.position += 3\r\n    return value\r\n  },\r\n  readUint32() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectUint32()\r\n    this.position += 4\r\n    return value\r\n  },\r\n  get remaining() {\r\n    return this.bytes.length - this.position\r\n  },\r\n  setPosition(position) {\r\n    const oldPosition = this.position\r\n    this.assertPosition(position)\r\n    this.position = position\r\n    return () => (this.position = oldPosition)\r\n  },\r\n  _touch() {\r\n    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY) return\r\n    const count = this.getReadCount()\r\n    this.positionReadCount.set(this.position, count + 1)\r\n    if (count > 0) this.recursiveReadCount++\r\n  },\r\n}\r\n\r\n/** @internal */\r\nexport function create(\r\n  bytes: Bytes,\r\n  { recursiveReadLimit = 8_192 }: create.Config = {},\r\n): Cursor {\r\n  const cursor: Cursor = Object.create(staticCursor)\r\n  cursor.bytes = bytes\r\n  cursor.dataView = new DataView(\r\n    bytes.buffer,\r\n    bytes.byteOffset,\r\n    bytes.byteLength,\r\n  )\r\n  cursor.positionReadCount = new Map()\r\n  cursor.recursiveReadLimit = recursiveReadLimit\r\n  return cursor\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace create {\r\n  type Config = { recursiveReadLimit?: number | undefined }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport class NegativeOffsetError extends Errors.BaseError {\r\n  override readonly name = 'Cursor.NegativeOffsetError'\r\n\r\n  constructor({ offset }: { offset: number }) {\r\n    super(`Offset \\`${offset}\\` cannot be negative.`)\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class PositionOutOfBoundsError extends Errors.BaseError {\r\n  override readonly name = 'Cursor.PositionOutOfBoundsError'\r\n\r\n  constructor({ length, position }: { length: number; position: number }) {\r\n    super(\r\n      `Position \\`${position}\\` is out of bounds (\\`0 < position < ${length}\\`).`,\r\n    )\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class RecursiveReadLimitExceededError extends Errors.BaseError {\r\n  override readonly name = 'Cursor.RecursiveReadLimitExceededError'\r\n\r\n  constructor({ count, limit }: { count: number; limit: number }) {\r\n    super(\r\n      `Recursive read limit of \\`${limit}\\` exceeded (recursive read count: \\`${count}\\`).`,\r\n    )\r\n  }\r\n}\r\n", "import * as abitype from 'abitype'\r\nimport * as Address from './Address.js'\r\nimport * as Bytes from './Bytes.js'\r\nimport * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\nimport * as Solidity from './Solidity.js'\r\nimport * as internal from './internal/abiParameters.js'\r\nimport * as Cursor from './internal/cursor.js'\r\n\r\n/** Root type for ABI parameters. */\r\nexport type AbiParameters = readonly abitype.AbiParameter[]\r\n\r\n/** A parameter on an {@link ox#AbiParameters.AbiParameters}. */\r\nexport type Parameter = abitype.AbiParameter\r\n\r\n/** A packed ABI type. */\r\nexport type PackedAbiType =\r\n  | abitype.SolidityAddress\r\n  | abitype.SolidityBool\r\n  | abitype.SolidityBytes\r\n  | abitype.SolidityInt\r\n  | abitype.SolidityString\r\n  | abitype.SolidityArrayWithoutTuple\r\n\r\n/**\r\n * Decodes ABI-encoded data into its respective primitive values based on ABI Parameters.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const data = AbiParameters.decode(\r\n *   AbiParameters.from(['string', 'uint', 'bool']),\r\n *   '0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000',\r\n * )\r\n * // @log: ['wagmi', 420n, true]\r\n * ```\r\n *\r\n * @example\r\n * ### JSON Parameters\r\n *\r\n * You can pass **JSON ABI** Parameters:\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const data = AbiParameters.decode(\r\n *   [\r\n *     { name: 'x', type: 'string' },\r\n *     { name: 'y', type: 'uint' },\r\n *     { name: 'z', type: 'bool' },\r\n *   ],\r\n *   '0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000',\r\n * )\r\n * // @log: ['wagmi', 420n, true]\r\n * ```\r\n *\r\n * @param parameters - The set of ABI parameters to decode, in the shape of the `inputs` or `outputs` attribute of an ABI Item. These parameters must include valid [ABI types](https://docs.soliditylang.org/en/latest/types.html).\r\n * @param data - ABI encoded data.\r\n * @param options - Decoding options.\r\n * @returns Array of decoded values.\r\n */\r\nexport function decode<\r\n  const parameters extends AbiParameters,\r\n  as extends 'Object' | 'Array' = 'Array',\r\n>(\r\n  parameters: parameters,\r\n  data: Bytes.Bytes | Hex.Hex,\r\n  options?: decode.Options<as>,\r\n): decode.ReturnType<parameters, as>\r\n\r\n// eslint-disable-next-line jsdoc/require-jsdoc\r\nexport function decode(\r\n  parameters: AbiParameters,\r\n  data: Bytes.Bytes | Hex.Hex,\r\n  options: {\r\n    as?: 'Array' | 'Object' | undefined\r\n    checksumAddress?: boolean | undefined\r\n  } = {},\r\n): readonly unknown[] | Record<string, unknown> {\r\n  const { as = 'Array', checksumAddress = false } = options\r\n\r\n  const bytes = typeof data === 'string' ? Bytes.fromHex(data) : data\r\n  const cursor = Cursor.create(bytes)\r\n\r\n  if (Bytes.size(bytes) === 0 && parameters.length > 0)\r\n    throw new ZeroDataError()\r\n  if (Bytes.size(bytes) && Bytes.size(bytes) < 32)\r\n    throw new DataSizeTooSmallError({\r\n      data: typeof data === 'string' ? data : Hex.fromBytes(data),\r\n      parameters: parameters as readonly Parameter[],\r\n      size: Bytes.size(bytes),\r\n    })\r\n\r\n  let consumed = 0\r\n  const values: any = as === 'Array' ? [] : {}\r\n  for (let i = 0; i < parameters.length; ++i) {\r\n    const param = parameters[i] as Parameter\r\n    cursor.setPosition(consumed)\r\n    const [data, consumed_] = internal.decodeParameter(cursor, param, {\r\n      checksumAddress,\r\n      staticPosition: 0,\r\n    })\r\n    consumed += consumed_\r\n    if (as === 'Array') values.push(data)\r\n    else values[param.name ?? i] = data\r\n  }\r\n  return values\r\n}\r\n\r\nexport declare namespace decode {\r\n  type Options<as extends 'Object' | 'Array'> = {\r\n    /**\r\n     * Whether the decoded values should be returned as an `Object` or `Array`.\r\n     *\r\n     * @default \"Array\"\r\n     */\r\n    as?: as | 'Object' | 'Array' | undefined\r\n    /**\r\n     * Whether decoded addresses should be checksummed.\r\n     *\r\n     * @default false\r\n     */\r\n    checksumAddress?: boolean | undefined\r\n  }\r\n\r\n  type ReturnType<\r\n    parameters extends AbiParameters = AbiParameters,\r\n    as extends 'Object' | 'Array' = 'Array',\r\n  > = parameters extends readonly []\r\n    ? as extends 'Object'\r\n      ? {}\r\n      : []\r\n    : as extends 'Object'\r\n      ? internal.ToObject<parameters>\r\n      : internal.ToPrimitiveTypes<parameters>\r\n\r\n  type ErrorType =\r\n    | Bytes.fromHex.ErrorType\r\n    | internal.decodeParameter.ErrorType\r\n    | ZeroDataError\r\n    | DataSizeTooSmallError\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes primitive values into ABI encoded data as per the [Application Binary Interface (ABI) Specification](https://docs.soliditylang.org/en/latest/abi-spec).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const data = AbiParameters.encode(\r\n *   AbiParameters.from(['string', 'uint', 'bool']),\r\n *   ['wagmi', 420n, true],\r\n * )\r\n * ```\r\n *\r\n * @example\r\n * ### JSON Parameters\r\n *\r\n * Specify **JSON ABI** Parameters as schema:\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const data = AbiParameters.encode(\r\n *   [\r\n *     { type: 'string', name: 'name' },\r\n *     { type: 'uint', name: 'age' },\r\n *     { type: 'bool', name: 'isOwner' },\r\n *   ],\r\n *   ['wagmi', 420n, true],\r\n * )\r\n * ```\r\n *\r\n * @param parameters - The set of ABI parameters to encode, in the shape of the `inputs` or `outputs` attribute of an ABI Item. These parameters must include valid [ABI types](https://docs.soliditylang.org/en/latest/types.html).\r\n * @param values - The set of primitive values that correspond to the ABI types defined in `parameters`.\r\n * @returns ABI encoded data.\r\n */\r\nexport function encode<\r\n  const parameters extends AbiParameters | readonly unknown[],\r\n>(\r\n  parameters: parameters,\r\n  values: parameters extends AbiParameters\r\n    ? internal.ToPrimitiveTypes<parameters>\r\n    : never,\r\n  options?: encode.Options,\r\n): Hex.Hex {\r\n  const { checksumAddress = false } = options ?? {}\r\n\r\n  if (parameters.length !== values.length)\r\n    throw new LengthMismatchError({\r\n      expectedLength: parameters.length as number,\r\n      givenLength: values.length as any,\r\n    })\r\n  // Prepare the parameters to determine dynamic types to encode.\r\n  const preparedParameters = internal.prepareParameters({\r\n    checksumAddress,\r\n    parameters: parameters as readonly Parameter[],\r\n    values: values as any,\r\n  })\r\n  const data = internal.encode(preparedParameters)\r\n  if (data.length === 0) return '0x'\r\n  return data\r\n}\r\n\r\nexport declare namespace encode {\r\n  type ErrorType =\r\n    | LengthMismatchError\r\n    | internal.encode.ErrorType\r\n    | internal.prepareParameters.ErrorType\r\n    | Errors.GlobalErrorType\r\n\r\n  type Options = {\r\n    /**\r\n     * Whether addresses should be checked against their checksum.\r\n     *\r\n     * @default false\r\n     */\r\n    checksumAddress?: boolean | undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Encodes an array of primitive values to a [packed ABI encoding](https://docs.soliditylang.org/en/latest/abi-spec.html#non-standard-packed-mode).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const encoded = AbiParameters.encodePacked(\r\n *   ['address', 'string'],\r\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 'hello world'],\r\n * )\r\n * // @log: '0xd8da6bf26964af9d7eed9e03e53415d37aa9604568656c6c6f20776f726c64'\r\n * ```\r\n *\r\n * @param types - Set of ABI types to pack encode.\r\n * @param values - The set of primitive values that correspond to the ABI types defined in `types`.\r\n * @returns The encoded packed data.\r\n */\r\nexport function encodePacked<\r\n  const packedAbiTypes extends readonly PackedAbiType[] | readonly unknown[],\r\n>(types: packedAbiTypes, values: encodePacked.Values<packedAbiTypes>): Hex.Hex {\r\n  if (types.length !== values.length)\r\n    throw new LengthMismatchError({\r\n      expectedLength: types.length as number,\r\n      givenLength: values.length as number,\r\n    })\r\n\r\n  const data: Hex.Hex[] = []\r\n  for (let i = 0; i < (types as unknown[]).length; i++) {\r\n    const type = types[i]\r\n    const value = values[i]\r\n    data.push(encodePacked.encode(type, value))\r\n  }\r\n  return Hex.concat(...data)\r\n}\r\n\r\nexport namespace encodePacked {\r\n  export type ErrorType =\r\n    | Hex.concat.ErrorType\r\n    | LengthMismatchError\r\n    | Errors.GlobalErrorType\r\n\r\n  export type Values<\r\n    packedAbiTypes extends readonly PackedAbiType[] | readonly unknown[],\r\n  > = {\r\n    [key in keyof packedAbiTypes]: packedAbiTypes[key] extends abitype.AbiType\r\n      ? abitype.AbiParameterToPrimitiveType<{ type: packedAbiTypes[key] }>\r\n      : unknown\r\n  }\r\n\r\n  // eslint-disable-next-line jsdoc/require-jsdoc\r\n  export function encode<const packedAbiType extends PackedAbiType | unknown>(\r\n    type: packedAbiType,\r\n    value: Values<[packedAbiType]>[0],\r\n    isArray = false,\r\n  ): Hex.Hex {\r\n    if (type === 'address') {\r\n      const address = value as Address.Address\r\n      Address.assert(address)\r\n      return Hex.padLeft(\r\n        address.toLowerCase() as Hex.Hex,\r\n        isArray ? 32 : 0,\r\n      ) as Address.Address\r\n    }\r\n    if (type === 'string') return Hex.fromString(value as string)\r\n    if (type === 'bytes') return value as Hex.Hex\r\n    if (type === 'bool')\r\n      return Hex.padLeft(Hex.fromBoolean(value as boolean), isArray ? 32 : 1)\r\n\r\n    const intMatch = (type as string).match(Solidity.integerRegex)\r\n    if (intMatch) {\r\n      const [_type, baseType, bits = '256'] = intMatch\r\n      const size = Number.parseInt(bits) / 8\r\n      return Hex.fromNumber(value as number, {\r\n        size: isArray ? 32 : size,\r\n        signed: baseType === 'int',\r\n      })\r\n    }\r\n\r\n    const bytesMatch = (type as string).match(Solidity.bytesRegex)\r\n    if (bytesMatch) {\r\n      const [_type, size] = bytesMatch\r\n      if (Number.parseInt(size!) !== ((value as Hex.Hex).length - 2) / 2)\r\n        throw new BytesSizeMismatchError({\r\n          expectedSize: Number.parseInt(size!),\r\n          value: value as Hex.Hex,\r\n        })\r\n      return Hex.padRight(value as Hex.Hex, isArray ? 32 : 0) as Hex.Hex\r\n    }\r\n\r\n    const arrayMatch = (type as string).match(Solidity.arrayRegex)\r\n    if (arrayMatch && Array.isArray(value)) {\r\n      const [_type, childType] = arrayMatch\r\n      const data: Hex.Hex[] = []\r\n      for (let i = 0; i < value.length; i++) {\r\n        data.push(encode(childType, value[i], true))\r\n      }\r\n      if (data.length === 0) return '0x'\r\n      return Hex.concat(...data)\r\n    }\r\n\r\n    throw new InvalidTypeError(type as string)\r\n  }\r\n}\r\n\r\n/**\r\n * Formats {@link ox#AbiParameters.AbiParameters} into **Human Readable ABI Parameters**.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const formatted = AbiParameters.format([\r\n *   {\r\n *     name: 'spender',\r\n *     type: 'address',\r\n *   },\r\n *   {\r\n *     name: 'amount',\r\n *     type: 'uint256',\r\n *   },\r\n * ])\r\n *\r\n * formatted\r\n * //    ^?\r\n *\r\n *\r\n * ```\r\n *\r\n * @param parameters - The ABI Parameters to format.\r\n * @returns The formatted ABI Parameters  .\r\n */\r\nexport function format<\r\n  const parameters extends readonly [\r\n    Parameter | abitype.AbiEventParameter,\r\n    ...(readonly (Parameter | abitype.AbiEventParameter)[]),\r\n  ],\r\n>(\r\n  parameters:\r\n    | parameters\r\n    | readonly [\r\n        Parameter | abitype.AbiEventParameter,\r\n        ...(readonly (Parameter | abitype.AbiEventParameter)[]),\r\n      ],\r\n): abitype.FormatAbiParameters<parameters> {\r\n  return abitype.formatAbiParameters(parameters)\r\n}\r\n\r\nexport declare namespace format {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Parses arbitrary **JSON ABI Parameters** or **Human Readable ABI Parameters** into typed {@link ox#AbiParameters.AbiParameters}.\r\n *\r\n * @example\r\n * ### JSON Parameters\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const parameters = AbiParameters.from([\r\n *   {\r\n *     name: 'spender',\r\n *     type: 'address',\r\n *   },\r\n *   {\r\n *     name: 'amount',\r\n *     type: 'uint256',\r\n *   },\r\n * ])\r\n *\r\n * parameters\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * @example\r\n * ### Human Readable Parameters\r\n *\r\n * Human Readable ABI Parameters can be parsed into a typed {@link ox#AbiParameters.AbiParameters}:\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const parameters = AbiParameters.from('address spender, uint256 amount')\r\n *\r\n * parameters\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n * @example\r\n * It is possible to specify `struct`s along with your definitions:\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * const parameters = AbiParameters.from([\r\n *   'struct Foo { address spender; uint256 amount; }', // [!code hl]\r\n *   'Foo foo, address bar',\r\n * ])\r\n *\r\n * parameters\r\n * //^?\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n * ```\r\n *\r\n *\r\n *\r\n * @param parameters - The ABI Parameters to parse.\r\n * @returns The typed ABI Parameters.\r\n */\r\nexport function from<\r\n  const parameters extends AbiParameters | string | readonly string[],\r\n>(\r\n  parameters: parameters | AbiParameters | string | readonly string[],\r\n): from.ReturnType<parameters> {\r\n  if (Array.isArray(parameters) && typeof parameters[0] === 'string')\r\n    return abitype.parseAbiParameters(parameters) as never\r\n  if (typeof parameters === 'string')\r\n    return abitype.parseAbiParameters(parameters) as never\r\n  return parameters as never\r\n}\r\n\r\nexport declare namespace from {\r\n  type ReturnType<\r\n    parameters extends AbiParameters | string | readonly string[],\r\n  > = parameters extends string\r\n    ? abitype.ParseAbiParameters<parameters>\r\n    : parameters extends readonly string[]\r\n      ? abitype.ParseAbiParameters<parameters>\r\n      : parameters\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Throws when the data size is too small for the given parameters.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * AbiParameters.decode([{ type: 'uint256' }], '0x010f')\r\n * //                                             ↑ ❌ 2 bytes\r\n * // @error: AbiParameters.DataSizeTooSmallError: Data size of 2 bytes is too small for given parameters.\r\n * // @error: Params: (uint256)\r\n * // @error: Data:   0x010f (2 bytes)\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Pass a valid data size.\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * AbiParameters.decode([{ type: 'uint256' }], '0x00000000000000000000000000000000000000000000000000000000000010f')\r\n * //                                             ↑ ✅ 32 bytes\r\n * ```\r\n */\r\nexport class DataSizeTooSmallError extends Errors.BaseError {\r\n  override readonly name = 'AbiParameters.DataSizeTooSmallError'\r\n  constructor({\r\n    data,\r\n    parameters,\r\n    size,\r\n  }: { data: Hex.Hex; parameters: readonly Parameter[]; size: number }) {\r\n    super(`Data size of ${size} bytes is too small for given parameters.`, {\r\n      metaMessages: [\r\n        `Params: (${abitype.formatAbiParameters(parameters as readonly [Parameter])})`,\r\n        `Data:   ${data} (${size} bytes)`,\r\n      ],\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Throws when zero data is provided, but data is expected.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * AbiParameters.decode([{ type: 'uint256' }], '0x')\r\n * //                                           ↑ ❌ zero data\r\n * // @error: AbiParameters.DataSizeTooSmallError: Data size of 2 bytes is too small for given parameters.\r\n * // @error: Params: (uint256)\r\n * // @error: Data:   0x010f (2 bytes)\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Pass valid data.\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * AbiParameters.decode([{ type: 'uint256' }], '0x00000000000000000000000000000000000000000000000000000000000010f')\r\n * //                                             ↑ ✅ 32 bytes\r\n * ```\r\n */\r\nexport class ZeroDataError extends Errors.BaseError {\r\n  override readonly name = 'AbiParameters.ZeroDataError'\r\n  constructor() {\r\n    super('Cannot decode zero data (\"0x\") with ABI parameters.')\r\n  }\r\n}\r\n\r\n/**\r\n * The length of the array value does not match the length specified in the corresponding ABI parameter.\r\n *\r\n * ### Example\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { AbiParameters } from 'ox'\r\n * // ---cut---\r\n * AbiParameters.encode(AbiParameters.from('uint256[3]'), [[69n, 420n]])\r\n * //                                               ↑ expected: 3  ↑ ❌ length: 2\r\n * // @error: AbiParameters.ArrayLengthMismatchError: ABI encoding array length mismatch\r\n * // @error: for type `uint256[3]`. Expected: `3`. Given: `2`.\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Pass an array of the correct length.\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n * // ---cut---\r\n * AbiParameters.encode(AbiParameters.from(['uint256[3]']), [[69n, 420n, 69n]])\r\n * //                                                         ↑ ✅ length: 3\r\n * ```\r\n */\r\nexport class ArrayLengthMismatchError extends Errors.BaseError {\r\n  override readonly name = 'AbiParameters.ArrayLengthMismatchError'\r\n  constructor({\r\n    expectedLength,\r\n    givenLength,\r\n    type,\r\n  }: { expectedLength: number; givenLength: number; type: string }) {\r\n    super(\r\n      `Array length mismatch for type \\`${type}\\`. Expected: \\`${expectedLength}\\`. Given: \\`${givenLength}\\`.`,\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * The size of the bytes value does not match the size specified in the corresponding ABI parameter.\r\n *\r\n * ### Example\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { AbiParameters } from 'ox'\r\n * // ---cut---\r\n * AbiParameters.encode(AbiParameters.from('bytes8'), [['0xdeadbeefdeadbeefdeadbeef']])\r\n * //                                            ↑ expected: 8 bytes  ↑ ❌ size: 12 bytes\r\n * // @error: BytesSizeMismatchError: Size of bytes \"0xdeadbeefdeadbeefdeadbeef\"\r\n * // @error: (bytes12) does not match expected size (bytes8).\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Pass a bytes value of the correct size.\r\n *\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n * // ---cut---\r\n * AbiParameters.encode(AbiParameters.from(['bytes8']), ['0xdeadbeefdeadbeef'])\r\n * //                                                       ↑ ✅ size: 8 bytes\r\n * ```\r\n */\r\nexport class BytesSizeMismatchError extends Errors.BaseError {\r\n  override readonly name = 'AbiParameters.BytesSizeMismatchError'\r\n  constructor({\r\n    expectedSize,\r\n    value,\r\n  }: { expectedSize: number; value: Hex.Hex }) {\r\n    super(\r\n      `Size of bytes \"${value}\" (bytes${Hex.size(\r\n        value,\r\n      )}) does not match expected size (bytes${expectedSize}).`,\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * The length of the values to encode does not match the length of the ABI parameters.\r\n *\r\n * ### Example\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { AbiParameters } from 'ox'\r\n * // ---cut---\r\n * AbiParameters.encode(AbiParameters.from(['string', 'uint256']), ['hello'])\r\n * // @error: LengthMismatchError: ABI encoding params/values length mismatch.\r\n * // @error: Expected length (params): 2\r\n * // @error: Given length (values): 1\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Pass the correct number of values to encode.\r\n *\r\n * ### Solution\r\n *\r\n * Pass a [valid ABI type](https://docs.soliditylang.org/en/develop/abi-spec.html#types).\r\n */\r\nexport class LengthMismatchError extends Errors.BaseError {\r\n  override readonly name = 'AbiParameters.LengthMismatchError'\r\n  constructor({\r\n    expectedLength,\r\n    givenLength,\r\n  }: { expectedLength: number; givenLength: number }) {\r\n    super(\r\n      [\r\n        'ABI encoding parameters/values length mismatch.',\r\n        `Expected length (parameters): ${expectedLength}`,\r\n        `Given length (values): ${givenLength}`,\r\n      ].join('\\n'),\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * The value provided is not a valid array as specified in the corresponding ABI parameter.\r\n *\r\n * ### Example\r\n *\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { AbiParameters } from 'ox'\r\n * // ---cut---\r\n * AbiParameters.encode(AbiParameters.from(['uint256[3]']), [69])\r\n * ```\r\n *\r\n * ### Solution\r\n *\r\n * Pass an array value.\r\n */\r\nexport class InvalidArrayError extends Errors.BaseError {\r\n  override readonly name = 'AbiParameters.InvalidArrayError'\r\n  constructor(value: unknown) {\r\n    super(`Value \\`${value}\\` is not a valid array.`)\r\n  }\r\n}\r\n\r\n/**\r\n * Throws when the ABI parameter type is invalid.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { AbiParameters } from 'ox'\r\n *\r\n * AbiParameters.decode([{ type: 'lol' }], '0x00000000000000000000000000000000000000000000000000000000000010f')\r\n * //                             ↑ ❌ invalid type\r\n * // @error: AbiParameters.InvalidTypeError: Type `lol` is not a valid ABI Type.\r\n * ```\r\n */\r\nexport class InvalidTypeError extends Errors.BaseError {\r\n  override readonly name = 'AbiParameters.InvalidTypeError'\r\n  constructor(type: string) {\r\n    super(`Type \\`${type}\\` is not a valid ABI Type.`)\r\n  }\r\n}\r\n", "export function utf8Count(str: string): number {\r\n  const strLength = str.length;\r\n\r\n  let byteLength = 0;\r\n  let pos = 0;\r\n  while (pos < strLength) {\r\n    let value = str.charCodeAt(pos++);\r\n\r\n    if ((value & 0xffffff80) === 0) {\r\n      // 1-byte\r\n      byteLength++;\r\n      continue;\r\n    } else if ((value & 0xfffff800) === 0) {\r\n      // 2-bytes\r\n      byteLength += 2;\r\n    } else {\r\n      // handle surrogate pair\r\n      if (value >= 0xd800 && value <= 0xdbff) {\r\n        // high surrogate\r\n        if (pos < strLength) {\r\n          const extra = str.charCodeAt(pos);\r\n          if ((extra & 0xfc00) === 0xdc00) {\r\n            ++pos;\r\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\r\n          }\r\n        }\r\n      }\r\n\r\n      if ((value & 0xffff0000) === 0) {\r\n        // 3-byte\r\n        byteLength += 3;\r\n      } else {\r\n        // 4-byte\r\n        byteLength += 4;\r\n      }\r\n    }\r\n  }\r\n  return byteLength;\r\n}\r\n\r\nexport function utf8EncodeJs(str: string, output: Uint8Array, outputOffset: number): void {\r\n  const strLength = str.length;\r\n  let offset = outputOffset;\r\n  let pos = 0;\r\n  while (pos < strLength) {\r\n    let value = str.charCodeAt(pos++);\r\n\r\n    if ((value & 0xffffff80) === 0) {\r\n      // 1-byte\r\n      output[offset++] = value;\r\n      continue;\r\n    } else if ((value & 0xfffff800) === 0) {\r\n      // 2-bytes\r\n      output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\r\n    } else {\r\n      // handle surrogate pair\r\n      if (value >= 0xd800 && value <= 0xdbff) {\r\n        // high surrogate\r\n        if (pos < strLength) {\r\n          const extra = str.charCodeAt(pos);\r\n          if ((extra & 0xfc00) === 0xdc00) {\r\n            ++pos;\r\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\r\n          }\r\n        }\r\n      }\r\n\r\n      if ((value & 0xffff0000) === 0) {\r\n        // 3-byte\r\n        output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\r\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\r\n      } else {\r\n        // 4-byte\r\n        output[offset++] = ((value >> 18) & 0x07) | 0xf0;\r\n        output[offset++] = ((value >> 12) & 0x3f) | 0x80;\r\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\r\n      }\r\n    }\r\n\r\n    output[offset++] = (value & 0x3f) | 0x80;\r\n  }\r\n}\r\n\r\n// TextEncoder and TextDecoder are standardized in whatwg encoding:\r\n// https://encoding.spec.whatwg.org/\r\n// and available in all the modern browsers:\r\n// https://caniuse.com/textencoder\r\n// They are available in Node.js since v12 LTS as well:\r\n// https://nodejs.org/api/globals.html#textencoder\r\n\r\nconst sharedTextEncoder = new TextEncoder();\r\n\r\n// This threshold should be determined by benchmarking, which might vary in engines and input data.\r\n// Run `npx ts-node benchmark/encode-string.ts` for details.\r\nconst TEXT_ENCODER_THRESHOLD = 50;\r\n\r\nexport function utf8EncodeTE(str: string, output: Uint8Array, outputOffset: number): void {\r\n  sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));\r\n}\r\n\r\nexport function utf8Encode(str: string, output: Uint8Array, outputOffset: number): void {\r\n  if (str.length > TEXT_ENCODER_THRESHOLD) {\r\n    utf8EncodeTE(str, output, outputOffset);\r\n  } else {\r\n    utf8EncodeJs(str, output, outputOffset);\r\n  }\r\n}\r\n\r\nconst CHUNK_SIZE = 0x1_000;\r\n\r\nexport function utf8DecodeJs(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\r\n  let offset = inputOffset;\r\n  const end = offset + byteLength;\r\n\r\n  const units: Array<number> = [];\r\n  let result = \"\";\r\n  while (offset < end) {\r\n    const byte1 = bytes[offset++]!;\r\n    if ((byte1 & 0x80) === 0) {\r\n      // 1 byte\r\n      units.push(byte1);\r\n    } else if ((byte1 & 0xe0) === 0xc0) {\r\n      // 2 bytes\r\n      const byte2 = bytes[offset++]! & 0x3f;\r\n      units.push(((byte1 & 0x1f) << 6) | byte2);\r\n    } else if ((byte1 & 0xf0) === 0xe0) {\r\n      // 3 bytes\r\n      const byte2 = bytes[offset++]! & 0x3f;\r\n      const byte3 = bytes[offset++]! & 0x3f;\r\n      units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\r\n    } else if ((byte1 & 0xf8) === 0xf0) {\r\n      // 4 bytes\r\n      const byte2 = bytes[offset++]! & 0x3f;\r\n      const byte3 = bytes[offset++]! & 0x3f;\r\n      const byte4 = bytes[offset++]! & 0x3f;\r\n      let unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\r\n      if (unit > 0xffff) {\r\n        unit -= 0x10000;\r\n        units.push(((unit >>> 10) & 0x3ff) | 0xd800);\r\n        unit = 0xdc00 | (unit & 0x3ff);\r\n      }\r\n      units.push(unit);\r\n    } else {\r\n      units.push(byte1);\r\n    }\r\n\r\n    if (units.length >= CHUNK_SIZE) {\r\n      result += String.fromCharCode(...units);\r\n      units.length = 0;\r\n    }\r\n  }\r\n\r\n  if (units.length > 0) {\r\n    result += String.fromCharCode(...units);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst sharedTextDecoder = new TextDecoder();\r\n\r\n// This threshold should be determined by benchmarking, which might vary in engines and input data.\r\n// Run `npx ts-node benchmark/decode-string.ts` for details.\r\nconst TEXT_DECODER_THRESHOLD = 200;\r\n\r\nexport function utf8DecodeTD(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\r\n  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\r\n  return sharedTextDecoder.decode(stringBytes);\r\n}\r\n\r\nexport function utf8Decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\r\n  if (byteLength > TEXT_DECODER_THRESHOLD) {\r\n    return utf8DecodeTD(bytes, inputOffset, byteLength);\r\n  } else {\r\n    return utf8DecodeJs(bytes, inputOffset, byteLength);\r\n  }\r\n}\r\n", "/**\r\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\r\n */\r\nexport class ExtData {\r\n  readonly type: number;\r\n  readonly data: Uint8Array | ((pos: number) => Uint8Array);\r\n\r\n  constructor(type: number, data: Uint8Array | ((pos: number) => Uint8Array)) {\r\n    this.type = type;\r\n    this.data = data;\r\n  }\r\n}\r\n", "export class DecodeError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n\r\n    // fix the prototype chain in a cross-platform way\r\n    const proto: typeof DecodeError.prototype = Object.create(DecodeError.prototype);\r\n    Object.setPrototypeOf(this, proto);\r\n\r\n    Object.defineProperty(this, \"name\", {\r\n      configurable: true,\r\n      enumerable: false,\r\n      value: DecodeError.name,\r\n    });\r\n  }\r\n}\r\n", "// Integer Utility\r\n\r\nexport const UINT32_MAX = 0xffff_ffff;\r\n\r\n// DataView extension to handle int64 / uint64,\r\n// where the actual range is 53-bits integer (a.k.a. safe integer)\r\n\r\nexport function setUint64(view: DataView, offset: number, value: number): void {\r\n  const high = value / 0x1_0000_0000;\r\n  const low = value; // high bits are truncated by DataView\r\n  view.setUint32(offset, high);\r\n  view.setUint32(offset + 4, low);\r\n}\r\n\r\nexport function setInt64(view: DataView, offset: number, value: number): void {\r\n  const high = Math.floor(value / 0x1_0000_0000);\r\n  const low = value; // high bits are truncated by DataView\r\n  view.setUint32(offset, high);\r\n  view.setUint32(offset + 4, low);\r\n}\r\n\r\nexport function getInt64(view: DataView, offset: number): number {\r\n  const high = view.getInt32(offset);\r\n  const low = view.getUint32(offset + 4);\r\n  return high * 0x1_0000_0000 + low;\r\n}\r\n\r\nexport function getUint64(view: DataView, offset: number): number {\r\n  const high = view.getUint32(offset);\r\n  const low = view.getUint32(offset + 4);\r\n  return high * 0x1_0000_0000 + low;\r\n}\r\n", "// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\r\nimport { DecodeError } from \"./DecodeError.ts\";\r\nimport { getInt64, setInt64 } from \"./utils/int.ts\";\r\n\r\nexport const EXT_TIMESTAMP = -1;\r\n\r\nexport type TimeSpec = {\r\n  sec: number;\r\n  nsec: number;\r\n};\r\n\r\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\r\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\r\n\r\nexport function encodeTimeSpecToTimestamp({ sec, nsec }: TimeSpec): Uint8Array {\r\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\r\n    // Here sec >= 0 && nsec >= 0\r\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\r\n      // timestamp 32 = { sec32 (unsigned) }\r\n      const rv = new Uint8Array(4);\r\n      const view = new DataView(rv.buffer);\r\n      view.setUint32(0, sec);\r\n      return rv;\r\n    } else {\r\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\r\n      const secHigh = sec / 0x100000000;\r\n      const secLow = sec & 0xffffffff;\r\n      const rv = new Uint8Array(8);\r\n      const view = new DataView(rv.buffer);\r\n      // nsec30 | secHigh2\r\n      view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\r\n      // secLow32\r\n      view.setUint32(4, secLow);\r\n      return rv;\r\n    }\r\n  } else {\r\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\r\n    const rv = new Uint8Array(12);\r\n    const view = new DataView(rv.buffer);\r\n    view.setUint32(0, nsec);\r\n    setInt64(view, 4, sec);\r\n    return rv;\r\n  }\r\n}\r\n\r\nexport function encodeDateToTimeSpec(date: Date): TimeSpec {\r\n  const msec = date.getTime();\r\n  const sec = Math.floor(msec / 1e3);\r\n  const nsec = (msec - sec * 1e3) * 1e6;\r\n\r\n  // Normalizes { sec, nsec } to ensure nsec is unsigned.\r\n  const nsecInSec = Math.floor(nsec / 1e9);\r\n  return {\r\n    sec: sec + nsecInSec,\r\n    nsec: nsec - nsecInSec * 1e9,\r\n  };\r\n}\r\n\r\nexport function encodeTimestampExtension(object: unknown): Uint8Array | null {\r\n  if (object instanceof Date) {\r\n    const timeSpec = encodeDateToTimeSpec(object);\r\n    return encodeTimeSpecToTimestamp(timeSpec);\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function decodeTimestampToTimeSpec(data: Uint8Array): TimeSpec {\r\n  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n\r\n  // data may be 32, 64, or 96 bits\r\n  switch (data.byteLength) {\r\n    case 4: {\r\n      // timestamp 32 = { sec32 }\r\n      const sec = view.getUint32(0);\r\n      const nsec = 0;\r\n      return { sec, nsec };\r\n    }\r\n    case 8: {\r\n      // timestamp 64 = { nsec30, sec34 }\r\n      const nsec30AndSecHigh2 = view.getUint32(0);\r\n      const secLow32 = view.getUint32(4);\r\n      const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\r\n      const nsec = nsec30AndSecHigh2 >>> 2;\r\n      return { sec, nsec };\r\n    }\r\n    case 12: {\r\n      // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\r\n\r\n      const sec = getInt64(view, 4);\r\n      const nsec = view.getUint32(0);\r\n      return { sec, nsec };\r\n    }\r\n    default:\r\n      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);\r\n  }\r\n}\r\n\r\nexport function decodeTimestampExtension(data: Uint8Array): Date {\r\n  const timeSpec = decodeTimestampToTimeSpec(data);\r\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\r\n}\r\n\r\nexport const timestampExtension = {\r\n  type: EXT_TIMESTAMP,\r\n  encode: encodeTimestampExtension,\r\n  decode: decodeTimestampExtension,\r\n};\r\n", "// ExtensionCodec to handle MessagePack extensions\r\n\r\nimport { ExtData } from \"./ExtData.ts\";\r\nimport { timestampExtension } from \"./timestamp.ts\";\r\n\r\nexport type ExtensionDecoderType<ContextType> = (\r\n  data: Uint8Array,\r\n  extensionType: number,\r\n  context: ContextType,\r\n) => unknown;\r\n\r\nexport type ExtensionEncoderType<ContextType> = (\r\n  input: unknown,\r\n  context: ContextType,\r\n) => Uint8Array | ((dataPos: number) => Uint8Array) | null;\r\n\r\n// immutable interface to ExtensionCodec\r\nexport type ExtensionCodecType<ContextType> = {\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  __brand?: ContextType;\r\n  tryToEncode(object: unknown, context: ContextType): ExtData | null;\r\n  decode(data: Uint8Array, extType: number, context: ContextType): unknown;\r\n};\r\n\r\nexport class ExtensionCodec<ContextType = undefined> implements ExtensionCodecType<ContextType> {\r\n  public static readonly defaultCodec: ExtensionCodecType<undefined> = new ExtensionCodec();\r\n\r\n  // ensures ExtensionCodecType<X> matches ExtensionCodec<X>\r\n  // this will make type errors a lot more clear\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  __brand?: ContextType;\r\n\r\n  // built-in extensions\r\n  private readonly builtInEncoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\r\n  private readonly builtInDecoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\r\n\r\n  // custom extensions\r\n  private readonly encoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\r\n  private readonly decoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\r\n\r\n  public constructor() {\r\n    this.register(timestampExtension);\r\n  }\r\n\r\n  public register({\r\n    type,\r\n    encode,\r\n    decode,\r\n  }: {\r\n    type: number;\r\n    encode: ExtensionEncoderType<ContextType>;\r\n    decode: ExtensionDecoderType<ContextType>;\r\n  }): void {\r\n    if (type >= 0) {\r\n      // custom extensions\r\n      this.encoders[type] = encode;\r\n      this.decoders[type] = decode;\r\n    } else {\r\n      // built-in extensions\r\n      const index = -1 - type;\r\n      this.builtInEncoders[index] = encode;\r\n      this.builtInDecoders[index] = decode;\r\n    }\r\n  }\r\n\r\n  public tryToEncode(object: unknown, context: ContextType): ExtData | null {\r\n    // built-in extensions\r\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\r\n      const encodeExt = this.builtInEncoders[i];\r\n      if (encodeExt != null) {\r\n        const data = encodeExt(object, context);\r\n        if (data != null) {\r\n          const type = -1 - i;\r\n          return new ExtData(type, data);\r\n        }\r\n      }\r\n    }\r\n\r\n    // custom extensions\r\n    for (let i = 0; i < this.encoders.length; i++) {\r\n      const encodeExt = this.encoders[i];\r\n      if (encodeExt != null) {\r\n        const data = encodeExt(object, context);\r\n        if (data != null) {\r\n          const type = i;\r\n          return new ExtData(type, data);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (object instanceof ExtData) {\r\n      // to keep ExtData as is\r\n      return object;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public decode(data: Uint8Array, type: number, context: ContextType): unknown {\r\n    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\r\n    if (decodeExt) {\r\n      return decodeExt(data, type, context);\r\n    } else {\r\n      // decode() does not fail, returns ExtData instead.\r\n      return new ExtData(type, data);\r\n    }\r\n  }\r\n}\r\n", "function isArrayBufferLike(buffer: unknown): buffer is ArrayBufferLike {\r\n  return (\r\n    buffer instanceof ArrayBuffer || (typeof SharedArrayBuffer !== \"undefined\" && buffer instanceof SharedArrayBuffer)\r\n  );\r\n}\r\n\r\nexport function ensureUint8Array(\r\n  buffer: ArrayLike<number> | Uint8Array<ArrayBufferLike> | ArrayBufferView | ArrayBufferLike,\r\n): Uint8Array<ArrayBufferLike> {\r\n  if (buffer instanceof Uint8Array) {\r\n    return buffer;\r\n  } else if (ArrayBuffer.isView(buffer)) {\r\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\r\n  } else if (isArrayBufferLike(buffer)) {\r\n    return new Uint8Array(buffer);\r\n  } else {\r\n    // ArrayLike<number>\r\n    return Uint8Array.from(buffer);\r\n  }\r\n}\r\n", "import { utf8Count, utf8Encode } from \"./utils/utf8.ts\";\r\nimport { ExtensionCodec } from \"./ExtensionCodec.ts\";\r\nimport { setInt64, setUint64 } from \"./utils/int.ts\";\r\nimport { ensureUint8Array } from \"./utils/typedArrays.ts\";\r\nimport type { ExtData } from \"./ExtData.ts\";\r\nimport type { ContextOf } from \"./context.ts\";\r\nimport type { ExtensionCodecType } from \"./ExtensionCodec.ts\";\r\n\r\nexport const DEFAULT_MAX_DEPTH = 100;\r\nexport const DEFAULT_INITIAL_BUFFER_SIZE = 2048;\r\n\r\nexport type EncoderOptions<ContextType = undefined> = Partial<\r\n  Readonly<{\r\n    extensionCodec: ExtensionCodecType<ContextType>;\r\n\r\n    /**\r\n     * Encodes bigint as Int64 or Uint64 if it's set to true.\r\n     * {@link forceIntegerToFloat} does not affect bigint.\r\n     * Depends on ES2020's {@link DataView#setBigInt64} and\r\n     * {@link DataView#setBigUint64}.\r\n     *\r\n     * Defaults to false.\r\n     */\r\n    useBigInt64: boolean;\r\n\r\n    /**\r\n     * The maximum depth in nested objects and arrays.\r\n     *\r\n     * Defaults to 100.\r\n     */\r\n    maxDepth: number;\r\n\r\n    /**\r\n     * The initial size of the internal buffer.\r\n     *\r\n     * Defaults to 2048.\r\n     */\r\n    initialBufferSize: number;\r\n\r\n    /**\r\n     * If `true`, the keys of an object is sorted. In other words, the encoded\r\n     * binary is canonical and thus comparable to another encoded binary.\r\n     *\r\n     * Defaults to `false`. If enabled, it spends more time in encoding objects.\r\n     */\r\n    sortKeys: boolean;\r\n    /**\r\n     * If `true`, non-integer numbers are encoded in float32, not in float64 (the default).\r\n     *\r\n     * Only use it if precisions don't matter.\r\n     *\r\n     * Defaults to `false`.\r\n     */\r\n    forceFloat32: boolean;\r\n\r\n    /**\r\n     * If `true`, an object property with `undefined` value are ignored.\r\n     * e.g. `{ foo: undefined }` will be encoded as `{}`, as `JSON.stringify()` does.\r\n     *\r\n     * Defaults to `false`. If enabled, it spends more time in encoding objects.\r\n     */\r\n    ignoreUndefined: boolean;\r\n\r\n    /**\r\n     * If `true`, integer numbers are encoded as floating point numbers,\r\n     * with the `forceFloat32` option taken into account.\r\n     *\r\n     * Defaults to `false`.\r\n     */\r\n    forceIntegerToFloat: boolean;\r\n  }>\r\n> &\r\n  ContextOf<ContextType>;\r\n\r\nexport class Encoder<ContextType = undefined> {\r\n  private readonly extensionCodec: ExtensionCodecType<ContextType>;\r\n  private readonly context: ContextType;\r\n  private readonly useBigInt64: boolean;\r\n  private readonly maxDepth: number;\r\n  private readonly initialBufferSize: number;\r\n  private readonly sortKeys: boolean;\r\n  private readonly forceFloat32: boolean;\r\n  private readonly ignoreUndefined: boolean;\r\n  private readonly forceIntegerToFloat: boolean;\r\n\r\n  private pos: number;\r\n  private view: DataView;\r\n  private bytes: Uint8Array;\r\n\r\n  private entered = false;\r\n\r\n  public constructor(options?: EncoderOptions<ContextType>) {\r\n    this.extensionCodec = options?.extensionCodec ?? (ExtensionCodec.defaultCodec as ExtensionCodecType<ContextType>);\r\n    this.context = (options as { context: ContextType } | undefined)?.context as ContextType; // needs a type assertion because EncoderOptions has no context property when ContextType is undefined\r\n\r\n    this.useBigInt64 = options?.useBigInt64 ?? false;\r\n    this.maxDepth = options?.maxDepth ?? DEFAULT_MAX_DEPTH;\r\n    this.initialBufferSize = options?.initialBufferSize ?? DEFAULT_INITIAL_BUFFER_SIZE;\r\n    this.sortKeys = options?.sortKeys ?? false;\r\n    this.forceFloat32 = options?.forceFloat32 ?? false;\r\n    this.ignoreUndefined = options?.ignoreUndefined ?? false;\r\n    this.forceIntegerToFloat = options?.forceIntegerToFloat ?? false;\r\n\r\n    this.pos = 0;\r\n    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));\r\n    this.bytes = new Uint8Array(this.view.buffer);\r\n  }\r\n\r\n  private clone() {\r\n    // Because of slightly special argument `context`,\r\n    // type assertion is needed.\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n    return new Encoder<ContextType>({\r\n      extensionCodec: this.extensionCodec,\r\n      context: this.context,\r\n      useBigInt64: this.useBigInt64,\r\n      maxDepth: this.maxDepth,\r\n      initialBufferSize: this.initialBufferSize,\r\n      sortKeys: this.sortKeys,\r\n      forceFloat32: this.forceFloat32,\r\n      ignoreUndefined: this.ignoreUndefined,\r\n      forceIntegerToFloat: this.forceIntegerToFloat,\r\n    } as any);\r\n  }\r\n\r\n  private reinitializeState() {\r\n    this.pos = 0;\r\n  }\r\n\r\n  /**\r\n   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.\r\n   *\r\n   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.\r\n   */\r\n  public encodeSharedRef(object: unknown): Uint8Array {\r\n    if (this.entered) {\r\n      const instance = this.clone();\r\n      return instance.encodeSharedRef(object);\r\n    }\r\n\r\n    try {\r\n      this.entered = true;\r\n\r\n      this.reinitializeState();\r\n      this.doEncode(object, 1);\r\n      return this.bytes.subarray(0, this.pos);\r\n    } finally {\r\n      this.entered = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns Encodes the object and returns a copy of the encoder's internal buffer.\r\n   */\r\n  public encode(object: unknown): Uint8Array {\r\n    if (this.entered) {\r\n      const instance = this.clone();\r\n      return instance.encode(object);\r\n    }\r\n\r\n    try {\r\n      this.entered = true;\r\n\r\n      this.reinitializeState();\r\n      this.doEncode(object, 1);\r\n      return this.bytes.slice(0, this.pos);\r\n    } finally {\r\n      this.entered = false;\r\n    }\r\n  }\r\n\r\n  private doEncode(object: unknown, depth: number): void {\r\n    if (depth > this.maxDepth) {\r\n      throw new Error(`Too deep objects in depth ${depth}`);\r\n    }\r\n\r\n    if (object == null) {\r\n      this.encodeNil();\r\n    } else if (typeof object === \"boolean\") {\r\n      this.encodeBoolean(object);\r\n    } else if (typeof object === \"number\") {\r\n      if (!this.forceIntegerToFloat) {\r\n        this.encodeNumber(object);\r\n      } else {\r\n        this.encodeNumberAsFloat(object);\r\n      }\r\n    } else if (typeof object === \"string\") {\r\n      this.encodeString(object);\r\n    } else if (this.useBigInt64 && typeof object === \"bigint\") {\r\n      this.encodeBigInt64(object);\r\n    } else {\r\n      this.encodeObject(object, depth);\r\n    }\r\n  }\r\n\r\n  private ensureBufferSizeToWrite(sizeToWrite: number) {\r\n    const requiredSize = this.pos + sizeToWrite;\r\n\r\n    if (this.view.byteLength < requiredSize) {\r\n      this.resizeBuffer(requiredSize * 2);\r\n    }\r\n  }\r\n\r\n  private resizeBuffer(newSize: number) {\r\n    const newBuffer = new ArrayBuffer(newSize);\r\n    const newBytes = new Uint8Array(newBuffer);\r\n    const newView = new DataView(newBuffer);\r\n\r\n    newBytes.set(this.bytes);\r\n\r\n    this.view = newView;\r\n    this.bytes = newBytes;\r\n  }\r\n\r\n  private encodeNil() {\r\n    this.writeU8(0xc0);\r\n  }\r\n\r\n  private encodeBoolean(object: boolean) {\r\n    if (object === false) {\r\n      this.writeU8(0xc2);\r\n    } else {\r\n      this.writeU8(0xc3);\r\n    }\r\n  }\r\n\r\n  private encodeNumber(object: number): void {\r\n    if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {\r\n      if (object >= 0) {\r\n        if (object < 0x80) {\r\n          // positive fixint\r\n          this.writeU8(object);\r\n        } else if (object < 0x100) {\r\n          // uint 8\r\n          this.writeU8(0xcc);\r\n          this.writeU8(object);\r\n        } else if (object < 0x10000) {\r\n          // uint 16\r\n          this.writeU8(0xcd);\r\n          this.writeU16(object);\r\n        } else if (object < 0x100000000) {\r\n          // uint 32\r\n          this.writeU8(0xce);\r\n          this.writeU32(object);\r\n        } else if (!this.useBigInt64) {\r\n          // uint 64\r\n          this.writeU8(0xcf);\r\n          this.writeU64(object);\r\n        } else {\r\n          this.encodeNumberAsFloat(object);\r\n        }\r\n      } else {\r\n        if (object >= -0x20) {\r\n          // negative fixint\r\n          this.writeU8(0xe0 | (object + 0x20));\r\n        } else if (object >= -0x80) {\r\n          // int 8\r\n          this.writeU8(0xd0);\r\n          this.writeI8(object);\r\n        } else if (object >= -0x8000) {\r\n          // int 16\r\n          this.writeU8(0xd1);\r\n          this.writeI16(object);\r\n        } else if (object >= -0x80000000) {\r\n          // int 32\r\n          this.writeU8(0xd2);\r\n          this.writeI32(object);\r\n        } else if (!this.useBigInt64) {\r\n          // int 64\r\n          this.writeU8(0xd3);\r\n          this.writeI64(object);\r\n        } else {\r\n          this.encodeNumberAsFloat(object);\r\n        }\r\n      }\r\n    } else {\r\n      this.encodeNumberAsFloat(object);\r\n    }\r\n  }\r\n\r\n  private encodeNumberAsFloat(object: number): void {\r\n    if (this.forceFloat32) {\r\n      // float 32\r\n      this.writeU8(0xca);\r\n      this.writeF32(object);\r\n    } else {\r\n      // float 64\r\n      this.writeU8(0xcb);\r\n      this.writeF64(object);\r\n    }\r\n  }\r\n\r\n  private encodeBigInt64(object: bigint): void {\r\n    if (object >= BigInt(0)) {\r\n      // uint 64\r\n      this.writeU8(0xcf);\r\n      this.writeBigUint64(object);\r\n    } else {\r\n      // int 64\r\n      this.writeU8(0xd3);\r\n      this.writeBigInt64(object);\r\n    }\r\n  }\r\n\r\n  private writeStringHeader(byteLength: number) {\r\n    if (byteLength < 32) {\r\n      // fixstr\r\n      this.writeU8(0xa0 + byteLength);\r\n    } else if (byteLength < 0x100) {\r\n      // str 8\r\n      this.writeU8(0xd9);\r\n      this.writeU8(byteLength);\r\n    } else if (byteLength < 0x10000) {\r\n      // str 16\r\n      this.writeU8(0xda);\r\n      this.writeU16(byteLength);\r\n    } else if (byteLength < 0x100000000) {\r\n      // str 32\r\n      this.writeU8(0xdb);\r\n      this.writeU32(byteLength);\r\n    } else {\r\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\r\n    }\r\n  }\r\n\r\n  private encodeString(object: string) {\r\n    const maxHeaderSize = 1 + 4;\r\n\r\n    const byteLength = utf8Count(object);\r\n    this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\r\n    this.writeStringHeader(byteLength);\r\n    utf8Encode(object, this.bytes, this.pos);\r\n    this.pos += byteLength;\r\n  }\r\n\r\n  private encodeObject(object: unknown, depth: number) {\r\n    // try to encode objects with custom codec first of non-primitives\r\n    const ext = this.extensionCodec.tryToEncode(object, this.context);\r\n    if (ext != null) {\r\n      this.encodeExtension(ext);\r\n    } else if (Array.isArray(object)) {\r\n      this.encodeArray(object, depth);\r\n    } else if (ArrayBuffer.isView(object)) {\r\n      this.encodeBinary(object);\r\n    } else if (typeof object === \"object\") {\r\n      this.encodeMap(object as Record<string, unknown>, depth);\r\n    } else {\r\n      // symbol, function and other special object come here unless extensionCodec handles them.\r\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\r\n    }\r\n  }\r\n\r\n  private encodeBinary(object: ArrayBufferView) {\r\n    const size = object.byteLength;\r\n    if (size < 0x100) {\r\n      // bin 8\r\n      this.writeU8(0xc4);\r\n      this.writeU8(size);\r\n    } else if (size < 0x10000) {\r\n      // bin 16\r\n      this.writeU8(0xc5);\r\n      this.writeU16(size);\r\n    } else if (size < 0x100000000) {\r\n      // bin 32\r\n      this.writeU8(0xc6);\r\n      this.writeU32(size);\r\n    } else {\r\n      throw new Error(`Too large binary: ${size}`);\r\n    }\r\n    const bytes = ensureUint8Array(object);\r\n    this.writeU8a(bytes);\r\n  }\r\n\r\n  private encodeArray(object: Array<unknown>, depth: number) {\r\n    const size = object.length;\r\n    if (size < 16) {\r\n      // fixarray\r\n      this.writeU8(0x90 + size);\r\n    } else if (size < 0x10000) {\r\n      // array 16\r\n      this.writeU8(0xdc);\r\n      this.writeU16(size);\r\n    } else if (size < 0x100000000) {\r\n      // array 32\r\n      this.writeU8(0xdd);\r\n      this.writeU32(size);\r\n    } else {\r\n      throw new Error(`Too large array: ${size}`);\r\n    }\r\n    for (const item of object) {\r\n      this.doEncode(item, depth + 1);\r\n    }\r\n  }\r\n\r\n  private countWithoutUndefined(object: Record<string, unknown>, keys: ReadonlyArray<string>): number {\r\n    let count = 0;\r\n\r\n    for (const key of keys) {\r\n      if (object[key] !== undefined) {\r\n        count++;\r\n      }\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n  private encodeMap(object: Record<string, unknown>, depth: number) {\r\n    const keys = Object.keys(object);\r\n    if (this.sortKeys) {\r\n      keys.sort();\r\n    }\r\n\r\n    const size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\r\n\r\n    if (size < 16) {\r\n      // fixmap\r\n      this.writeU8(0x80 + size);\r\n    } else if (size < 0x10000) {\r\n      // map 16\r\n      this.writeU8(0xde);\r\n      this.writeU16(size);\r\n    } else if (size < 0x100000000) {\r\n      // map 32\r\n      this.writeU8(0xdf);\r\n      this.writeU32(size);\r\n    } else {\r\n      throw new Error(`Too large map object: ${size}`);\r\n    }\r\n\r\n    for (const key of keys) {\r\n      const value = object[key];\r\n\r\n      if (!(this.ignoreUndefined && value === undefined)) {\r\n        this.encodeString(key);\r\n        this.doEncode(value, depth + 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  private encodeExtension(ext: ExtData) {\r\n    if (typeof ext.data === \"function\") {\r\n      const data = ext.data(this.pos + 6);\r\n      const size = data.length;\r\n\r\n      if (size >= 0x100000000) {\r\n        throw new Error(`Too large extension object: ${size}`);\r\n      }\r\n\r\n      this.writeU8(0xc9);\r\n      this.writeU32(size);\r\n      this.writeI8(ext.type);\r\n      this.writeU8a(data);\r\n      return;\r\n    }\r\n\r\n    const size = ext.data.length;\r\n    if (size === 1) {\r\n      // fixext 1\r\n      this.writeU8(0xd4);\r\n    } else if (size === 2) {\r\n      // fixext 2\r\n      this.writeU8(0xd5);\r\n    } else if (size === 4) {\r\n      // fixext 4\r\n      this.writeU8(0xd6);\r\n    } else if (size === 8) {\r\n      // fixext 8\r\n      this.writeU8(0xd7);\r\n    } else if (size === 16) {\r\n      // fixext 16\r\n      this.writeU8(0xd8);\r\n    } else if (size < 0x100) {\r\n      // ext 8\r\n      this.writeU8(0xc7);\r\n      this.writeU8(size);\r\n    } else if (size < 0x10000) {\r\n      // ext 16\r\n      this.writeU8(0xc8);\r\n      this.writeU16(size);\r\n    } else if (size < 0x100000000) {\r\n      // ext 32\r\n      this.writeU8(0xc9);\r\n      this.writeU32(size);\r\n    } else {\r\n      throw new Error(`Too large extension object: ${size}`);\r\n    }\r\n    this.writeI8(ext.type);\r\n    this.writeU8a(ext.data);\r\n  }\r\n\r\n  private writeU8(value: number) {\r\n    this.ensureBufferSizeToWrite(1);\r\n\r\n    this.view.setUint8(this.pos, value);\r\n    this.pos++;\r\n  }\r\n\r\n  private writeU8a(values: ArrayLike<number>) {\r\n    const size = values.length;\r\n    this.ensureBufferSizeToWrite(size);\r\n\r\n    this.bytes.set(values, this.pos);\r\n    this.pos += size;\r\n  }\r\n\r\n  private writeI8(value: number) {\r\n    this.ensureBufferSizeToWrite(1);\r\n\r\n    this.view.setInt8(this.pos, value);\r\n    this.pos++;\r\n  }\r\n\r\n  private writeU16(value: number) {\r\n    this.ensureBufferSizeToWrite(2);\r\n\r\n    this.view.setUint16(this.pos, value);\r\n    this.pos += 2;\r\n  }\r\n\r\n  private writeI16(value: number) {\r\n    this.ensureBufferSizeToWrite(2);\r\n\r\n    this.view.setInt16(this.pos, value);\r\n    this.pos += 2;\r\n  }\r\n\r\n  private writeU32(value: number) {\r\n    this.ensureBufferSizeToWrite(4);\r\n\r\n    this.view.setUint32(this.pos, value);\r\n    this.pos += 4;\r\n  }\r\n\r\n  private writeI32(value: number) {\r\n    this.ensureBufferSizeToWrite(4);\r\n\r\n    this.view.setInt32(this.pos, value);\r\n    this.pos += 4;\r\n  }\r\n\r\n  private writeF32(value: number) {\r\n    this.ensureBufferSizeToWrite(4);\r\n\r\n    this.view.setFloat32(this.pos, value);\r\n    this.pos += 4;\r\n  }\r\n\r\n  private writeF64(value: number) {\r\n    this.ensureBufferSizeToWrite(8);\r\n\r\n    this.view.setFloat64(this.pos, value);\r\n    this.pos += 8;\r\n  }\r\n\r\n  private writeU64(value: number) {\r\n    this.ensureBufferSizeToWrite(8);\r\n\r\n    setUint64(this.view, this.pos, value);\r\n    this.pos += 8;\r\n  }\r\n\r\n  private writeI64(value: number) {\r\n    this.ensureBufferSizeToWrite(8);\r\n\r\n    setInt64(this.view, this.pos, value);\r\n    this.pos += 8;\r\n  }\r\n\r\n  private writeBigUint64(value: bigint) {\r\n    this.ensureBufferSizeToWrite(8);\r\n\r\n    this.view.setBigUint64(this.pos, value);\r\n    this.pos += 8;\r\n  }\r\n\r\n  private writeBigInt64(value: bigint) {\r\n    this.ensureBufferSizeToWrite(8);\r\n\r\n    this.view.setBigInt64(this.pos, value);\r\n    this.pos += 8;\r\n  }\r\n}\r\n", "import { Encoder } from \"./Encoder.ts\";\r\nimport type { EncoderOptions } from \"./Encoder.ts\";\r\nimport type { SplitUndefined } from \"./context.ts\";\r\n\r\n/**\r\n * It encodes `value` in the MessagePack format and\r\n * returns a byte buffer.\r\n *\r\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\r\n */\r\nexport function encode<ContextType = undefined>(\r\n  value: unknown,\r\n  options?: EncoderOptions<SplitUndefined<ContextType>>,\r\n): Uint8Array {\r\n  const encoder = new Encoder(options);\r\n  return encoder.encodeSharedRef(value);\r\n}\r\n", "export function prettyByte(byte: number): string {\r\n  return `${byte < 0 ? \"-\" : \"\"}0x${Math.abs(byte).toString(16).padStart(2, \"0\")}`;\r\n}\r\n", "import { utf8DecodeJs } from \"./utils/utf8.ts\";\r\n\r\nconst DEFAULT_MAX_KEY_LENGTH = 16;\r\nconst DEFAULT_MAX_LENGTH_PER_KEY = 16;\r\n\r\nexport interface KeyDecoder {\r\n  canBeCached(byteLength: number): boolean;\r\n  decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string;\r\n}\r\ninterface KeyCacheRecord {\r\n  readonly bytes: Uint8Array;\r\n  readonly str: string;\r\n}\r\n\r\nexport class CachedKeyDecoder implements KeyDecoder {\r\n  hit = 0;\r\n  miss = 0;\r\n  private readonly caches: Array<Array<KeyCacheRecord>>;\r\n  readonly maxKeyLength: number;\r\n  readonly maxLengthPerKey: number;\r\n\r\n  constructor(maxKeyLength = DEFAULT_MAX_KEY_LENGTH, maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {\r\n    this.maxKeyLength = maxKeyLength;\r\n    this.maxLengthPerKey = maxLengthPerKey;\r\n\r\n    // avoid `new Array(N)`, which makes a sparse array,\r\n    // because a sparse array is typically slower than a non-sparse array.\r\n    this.caches = [];\r\n    for (let i = 0; i < this.maxKeyLength; i++) {\r\n      this.caches.push([]);\r\n    }\r\n  }\r\n\r\n  public canBeCached(byteLength: number): boolean {\r\n    return byteLength > 0 && byteLength <= this.maxKeyLength;\r\n  }\r\n\r\n  private find(bytes: Uint8Array, inputOffset: number, byteLength: number): string | null {\r\n    const records = this.caches[byteLength - 1]!;\r\n\r\n    FIND_CHUNK: for (const record of records) {\r\n      const recordBytes = record.bytes;\r\n\r\n      for (let j = 0; j < byteLength; j++) {\r\n        if (recordBytes[j] !== bytes[inputOffset + j]) {\r\n          continue FIND_CHUNK;\r\n        }\r\n      }\r\n      return record.str;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private store(bytes: Uint8Array, value: string) {\r\n    const records = this.caches[bytes.length - 1]!;\r\n    const record: KeyCacheRecord = { bytes, str: value };\r\n\r\n    if (records.length >= this.maxLengthPerKey) {\r\n      // `records` are full!\r\n      // Set `record` to an arbitrary position.\r\n      records[(Math.random() * records.length) | 0] = record;\r\n    } else {\r\n      records.push(record);\r\n    }\r\n  }\r\n\r\n  public decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\r\n    const cachedValue = this.find(bytes, inputOffset, byteLength);\r\n    if (cachedValue != null) {\r\n      this.hit++;\r\n      return cachedValue;\r\n    }\r\n    this.miss++;\r\n\r\n    const str = utf8DecodeJs(bytes, inputOffset, byteLength);\r\n    // Ensure to copy a slice of bytes because the bytes may be a NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.\r\n    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);\r\n    this.store(slicedCopyOfBytes, str);\r\n    return str;\r\n  }\r\n}\r\n", "import { prettyByte } from \"./utils/prettyByte.ts\";\r\nimport { ExtensionCodec } from \"./ExtensionCodec.ts\";\r\nimport { getInt64, getUint64, UINT32_MAX } from \"./utils/int.ts\";\r\nimport { utf8Decode } from \"./utils/utf8.ts\";\r\nimport { ensureUint8Array } from \"./utils/typedArrays.ts\";\r\nimport { CachedKeyDecoder } from \"./CachedKeyDecoder.ts\";\r\nimport { DecodeError } from \"./DecodeError.ts\";\r\nimport type { ContextOf } from \"./context.ts\";\r\nimport type { ExtensionCodecType } from \"./ExtensionCodec.ts\";\r\nimport type { KeyDecoder } from \"./CachedKeyDecoder.ts\";\r\n\r\nexport type DecoderOptions<ContextType = undefined> = Readonly<\r\n  Partial<{\r\n    extensionCodec: ExtensionCodecType<ContextType>;\r\n\r\n    /**\r\n     * Decodes Int64 and Uint64 as bigint if it's set to true.\r\n     * Depends on ES2020's {@link DataView#getBigInt64} and\r\n     * {@link DataView#getBigUint64}.\r\n     *\r\n     * Defaults to false.\r\n     */\r\n    useBigInt64: boolean;\r\n\r\n    /**\r\n     * By default, string values will be decoded as UTF-8 strings. However, if this option is true,\r\n     * string values will be returned as Uint8Arrays without additional decoding.\r\n     *\r\n     * This is useful if the strings may contain invalid UTF-8 sequences.\r\n     *\r\n     * Note that this option only applies to string values, not map keys. Additionally, when\r\n     * enabled, raw string length is limited by the maxBinLength option.\r\n     */\r\n    rawStrings: boolean;\r\n\r\n    /**\r\n     * Maximum string length.\r\n     *\r\n     * Defaults to 4_294_967_295 (UINT32_MAX).\r\n     */\r\n    maxStrLength: number;\r\n    /**\r\n     * Maximum binary length.\r\n     *\r\n     * Defaults to 4_294_967_295 (UINT32_MAX).\r\n     */\r\n    maxBinLength: number;\r\n    /**\r\n     * Maximum array length.\r\n     *\r\n     * Defaults to 4_294_967_295 (UINT32_MAX).\r\n     */\r\n    maxArrayLength: number;\r\n    /**\r\n     * Maximum map length.\r\n     *\r\n     * Defaults to 4_294_967_295 (UINT32_MAX).\r\n     */\r\n    maxMapLength: number;\r\n    /**\r\n     * Maximum extension length.\r\n     *\r\n     * Defaults to 4_294_967_295 (UINT32_MAX).\r\n     */\r\n    maxExtLength: number;\r\n\r\n    /**\r\n     * An object key decoder. Defaults to the shared instance of {@link CachedKeyDecoder}.\r\n     * `null` is a special value to disable the use of the key decoder at all.\r\n     */\r\n    keyDecoder: KeyDecoder | null;\r\n\r\n    /**\r\n     * A function to convert decoded map key to a valid JS key type.\r\n     *\r\n     * Defaults to a function that throws an error if the key is not a string or a number.\r\n     */\r\n    mapKeyConverter: (key: unknown) => MapKeyType;\r\n  }>\r\n> &\r\n  ContextOf<ContextType>;\r\n\r\nconst STATE_ARRAY = \"array\";\r\nconst STATE_MAP_KEY = \"map_key\";\r\nconst STATE_MAP_VALUE = \"map_value\";\r\n\r\ntype MapKeyType = string | number;\r\n\r\nconst mapKeyConverter = (key: unknown): MapKeyType => {\r\n  if (typeof key === \"string\" || typeof key === \"number\") {\r\n    return key;\r\n  }\r\n  throw new DecodeError(\"The type of key must be string or number but \" + typeof key);\r\n};\r\n\r\ntype StackMapState = {\r\n  type: typeof STATE_MAP_KEY | typeof STATE_MAP_VALUE;\r\n  size: number;\r\n  key: MapKeyType | null;\r\n  readCount: number;\r\n  map: Record<string, unknown>;\r\n};\r\n\r\ntype StackArrayState = {\r\n  type: typeof STATE_ARRAY;\r\n  size: number;\r\n  array: Array<unknown>;\r\n  position: number;\r\n};\r\n\r\nclass StackPool {\r\n  private readonly stack: Array<StackState> = [];\r\n  private stackHeadPosition = -1;\r\n\r\n  public get length(): number {\r\n    return this.stackHeadPosition + 1;\r\n  }\r\n\r\n  public top(): StackState | undefined {\r\n    return this.stack[this.stackHeadPosition];\r\n  }\r\n\r\n  public pushArrayState(size: number) {\r\n    const state = this.getUninitializedStateFromPool() as StackArrayState;\r\n\r\n    state.type = STATE_ARRAY;\r\n    state.position = 0;\r\n    state.size = size;\r\n    state.array = new Array(size);\r\n  }\r\n\r\n  public pushMapState(size: number) {\r\n    const state = this.getUninitializedStateFromPool() as StackMapState;\r\n\r\n    state.type = STATE_MAP_KEY;\r\n    state.readCount = 0;\r\n    state.size = size;\r\n    state.map = {};\r\n  }\r\n\r\n  private getUninitializedStateFromPool() {\r\n    this.stackHeadPosition++;\r\n\r\n    if (this.stackHeadPosition === this.stack.length) {\r\n      const partialState: Partial<StackState> = {\r\n        type: undefined,\r\n        size: 0,\r\n        array: undefined,\r\n        position: 0,\r\n        readCount: 0,\r\n        map: undefined,\r\n        key: null,\r\n      };\r\n\r\n      this.stack.push(partialState as StackState);\r\n    }\r\n\r\n    return this.stack[this.stackHeadPosition];\r\n  }\r\n\r\n  public release(state: StackState): void {\r\n    const topStackState = this.stack[this.stackHeadPosition];\r\n\r\n    if (topStackState !== state) {\r\n      throw new Error(\"Invalid stack state. Released state is not on top of the stack.\");\r\n    }\r\n\r\n    if (state.type === STATE_ARRAY) {\r\n      const partialState = state as Partial<StackArrayState>;\r\n      partialState.size = 0;\r\n      partialState.array = undefined;\r\n      partialState.position = 0;\r\n      partialState.type = undefined;\r\n    }\r\n\r\n    if (state.type === STATE_MAP_KEY || state.type === STATE_MAP_VALUE) {\r\n      const partialState = state as Partial<StackMapState>;\r\n      partialState.size = 0;\r\n      partialState.map = undefined;\r\n      partialState.readCount = 0;\r\n      partialState.type = undefined;\r\n    }\r\n\r\n    this.stackHeadPosition--;\r\n  }\r\n\r\n  public reset(): void {\r\n    this.stack.length = 0;\r\n    this.stackHeadPosition = -1;\r\n  }\r\n}\r\n\r\ntype StackState = StackArrayState | StackMapState;\r\n\r\nconst HEAD_BYTE_REQUIRED = -1;\r\n\r\nconst EMPTY_VIEW = new DataView<ArrayBufferLike>(new ArrayBuffer(0));\r\nconst EMPTY_BYTES = new Uint8Array<ArrayBufferLike>(EMPTY_VIEW.buffer);\r\n\r\ntry {\r\n  // IE11: The spec says it should throw RangeError,\r\n  // IE11: but in IE11 it throws TypeError.\r\n  EMPTY_VIEW.getInt8(0);\r\n} catch (e) {\r\n  if (!(e instanceof RangeError)) {\r\n    throw new Error(\r\n      \"This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access\",\r\n    );\r\n  }\r\n}\r\n\r\nconst MORE_DATA = new RangeError(\"Insufficient data\");\r\n\r\nconst sharedCachedKeyDecoder = new CachedKeyDecoder();\r\n\r\nexport class Decoder<ContextType = undefined> {\r\n  private readonly extensionCodec: ExtensionCodecType<ContextType>;\r\n  private readonly context: ContextType;\r\n  private readonly useBigInt64: boolean;\r\n  private readonly rawStrings: boolean;\r\n  private readonly maxStrLength: number;\r\n  private readonly maxBinLength: number;\r\n  private readonly maxArrayLength: number;\r\n  private readonly maxMapLength: number;\r\n  private readonly maxExtLength: number;\r\n  private readonly keyDecoder: KeyDecoder | null;\r\n  private readonly mapKeyConverter: (key: unknown) => MapKeyType;\r\n\r\n  private totalPos = 0;\r\n  private pos = 0;\r\n\r\n  private view = EMPTY_VIEW;\r\n  private bytes = EMPTY_BYTES;\r\n  private headByte = HEAD_BYTE_REQUIRED;\r\n  private readonly stack = new StackPool();\r\n\r\n  private entered = false;\r\n\r\n  public constructor(options?: DecoderOptions<ContextType>) {\r\n    this.extensionCodec = options?.extensionCodec ?? (ExtensionCodec.defaultCodec as ExtensionCodecType<ContextType>);\r\n    this.context = (options as { context: ContextType } | undefined)?.context as ContextType; // needs a type assertion because EncoderOptions has no context property when ContextType is undefined\r\n\r\n    this.useBigInt64 = options?.useBigInt64 ?? false;\r\n    this.rawStrings = options?.rawStrings ?? false;\r\n    this.maxStrLength = options?.maxStrLength ?? UINT32_MAX;\r\n    this.maxBinLength = options?.maxBinLength ?? UINT32_MAX;\r\n    this.maxArrayLength = options?.maxArrayLength ?? UINT32_MAX;\r\n    this.maxMapLength = options?.maxMapLength ?? UINT32_MAX;\r\n    this.maxExtLength = options?.maxExtLength ?? UINT32_MAX;\r\n    this.keyDecoder = options?.keyDecoder !== undefined ? options.keyDecoder : sharedCachedKeyDecoder;\r\n    this.mapKeyConverter = options?.mapKeyConverter ?? mapKeyConverter;\r\n  }\r\n\r\n  private clone(): Decoder<ContextType> {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n    return new Decoder({\r\n      extensionCodec: this.extensionCodec,\r\n      context: this.context,\r\n      useBigInt64: this.useBigInt64,\r\n      rawStrings: this.rawStrings,\r\n      maxStrLength: this.maxStrLength,\r\n      maxBinLength: this.maxBinLength,\r\n      maxArrayLength: this.maxArrayLength,\r\n      maxMapLength: this.maxMapLength,\r\n      maxExtLength: this.maxExtLength,\r\n      keyDecoder: this.keyDecoder,\r\n    } as any);\r\n  }\r\n\r\n  private reinitializeState() {\r\n    this.totalPos = 0;\r\n    this.headByte = HEAD_BYTE_REQUIRED;\r\n    this.stack.reset();\r\n\r\n    // view, bytes, and pos will be re-initialized in setBuffer()\r\n  }\r\n\r\n  private setBuffer(buffer: ArrayLike<number> | ArrayBufferView | ArrayBufferLike): void {\r\n    const bytes = ensureUint8Array(buffer);\r\n    this.bytes = bytes;\r\n    this.view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\r\n    this.pos = 0;\r\n  }\r\n\r\n  private appendBuffer(buffer: ArrayLike<number> | ArrayBufferView | ArrayBufferLike): void {\r\n    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {\r\n      this.setBuffer(buffer);\r\n    } else {\r\n      const remainingData = this.bytes.subarray(this.pos);\r\n      const newData = ensureUint8Array(buffer);\r\n\r\n      // concat remainingData + newData\r\n      const newBuffer = new Uint8Array(remainingData.length + newData.length);\r\n      newBuffer.set(remainingData);\r\n      newBuffer.set(newData, remainingData.length);\r\n      this.setBuffer(newBuffer);\r\n    }\r\n  }\r\n\r\n  private hasRemaining(size: number) {\r\n    return this.view.byteLength - this.pos >= size;\r\n  }\r\n\r\n  private createExtraByteError(posToShow: number): Error {\r\n    const { view, pos } = this;\r\n    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);\r\n  }\r\n\r\n  /**\r\n   * @throws {@link DecodeError}\r\n   * @throws {@link RangeError}\r\n   */\r\n  public decode(buffer: ArrayLike<number> | ArrayBufferView | ArrayBufferLike): unknown {\r\n    if (this.entered) {\r\n      const instance = this.clone();\r\n      return instance.decode(buffer);\r\n    }\r\n\r\n    try {\r\n      this.entered = true;\r\n\r\n      this.reinitializeState();\r\n      this.setBuffer(buffer);\r\n\r\n      const object = this.doDecodeSync();\r\n      if (this.hasRemaining(1)) {\r\n        throw this.createExtraByteError(this.pos);\r\n      }\r\n      return object;\r\n    } finally {\r\n      this.entered = false;\r\n    }\r\n  }\r\n\r\n  public *decodeMulti(buffer: ArrayLike<number> | ArrayBufferView | ArrayBufferLike): Generator<unknown, void, unknown> {\r\n    if (this.entered) {\r\n      const instance = this.clone();\r\n      yield* instance.decodeMulti(buffer);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.entered = true;\r\n\r\n      this.reinitializeState();\r\n      this.setBuffer(buffer);\r\n\r\n      while (this.hasRemaining(1)) {\r\n        yield this.doDecodeSync();\r\n      }\r\n    } finally {\r\n      this.entered = false;\r\n    }\r\n  }\r\n\r\n  public async decodeAsync(stream: AsyncIterable<ArrayLike<number> | ArrayBufferView | ArrayBufferLike>): Promise<unknown> {\r\n    if (this.entered) {\r\n      const instance = this.clone();\r\n      return instance.decodeAsync(stream);\r\n    }\r\n\r\n    try {\r\n      this.entered = true;\r\n\r\n      let decoded = false;\r\n      let object: unknown;\r\n      for await (const buffer of stream) {\r\n        if (decoded) {\r\n          this.entered = false;\r\n          throw this.createExtraByteError(this.totalPos);\r\n        }\r\n\r\n        this.appendBuffer(buffer);\r\n\r\n        try {\r\n          object = this.doDecodeSync();\r\n          decoded = true;\r\n        } catch (e) {\r\n          if (!(e instanceof RangeError)) {\r\n            throw e; // rethrow\r\n          }\r\n          // fallthrough\r\n        }\r\n        this.totalPos += this.pos;\r\n      }\r\n\r\n      if (decoded) {\r\n        if (this.hasRemaining(1)) {\r\n          throw this.createExtraByteError(this.totalPos);\r\n        }\r\n        return object;\r\n      }\r\n\r\n      const { headByte, pos, totalPos } = this;\r\n      throw new RangeError(\r\n        `Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`,\r\n      );\r\n    } finally {\r\n      this.entered = false;\r\n    }\r\n  }\r\n\r\n  public decodeArrayStream(\r\n    stream: AsyncIterable<ArrayLike<number> | ArrayBufferView | ArrayBufferLike>,\r\n  ): AsyncGenerator<unknown, void, unknown> {\r\n    return this.decodeMultiAsync(stream, true);\r\n  }\r\n\r\n  public decodeStream(stream: AsyncIterable<ArrayLike<number> | ArrayBufferView | ArrayBufferLike>): AsyncGenerator<unknown, void, unknown> {\r\n    return this.decodeMultiAsync(stream, false);\r\n  }\r\n\r\n  private async *decodeMultiAsync(stream: AsyncIterable<ArrayLike<number> | ArrayBufferView | ArrayBufferLike>, isArray: boolean): AsyncGenerator<unknown, void, unknown> {\r\n    if (this.entered) {\r\n      const instance = this.clone();\r\n      yield* instance.decodeMultiAsync(stream, isArray);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.entered = true;\r\n\r\n      let isArrayHeaderRequired = isArray;\r\n      let arrayItemsLeft = -1;\r\n\r\n      for await (const buffer of stream) {\r\n        if (isArray && arrayItemsLeft === 0) {\r\n          throw this.createExtraByteError(this.totalPos);\r\n        }\r\n\r\n        this.appendBuffer(buffer);\r\n\r\n        if (isArrayHeaderRequired) {\r\n          arrayItemsLeft = this.readArraySize();\r\n          isArrayHeaderRequired = false;\r\n          this.complete();\r\n        }\r\n\r\n        try {\r\n          while (true) {\r\n            yield this.doDecodeSync();\r\n            if (--arrayItemsLeft === 0) {\r\n              break;\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!(e instanceof RangeError)) {\r\n            throw e; // rethrow\r\n          }\r\n          // fallthrough\r\n        }\r\n        this.totalPos += this.pos;\r\n      }\r\n    } finally {\r\n      this.entered = false;\r\n    }\r\n  }\r\n\r\n  private doDecodeSync(): unknown {\r\n    DECODE: while (true) {\r\n      const headByte = this.readHeadByte();\r\n      let object: unknown;\r\n\r\n      if (headByte >= 0xe0) {\r\n        // negative fixint (111x xxxx) 0xe0 - 0xff\r\n        object = headByte - 0x100;\r\n      } else if (headByte < 0xc0) {\r\n        if (headByte < 0x80) {\r\n          // positive fixint (0xxx xxxx) 0x00 - 0x7f\r\n          object = headByte;\r\n        } else if (headByte < 0x90) {\r\n          // fixmap (1000 xxxx) 0x80 - 0x8f\r\n          const size = headByte - 0x80;\r\n          if (size !== 0) {\r\n            this.pushMapState(size);\r\n            this.complete();\r\n            continue DECODE;\r\n          } else {\r\n            object = {};\r\n          }\r\n        } else if (headByte < 0xa0) {\r\n          // fixarray (1001 xxxx) 0x90 - 0x9f\r\n          const size = headByte - 0x90;\r\n          if (size !== 0) {\r\n            this.pushArrayState(size);\r\n            this.complete();\r\n            continue DECODE;\r\n          } else {\r\n            object = [];\r\n          }\r\n        } else {\r\n          // fixstr (101x xxxx) 0xa0 - 0xbf\r\n          const byteLength = headByte - 0xa0;\r\n          object = this.decodeString(byteLength, 0);\r\n        }\r\n      } else if (headByte === 0xc0) {\r\n        // nil\r\n        object = null;\r\n      } else if (headByte === 0xc2) {\r\n        // false\r\n        object = false;\r\n      } else if (headByte === 0xc3) {\r\n        // true\r\n        object = true;\r\n      } else if (headByte === 0xca) {\r\n        // float 32\r\n        object = this.readF32();\r\n      } else if (headByte === 0xcb) {\r\n        // float 64\r\n        object = this.readF64();\r\n      } else if (headByte === 0xcc) {\r\n        // uint 8\r\n        object = this.readU8();\r\n      } else if (headByte === 0xcd) {\r\n        // uint 16\r\n        object = this.readU16();\r\n      } else if (headByte === 0xce) {\r\n        // uint 32\r\n        object = this.readU32();\r\n      } else if (headByte === 0xcf) {\r\n        // uint 64\r\n        if (this.useBigInt64) {\r\n          object = this.readU64AsBigInt();\r\n        } else {\r\n          object = this.readU64();\r\n        }\r\n      } else if (headByte === 0xd0) {\r\n        // int 8\r\n        object = this.readI8();\r\n      } else if (headByte === 0xd1) {\r\n        // int 16\r\n        object = this.readI16();\r\n      } else if (headByte === 0xd2) {\r\n        // int 32\r\n        object = this.readI32();\r\n      } else if (headByte === 0xd3) {\r\n        // int 64\r\n        if (this.useBigInt64) {\r\n          object = this.readI64AsBigInt();\r\n        } else {\r\n          object = this.readI64();\r\n        }\r\n      } else if (headByte === 0xd9) {\r\n        // str 8\r\n        const byteLength = this.lookU8();\r\n        object = this.decodeString(byteLength, 1);\r\n      } else if (headByte === 0xda) {\r\n        // str 16\r\n        const byteLength = this.lookU16();\r\n        object = this.decodeString(byteLength, 2);\r\n      } else if (headByte === 0xdb) {\r\n        // str 32\r\n        const byteLength = this.lookU32();\r\n        object = this.decodeString(byteLength, 4);\r\n      } else if (headByte === 0xdc) {\r\n        // array 16\r\n        const size = this.readU16();\r\n        if (size !== 0) {\r\n          this.pushArrayState(size);\r\n          this.complete();\r\n          continue DECODE;\r\n        } else {\r\n          object = [];\r\n        }\r\n      } else if (headByte === 0xdd) {\r\n        // array 32\r\n        const size = this.readU32();\r\n        if (size !== 0) {\r\n          this.pushArrayState(size);\r\n          this.complete();\r\n          continue DECODE;\r\n        } else {\r\n          object = [];\r\n        }\r\n      } else if (headByte === 0xde) {\r\n        // map 16\r\n        const size = this.readU16();\r\n        if (size !== 0) {\r\n          this.pushMapState(size);\r\n          this.complete();\r\n          continue DECODE;\r\n        } else {\r\n          object = {};\r\n        }\r\n      } else if (headByte === 0xdf) {\r\n        // map 32\r\n        const size = this.readU32();\r\n        if (size !== 0) {\r\n          this.pushMapState(size);\r\n          this.complete();\r\n          continue DECODE;\r\n        } else {\r\n          object = {};\r\n        }\r\n      } else if (headByte === 0xc4) {\r\n        // bin 8\r\n        const size = this.lookU8();\r\n        object = this.decodeBinary(size, 1);\r\n      } else if (headByte === 0xc5) {\r\n        // bin 16\r\n        const size = this.lookU16();\r\n        object = this.decodeBinary(size, 2);\r\n      } else if (headByte === 0xc6) {\r\n        // bin 32\r\n        const size = this.lookU32();\r\n        object = this.decodeBinary(size, 4);\r\n      } else if (headByte === 0xd4) {\r\n        // fixext 1\r\n        object = this.decodeExtension(1, 0);\r\n      } else if (headByte === 0xd5) {\r\n        // fixext 2\r\n        object = this.decodeExtension(2, 0);\r\n      } else if (headByte === 0xd6) {\r\n        // fixext 4\r\n        object = this.decodeExtension(4, 0);\r\n      } else if (headByte === 0xd7) {\r\n        // fixext 8\r\n        object = this.decodeExtension(8, 0);\r\n      } else if (headByte === 0xd8) {\r\n        // fixext 16\r\n        object = this.decodeExtension(16, 0);\r\n      } else if (headByte === 0xc7) {\r\n        // ext 8\r\n        const size = this.lookU8();\r\n        object = this.decodeExtension(size, 1);\r\n      } else if (headByte === 0xc8) {\r\n        // ext 16\r\n        const size = this.lookU16();\r\n        object = this.decodeExtension(size, 2);\r\n      } else if (headByte === 0xc9) {\r\n        // ext 32\r\n        const size = this.lookU32();\r\n        object = this.decodeExtension(size, 4);\r\n      } else {\r\n        throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);\r\n      }\r\n\r\n      this.complete();\r\n\r\n      const stack = this.stack;\r\n      while (stack.length > 0) {\r\n        // arrays and maps\r\n        const state = stack.top()!;\r\n        if (state.type === STATE_ARRAY) {\r\n          state.array[state.position] = object;\r\n          state.position++;\r\n          if (state.position === state.size) {\r\n            object = state.array;\r\n            stack.release(state);\r\n          } else {\r\n            continue DECODE;\r\n          }\r\n        } else if (state.type === STATE_MAP_KEY) {\r\n          if (object === \"__proto__\") {\r\n            throw new DecodeError(\"The key __proto__ is not allowed\");\r\n          }\r\n\r\n          state.key = this.mapKeyConverter(object);\r\n          state.type = STATE_MAP_VALUE;\r\n          continue DECODE;\r\n        } else {\r\n          // it must be `state.type === State.MAP_VALUE` here\r\n\r\n          state.map[state.key!] = object;\r\n          state.readCount++;\r\n\r\n          if (state.readCount === state.size) {\r\n            object = state.map;\r\n            stack.release(state);\r\n          } else {\r\n            state.key = null;\r\n            state.type = STATE_MAP_KEY;\r\n            continue DECODE;\r\n          }\r\n        }\r\n      }\r\n\r\n      return object;\r\n    }\r\n  }\r\n\r\n  private readHeadByte(): number {\r\n    if (this.headByte === HEAD_BYTE_REQUIRED) {\r\n      this.headByte = this.readU8();\r\n      // console.log(\"headByte\", prettyByte(this.headByte));\r\n    }\r\n\r\n    return this.headByte;\r\n  }\r\n\r\n  private complete(): void {\r\n    this.headByte = HEAD_BYTE_REQUIRED;\r\n  }\r\n\r\n  private readArraySize(): number {\r\n    const headByte = this.readHeadByte();\r\n\r\n    switch (headByte) {\r\n      case 0xdc:\r\n        return this.readU16();\r\n      case 0xdd:\r\n        return this.readU32();\r\n      default: {\r\n        if (headByte < 0xa0) {\r\n          return headByte - 0x90;\r\n        } else {\r\n          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private pushMapState(size: number) {\r\n    if (size > this.maxMapLength) {\r\n      throw new DecodeError(`Max length exceeded: map length (${size}) > maxMapLengthLength (${this.maxMapLength})`);\r\n    }\r\n\r\n    this.stack.pushMapState(size);\r\n  }\r\n\r\n  private pushArrayState(size: number) {\r\n    if (size > this.maxArrayLength) {\r\n      throw new DecodeError(`Max length exceeded: array length (${size}) > maxArrayLength (${this.maxArrayLength})`);\r\n    }\r\n\r\n    this.stack.pushArrayState(size);\r\n  }\r\n\r\n  private decodeString(byteLength: number, headerOffset: number): string | Uint8Array {\r\n    if (!this.rawStrings || this.stateIsMapKey()) {\r\n      return this.decodeUtf8String(byteLength, headerOffset);\r\n    }\r\n    return this.decodeBinary(byteLength, headerOffset);\r\n  }\r\n\r\n  /**\r\n   * @throws {@link RangeError}\r\n   */\r\n  private decodeUtf8String(byteLength: number, headerOffset: number): string {\r\n    if (byteLength > this.maxStrLength) {\r\n      throw new DecodeError(\r\n        `Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`,\r\n      );\r\n    }\r\n\r\n    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\r\n      throw MORE_DATA;\r\n    }\r\n\r\n    const offset = this.pos + headerOffset;\r\n    let object: string;\r\n    if (this.stateIsMapKey() && this.keyDecoder?.canBeCached(byteLength)) {\r\n      object = this.keyDecoder.decode(this.bytes, offset, byteLength);\r\n    } else {\r\n      object = utf8Decode(this.bytes, offset, byteLength);\r\n    }\r\n    this.pos += headerOffset + byteLength;\r\n    return object;\r\n  }\r\n\r\n  private stateIsMapKey(): boolean {\r\n    if (this.stack.length > 0) {\r\n      const state = this.stack.top()!;\r\n      return state.type === STATE_MAP_KEY;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @throws {@link RangeError}\r\n   */\r\n  private decodeBinary(byteLength: number, headOffset: number): Uint8Array {\r\n    if (byteLength > this.maxBinLength) {\r\n      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);\r\n    }\r\n\r\n    if (!this.hasRemaining(byteLength + headOffset)) {\r\n      throw MORE_DATA;\r\n    }\r\n\r\n    const offset = this.pos + headOffset;\r\n    const object = this.bytes.subarray(offset, offset + byteLength);\r\n    this.pos += headOffset + byteLength;\r\n    return object;\r\n  }\r\n\r\n  private decodeExtension(size: number, headOffset: number): unknown {\r\n    if (size > this.maxExtLength) {\r\n      throw new DecodeError(`Max length exceeded: ext length (${size}) > maxExtLength (${this.maxExtLength})`);\r\n    }\r\n\r\n    const extType = this.view.getInt8(this.pos + headOffset);\r\n    const data = this.decodeBinary(size, headOffset + 1 /* extType */);\r\n    return this.extensionCodec.decode(data, extType, this.context);\r\n  }\r\n\r\n  private lookU8() {\r\n    return this.view.getUint8(this.pos);\r\n  }\r\n\r\n  private lookU16() {\r\n    return this.view.getUint16(this.pos);\r\n  }\r\n\r\n  private lookU32() {\r\n    return this.view.getUint32(this.pos);\r\n  }\r\n\r\n  private readU8(): number {\r\n    const value = this.view.getUint8(this.pos);\r\n    this.pos++;\r\n    return value;\r\n  }\r\n\r\n  private readI8(): number {\r\n    const value = this.view.getInt8(this.pos);\r\n    this.pos++;\r\n    return value;\r\n  }\r\n\r\n  private readU16(): number {\r\n    const value = this.view.getUint16(this.pos);\r\n    this.pos += 2;\r\n    return value;\r\n  }\r\n\r\n  private readI16(): number {\r\n    const value = this.view.getInt16(this.pos);\r\n    this.pos += 2;\r\n    return value;\r\n  }\r\n\r\n  private readU32(): number {\r\n    const value = this.view.getUint32(this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n  }\r\n\r\n  private readI32(): number {\r\n    const value = this.view.getInt32(this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n  }\r\n\r\n  private readU64(): number {\r\n    const value = getUint64(this.view, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n  }\r\n\r\n  private readI64(): number {\r\n    const value = getInt64(this.view, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n  }\r\n\r\n  private readU64AsBigInt(): bigint {\r\n    const value = this.view.getBigUint64(this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n  }\r\n\r\n  private readI64AsBigInt(): bigint {\r\n    const value = this.view.getBigInt64(this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n  }\r\n\r\n  private readF32() {\r\n    const value = this.view.getFloat32(this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n  }\r\n\r\n  private readF64() {\r\n    const value = this.view.getFloat64(this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n  }\r\n}\r\n", "import { Decoder } from \"./Decoder.ts\";\r\nimport type { DecoderOptions } from \"./Decoder.ts\";\r\nimport type { SplitUndefined } from \"./context.ts\";\r\n\r\n/**\r\n * It decodes a single MessagePack object in a buffer.\r\n *\r\n * This is a synchronous decoding function.\r\n * See other variants for asynchronous decoding: {@link decodeAsync}, {@link decodeMultiStream}, or {@link decodeArrayStream}.\r\n *\r\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\r\n * @throws {@link DecodeError} if the buffer contains invalid data.\r\n */\r\nexport function decode<ContextType = undefined>(\r\n  buffer: ArrayLike<number> | ArrayBufferView | ArrayBufferLike,\r\n  options?: DecoderOptions<SplitUndefined<ContextType>>,\r\n): unknown {\r\n  const decoder = new Decoder(options);\r\n  return decoder.decode(buffer);\r\n}\r\n\r\n/**\r\n * It decodes multiple MessagePack objects in a buffer.\r\n * This is corresponding to {@link decodeMultiStream}.\r\n *\r\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\r\n * @throws {@link DecodeError} if the buffer contains invalid data.\r\n */\r\nexport function decodeMulti<ContextType = undefined>(\r\n  buffer: ArrayLike<number> | BufferSource,\r\n  options?: DecoderOptions<SplitUndefined<ContextType>>,\r\n): Generator<unknown, void, unknown> {\r\n  const decoder = new Decoder(options);\r\n  return decoder.decodeMulti(buffer);\r\n}\r\n", "export function asUint8Array(buf) {\r\n  if (globalThis.Buffer != null) {\r\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\r\n  }\r\n  return buf;\r\n}", "import { asUint8Array } from './util/as-uint8array.js';\r\nexport function alloc(size = 0) {\r\n  if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {\r\n    return asUint8Array(globalThis.Buffer.alloc(size));\r\n  }\r\n  return new Uint8Array(size);\r\n}\r\nexport function allocUnsafe(size = 0) {\r\n  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {\r\n    return asUint8Array(globalThis.Buffer.allocUnsafe(size));\r\n  }\r\n  return new Uint8Array(size);\r\n}", "import { allocUnsafe } from './alloc.js';\r\nimport { asUint8Array } from './util/as-uint8array.js';\r\nexport function concat(arrays, length) {\r\n  if (!length) {\r\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\r\n  }\r\n  const output = allocUnsafe(length);\r\n  let offset = 0;\r\n  for (const arr of arrays) {\r\n    output.set(arr, offset);\r\n    offset += arr.length;\r\n  }\r\n  return asUint8Array(output);\r\n}", "import { bases } from 'multiformats/basics';\r\nimport { allocUnsafe } from '../alloc.js';\r\nfunction createCodec(name, prefix, encode, decode) {\r\n  return {\r\n    name,\r\n    prefix,\r\n    encoder: {\r\n      name,\r\n      prefix,\r\n      encode\r\n    },\r\n    decoder: { decode }\r\n  };\r\n}\r\nconst string = createCodec('utf8', 'u', buf => {\r\n  const decoder = new TextDecoder('utf8');\r\n  return 'u' + decoder.decode(buf);\r\n}, str => {\r\n  const encoder = new TextEncoder();\r\n  return encoder.encode(str.substring(1));\r\n});\r\nconst ascii = createCodec('ascii', 'a', buf => {\r\n  let string = 'a';\r\n  for (let i = 0; i < buf.length; i++) {\r\n    string += String.fromCharCode(buf[i]);\r\n  }\r\n  return string;\r\n}, str => {\r\n  str = str.substring(1);\r\n  const buf = allocUnsafe(str.length);\r\n  for (let i = 0; i < str.length; i++) {\r\n    buf[i] = str.charCodeAt(i);\r\n  }\r\n  return buf;\r\n});\r\nconst BASES = {\r\n  utf8: string,\r\n  'utf-8': string,\r\n  hex: bases.base16,\r\n  latin1: ascii,\r\n  ascii: ascii,\r\n  binary: ascii,\r\n  ...bases\r\n};\r\nexport default BASES;", "import bases from './util/bases.js';\r\nimport { asUint8Array } from './util/as-uint8array.js';\r\nexport function fromString(string, encoding = 'utf8') {\r\n  const base = bases[encoding];\r\n  if (!base) {\r\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\r\n  }\r\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\r\n    return asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\r\n  }\r\n  return base.decoder.decode(`${ base.prefix }${ string }`);\r\n}", "import bases from './util/bases.js';\r\nexport function toString(array, encoding = 'utf8') {\r\n  const base = bases[encoding];\r\n  if (!base) {\r\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\r\n  }\r\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\r\n    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\r\n  }\r\n  return base.encoder.encode(array).substring(1);\r\n}", "function wrapToPromise(value) {\r\n  if (!value || typeof value.then !== \"function\") {\r\n    return Promise.resolve(value);\r\n  }\r\n  return value;\r\n}\r\nfunction asyncCall(function_, ...arguments_) {\r\n  try {\r\n    return wrapToPromise(function_(...arguments_));\r\n  } catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n}\r\nfunction isPrimitive(value) {\r\n  const type = typeof value;\r\n  return value === null || type !== \"object\" && type !== \"function\";\r\n}\r\nfunction isPureObject(value) {\r\n  const proto = Object.getPrototypeOf(value);\r\n  return !proto || proto.isPrototypeOf(Object);\r\n}\r\nfunction stringify(value) {\r\n  if (isPrimitive(value)) {\r\n    return String(value);\r\n  }\r\n  if (isPureObject(value) || Array.isArray(value)) {\r\n    return JSON.stringify(value);\r\n  }\r\n  if (typeof value.toJSON === \"function\") {\r\n    return stringify(value.toJSON());\r\n  }\r\n  throw new Error(\"[unstorage] Cannot stringify value!\");\r\n}\r\nconst BASE64_PREFIX = \"base64:\";\r\nfunction serializeRaw(value) {\r\n  if (typeof value === \"string\") {\r\n    return value;\r\n  }\r\n  return BASE64_PREFIX + base64Encode(value);\r\n}\r\nfunction deserializeRaw(value) {\r\n  if (typeof value !== \"string\") {\r\n    return value;\r\n  }\r\n  if (!value.startsWith(BASE64_PREFIX)) {\r\n    return value;\r\n  }\r\n  return base64Decode(value.slice(BASE64_PREFIX.length));\r\n}\r\nfunction base64Decode(input) {\r\n  if (globalThis.Buffer) {\r\n    return Buffer.from(input, \"base64\");\r\n  }\r\n  return Uint8Array.from(\r\n    globalThis.atob(input),\r\n    (c) => c.codePointAt(0)\r\n  );\r\n}\r\nfunction base64Encode(input) {\r\n  if (globalThis.Buffer) {\r\n    return Buffer.from(input).toString(\"base64\");\r\n  }\r\n  return globalThis.btoa(String.fromCodePoint(...input));\r\n}\r\n\r\nconst storageKeyProperties = [\r\n  \"has\",\r\n  \"hasItem\",\r\n  \"get\",\r\n  \"getItem\",\r\n  \"getItemRaw\",\r\n  \"set\",\r\n  \"setItem\",\r\n  \"setItemRaw\",\r\n  \"del\",\r\n  \"remove\",\r\n  \"removeItem\",\r\n  \"getMeta\",\r\n  \"setMeta\",\r\n  \"removeMeta\",\r\n  \"getKeys\",\r\n  \"clear\",\r\n  \"mount\",\r\n  \"unmount\"\r\n];\r\nfunction prefixStorage(storage, base) {\r\n  base = normalizeBaseKey(base);\r\n  if (!base) {\r\n    return storage;\r\n  }\r\n  const nsStorage = { ...storage };\r\n  for (const property of storageKeyProperties) {\r\n    nsStorage[property] = (key = \"\", ...args) => (\r\n      // @ts-ignore\r\n      storage[property](base + key, ...args)\r\n    );\r\n  }\r\n  nsStorage.getKeys = (key = \"\", ...arguments_) => storage.getKeys(base + key, ...arguments_).then((keys) => keys.map((key2) => key2.slice(base.length)));\r\n  nsStorage.getItems = async (items, commonOptions) => {\r\n    const prefixedItems = items.map(\r\n      (item) => typeof item === \"string\" ? base + item : { ...item, key: base + item.key }\r\n    );\r\n    const results = await storage.getItems(prefixedItems, commonOptions);\r\n    return results.map((entry) => ({\r\n      key: entry.key.slice(base.length),\r\n      value: entry.value\r\n    }));\r\n  };\r\n  nsStorage.setItems = async (items, commonOptions) => {\r\n    const prefixedItems = items.map((item) => ({\r\n      key: base + item.key,\r\n      value: item.value,\r\n      options: item.options\r\n    }));\r\n    return storage.setItems(prefixedItems, commonOptions);\r\n  };\r\n  return nsStorage;\r\n}\r\nfunction normalizeKey(key) {\r\n  if (!key) {\r\n    return \"\";\r\n  }\r\n  return key.split(\"?\")[0]?.replace(/[/\\\\]/g, \":\").replace(/:+/g, \":\").replace(/^:|:$/g, \"\") || \"\";\r\n}\r\nfunction joinKeys(...keys) {\r\n  return normalizeKey(keys.join(\":\"));\r\n}\r\nfunction normalizeBaseKey(base) {\r\n  base = normalizeKey(base);\r\n  return base ? base + \":\" : \"\";\r\n}\r\nfunction filterKeyByDepth(key, depth) {\r\n  if (depth === void 0) {\r\n    return true;\r\n  }\r\n  let substrCount = 0;\r\n  let index = key.indexOf(\":\");\r\n  while (index > -1) {\r\n    substrCount++;\r\n    index = key.indexOf(\":\", index + 1);\r\n  }\r\n  return substrCount <= depth;\r\n}\r\nfunction filterKeyByBase(key, base) {\r\n  if (base) {\r\n    return key.startsWith(base) && key[key.length - 1] !== \"$\";\r\n  }\r\n  return key[key.length - 1] !== \"$\";\r\n}\r\n\r\nexport { normalizeKey as a, asyncCall as b, filterKeyByBase as c, stringify as d, deserializeRaw as e, filterKeyByDepth as f, joinKeys as j, normalizeBaseKey as n, prefixStorage as p, serializeRaw as s };\r\n", "import destr from 'destr';\r\nimport { n as normalizeBaseKey, a as normalizeKey, b as asyncCall, f as filterKeyByDepth, c as filterKeyByBase, s as serializeRaw, d as stringify, e as deserializeRaw, j as joinKeys } from './shared/unstorage.CoCt7NXC.mjs';\r\nexport { p as prefixStorage } from './shared/unstorage.CoCt7NXC.mjs';\r\n\r\nfunction defineDriver(factory) {\r\n  return factory;\r\n}\r\n\r\nconst DRIVER_NAME = \"memory\";\r\nconst memory = defineDriver(() => {\r\n  const data = /* @__PURE__ */ new Map();\r\n  return {\r\n    name: DRIVER_NAME,\r\n    getInstance: () => data,\r\n    hasItem(key) {\r\n      return data.has(key);\r\n    },\r\n    getItem(key) {\r\n      return data.get(key) ?? null;\r\n    },\r\n    getItemRaw(key) {\r\n      return data.get(key) ?? null;\r\n    },\r\n    setItem(key, value) {\r\n      data.set(key, value);\r\n    },\r\n    setItemRaw(key, value) {\r\n      data.set(key, value);\r\n    },\r\n    removeItem(key) {\r\n      data.delete(key);\r\n    },\r\n    getKeys() {\r\n      return [...data.keys()];\r\n    },\r\n    clear() {\r\n      data.clear();\r\n    },\r\n    dispose() {\r\n      data.clear();\r\n    }\r\n  };\r\n});\r\n\r\nfunction createStorage(options = {}) {\r\n  const context = {\r\n    mounts: { \"\": options.driver || memory() },\r\n    mountpoints: [\"\"],\r\n    watching: false,\r\n    watchListeners: [],\r\n    unwatch: {}\r\n  };\r\n  const getMount = (key) => {\r\n    for (const base of context.mountpoints) {\r\n      if (key.startsWith(base)) {\r\n        return {\r\n          base,\r\n          relativeKey: key.slice(base.length),\r\n          driver: context.mounts[base]\r\n        };\r\n      }\r\n    }\r\n    return {\r\n      base: \"\",\r\n      relativeKey: key,\r\n      driver: context.mounts[\"\"]\r\n    };\r\n  };\r\n  const getMounts = (base, includeParent) => {\r\n    return context.mountpoints.filter(\r\n      (mountpoint) => mountpoint.startsWith(base) || includeParent && base.startsWith(mountpoint)\r\n    ).map((mountpoint) => ({\r\n      relativeBase: base.length > mountpoint.length ? base.slice(mountpoint.length) : void 0,\r\n      mountpoint,\r\n      driver: context.mounts[mountpoint]\r\n    }));\r\n  };\r\n  const onChange = (event, key) => {\r\n    if (!context.watching) {\r\n      return;\r\n    }\r\n    key = normalizeKey(key);\r\n    for (const listener of context.watchListeners) {\r\n      listener(event, key);\r\n    }\r\n  };\r\n  const startWatch = async () => {\r\n    if (context.watching) {\r\n      return;\r\n    }\r\n    context.watching = true;\r\n    for (const mountpoint in context.mounts) {\r\n      context.unwatch[mountpoint] = await watch(\r\n        context.mounts[mountpoint],\r\n        onChange,\r\n        mountpoint\r\n      );\r\n    }\r\n  };\r\n  const stopWatch = async () => {\r\n    if (!context.watching) {\r\n      return;\r\n    }\r\n    for (const mountpoint in context.unwatch) {\r\n      await context.unwatch[mountpoint]();\r\n    }\r\n    context.unwatch = {};\r\n    context.watching = false;\r\n  };\r\n  const runBatch = (items, commonOptions, cb) => {\r\n    const batches = /* @__PURE__ */ new Map();\r\n    const getBatch = (mount) => {\r\n      let batch = batches.get(mount.base);\r\n      if (!batch) {\r\n        batch = {\r\n          driver: mount.driver,\r\n          base: mount.base,\r\n          items: []\r\n        };\r\n        batches.set(mount.base, batch);\r\n      }\r\n      return batch;\r\n    };\r\n    for (const item of items) {\r\n      const isStringItem = typeof item === \"string\";\r\n      const key = normalizeKey(isStringItem ? item : item.key);\r\n      const value = isStringItem ? void 0 : item.value;\r\n      const options2 = isStringItem || !item.options ? commonOptions : { ...commonOptions, ...item.options };\r\n      const mount = getMount(key);\r\n      getBatch(mount).items.push({\r\n        key,\r\n        value,\r\n        relativeKey: mount.relativeKey,\r\n        options: options2\r\n      });\r\n    }\r\n    return Promise.all([...batches.values()].map((batch) => cb(batch))).then(\r\n      (r) => r.flat()\r\n    );\r\n  };\r\n  const storage = {\r\n    // Item\r\n    hasItem(key, opts = {}) {\r\n      key = normalizeKey(key);\r\n      const { relativeKey, driver } = getMount(key);\r\n      return asyncCall(driver.hasItem, relativeKey, opts);\r\n    },\r\n    getItem(key, opts = {}) {\r\n      key = normalizeKey(key);\r\n      const { relativeKey, driver } = getMount(key);\r\n      return asyncCall(driver.getItem, relativeKey, opts).then(\r\n        (value) => destr(value)\r\n      );\r\n    },\r\n    getItems(items, commonOptions = {}) {\r\n      return runBatch(items, commonOptions, (batch) => {\r\n        if (batch.driver.getItems) {\r\n          return asyncCall(\r\n            batch.driver.getItems,\r\n            batch.items.map((item) => ({\r\n              key: item.relativeKey,\r\n              options: item.options\r\n            })),\r\n            commonOptions\r\n          ).then(\r\n            (r) => r.map((item) => ({\r\n              key: joinKeys(batch.base, item.key),\r\n              value: destr(item.value)\r\n            }))\r\n          );\r\n        }\r\n        return Promise.all(\r\n          batch.items.map((item) => {\r\n            return asyncCall(\r\n              batch.driver.getItem,\r\n              item.relativeKey,\r\n              item.options\r\n            ).then((value) => ({\r\n              key: item.key,\r\n              value: destr(value)\r\n            }));\r\n          })\r\n        );\r\n      });\r\n    },\r\n    getItemRaw(key, opts = {}) {\r\n      key = normalizeKey(key);\r\n      const { relativeKey, driver } = getMount(key);\r\n      if (driver.getItemRaw) {\r\n        return asyncCall(driver.getItemRaw, relativeKey, opts);\r\n      }\r\n      return asyncCall(driver.getItem, relativeKey, opts).then(\r\n        (value) => deserializeRaw(value)\r\n      );\r\n    },\r\n    async setItem(key, value, opts = {}) {\r\n      if (value === void 0) {\r\n        return storage.removeItem(key);\r\n      }\r\n      key = normalizeKey(key);\r\n      const { relativeKey, driver } = getMount(key);\r\n      if (!driver.setItem) {\r\n        return;\r\n      }\r\n      await asyncCall(driver.setItem, relativeKey, stringify(value), opts);\r\n      if (!driver.watch) {\r\n        onChange(\"update\", key);\r\n      }\r\n    },\r\n    async setItems(items, commonOptions) {\r\n      await runBatch(items, commonOptions, async (batch) => {\r\n        if (batch.driver.setItems) {\r\n          return asyncCall(\r\n            batch.driver.setItems,\r\n            batch.items.map((item) => ({\r\n              key: item.relativeKey,\r\n              value: stringify(item.value),\r\n              options: item.options\r\n            })),\r\n            commonOptions\r\n          );\r\n        }\r\n        if (!batch.driver.setItem) {\r\n          return;\r\n        }\r\n        await Promise.all(\r\n          batch.items.map((item) => {\r\n            return asyncCall(\r\n              batch.driver.setItem,\r\n              item.relativeKey,\r\n              stringify(item.value),\r\n              item.options\r\n            );\r\n          })\r\n        );\r\n      });\r\n    },\r\n    async setItemRaw(key, value, opts = {}) {\r\n      if (value === void 0) {\r\n        return storage.removeItem(key, opts);\r\n      }\r\n      key = normalizeKey(key);\r\n      const { relativeKey, driver } = getMount(key);\r\n      if (driver.setItemRaw) {\r\n        await asyncCall(driver.setItemRaw, relativeKey, value, opts);\r\n      } else if (driver.setItem) {\r\n        await asyncCall(driver.setItem, relativeKey, serializeRaw(value), opts);\r\n      } else {\r\n        return;\r\n      }\r\n      if (!driver.watch) {\r\n        onChange(\"update\", key);\r\n      }\r\n    },\r\n    async removeItem(key, opts = {}) {\r\n      if (typeof opts === \"boolean\") {\r\n        opts = { removeMeta: opts };\r\n      }\r\n      key = normalizeKey(key);\r\n      const { relativeKey, driver } = getMount(key);\r\n      if (!driver.removeItem) {\r\n        return;\r\n      }\r\n      await asyncCall(driver.removeItem, relativeKey, opts);\r\n      if (opts.removeMeta || opts.removeMata) {\r\n        await asyncCall(driver.removeItem, relativeKey + \"$\", opts);\r\n      }\r\n      if (!driver.watch) {\r\n        onChange(\"remove\", key);\r\n      }\r\n    },\r\n    // Meta\r\n    async getMeta(key, opts = {}) {\r\n      if (typeof opts === \"boolean\") {\r\n        opts = { nativeOnly: opts };\r\n      }\r\n      key = normalizeKey(key);\r\n      const { relativeKey, driver } = getMount(key);\r\n      const meta = /* @__PURE__ */ Object.create(null);\r\n      if (driver.getMeta) {\r\n        Object.assign(meta, await asyncCall(driver.getMeta, relativeKey, opts));\r\n      }\r\n      if (!opts.nativeOnly) {\r\n        const value = await asyncCall(\r\n          driver.getItem,\r\n          relativeKey + \"$\",\r\n          opts\r\n        ).then((value_) => destr(value_));\r\n        if (value && typeof value === \"object\") {\r\n          if (typeof value.atime === \"string\") {\r\n            value.atime = new Date(value.atime);\r\n          }\r\n          if (typeof value.mtime === \"string\") {\r\n            value.mtime = new Date(value.mtime);\r\n          }\r\n          Object.assign(meta, value);\r\n        }\r\n      }\r\n      return meta;\r\n    },\r\n    setMeta(key, value, opts = {}) {\r\n      return this.setItem(key + \"$\", value, opts);\r\n    },\r\n    removeMeta(key, opts = {}) {\r\n      return this.removeItem(key + \"$\", opts);\r\n    },\r\n    // Keys\r\n    async getKeys(base, opts = {}) {\r\n      base = normalizeBaseKey(base);\r\n      const mounts = getMounts(base, true);\r\n      let maskedMounts = [];\r\n      const allKeys = [];\r\n      let allMountsSupportMaxDepth = true;\r\n      for (const mount of mounts) {\r\n        if (!mount.driver.flags?.maxDepth) {\r\n          allMountsSupportMaxDepth = false;\r\n        }\r\n        const rawKeys = await asyncCall(\r\n          mount.driver.getKeys,\r\n          mount.relativeBase,\r\n          opts\r\n        );\r\n        for (const key of rawKeys) {\r\n          const fullKey = mount.mountpoint + normalizeKey(key);\r\n          if (!maskedMounts.some((p) => fullKey.startsWith(p))) {\r\n            allKeys.push(fullKey);\r\n          }\r\n        }\r\n        maskedMounts = [\r\n          mount.mountpoint,\r\n          ...maskedMounts.filter((p) => !p.startsWith(mount.mountpoint))\r\n        ];\r\n      }\r\n      const shouldFilterByDepth = opts.maxDepth !== void 0 && !allMountsSupportMaxDepth;\r\n      return allKeys.filter(\r\n        (key) => (!shouldFilterByDepth || filterKeyByDepth(key, opts.maxDepth)) && filterKeyByBase(key, base)\r\n      );\r\n    },\r\n    // Utils\r\n    async clear(base, opts = {}) {\r\n      base = normalizeBaseKey(base);\r\n      await Promise.all(\r\n        getMounts(base, false).map(async (m) => {\r\n          if (m.driver.clear) {\r\n            return asyncCall(m.driver.clear, m.relativeBase, opts);\r\n          }\r\n          if (m.driver.removeItem) {\r\n            const keys = await m.driver.getKeys(m.relativeBase || \"\", opts);\r\n            return Promise.all(\r\n              keys.map((key) => m.driver.removeItem(key, opts))\r\n            );\r\n          }\r\n        })\r\n      );\r\n    },\r\n    async dispose() {\r\n      await Promise.all(\r\n        Object.values(context.mounts).map((driver) => dispose(driver))\r\n      );\r\n    },\r\n    async watch(callback) {\r\n      await startWatch();\r\n      context.watchListeners.push(callback);\r\n      return async () => {\r\n        context.watchListeners = context.watchListeners.filter(\r\n          (listener) => listener !== callback\r\n        );\r\n        if (context.watchListeners.length === 0) {\r\n          await stopWatch();\r\n        }\r\n      };\r\n    },\r\n    async unwatch() {\r\n      context.watchListeners = [];\r\n      await stopWatch();\r\n    },\r\n    // Mount\r\n    mount(base, driver) {\r\n      base = normalizeBaseKey(base);\r\n      if (base && context.mounts[base]) {\r\n        throw new Error(`already mounted at ${base}`);\r\n      }\r\n      if (base) {\r\n        context.mountpoints.push(base);\r\n        context.mountpoints.sort((a, b) => b.length - a.length);\r\n      }\r\n      context.mounts[base] = driver;\r\n      if (context.watching) {\r\n        Promise.resolve(watch(driver, onChange, base)).then((unwatcher) => {\r\n          context.unwatch[base] = unwatcher;\r\n        }).catch(console.error);\r\n      }\r\n      return storage;\r\n    },\r\n    async unmount(base, _dispose = true) {\r\n      base = normalizeBaseKey(base);\r\n      if (!base || !context.mounts[base]) {\r\n        return;\r\n      }\r\n      if (context.watching && base in context.unwatch) {\r\n        context.unwatch[base]?.();\r\n        delete context.unwatch[base];\r\n      }\r\n      if (_dispose) {\r\n        await dispose(context.mounts[base]);\r\n      }\r\n      context.mountpoints = context.mountpoints.filter((key) => key !== base);\r\n      delete context.mounts[base];\r\n    },\r\n    getMount(key = \"\") {\r\n      key = normalizeKey(key) + \":\";\r\n      const m = getMount(key);\r\n      return {\r\n        driver: m.driver,\r\n        base: m.base\r\n      };\r\n    },\r\n    getMounts(base = \"\", opts = {}) {\r\n      base = normalizeKey(base);\r\n      const mounts = getMounts(base, opts.parents);\r\n      return mounts.map((m) => ({\r\n        driver: m.driver,\r\n        base: m.mountpoint\r\n      }));\r\n    },\r\n    // Aliases\r\n    keys: (base, opts = {}) => storage.getKeys(base, opts),\r\n    get: (key, opts = {}) => storage.getItem(key, opts),\r\n    set: (key, value, opts = {}) => storage.setItem(key, value, opts),\r\n    has: (key, opts = {}) => storage.hasItem(key, opts),\r\n    del: (key, opts = {}) => storage.removeItem(key, opts),\r\n    remove: (key, opts = {}) => storage.removeItem(key, opts)\r\n  };\r\n  return storage;\r\n}\r\nasync function snapshot(storage, base) {\r\n  base = normalizeBaseKey(base);\r\n  const keys = await storage.getKeys(base);\r\n  const snapshot2 = {};\r\n  await Promise.all(\r\n    keys.map(async (key) => {\r\n      snapshot2[key.slice(base.length)] = await storage.getItem(key);\r\n    })\r\n  );\r\n  return snapshot2;\r\n}\r\nasync function restoreSnapshot(driver, snapshot2, base = \"\") {\r\n  base = normalizeBaseKey(base);\r\n  await Promise.all(\r\n    Object.entries(snapshot2).map((e) => driver.setItem(base + e[0], e[1]))\r\n  );\r\n}\r\nfunction watch(driver, onChange, base) {\r\n  return driver.watch ? driver.watch((event, key) => onChange(event, base + key)) : () => {\r\n  };\r\n}\r\nasync function dispose(driver) {\r\n  if (typeof driver.dispose === \"function\") {\r\n    await asyncCall(driver.dispose);\r\n  }\r\n}\r\n\r\nconst builtinDrivers = {\r\n  \"azure-app-configuration\": \"unstorage/drivers/azure-app-configuration\",\r\n  \"azureAppConfiguration\": \"unstorage/drivers/azure-app-configuration\",\r\n  \"azure-cosmos\": \"unstorage/drivers/azure-cosmos\",\r\n  \"azureCosmos\": \"unstorage/drivers/azure-cosmos\",\r\n  \"azure-key-vault\": \"unstorage/drivers/azure-key-vault\",\r\n  \"azureKeyVault\": \"unstorage/drivers/azure-key-vault\",\r\n  \"azure-storage-blob\": \"unstorage/drivers/azure-storage-blob\",\r\n  \"azureStorageBlob\": \"unstorage/drivers/azure-storage-blob\",\r\n  \"azure-storage-table\": \"unstorage/drivers/azure-storage-table\",\r\n  \"azureStorageTable\": \"unstorage/drivers/azure-storage-table\",\r\n  \"capacitor-preferences\": \"unstorage/drivers/capacitor-preferences\",\r\n  \"capacitorPreferences\": \"unstorage/drivers/capacitor-preferences\",\r\n  \"cloudflare-kv-binding\": \"unstorage/drivers/cloudflare-kv-binding\",\r\n  \"cloudflareKVBinding\": \"unstorage/drivers/cloudflare-kv-binding\",\r\n  \"cloudflare-kv-http\": \"unstorage/drivers/cloudflare-kv-http\",\r\n  \"cloudflareKVHttp\": \"unstorage/drivers/cloudflare-kv-http\",\r\n  \"cloudflare-r2-binding\": \"unstorage/drivers/cloudflare-r2-binding\",\r\n  \"cloudflareR2Binding\": \"unstorage/drivers/cloudflare-r2-binding\",\r\n  \"db0\": \"unstorage/drivers/db0\",\r\n  \"deno-kv-node\": \"unstorage/drivers/deno-kv-node\",\r\n  \"denoKVNode\": \"unstorage/drivers/deno-kv-node\",\r\n  \"deno-kv\": \"unstorage/drivers/deno-kv\",\r\n  \"denoKV\": \"unstorage/drivers/deno-kv\",\r\n  \"fs-lite\": \"unstorage/drivers/fs-lite\",\r\n  \"fsLite\": \"unstorage/drivers/fs-lite\",\r\n  \"fs\": \"unstorage/drivers/fs\",\r\n  \"github\": \"unstorage/drivers/github\",\r\n  \"http\": \"unstorage/drivers/http\",\r\n  \"indexedb\": \"unstorage/drivers/indexedb\",\r\n  \"localstorage\": \"unstorage/drivers/localstorage\",\r\n  \"lru-cache\": \"unstorage/drivers/lru-cache\",\r\n  \"lruCache\": \"unstorage/drivers/lru-cache\",\r\n  \"memory\": \"unstorage/drivers/memory\",\r\n  \"mongodb\": \"unstorage/drivers/mongodb\",\r\n  \"netlify-blobs\": \"unstorage/drivers/netlify-blobs\",\r\n  \"netlifyBlobs\": \"unstorage/drivers/netlify-blobs\",\r\n  \"null\": \"unstorage/drivers/null\",\r\n  \"overlay\": \"unstorage/drivers/overlay\",\r\n  \"planetscale\": \"unstorage/drivers/planetscale\",\r\n  \"redis\": \"unstorage/drivers/redis\",\r\n  \"s3\": \"unstorage/drivers/s3\",\r\n  \"session-storage\": \"unstorage/drivers/session-storage\",\r\n  \"sessionStorage\": \"unstorage/drivers/session-storage\",\r\n  \"uploadthing\": \"unstorage/drivers/uploadthing\",\r\n  \"upstash\": \"unstorage/drivers/upstash\",\r\n  \"vercel-blob\": \"unstorage/drivers/vercel-blob\",\r\n  \"vercelBlob\": \"unstorage/drivers/vercel-blob\",\r\n  \"vercel-kv\": \"unstorage/drivers/vercel-kv\",\r\n  \"vercelKV\": \"unstorage/drivers/vercel-kv\"\r\n};\r\n\r\nexport { builtinDrivers, createStorage, defineDriver, filterKeyByBase, filterKeyByDepth, joinKeys, normalizeBaseKey, normalizeKey, restoreSnapshot, snapshot };\r\n"],
  "mappings": "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",
  "names": ["secp256k1", "r", "v", "yParityOrV", "recoveryBit", "A", "B", "C", "D", "E", "i", "F", "K", "T", "_", "L", "R", "j", "k", "x", "y", "z", "h2", "h3", "ar", "br", "cr", "dr", "er", "rr", "sr", "tr", "keccak256", "as", "LruMap", "size", "LruMap", "InvalidAddressError", "checksum", "keccak256", "i", "InvalidAddressError", "arrayRegex", "bytesRegex", "integerRegex", "maxUint256", "PositionOutOfBoundsError", "size", "PositionOutOfBoundsError", "encodePacked", "i", "encode", "fromString", "integerRegex", "size", "bytesRegex", "BytesSizeMismatchError", "arrayRegex", "BytesSizeMismatchError", "size", "encode", "decode", "i", "size", "keys", "encode", "i", "j", "size", "decode", "size", "concat", "encode", "decode", "string", "i", "fromString", "string", "toString", "stringify", "c", "keys", "r", "stringify", "p", "m", "keys", "a", "b"]
}

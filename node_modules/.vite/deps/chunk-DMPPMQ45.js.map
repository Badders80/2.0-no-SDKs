{
  "version": 3,
  "sources": ["../../@noble/hashes/src/crypto.ts", "../../@noble/hashes/src/_assert.ts", "../../@noble/hashes/src/utils.ts", "../../@noble/hashes/src/_md.ts", "../../@noble/hashes/src/sha256.ts", "../../@noble/hashes/src/crypto.ts", "../../@noble/hashes/src/_assert.ts", "../../@noble/hashes/src/utils.ts", "../../@noble/hashes/src/_u64.ts"],
  "sourcesContent": ["// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// See utils.ts for details.\r\ndeclare const globalThis: Record<string, any> | undefined;\r\nexport const crypto =\r\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\r\n", "function number(n: number) {\r\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\r\n}\r\n\r\nfunction bool(b: boolean) {\r\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\r\n}\r\n\r\n// copied from utils\r\nexport function isBytes(a: unknown): a is Uint8Array {\r\n  return (\r\n    a instanceof Uint8Array ||\r\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\r\n  );\r\n}\r\n\r\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\r\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\r\n  if (lengths.length > 0 && !lengths.includes(b.length))\r\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\r\n}\r\n\r\ntype Hash = {\r\n  (data: Uint8Array): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create: any;\r\n};\r\nfunction hash(h: Hash) {\r\n  if (typeof h !== 'function' || typeof h.create !== 'function')\r\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\r\n  number(h.outputLen);\r\n  number(h.blockLen);\r\n}\r\n\r\nfunction exists(instance: any, checkFinished = true) {\r\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\r\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\r\n}\r\nfunction output(out: any, instance: any) {\r\n  bytes(out);\r\n  const min = instance.outputLen;\r\n  if (out.length < min) {\r\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\r\n  }\r\n}\r\n\r\nexport { number, bool, bytes, hash, exists, output };\r\n\r\nconst assert = { number, bool, bytes, hash, exists, output };\r\nexport default assert;\r\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n\r\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// node.js versions earlier than v19 don't declare it in global scope.\r\n// For node.js, package.json#exports field mapping rewrites import\r\n// from `crypto` to `cryptoNode`, which imports native module.\r\n// Makes the utils un-importable in browsers without a bundler.\r\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\r\nimport { crypto } from '@noble/hashes/crypto';\r\nimport { bytes as abytes } from './_assert.js';\r\n// export { isBytes } from './_assert.js';\r\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\r\nexport function isBytes(a: unknown): a is Uint8Array {\r\n  return (\r\n    a instanceof Uint8Array ||\r\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\r\n  );\r\n}\r\n\r\n// prettier-ignore\r\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\r\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\r\n\r\n// Cast array to different type\r\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\r\nexport const u32 = (arr: TypedArray) =>\r\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\r\n\r\n// Cast array to view\r\nexport const createView = (arr: TypedArray) =>\r\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\r\n\r\n// The rotate right (circular right shift) operation for uint32\r\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\r\n// The rotate left (circular left shift) operation for uint32\r\nexport const rotl = (word: number, shift: number) =>\r\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\r\n\r\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\r\n// The byte swap operation for uint32\r\nexport const byteSwap = (word: number) =>\r\n  ((word << 24) & 0xff000000) |\r\n  ((word << 8) & 0xff0000) |\r\n  ((word >>> 8) & 0xff00) |\r\n  ((word >>> 24) & 0xff);\r\n// Conditionally byte swap if on a big-endian platform\r\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\r\n\r\n// In place byte swap for Uint32Array\r\nexport function byteSwap32(arr: Uint32Array) {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i] = byteSwap(arr[i]);\r\n  }\r\n}\r\n\r\n// Array where index 0xf0 (240) is mapped to string 'f0'\r\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\r\n  i.toString(16).padStart(2, '0')\r\n);\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes: Uint8Array): string {\r\n  abytes(bytes);\r\n  // pre-caching improves the speed 6x\r\n  let hex = '';\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    hex += hexes[bytes[i]];\r\n  }\r\n  return hex;\r\n}\r\n\r\n// We use optimized technique to convert hex string to byte array\r\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\r\nfunction asciiToBase16(char: number): number | undefined {\r\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\r\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\r\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\r\n  return;\r\n}\r\n\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex: string): Uint8Array {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  const hl = hex.length;\r\n  const al = hl / 2;\r\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\r\n  const array = new Uint8Array(al);\r\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\r\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\r\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\r\n    if (n1 === undefined || n2 === undefined) {\r\n      const char = hex[hi] + hex[hi + 1];\r\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\r\n    }\r\n    array[ai] = n1 * 16 + n2;\r\n  }\r\n  return array;\r\n}\r\n\r\n// There is no setImmediate in browser and setTimeout is slow.\r\n// call of async fn will return Promise, which will be fullfiled only on\r\n// next scheduler queue processing step and this is exactly what we need.\r\nexport const nextTick = async () => {};\r\n\r\n// Returns control to thread each 'tick' ms to avoid blocking\r\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\r\n  let ts = Date.now();\r\n  for (let i = 0; i < iters; i++) {\r\n    cb(i);\r\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\r\n    const diff = Date.now() - ts;\r\n    if (diff >= 0 && diff < tick) continue;\r\n    await nextTick();\r\n    ts += diff;\r\n  }\r\n}\r\n\r\n// Global symbols in both browsers and Node.js since v11\r\n// See https://github.com/microsoft/TypeScript/issues/31535\r\ndeclare const TextEncoder: any;\r\n\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str: string): Uint8Array {\r\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n\r\nexport type Input = Uint8Array | string;\r\n/**\r\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\r\n * Warning: when Uint8Array is passed, it would NOT get copied.\r\n * Keep in mind for future mutable operations.\r\n */\r\nexport function toBytes(data: Input): Uint8Array {\r\n  if (typeof data === 'string') data = utf8ToBytes(data);\r\n  abytes(data);\r\n  return data;\r\n}\r\n\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\r\n  let sum = 0;\r\n  for (let i = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    abytes(a);\r\n    sum += a.length;\r\n  }\r\n  const res = new Uint8Array(sum);\r\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    res.set(a, pad);\r\n    pad += a.length;\r\n  }\r\n  return res;\r\n}\r\n\r\n// For runtime check if class implements interface\r\nexport abstract class Hash<T extends Hash<T>> {\r\n  abstract blockLen: number; // Bytes per block\r\n  abstract outputLen: number; // Bytes in output\r\n  abstract update(buf: Input): this;\r\n  // Writes digest into buf\r\n  abstract digestInto(buf: Uint8Array): void;\r\n  abstract digest(): Uint8Array;\r\n  /**\r\n   * Resets internal state. Makes Hash instance unusable.\r\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\r\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\r\n   */\r\n  abstract destroy(): void;\r\n  /**\r\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\r\n   * when no options are passed.\r\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\r\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\r\n   * There are no guarantees for clean-up because it's impossible in JS.\r\n   */\r\n  abstract _cloneInto(to?: T): T;\r\n  // Safe version that clones internal state\r\n  clone(): T {\r\n    return this._cloneInto();\r\n  }\r\n}\r\n\r\n/**\r\n * XOF: streaming API to read digest in chunks.\r\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\r\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\r\n * destroy state, next call can require more bytes.\r\n */\r\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\r\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\r\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\r\n};\r\n\r\nconst toStr = {}.toString;\r\ntype EmptyObj = {};\r\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\r\n  defaults: T1,\r\n  opts?: T2\r\n): T1 & T2 {\r\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\r\n    throw new Error('Options should be object or undefined');\r\n  const merged = Object.assign(defaults, opts);\r\n  return merged as T1 & T2;\r\n}\r\n\r\nexport type CHash = ReturnType<typeof wrapConstructor>;\r\n\r\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\r\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\r\n  const tmp = hashCons();\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = () => hashCons();\r\n  return hashC;\r\n}\r\n\r\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\r\n  hashCons: (opts?: T) => Hash<H>\r\n) {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\r\n  hashCons: (opts?: T) => HashXOF<H>\r\n) {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\n/**\r\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\r\n */\r\nexport function randomBytes(bytesLength = 32): Uint8Array {\r\n  if (crypto && typeof crypto.getRandomValues === 'function') {\r\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\r\n  }\r\n  throw new Error('crypto.getRandomValues must be defined');\r\n}\r\n", "import { exists, output } from './_assert.js';\r\nimport { Hash, createView, Input, toBytes } from './utils.js';\r\n\r\n// Polyfill for Safari 14\r\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\r\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\r\n  const _32n = BigInt(32);\r\n  const _u32_max = BigInt(0xffffffff);\r\n  const wh = Number((value >> _32n) & _u32_max);\r\n  const wl = Number(value & _u32_max);\r\n  const h = isLE ? 4 : 0;\r\n  const l = isLE ? 0 : 4;\r\n  view.setUint32(byteOffset + h, wh, isLE);\r\n  view.setUint32(byteOffset + l, wl, isLE);\r\n}\r\n\r\n// Choice: a ? b : c\r\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\r\n// Majority function, true if any two inpust is true\r\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\r\n\r\n/**\r\n * Merkle-Damgard hash construction base class.\r\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\r\n */\r\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\r\n  protected abstract process(buf: DataView, offset: number): void;\r\n  protected abstract get(): number[];\r\n  protected abstract set(...args: number[]): void;\r\n  abstract destroy(): void;\r\n  protected abstract roundClean(): void;\r\n  // For partial updates less than block size\r\n  protected buffer: Uint8Array;\r\n  protected view: DataView;\r\n  protected finished = false;\r\n  protected length = 0;\r\n  protected pos = 0;\r\n  protected destroyed = false;\r\n\r\n  constructor(\r\n    readonly blockLen: number,\r\n    public outputLen: number,\r\n    readonly padOffset: number,\r\n    readonly isLE: boolean\r\n  ) {\r\n    super();\r\n    this.buffer = new Uint8Array(blockLen);\r\n    this.view = createView(this.buffer);\r\n  }\r\n  update(data: Input): this {\r\n    exists(this);\r\n    const { view, buffer, blockLen } = this;\r\n    data = toBytes(data);\r\n    const len = data.length;\r\n    for (let pos = 0; pos < len; ) {\r\n      const take = Math.min(blockLen - this.pos, len - pos);\r\n      // Fast path: we have at least one block in input, cast it to view and process\r\n      if (take === blockLen) {\r\n        const dataView = createView(data);\r\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\r\n        continue;\r\n      }\r\n      buffer.set(data.subarray(pos, pos + take), this.pos);\r\n      this.pos += take;\r\n      pos += take;\r\n      if (this.pos === blockLen) {\r\n        this.process(view, 0);\r\n        this.pos = 0;\r\n      }\r\n    }\r\n    this.length += data.length;\r\n    this.roundClean();\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array) {\r\n    exists(this);\r\n    output(out, this);\r\n    this.finished = true;\r\n    // Padding\r\n    // We can avoid allocation of buffer for padding completely if it\r\n    // was previously not allocated here. But it won't change performance.\r\n    const { buffer, view, blockLen, isLE } = this;\r\n    let { pos } = this;\r\n    // append the bit '1' to the message\r\n    buffer[pos++] = 0b10000000;\r\n    this.buffer.subarray(pos).fill(0);\r\n    // we have less than padOffset left in buffer, so we cannot put length in\r\n    // current block, need process it and pad again\r\n    if (this.padOffset > blockLen - pos) {\r\n      this.process(view, 0);\r\n      pos = 0;\r\n    }\r\n    // Pad until full block byte with zeros\r\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\r\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\r\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\r\n    // So we just write lowest 64 bits of that value.\r\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\r\n    this.process(view, 0);\r\n    const oview = createView(out);\r\n    const len = this.outputLen;\r\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\r\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\r\n    const outLen = len / 4;\r\n    const state = this.get();\r\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\r\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\r\n  }\r\n  digest() {\r\n    const { buffer, outputLen } = this;\r\n    this.digestInto(buffer);\r\n    const res = buffer.slice(0, outputLen);\r\n    this.destroy();\r\n    return res;\r\n  }\r\n  _cloneInto(to?: T): T {\r\n    to ||= new (this.constructor as any)() as T;\r\n    to.set(...this.get());\r\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\r\n    to.length = length;\r\n    to.pos = pos;\r\n    to.finished = finished;\r\n    to.destroyed = destroyed;\r\n    if (length % blockLen) to.buffer.set(buffer);\r\n    return to;\r\n  }\r\n}\r\n", "import { HashMD, Chi, Maj } from './_md.js';\r\nimport { rotr, wrapConstructor } from './utils.js';\r\n\r\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\r\n// BTC network is doing 2^67 hashes/sec as per early 2023.\r\n\r\n// Round constants:\r\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\r\n// prettier-ignore\r\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\r\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n]);\r\n\r\n// Initial state:\r\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\r\n// prettier-ignore\r\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\r\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\r\n]);\r\n\r\n// Temporary buffer, not used to store anything between runs\r\n// Named this way because it matches specification.\r\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\r\nclass SHA256 extends HashMD<SHA256> {\r\n  // We cannot use array here since array allows indexing by variable\r\n  // which means optimizer/compiler cannot use registers.\r\n  A = SHA256_IV[0] | 0;\r\n  B = SHA256_IV[1] | 0;\r\n  C = SHA256_IV[2] | 0;\r\n  D = SHA256_IV[3] | 0;\r\n  E = SHA256_IV[4] | 0;\r\n  F = SHA256_IV[5] | 0;\r\n  G = SHA256_IV[6] | 0;\r\n  H = SHA256_IV[7] | 0;\r\n\r\n  constructor() {\r\n    super(64, 32, 8, false);\r\n  }\r\n  protected get(): [number, number, number, number, number, number, number, number] {\r\n    const { A, B, C, D, E, F, G, H } = this;\r\n    return [A, B, C, D, E, F, G, H];\r\n  }\r\n  // prettier-ignore\r\n  protected set(\r\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\r\n  ) {\r\n    this.A = A | 0;\r\n    this.B = B | 0;\r\n    this.C = C | 0;\r\n    this.D = D | 0;\r\n    this.E = E | 0;\r\n    this.F = F | 0;\r\n    this.G = G | 0;\r\n    this.H = H | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\r\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\r\n    for (let i = 16; i < 64; i++) {\r\n      const W15 = SHA256_W[i - 15];\r\n      const W2 = SHA256_W[i - 2];\r\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\r\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\r\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\r\n    }\r\n    // Compression function main loop, 64 rounds\r\n    let { A, B, C, D, E, F, G, H } = this;\r\n    for (let i = 0; i < 64; i++) {\r\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\r\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\r\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\r\n      H = G;\r\n      G = F;\r\n      F = E;\r\n      E = (D + T1) | 0;\r\n      D = C;\r\n      C = B;\r\n      B = A;\r\n      A = (T1 + T2) | 0;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    A = (A + this.A) | 0;\r\n    B = (B + this.B) | 0;\r\n    C = (C + this.C) | 0;\r\n    D = (D + this.D) | 0;\r\n    E = (E + this.E) | 0;\r\n    F = (F + this.F) | 0;\r\n    G = (G + this.G) | 0;\r\n    H = (H + this.H) | 0;\r\n    this.set(A, B, C, D, E, F, G, H);\r\n  }\r\n  protected roundClean() {\r\n    SHA256_W.fill(0);\r\n  }\r\n  destroy() {\r\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\r\n    this.buffer.fill(0);\r\n  }\r\n}\r\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\r\nclass SHA224 extends SHA256 {\r\n  A = 0xc1059ed8 | 0;\r\n  B = 0x367cd507 | 0;\r\n  C = 0x3070dd17 | 0;\r\n  D = 0xf70e5939 | 0;\r\n  E = 0xffc00b31 | 0;\r\n  F = 0x68581511 | 0;\r\n  G = 0x64f98fa7 | 0;\r\n  H = 0xbefa4fa4 | 0;\r\n  constructor() {\r\n    super();\r\n    this.outputLen = 28;\r\n  }\r\n}\r\n\r\n/**\r\n * SHA2-256 hash function\r\n * @param message - data that would be hashed\r\n */\r\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\r\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\r\n", "// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// See utils.ts for details.\r\ndeclare const globalThis: Record<string, any> | undefined;\r\nexport const crypto =\r\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\r\n", "function number(n: number) {\r\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\r\n}\r\n\r\nfunction bool(b: boolean) {\r\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\r\n}\r\n\r\n// copied from utils\r\nexport function isBytes(a: unknown): a is Uint8Array {\r\n  return (\r\n    a instanceof Uint8Array ||\r\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\r\n  );\r\n}\r\n\r\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\r\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\r\n  if (lengths.length > 0 && !lengths.includes(b.length))\r\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\r\n}\r\n\r\ntype Hash = {\r\n  (data: Uint8Array): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create: any;\r\n};\r\nfunction hash(h: Hash) {\r\n  if (typeof h !== 'function' || typeof h.create !== 'function')\r\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\r\n  number(h.outputLen);\r\n  number(h.blockLen);\r\n}\r\n\r\nfunction exists(instance: any, checkFinished = true) {\r\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\r\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\r\n}\r\nfunction output(out: any, instance: any) {\r\n  bytes(out);\r\n  const min = instance.outputLen;\r\n  if (out.length < min) {\r\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\r\n  }\r\n}\r\n\r\nexport { number, bool, bytes, hash, exists, output };\r\n\r\nconst assert = { number, bool, bytes, hash, exists, output };\r\nexport default assert;\r\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n\r\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// node.js versions earlier than v19 don't declare it in global scope.\r\n// For node.js, package.json#exports field mapping rewrites import\r\n// from `crypto` to `cryptoNode`, which imports native module.\r\n// Makes the utils un-importable in browsers without a bundler.\r\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\r\nimport { crypto } from '@noble/hashes/crypto';\r\nimport { bytes as abytes } from './_assert.js';\r\n// export { isBytes } from './_assert.js';\r\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\r\nexport function isBytes(a: unknown): a is Uint8Array {\r\n  return (\r\n    a instanceof Uint8Array ||\r\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\r\n  );\r\n}\r\n\r\n// prettier-ignore\r\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\r\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\r\n\r\n// Cast array to different type\r\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\r\nexport const u32 = (arr: TypedArray) =>\r\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\r\n\r\n// Cast array to view\r\nexport const createView = (arr: TypedArray) =>\r\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\r\n\r\n// The rotate right (circular right shift) operation for uint32\r\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\r\n// The rotate left (circular left shift) operation for uint32\r\nexport const rotl = (word: number, shift: number) =>\r\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\r\n\r\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\r\n// The byte swap operation for uint32\r\nexport const byteSwap = (word: number) =>\r\n  ((word << 24) & 0xff000000) |\r\n  ((word << 8) & 0xff0000) |\r\n  ((word >>> 8) & 0xff00) |\r\n  ((word >>> 24) & 0xff);\r\n// Conditionally byte swap if on a big-endian platform\r\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\r\n\r\n// In place byte swap for Uint32Array\r\nexport function byteSwap32(arr: Uint32Array) {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i] = byteSwap(arr[i]);\r\n  }\r\n}\r\n\r\n// Array where index 0xf0 (240) is mapped to string 'f0'\r\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\r\n  i.toString(16).padStart(2, '0')\r\n);\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes: Uint8Array): string {\r\n  abytes(bytes);\r\n  // pre-caching improves the speed 6x\r\n  let hex = '';\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    hex += hexes[bytes[i]];\r\n  }\r\n  return hex;\r\n}\r\n\r\n// We use optimized technique to convert hex string to byte array\r\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\r\nfunction asciiToBase16(char: number): number | undefined {\r\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\r\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\r\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\r\n  return;\r\n}\r\n\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex: string): Uint8Array {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  const hl = hex.length;\r\n  const al = hl / 2;\r\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\r\n  const array = new Uint8Array(al);\r\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\r\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\r\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\r\n    if (n1 === undefined || n2 === undefined) {\r\n      const char = hex[hi] + hex[hi + 1];\r\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\r\n    }\r\n    array[ai] = n1 * 16 + n2;\r\n  }\r\n  return array;\r\n}\r\n\r\n// There is no setImmediate in browser and setTimeout is slow.\r\n// call of async fn will return Promise, which will be fullfiled only on\r\n// next scheduler queue processing step and this is exactly what we need.\r\nexport const nextTick = async () => {};\r\n\r\n// Returns control to thread each 'tick' ms to avoid blocking\r\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\r\n  let ts = Date.now();\r\n  for (let i = 0; i < iters; i++) {\r\n    cb(i);\r\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\r\n    const diff = Date.now() - ts;\r\n    if (diff >= 0 && diff < tick) continue;\r\n    await nextTick();\r\n    ts += diff;\r\n  }\r\n}\r\n\r\n// Global symbols in both browsers and Node.js since v11\r\n// See https://github.com/microsoft/TypeScript/issues/31535\r\ndeclare const TextEncoder: any;\r\n\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str: string): Uint8Array {\r\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n\r\nexport type Input = Uint8Array | string;\r\n/**\r\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\r\n * Warning: when Uint8Array is passed, it would NOT get copied.\r\n * Keep in mind for future mutable operations.\r\n */\r\nexport function toBytes(data: Input): Uint8Array {\r\n  if (typeof data === 'string') data = utf8ToBytes(data);\r\n  abytes(data);\r\n  return data;\r\n}\r\n\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\r\n  let sum = 0;\r\n  for (let i = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    abytes(a);\r\n    sum += a.length;\r\n  }\r\n  const res = new Uint8Array(sum);\r\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    res.set(a, pad);\r\n    pad += a.length;\r\n  }\r\n  return res;\r\n}\r\n\r\n// For runtime check if class implements interface\r\nexport abstract class Hash<T extends Hash<T>> {\r\n  abstract blockLen: number; // Bytes per block\r\n  abstract outputLen: number; // Bytes in output\r\n  abstract update(buf: Input): this;\r\n  // Writes digest into buf\r\n  abstract digestInto(buf: Uint8Array): void;\r\n  abstract digest(): Uint8Array;\r\n  /**\r\n   * Resets internal state. Makes Hash instance unusable.\r\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\r\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\r\n   */\r\n  abstract destroy(): void;\r\n  /**\r\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\r\n   * when no options are passed.\r\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\r\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\r\n   * There are no guarantees for clean-up because it's impossible in JS.\r\n   */\r\n  abstract _cloneInto(to?: T): T;\r\n  // Safe version that clones internal state\r\n  clone(): T {\r\n    return this._cloneInto();\r\n  }\r\n}\r\n\r\n/**\r\n * XOF: streaming API to read digest in chunks.\r\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\r\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\r\n * destroy state, next call can require more bytes.\r\n */\r\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\r\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\r\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\r\n};\r\n\r\nconst toStr = {}.toString;\r\ntype EmptyObj = {};\r\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\r\n  defaults: T1,\r\n  opts?: T2\r\n): T1 & T2 {\r\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\r\n    throw new Error('Options should be object or undefined');\r\n  const merged = Object.assign(defaults, opts);\r\n  return merged as T1 & T2;\r\n}\r\n\r\nexport type CHash = ReturnType<typeof wrapConstructor>;\r\n\r\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\r\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\r\n  const tmp = hashCons();\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = () => hashCons();\r\n  return hashC;\r\n}\r\n\r\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\r\n  hashCons: (opts?: T) => Hash<H>\r\n) {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\r\n  hashCons: (opts?: T) => HashXOF<H>\r\n) {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\n/**\r\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\r\n */\r\nexport function randomBytes(bytesLength = 32): Uint8Array {\r\n  if (crypto && typeof crypto.getRandomValues === 'function') {\r\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\r\n  }\r\n  throw new Error('crypto.getRandomValues must be defined');\r\n}\r\n", "const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\r\nconst _32n = /* @__PURE__ */ BigInt(32);\r\n\r\n// We are not using BigUint64Array, because they are extremely slow as per 2022\r\nfunction fromBig(n: bigint, le = false) {\r\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\r\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\r\n}\r\n\r\nfunction split(lst: bigint[], le = false) {\r\n  let Ah = new Uint32Array(lst.length);\r\n  let Al = new Uint32Array(lst.length);\r\n  for (let i = 0; i < lst.length; i++) {\r\n    const { h, l } = fromBig(lst[i], le);\r\n    [Ah[i], Al[i]] = [h, l];\r\n  }\r\n  return [Ah, Al];\r\n}\r\n\r\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\r\n// for Shift in [0, 32)\r\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\r\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\r\n// Right rotate for Shift in [1, 32)\r\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\r\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\r\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\r\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\r\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\r\n// Right rotate for shift===32 (just swaps l&h)\r\nconst rotr32H = (_h: number, l: number) => l;\r\nconst rotr32L = (h: number, _l: number) => h;\r\n// Left rotate for Shift in [1, 32)\r\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\r\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\r\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\r\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\r\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\r\n\r\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\r\n// simple take carry out of low bit sum by shift, we need to use division.\r\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\r\n  const l = (Al >>> 0) + (Bl >>> 0);\r\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\r\n}\r\n// Addition with more than 2 elements\r\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\r\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\r\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\r\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\r\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\r\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\r\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\r\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\r\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\r\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\r\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\r\n\r\n// prettier-ignore\r\nexport {\r\n  fromBig, split, toBig,\r\n  shrSH, shrSL,\r\n  rotrSH, rotrSL, rotrBH, rotrBL,\r\n  rotr32H, rotr32L,\r\n  rotlSH, rotlSL, rotlBH, rotlBL,\r\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\r\n};\r\n// prettier-ignore\r\nconst u64 = {\r\n  fromBig, split, toBig,\r\n  shrSH, shrSL,\r\n  rotrSH, rotrSL, rotrBH, rotrBL,\r\n  rotr32H, rotr32L,\r\n  rotlSH, rotlSL, rotlBH, rotlBL,\r\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\r\n};\r\nexport default u64;\r\n"],
  "mappings": "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",
  "names": ["bytes", "isLE", "number", "isBytes", "bytes", "hash", "exists", "output", "isBytes", "u32", "createView", "rotr", "rotl", "byteSwap", "byteSwap32", "hexes", "bytesToHex", "bytes", "utf8ToBytes", "toBytes", "Hash", "toStr", "checkOpts", "wrapConstructor", "wrapConstructorWithOpts", "wrapXOFConstructorWithOpts"]
}

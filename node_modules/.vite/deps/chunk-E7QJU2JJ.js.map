{
  "version": 3,
  "sources": ["../../@noble/curves/node_modules/@noble/hashes/src/crypto.ts", "../../@noble/curves/node_modules/@noble/hashes/src/utils.ts", "../../@noble/curves/src/utils.ts", "../../@noble/curves/node_modules/@noble/hashes/src/_md.ts", "../../@noble/curves/node_modules/@noble/hashes/src/_u64.ts", "../../@noble/curves/node_modules/@noble/hashes/src/sha2.ts", "../../@noble/curves/node_modules/@noble/hashes/src/hmac.ts", "../../@noble/curves/src/abstract/modular.ts", "../../@noble/curves/src/abstract/curve.ts", "../../@noble/curves/src/abstract/weierstrass.ts", "../../@noble/curves/src/_shortw_utils.ts", "../../@noble/curves/src/abstract/hash-to-curve.ts", "../../@noble/curves/src/secp256k1.ts", "../../viem/node_modules/@scure/bip32/index.ts", "../../viem/node_modules/@scure/bip39/esm/wordlists/czech.js", "../../viem/node_modules/@scure/bip39/esm/wordlists/english.js", "../../viem/node_modules/@scure/bip39/esm/wordlists/french.js", "../../viem/node_modules/@scure/bip39/esm/wordlists/italian.js", "../../viem/node_modules/@scure/bip39/esm/wordlists/japanese.js", "../../viem/node_modules/@scure/bip39/esm/wordlists/korean.js", "../../viem/node_modules/@scure/bip39/esm/wordlists/portuguese.js", "../../viem/node_modules/@scure/bip39/esm/wordlists/simplified-chinese.js", "../../viem/node_modules/@scure/bip39/esm/wordlists/spanish.js", "../../viem/node_modules/@scure/bip39/esm/wordlists/traditional-chinese.js", "../../viem/node_modules/@scure/bip39/esm/index.js"],
  "sourcesContent": ["/**\r\n * Internal webcrypto alias.\r\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n * See utils.ts for details.\r\n * @module\r\n */\r\ndeclare const globalThis: Record<string, any> | undefined;\r\nexport const crypto: any =\r\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\r\n", "/**\r\n * Utilities for hex, bytes, CSPRNG.\r\n * @module\r\n */\r\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n\r\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// node.js versions earlier than v19 don't declare it in global scope.\r\n// For node.js, package.json#exports field mapping rewrites import\r\n// from `crypto` to `cryptoNode`, which imports native module.\r\n// Makes the utils un-importable in browsers without a bundler.\r\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\r\nimport { crypto } from '@noble/hashes/crypto';\r\n\r\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\r\nexport function isBytes(a: unknown): a is Uint8Array {\r\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\r\n}\r\n\r\n/** Asserts something is positive integer. */\r\nexport function anumber(n: number): void {\r\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\r\n}\r\n\r\n/** Asserts something is Uint8Array. */\r\nexport function abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\r\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\r\n  if (lengths.length > 0 && !lengths.includes(b.length))\r\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\r\n}\r\n\r\n/** Asserts something is hash */\r\nexport function ahash(h: IHash): void {\r\n  if (typeof h !== 'function' || typeof h.create !== 'function')\r\n    throw new Error('Hash should be wrapped by utils.createHasher');\r\n  anumber(h.outputLen);\r\n  anumber(h.blockLen);\r\n}\r\n\r\n/** Asserts a hash instance has not been destroyed / finished */\r\nexport function aexists(instance: any, checkFinished = true): void {\r\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\r\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\r\n}\r\n\r\n/** Asserts output is properly-sized byte array */\r\nexport function aoutput(out: any, instance: any): void {\r\n  abytes(out);\r\n  const min = instance.outputLen;\r\n  if (out.length < min) {\r\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\r\n  }\r\n}\r\n\r\n/** Generic type encompassing 8/16/32-byte arrays - but not 64-byte. */\r\n// prettier-ignore\r\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\r\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\r\n\r\n/** Cast u8 / u16 / u32 to u8. */\r\nexport function u8(arr: TypedArray): Uint8Array {\r\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\r\n}\r\n\r\n/** Cast u8 / u16 / u32 to u32. */\r\nexport function u32(arr: TypedArray): Uint32Array {\r\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\r\n}\r\n\r\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\r\nexport function clean(...arrays: TypedArray[]): void {\r\n  for (let i = 0; i < arrays.length; i++) {\r\n    arrays[i].fill(0);\r\n  }\r\n}\r\n\r\n/** Create DataView of an array for easy byte-level manipulation. */\r\nexport function createView(arr: TypedArray): DataView {\r\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\r\n}\r\n\r\n/** The rotate right (circular right shift) operation for uint32 */\r\nexport function rotr(word: number, shift: number): number {\r\n  return (word << (32 - shift)) | (word >>> shift);\r\n}\r\n\r\n/** The rotate left (circular left shift) operation for uint32 */\r\nexport function rotl(word: number, shift: number): number {\r\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\r\n}\r\n\r\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\r\nexport const isLE: boolean = /* @__PURE__ */ (() =>\r\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\r\n\r\n/** The byte swap operation for uint32 */\r\nexport function byteSwap(word: number): number {\r\n  return (\r\n    ((word << 24) & 0xff000000) |\r\n    ((word << 8) & 0xff0000) |\r\n    ((word >>> 8) & 0xff00) |\r\n    ((word >>> 24) & 0xff)\r\n  );\r\n}\r\n/** Conditionally byte swap if on a big-endian platform */\r\nexport const swap8IfBE: (n: number) => number = isLE\r\n  ? (n: number) => n\r\n  : (n: number) => byteSwap(n);\r\n\r\n/** @deprecated */\r\nexport const byteSwapIfBE: typeof swap8IfBE = swap8IfBE;\r\n/** In place byte swap for Uint32Array */\r\nexport function byteSwap32(arr: Uint32Array): Uint32Array {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i] = byteSwap(arr[i]);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport const swap32IfBE: (u: Uint32Array) => Uint32Array = isLE\r\n  ? (u: Uint32Array) => u\r\n  : byteSwap32;\r\n\r\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\r\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\r\n  // @ts-ignore\r\n  typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\r\n\r\n// Array where index 0xf0 (240) is mapped to string 'f0'\r\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\r\n  i.toString(16).padStart(2, '0')\r\n);\r\n\r\n/**\r\n * Convert byte array to hex string. Uses built-in function, when available.\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes: Uint8Array): string {\r\n  abytes(bytes);\r\n  // @ts-ignore\r\n  if (hasHexBuiltin) return bytes.toHex();\r\n  // pre-caching improves the speed 6x\r\n  let hex = '';\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    hex += hexes[bytes[i]];\r\n  }\r\n  return hex;\r\n}\r\n\r\n// We use optimized technique to convert hex string to byte array\r\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\r\nfunction asciiToBase16(ch: number): number | undefined {\r\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\r\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\r\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\r\n  return;\r\n}\r\n\r\n/**\r\n * Convert hex string to byte array. Uses built-in function, when available.\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex: string): Uint8Array {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  // @ts-ignore\r\n  if (hasHexBuiltin) return Uint8Array.fromHex(hex);\r\n  const hl = hex.length;\r\n  const al = hl / 2;\r\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\r\n  const array = new Uint8Array(al);\r\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\r\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\r\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\r\n    if (n1 === undefined || n2 === undefined) {\r\n      const char = hex[hi] + hex[hi + 1];\r\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\r\n    }\r\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * There is no setImmediate in browser and setTimeout is slow.\r\n * Call of async fn will return Promise, which will be fullfiled only on\r\n * next scheduler queue processing step and this is exactly what we need.\r\n */\r\nexport const nextTick = async (): Promise<void> => {};\r\n\r\n/** Returns control to thread each 'tick' ms to avoid blocking. */\r\nexport async function asyncLoop(\r\n  iters: number,\r\n  tick: number,\r\n  cb: (i: number) => void\r\n): Promise<void> {\r\n  let ts = Date.now();\r\n  for (let i = 0; i < iters; i++) {\r\n    cb(i);\r\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\r\n    const diff = Date.now() - ts;\r\n    if (diff >= 0 && diff < tick) continue;\r\n    await nextTick();\r\n    ts += diff;\r\n  }\r\n}\r\n\r\n// Global symbols, but ts doesn't see them: https://github.com/microsoft/TypeScript/issues/31535\r\ndeclare const TextEncoder: any;\r\ndeclare const TextDecoder: any;\r\n\r\n/**\r\n * Converts string to bytes using UTF8 encoding.\r\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str: string): Uint8Array {\r\n  if (typeof str !== 'string') throw new Error('string expected');\r\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n\r\n/**\r\n * Converts bytes to string using UTF8 encoding.\r\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\r\n */\r\nexport function bytesToUtf8(bytes: Uint8Array): string {\r\n  return new TextDecoder().decode(bytes);\r\n}\r\n\r\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\r\nexport type Input = string | Uint8Array;\r\n/**\r\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\r\n * Warning: when Uint8Array is passed, it would NOT get copied.\r\n * Keep in mind for future mutable operations.\r\n */\r\nexport function toBytes(data: Input): Uint8Array {\r\n  if (typeof data === 'string') data = utf8ToBytes(data);\r\n  abytes(data);\r\n  return data;\r\n}\r\n\r\n/** KDFs can accept string or Uint8Array for user convenience. */\r\nexport type KDFInput = string | Uint8Array;\r\n/**\r\n * Helper for KDFs: consumes uint8array or string.\r\n * When string is passed, does utf8 decoding, using TextDecoder.\r\n */\r\nexport function kdfInputToBytes(data: KDFInput): Uint8Array {\r\n  if (typeof data === 'string') data = utf8ToBytes(data);\r\n  abytes(data);\r\n  return data;\r\n}\r\n\r\n/** Copies several Uint8Arrays into one. */\r\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\r\n  let sum = 0;\r\n  for (let i = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    abytes(a);\r\n    sum += a.length;\r\n  }\r\n  const res = new Uint8Array(sum);\r\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    res.set(a, pad);\r\n    pad += a.length;\r\n  }\r\n  return res;\r\n}\r\n\r\ntype EmptyObj = {};\r\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\r\n  defaults: T1,\r\n  opts?: T2\r\n): T1 & T2 {\r\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\r\n    throw new Error('options should be object or undefined');\r\n  const merged = Object.assign(defaults, opts);\r\n  return merged as T1 & T2;\r\n}\r\n\r\n/** Hash interface. */\r\nexport type IHash = {\r\n  (data: Uint8Array): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create: any;\r\n};\r\n\r\n/** For runtime check if class implements interface */\r\nexport abstract class Hash<T extends Hash<T>> {\r\n  abstract blockLen: number; // Bytes per block\r\n  abstract outputLen: number; // Bytes in output\r\n  abstract update(buf: Input): this;\r\n  // Writes digest into buf\r\n  abstract digestInto(buf: Uint8Array): void;\r\n  abstract digest(): Uint8Array;\r\n  /**\r\n   * Resets internal state. Makes Hash instance unusable.\r\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\r\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\r\n   */\r\n  abstract destroy(): void;\r\n  /**\r\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\r\n   * when no options are passed.\r\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\r\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\r\n   * There are no guarantees for clean-up because it's impossible in JS.\r\n   */\r\n  abstract _cloneInto(to?: T): T;\r\n  // Safe version that clones internal state\r\n  abstract clone(): T;\r\n}\r\n\r\n/**\r\n * XOF: streaming API to read digest in chunks.\r\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\r\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\r\n * destroy state, next call can require more bytes.\r\n */\r\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\r\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\r\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\r\n};\r\n\r\n/** Hash function */\r\nexport type CHash = ReturnType<typeof createHasher>;\r\n/** Hash function with output */\r\nexport type CHashO = ReturnType<typeof createOptHasher>;\r\n/** XOF with output */\r\nexport type CHashXO = ReturnType<typeof createXOFer>;\r\n\r\n/** Wraps hash function, creating an interface on top of it */\r\nexport function createHasher<T extends Hash<T>>(\r\n  hashCons: () => Hash<T>\r\n): {\r\n  (msg: Input): Uint8Array;\r\n  outputLen: number;\r\n  blockLen: number;\r\n  create(): Hash<T>;\r\n} {\r\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\r\n  const tmp = hashCons();\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = () => hashCons();\r\n  return hashC;\r\n}\r\n\r\nexport function createOptHasher<H extends Hash<H>, T extends Object>(\r\n  hashCons: (opts?: T) => Hash<H>\r\n): {\r\n  (msg: Input, opts?: T): Uint8Array;\r\n  outputLen: number;\r\n  blockLen: number;\r\n  create(opts?: T): Hash<H>;\r\n} {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts?: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\nexport function createXOFer<H extends HashXOF<H>, T extends Object>(\r\n  hashCons: (opts?: T) => HashXOF<H>\r\n): {\r\n  (msg: Input, opts?: T): Uint8Array;\r\n  outputLen: number;\r\n  blockLen: number;\r\n  create(opts?: T): HashXOF<H>;\r\n} {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts?: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\nexport const wrapConstructor: typeof createHasher = createHasher;\r\nexport const wrapConstructorWithOpts: typeof createOptHasher = createOptHasher;\r\nexport const wrapXOFConstructorWithOpts: typeof createXOFer = createXOFer;\r\n\r\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\r\nexport function randomBytes(bytesLength = 32): Uint8Array {\r\n  if (crypto && typeof crypto.getRandomValues === 'function') {\r\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\r\n  }\r\n  // Legacy Node.js compatibility\r\n  if (crypto && typeof crypto.randomBytes === 'function') {\r\n    return Uint8Array.from(crypto.randomBytes(bytesLength));\r\n  }\r\n  throw new Error('crypto.getRandomValues must be defined');\r\n}\r\n", "/**\r\n * Hex, bytes and number utilities.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport {\r\n  abytes as abytes_,\r\n  bytesToHex as bytesToHex_,\r\n  concatBytes as concatBytes_,\r\n  hexToBytes as hexToBytes_,\r\n  isBytes as isBytes_,\r\n} from '@noble/hashes/utils.js';\r\nexport {\r\n  abytes,\r\n  anumber,\r\n  bytesToHex,\r\n  bytesToUtf8,\r\n  concatBytes,\r\n  hexToBytes,\r\n  isBytes,\r\n  randomBytes,\r\n  utf8ToBytes,\r\n} from '@noble/hashes/utils.js';\r\nconst _0n = /* @__PURE__ */ BigInt(0);\r\nconst _1n = /* @__PURE__ */ BigInt(1);\r\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\r\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\r\nexport type CHash = {\r\n  (message: Uint8Array | string): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create(opts?: { dkLen?: number }): any; // For shake\r\n};\r\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\r\n\r\nexport function abool(title: string, value: boolean): void {\r\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\r\n}\r\n\r\n// Used in weierstrass, der\r\nexport function numberToHexUnpadded(num: number | bigint): string {\r\n  const hex = num.toString(16);\r\n  return hex.length & 1 ? '0' + hex : hex;\r\n}\r\n\r\nexport function hexToNumber(hex: string): bigint {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\r\n}\r\n\r\n// BE: Big Endian, LE: Little Endian\r\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\r\n  return hexToNumber(bytesToHex_(bytes));\r\n}\r\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\r\n  abytes_(bytes);\r\n  return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\r\n}\r\n\r\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\r\n  return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\r\n}\r\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\r\n  return numberToBytesBE(n, len).reverse();\r\n}\r\n// Unpadded, rarely used\r\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\r\n  return hexToBytes_(numberToHexUnpadded(n));\r\n}\r\n\r\n/**\r\n * Takes hex string or Uint8Array, converts to Uint8Array.\r\n * Validates output length.\r\n * Will throw error for other types.\r\n * @param title descriptive title for an error e.g. 'secret key'\r\n * @param hex hex string or Uint8Array\r\n * @param expectedLength optional, will compare to result array's length\r\n * @returns\r\n */\r\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\r\n  let res: Uint8Array;\r\n  if (typeof hex === 'string') {\r\n    try {\r\n      res = hexToBytes_(hex);\r\n    } catch (e) {\r\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\r\n    }\r\n  } else if (isBytes_(hex)) {\r\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\r\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\r\n    res = Uint8Array.from(hex);\r\n  } else {\r\n    throw new Error(title + ' must be hex string or Uint8Array');\r\n  }\r\n  const len = res.length;\r\n  if (typeof expectedLength === 'number' && len !== expectedLength)\r\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\r\n  return res;\r\n}\r\n\r\n// Compares 2 u8a-s in kinda constant time\r\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\r\n  if (a.length !== b.length) return false;\r\n  let diff = 0;\r\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\r\n  return diff === 0;\r\n}\r\n\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\r\n/**\r\n * Converts bytes to string using UTF8 encoding.\r\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\r\n */\r\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\r\n\r\n// Is positive bigint\r\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\r\n\r\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\r\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\r\n}\r\n\r\n/**\r\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\r\n * @example\r\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\r\n */\r\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\r\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\r\n  // consider P=256n, min=0n, max=P\r\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\r\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\r\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\r\n  if (!inRange(n, min, max))\r\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\r\n}\r\n\r\n// Bit operations\r\n\r\n/**\r\n * Calculates amount of bits in a bigint.\r\n * Same as `n.toString(2).length`\r\n * TODO: merge with nLength in modular\r\n */\r\nexport function bitLen(n: bigint): number {\r\n  let len;\r\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\r\n  return len;\r\n}\r\n\r\n/**\r\n * Gets single bit at position.\r\n * NOTE: first bit position is 0 (same as arrays)\r\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\r\n */\r\nexport function bitGet(n: bigint, pos: number): bigint {\r\n  return (n >> BigInt(pos)) & _1n;\r\n}\r\n\r\n/**\r\n * Sets single bit at position.\r\n */\r\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\r\n  return n | ((value ? _1n : _0n) << BigInt(pos));\r\n}\r\n\r\n/**\r\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\r\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\r\n */\r\nexport const bitMask = (n: number): bigint => (_1n << BigInt(n)) - _1n;\r\n\r\n// DRBG\r\n\r\ntype Pred<T> = (v: Uint8Array) => T | undefined;\r\n/**\r\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n * @returns function that will call DRBG until 2nd arg returns something meaningful\r\n * @example\r\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\r\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\r\n */\r\nexport function createHmacDrbg<T>(\r\n  hashLen: number,\r\n  qByteLen: number,\r\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\r\n): (seed: Uint8Array, predicate: Pred<T>) => T {\r\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\r\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\r\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\r\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\r\n  const u8n = (len: number) => new Uint8Array(len); // creates Uint8Array\r\n  const u8of = (byte: number) => Uint8Array.of(byte); // another shortcut\r\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\r\n  let i = 0; // Iterations counter, will throw when over 1000\r\n  const reset = () => {\r\n    v.fill(1);\r\n    k.fill(0);\r\n    i = 0;\r\n  };\r\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\r\n  const reseed = (seed = u8n(0)) => {\r\n    // HMAC-DRBG reseed() function. Steps D-G\r\n    k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\r\n    v = h(); // v = hmac(k || v)\r\n    if (seed.length === 0) return;\r\n    k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\r\n    v = h(); // v = hmac(k || v)\r\n  };\r\n  const gen = () => {\r\n    // HMAC-DRBG generate() function\r\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\r\n    let len = 0;\r\n    const out: Uint8Array[] = [];\r\n    while (len < qByteLen) {\r\n      v = h();\r\n      const sl = v.slice();\r\n      out.push(sl);\r\n      len += v.length;\r\n    }\r\n    return concatBytes_(...out);\r\n  };\r\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\r\n    reset();\r\n    reseed(seed); // Steps D-G\r\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\r\n    while (!(res = pred(gen()))) reseed();\r\n    reset();\r\n    return res;\r\n  };\r\n  return genUntil;\r\n}\r\n\r\n// Validating curves and fields\r\n\r\nconst validatorFns = {\r\n  bigint: (val: any): boolean => typeof val === 'bigint',\r\n  function: (val: any): boolean => typeof val === 'function',\r\n  boolean: (val: any): boolean => typeof val === 'boolean',\r\n  string: (val: any): boolean => typeof val === 'string',\r\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes_(val),\r\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\r\n  array: (val: any): boolean => Array.isArray(val),\r\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\r\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\r\n} as const;\r\ntype Validator = keyof typeof validatorFns;\r\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\r\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\r\n\r\nexport function validateObject<T extends Record<string, any>>(\r\n  object: T,\r\n  validators: ValMap<T>,\r\n  optValidators: ValMap<T> = {}\r\n): T {\r\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\r\n    const checkVal = validatorFns[type];\r\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\r\n\r\n    const val = object[fieldName as keyof typeof object];\r\n    if (isOptional && val === undefined) return;\r\n    if (!checkVal(val, object)) {\r\n      throw new Error(\r\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\r\n      );\r\n    }\r\n  };\r\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\r\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\r\n  return object;\r\n}\r\n// validate type tests\r\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\r\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\r\n// // Should fail type-check\r\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\r\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\r\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\r\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\r\n\r\nexport function isHash(val: CHash): boolean {\r\n  return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\r\n}\r\nexport function _validateObject(\r\n  object: Record<string, any>,\r\n  fields: Record<string, string>,\r\n  optFields: Record<string, string> = {}\r\n): void {\r\n  if (!object || typeof object !== 'object') throw new Error('expected valid options object');\r\n  type Item = keyof typeof object;\r\n  function checkField(fieldName: Item, expectedType: string, isOpt: boolean) {\r\n    const val = object[fieldName];\r\n    if (isOpt && val === undefined) return;\r\n    const current = typeof val;\r\n    if (current !== expectedType || val === null)\r\n      throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\r\n  }\r\n  Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\r\n  Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\r\n}\r\n\r\n/**\r\n * throws not implemented error\r\n */\r\nexport const notImplemented = (): never => {\r\n  throw new Error('not implemented');\r\n};\r\n\r\n/**\r\n * Memoizes (caches) computation result.\r\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\r\n */\r\nexport function memoized<T extends object, R, O extends any[]>(\r\n  fn: (arg: T, ...args: O) => R\r\n): (arg: T, ...args: O) => R {\r\n  const map = new WeakMap<T, R>();\r\n  return (arg: T, ...args: O): R => {\r\n    const val = map.get(arg);\r\n    if (val !== undefined) return val;\r\n    const computed = fn(arg, ...args);\r\n    map.set(arg, computed);\r\n    return computed;\r\n  };\r\n}\r\n", "/**\r\n * Internal Merkle-Damgard hash utils.\r\n * @module\r\n */\r\nimport { type Input, Hash, abytes, aexists, aoutput, clean, createView, toBytes } from './utils.ts';\r\n\r\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\r\nexport function setBigUint64(\r\n  view: DataView,\r\n  byteOffset: number,\r\n  value: bigint,\r\n  isLE: boolean\r\n): void {\r\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\r\n  const _32n = BigInt(32);\r\n  const _u32_max = BigInt(0xffffffff);\r\n  const wh = Number((value >> _32n) & _u32_max);\r\n  const wl = Number(value & _u32_max);\r\n  const h = isLE ? 4 : 0;\r\n  const l = isLE ? 0 : 4;\r\n  view.setUint32(byteOffset + h, wh, isLE);\r\n  view.setUint32(byteOffset + l, wl, isLE);\r\n}\r\n\r\n/** Choice: a ? b : c */\r\nexport function Chi(a: number, b: number, c: number): number {\r\n  return (a & b) ^ (~a & c);\r\n}\r\n\r\n/** Majority function, true if any two inputs is true. */\r\nexport function Maj(a: number, b: number, c: number): number {\r\n  return (a & b) ^ (a & c) ^ (b & c);\r\n}\r\n\r\n/**\r\n * Merkle-Damgard hash construction base class.\r\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\r\n */\r\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\r\n  protected abstract process(buf: DataView, offset: number): void;\r\n  protected abstract get(): number[];\r\n  protected abstract set(...args: number[]): void;\r\n  abstract destroy(): void;\r\n  protected abstract roundClean(): void;\r\n\r\n  readonly blockLen: number;\r\n  readonly outputLen: number;\r\n  readonly padOffset: number;\r\n  readonly isLE: boolean;\r\n\r\n  // For partial updates less than block size\r\n  protected buffer: Uint8Array;\r\n  protected view: DataView;\r\n  protected finished = false;\r\n  protected length = 0;\r\n  protected pos = 0;\r\n  protected destroyed = false;\r\n\r\n  constructor(blockLen: number, outputLen: number, padOffset: number, isLE: boolean) {\r\n    super();\r\n    this.blockLen = blockLen;\r\n    this.outputLen = outputLen;\r\n    this.padOffset = padOffset;\r\n    this.isLE = isLE;\r\n    this.buffer = new Uint8Array(blockLen);\r\n    this.view = createView(this.buffer);\r\n  }\r\n  update(data: Input): this {\r\n    aexists(this);\r\n    data = toBytes(data);\r\n    abytes(data);\r\n    const { view, buffer, blockLen } = this;\r\n    const len = data.length;\r\n    for (let pos = 0; pos < len; ) {\r\n      const take = Math.min(blockLen - this.pos, len - pos);\r\n      // Fast path: we have at least one block in input, cast it to view and process\r\n      if (take === blockLen) {\r\n        const dataView = createView(data);\r\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\r\n        continue;\r\n      }\r\n      buffer.set(data.subarray(pos, pos + take), this.pos);\r\n      this.pos += take;\r\n      pos += take;\r\n      if (this.pos === blockLen) {\r\n        this.process(view, 0);\r\n        this.pos = 0;\r\n      }\r\n    }\r\n    this.length += data.length;\r\n    this.roundClean();\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array): void {\r\n    aexists(this);\r\n    aoutput(out, this);\r\n    this.finished = true;\r\n    // Padding\r\n    // We can avoid allocation of buffer for padding completely if it\r\n    // was previously not allocated here. But it won't change performance.\r\n    const { buffer, view, blockLen, isLE } = this;\r\n    let { pos } = this;\r\n    // append the bit '1' to the message\r\n    buffer[pos++] = 0b10000000;\r\n    clean(this.buffer.subarray(pos));\r\n    // we have less than padOffset left in buffer, so we cannot put length in\r\n    // current block, need process it and pad again\r\n    if (this.padOffset > blockLen - pos) {\r\n      this.process(view, 0);\r\n      pos = 0;\r\n    }\r\n    // Pad until full block byte with zeros\r\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\r\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\r\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\r\n    // So we just write lowest 64 bits of that value.\r\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\r\n    this.process(view, 0);\r\n    const oview = createView(out);\r\n    const len = this.outputLen;\r\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\r\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\r\n    const outLen = len / 4;\r\n    const state = this.get();\r\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\r\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\r\n  }\r\n  digest(): Uint8Array {\r\n    const { buffer, outputLen } = this;\r\n    this.digestInto(buffer);\r\n    const res = buffer.slice(0, outputLen);\r\n    this.destroy();\r\n    return res;\r\n  }\r\n  _cloneInto(to?: T): T {\r\n    to ||= new (this.constructor as any)() as T;\r\n    to.set(...this.get());\r\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\r\n    to.destroyed = destroyed;\r\n    to.finished = finished;\r\n    to.length = length;\r\n    to.pos = pos;\r\n    if (length % blockLen) to.buffer.set(buffer);\r\n    return to;\r\n  }\r\n  clone(): T {\r\n    return this._cloneInto();\r\n  }\r\n}\r\n\r\n/**\r\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\r\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\r\n */\r\n\r\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\r\nexport const SHA256_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\r\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\r\n]);\r\n\r\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\r\nexport const SHA224_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\r\n  0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\r\n]);\r\n\r\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\r\nexport const SHA384_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\r\n  0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\r\n  0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\r\n]);\r\n\r\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\r\nexport const SHA512_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\r\n  0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\r\n  0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\r\n]);\r\n", "/**\r\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\r\n * @todo re-check https://issues.chromium.org/issues/42212588\r\n * @module\r\n */\r\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\r\nconst _32n = /* @__PURE__ */ BigInt(32);\r\n\r\nfunction fromBig(\r\n  n: bigint,\r\n  le = false\r\n): {\r\n  h: number;\r\n  l: number;\r\n} {\r\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\r\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\r\n}\r\n\r\nfunction split(lst: bigint[], le = false): Uint32Array[] {\r\n  const len = lst.length;\r\n  let Ah = new Uint32Array(len);\r\n  let Al = new Uint32Array(len);\r\n  for (let i = 0; i < len; i++) {\r\n    const { h, l } = fromBig(lst[i], le);\r\n    [Ah[i], Al[i]] = [h, l];\r\n  }\r\n  return [Ah, Al];\r\n}\r\n\r\nconst toBig = (h: number, l: number): bigint => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\r\n// for Shift in [0, 32)\r\nconst shrSH = (h: number, _l: number, s: number): number => h >>> s;\r\nconst shrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\r\n// Right rotate for Shift in [1, 32)\r\nconst rotrSH = (h: number, l: number, s: number): number => (h >>> s) | (l << (32 - s));\r\nconst rotrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\r\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\r\nconst rotrBH = (h: number, l: number, s: number): number => (h << (64 - s)) | (l >>> (s - 32));\r\nconst rotrBL = (h: number, l: number, s: number): number => (h >>> (s - 32)) | (l << (64 - s));\r\n// Right rotate for shift===32 (just swaps l&h)\r\nconst rotr32H = (_h: number, l: number): number => l;\r\nconst rotr32L = (h: number, _l: number): number => h;\r\n// Left rotate for Shift in [1, 32)\r\nconst rotlSH = (h: number, l: number, s: number): number => (h << s) | (l >>> (32 - s));\r\nconst rotlSL = (h: number, l: number, s: number): number => (l << s) | (h >>> (32 - s));\r\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\r\nconst rotlBH = (h: number, l: number, s: number): number => (l << (s - 32)) | (h >>> (64 - s));\r\nconst rotlBL = (h: number, l: number, s: number): number => (h << (s - 32)) | (l >>> (64 - s));\r\n\r\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\r\n// simple take carry out of low bit sum by shift, we need to use division.\r\nfunction add(\r\n  Ah: number,\r\n  Al: number,\r\n  Bh: number,\r\n  Bl: number\r\n): {\r\n  h: number;\r\n  l: number;\r\n} {\r\n  const l = (Al >>> 0) + (Bl >>> 0);\r\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\r\n}\r\n// Addition with more than 2 elements\r\nconst add3L = (Al: number, Bl: number, Cl: number): number => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\r\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number): number =>\r\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\r\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number): number =>\r\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\r\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number): number =>\r\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\r\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number): number =>\r\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\r\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number): number =>\r\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\r\n\r\n// prettier-ignore\r\nexport {\r\n  add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig\r\n};\r\n// prettier-ignore\r\nconst u64: { fromBig: typeof fromBig; split: typeof split; toBig: (h: number, l: number) => bigint; shrSH: (h: number, _l: number, s: number) => number; shrSL: (h: number, l: number, s: number) => number; rotrSH: (h: number, l: number, s: number) => number; rotrSL: (h: number, l: number, s: number) => number; rotrBH: (h: number, l: number, s: number) => number; rotrBL: (h: number, l: number, s: number) => number; rotr32H: (_h: number, l: number) => number; rotr32L: (h: number, _l: number) => number; rotlSH: (h: number, l: number, s: number) => number; rotlSL: (h: number, l: number, s: number) => number; rotlBH: (h: number, l: number, s: number) => number; rotlBL: (h: number, l: number, s: number) => number; add: typeof add; add3L: (Al: number, Bl: number, Cl: number) => number; add3H: (low: number, Ah: number, Bh: number, Ch: number) => number; add4L: (Al: number, Bl: number, Cl: number, Dl: number) => number; add4H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number) => number; add5H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) => number; add5L: (Al: number, Bl: number, Cl: number, Dl: number, El: number) => number; } = {\r\n  fromBig, split, toBig,\r\n  shrSH, shrSL,\r\n  rotrSH, rotrSL, rotrBH, rotrBL,\r\n  rotr32H, rotr32L,\r\n  rotlSH, rotlSL, rotlBH, rotlBL,\r\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\r\n};\r\nexport default u64;\r\n", "/**\r\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\r\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\r\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\r\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\r\n * @module\r\n */\r\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from './_md.ts';\r\nimport * as u64 from './_u64.ts';\r\nimport { type CHash, clean, createHasher, rotr } from './utils.ts';\r\n\r\n/**\r\n * Round constants:\r\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\r\n */\r\n// prettier-ignore\r\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\r\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n]);\r\n\r\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\r\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\r\nexport class SHA256 extends HashMD<SHA256> {\r\n  // We cannot use array here since array allows indexing by variable\r\n  // which means optimizer/compiler cannot use registers.\r\n  protected A: number = SHA256_IV[0] | 0;\r\n  protected B: number = SHA256_IV[1] | 0;\r\n  protected C: number = SHA256_IV[2] | 0;\r\n  protected D: number = SHA256_IV[3] | 0;\r\n  protected E: number = SHA256_IV[4] | 0;\r\n  protected F: number = SHA256_IV[5] | 0;\r\n  protected G: number = SHA256_IV[6] | 0;\r\n  protected H: number = SHA256_IV[7] | 0;\r\n\r\n  constructor(outputLen: number = 32) {\r\n    super(64, outputLen, 8, false);\r\n  }\r\n  protected get(): [number, number, number, number, number, number, number, number] {\r\n    const { A, B, C, D, E, F, G, H } = this;\r\n    return [A, B, C, D, E, F, G, H];\r\n  }\r\n  // prettier-ignore\r\n  protected set(\r\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\r\n  ): void {\r\n    this.A = A | 0;\r\n    this.B = B | 0;\r\n    this.C = C | 0;\r\n    this.D = D | 0;\r\n    this.E = E | 0;\r\n    this.F = F | 0;\r\n    this.G = G | 0;\r\n    this.H = H | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\r\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\r\n    for (let i = 16; i < 64; i++) {\r\n      const W15 = SHA256_W[i - 15];\r\n      const W2 = SHA256_W[i - 2];\r\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\r\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\r\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\r\n    }\r\n    // Compression function main loop, 64 rounds\r\n    let { A, B, C, D, E, F, G, H } = this;\r\n    for (let i = 0; i < 64; i++) {\r\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\r\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\r\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\r\n      H = G;\r\n      G = F;\r\n      F = E;\r\n      E = (D + T1) | 0;\r\n      D = C;\r\n      C = B;\r\n      B = A;\r\n      A = (T1 + T2) | 0;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    A = (A + this.A) | 0;\r\n    B = (B + this.B) | 0;\r\n    C = (C + this.C) | 0;\r\n    D = (D + this.D) | 0;\r\n    E = (E + this.E) | 0;\r\n    F = (F + this.F) | 0;\r\n    G = (G + this.G) | 0;\r\n    H = (H + this.H) | 0;\r\n    this.set(A, B, C, D, E, F, G, H);\r\n  }\r\n  protected roundClean(): void {\r\n    clean(SHA256_W);\r\n  }\r\n  destroy(): void {\r\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\r\n    clean(this.buffer);\r\n  }\r\n}\r\n\r\nexport class SHA224 extends SHA256 {\r\n  protected A: number = SHA224_IV[0] | 0;\r\n  protected B: number = SHA224_IV[1] | 0;\r\n  protected C: number = SHA224_IV[2] | 0;\r\n  protected D: number = SHA224_IV[3] | 0;\r\n  protected E: number = SHA224_IV[4] | 0;\r\n  protected F: number = SHA224_IV[5] | 0;\r\n  protected G: number = SHA224_IV[6] | 0;\r\n  protected H: number = SHA224_IV[7] | 0;\r\n  constructor() {\r\n    super(28);\r\n  }\r\n}\r\n\r\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\r\n\r\n// Round contants\r\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\r\n// prettier-ignore\r\nconst K512 = /* @__PURE__ */ (() => u64.split([\r\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\r\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\r\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\r\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\r\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\r\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\r\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\r\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\r\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\r\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\r\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\r\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\r\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\r\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\r\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\r\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\r\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\r\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\r\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\r\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\r\n].map(n => BigInt(n))))();\r\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\r\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\r\n\r\n// Reusable temporary buffers\r\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\r\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\r\n\r\nexport class SHA512 extends HashMD<SHA512> {\r\n  // We cannot use array here since array allows indexing by variable\r\n  // which means optimizer/compiler cannot use registers.\r\n  // h -- high 32 bits, l -- low 32 bits\r\n  protected Ah: number = SHA512_IV[0] | 0;\r\n  protected Al: number = SHA512_IV[1] | 0;\r\n  protected Bh: number = SHA512_IV[2] | 0;\r\n  protected Bl: number = SHA512_IV[3] | 0;\r\n  protected Ch: number = SHA512_IV[4] | 0;\r\n  protected Cl: number = SHA512_IV[5] | 0;\r\n  protected Dh: number = SHA512_IV[6] | 0;\r\n  protected Dl: number = SHA512_IV[7] | 0;\r\n  protected Eh: number = SHA512_IV[8] | 0;\r\n  protected El: number = SHA512_IV[9] | 0;\r\n  protected Fh: number = SHA512_IV[10] | 0;\r\n  protected Fl: number = SHA512_IV[11] | 0;\r\n  protected Gh: number = SHA512_IV[12] | 0;\r\n  protected Gl: number = SHA512_IV[13] | 0;\r\n  protected Hh: number = SHA512_IV[14] | 0;\r\n  protected Hl: number = SHA512_IV[15] | 0;\r\n\r\n  constructor(outputLen: number = 64) {\r\n    super(128, outputLen, 16, false);\r\n  }\r\n  // prettier-ignore\r\n  protected get(): [\r\n    number, number, number, number, number, number, number, number,\r\n    number, number, number, number, number, number, number, number\r\n  ] {\r\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\r\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\r\n  }\r\n  // prettier-ignore\r\n  protected set(\r\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\r\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\r\n  ): void {\r\n    this.Ah = Ah | 0;\r\n    this.Al = Al | 0;\r\n    this.Bh = Bh | 0;\r\n    this.Bl = Bl | 0;\r\n    this.Ch = Ch | 0;\r\n    this.Cl = Cl | 0;\r\n    this.Dh = Dh | 0;\r\n    this.Dl = Dl | 0;\r\n    this.Eh = Eh | 0;\r\n    this.El = El | 0;\r\n    this.Fh = Fh | 0;\r\n    this.Fl = Fl | 0;\r\n    this.Gh = Gh | 0;\r\n    this.Gl = Gl | 0;\r\n    this.Hh = Hh | 0;\r\n    this.Hl = Hl | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\r\n    for (let i = 0; i < 16; i++, offset += 4) {\r\n      SHA512_W_H[i] = view.getUint32(offset);\r\n      SHA512_W_L[i] = view.getUint32((offset += 4));\r\n    }\r\n    for (let i = 16; i < 80; i++) {\r\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\r\n      const W15h = SHA512_W_H[i - 15] | 0;\r\n      const W15l = SHA512_W_L[i - 15] | 0;\r\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\r\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\r\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\r\n      const W2h = SHA512_W_H[i - 2] | 0;\r\n      const W2l = SHA512_W_L[i - 2] | 0;\r\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\r\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\r\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\r\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\r\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\r\n      SHA512_W_H[i] = SUMh | 0;\r\n      SHA512_W_L[i] = SUMl | 0;\r\n    }\r\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\r\n    // Compression function main loop, 80 rounds\r\n    for (let i = 0; i < 80; i++) {\r\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\r\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\r\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\r\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\r\n      const CHIl = (El & Fl) ^ (~El & Gl);\r\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\r\n      // prettier-ignore\r\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\r\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\r\n      const T1l = T1ll | 0;\r\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\r\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\r\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\r\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\r\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\r\n      Hh = Gh | 0;\r\n      Hl = Gl | 0;\r\n      Gh = Fh | 0;\r\n      Gl = Fl | 0;\r\n      Fh = Eh | 0;\r\n      Fl = El | 0;\r\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\r\n      Dh = Ch | 0;\r\n      Dl = Cl | 0;\r\n      Ch = Bh | 0;\r\n      Cl = Bl | 0;\r\n      Bh = Ah | 0;\r\n      Bl = Al | 0;\r\n      const All = u64.add3L(T1l, sigma0l, MAJl);\r\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\r\n      Al = All | 0;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\r\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\r\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\r\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\r\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\r\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\r\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\r\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\r\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\r\n  }\r\n  protected roundClean(): void {\r\n    clean(SHA512_W_H, SHA512_W_L);\r\n  }\r\n  destroy(): void {\r\n    clean(this.buffer);\r\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n  }\r\n}\r\n\r\nexport class SHA384 extends SHA512 {\r\n  protected Ah: number = SHA384_IV[0] | 0;\r\n  protected Al: number = SHA384_IV[1] | 0;\r\n  protected Bh: number = SHA384_IV[2] | 0;\r\n  protected Bl: number = SHA384_IV[3] | 0;\r\n  protected Ch: number = SHA384_IV[4] | 0;\r\n  protected Cl: number = SHA384_IV[5] | 0;\r\n  protected Dh: number = SHA384_IV[6] | 0;\r\n  protected Dl: number = SHA384_IV[7] | 0;\r\n  protected Eh: number = SHA384_IV[8] | 0;\r\n  protected El: number = SHA384_IV[9] | 0;\r\n  protected Fh: number = SHA384_IV[10] | 0;\r\n  protected Fl: number = SHA384_IV[11] | 0;\r\n  protected Gh: number = SHA384_IV[12] | 0;\r\n  protected Gl: number = SHA384_IV[13] | 0;\r\n  protected Hh: number = SHA384_IV[14] | 0;\r\n  protected Hl: number = SHA384_IV[15] | 0;\r\n\r\n  constructor() {\r\n    super(48);\r\n  }\r\n}\r\n\r\n/**\r\n * Truncated SHA512/256 and SHA512/224.\r\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\r\n * Then t hashes string to produce result IV.\r\n * See `test/misc/sha2-gen-iv.js`.\r\n */\r\n\r\n/** SHA512/224 IV */\r\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\r\n  0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\r\n  0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\r\n]);\r\n\r\n/** SHA512/256 IV */\r\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\r\n  0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\r\n  0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\r\n]);\r\n\r\nexport class SHA512_224 extends SHA512 {\r\n  protected Ah: number = T224_IV[0] | 0;\r\n  protected Al: number = T224_IV[1] | 0;\r\n  protected Bh: number = T224_IV[2] | 0;\r\n  protected Bl: number = T224_IV[3] | 0;\r\n  protected Ch: number = T224_IV[4] | 0;\r\n  protected Cl: number = T224_IV[5] | 0;\r\n  protected Dh: number = T224_IV[6] | 0;\r\n  protected Dl: number = T224_IV[7] | 0;\r\n  protected Eh: number = T224_IV[8] | 0;\r\n  protected El: number = T224_IV[9] | 0;\r\n  protected Fh: number = T224_IV[10] | 0;\r\n  protected Fl: number = T224_IV[11] | 0;\r\n  protected Gh: number = T224_IV[12] | 0;\r\n  protected Gl: number = T224_IV[13] | 0;\r\n  protected Hh: number = T224_IV[14] | 0;\r\n  protected Hl: number = T224_IV[15] | 0;\r\n\r\n  constructor() {\r\n    super(28);\r\n  }\r\n}\r\n\r\nexport class SHA512_256 extends SHA512 {\r\n  protected Ah: number = T256_IV[0] | 0;\r\n  protected Al: number = T256_IV[1] | 0;\r\n  protected Bh: number = T256_IV[2] | 0;\r\n  protected Bl: number = T256_IV[3] | 0;\r\n  protected Ch: number = T256_IV[4] | 0;\r\n  protected Cl: number = T256_IV[5] | 0;\r\n  protected Dh: number = T256_IV[6] | 0;\r\n  protected Dl: number = T256_IV[7] | 0;\r\n  protected Eh: number = T256_IV[8] | 0;\r\n  protected El: number = T256_IV[9] | 0;\r\n  protected Fh: number = T256_IV[10] | 0;\r\n  protected Fl: number = T256_IV[11] | 0;\r\n  protected Gh: number = T256_IV[12] | 0;\r\n  protected Gl: number = T256_IV[13] | 0;\r\n  protected Hh: number = T256_IV[14] | 0;\r\n  protected Hl: number = T256_IV[15] | 0;\r\n\r\n  constructor() {\r\n    super(32);\r\n  }\r\n}\r\n\r\n/**\r\n * SHA2-256 hash function from RFC 4634.\r\n *\r\n * It is the fastest JS hash, even faster than Blake3.\r\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\r\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\r\n */\r\nexport const sha256: CHash = /* @__PURE__ */ createHasher(() => new SHA256());\r\n/** SHA2-224 hash function from RFC 4634 */\r\nexport const sha224: CHash = /* @__PURE__ */ createHasher(() => new SHA224());\r\n\r\n/** SHA2-512 hash function from RFC 4634. */\r\nexport const sha512: CHash = /* @__PURE__ */ createHasher(() => new SHA512());\r\n/** SHA2-384 hash function from RFC 4634. */\r\nexport const sha384: CHash = /* @__PURE__ */ createHasher(() => new SHA384());\r\n\r\n/**\r\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\r\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\r\n */\r\nexport const sha512_256: CHash = /* @__PURE__ */ createHasher(() => new SHA512_256());\r\n/**\r\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\r\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\r\n */\r\nexport const sha512_224: CHash = /* @__PURE__ */ createHasher(() => new SHA512_224());\r\n", "/**\r\n * HMAC: RFC2104 message authentication code.\r\n * @module\r\n */\r\nimport { abytes, aexists, ahash, clean, Hash, toBytes, type CHash, type Input } from './utils.ts';\r\n\r\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\r\n  oHash: T;\r\n  iHash: T;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  private finished = false;\r\n  private destroyed = false;\r\n\r\n  constructor(hash: CHash, _key: Input) {\r\n    super();\r\n    ahash(hash);\r\n    const key = toBytes(_key);\r\n    this.iHash = hash.create() as T;\r\n    if (typeof this.iHash.update !== 'function')\r\n      throw new Error('Expected instance of class which extends utils.Hash');\r\n    this.blockLen = this.iHash.blockLen;\r\n    this.outputLen = this.iHash.outputLen;\r\n    const blockLen = this.blockLen;\r\n    const pad = new Uint8Array(blockLen);\r\n    // blockLen can be bigger than outputLen\r\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\r\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\r\n    this.iHash.update(pad);\r\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\r\n    this.oHash = hash.create() as T;\r\n    // Undo internal XOR && apply outer XOR\r\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\r\n    this.oHash.update(pad);\r\n    clean(pad);\r\n  }\r\n  update(buf: Input): this {\r\n    aexists(this);\r\n    this.iHash.update(buf);\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array): void {\r\n    aexists(this);\r\n    abytes(out, this.outputLen);\r\n    this.finished = true;\r\n    this.iHash.digestInto(out);\r\n    this.oHash.update(out);\r\n    this.oHash.digestInto(out);\r\n    this.destroy();\r\n  }\r\n  digest(): Uint8Array {\r\n    const out = new Uint8Array(this.oHash.outputLen);\r\n    this.digestInto(out);\r\n    return out;\r\n  }\r\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\r\n    // Create new instance without calling constructor since key already in state and we don't know it.\r\n    to ||= Object.create(Object.getPrototypeOf(this), {});\r\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\r\n    to = to as this;\r\n    to.finished = finished;\r\n    to.destroyed = destroyed;\r\n    to.blockLen = blockLen;\r\n    to.outputLen = outputLen;\r\n    to.oHash = oHash._cloneInto(to.oHash);\r\n    to.iHash = iHash._cloneInto(to.iHash);\r\n    return to;\r\n  }\r\n  clone(): HMAC<T> {\r\n    return this._cloneInto();\r\n  }\r\n  destroy(): void {\r\n    this.destroyed = true;\r\n    this.oHash.destroy();\r\n    this.iHash.destroy();\r\n  }\r\n}\r\n\r\n/**\r\n * HMAC: RFC2104 message authentication code.\r\n * @param hash - function that would be used e.g. sha256\r\n * @param key - message key\r\n * @param message - message data\r\n * @example\r\n * import { hmac } from '@noble/hashes/hmac';\r\n * import { sha256 } from '@noble/hashes/sha2';\r\n * const mac1 = hmac(sha256, 'key', 'message');\r\n */\r\nexport const hmac: {\r\n  (hash: CHash, key: Input, message: Input): Uint8Array;\r\n  create(hash: CHash, key: Input): HMAC<any>;\r\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\r\n  new HMAC<any>(hash, key).update(message).digest();\r\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\r\n", "/**\r\n * Utils for modular division and fields.\r\n * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\r\n * There is no division: it is replaced by modular multiplicative inverse.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport {\r\n  _validateObject,\r\n  anumber,\r\n  bitMask,\r\n  bytesToNumberBE,\r\n  bytesToNumberLE,\r\n  ensureBytes,\r\n  numberToBytesBE,\r\n  numberToBytesLE,\r\n} from '../utils.ts';\r\n\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\r\n// prettier-ignore\r\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _7n = /* @__PURE__ */ BigInt(7);\r\n// prettier-ignore\r\nconst _8n = /* @__PURE__ */ BigInt(8), _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\r\n\r\n// Calculates a modulo b\r\nexport function mod(a: bigint, b: bigint): bigint {\r\n  const result = a % b;\r\n  return result >= _0n ? result : b + result;\r\n}\r\n/**\r\n * Efficiently raise num to power and do modular division.\r\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\r\n * @example\r\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\r\n */\r\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\r\n  return FpPow(Field(modulo), num, power);\r\n}\r\n\r\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\r\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\r\n  let res = x;\r\n  while (power-- > _0n) {\r\n    res *= res;\r\n    res %= modulo;\r\n  }\r\n  return res;\r\n}\r\n\r\n/**\r\n * Inverses number over modulo.\r\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\r\n */\r\nexport function invert(number: bigint, modulo: bigint): bigint {\r\n  if (number === _0n) throw new Error('invert: expected non-zero number');\r\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\r\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\r\n  let a = mod(number, modulo);\r\n  let b = modulo;\r\n  // prettier-ignore\r\n  let x = _0n, y = _1n, u = _1n, v = _0n;\r\n  while (a !== _0n) {\r\n    // JIT applies optimization if those two lines follow each other\r\n    const q = b / a;\r\n    const r = b % a;\r\n    const m = x - u * q;\r\n    const n = y - v * q;\r\n    // prettier-ignore\r\n    b = a, a = r, x = u, y = v, u = m, v = n;\r\n  }\r\n  const gcd = b;\r\n  if (gcd !== _1n) throw new Error('invert: does not exist');\r\n  return mod(x, modulo);\r\n}\r\n\r\nfunction assertIsSquare<T>(Fp: IField<T>, root: T, n: T): void {\r\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\r\n}\r\n\r\n// Not all roots are possible! Example which will throw:\r\n// const NUM =\r\n// n = 72057594037927816n;\r\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\r\nfunction sqrt3mod4<T>(Fp: IField<T>, n: T) {\r\n  const p1div4 = (Fp.ORDER + _1n) / _4n;\r\n  const root = Fp.pow(n, p1div4);\r\n  assertIsSquare(Fp, root, n);\r\n  return root;\r\n}\r\n\r\nfunction sqrt5mod8<T>(Fp: IField<T>, n: T) {\r\n  const p5div8 = (Fp.ORDER - _5n) / _8n;\r\n  const n2 = Fp.mul(n, _2n);\r\n  const v = Fp.pow(n2, p5div8);\r\n  const nv = Fp.mul(n, v);\r\n  const i = Fp.mul(Fp.mul(nv, _2n), v);\r\n  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\r\n  assertIsSquare(Fp, root, n);\r\n  return root;\r\n}\r\n\r\n// Based on RFC9380, Kong algorithm\r\n// prettier-ignore\r\nfunction sqrt9mod16(P: bigint): <T>(Fp: IField<T>, n: T) => T {\r\n  const Fp_ = Field(P);\r\n  const tn = tonelliShanks(P);\r\n  const c1 = tn(Fp_, Fp_.neg(Fp_.ONE));//  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\r\n  const c2 = tn(Fp_, c1);              //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\r\n  const c3 = tn(Fp_, Fp_.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\r\n  const c4 = (P + _7n) / _16n;         //  4. c4 = (q + 7) / 16        # Integer arithmetic\r\n  return <T>(Fp: IField<T>, n: T) => {\r\n    let tv1 = Fp.pow(n, c4);           //  1. tv1 = x^c4\r\n    let tv2 = Fp.mul(tv1, c1);         //  2. tv2 = c1 * tv1\r\n    const tv3 = Fp.mul(tv1, c2);       //  3. tv3 = c2 * tv1\r\n    const tv4 = Fp.mul(tv1, c3);       //  4. tv4 = c3 * tv1\r\n    const e1 = Fp.eql(Fp.sqr(tv2), n); //  5.  e1 = (tv2^2) == x\r\n    const e2 = Fp.eql(Fp.sqr(tv3), n); //  6.  e2 = (tv3^2) == x\r\n    tv1 = Fp.cmov(tv1, tv2, e1);       //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\r\n    tv2 = Fp.cmov(tv4, tv3, e2);       //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\r\n    const e3 = Fp.eql(Fp.sqr(tv2), n); //  9.  e3 = (tv2^2) == x\r\n    const root = Fp.cmov(tv1, tv2, e3);// 10.  z = CMOV(tv1, tv2, e3)   # Select sqrt from tv1 & tv2\r\n    assertIsSquare(Fp, root, n);\r\n    return root;\r\n  };\r\n}\r\n\r\n/**\r\n * Tonelli-Shanks square root search algorithm.\r\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\r\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\r\n * @param P field order\r\n * @returns function that takes field Fp (created from P) and number n\r\n */\r\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\r\n  // Initialization (precomputation).\r\n  // Caching initialization could boost perf by 7%.\r\n  if (P < _3n) throw new Error('sqrt is not defined for small field');\r\n  // Factor P - 1 = Q * 2^S, where Q is odd\r\n  let Q = P - _1n;\r\n  let S = 0;\r\n  while (Q % _2n === _0n) {\r\n    Q /= _2n;\r\n    S++;\r\n  }\r\n\r\n  // Find the first quadratic non-residue Z >= 2\r\n  let Z = _2n;\r\n  const _Fp = Field(P);\r\n  while (FpLegendre(_Fp, Z) === 1) {\r\n    // Basic primality test for P. After x iterations, chance of\r\n    // not finding quadratic non-residue is 2^x, so 2^1000.\r\n    if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\r\n  }\r\n  // Fast-path; usually done before Z, but we do \"primality test\".\r\n  if (S === 1) return sqrt3mod4;\r\n\r\n  // Slow-path\r\n  // TODO: test on Fp2 and others\r\n  let cc = _Fp.pow(Z, Q); // c = z^Q\r\n  const Q1div2 = (Q + _1n) / _2n;\r\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\r\n    if (Fp.is0(n)) return n;\r\n    // Check if n is a quadratic residue using Legendre symbol\r\n    if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\r\n\r\n    // Initialize variables for the main loop\r\n    let M = S;\r\n    let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\r\n    let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\r\n    let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\r\n\r\n    // Main loop\r\n    // while t != 1\r\n    while (!Fp.eql(t, Fp.ONE)) {\r\n      if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\r\n      let i = 1;\r\n\r\n      // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\r\n      let t_tmp = Fp.sqr(t); // t^(2^1)\r\n      while (!Fp.eql(t_tmp, Fp.ONE)) {\r\n        i++;\r\n        t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\r\n        if (i === M) throw new Error('Cannot find square root');\r\n      }\r\n\r\n      // Calculate the exponent for b: 2^(M - i - 1)\r\n      const exponent = _1n << BigInt(M - i - 1); // bigint is important\r\n      const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\r\n\r\n      // Update variables\r\n      M = i;\r\n      c = Fp.sqr(b); // c = b^2\r\n      t = Fp.mul(t, c); // t = (t * b^2)\r\n      R = Fp.mul(R, b); // R = R*b\r\n    }\r\n    return R;\r\n  };\r\n}\r\n\r\n/**\r\n * Square root for a finite field. Will try optimized versions first:\r\n *\r\n * 1. P ≡ 3 (mod 4)\r\n * 2. P ≡ 5 (mod 8)\r\n * 3. P ≡ 9 (mod 16)\r\n * 4. Tonelli-Shanks algorithm\r\n *\r\n * Different algorithms can give different roots, it is up to user to decide which one they want.\r\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\r\n */\r\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\r\n  // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\r\n  if (P % _4n === _3n) return sqrt3mod4;\r\n  // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\r\n  if (P % _8n === _5n) return sqrt5mod8;\r\n  // P ≡ 9 (mod 16) => Kong algorithm, page 11 of https://eprint.iacr.org/2012/685.pdf (algorithm 4)\r\n  if (P % _16n === _9n) return sqrt9mod16(P);\r\n  // Tonelli-Shanks algorithm\r\n  return tonelliShanks(P);\r\n}\r\n\r\n// Little-endian check for first LE bit (last BE bit);\r\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\r\n  (mod(num, modulo) & _1n) === _1n;\r\n\r\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\r\nexport interface IField<T> {\r\n  ORDER: bigint;\r\n  isLE: boolean;\r\n  BYTES: number;\r\n  BITS: number;\r\n  MASK: bigint;\r\n  ZERO: T;\r\n  ONE: T;\r\n  // 1-arg\r\n  create: (num: T) => T;\r\n  isValid: (num: T) => boolean;\r\n  is0: (num: T) => boolean;\r\n  isValidNot0: (num: T) => boolean;\r\n  neg(num: T): T;\r\n  inv(num: T): T;\r\n  sqrt(num: T): T;\r\n  sqr(num: T): T;\r\n  // 2-args\r\n  eql(lhs: T, rhs: T): boolean;\r\n  add(lhs: T, rhs: T): T;\r\n  sub(lhs: T, rhs: T): T;\r\n  mul(lhs: T, rhs: T | bigint): T;\r\n  pow(lhs: T, power: bigint): T;\r\n  div(lhs: T, rhs: T | bigint): T;\r\n  // N for NonNormalized (for now)\r\n  addN(lhs: T, rhs: T): T;\r\n  subN(lhs: T, rhs: T): T;\r\n  mulN(lhs: T, rhs: T | bigint): T;\r\n  sqrN(num: T): T;\r\n\r\n  // Optional\r\n  // Should be same as sgn0 function in\r\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\r\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\r\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\r\n  allowedLengths?: number[];\r\n  // legendre?(num: T): T;\r\n  invertBatch: (lst: T[]) => T[];\r\n  toBytes(num: T): Uint8Array;\r\n  fromBytes(bytes: Uint8Array, skipValidation?: boolean): T;\r\n  // If c is False, CMOV returns a, otherwise it returns b.\r\n  cmov(a: T, b: T, c: boolean): T;\r\n}\r\n// prettier-ignore\r\nconst FIELD_FIELDS = [\r\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\r\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\r\n  'addN', 'subN', 'mulN', 'sqrN'\r\n] as const;\r\nexport function validateField<T>(field: IField<T>): IField<T> {\r\n  const initial = {\r\n    ORDER: 'bigint',\r\n    MASK: 'bigint',\r\n    BYTES: 'number',\r\n    BITS: 'number',\r\n  } as Record<string, string>;\r\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\r\n    map[val] = 'function';\r\n    return map;\r\n  }, initial);\r\n  _validateObject(field, opts);\r\n  // const max = 16384;\r\n  // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\r\n  // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\r\n  return field;\r\n}\r\n\r\n// Generic field functions\r\n\r\n/**\r\n * Same as `pow` but for Fp: non-constant-time.\r\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\r\n */\r\nexport function FpPow<T>(Fp: IField<T>, num: T, power: bigint): T {\r\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\r\n  if (power === _0n) return Fp.ONE;\r\n  if (power === _1n) return num;\r\n  let p = Fp.ONE;\r\n  let d = num;\r\n  while (power > _0n) {\r\n    if (power & _1n) p = Fp.mul(p, d);\r\n    d = Fp.sqr(d);\r\n    power >>= _1n;\r\n  }\r\n  return p;\r\n}\r\n\r\n/**\r\n * Efficiently invert an array of Field elements.\r\n * Exception-free. Will return `undefined` for 0 elements.\r\n * @param passZero map 0 to 0 (instead of undefined)\r\n */\r\nexport function FpInvertBatch<T>(Fp: IField<T>, nums: T[], passZero = false): T[] {\r\n  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\r\n  // Walk from first to last, multiply them by each other MOD p\r\n  const multipliedAcc = nums.reduce((acc, num, i) => {\r\n    if (Fp.is0(num)) return acc;\r\n    inverted[i] = acc;\r\n    return Fp.mul(acc, num);\r\n  }, Fp.ONE);\r\n  // Invert last element\r\n  const invertedAcc = Fp.inv(multipliedAcc);\r\n  // Walk from last to first, multiply them by inverted each other MOD p\r\n  nums.reduceRight((acc, num, i) => {\r\n    if (Fp.is0(num)) return acc;\r\n    inverted[i] = Fp.mul(acc, inverted[i]);\r\n    return Fp.mul(acc, num);\r\n  }, invertedAcc);\r\n  return inverted;\r\n}\r\n\r\n// TODO: remove\r\nexport function FpDiv<T>(Fp: IField<T>, lhs: T, rhs: T | bigint): T {\r\n  return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\r\n}\r\n\r\n/**\r\n * Legendre symbol.\r\n * Legendre constant is used to calculate Legendre symbol (a | p)\r\n * which denotes the value of a^((p-1)/2) (mod p).\r\n *\r\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\r\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\r\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\r\n */\r\nexport function FpLegendre<T>(Fp: IField<T>, n: T): -1 | 0 | 1 {\r\n  // We can use 3rd argument as optional cache of this value\r\n  // but seems unneeded for now. The operation is very fast.\r\n  const p1mod2 = (Fp.ORDER - _1n) / _2n;\r\n  const powered = Fp.pow(n, p1mod2);\r\n  const yes = Fp.eql(powered, Fp.ONE);\r\n  const zero = Fp.eql(powered, Fp.ZERO);\r\n  const no = Fp.eql(powered, Fp.neg(Fp.ONE));\r\n  if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\r\n  return yes ? 1 : zero ? 0 : -1;\r\n}\r\n\r\n// This function returns True whenever the value x is a square in the field F.\r\nexport function FpIsSquare<T>(Fp: IField<T>, n: T): boolean {\r\n  const l = FpLegendre(Fp, n);\r\n  return l === 1;\r\n}\r\n\r\nexport type NLength = { nByteLength: number; nBitLength: number };\r\n// CURVE.n lengths\r\nexport function nLength(n: bigint, nBitLength?: number): NLength {\r\n  // Bit size, byte size of CURVE.n\r\n  if (nBitLength !== undefined) anumber(nBitLength);\r\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\r\n  const nByteLength = Math.ceil(_nBitLength / 8);\r\n  return { nBitLength: _nBitLength, nByteLength };\r\n}\r\n\r\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\r\ntype SqrtFn = (n: bigint) => bigint;\r\ntype FieldOpts = Partial<{\r\n  sqrt: SqrtFn;\r\n  isLE: boolean;\r\n  BITS: number;\r\n  modOnDecode: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\r\n  allowedLengths?: readonly number[]; // for P521 (adds padding for smaller sizes)\r\n}>;\r\n/**\r\n * Creates a finite field. Major performance optimizations:\r\n * * 1. Denormalized operations like mulN instead of mul.\r\n * * 2. Identical object shape: never add or remove keys.\r\n * * 3. `Object.freeze`.\r\n * Fragile: always run a benchmark on a change.\r\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\r\n * it is caller responsibility to check this.\r\n * This is low-level code, please make sure you know what you're doing.\r\n *\r\n * Note about field properties:\r\n * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\r\n * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\r\n *\r\n * @param ORDER field order, probably prime, or could be composite\r\n * @param bitLen how many bits the field consumes\r\n * @param isLE (default: false) if encoding / decoding should be in little-endian\r\n * @param redef optional faster redefinitions of sqrt and other methods\r\n */\r\nexport function Field(\r\n  ORDER: bigint,\r\n  bitLenOrOpts?: number | FieldOpts, // TODO: use opts only in v2?\r\n  isLE = false,\r\n  opts: { sqrt?: SqrtFn } = {}\r\n): Readonly<FpField> {\r\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\r\n  let _nbitLength: number | undefined = undefined;\r\n  let _sqrt: SqrtFn | undefined = undefined;\r\n  let modOnDecode: boolean = false;\r\n  let allowedLengths: undefined | readonly number[] = undefined;\r\n  if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\r\n    if (opts.sqrt || isLE) throw new Error('cannot specify opts in two arguments');\r\n    const _opts = bitLenOrOpts;\r\n    if (_opts.BITS) _nbitLength = _opts.BITS;\r\n    if (_opts.sqrt) _sqrt = _opts.sqrt;\r\n    if (typeof _opts.isLE === 'boolean') isLE = _opts.isLE;\r\n    if (typeof _opts.modOnDecode === 'boolean') modOnDecode = _opts.modOnDecode;\r\n    allowedLengths = _opts.allowedLengths;\r\n  } else {\r\n    if (typeof bitLenOrOpts === 'number') _nbitLength = bitLenOrOpts;\r\n    if (opts.sqrt) _sqrt = opts.sqrt;\r\n  }\r\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);\r\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\r\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\r\n  const f: Readonly<FpField> = Object.freeze({\r\n    ORDER,\r\n    isLE,\r\n    BITS,\r\n    BYTES,\r\n    MASK: bitMask(BITS),\r\n    ZERO: _0n,\r\n    ONE: _1n,\r\n    allowedLengths: allowedLengths,\r\n    create: (num) => mod(num, ORDER),\r\n    isValid: (num) => {\r\n      if (typeof num !== 'bigint')\r\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\r\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\r\n    },\r\n    is0: (num) => num === _0n,\r\n    // is valid and invertible\r\n    isValidNot0: (num: bigint) => !f.is0(num) && f.isValid(num),\r\n    isOdd: (num) => (num & _1n) === _1n,\r\n    neg: (num) => mod(-num, ORDER),\r\n    eql: (lhs, rhs) => lhs === rhs,\r\n\r\n    sqr: (num) => mod(num * num, ORDER),\r\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\r\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\r\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\r\n    pow: (num, power) => FpPow(f, num, power),\r\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\r\n\r\n    // Same as above, but doesn't normalize\r\n    sqrN: (num) => num * num,\r\n    addN: (lhs, rhs) => lhs + rhs,\r\n    subN: (lhs, rhs) => lhs - rhs,\r\n    mulN: (lhs, rhs) => lhs * rhs,\r\n\r\n    inv: (num) => invert(num, ORDER),\r\n    sqrt:\r\n      _sqrt ||\r\n      ((n) => {\r\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\r\n        return sqrtP(f, n);\r\n      }),\r\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\r\n    fromBytes: (bytes, skipValidation = true) => {\r\n      if (allowedLengths) {\r\n        if (!allowedLengths.includes(bytes.length) || bytes.length > BYTES) {\r\n          throw new Error(\r\n            'Field.fromBytes: expected ' + allowedLengths + ' bytes, got ' + bytes.length\r\n          );\r\n        }\r\n        const padded = new Uint8Array(BYTES);\r\n        // isLE add 0 to right, !isLE to the left.\r\n        padded.set(bytes, isLE ? 0 : padded.length - bytes.length);\r\n        bytes = padded;\r\n      }\r\n      if (bytes.length !== BYTES)\r\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\r\n      let scalar = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\r\n      if (modOnDecode) scalar = mod(scalar, ORDER);\r\n      if (!skipValidation)\r\n        if (!f.isValid(scalar)) throw new Error('invalid field element: outside of range 0..ORDER');\r\n      // NOTE: we don't validate scalar here, please use isValid. This done such way because some\r\n      // protocol may allow non-reduced scalar that reduced later or changed some other way.\r\n      return scalar;\r\n    },\r\n    // TODO: we don't need it here, move out to separate fn\r\n    invertBatch: (lst) => FpInvertBatch(f, lst),\r\n    // We can't move this out because Fp6, Fp12 implement it\r\n    // and it's unclear what to return in there.\r\n    cmov: (a, b, c) => (c ? b : a),\r\n  } as FpField);\r\n  return Object.freeze(f);\r\n}\r\n\r\n// Generic random scalar, we can do same for other fields if via Fp2.mul(Fp2.ONE, Fp2.random)?\r\n// This allows unsafe methods like ignore bias or zero. These unsafe, but often used in different protocols (if deterministic RNG).\r\n// which mean we cannot force this via opts.\r\n// Not sure what to do with randomBytes, we can accept it inside opts if wanted.\r\n// Probably need to export getMinHashLength somewhere?\r\n// random(bytes?: Uint8Array, unsafeAllowZero = false, unsafeAllowBias = false) {\r\n//   const LEN = !unsafeAllowBias ? getMinHashLength(ORDER) : BYTES;\r\n//   if (bytes === undefined) bytes = randomBytes(LEN); // _opts.randomBytes?\r\n//   const num = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\r\n//   // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\r\n//   const reduced = unsafeAllowZero ? mod(num, ORDER) : mod(num, ORDER - _1n) + _1n;\r\n//   return reduced;\r\n// },\r\n\r\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\r\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\r\n  const root = Fp.sqrt(elm);\r\n  return Fp.isOdd(root) ? root : Fp.neg(root);\r\n}\r\n\r\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\r\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\r\n  const root = Fp.sqrt(elm);\r\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\r\n}\r\n\r\n/**\r\n * \"Constant-time\" private key generation utility.\r\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\r\n * Which makes it slightly more biased, less secure.\r\n * @deprecated use `mapKeyToField` instead\r\n */\r\nexport function hashToPrivateScalar(\r\n  hash: string | Uint8Array,\r\n  groupOrder: bigint,\r\n  isLE = false\r\n): bigint {\r\n  hash = ensureBytes('privateHash', hash);\r\n  const hashLen = hash.length;\r\n  const minLen = nLength(groupOrder).nByteLength + 8;\r\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\r\n    throw new Error(\r\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\r\n    );\r\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\r\n  return mod(num, groupOrder - _1n) + _1n;\r\n}\r\n\r\n/**\r\n * Returns total number of bytes consumed by the field element.\r\n * For example, 32 bytes for usual 256-bit weierstrass curve.\r\n * @param fieldOrder number of field elements, usually CURVE.n\r\n * @returns byte length of field\r\n */\r\nexport function getFieldBytesLength(fieldOrder: bigint): number {\r\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\r\n  const bitLength = fieldOrder.toString(2).length;\r\n  return Math.ceil(bitLength / 8);\r\n}\r\n\r\n/**\r\n * Returns minimal amount of bytes that can be safely reduced\r\n * by field order.\r\n * Should be 2^-128 for 128-bit curve such as P256.\r\n * @param fieldOrder number of field elements, usually CURVE.n\r\n * @returns byte length of target hash\r\n */\r\nexport function getMinHashLength(fieldOrder: bigint): number {\r\n  const length = getFieldBytesLength(fieldOrder);\r\n  return length + Math.ceil(length / 2);\r\n}\r\n\r\n/**\r\n * \"Constant-time\" private key generation utility.\r\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\r\n * and convert them into private scalar, with the modulo bias being negligible.\r\n * Needs at least 48 bytes of input for 32-byte private key.\r\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\r\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\r\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\r\n * @param hash hash output from SHA3 or a similar function\r\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\r\n * @param isLE interpret hash bytes as LE num\r\n * @returns valid private scalar\r\n */\r\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\r\n  const len = key.length;\r\n  const fieldLen = getFieldBytesLength(fieldOrder);\r\n  const minLen = getMinHashLength(fieldOrder);\r\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\r\n  if (len < 16 || len < minLen || len > 1024)\r\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\r\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\r\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\r\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\r\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\r\n}\r\n", "/**\r\n * Methods for elliptic curve multiplication by scalars.\r\n * Contains wNAF, pippenger.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { bitLen, bitMask, validateObject, type Hex } from '../utils.ts';\r\nimport { Field, FpInvertBatch, nLength, validateField, type IField } from './modular.ts';\r\n\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\n\r\nexport type AffinePoint<T> = {\r\n  x: T;\r\n  y: T;\r\n} & { z?: never; t?: never };\r\n\r\n// This was initialy do this way to re-use montgomery ladder in field (add->mul,double->sqr), but\r\n// that didn't happen and there is probably not much reason to have separate Group like this?\r\nexport interface Group<T extends Group<T>> {\r\n  double(): T;\r\n  negate(): T;\r\n  add(other: T): T;\r\n  subtract(other: T): T;\r\n  equals(other: T): boolean;\r\n  multiply(scalar: bigint): T;\r\n  toAffine?(invertedZ?: any): AffinePoint<any>;\r\n}\r\n\r\n// We can't \"abstract out\" coordinates (X, Y, Z; and T in Edwards): argument names of constructor\r\n// are not accessible. See Typescript gh-56093, gh-41594.\r\n\r\n/** Base interface for all elliptic curve Points. */\r\nexport interface CurvePoint<F, P extends CurvePoint<F, P>> extends Group<P> {\r\n  /** Affine x coordinate. Different from projective / extended X coordinate. */\r\n  x: F;\r\n  /** Affine y coordinate. Different from projective / extended Y coordinate. */\r\n  y: F;\r\n  Z?: F;\r\n  assertValidity(): void;\r\n  clearCofactor(): P;\r\n  is0(): boolean;\r\n  isTorsionFree(): boolean;\r\n  isSmallOrder(): boolean;\r\n  multiplyUnsafe(scalar: bigint): P;\r\n  /**\r\n   * Massively speeds up `p.multiply(n)` by using precompute tables (caching). See {@link wNAF}.\r\n   * @param isLazy calculate cache now. Default (true) ensures it's deferred to first `multiply()`\r\n   */\r\n  precompute(windowSize?: number, isLazy?: boolean): P;\r\n  /** Converts point to 2D xy affine coordinates */\r\n  toAffine(invertedZ?: F): AffinePoint<F>;\r\n  toBytes(): Uint8Array;\r\n  toHex(): string;\r\n}\r\n\r\n/** Base interface for all elliptic curve Point constructors. */\r\nexport interface CurvePointCons<F, P extends CurvePoint<F, P>> extends GroupConstructor<P> {\r\n  BASE: P;\r\n  ZERO: P;\r\n  /** Field for basic curve math */\r\n  Fp: IField<F>;\r\n  /** Scalar field, for scalars in multiply and others */\r\n  Fn: IField<bigint>;\r\n  /** Creates point from x, y. Does NOT validate if the point is valid. Use `.assertValidity()`. */\r\n  fromAffine(p: AffinePoint<F>): P;\r\n  fromBytes(bytes: Uint8Array): P;\r\n  fromHex(hex: Hex): P;\r\n}\r\n\r\n// Type inference helpers\r\n// PC - PointConstructor, P - Point, Fp - Field element\r\nexport type GetPointConsF<PC> = PC extends CurvePointCons<infer F, any> ? F : never;\r\nexport type GetPointConsPoint<PC> = PC extends CurvePointCons<any, infer P> ? P : never;\r\n\r\n// More like SigAlgorithmInfo, not CurveInfo\r\nexport interface CurveInfo {\r\n  type: 'weierstrass' | 'edwards' | 'montgomery';\r\n  publicKeyHasPrefix?: boolean;\r\n  lengths: {\r\n    secret: number;\r\n    public: number;\r\n    publicUncompressed?: number;\r\n    signature: number;\r\n    seed: number;\r\n  };\r\n}\r\nexport type GroupConstructor<T> = {\r\n  BASE: T;\r\n  ZERO: T;\r\n};\r\n/** @deprecated */\r\nexport type ExtendedGroupConstructor<T> = GroupConstructor<T> & {\r\n  Fp: IField<any>;\r\n  Fn: IField<bigint>;\r\n  fromAffine(ap: AffinePoint<any>): T;\r\n};\r\nexport type Mapper<T> = (i: T[]) => T[];\r\n\r\nexport function negateCt<T extends { negate: () => T }>(condition: boolean, item: T): T {\r\n  const neg = item.negate();\r\n  return condition ? neg : item;\r\n}\r\n\r\n/**\r\n * Takes a bunch of Projective Points but executes only one\r\n * inversion on all of them. Inversion is very slow operation,\r\n * so this improves performance massively.\r\n * Optimization: converts a list of projective points to a list of identical points with Z=1.\r\n */\r\nexport function normalizeZ<\r\n  PC extends CurvePointCons<any, any>,\r\n  F = GetPointConsF<PC>,\r\n  P extends CurvePoint<F, P> = GetPointConsPoint<PC>,\r\n>(c: CurvePointCons<F, P>, points: P[]): P[] {\r\n  const invertedZs = FpInvertBatch(\r\n    c.Fp,\r\n    points.map((p) => p.Z!)\r\n  );\r\n  return points.map((p, i) => c.fromAffine(p.toAffine(invertedZs[i])));\r\n}\r\n\r\nfunction validateW(W: number, bits: number) {\r\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\r\n    throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\r\n}\r\n\r\n/** Internal wNAF opts for specific W and scalarBits */\r\nexport type WOpts = {\r\n  windows: number;\r\n  windowSize: number;\r\n  mask: bigint;\r\n  maxNumber: number;\r\n  shiftBy: bigint;\r\n};\r\n\r\nfunction calcWOpts(W: number, scalarBits: number): WOpts {\r\n  validateW(W, scalarBits);\r\n  const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\r\n  const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\r\n  const maxNumber = 2 ** W; // W=8 256\r\n  const mask = bitMask(W); // W=8 255 == mask 0b11111111\r\n  const shiftBy = BigInt(W); // W=8 8\r\n  return { windows, windowSize, mask, maxNumber, shiftBy };\r\n}\r\n\r\nfunction calcOffsets(n: bigint, window: number, wOpts: WOpts) {\r\n  const { windowSize, mask, maxNumber, shiftBy } = wOpts;\r\n  let wbits = Number(n & mask); // extract W bits.\r\n  let nextN = n >> shiftBy; // shift number by W bits.\r\n\r\n  // What actually happens here:\r\n  // const highestBit = Number(mask ^ (mask >> 1n));\r\n  // let wbits2 = wbits - 1; // skip zero\r\n  // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\r\n\r\n  // split if bits > max: +224 => 256-32\r\n  if (wbits > windowSize) {\r\n    // we skip zero, which means instead of `>= size-1`, we do `> size`\r\n    wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\r\n    nextN += _1n; // +256 (carry)\r\n  }\r\n  const offsetStart = window * windowSize;\r\n  const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\r\n  const isZero = wbits === 0; // is current window slice a 0?\r\n  const isNeg = wbits < 0; // is current window slice negative?\r\n  const isNegF = window % 2 !== 0; // fake random statement for noise\r\n  const offsetF = offsetStart; // fake offset for noise\r\n  return { nextN, offset, isZero, isNeg, isNegF, offsetF };\r\n}\r\n\r\nfunction validateMSMPoints(points: any[], c: any) {\r\n  if (!Array.isArray(points)) throw new Error('array expected');\r\n  points.forEach((p, i) => {\r\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\r\n  });\r\n}\r\nfunction validateMSMScalars(scalars: any[], field: any) {\r\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\r\n  scalars.forEach((s, i) => {\r\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\r\n  });\r\n}\r\n\r\n// Since points in different groups cannot be equal (different object constructor),\r\n// we can have single place to store precomputes.\r\n// Allows to make points frozen / immutable.\r\nconst pointPrecomputes = new WeakMap<any, any[]>();\r\nconst pointWindowSizes = new WeakMap<any, number>();\r\n\r\nfunction getW(P: any): number {\r\n  // To disable precomputes:\r\n  // return 1;\r\n  return pointWindowSizes.get(P) || 1;\r\n}\r\n\r\nfunction assert0(n: bigint): void {\r\n  if (n !== _0n) throw new Error('invalid wNAF');\r\n}\r\n\r\n/**\r\n * Elliptic curve multiplication of Point by scalar. Fragile.\r\n * Table generation takes **30MB of ram and 10ms on high-end CPU**,\r\n * but may take much longer on slow devices. Actual generation will happen on\r\n * first call of `multiply()`. By default, `BASE` point is precomputed.\r\n *\r\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\r\n * Creates precomputation tables for fast multiplication:\r\n * - private scalar is split by fixed size windows of W bits\r\n * - every window point is collected from window's table & added to accumulator\r\n * - since windows are different, same point inside tables won't be accessed more than once per calc\r\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\r\n * - +1 window is neccessary for wNAF\r\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\r\n *\r\n * @todo Research returning 2d JS array of windows, instead of a single window.\r\n * This would allow windows to be in different memory locations\r\n */\r\nexport class wNAF<F, P extends CurvePoint<F, P>> {\r\n  private readonly BASE: P;\r\n  private readonly ZERO: P;\r\n  private readonly Fn: CurvePointCons<F, P>['Fn'];\r\n  readonly bits: number;\r\n\r\n  // Parametrized with a given Point class (not individual point)\r\n  constructor(Point: CurvePointCons<F, P>, bits: number) {\r\n    this.BASE = Point.BASE;\r\n    this.ZERO = Point.ZERO;\r\n    this.Fn = Point.Fn;\r\n    this.bits = bits;\r\n  }\r\n\r\n  // non-const time multiplication ladder\r\n  _unsafeLadder(elm: P, n: bigint, p: P = this.ZERO): P {\r\n    let d: P = elm;\r\n    while (n > _0n) {\r\n      if (n & _1n) p = p.add(d);\r\n      d = d.double();\r\n      n >>= _1n;\r\n    }\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Creates a wNAF precomputation window. Used for caching.\r\n   * Default window size is set by `utils.precompute()` and is equal to 8.\r\n   * Number of precomputed points depends on the curve size:\r\n   * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\r\n   * - 𝑊 is the window size\r\n   * - 𝑛 is the bitlength of the curve order.\r\n   * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\r\n   * @param point Point instance\r\n   * @param W window size\r\n   * @returns precomputed point tables flattened to a single array\r\n   */\r\n  private precomputeWindow(point: P, W: number): Group<P>[] {\r\n    const { windows, windowSize } = calcWOpts(W, this.bits);\r\n    const points: P[] = [];\r\n    let p: P = point;\r\n    let base = p;\r\n    for (let window = 0; window < windows; window++) {\r\n      base = p;\r\n      points.push(base);\r\n      // i=1, bc we skip 0\r\n      for (let i = 1; i < windowSize; i++) {\r\n        base = base.add(p);\r\n        points.push(base);\r\n      }\r\n      p = base.double();\r\n    }\r\n    return points;\r\n  }\r\n\r\n  /**\r\n   * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\r\n   * More compact implementation:\r\n   * https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\r\n   * @returns real and fake (for const-time) points\r\n   */\r\n  private wNAF(W: number, precomputes: P[], n: bigint): { p: P; f: P } {\r\n    // Scalar should be smaller than field order\r\n    if (!this.Fn.isValid(n)) throw new Error('invalid scalar');\r\n    // Accumulators\r\n    let p = this.ZERO;\r\n    let f = this.BASE;\r\n    // This code was first written with assumption that 'f' and 'p' will never be infinity point:\r\n    // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\r\n    // there is negate now: it is possible that negated element from low value\r\n    // would be the same as high element, which will create carry into next window.\r\n    // It's not obvious how this can fail, but still worth investigating later.\r\n    const wo = calcWOpts(W, this.bits);\r\n    for (let window = 0; window < wo.windows; window++) {\r\n      // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\r\n      const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\r\n      n = nextN;\r\n      if (isZero) {\r\n        // bits are 0: add garbage to fake point\r\n        // Important part for const-time getPublicKey: add random \"noise\" point to f.\r\n        f = f.add(negateCt(isNegF, precomputes[offsetF]));\r\n      } else {\r\n        // bits are 1: add to result point\r\n        p = p.add(negateCt(isNeg, precomputes[offset]));\r\n      }\r\n    }\r\n    assert0(n);\r\n    // Return both real and fake points: JIT won't eliminate f.\r\n    // At this point there is a way to F be infinity-point even if p is not,\r\n    // which makes it less const-time: around 1 bigint multiply.\r\n    return { p, f };\r\n  }\r\n\r\n  /**\r\n   * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\r\n   * @param acc accumulator point to add result of multiplication\r\n   * @returns point\r\n   */\r\n  private wNAFUnsafe(W: number, precomputes: P[], n: bigint, acc: P = this.ZERO): P {\r\n    const wo = calcWOpts(W, this.bits);\r\n    for (let window = 0; window < wo.windows; window++) {\r\n      if (n === _0n) break; // Early-exit, skip 0 value\r\n      const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\r\n      n = nextN;\r\n      if (isZero) {\r\n        // Window bits are 0: skip processing.\r\n        // Move to next window.\r\n        continue;\r\n      } else {\r\n        const item = precomputes[offset];\r\n        acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\r\n      }\r\n    }\r\n    assert0(n);\r\n    return acc;\r\n  }\r\n\r\n  private getPrecomputes(W: number, point: P, transform?: Mapper<P>): P[] {\r\n    // Calculate precomputes on a first run, reuse them after\r\n    let comp = pointPrecomputes.get(point);\r\n    if (!comp) {\r\n      comp = this.precomputeWindow(point, W) as P[];\r\n      if (W !== 1) {\r\n        // Doing transform outside of if brings 15% perf hit\r\n        if (typeof transform === 'function') comp = transform(comp);\r\n        pointPrecomputes.set(point, comp);\r\n      }\r\n    }\r\n    return comp;\r\n  }\r\n\r\n  cached(point: P, scalar: bigint, transform?: Mapper<P>): { p: P; f: P } {\r\n    const W = getW(point);\r\n    return this.wNAF(W, this.getPrecomputes(W, point, transform), scalar);\r\n  }\r\n\r\n  unsafe(point: P, scalar: bigint, transform?: Mapper<P>, prev?: P): P {\r\n    const W = getW(point);\r\n    if (W === 1) return this._unsafeLadder(point, scalar, prev); // For W=1 ladder is ~x2 faster\r\n    return this.wNAFUnsafe(W, this.getPrecomputes(W, point, transform), scalar, prev);\r\n  }\r\n\r\n  // We calculate precomputes for elliptic curve point multiplication\r\n  // using windowed method. This specifies window size and\r\n  // stores precomputed values. Usually only base point would be precomputed.\r\n  createCache(P: P, W: number): void {\r\n    validateW(W, this.bits);\r\n    pointWindowSizes.set(P, W);\r\n    pointPrecomputes.delete(P);\r\n  }\r\n\r\n  hasCache(elm: P): boolean {\r\n    return getW(elm) !== 1;\r\n  }\r\n}\r\n\r\n/**\r\n * Endomorphism-specific multiplication for Koblitz curves.\r\n * Cost: 128 dbl, 0-256 adds.\r\n */\r\nexport function mulEndoUnsafe<T extends Group<T>>(\r\n  Point: GroupConstructor<T>,\r\n  point: T,\r\n  k1: bigint,\r\n  k2: bigint\r\n): { p1: T; p2: T } {\r\n  let acc = point;\r\n  let p1 = Point.ZERO;\r\n  let p2 = Point.ZERO;\r\n  while (k1 > _0n || k2 > _0n) {\r\n    if (k1 & _1n) p1 = p1.add(acc);\r\n    if (k2 & _1n) p2 = p2.add(acc);\r\n    acc = acc.double();\r\n    k1 >>= _1n;\r\n    k2 >>= _1n;\r\n  }\r\n  return { p1, p2 };\r\n}\r\n\r\n/**\r\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\r\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\r\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\r\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\r\n * @param c Curve Point constructor\r\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\r\n * @param points array of L curve points\r\n * @param scalars array of L scalars (aka secret keys / bigints)\r\n */\r\nexport function pippenger<T extends Group<T>>(\r\n  c: GroupConstructor<T>,\r\n  fieldN: IField<bigint>,\r\n  points: T[],\r\n  scalars: bigint[]\r\n): T {\r\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\r\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\r\n  // TODO:\r\n  // - https://eprint.iacr.org/2024/750.pdf\r\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\r\n  // 0 is accepted in scalars\r\n  validateMSMPoints(points, c);\r\n  validateMSMScalars(scalars, fieldN);\r\n  const plength = points.length;\r\n  const slength = scalars.length;\r\n  if (plength !== slength) throw new Error('arrays of points and scalars must have equal length');\r\n  // if (plength === 0) throw new Error('array must be of length >= 2');\r\n  const zero = c.ZERO;\r\n  const wbits = bitLen(BigInt(plength));\r\n  let windowSize = 1; // bits\r\n  if (wbits > 12) windowSize = wbits - 3;\r\n  else if (wbits > 4) windowSize = wbits - 2;\r\n  else if (wbits > 0) windowSize = 2;\r\n  const MASK = bitMask(windowSize);\r\n  const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\r\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\r\n  let sum = zero;\r\n  for (let i = lastBits; i >= 0; i -= windowSize) {\r\n    buckets.fill(zero);\r\n    for (let j = 0; j < slength; j++) {\r\n      const scalar = scalars[j];\r\n      const wbits = Number((scalar >> BigInt(i)) & MASK);\r\n      buckets[wbits] = buckets[wbits].add(points[j]);\r\n    }\r\n    let resI = zero; // not using this will do small speed-up, but will lose ct\r\n    // Skip first bucket, because it is zero\r\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\r\n      sumI = sumI.add(buckets[j]);\r\n      resI = resI.add(sumI);\r\n    }\r\n    sum = sum.add(resI);\r\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\r\n  }\r\n  return sum as T;\r\n}\r\n/**\r\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\r\n * @param c Curve Point constructor\r\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\r\n * @param points array of L curve points\r\n * @returns function which multiplies points with scaars\r\n */\r\nexport function precomputeMSMUnsafe<T extends Group<T>>(\r\n  c: GroupConstructor<T>,\r\n  fieldN: IField<bigint>,\r\n  points: T[],\r\n  windowSize: number\r\n): (scalars: bigint[]) => T {\r\n  /**\r\n   * Performance Analysis of Window-based Precomputation\r\n   *\r\n   * Base Case (256-bit scalar, 8-bit window):\r\n   * - Standard precomputation requires:\r\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\r\n   *   - Plus 255 summary additions = 8,191 total ops\r\n   *   Note: Summary additions can be optimized via accumulator\r\n   *\r\n   * Chunked Precomputation Analysis:\r\n   * - Using 32 chunks requires:\r\n   *   - 255 additions per chunk\r\n   *   - 256 doublings\r\n   *   - Total: (255 × 32) + 256 = 8,416 ops\r\n   *\r\n   * Memory Usage Comparison:\r\n   * Window Size | Standard Points | Chunked Points\r\n   * ------------|-----------------|---------------\r\n   *     4-bit   |     520         |      15\r\n   *     8-bit   |    4,224        |     255\r\n   *    10-bit   |   13,824        |   1,023\r\n   *    16-bit   |  557,056        |  65,535\r\n   *\r\n   * Key Advantages:\r\n   * 1. Enables larger window sizes due to reduced memory overhead\r\n   * 2. More efficient for smaller scalar counts:\r\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\r\n   *    - ~2x faster than standard 8,191 ops\r\n   *\r\n   * Limitations:\r\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\r\n   * - Performance degrades with larger scalar counts:\r\n   *   - Optimal for ~256 scalars\r\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\r\n   */\r\n  validateW(windowSize, fieldN.BITS);\r\n  validateMSMPoints(points, c);\r\n  const zero = c.ZERO;\r\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\r\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\r\n  const MASK = bitMask(windowSize);\r\n  const tables = points.map((p: T) => {\r\n    const res = [];\r\n    for (let i = 0, acc = p; i < tableSize; i++) {\r\n      res.push(acc);\r\n      acc = acc.add(p);\r\n    }\r\n    return res;\r\n  });\r\n  return (scalars: bigint[]): T => {\r\n    validateMSMScalars(scalars, fieldN);\r\n    if (scalars.length > points.length)\r\n      throw new Error('array of scalars must be smaller than array of points');\r\n    let res = zero;\r\n    for (let i = 0; i < chunks; i++) {\r\n      // No need to double if accumulator is still zero.\r\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\r\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\r\n      for (let j = 0; j < scalars.length; j++) {\r\n        const n = scalars[j];\r\n        const curr = Number((n >> shiftBy) & MASK);\r\n        if (!curr) continue; // skip zero scalars chunks\r\n        res = res.add(tables[j][curr - 1]);\r\n      }\r\n    }\r\n    return res;\r\n  };\r\n}\r\n\r\n// TODO: remove\r\n/**\r\n * Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\r\n * Though generator can be different (Fp2 / Fp6 for BLS).\r\n */\r\nexport type BasicCurve<T> = {\r\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\r\n  n: bigint; // Curve order, total count of valid points in the field\r\n  nBitLength?: number; // bit length of curve order\r\n  nByteLength?: number; // byte length of curve order\r\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\r\n  hEff?: bigint; // Number to multiply to clear cofactor\r\n  Gx: T; // base point X coordinate\r\n  Gy: T; // base point Y coordinate\r\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\r\n};\r\n\r\n// TODO: remove\r\n/** @deprecated */\r\nexport function validateBasic<FP, T>(\r\n  curve: BasicCurve<FP> & T\r\n): Readonly<\r\n  {\r\n    readonly nBitLength: number;\r\n    readonly nByteLength: number;\r\n  } & BasicCurve<FP> &\r\n    T & {\r\n      p: bigint;\r\n    }\r\n> {\r\n  validateField(curve.Fp);\r\n  validateObject(\r\n    curve,\r\n    {\r\n      n: 'bigint',\r\n      h: 'bigint',\r\n      Gx: 'field',\r\n      Gy: 'field',\r\n    },\r\n    {\r\n      nBitLength: 'isSafeInteger',\r\n      nByteLength: 'isSafeInteger',\r\n    }\r\n  );\r\n  // Set defaults\r\n  return Object.freeze({\r\n    ...nLength(curve.n, curve.nBitLength),\r\n    ...curve,\r\n    ...{ p: curve.Fp.ORDER },\r\n  } as const);\r\n}\r\n\r\nexport type ValidCurveParams<T> = {\r\n  a: T;\r\n  p: bigint;\r\n  n: bigint;\r\n  h: bigint;\r\n  Gx: T;\r\n  Gy: T;\r\n} & ({ b: T } | { d: T });\r\n\r\nfunction createField<T>(order: bigint, field?: IField<T>): IField<T> {\r\n  if (field) {\r\n    if (field.ORDER !== order) throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\r\n    validateField(field);\r\n    return field;\r\n  } else {\r\n    return Field(order) as unknown as IField<T>;\r\n  }\r\n}\r\nexport type FpFn<T> = { Fp: IField<T>; Fn: IField<bigint> };\r\n/** Validates CURVE opts and creates fields */\r\nexport function _createCurveFields<T>(\r\n  type: 'weierstrass' | 'edwards',\r\n  CURVE: ValidCurveParams<T>,\r\n  curveOpts: Partial<FpFn<T>> = {}\r\n): FpFn<T> {\r\n  if (!CURVE || typeof CURVE !== 'object') throw new Error(`expected valid ${type} CURVE object`);\r\n  for (const p of ['p', 'n', 'h'] as const) {\r\n    const val = CURVE[p];\r\n    if (!(typeof val === 'bigint' && val > _0n))\r\n      throw new Error(`CURVE.${p} must be positive bigint`);\r\n  }\r\n  const Fp = createField(CURVE.p, curveOpts.Fp);\r\n  const Fn = createField(CURVE.n, curveOpts.Fn);\r\n  const _b: 'b' | 'd' = type === 'weierstrass' ? 'b' : 'd';\r\n  const params = ['Gx', 'Gy', 'a', _b] as const;\r\n  for (const p of params) {\r\n    // @ts-ignore\r\n    if (!Fp.isValid(CURVE[p]))\r\n      throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\r\n  }\r\n  return { Fp, Fn };\r\n}\r\n", "/**\r\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\r\n *\r\n * ### Design rationale for types\r\n *\r\n * * Interaction between classes from different curves should fail:\r\n *   `k256.Point.BASE.add(p256.Point.BASE)`\r\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\r\n * * Different calls of `curve()` would return different classes -\r\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\r\n *   it won't affect others\r\n *\r\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\r\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\r\n * unique type for every function call.\r\n *\r\n * We can use generic types via some param, like curve opts, but that would:\r\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\r\n *     which is hard to debug.\r\n *     2. Params can be generic and we can't enforce them to be constant value:\r\n *     if somebody creates curve from non-constant params,\r\n *     it would be allowed to interact with other curves with non-constant params\r\n *\r\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { hmac } from '@noble/hashes/hmac.js';\r\nimport { ahash } from '@noble/hashes/utils';\r\nimport {\r\n  _validateObject,\r\n  abool,\r\n  abytes,\r\n  aInRange,\r\n  bitLen,\r\n  bitMask,\r\n  bytesToHex,\r\n  bytesToNumberBE,\r\n  concatBytes,\r\n  createHmacDrbg,\r\n  ensureBytes,\r\n  hexToBytes,\r\n  inRange,\r\n  isBytes,\r\n  memoized,\r\n  numberToHexUnpadded,\r\n  randomBytes,\r\n  type CHash,\r\n  type Hex,\r\n  type PrivKey,\r\n} from '../utils.ts';\r\nimport {\r\n  _createCurveFields,\r\n  mulEndoUnsafe,\r\n  negateCt,\r\n  normalizeZ,\r\n  pippenger,\r\n  wNAF,\r\n  type AffinePoint,\r\n  type BasicCurve,\r\n  type CurveInfo,\r\n  type CurvePoint,\r\n  type CurvePointCons,\r\n} from './curve.ts';\r\nimport {\r\n  Field,\r\n  FpInvertBatch,\r\n  getMinHashLength,\r\n  mapHashToField,\r\n  validateField,\r\n  type IField,\r\n  type NLength,\r\n} from './modular.ts';\r\n\r\nexport type { AffinePoint };\r\nexport type HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\r\n\r\ntype EndoBasis = [[bigint, bigint], [bigint, bigint]];\r\n/**\r\n * When Weierstrass curve has `a=0`, it becomes Koblitz curve.\r\n * Koblitz curves allow using **efficiently-computable GLV endomorphism ψ**.\r\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\r\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\r\n *\r\n * Endomorphism consists of beta, lambda and splitScalar:\r\n *\r\n * 1. GLV endomorphism ψ transforms a point: `P = (x, y) ↦ ψ(P) = (β·x mod p, y)`\r\n * 2. GLV scalar decomposition transforms a scalar: `k ≡ k₁ + k₂·λ (mod n)`\r\n * 3. Then these are combined: `k·P = k₁·P + k₂·ψ(P)`\r\n * 4. Two 128-bit point-by-scalar multiplications + one point addition is faster than\r\n *    one 256-bit multiplication.\r\n *\r\n * where\r\n * * beta: β ∈ Fₚ with β³ = 1, β ≠ 1\r\n * * lambda: λ ∈ Fₙ with λ³ = 1, λ ≠ 1\r\n * * splitScalar decomposes k ↦ k₁, k₂, by using reduced basis vectors.\r\n *   Gauss lattice reduction calculates them from initial basis vectors `(n, 0), (-λ, 0)`\r\n *\r\n * Check out `test/misc/endomorphism.js` and\r\n * [gist](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\r\n */\r\nexport type EndomorphismOpts = {\r\n  beta: bigint;\r\n  basises?: EndoBasis;\r\n  splitScalar?: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\r\n};\r\nexport type BasicWCurve<T> = BasicCurve<T> & {\r\n  // Params: a, b\r\n  a: T;\r\n  b: T;\r\n\r\n  // Optional params\r\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\r\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\r\n  endo?: EndomorphismOpts;\r\n  // When a cofactor != 1, there can be an effective methods to:\r\n  // 1. Determine whether a point is torsion-free\r\n  isTorsionFree?: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => boolean;\r\n  // 2. Clear torsion component\r\n  clearCofactor?: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => WeierstrassPoint<T>;\r\n};\r\n\r\n// We construct basis in such way that den is always positive and equals n, but num sign depends on basis (not on secret value)\r\nconst divNearest = (num: bigint, den: bigint) => (num + (num >= 0 ? den : -den) / _2n) / den;\r\n\r\nexport type ScalarEndoParts = { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\r\n\r\n/**\r\n * Splits scalar for GLV endomorphism.\r\n */\r\nexport function _splitEndoScalar(k: bigint, basis: EndoBasis, n: bigint): ScalarEndoParts {\r\n  // Split scalar into two such that part is ~half bits: `abs(part) < sqrt(N)`\r\n  // Since part can be negative, we need to do this on point.\r\n  // TODO: verifyScalar function which consumes lambda\r\n  const [[a1, b1], [a2, b2]] = basis;\r\n  const c1 = divNearest(b2 * k, n);\r\n  const c2 = divNearest(-b1 * k, n);\r\n  // |k1|/|k2| is < sqrt(N), but can be negative.\r\n  // If we do `k1 mod N`, we'll get big scalar (`> sqrt(N)`): so, we do cheaper negation instead.\r\n  let k1 = k - c1 * a1 - c2 * a2;\r\n  let k2 = -c1 * b1 - c2 * b2;\r\n  const k1neg = k1 < _0n;\r\n  const k2neg = k2 < _0n;\r\n  if (k1neg) k1 = -k1;\r\n  if (k2neg) k2 = -k2;\r\n  // Double check that resulting scalar less than half bits of N: otherwise wNAF will fail.\r\n  // This should only happen on wrong basises. Also, math inside is too complex and I don't trust it.\r\n  const MAX_NUM = bitMask(Math.ceil(bitLen(n) / 2)) + _1n; // Half bits of N\r\n  if (k1 < _0n || k1 >= MAX_NUM || k2 < _0n || k2 >= MAX_NUM) {\r\n    throw new Error('splitScalar (endomorphism): failed, k=' + k);\r\n  }\r\n  return { k1neg, k1, k2neg, k2 };\r\n}\r\n\r\nexport type ECDSASigFormat = 'compact' | 'der';\r\nexport type Entropy = Hex | boolean;\r\nexport type SignOpts = Partial<{\r\n  lowS: boolean;\r\n  extraEntropy: Entropy;\r\n  prehash: boolean;\r\n  format: ECDSASigFormat | 'js';\r\n}>;\r\nexport type VerOpts = Partial<{\r\n  lowS: boolean;\r\n  prehash: boolean;\r\n  format: ECDSASigFormat | 'js' | undefined;\r\n}>;\r\n\r\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\r\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\r\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\r\n}\r\n\r\n/** Instance methods for 3D XYZ projective points. */\r\nexport interface WeierstrassPoint<T> extends CurvePoint<T, WeierstrassPoint<T>> {\r\n  /** projective X coordinate. Different from affine x. */\r\n  readonly X: T;\r\n  /** projective Y coordinate. Different from affine y. */\r\n  readonly Y: T;\r\n  /** projective z coordinate */\r\n  readonly Z: T;\r\n  /** affine x coordinate. Different from projective X. */\r\n  get x(): T;\r\n  /** affine y coordinate. Different from projective Y. */\r\n  get y(): T;\r\n  /** Encodes point using IEEE P1363 (DER) encoding. First byte is 2/3/4. Default = isCompressed. */\r\n  toBytes(isCompressed?: boolean): Uint8Array;\r\n  toHex(isCompressed?: boolean): string;\r\n\r\n  /** @deprecated use .X */\r\n  readonly px: T;\r\n  /** @deprecated use .Y */\r\n  readonly py: T;\r\n  /** @deprecated use .Z */\r\n  readonly pz: T;\r\n  /** @deprecated use `toBytes` */\r\n  toRawBytes(isCompressed?: boolean): Uint8Array;\r\n  /** @deprecated use `multiplyUnsafe` */\r\n  multiplyAndAddUnsafe(\r\n    Q: WeierstrassPoint<T>,\r\n    a: bigint,\r\n    b: bigint\r\n  ): WeierstrassPoint<T> | undefined;\r\n  /** @deprecated use `p.y % 2n === 0n` */\r\n  hasEvenY(): boolean;\r\n  /** @deprecated use `p.precompute(windowSize)` */\r\n  _setWindowSize(windowSize: number): void;\r\n}\r\n\r\n/** Static methods for 3D XYZ projective points. */\r\nexport interface WeierstrassPointCons<T> extends CurvePointCons<T, WeierstrassPoint<T>> {\r\n  /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\r\n  new (X: T, Y: T, Z: T): WeierstrassPoint<T>;\r\n  /** @deprecated use `Point.BASE.multiply(Point.Fn.fromBytes(privateKey))` */\r\n  fromPrivateKey(privateKey: PrivKey): WeierstrassPoint<T>;\r\n  /** @deprecated use `import { normalizeZ } from '@noble/curves/abstract/curve.js';` */\r\n  normalizeZ(points: WeierstrassPoint<T>[]): WeierstrassPoint<T>[];\r\n  /** @deprecated use `import { pippenger } from '@noble/curves/abstract/curve.js';` */\r\n  msm(points: WeierstrassPoint<T>[], scalars: bigint[]): WeierstrassPoint<T>;\r\n}\r\n\r\n/** @deprecated use WeierstrassPoint */\r\nexport type ProjPointType<T> = WeierstrassPoint<T>;\r\n/** @deprecated use WeierstrassPointCons */\r\nexport type ProjConstructor<T> = WeierstrassPointCons<T>;\r\n\r\n// TODO: remove\r\nexport type CurvePointsType<T> = BasicWCurve<T> & {\r\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\r\n  toBytes?: (\r\n    c: WeierstrassPointCons<T>,\r\n    point: WeierstrassPoint<T>,\r\n    isCompressed: boolean\r\n  ) => Uint8Array;\r\n};\r\n\r\n// LegacyWeierstrassOpts\r\nexport type CurvePointsTypeWithLength<T> = Readonly<CurvePointsType<T> & Partial<NLength>>;\r\n\r\n// LegacyWeierstrass\r\nexport type CurvePointsRes<T> = {\r\n  Point: WeierstrassPointCons<T>;\r\n\r\n  /** @deprecated the property will be removed in next release */\r\n  CURVE: CurvePointsType<T>;\r\n  /** @deprecated use `Point` */\r\n  ProjectivePoint: WeierstrassPointCons<T>;\r\n  /** @deprecated use `Point.Fn.fromBytes(privateKey)` */\r\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\r\n  /** @deprecated */\r\n  weierstrassEquation: (x: T) => T;\r\n  /** @deprecated use `Point.Fn.isValidNot0(num)` */\r\n  isWithinCurveOrder: (num: bigint) => boolean;\r\n};\r\n\r\n// Aliases to legacy types\r\n// export type CurveType = LegacyECDSAOpts;\r\n// export type CurveFn = LegacyECDSA;\r\n// export type CurvePointsRes<T> = LegacyWeierstrass<T>;\r\n// export type CurvePointsType<T> = LegacyWeierstrassOpts<T>;\r\n// export type CurvePointsTypeWithLength<T> = LegacyWeierstrassOpts<T>;\r\n// export type BasicWCurve<T> = LegacyWeierstrassOpts<T>;\r\n\r\n/**\r\n * Weierstrass curve options.\r\n *\r\n * * p: prime characteristic (order) of finite field, in which arithmetics is done\r\n * * n: order of prime subgroup a.k.a total amount of valid curve points\r\n * * h: cofactor, usually 1. h*n is group order; n is subgroup order\r\n * * a: formula param, must be in field of p\r\n * * b: formula param, must be in field of p\r\n * * Gx: x coordinate of generator point a.k.a. base point\r\n * * Gy: y coordinate of generator point\r\n */\r\nexport type WeierstrassOpts<T> = Readonly<{\r\n  p: bigint;\r\n  n: bigint;\r\n  h: bigint;\r\n  a: T;\r\n  b: T;\r\n  Gx: T;\r\n  Gy: T;\r\n}>;\r\n\r\n// When a cofactor != 1, there can be an effective methods to:\r\n// 1. Determine whether a point is torsion-free\r\n// 2. Clear torsion component\r\n// wrapPrivateKey: bls12-381 requires mod(n) instead of rejecting keys >= n\r\nexport type WeierstrassExtraOpts<T> = Partial<{\r\n  Fp: IField<T>;\r\n  Fn: IField<bigint>;\r\n  allowInfinityPoint: boolean;\r\n  endo: EndomorphismOpts;\r\n  isTorsionFree: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => boolean;\r\n  clearCofactor: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => WeierstrassPoint<T>;\r\n  fromBytes: (bytes: Uint8Array) => AffinePoint<T>;\r\n  toBytes: (\r\n    c: WeierstrassPointCons<T>,\r\n    point: WeierstrassPoint<T>,\r\n    isCompressed: boolean\r\n  ) => Uint8Array;\r\n}>;\r\n\r\n/**\r\n * Options for ECDSA signatures over a Weierstrass curve.\r\n */\r\nexport type ECDSAOpts = Partial<{\r\n  lowS: boolean;\r\n  hmac: HmacFnSync;\r\n  randomBytes: (bytesLength?: number) => Uint8Array;\r\n  bits2int: (bytes: Uint8Array) => bigint;\r\n  bits2int_modN: (bytes: Uint8Array) => bigint;\r\n}>;\r\n\r\n/** ECDSA is only supported for prime fields, not Fp2 (extension fields). */\r\nexport interface ECDSA {\r\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\r\n  getPublicKey: (secretKey: PrivKey, isCompressed?: boolean) => Uint8Array;\r\n  sign: (msgHash: Hex, secretKey: PrivKey, opts?: SignOpts) => ECDSASigRecovered;\r\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\r\n  getSharedSecret: (secretKeyA: PrivKey, publicKeyB: Hex, isCompressed?: boolean) => Uint8Array;\r\n  Point: WeierstrassPointCons<bigint>;\r\n  Signature: ECDSASignatureCons;\r\n  utils: {\r\n    isValidSecretKey: (secretKey: PrivKey) => boolean;\r\n    isValidPublicKey: (publicKey: Uint8Array, isCompressed?: boolean) => boolean;\r\n    randomSecretKey: (seed?: Uint8Array) => Uint8Array;\r\n\r\n    /** @deprecated use `randomSecretKey` */\r\n    randomPrivateKey: (seed?: Uint8Array) => Uint8Array;\r\n    /** @deprecated use `isValidSecretKey` */\r\n    isValidPrivateKey: (secretKey: PrivKey) => boolean;\r\n    /** @deprecated use `Point.Fn.fromBytes()` */\r\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\r\n    /** @deprecated use `point.precompute()` */\r\n    precompute: (windowSize?: number, point?: WeierstrassPoint<bigint>) => WeierstrassPoint<bigint>;\r\n  };\r\n  info: CurveInfo;\r\n}\r\nexport class DERErr extends Error {\r\n  constructor(m = '') {\r\n    super(m);\r\n  }\r\n}\r\nexport type IDER = {\r\n  // asn.1 DER encoding utils\r\n  Err: typeof DERErr;\r\n  // Basic building block is TLV (Tag-Length-Value)\r\n  _tlv: {\r\n    encode: (tag: number, data: string) => string;\r\n    // v - value, l - left bytes (unparsed)\r\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\r\n  };\r\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\r\n  // since we always use positive integers here. It must always be empty:\r\n  // - add zero byte if exists\r\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\r\n  _int: {\r\n    encode(num: bigint): string;\r\n    decode(data: Uint8Array): bigint;\r\n  };\r\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\r\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\r\n};\r\n/**\r\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\r\n *\r\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\r\n *\r\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\r\n */\r\nexport const DER: IDER = {\r\n  // asn.1 DER encoding utils\r\n  Err: DERErr,\r\n  // Basic building block is TLV (Tag-Length-Value)\r\n  _tlv: {\r\n    encode: (tag: number, data: string): string => {\r\n      const { Err: E } = DER;\r\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\r\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\r\n      const dataLen = data.length / 2;\r\n      const len = numberToHexUnpadded(dataLen);\r\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\r\n      // length of length with long form flag\r\n      const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\r\n      const t = numberToHexUnpadded(tag);\r\n      return t + lenLen + len + data;\r\n    },\r\n    // v - value, l - left bytes (unparsed)\r\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\r\n      const { Err: E } = DER;\r\n      let pos = 0;\r\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\r\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\r\n      const first = data[pos++];\r\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\r\n      let length = 0;\r\n      if (!isLong) length = first;\r\n      else {\r\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\r\n        const lenLen = first & 0b0111_1111;\r\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\r\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\r\n        const lengthBytes = data.subarray(pos, pos + lenLen);\r\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\r\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\r\n        for (const b of lengthBytes) length = (length << 8) | b;\r\n        pos += lenLen;\r\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\r\n      }\r\n      const v = data.subarray(pos, pos + length);\r\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\r\n      return { v, l: data.subarray(pos + length) };\r\n    },\r\n  },\r\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\r\n  // since we always use positive integers here. It must always be empty:\r\n  // - add zero byte if exists\r\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\r\n  _int: {\r\n    encode(num: bigint): string {\r\n      const { Err: E } = DER;\r\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\r\n      let hex = numberToHexUnpadded(num);\r\n      // Pad with zero byte if negative flag is present\r\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\r\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\r\n      return hex;\r\n    },\r\n    decode(data: Uint8Array): bigint {\r\n      const { Err: E } = DER;\r\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\r\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\r\n        throw new E('invalid signature integer: unnecessary leading zero');\r\n      return bytesToNumberBE(data);\r\n    },\r\n  },\r\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\r\n    // parse DER signature\r\n    const { Err: E, _int: int, _tlv: tlv } = DER;\r\n    const data = ensureBytes('signature', hex);\r\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\r\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\r\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\r\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\r\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\r\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\r\n  },\r\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\r\n    const { _tlv: tlv, _int: int } = DER;\r\n    const rs = tlv.encode(0x02, int.encode(sig.r));\r\n    const ss = tlv.encode(0x02, int.encode(sig.s));\r\n    const seq = rs + ss;\r\n    return tlv.encode(0x30, seq);\r\n  },\r\n};\r\n\r\n// Be friendly to bad ECMAScript parsers by not using bigint literals\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\r\n\r\n// TODO: remove\r\nexport function _legacyHelperEquat<T>(Fp: IField<T>, a: T, b: T): (x: T) => T {\r\n  /**\r\n   * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\r\n   * @returns y²\r\n   */\r\n  function weierstrassEquation(x: T): T {\r\n    const x2 = Fp.sqr(x); // x * x\r\n    const x3 = Fp.mul(x2, x); // x² * x\r\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\r\n  }\r\n  return weierstrassEquation;\r\n}\r\nexport function _normFnElement(Fn: IField<bigint>, key: PrivKey): bigint {\r\n  const { BYTES: expected } = Fn;\r\n  let num: bigint;\r\n  if (typeof key === 'bigint') {\r\n    num = key;\r\n  } else {\r\n    let bytes = ensureBytes('private key', key);\r\n    try {\r\n      num = Fn.fromBytes(bytes);\r\n    } catch (error) {\r\n      throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\r\n    }\r\n  }\r\n  if (!Fn.isValidNot0(num)) throw new Error('invalid private key: out of range [1..N-1]');\r\n  return num;\r\n}\r\n\r\nexport function weierstrassN<T>(\r\n  CURVE: WeierstrassOpts<T>,\r\n  curveOpts: WeierstrassExtraOpts<T> = {}\r\n): WeierstrassPointCons<T> {\r\n  const { Fp, Fn } = _createCurveFields('weierstrass', CURVE, curveOpts);\r\n  const { h: cofactor, n: CURVE_ORDER } = CURVE;\r\n  _validateObject(\r\n    curveOpts,\r\n    {},\r\n    {\r\n      allowInfinityPoint: 'boolean',\r\n      clearCofactor: 'function',\r\n      isTorsionFree: 'function',\r\n      fromBytes: 'function',\r\n      toBytes: 'function',\r\n      endo: 'object',\r\n      wrapPrivateKey: 'boolean',\r\n    }\r\n  );\r\n\r\n  const { endo } = curveOpts;\r\n  if (endo) {\r\n    // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\r\n    if (!Fp.is0(CURVE.a) || typeof endo.beta !== 'bigint' || !Array.isArray(endo.basises)) {\r\n      throw new Error('invalid endo: expected \"beta\": bigint and \"basises\": array');\r\n    }\r\n  }\r\n\r\n  function assertCompressionIsSupported() {\r\n    if (!Fp.isOdd) throw new Error('compression is not supported: Field does not have .isOdd()');\r\n  }\r\n\r\n  // Implements IEEE P1363 point encoding\r\n  function pointToBytes(\r\n    _c: WeierstrassPointCons<T>,\r\n    point: WeierstrassPoint<T>,\r\n    isCompressed: boolean\r\n  ): Uint8Array {\r\n    const { x, y } = point.toAffine();\r\n    const bx = Fp.toBytes(x);\r\n    abool('isCompressed', isCompressed);\r\n    if (isCompressed) {\r\n      assertCompressionIsSupported();\r\n      const hasEvenY = !Fp.isOdd!(y);\r\n      return concatBytes(pprefix(hasEvenY), bx);\r\n    } else {\r\n      return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\r\n    }\r\n  }\r\n  function pointFromBytes(bytes: Uint8Array) {\r\n    abytes(bytes);\r\n    const L = Fp.BYTES;\r\n    const LC = L + 1; // length compressed, e.g. 33 for 32-byte field\r\n    const LU = 2 * L + 1; // length uncompressed, e.g. 65 for 32-byte field\r\n    const length = bytes.length;\r\n    const head = bytes[0];\r\n    const tail = bytes.subarray(1);\r\n    // No actual validation is done here: use .assertValidity()\r\n    if (length === LC && (head === 0x02 || head === 0x03)) {\r\n      const x = Fp.fromBytes(tail);\r\n      if (!Fp.isValid(x)) throw new Error('bad point: is not on curve, wrong x');\r\n      const y2 = weierstrassEquation(x); // y² = x³ + ax + b\r\n      let y: T;\r\n      try {\r\n        y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\r\n      } catch (sqrtError) {\r\n        const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\r\n        throw new Error('bad point: is not on curve, sqrt error' + err);\r\n      }\r\n      assertCompressionIsSupported();\r\n      const isYOdd = Fp.isOdd!(y); // (y & _1n) === _1n;\r\n      const isHeadOdd = (head & 1) === 1; // ECDSA-specific\r\n      if (isHeadOdd !== isYOdd) y = Fp.neg(y);\r\n      return { x, y };\r\n    } else if (length === LU && head === 0x04) {\r\n      // TODO: more checks\r\n      const x = Fp.fromBytes(tail.subarray(L * 0, L * 1));\r\n      const y = Fp.fromBytes(tail.subarray(L * 1, L * 2));\r\n      if (!isValidXY(x, y)) throw new Error('bad point: is not on curve');\r\n      return { x, y };\r\n    } else {\r\n      throw new Error(\r\n        `bad point: got length ${length}, expected compressed=${LC} or uncompressed=${LU}`\r\n      );\r\n    }\r\n  }\r\n\r\n  const toBytes = curveOpts.toBytes || pointToBytes;\r\n  const fromBytes = curveOpts.fromBytes || pointFromBytes;\r\n  const weierstrassEquation = _legacyHelperEquat(Fp, CURVE.a, CURVE.b);\r\n\r\n  // TODO: move top-level\r\n  /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\r\n  function isValidXY(x: T, y: T): boolean {\r\n    const left = Fp.sqr(y); // y²\r\n    const right = weierstrassEquation(x); // x³ + ax + b\r\n    return Fp.eql(left, right);\r\n  }\r\n\r\n  // Validate whether the passed curve params are valid.\r\n  // Test 1: equation y² = x³ + ax + b should work for generator point.\r\n  if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\r\n\r\n  // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\r\n  // Guarantees curve is genus-1, smooth (non-singular).\r\n  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\r\n  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\r\n  if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\r\n\r\n  /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\r\n  function acoord(title: string, n: T, banZero = false) {\r\n    if (!Fp.isValid(n) || (banZero && Fp.is0(n))) throw new Error(`bad point coordinate ${title}`);\r\n    return n;\r\n  }\r\n\r\n  function aprjpoint(other: unknown) {\r\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\r\n  }\r\n\r\n  function splitEndoScalarN(k: bigint) {\r\n    if (!endo || !endo.basises) throw new Error('no endo');\r\n    return _splitEndoScalar(k, endo.basises, Fn.ORDER);\r\n  }\r\n\r\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\r\n\r\n  // Converts Projective point to affine (x, y) coordinates.\r\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\r\n  // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\r\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\r\n    const { X, Y, Z } = p;\r\n    // Fast-path for normalized points\r\n    if (Fp.eql(Z, Fp.ONE)) return { x: X, y: Y };\r\n    const is0 = p.is0();\r\n    // If invZ was 0, we return zero point. However we still want to execute\r\n    // all operations, so we replace invZ with a random number, 1.\r\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(Z);\r\n    const x = Fp.mul(X, iz);\r\n    const y = Fp.mul(Y, iz);\r\n    const zz = Fp.mul(Z, iz);\r\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\r\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\r\n    return { x, y };\r\n  });\r\n  // NOTE: on exception this will crash 'cached' and no value will be set.\r\n  // Otherwise true will be return\r\n  const assertValidMemo = memoized((p: Point) => {\r\n    if (p.is0()) {\r\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\r\n      // In BLS, ZERO can be serialized, so we allow it.\r\n      // (0, 0, 0) is invalid representation of ZERO.\r\n      if (curveOpts.allowInfinityPoint && !Fp.is0(p.Y)) return;\r\n      throw new Error('bad point: ZERO');\r\n    }\r\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\r\n    const { x, y } = p.toAffine();\r\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not field elements');\r\n    if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\r\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\r\n    return true;\r\n  });\r\n\r\n  function finishEndo(\r\n    endoBeta: EndomorphismOpts['beta'],\r\n    k1p: Point,\r\n    k2p: Point,\r\n    k1neg: boolean,\r\n    k2neg: boolean\r\n  ) {\r\n    k2p = new Point(Fp.mul(k2p.X, endoBeta), k2p.Y, k2p.Z);\r\n    k1p = negateCt(k1neg, k1p);\r\n    k2p = negateCt(k2neg, k2p);\r\n    return k1p.add(k2p);\r\n  }\r\n\r\n  /**\r\n   * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\r\n   * Default Point works in 2d / affine coordinates: (x, y).\r\n   * We're doing calculations in projective, because its operations don't require costly inversion.\r\n   */\r\n  class Point implements WeierstrassPoint<T> {\r\n    // base / generator point\r\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\r\n    // zero / infinity / identity point\r\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\r\n    // fields\r\n    static readonly Fp = Fp;\r\n    static readonly Fn = Fn;\r\n\r\n    readonly X: T;\r\n    readonly Y: T;\r\n    readonly Z: T;\r\n\r\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\r\n    constructor(X: T, Y: T, Z: T) {\r\n      this.X = acoord('x', X);\r\n      this.Y = acoord('y', Y, true);\r\n      this.Z = acoord('z', Z);\r\n      Object.freeze(this);\r\n    }\r\n\r\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\r\n    static fromAffine(p: AffinePoint<T>): Point {\r\n      const { x, y } = p || {};\r\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\r\n      if (p instanceof Point) throw new Error('projective point not allowed');\r\n      // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\r\n      if (Fp.is0(x) && Fp.is0(y)) return Point.ZERO;\r\n      return new Point(x, y, Fp.ONE);\r\n    }\r\n\r\n    get x(): T {\r\n      return this.toAffine().x;\r\n    }\r\n    get y(): T {\r\n      return this.toAffine().y;\r\n    }\r\n\r\n    // TODO: remove\r\n    get px(): T {\r\n      return this.X;\r\n    }\r\n    get py(): T {\r\n      return this.X;\r\n    }\r\n    get pz(): T {\r\n      return this.Z;\r\n    }\r\n    static normalizeZ(points: Point[]): Point[] {\r\n      return normalizeZ(Point, points);\r\n    }\r\n\r\n    static fromBytes(bytes: Uint8Array): Point {\r\n      abytes(bytes);\r\n      return Point.fromHex(bytes);\r\n    }\r\n\r\n    /** Converts hash string or Uint8Array to Point. */\r\n    static fromHex(hex: Hex): Point {\r\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\r\n      P.assertValidity();\r\n      return P;\r\n    }\r\n\r\n    /** Multiplies generator point by privateKey. */\r\n    static fromPrivateKey(privateKey: PrivKey) {\r\n      return Point.BASE.multiply(_normFnElement(Fn, privateKey));\r\n    }\r\n\r\n    // TODO: remove\r\n    static msm(points: Point[], scalars: bigint[]): Point {\r\n      return pippenger(Point, Fn, points, scalars);\r\n    }\r\n    _setWindowSize(windowSize: number) {\r\n      this.precompute(windowSize);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param windowSize\r\n     * @param isLazy true will defer table computation until the first multiplication\r\n     * @returns\r\n     */\r\n    precompute(windowSize: number = 8, isLazy = true): Point {\r\n      wnaf.createCache(this, windowSize);\r\n      if (!isLazy) this.multiply(_3n); // random number\r\n      return this;\r\n    }\r\n\r\n    // TODO: return `this`\r\n    /** A point on curve is valid if it conforms to equation. */\r\n    assertValidity(): void {\r\n      assertValidMemo(this);\r\n    }\r\n\r\n    hasEvenY(): boolean {\r\n      const { y } = this.toAffine();\r\n      if (!Fp.isOdd) throw new Error(\"Field doesn't support isOdd\");\r\n      return !Fp.isOdd(y);\r\n    }\r\n\r\n    /** Compare one point to another. */\r\n    equals(other: Point): boolean {\r\n      aprjpoint(other);\r\n      const { X: X1, Y: Y1, Z: Z1 } = this;\r\n      const { X: X2, Y: Y2, Z: Z2 } = other;\r\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\r\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\r\n      return U1 && U2;\r\n    }\r\n\r\n    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\r\n    negate(): Point {\r\n      return new Point(this.X, Fp.neg(this.Y), this.Z);\r\n    }\r\n\r\n    // Renes-Costello-Batina exception-free doubling formula.\r\n    // There is 30% faster Jacobian formula, but it is not complete.\r\n    // https://eprint.iacr.org/2015/1060, algorithm 3\r\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\r\n    double() {\r\n      const { a, b } = CURVE;\r\n      const b3 = Fp.mul(b, _3n);\r\n      const { X: X1, Y: Y1, Z: Z1 } = this;\r\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\r\n      let t0 = Fp.mul(X1, X1); // step 1\r\n      let t1 = Fp.mul(Y1, Y1);\r\n      let t2 = Fp.mul(Z1, Z1);\r\n      let t3 = Fp.mul(X1, Y1);\r\n      t3 = Fp.add(t3, t3); // step 5\r\n      Z3 = Fp.mul(X1, Z1);\r\n      Z3 = Fp.add(Z3, Z3);\r\n      X3 = Fp.mul(a, Z3);\r\n      Y3 = Fp.mul(b3, t2);\r\n      Y3 = Fp.add(X3, Y3); // step 10\r\n      X3 = Fp.sub(t1, Y3);\r\n      Y3 = Fp.add(t1, Y3);\r\n      Y3 = Fp.mul(X3, Y3);\r\n      X3 = Fp.mul(t3, X3);\r\n      Z3 = Fp.mul(b3, Z3); // step 15\r\n      t2 = Fp.mul(a, t2);\r\n      t3 = Fp.sub(t0, t2);\r\n      t3 = Fp.mul(a, t3);\r\n      t3 = Fp.add(t3, Z3);\r\n      Z3 = Fp.add(t0, t0); // step 20\r\n      t0 = Fp.add(Z3, t0);\r\n      t0 = Fp.add(t0, t2);\r\n      t0 = Fp.mul(t0, t3);\r\n      Y3 = Fp.add(Y3, t0);\r\n      t2 = Fp.mul(Y1, Z1); // step 25\r\n      t2 = Fp.add(t2, t2);\r\n      t0 = Fp.mul(t2, t3);\r\n      X3 = Fp.sub(X3, t0);\r\n      Z3 = Fp.mul(t2, t1);\r\n      Z3 = Fp.add(Z3, Z3); // step 30\r\n      Z3 = Fp.add(Z3, Z3);\r\n      return new Point(X3, Y3, Z3);\r\n    }\r\n\r\n    // Renes-Costello-Batina exception-free addition formula.\r\n    // There is 30% faster Jacobian formula, but it is not complete.\r\n    // https://eprint.iacr.org/2015/1060, algorithm 1\r\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\r\n    add(other: Point): Point {\r\n      aprjpoint(other);\r\n      const { X: X1, Y: Y1, Z: Z1 } = this;\r\n      const { X: X2, Y: Y2, Z: Z2 } = other;\r\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\r\n      const a = CURVE.a;\r\n      const b3 = Fp.mul(CURVE.b, _3n);\r\n      let t0 = Fp.mul(X1, X2); // step 1\r\n      let t1 = Fp.mul(Y1, Y2);\r\n      let t2 = Fp.mul(Z1, Z2);\r\n      let t3 = Fp.add(X1, Y1);\r\n      let t4 = Fp.add(X2, Y2); // step 5\r\n      t3 = Fp.mul(t3, t4);\r\n      t4 = Fp.add(t0, t1);\r\n      t3 = Fp.sub(t3, t4);\r\n      t4 = Fp.add(X1, Z1);\r\n      let t5 = Fp.add(X2, Z2); // step 10\r\n      t4 = Fp.mul(t4, t5);\r\n      t5 = Fp.add(t0, t2);\r\n      t4 = Fp.sub(t4, t5);\r\n      t5 = Fp.add(Y1, Z1);\r\n      X3 = Fp.add(Y2, Z2); // step 15\r\n      t5 = Fp.mul(t5, X3);\r\n      X3 = Fp.add(t1, t2);\r\n      t5 = Fp.sub(t5, X3);\r\n      Z3 = Fp.mul(a, t4);\r\n      X3 = Fp.mul(b3, t2); // step 20\r\n      Z3 = Fp.add(X3, Z3);\r\n      X3 = Fp.sub(t1, Z3);\r\n      Z3 = Fp.add(t1, Z3);\r\n      Y3 = Fp.mul(X3, Z3);\r\n      t1 = Fp.add(t0, t0); // step 25\r\n      t1 = Fp.add(t1, t0);\r\n      t2 = Fp.mul(a, t2);\r\n      t4 = Fp.mul(b3, t4);\r\n      t1 = Fp.add(t1, t2);\r\n      t2 = Fp.sub(t0, t2); // step 30\r\n      t2 = Fp.mul(a, t2);\r\n      t4 = Fp.add(t4, t2);\r\n      t0 = Fp.mul(t1, t4);\r\n      Y3 = Fp.add(Y3, t0);\r\n      t0 = Fp.mul(t5, t4); // step 35\r\n      X3 = Fp.mul(t3, X3);\r\n      X3 = Fp.sub(X3, t0);\r\n      t0 = Fp.mul(t3, t1);\r\n      Z3 = Fp.mul(t5, Z3);\r\n      Z3 = Fp.add(Z3, t0); // step 40\r\n      return new Point(X3, Y3, Z3);\r\n    }\r\n\r\n    subtract(other: Point) {\r\n      return this.add(other.negate());\r\n    }\r\n\r\n    is0(): boolean {\r\n      return this.equals(Point.ZERO);\r\n    }\r\n\r\n    /**\r\n     * Constant time multiplication.\r\n     * Uses wNAF method. Windowed method may be 10% faster,\r\n     * but takes 2x longer to generate and consumes 2x memory.\r\n     * Uses precomputes when available.\r\n     * Uses endomorphism for Koblitz curves.\r\n     * @param scalar by which the point would be multiplied\r\n     * @returns New point\r\n     */\r\n    multiply(scalar: bigint): Point {\r\n      const { endo } = curveOpts;\r\n      if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: out of range'); // 0 is invalid\r\n      let point: Point, fake: Point; // Fake point is used to const-time mult\r\n      const mul = (n: bigint) => wnaf.cached(this, n, (p) => normalizeZ(Point, p));\r\n      /** See docs for {@link EndomorphismOpts} */\r\n      if (endo) {\r\n        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(scalar);\r\n        const { p: k1p, f: k1f } = mul(k1);\r\n        const { p: k2p, f: k2f } = mul(k2);\r\n        fake = k1f.add(k2f);\r\n        point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\r\n      } else {\r\n        const { p, f } = mul(scalar);\r\n        point = p;\r\n        fake = f;\r\n      }\r\n      // Normalize `z` for both points, but return only real one\r\n      return normalizeZ(Point, [point, fake])[0];\r\n    }\r\n\r\n    /**\r\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\r\n     * It's faster, but should only be used when you don't care about\r\n     * an exposed secret key e.g. sig verification, which works over *public* keys.\r\n     */\r\n    multiplyUnsafe(sc: bigint): Point {\r\n      const { endo } = curveOpts;\r\n      const p = this;\r\n      if (!Fn.isValid(sc)) throw new Error('invalid scalar: out of range'); // 0 is valid\r\n      if (sc === _0n || p.is0()) return Point.ZERO;\r\n      if (sc === _1n) return p; // fast-path\r\n      if (wnaf.hasCache(this)) return this.multiply(sc);\r\n      if (endo) {\r\n        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(sc);\r\n        const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2); // 30% faster vs wnaf.unsafe\r\n        return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\r\n      } else {\r\n        return wnaf.unsafe(p, sc);\r\n      }\r\n    }\r\n\r\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\r\n      const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\r\n      return sum.is0() ? undefined : sum;\r\n    }\r\n\r\n    /**\r\n     * Converts Projective point to affine (x, y) coordinates.\r\n     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\r\n     */\r\n    toAffine(invertedZ?: T): AffinePoint<T> {\r\n      return toAffineMemo(this, invertedZ);\r\n    }\r\n\r\n    /**\r\n     * Checks whether Point is free of torsion elements (is in prime subgroup).\r\n     * Always torsion-free for cofactor=1 curves.\r\n     */\r\n    isTorsionFree(): boolean {\r\n      const { isTorsionFree } = curveOpts;\r\n      if (cofactor === _1n) return true;\r\n      if (isTorsionFree) return isTorsionFree(Point, this);\r\n      return wnaf.unsafe(this, CURVE_ORDER).is0();\r\n    }\r\n\r\n    clearCofactor(): Point {\r\n      const { clearCofactor } = curveOpts;\r\n      if (cofactor === _1n) return this; // Fast-path\r\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\r\n      return this.multiplyUnsafe(cofactor);\r\n    }\r\n\r\n    isSmallOrder(): boolean {\r\n      // can we use this.clearCofactor()?\r\n      return this.multiplyUnsafe(cofactor).is0();\r\n    }\r\n\r\n    toBytes(isCompressed = true): Uint8Array {\r\n      abool('isCompressed', isCompressed);\r\n      this.assertValidity();\r\n      return toBytes(Point, this, isCompressed);\r\n    }\r\n\r\n    /** @deprecated use `toBytes` */\r\n    toRawBytes(isCompressed = true): Uint8Array {\r\n      return this.toBytes(isCompressed);\r\n    }\r\n\r\n    toHex(isCompressed = true): string {\r\n      return bytesToHex(this.toBytes(isCompressed));\r\n    }\r\n\r\n    toString() {\r\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\r\n    }\r\n  }\r\n  const bits = Fn.BITS;\r\n  const wnaf = new wNAF(Point, curveOpts.endo ? Math.ceil(bits / 2) : bits);\r\n  return Point;\r\n}\r\n\r\n// _legacyWeierstrass\r\n// TODO: remove\r\n/** @deprecated use `weierstrass` in newer releases */\r\nexport function weierstrassPoints<T>(c: CurvePointsTypeWithLength<T>): CurvePointsRes<T> {\r\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\r\n  const Point = weierstrassN(CURVE, curveOpts);\r\n  return _weierstrass_new_output_to_legacy(c, Point);\r\n}\r\n\r\n// Instance\r\nexport interface ECDSASignature {\r\n  readonly r: bigint;\r\n  readonly s: bigint;\r\n  readonly recovery?: number;\r\n  addRecoveryBit(recovery: number): ECDSASigRecovered;\r\n  hasHighS(): boolean;\r\n  normalizeS(): ECDSASignature;\r\n  recoverPublicKey(msgHash: Hex): WeierstrassPoint<bigint>;\r\n  toBytes(format?: string): Uint8Array;\r\n  toHex(format?: string): string;\r\n\r\n  /** @deprecated */\r\n  assertValidity(): void;\r\n  /** @deprecated use `.toBytes('compact')` */\r\n  toCompactRawBytes(): Uint8Array;\r\n  /** @deprecated use `.toBytes('compact')` */\r\n  toCompactHex(): string;\r\n  /** @deprecated use `.toBytes('der')` */\r\n  toDERRawBytes(): Uint8Array;\r\n  /** @deprecated use `.toBytes('der')` */\r\n  toDERHex(): string;\r\n}\r\nexport type SignatureType = ECDSASignature;\r\nexport type ECDSASigRecovered = ECDSASignature & {\r\n  readonly recovery: number;\r\n};\r\nexport type RecoveredSignatureType = ECDSASigRecovered;\r\n// Static methods\r\nexport type ECDSASignatureCons = {\r\n  new (r: bigint, s: bigint, recovery?: number): ECDSASignature;\r\n  fromBytes(bytes: Uint8Array, format?: ECDSASigFormat): ECDSASignature;\r\n  fromHex(hex: string, format?: ECDSASigFormat): ECDSASignature;\r\n\r\n  /** @deprecated use `.fromBytes(bytes, 'compact')` */\r\n  fromCompact(hex: Hex): ECDSASignature;\r\n  /** @deprecated use `.fromBytes(bytes, 'der')` */\r\n  fromDER(hex: Hex): ECDSASignature;\r\n};\r\nexport type SignatureLike = { r: bigint; s: bigint };\r\n// TODO: remove\r\nexport type PubKey = Hex | WeierstrassPoint<bigint>;\r\n\r\n// TODO: remove\r\nexport type CurveType = BasicWCurve<bigint> & {\r\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\r\n  hmac?: HmacFnSync;\r\n  randomBytes?: (bytesLength?: number) => Uint8Array;\r\n  lowS?: boolean;\r\n  bits2int?: (bytes: Uint8Array) => bigint;\r\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\r\n};\r\n\r\n// Points start with byte 0x02 when y is even; otherwise 0x03\r\nfunction pprefix(hasEvenY: boolean): Uint8Array {\r\n  return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\r\n}\r\n\r\n// TODO: remove\r\nexport type CurveFn = {\r\n  /** @deprecated the property will be removed in next release */\r\n  CURVE: CurvePointsType<bigint>;\r\n  keygen: ECDSA['keygen'];\r\n  getPublicKey: ECDSA['getPublicKey'];\r\n  getSharedSecret: ECDSA['getSharedSecret'];\r\n  sign: ECDSA['sign'];\r\n  verify: ECDSA['verify'];\r\n  Point: WeierstrassPointCons<bigint>;\r\n  /** @deprecated use `Point` */\r\n  ProjectivePoint: WeierstrassPointCons<bigint>;\r\n  Signature: ECDSASignatureCons;\r\n  utils: ECDSA['utils'];\r\n  info: CurveInfo;\r\n};\r\n\r\n/**\r\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\r\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\r\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\r\n * b = False and y = sqrt(Z * (u / v)) otherwise.\r\n * @param Fp\r\n * @param Z\r\n * @returns\r\n */\r\nexport function SWUFpSqrtRatio<T>(\r\n  Fp: IField<T>,\r\n  Z: T\r\n): (u: T, v: T) => { isValid: boolean; value: T } {\r\n  // Generic implementation\r\n  const q = Fp.ORDER;\r\n  let l = _0n;\r\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\r\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\r\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\r\n  // 2n ** c1 == 2n << (c1-1)\r\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\r\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\r\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\r\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\r\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\r\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\r\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\r\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\r\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\r\n    let tv1 = c6; // 1. tv1 = c6\r\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\r\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\r\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\r\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\r\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\r\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\r\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\r\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\r\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\r\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\r\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\r\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\r\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\r\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\r\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\r\n    // 17. for i in (c1, c1 - 1, ..., 2):\r\n    for (let i = c1; i > _1n; i--) {\r\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\r\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\r\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\r\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\r\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\r\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\r\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\r\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\r\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\r\n    }\r\n    return { isValid: isQR, value: tv3 };\r\n  };\r\n  if (Fp.ORDER % _4n === _3n) {\r\n    // sqrt_ratio_3mod4(u, v)\r\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\r\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\r\n    sqrtRatio = (u: T, v: T) => {\r\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\r\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\r\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\r\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\r\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\r\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\r\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\r\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\r\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\r\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\r\n    };\r\n  }\r\n  // No curves uses that\r\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\r\n  return sqrtRatio;\r\n}\r\n/**\r\n * Simplified Shallue-van de Woestijne-Ulas Method\r\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\r\n */\r\nexport function mapToCurveSimpleSWU<T>(\r\n  Fp: IField<T>,\r\n  opts: {\r\n    A: T;\r\n    B: T;\r\n    Z: T;\r\n  }\r\n): (u: T) => { x: T; y: T } {\r\n  validateField(Fp);\r\n  const { A, B, Z } = opts;\r\n  if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z))\r\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\r\n  const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\r\n  if (!Fp.isOdd) throw new Error('Field does not have .isOdd()');\r\n  // Input: u, an element of F.\r\n  // Output: (x, y), a point on E.\r\n  return (u: T): { x: T; y: T } => {\r\n    // prettier-ignore\r\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\r\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\r\n    tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\r\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\r\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\r\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\r\n    tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\r\n    tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\r\n    tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\r\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\r\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\r\n    tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\r\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\r\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\r\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\r\n    tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\r\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\r\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\r\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\r\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\r\n    y = Fp.mul(y, value); // 20.   y = y * y1\r\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\r\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\r\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\r\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\r\n    const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\r\n    x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\r\n    return { x, y };\r\n  };\r\n}\r\n\r\n/**\r\n * Creates ECDSA for given elliptic curve Point and hash function.\r\n */\r\nexport function ecdsa(\r\n  Point: WeierstrassPointCons<bigint>,\r\n  hash: CHash,\r\n  ecdsaOpts: ECDSAOpts = {}\r\n): ECDSA {\r\n  ahash(hash);\r\n  _validateObject(\r\n    ecdsaOpts,\r\n    {},\r\n    {\r\n      hmac: 'function',\r\n      lowS: 'boolean',\r\n      randomBytes: 'function',\r\n      bits2int: 'function',\r\n      bits2int_modN: 'function',\r\n    }\r\n  );\r\n\r\n  const randomBytes_ = ecdsaOpts.randomBytes || randomBytes;\r\n  const hmac_: HmacFnSync =\r\n    ecdsaOpts.hmac ||\r\n    (((key, ...msgs) => hmac(hash, key, concatBytes(...msgs))) satisfies HmacFnSync);\r\n\r\n  const { Fp, Fn } = Point;\r\n  const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\r\n\r\n  const seedLen = getMinHashLength(CURVE_ORDER);\r\n  const lengths = {\r\n    secret: Fn.BYTES,\r\n    public: 1 + Fp.BYTES,\r\n    publicUncompressed: 1 + 2 * Fp.BYTES,\r\n    signature: 2 * Fn.BYTES,\r\n    seed: seedLen,\r\n  };\r\n\r\n  function isBiggerThanHalfOrder(number: bigint) {\r\n    const HALF = CURVE_ORDER >> _1n;\r\n    return number > HALF;\r\n  }\r\n\r\n  function normalizeS(s: bigint) {\r\n    return isBiggerThanHalfOrder(s) ? Fn.neg(s) : s;\r\n  }\r\n  function aValidRS(title: string, num: bigint) {\r\n    if (!Fn.isValidNot0(num))\r\n      throw new Error(`invalid signature ${title}: out of range 1..CURVE.n`);\r\n  }\r\n\r\n  /**\r\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\r\n   */\r\n  class Signature implements ECDSASignature {\r\n    readonly r: bigint;\r\n    readonly s: bigint;\r\n    readonly recovery?: number;\r\n    constructor(r: bigint, s: bigint, recovery?: number) {\r\n      aValidRS('r', r); // r in [1..N-1]\r\n      aValidRS('s', s); // s in [1..N-1]\r\n      this.r = r;\r\n      this.s = s;\r\n      if (recovery != null) this.recovery = recovery;\r\n      Object.freeze(this);\r\n    }\r\n\r\n    static fromBytes(bytes: Uint8Array, format: ECDSASigFormat = 'compact') {\r\n      if (format === 'compact') {\r\n        const L = Fn.BYTES;\r\n        abytes(bytes, L * 2);\r\n        const r = bytes.subarray(0, L);\r\n        const s = bytes.subarray(L, L * 2);\r\n        return new Signature(Fn.fromBytes(r), Fn.fromBytes(s));\r\n      }\r\n      if (format === 'der') {\r\n        abytes(bytes);\r\n        const { r, s } = DER.toSig(bytes);\r\n        return new Signature(r, s);\r\n      }\r\n      throw new Error('invalid format');\r\n    }\r\n\r\n    static fromHex(hex: string, format?: ECDSASigFormat) {\r\n      return this.fromBytes(hexToBytes(hex), format);\r\n    }\r\n\r\n    addRecoveryBit(recovery: number): RecoveredSignature {\r\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\r\n    }\r\n\r\n    // ProjPointType<bigint>\r\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\r\n      const FIELD_ORDER = Fp.ORDER;\r\n      const { r, s, recovery: rec } = this;\r\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\r\n\r\n      // ECDSA recovery is hard for cofactor > 1 curves.\r\n      // In sign, `r = q.x mod n`, and here we recover q.x from r.\r\n      // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\r\n      // However, for cofactor>1, r+n may not get q.x:\r\n      // r+n*i would need to be done instead where i is unknown.\r\n      // To easily get i, we either need to:\r\n      // a. increase amount of valid recid values (4, 5...); OR\r\n      // b. prohibit non-prime-order signatures (recid > 1).\r\n      const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\r\n      if (hasCofactor && rec > 1) throw new Error('recovery id is ambiguous for h>1 curve');\r\n\r\n      const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\r\n      if (!Fp.isValid(radj)) throw new Error('recovery id 2 or 3 invalid');\r\n      const x = Fp.toBytes(radj);\r\n      const R = Point.fromHex(concatBytes(pprefix((rec & 1) === 0), x));\r\n      const ir = Fn.inv(radj); // r^-1\r\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\r\n      const u1 = Fn.create(-h * ir); // -hr^-1\r\n      const u2 = Fn.create(s * ir); // sr^-1\r\n      // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\r\n      const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\r\n      if (Q.is0()) throw new Error('point at infinify');\r\n      Q.assertValidity();\r\n      return Q;\r\n    }\r\n\r\n    // Signatures should be low-s, to prevent malleability.\r\n    hasHighS(): boolean {\r\n      return isBiggerThanHalfOrder(this.s);\r\n    }\r\n\r\n    normalizeS() {\r\n      return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\r\n    }\r\n\r\n    toBytes(format: ECDSASigFormat = 'compact') {\r\n      if (format === 'compact') return concatBytes(Fn.toBytes(this.r), Fn.toBytes(this.s));\r\n      if (format === 'der') return hexToBytes(DER.hexFromSig(this));\r\n      throw new Error('invalid format');\r\n    }\r\n\r\n    toHex(format?: ECDSASigFormat) {\r\n      return bytesToHex(this.toBytes(format));\r\n    }\r\n\r\n    // TODO: remove\r\n    assertValidity(): void {}\r\n    static fromCompact(hex: Hex) {\r\n      return Signature.fromBytes(ensureBytes('sig', hex), 'compact');\r\n    }\r\n    static fromDER(hex: Hex) {\r\n      return Signature.fromBytes(ensureBytes('sig', hex), 'der');\r\n    }\r\n    toDERRawBytes() {\r\n      return this.toBytes('der');\r\n    }\r\n    toDERHex() {\r\n      return bytesToHex(this.toBytes('der'));\r\n    }\r\n    toCompactRawBytes() {\r\n      return this.toBytes('compact');\r\n    }\r\n    toCompactHex() {\r\n      return bytesToHex(this.toBytes('compact'));\r\n    }\r\n  }\r\n  type RecoveredSignature = Signature & { recovery: number };\r\n\r\n  function isValidSecretKey(privateKey: PrivKey) {\r\n    try {\r\n      return !!_normFnElement(Fn, privateKey);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n  function isValidPublicKey(publicKey: Uint8Array, isCompressed?: boolean): boolean {\r\n    try {\r\n      const l = publicKey.length;\r\n      if (isCompressed === true && l !== lengths.public) return false;\r\n      if (isCompressed === false && l !== lengths.publicUncompressed) return false;\r\n      return !!Point.fromBytes(publicKey);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n  /**\r\n   * Produces cryptographically secure secret key from random of size\r\n   * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\r\n   */\r\n  function randomSecretKey(seed = randomBytes_(seedLen)): Uint8Array {\r\n    return mapHashToField(seed, CURVE_ORDER);\r\n  }\r\n\r\n  const utils = {\r\n    isValidSecretKey,\r\n    isValidPublicKey,\r\n    randomSecretKey,\r\n\r\n    // TODO: remove\r\n    isValidPrivateKey: isValidSecretKey,\r\n    randomPrivateKey: randomSecretKey,\r\n    normPrivateKeyToScalar: (key: PrivKey) => _normFnElement(Fn, key),\r\n    precompute(windowSize = 8, point = Point.BASE): WeierstrassPoint<bigint> {\r\n      return point.precompute(windowSize, false);\r\n    },\r\n  };\r\n\r\n  /**\r\n   * Computes public key for a secret key. Checks for validity of the secret key.\r\n   * @param isCompressed whether to return compact (default), or full key\r\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\r\n   */\r\n  function getPublicKey(secretKey: PrivKey, isCompressed = true): Uint8Array {\r\n    return Point.BASE.multiply(_normFnElement(Fn, secretKey)).toBytes(isCompressed);\r\n  }\r\n\r\n  /**\r\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\r\n   */\r\n  function isProbPub(item: PrivKey | PubKey): boolean | undefined {\r\n    // TODO: remove\r\n    if (typeof item === 'bigint') return false;\r\n    // TODO: remove\r\n    if (item instanceof Point) return true;\r\n    if (Fn.allowedLengths || lengths.secret === lengths.public) return undefined;\r\n    const l = ensureBytes('key', item).length;\r\n    return l === lengths.public || l === lengths.publicUncompressed;\r\n  }\r\n\r\n  /**\r\n   * ECDH (Elliptic Curve Diffie Hellman).\r\n   * Computes shared public key from secret key A and public key B.\r\n   * Checks: 1) secret key validity 2) shared key is on-curve.\r\n   * Does NOT hash the result.\r\n   * @param isCompressed whether to return compact (default), or full key\r\n   * @returns shared public key\r\n   */\r\n  function getSharedSecret(secretKeyA: PrivKey, publicKeyB: Hex, isCompressed = true): Uint8Array {\r\n    if (isProbPub(secretKeyA) === true) throw new Error('first arg must be private key');\r\n    if (isProbPub(publicKeyB) === false) throw new Error('second arg must be public key');\r\n    const s = _normFnElement(Fn, secretKeyA);\r\n    const b = Point.fromHex(publicKeyB); // checks for being on-curve\r\n    return b.multiply(s).toBytes(isCompressed);\r\n  }\r\n\r\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\r\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\r\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\r\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\r\n  const bits2int =\r\n    ecdsaOpts.bits2int ||\r\n    function (bytes: Uint8Array): bigint {\r\n      // Our custom check \"just in case\", for protection against DoS\r\n      if (bytes.length > 8192) throw new Error('input is too large');\r\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\r\n      // for some cases, since bytes.length * 8 is not actual bitLength.\r\n      const num = bytesToNumberBE(bytes); // check for == u8 done here\r\n      const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\r\n      return delta > 0 ? num >> BigInt(delta) : num;\r\n    };\r\n  const bits2int_modN =\r\n    ecdsaOpts.bits2int_modN ||\r\n    function (bytes: Uint8Array): bigint {\r\n      return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\r\n    };\r\n  // NOTE: pads output with zero as per spec\r\n  const ORDER_MASK = bitMask(fnBits);\r\n  /**\r\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\r\n   */\r\n  function int2octets(num: bigint): Uint8Array {\r\n    // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\r\n    aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\r\n    return Fn.toBytes(num);\r\n  }\r\n\r\n  // Steps A, D of RFC6979 3.2\r\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\r\n  // Used only in sign, not in verify.\r\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\r\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\r\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\r\n    if (['recovered', 'canonical'].some((k) => k in opts))\r\n      throw new Error('sign() legacy options not supported');\r\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\r\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\r\n    msgHash = ensureBytes('msgHash', msgHash);\r\n    validateSigVerOpts(opts);\r\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\r\n\r\n    // We can't later call bits2octets, since nested bits2int is broken for curves\r\n    // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\r\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\r\n    const h1int = bits2int_modN(msgHash);\r\n    const d = _normFnElement(Fn, privateKey); // validate secret key, convert to bigint\r\n    const seedArgs = [int2octets(d), int2octets(h1int)];\r\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\r\n    if (ent != null && ent !== false) {\r\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\r\n      const e = ent === true ? randomBytes_(lengths.secret) : ent; // gen random bytes OR pass as-is\r\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\r\n    }\r\n    const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\r\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\r\n    // Converts signature params into point w r/s, checks result for validity.\r\n    // To transform k => Signature:\r\n    // q = k⋅G\r\n    // r = q.x mod n\r\n    // s = k^-1(m + rd) mod n\r\n    // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\r\n    // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\r\n    // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\r\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\r\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\r\n      // Important: all mod() calls here must be done over N\r\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\r\n      if (!Fn.isValidNot0(k)) return; // Valid scalars (including k) must be in 1..N-1\r\n      const ik = Fn.inv(k); // k^-1 mod n\r\n      const q = Point.BASE.multiply(k).toAffine(); // q = k⋅G\r\n      const r = Fn.create(q.x); // r = q.x mod n\r\n      if (r === _0n) return;\r\n      const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\r\n      if (s === _0n) return;\r\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\r\n      let normS = s;\r\n      if (lowS && isBiggerThanHalfOrder(s)) {\r\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\r\n        recovery ^= 1; // // in the bottom half of N\r\n      }\r\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\r\n    }\r\n    return { seed, k2sig };\r\n  }\r\n  const defaultSigOpts: SignOpts = { lowS: ecdsaOpts.lowS, prehash: false };\r\n  const defaultVerOpts: VerOpts = { lowS: ecdsaOpts.lowS, prehash: false };\r\n\r\n  /**\r\n   * Signs message hash with a secret key.\r\n   * ```\r\n   * sign(m, d, k) where\r\n   *   (x, y) = G × k\r\n   *   r = x mod n\r\n   *   s = (m + dr)/k mod n\r\n   * ```\r\n   */\r\n  function sign(msgHash: Hex, secretKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\r\n    const { seed, k2sig } = prepSig(msgHash, secretKey, opts); // Steps A, D of RFC6979 3.2.\r\n    const drbg = createHmacDrbg<RecoveredSignature>(hash.outputLen, Fn.BYTES, hmac_);\r\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\r\n  }\r\n\r\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\r\n  Point.BASE.precompute(8);\r\n\r\n  /**\r\n   * Verifies a signature against message hash and public key.\r\n   * Rejects lowS signatures by default: to override,\r\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\r\n   *\r\n   * ```\r\n   * verify(r, s, h, P) where\r\n   *   U1 = hs^-1 mod n\r\n   *   U2 = rs^-1 mod n\r\n   *   R = U1⋅G - U2⋅P\r\n   *   mod(R.x, n) == r\r\n   * ```\r\n   */\r\n  function verify(\r\n    signature: Hex | SignatureLike,\r\n    msgHash: Hex,\r\n    publicKey: Hex,\r\n    opts = defaultVerOpts\r\n  ): boolean {\r\n    const sg = signature;\r\n    msgHash = ensureBytes('msgHash', msgHash);\r\n    publicKey = ensureBytes('publicKey', publicKey);\r\n\r\n    // Verify opts\r\n    validateSigVerOpts(opts);\r\n    const { lowS, prehash, format } = opts;\r\n\r\n    // TODO: remove\r\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\r\n\r\n    let _sig: Signature | undefined = undefined;\r\n    let P: WeierstrassPoint<bigint>;\r\n\r\n    if (format === undefined) {\r\n      // Try to deduce format\r\n      const isHex = typeof sg === 'string' || isBytes(sg);\r\n      const isObj =\r\n        !isHex &&\r\n        sg !== null &&\r\n        typeof sg === 'object' &&\r\n        typeof sg.r === 'bigint' &&\r\n        typeof sg.s === 'bigint';\r\n      if (!isHex && !isObj)\r\n        throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\r\n      if (isObj) {\r\n        _sig = new Signature(sg.r, sg.s);\r\n      } else if (isHex) {\r\n        // TODO: remove this malleable check\r\n        // Signature can be represented in 2 ways: compact (2*Fn.BYTES) & DER (variable-length).\r\n        // Since DER can also be 2*Fn.BYTES bytes, we check for it first.\r\n        try {\r\n          _sig = Signature.fromDER(sg);\r\n        } catch (derError) {\r\n          if (!(derError instanceof DER.Err)) throw derError;\r\n        }\r\n        if (!_sig) {\r\n          try {\r\n            _sig = Signature.fromCompact(sg);\r\n          } catch (error) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      if (format === 'compact' || format === 'der') {\r\n        if (typeof sg !== 'string' && !isBytes(sg))\r\n          throw new Error('\"der\" / \"compact\" format expects Uint8Array signature');\r\n        _sig = Signature.fromBytes(ensureBytes('sig', sg), format);\r\n      } else if (format === 'js') {\r\n        if (!(sg instanceof Signature)) throw new Error('\"js\" format expects Signature instance');\r\n        _sig = sg;\r\n      } else {\r\n        throw new Error('format must be \"compact\", \"der\" or \"js\"');\r\n      }\r\n    }\r\n\r\n    if (!_sig) return false;\r\n    try {\r\n      P = Point.fromHex(publicKey);\r\n      if (lowS && _sig.hasHighS()) return false;\r\n      // todo: optional.hash => hash\r\n      if (prehash) msgHash = hash(msgHash);\r\n      const { r, s } = _sig;\r\n      const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\r\n      const is = Fn.inv(s); // s^-1\r\n      const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\r\n      const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\r\n      const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2));\r\n      if (R.is0()) return false;\r\n      const v = Fn.create(R.x); // v = r.x mod n\r\n      return v === r;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function keygen(seed?: Uint8Array) {\r\n    const secretKey = utils.randomSecretKey(seed);\r\n    return { secretKey, publicKey: getPublicKey(secretKey) };\r\n  }\r\n\r\n  return Object.freeze({\r\n    keygen,\r\n    getPublicKey,\r\n    sign,\r\n    verify,\r\n    getSharedSecret,\r\n    utils,\r\n    Point,\r\n    Signature,\r\n    info: { type: 'weierstrass' as const, lengths, publicKeyHasPrefix: true },\r\n  });\r\n}\r\n\r\n// TODO: remove\r\nexport type WsPointComposed<T> = {\r\n  CURVE: WeierstrassOpts<T>;\r\n  curveOpts: WeierstrassExtraOpts<T>;\r\n};\r\n// TODO: remove\r\nexport type WsComposed = {\r\n  CURVE: WeierstrassOpts<bigint>;\r\n  hash: CHash;\r\n  curveOpts: WeierstrassExtraOpts<bigint>;\r\n  ecdsaOpts: ECDSAOpts;\r\n};\r\n// TODO: remove\r\nfunction _weierstrass_legacy_opts_to_new<T>(c: CurvePointsType<T>): WsPointComposed<T> {\r\n  const CURVE: WeierstrassOpts<T> = {\r\n    a: c.a,\r\n    b: c.b,\r\n    p: c.Fp.ORDER,\r\n    n: c.n,\r\n    h: c.h,\r\n    Gx: c.Gx,\r\n    Gy: c.Gy,\r\n  };\r\n  const Fp = c.Fp;\r\n  let allowedLengths = c.allowedPrivateKeyLengths\r\n    ? Array.from(new Set(c.allowedPrivateKeyLengths.map((l) => Math.ceil(l / 2))))\r\n    : undefined;\r\n  const Fn = Field(CURVE.n, {\r\n    BITS: c.nBitLength,\r\n    allowedLengths: allowedLengths,\r\n    modOnDecode: c.wrapPrivateKey,\r\n  });\r\n  const curveOpts: WeierstrassExtraOpts<T> = {\r\n    Fp,\r\n    Fn,\r\n    allowInfinityPoint: c.allowInfinityPoint,\r\n    endo: c.endo,\r\n    isTorsionFree: c.isTorsionFree,\r\n    clearCofactor: c.clearCofactor,\r\n    fromBytes: c.fromBytes,\r\n    toBytes: c.toBytes,\r\n  };\r\n  return { CURVE, curveOpts };\r\n}\r\nfunction _ecdsa_legacy_opts_to_new(c: CurveType): WsComposed {\r\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\r\n  const ecdsaOpts: ECDSAOpts = {\r\n    hmac: c.hmac,\r\n    randomBytes: c.randomBytes,\r\n    lowS: c.lowS,\r\n    bits2int: c.bits2int,\r\n    bits2int_modN: c.bits2int_modN,\r\n  };\r\n  return { CURVE, curveOpts, hash: c.hash, ecdsaOpts };\r\n}\r\n// TODO: remove\r\nfunction _weierstrass_new_output_to_legacy<T>(\r\n  c: CurvePointsType<T>,\r\n  Point: WeierstrassPointCons<T>\r\n): CurvePointsRes<T> {\r\n  const { Fp, Fn } = Point;\r\n  // TODO: remove\r\n  function isWithinCurveOrder(num: bigint): boolean {\r\n    return inRange(num, _1n, Fn.ORDER);\r\n  }\r\n  const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\r\n  return Object.assign(\r\n    {},\r\n    {\r\n      CURVE: c,\r\n      Point: Point,\r\n      ProjectivePoint: Point,\r\n      normPrivateKeyToScalar: (key: PrivKey) => _normFnElement(Fn, key),\r\n      weierstrassEquation,\r\n      isWithinCurveOrder,\r\n    }\r\n  );\r\n}\r\n// TODO: remove\r\nfunction _ecdsa_new_output_to_legacy(c: CurveType, ecdsa: ECDSA): CurveFn {\r\n  return Object.assign({}, ecdsa, {\r\n    ProjectivePoint: ecdsa.Point,\r\n    CURVE: c,\r\n  });\r\n}\r\n\r\n// _ecdsa_legacy\r\nexport function weierstrass(c: CurveType): CurveFn {\r\n  const { CURVE, curveOpts, hash, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\r\n  const Point = weierstrassN(CURVE, curveOpts);\r\n  const signs = ecdsa(Point, hash, ecdsaOpts);\r\n  return _ecdsa_new_output_to_legacy(c, signs);\r\n}\r\n", "/**\r\n * Utilities for short weierstrass curves, combined with noble-hashes.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { type CurveFn, type CurveType, weierstrass } from './abstract/weierstrass.ts';\r\nimport type { CHash } from './utils.ts';\r\n\r\n/** connects noble-curves to noble-hashes */\r\nexport function getHash(hash: CHash): { hash: CHash } {\r\n  return { hash };\r\n}\r\n/** Same API as @noble/hashes, with ability to create curve with custom hash */\r\nexport type CurveDef = Readonly<Omit<CurveType, 'hash'>>;\r\nexport type CurveFnWithCreate = CurveFn & { create: (hash: CHash) => CurveFn };\r\n\r\n/** @deprecated use new `weierstrass()` and `ecdsa()` methods */\r\nexport function createCurve(curveDef: CurveDef, defHash: CHash): CurveFnWithCreate {\r\n  const create = (hash: CHash): CurveFn => weierstrass({ ...curveDef, hash: hash });\r\n  return { ...create(defHash), create };\r\n}\r\n", "/**\r\n * hash-to-curve from RFC 9380.\r\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\r\n * https://www.rfc-editor.org/rfc/rfc9380\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport type { CHash } from '../utils.ts';\r\nimport {\r\n  _validateObject,\r\n  abytes,\r\n  bytesToNumberBE,\r\n  concatBytes,\r\n  isBytes,\r\n  isHash,\r\n  utf8ToBytes,\r\n} from '../utils.ts';\r\nimport type { AffinePoint, Group, GroupConstructor } from './curve.ts';\r\nimport { FpInvertBatch, mod, type IField } from './modular.ts';\r\n\r\nexport type UnicodeOrBytes = string | Uint8Array;\r\n\r\n/**\r\n * * `DST` is a domain separation tag, defined in section 2.2.5\r\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\r\n * * `m` is extension degree (1 for prime fields)\r\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\r\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\r\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\r\n */\r\nexport type H2COpts = {\r\n  DST: UnicodeOrBytes;\r\n  expand: 'xmd' | 'xof';\r\n  hash: CHash;\r\n  p: bigint;\r\n  m: number;\r\n  k: number;\r\n};\r\nexport type H2CHashOpts = {\r\n  expand: 'xmd' | 'xof';\r\n  hash: CHash;\r\n};\r\n// todo: remove\r\nexport type Opts = H2COpts;\r\n\r\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\r\nconst os2ip = bytesToNumberBE;\r\n\r\n// Integer to Octet Stream (numberToBytesBE)\r\nfunction i2osp(value: number, length: number): Uint8Array {\r\n  anum(value);\r\n  anum(length);\r\n  if (value < 0 || value >= 1 << (8 * length)) throw new Error('invalid I2OSP input: ' + value);\r\n  const res = Array.from({ length }).fill(0) as number[];\r\n  for (let i = length - 1; i >= 0; i--) {\r\n    res[i] = value & 0xff;\r\n    value >>>= 8;\r\n  }\r\n  return new Uint8Array(res);\r\n}\r\n\r\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\r\n  const arr = new Uint8Array(a.length);\r\n  for (let i = 0; i < a.length; i++) {\r\n    arr[i] = a[i] ^ b[i];\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction anum(item: unknown): void {\r\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\r\n}\r\n\r\nfunction normDST(DST: UnicodeOrBytes): Uint8Array {\r\n  if (!isBytes(DST) && typeof DST !== 'string') throw new Error('DST must be Uint8Array or string');\r\n  return typeof DST === 'string' ? utf8ToBytes(DST) : DST;\r\n}\r\n\r\n/**\r\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\r\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\r\n */\r\nexport function expand_message_xmd(\r\n  msg: Uint8Array,\r\n  DST: UnicodeOrBytes,\r\n  lenInBytes: number,\r\n  H: CHash\r\n): Uint8Array {\r\n  abytes(msg);\r\n  anum(lenInBytes);\r\n  DST = normDST(DST);\r\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\r\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\r\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\r\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\r\n  if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\r\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\r\n  const Z_pad = i2osp(0, r_in_bytes);\r\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\r\n  const b = new Array<Uint8Array>(ell);\r\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\r\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\r\n  for (let i = 1; i <= ell; i++) {\r\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\r\n    b[i] = H(concatBytes(...args));\r\n  }\r\n  const pseudo_random_bytes = concatBytes(...b);\r\n  return pseudo_random_bytes.slice(0, lenInBytes);\r\n}\r\n\r\n/**\r\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\r\n * 1. The collision resistance of H MUST be at least k bits.\r\n * 2. H MUST be an XOF that has been proved indifferentiable from\r\n *    a random oracle under a reasonable cryptographic assumption.\r\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\r\n */\r\nexport function expand_message_xof(\r\n  msg: Uint8Array,\r\n  DST: UnicodeOrBytes,\r\n  lenInBytes: number,\r\n  k: number,\r\n  H: CHash\r\n): Uint8Array {\r\n  abytes(msg);\r\n  anum(lenInBytes);\r\n  DST = normDST(DST);\r\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\r\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\r\n  if (DST.length > 255) {\r\n    const dkLen = Math.ceil((2 * k) / 8);\r\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\r\n  }\r\n  if (lenInBytes > 65535 || DST.length > 255)\r\n    throw new Error('expand_message_xof: invalid lenInBytes');\r\n  return (\r\n    H.create({ dkLen: lenInBytes })\r\n      .update(msg)\r\n      .update(i2osp(lenInBytes, 2))\r\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\r\n      .update(DST)\r\n      .update(i2osp(DST.length, 1))\r\n      .digest()\r\n  );\r\n}\r\n\r\n/**\r\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\r\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\r\n * @param msg a byte string containing the message to hash\r\n * @param count the number of elements of F to output\r\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\r\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\r\n */\r\nexport function hash_to_field(msg: Uint8Array, count: number, options: H2COpts): bigint[][] {\r\n  _validateObject(options, {\r\n    p: 'bigint',\r\n    m: 'number',\r\n    k: 'number',\r\n    hash: 'function',\r\n  });\r\n  const { p, k, m, hash, expand, DST } = options;\r\n  if (!isHash(options.hash)) throw new Error('expected valid hash');\r\n  abytes(msg);\r\n  anum(count);\r\n  const log2p = p.toString(2).length;\r\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\r\n  const len_in_bytes = count * m * L;\r\n  let prb; // pseudo_random_bytes\r\n  if (expand === 'xmd') {\r\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\r\n  } else if (expand === 'xof') {\r\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\r\n  } else if (expand === '_internal_pass') {\r\n    // for internal tests only\r\n    prb = msg;\r\n  } else {\r\n    throw new Error('expand must be \"xmd\" or \"xof\"');\r\n  }\r\n  const u = new Array(count);\r\n  for (let i = 0; i < count; i++) {\r\n    const e = new Array(m);\r\n    for (let j = 0; j < m; j++) {\r\n      const elm_offset = L * (j + i * m);\r\n      const tv = prb.subarray(elm_offset, elm_offset + L);\r\n      e[j] = mod(os2ip(tv), p);\r\n    }\r\n    u[i] = e;\r\n  }\r\n  return u;\r\n}\r\n\r\nexport type XY<T> = (x: T, y: T) => { x: T; y: T };\r\nexport type XYRatio<T> = [T[], T[], T[], T[]]; // xn/xd, yn/yd\r\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: XYRatio<T>): XY<T> {\r\n  // Make same order as in spec\r\n  const coeff = map.map((i) => Array.from(i).reverse());\r\n  return (x: T, y: T) => {\r\n    const [xn, xd, yn, yd] = coeff.map((val) =>\r\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\r\n    );\r\n    // 6.6.3\r\n    // Exceptional cases of iso_map are inputs that cause the denominator of\r\n    // either rational function to evaluate to zero; such cases MUST return\r\n    // the identity point on E.\r\n    const [xd_inv, yd_inv] = FpInvertBatch(field, [xd, yd], true);\r\n    x = field.mul(xn, xd_inv); // xNum / xDen\r\n    y = field.mul(y, field.mul(yn, yd_inv)); // y * (yNum / yDev)\r\n    return { x, y };\r\n  };\r\n}\r\n\r\n/** Point interface, which curves must implement to work correctly with the module. */\r\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\r\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\r\n  toAffine(iz?: bigint): AffinePoint<T>;\r\n  clearCofactor(): H2CPoint<T>;\r\n  assertValidity(): void;\r\n}\r\n\r\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\r\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\r\n}\r\n\r\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\r\n\r\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\r\n// (changing DST is ok!)\r\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\r\nexport type H2CMethod<T> = (msg: Uint8Array, options?: htfBasicOpts) => H2CPoint<T>;\r\n// TODO: remove\r\nexport type HTFMethod<T> = H2CMethod<T>;\r\nexport type MapMethod<T> = (scalars: bigint[]) => H2CPoint<T>;\r\nexport type H2CHasherBase<T> = {\r\n  hashToCurve: H2CMethod<T>;\r\n  hashToScalar: (msg: Uint8Array, options: htfBasicOpts) => bigint;\r\n};\r\n/**\r\n * RFC 9380 methods, with cofactor clearing. See https://www.rfc-editor.org/rfc/rfc9380#section-3.\r\n *\r\n * * hashToCurve: `map(hash(input))`, encodes RANDOM bytes to curve (WITH hashing)\r\n * * encodeToCurve: `map(hash(input))`, encodes NON-UNIFORM bytes to curve (WITH hashing)\r\n * * mapToCurve: `map(scalars)`, encodes NON-UNIFORM scalars to curve (NO hashing)\r\n */\r\nexport type H2CHasher<T> = H2CHasherBase<T> & {\r\n  encodeToCurve: H2CMethod<T>;\r\n  mapToCurve: MapMethod<T>;\r\n  defaults: H2COpts & { encodeDST?: UnicodeOrBytes };\r\n};\r\n// TODO: remove\r\nexport type Hasher<T> = H2CHasher<T>;\r\n\r\nexport const _DST_scalar: Uint8Array = utf8ToBytes('HashToScalar-');\r\n\r\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. See {@link H2CHasher}. */\r\nexport function createHasher<T>(\r\n  Point: H2CPointConstructor<T>,\r\n  mapToCurve: MapToCurve<T>,\r\n  defaults: H2COpts & { encodeDST?: UnicodeOrBytes }\r\n): H2CHasher<T> {\r\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\r\n  function map(num: bigint[]) {\r\n    return Point.fromAffine(mapToCurve(num));\r\n  }\r\n  function clear(initial: H2CPoint<T>) {\r\n    const P = initial.clearCofactor();\r\n    if (P.equals(Point.ZERO)) return Point.ZERO; // zero will throw in assert\r\n    P.assertValidity();\r\n    return P;\r\n  }\r\n\r\n  return {\r\n    defaults,\r\n\r\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\r\n      const opts = Object.assign({}, defaults, options);\r\n      const u = hash_to_field(msg, 2, opts);\r\n      const u0 = map(u[0]);\r\n      const u1 = map(u[1]);\r\n      return clear(u0.add(u1));\r\n    },\r\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\r\n      const optsDst = defaults.encodeDST ? { DST: defaults.encodeDST } : {};\r\n      const opts = Object.assign({}, defaults, optsDst, options);\r\n      const u = hash_to_field(msg, 1, opts);\r\n      const u0 = map(u[0]);\r\n      return clear(u0);\r\n    },\r\n    /** See {@link H2CHasher} */\r\n    mapToCurve(scalars: bigint[]): H2CPoint<T> {\r\n      if (!Array.isArray(scalars)) throw new Error('expected array of bigints');\r\n      for (const i of scalars)\r\n        if (typeof i !== 'bigint') throw new Error('expected array of bigints');\r\n      return clear(map(scalars));\r\n    },\r\n\r\n    // hash_to_scalar can produce 0: https://www.rfc-editor.org/errata/eid8393\r\n    // RFC 9380, draft-irtf-cfrg-bbs-signatures-08\r\n    hashToScalar(msg: Uint8Array, options?: htfBasicOpts): bigint {\r\n      // @ts-ignore\r\n      const N = Point.Fn.ORDER;\r\n      const opts = Object.assign({}, defaults, { p: N, m: 1, DST: _DST_scalar }, options);\r\n      return hash_to_field(msg, 1, opts)[0][0];\r\n    },\r\n  };\r\n}\r\n", "/**\r\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\r\n *\r\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\r\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { sha256 } from '@noble/hashes/sha2.js';\r\nimport { randomBytes } from '@noble/hashes/utils.js';\r\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\r\nimport type { CurveInfo } from './abstract/curve.ts';\r\nimport {\r\n  createHasher,\r\n  type H2CHasher,\r\n  type H2CMethod,\r\n  isogenyMap,\r\n} from './abstract/hash-to-curve.ts';\r\nimport { Field, mapHashToField, mod, pow2 } from './abstract/modular.ts';\r\nimport {\r\n  _normFnElement,\r\n  type EndomorphismOpts,\r\n  mapToCurveSimpleSWU,\r\n  type WeierstrassPoint as PointType,\r\n  type WeierstrassOpts,\r\n  type WeierstrassPointCons,\r\n} from './abstract/weierstrass.ts';\r\nimport type { Hex, PrivKey } from './utils.ts';\r\nimport {\r\n  aInRange,\r\n  bytesToNumberBE,\r\n  concatBytes,\r\n  ensureBytes,\r\n  inRange,\r\n  numberToBytesBE,\r\n} from './utils.ts';\r\n\r\n// Seems like generator was produced from some seed:\r\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\r\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\r\nconst secp256k1_CURVE: WeierstrassOpts<bigint> = {\r\n  p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\r\n  n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\r\n  h: BigInt(1),\r\n  a: BigInt(0),\r\n  b: BigInt(7),\r\n  Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\r\n  Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'),\r\n};\r\n\r\nconst secp256k1_ENDO: EndomorphismOpts = {\r\n  beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\r\n  basises: [\r\n    [BigInt('0x3086d221a7d46bcde86c90e49284eb15'), -BigInt('0xe4437ed6010e88286f547fa90abfe4c3')],\r\n    [BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'), BigInt('0x3086d221a7d46bcde86c90e49284eb15')],\r\n  ],\r\n};\r\n\r\nconst _0n = /* @__PURE__ */ BigInt(0);\r\nconst _1n = /* @__PURE__ */ BigInt(1);\r\nconst _2n = /* @__PURE__ */ BigInt(2);\r\n\r\n/**\r\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\r\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\r\n */\r\nfunction sqrtMod(y: bigint): bigint {\r\n  const P = secp256k1_CURVE.p;\r\n  // prettier-ignore\r\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\r\n  // prettier-ignore\r\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\r\n  const b2 = (y * y * y) % P; // x^3, 11\r\n  const b3 = (b2 * b2 * y) % P; // x^7\r\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\r\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\r\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\r\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\r\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\r\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\r\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\r\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\r\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\r\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\r\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\r\n  const root = pow2(t2, _2n, P);\r\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\r\n  return root;\r\n}\r\n\r\nconst Fpk1 = Field(secp256k1_CURVE.p, undefined, undefined, { sqrt: sqrtMod });\r\n\r\n/**\r\n * secp256k1 curve, ECDSA and ECDH methods.\r\n *\r\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\r\n *\r\n * @example\r\n * ```js\r\n * import { secp256k1 } from '@noble/curves/secp256k1';\r\n * const { secretKey, publicKey } = secp256k1.keygen();\r\n * const msg = new TextEncoder().encode('hello');\r\n * const sig = secp256k1.sign(msg, secretKey);\r\n * const isValid = secp256k1.verify(sig, msg, publicKey) === true;\r\n * ```\r\n */\r\nexport const secp256k1: CurveFnWithCreate = createCurve(\r\n  { ...secp256k1_CURVE, Fp: Fpk1, lowS: true, endo: secp256k1_ENDO },\r\n  sha256\r\n);\r\n\r\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\r\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\r\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\r\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\r\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\r\n  let tagP = TAGGED_HASH_PREFIXES[tag];\r\n  if (tagP === undefined) {\r\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\r\n    tagP = concatBytes(tagH, tagH);\r\n    TAGGED_HASH_PREFIXES[tag] = tagP;\r\n  }\r\n  return sha256(concatBytes(tagP, ...messages));\r\n}\r\n\r\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\r\nconst pointToBytes = (point: PointType<bigint>) => point.toBytes(true).slice(1);\r\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\r\nconst modP = (x: bigint) => mod(x, secp256k1_CURVE.p);\r\nconst modN = (x: bigint) => mod(x, secp256k1_CURVE.n);\r\nconst Point = /* @__PURE__ */ (() => secp256k1.Point)();\r\nconst hasEven = (y: bigint) => y % _2n === _0n;\r\n\r\n// Calculate point, scalar and bytes\r\nfunction schnorrGetExtPubKey(priv: PrivKey) {\r\n  // TODO: replace with Point.Fn.fromBytes(priv)\r\n  let d_ = _normFnElement(Point.Fn, priv);\r\n  let p = Point.BASE.multiply(d_); // P = d'⋅G; 0 < d' < n check is done inside\r\n  const scalar = hasEven(p.y) ? d_ : modN(-d_);\r\n  return { scalar, bytes: pointToBytes(p) };\r\n}\r\n/**\r\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\r\n * @returns valid point checked for being on-curve\r\n */\r\nfunction lift_x(x: bigint): PointType<bigint> {\r\n  aInRange('x', x, _1n, secp256k1_CURVE.p); // Fail if x ≥ p.\r\n  const xx = modP(x * x);\r\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\r\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\r\n  if (!hasEven(y)) y = modP(-y); // Return the unique point P such that x(P) = x and\r\n  const p = Point.fromAffine({ x, y }); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\r\n  p.assertValidity();\r\n  return p;\r\n}\r\nconst num = bytesToNumberBE;\r\n/**\r\n * Create tagged hash, convert it to bigint, reduce modulo-n.\r\n */\r\nfunction challenge(...args: Uint8Array[]): bigint {\r\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\r\n}\r\n\r\n/**\r\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\r\n */\r\nfunction schnorrGetPublicKey(secretKey: Hex): Uint8Array {\r\n  return schnorrGetExtPubKey(secretKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\r\n}\r\n\r\n/**\r\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\r\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\r\n */\r\nfunction schnorrSign(message: Hex, secretKey: PrivKey, auxRand: Hex = randomBytes(32)): Uint8Array {\r\n  const m = ensureBytes('message', message);\r\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(secretKey); // checks for isWithinCurveOrder\r\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\r\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\r\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\r\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\r\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\r\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\r\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\r\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\r\n  sig.set(rx, 0);\r\n  sig.set(numTo32b(modN(k + e * d)), 32);\r\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\r\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\r\n  return sig;\r\n}\r\n\r\n/**\r\n * Verifies Schnorr signature.\r\n * Will swallow errors & return false except for initial type validation of arguments.\r\n */\r\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\r\n  const sig = ensureBytes('signature', signature, 64);\r\n  const m = ensureBytes('message', message);\r\n  const pub = ensureBytes('publicKey', publicKey, 32);\r\n  try {\r\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\r\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\r\n    if (!inRange(r, _1n, secp256k1_CURVE.p)) return false;\r\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\r\n    if (!inRange(s, _1n, secp256k1_CURVE.n)) return false;\r\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\r\n    // R = s⋅G - e⋅P, where -eP == (n-e)P\r\n    const R = Point.BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(modN(-e)));\r\n    const { x, y } = R.toAffine();\r\n    // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\r\n    if (R.is0() || !hasEven(y) || x !== r) return false;\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport type SecpSchnorr = {\r\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\r\n  getPublicKey: typeof schnorrGetPublicKey;\r\n  sign: typeof schnorrSign;\r\n  verify: typeof schnorrVerify;\r\n  Point: WeierstrassPointCons<bigint>;\r\n  utils: {\r\n    randomSecretKey: (seed?: Uint8Array) => Uint8Array;\r\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\r\n    lift_x: typeof lift_x;\r\n    taggedHash: typeof taggedHash;\r\n\r\n    /** @deprecated use `randomSecretKey` */\r\n    randomPrivateKey: (seed?: Uint8Array) => Uint8Array;\r\n    /** @deprecated use `utils` */\r\n    numberToBytesBE: typeof numberToBytesBE;\r\n    /** @deprecated use `utils` */\r\n    bytesToNumberBE: typeof bytesToNumberBE;\r\n    /** @deprecated use `modular` */\r\n    mod: typeof mod;\r\n  };\r\n  info: { type: 'weierstrass'; publicKeyHasPrefix: false; lengths: CurveInfo['lengths'] };\r\n};\r\n/**\r\n * Schnorr signatures over secp256k1.\r\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\r\n * @example\r\n * ```js\r\n * import { schnorr } from '@noble/curves/secp256k1';\r\n * const { secretKey, publicKey } = schnorr.keygen();\r\n * // const publicKey = schnorr.getPublicKey(secretKey);\r\n * const msg = new TextEncoder().encode('hello');\r\n * const sig = schnorr.sign(msg, secretKey);\r\n * const isValid = schnorr.verify(sig, msg, publicKey);\r\n * ```\r\n */\r\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => {\r\n  const size = 32;\r\n  const seedLength = 48;\r\n  const randomSecretKey = (seed = randomBytes(seedLength)): Uint8Array => {\r\n    return mapHashToField(seed, secp256k1_CURVE.n);\r\n  };\r\n  // TODO: remove\r\n  secp256k1.utils.randomSecretKey;\r\n  function keygen(seed?: Uint8Array) {\r\n    const secretKey = randomSecretKey(seed);\r\n    return { secretKey, publicKey: schnorrGetPublicKey(secretKey) };\r\n  }\r\n  return {\r\n    keygen,\r\n    getPublicKey: schnorrGetPublicKey,\r\n    sign: schnorrSign,\r\n    verify: schnorrVerify,\r\n    Point,\r\n    utils: {\r\n      randomSecretKey: randomSecretKey,\r\n      randomPrivateKey: randomSecretKey,\r\n      taggedHash,\r\n\r\n      // TODO: remove\r\n      lift_x,\r\n      pointToBytes,\r\n      numberToBytesBE,\r\n      bytesToNumberBE,\r\n      mod,\r\n    },\r\n    info: {\r\n      type: 'weierstrass',\r\n      publicKeyHasPrefix: false,\r\n      lengths: {\r\n        secret: size,\r\n        public: size,\r\n        signature: size * 2,\r\n        seed: seedLength,\r\n      },\r\n    },\r\n  };\r\n})();\r\n\r\nconst isoMap = /* @__PURE__ */ (() =>\r\n  isogenyMap(\r\n    Fpk1,\r\n    [\r\n      // xNum\r\n      [\r\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\r\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\r\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\r\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\r\n      ],\r\n      // xDen\r\n      [\r\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\r\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\r\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n      ],\r\n      // yNum\r\n      [\r\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\r\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\r\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\r\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\r\n      ],\r\n      // yDen\r\n      [\r\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\r\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\r\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\r\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n      ],\r\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\r\n  ))();\r\nconst mapSWU = /* @__PURE__ */ (() =>\r\n  mapToCurveSimpleSWU(Fpk1, {\r\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\r\n    B: BigInt('1771'),\r\n    Z: Fpk1.create(BigInt('-11')),\r\n  }))();\r\n\r\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\r\nexport const secp256k1_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() =>\r\n  createHasher(\r\n    secp256k1.Point,\r\n    (scalars: bigint[]) => {\r\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\r\n      return isoMap(x, y);\r\n    },\r\n    {\r\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\r\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\r\n      p: Fpk1.ORDER,\r\n      m: 1,\r\n      k: 128,\r\n      expand: 'xmd',\r\n      hash: sha256,\r\n    }\r\n  ))();\r\n\r\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\r\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\r\n  secp256k1_hasher.hashToCurve)();\r\n\r\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\r\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\r\n  secp256k1_hasher.encodeToCurve)();\r\n", "/**\r\n * @module BIP32 hierarchical deterministic (HD) wallets over secp256k1.\r\n * @example\r\n * ```js\r\n * import { HDKey } from \"@scure/bip32\";\r\n * const hdkey1 = HDKey.fromMasterSeed(seed);\r\n * const hdkey2 = HDKey.fromExtendedKey(base58key);\r\n * const hdkey3 = HDKey.fromJSON({ xpriv: string });\r\n *\r\n * // props\r\n * [hdkey1.depth, hdkey1.index, hdkey1.chainCode];\r\n * console.log(hdkey2.privateKey, hdkey2.publicKey);\r\n * console.log(hdkey3.derive(\"m/0/2147483647'/1\"));\r\n * const sig = hdkey3.sign(hash);\r\n * hdkey3.verify(hash, sig);\r\n * ```\r\n */\r\n/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\r\nimport { mod } from '@noble/curves/abstract/modular';\r\nimport { secp256k1 as secp } from '@noble/curves/secp256k1';\r\nimport { hmac } from '@noble/hashes/hmac';\r\nimport { ripemd160 } from '@noble/hashes/legacy';\r\nimport { sha256, sha512 } from '@noble/hashes/sha2';\r\nimport {\r\n  abytes,\r\n  bytesToHex,\r\n  concatBytes,\r\n  createView,\r\n  hexToBytes,\r\n  utf8ToBytes,\r\n} from '@noble/hashes/utils';\r\nimport { createBase58check } from '@scure/base';\r\n\r\nconst Point = secp.ProjectivePoint;\r\nconst base58check = createBase58check(sha256);\r\n\r\nfunction bytesToNumber(bytes: Uint8Array): bigint {\r\n  abytes(bytes);\r\n  const h = bytes.length === 0 ? '0' : bytesToHex(bytes);\r\n  return BigInt('0x' + h);\r\n}\r\n\r\nfunction numberToBytes(num: bigint): Uint8Array {\r\n  if (typeof num !== 'bigint') throw new Error('bigint expected');\r\n  return hexToBytes(num.toString(16).padStart(64, '0'));\r\n}\r\n\r\nconst MASTER_SECRET = utf8ToBytes('Bitcoin seed');\r\n// Bitcoin hardcoded by default\r\nconst BITCOIN_VERSIONS: Versions = { private: 0x0488ade4, public: 0x0488b21e };\r\nexport const HARDENED_OFFSET: number = 0x80000000;\r\n\r\nexport interface Versions {\r\n  private: number;\r\n  public: number;\r\n}\r\n\r\nconst hash160 = (data: Uint8Array) => ripemd160(sha256(data));\r\nconst fromU32 = (data: Uint8Array) => createView(data).getUint32(0, false);\r\nconst toU32 = (n: number) => {\r\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\r\n    throw new Error('invalid number, should be from 0 to 2**32-1, got ' + n);\r\n  }\r\n  const buf = new Uint8Array(4);\r\n  createView(buf).setUint32(0, n, false);\r\n  return buf;\r\n};\r\n\r\ninterface HDKeyOpt {\r\n  versions?: Versions;\r\n  depth?: number;\r\n  index?: number;\r\n  parentFingerprint?: number;\r\n  chainCode?: Uint8Array;\r\n  publicKey?: Uint8Array;\r\n  privateKey?: Uint8Array | bigint;\r\n}\r\n\r\nexport class HDKey {\r\n  get fingerprint(): number {\r\n    if (!this.pubHash) {\r\n      throw new Error('No publicKey set!');\r\n    }\r\n    return fromU32(this.pubHash);\r\n  }\r\n  get identifier(): Uint8Array | undefined {\r\n    return this.pubHash;\r\n  }\r\n  get pubKeyHash(): Uint8Array | undefined {\r\n    return this.pubHash;\r\n  }\r\n  get privateKey(): Uint8Array | null {\r\n    return this.privKeyBytes || null;\r\n  }\r\n  get publicKey(): Uint8Array | null {\r\n    return this.pubKey || null;\r\n  }\r\n  get privateExtendedKey(): string {\r\n    const priv = this.privateKey;\r\n    if (!priv) {\r\n      throw new Error('No private key');\r\n    }\r\n    return base58check.encode(\r\n      this.serialize(this.versions.private, concatBytes(new Uint8Array([0]), priv))\r\n    );\r\n  }\r\n  get publicExtendedKey(): string {\r\n    if (!this.pubKey) {\r\n      throw new Error('No public key');\r\n    }\r\n    return base58check.encode(this.serialize(this.versions.public, this.pubKey));\r\n  }\r\n\r\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions = BITCOIN_VERSIONS): HDKey {\r\n    abytes(seed);\r\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\r\n      throw new Error(\r\n        'HDKey: seed length must be between 128 and 512 bits; 256 bits is advised, got ' +\r\n          seed.length\r\n      );\r\n    }\r\n    const I = hmac(sha512, MASTER_SECRET, seed);\r\n    return new HDKey({\r\n      versions,\r\n      chainCode: I.slice(32),\r\n      privateKey: I.slice(0, 32),\r\n    });\r\n  }\r\n\r\n  public static fromExtendedKey(base58key: string, versions: Versions = BITCOIN_VERSIONS): HDKey {\r\n    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\r\n    const keyBuffer: Uint8Array = base58check.decode(base58key);\r\n    const keyView = createView(keyBuffer);\r\n    const version = keyView.getUint32(0, false);\r\n    const opt = {\r\n      versions,\r\n      depth: keyBuffer[4],\r\n      parentFingerprint: keyView.getUint32(5, false),\r\n      index: keyView.getUint32(9, false),\r\n      chainCode: keyBuffer.slice(13, 45),\r\n    };\r\n    const key = keyBuffer.slice(45);\r\n    const isPriv = key[0] === 0;\r\n    if (version !== versions[isPriv ? 'private' : 'public']) {\r\n      throw new Error('Version mismatch');\r\n    }\r\n    if (isPriv) {\r\n      return new HDKey({ ...opt, privateKey: key.slice(1) });\r\n    } else {\r\n      return new HDKey({ ...opt, publicKey: key });\r\n    }\r\n  }\r\n\r\n  public static fromJSON(json: { xpriv: string }): HDKey {\r\n    return HDKey.fromExtendedKey(json.xpriv);\r\n  }\r\n  public readonly versions: Versions;\r\n  public readonly depth: number = 0;\r\n  public readonly index: number = 0;\r\n  public readonly chainCode: Uint8Array | null = null;\r\n  public readonly parentFingerprint: number = 0;\r\n  private privKey?: bigint;\r\n  private privKeyBytes?: Uint8Array;\r\n  private pubKey?: Uint8Array;\r\n  private pubHash: Uint8Array | undefined;\r\n\r\n  constructor(opt: HDKeyOpt) {\r\n    if (!opt || typeof opt !== 'object') {\r\n      throw new Error('HDKey.constructor must not be called directly');\r\n    }\r\n    this.versions = opt.versions || BITCOIN_VERSIONS;\r\n    this.depth = opt.depth || 0;\r\n    this.chainCode = opt.chainCode || null;\r\n    this.index = opt.index || 0;\r\n    this.parentFingerprint = opt.parentFingerprint || 0;\r\n    if (!this.depth) {\r\n      if (this.parentFingerprint || this.index) {\r\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\r\n      }\r\n    }\r\n    if (opt.publicKey && opt.privateKey) {\r\n      throw new Error('HDKey: publicKey and privateKey at same time.');\r\n    }\r\n    if (opt.privateKey) {\r\n      if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\r\n        throw new Error('Invalid private key');\r\n      }\r\n      this.privKey =\r\n        typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\r\n      this.privKeyBytes = numberToBytes(this.privKey);\r\n      this.pubKey = secp.getPublicKey(opt.privateKey, true);\r\n    } else if (opt.publicKey) {\r\n      this.pubKey = Point.fromHex(opt.publicKey).toRawBytes(true); // force compressed point\r\n    } else {\r\n      throw new Error('HDKey: no public or private key provided');\r\n    }\r\n    this.pubHash = hash160(this.pubKey);\r\n  }\r\n\r\n  public derive(path: string): HDKey {\r\n    if (!/^[mM]'?/.test(path)) {\r\n      throw new Error('Path must start with \"m\" or \"M\"');\r\n    }\r\n    if (/^[mM]'?$/.test(path)) {\r\n      return this;\r\n    }\r\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\r\n    // tslint:disable-next-line\r\n    let child: HDKey = this;\r\n    for (const c of parts) {\r\n      const m = /^(\\d+)('?)$/.exec(c);\r\n      const m1 = m && m[1];\r\n      if (!m || m.length !== 3 || typeof m1 !== 'string')\r\n        throw new Error('invalid child index: ' + c);\r\n      let idx = +m1;\r\n      if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) {\r\n        throw new Error('Invalid index');\r\n      }\r\n      // hardened key\r\n      if (m[2] === \"'\") {\r\n        idx += HARDENED_OFFSET;\r\n      }\r\n      child = child.deriveChild(idx);\r\n    }\r\n    return child;\r\n  }\r\n\r\n  public deriveChild(index: number): HDKey {\r\n    if (!this.pubKey || !this.chainCode) {\r\n      throw new Error('No publicKey or chainCode set');\r\n    }\r\n    let data = toU32(index);\r\n    if (index >= HARDENED_OFFSET) {\r\n      // Hardened\r\n      const priv = this.privateKey;\r\n      if (!priv) {\r\n        throw new Error('Could not derive hardened child key');\r\n      }\r\n      // Hardened child: 0x00 || ser256(kpar) || ser32(index)\r\n      data = concatBytes(new Uint8Array([0]), priv, data);\r\n    } else {\r\n      // Normal child: serP(point(kpar)) || ser32(index)\r\n      data = concatBytes(this.pubKey, data);\r\n    }\r\n    const I = hmac(sha512, this.chainCode, data);\r\n    const childTweak = bytesToNumber(I.slice(0, 32));\r\n    const chainCode = I.slice(32);\r\n    if (!secp.utils.isValidPrivateKey(childTweak)) {\r\n      throw new Error('Tweak bigger than curve order');\r\n    }\r\n    const opt: HDKeyOpt = {\r\n      versions: this.versions,\r\n      chainCode,\r\n      depth: this.depth + 1,\r\n      parentFingerprint: this.fingerprint,\r\n      index,\r\n    };\r\n    try {\r\n      // Private parent key -> private child key\r\n      if (this.privateKey) {\r\n        const added = mod(this.privKey! + childTweak, secp.CURVE.n);\r\n        if (!secp.utils.isValidPrivateKey(added)) {\r\n          throw new Error('The tweak was out of range or the resulted private key is invalid');\r\n        }\r\n        opt.privateKey = added;\r\n      } else {\r\n        const added = Point.fromHex(this.pubKey).add(Point.fromPrivateKey(childTweak));\r\n        // Cryptographically impossible: hmac-sha512 preimage would need to be found\r\n        if (added.equals(Point.ZERO)) {\r\n          throw new Error('The tweak was equal to negative P, which made the result key invalid');\r\n        }\r\n        opt.publicKey = added.toRawBytes(true);\r\n      }\r\n      return new HDKey(opt);\r\n    } catch (err) {\r\n      return this.deriveChild(index + 1);\r\n    }\r\n  }\r\n\r\n  public sign(hash: Uint8Array): Uint8Array {\r\n    if (!this.privateKey) {\r\n      throw new Error('No privateKey set!');\r\n    }\r\n    abytes(hash, 32);\r\n    return secp.sign(hash, this.privKey!).toCompactRawBytes();\r\n  }\r\n\r\n  public verify(hash: Uint8Array, signature: Uint8Array): boolean {\r\n    abytes(hash, 32);\r\n    abytes(signature, 64);\r\n    if (!this.publicKey) {\r\n      throw new Error('No publicKey set!');\r\n    }\r\n    let sig;\r\n    try {\r\n      sig = secp.Signature.fromCompact(signature);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n    return secp.verify(sig, hash, this.publicKey);\r\n  }\r\n\r\n  public wipePrivateData(): this {\r\n    this.privKey = undefined;\r\n    if (this.privKeyBytes) {\r\n      this.privKeyBytes.fill(0);\r\n      this.privKeyBytes = undefined;\r\n    }\r\n    return this;\r\n  }\r\n  public toJSON(): { xpriv: string; xpub: string } {\r\n    return {\r\n      xpriv: this.privateExtendedKey,\r\n      xpub: this.publicExtendedKey,\r\n    };\r\n  }\r\n\r\n  private serialize(version: number, key: Uint8Array) {\r\n    if (!this.chainCode) {\r\n      throw new Error('No chainCode set');\r\n    }\r\n    abytes(key, 33);\r\n    // version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\r\n    return concatBytes(\r\n      toU32(version),\r\n      new Uint8Array([this.depth]),\r\n      toU32(this.parentFingerprint),\r\n      toU32(this.index),\r\n      this.chainCode,\r\n      key\r\n    );\r\n  }\r\n}\r\n", "export const wordlist = `abdikace\r\nabeceda\r\nadresa\r\nagrese\r\nakce\r\naktovka\r\nalej\r\nalkohol\r\namputace\r\nananas\r\nandulka\r\nanekdota\r\nanketa\r\nantika\r\nanulovat\r\narcha\r\narogance\r\nasfalt\r\nasistent\r\naspirace\r\nastma\r\nastronom\r\natlas\r\natletika\r\natol\r\nautobus\r\nazyl\r\nbabka\r\nbachor\r\nbacil\r\nbaculka\r\nbadatel\r\nbageta\r\nbagr\r\nbahno\r\nbakterie\r\nbalada\r\nbaletka\r\nbalkon\r\nbalonek\r\nbalvan\r\nbalza\r\nbambus\r\nbankomat\r\nbarbar\r\nbaret\r\nbarman\r\nbaroko\r\nbarva\r\nbaterka\r\nbatoh\r\nbavlna\r\nbazalka\r\nbazilika\r\nbazuka\r\nbedna\r\nberan\r\nbeseda\r\nbestie\r\nbeton\r\nbezinka\r\nbezmoc\r\nbeztak\r\nbicykl\r\nbidlo\r\nbiftek\r\nbikiny\r\nbilance\r\nbiograf\r\nbiolog\r\nbitva\r\nbizon\r\nblahobyt\r\nblatouch\r\nblecha\r\nbledule\r\nblesk\r\nblikat\r\nblizna\r\nblokovat\r\nbloudit\r\nblud\r\nbobek\r\nbobr\r\nbodlina\r\nbodnout\r\nbohatost\r\nbojkot\r\nbojovat\r\nbokorys\r\nbolest\r\nborec\r\nborovice\r\nbota\r\nboubel\r\nbouchat\r\nbouda\r\nboule\r\nbourat\r\nboxer\r\nbradavka\r\nbrambora\r\nbranka\r\nbratr\r\nbrepta\r\nbriketa\r\nbrko\r\nbrloh\r\nbronz\r\nbroskev\r\nbrunetka\r\nbrusinka\r\nbrzda\r\nbrzy\r\nbublina\r\nbubnovat\r\nbuchta\r\nbuditel\r\nbudka\r\nbudova\r\nbufet\r\nbujarost\r\nbukvice\r\nbuldok\r\nbulva\r\nbunda\r\nbunkr\r\nburza\r\nbutik\r\nbuvol\r\nbuzola\r\nbydlet\r\nbylina\r\nbytovka\r\nbzukot\r\ncapart\r\ncarevna\r\ncedr\r\ncedule\r\ncejch\r\ncejn\r\ncela\r\nceler\r\ncelkem\r\ncelnice\r\ncenina\r\ncennost\r\ncenovka\r\ncentrum\r\ncenzor\r\ncestopis\r\ncetka\r\nchalupa\r\nchapadlo\r\ncharita\r\nchata\r\nchechtat\r\nchemie\r\nchichot\r\nchirurg\r\nchlad\r\nchleba\r\nchlubit\r\nchmel\r\nchmura\r\nchobot\r\nchochol\r\nchodba\r\ncholera\r\nchomout\r\nchopit\r\nchoroba\r\nchov\r\nchrapot\r\nchrlit\r\nchrt\r\nchrup\r\nchtivost\r\nchudina\r\nchutnat\r\nchvat\r\nchvilka\r\nchvost\r\nchyba\r\nchystat\r\nchytit\r\ncibule\r\ncigareta\r\ncihelna\r\ncihla\r\ncinkot\r\ncirkus\r\ncisterna\r\ncitace\r\ncitrus\r\ncizinec\r\ncizost\r\nclona\r\ncokoliv\r\ncouvat\r\nctitel\r\nctnost\r\ncudnost\r\ncuketa\r\ncukr\r\ncupot\r\ncvaknout\r\ncval\r\ncvik\r\ncvrkot\r\ncyklista\r\ndaleko\r\ndareba\r\ndatel\r\ndatum\r\ndcera\r\ndebata\r\ndechovka\r\ndecibel\r\ndeficit\r\ndeflace\r\ndekl\r\ndekret\r\ndemokrat\r\ndeprese\r\nderby\r\ndeska\r\ndetektiv\r\ndikobraz\r\ndiktovat\r\ndioda\r\ndiplom\r\ndisk\r\ndisplej\r\ndivadlo\r\ndivoch\r\ndlaha\r\ndlouho\r\ndluhopis\r\ndnes\r\ndobro\r\ndobytek\r\ndocent\r\ndochutit\r\ndodnes\r\ndohled\r\ndohoda\r\ndohra\r\ndojem\r\ndojnice\r\ndoklad\r\ndokola\r\ndoktor\r\ndokument\r\ndolar\r\ndoleva\r\ndolina\r\ndoma\r\ndominant\r\ndomluvit\r\ndomov\r\ndonutit\r\ndopad\r\ndopis\r\ndoplnit\r\ndoposud\r\ndoprovod\r\ndopustit\r\ndorazit\r\ndorost\r\ndort\r\ndosah\r\ndoslov\r\ndostatek\r\ndosud\r\ndosyta\r\ndotaz\r\ndotek\r\ndotknout\r\ndoufat\r\ndoutnat\r\ndovozce\r\ndozadu\r\ndoznat\r\ndozorce\r\ndrahota\r\ndrak\r\ndramatik\r\ndravec\r\ndraze\r\ndrdol\r\ndrobnost\r\ndrogerie\r\ndrozd\r\ndrsnost\r\ndrtit\r\ndrzost\r\nduben\r\nduchovno\r\ndudek\r\nduha\r\nduhovka\r\ndusit\r\ndusno\r\ndutost\r\ndvojice\r\ndvorec\r\ndynamit\r\nekolog\r\nekonomie\r\nelektron\r\nelipsa\r\nemail\r\nemise\r\nemoce\r\nempatie\r\nepizoda\r\nepocha\r\nepopej\r\nepos\r\nesej\r\nesence\r\neskorta\r\neskymo\r\netiketa\r\neuforie\r\nevoluce\r\nexekuce\r\nexkurze\r\nexpedice\r\nexploze\r\nexport\r\nextrakt\r\nfacka\r\nfajfka\r\nfakulta\r\nfanatik\r\nfantazie\r\nfarmacie\r\nfavorit\r\nfazole\r\nfederace\r\nfejeton\r\nfenka\r\nfialka\r\nfigurant\r\nfilozof\r\nfiltr\r\nfinance\r\nfinta\r\nfixace\r\nfjord\r\nflanel\r\nflirt\r\nflotila\r\nfond\r\nfosfor\r\nfotbal\r\nfotka\r\nfoton\r\nfrakce\r\nfreska\r\nfronta\r\nfukar\r\nfunkce\r\nfyzika\r\ngaleje\r\ngarant\r\ngenetika\r\ngeolog\r\ngilotina\r\nglazura\r\nglejt\r\ngolem\r\ngolfista\r\ngotika\r\ngraf\r\ngramofon\r\ngranule\r\ngrep\r\ngril\r\ngrog\r\ngroteska\r\nguma\r\nhadice\r\nhadr\r\nhala\r\nhalenka\r\nhanba\r\nhanopis\r\nharfa\r\nharpuna\r\nhavran\r\nhebkost\r\nhejkal\r\nhejno\r\nhejtman\r\nhektar\r\nhelma\r\nhematom\r\nherec\r\nherna\r\nheslo\r\nhezky\r\nhistorik\r\nhladovka\r\nhlasivky\r\nhlava\r\nhledat\r\nhlen\r\nhlodavec\r\nhloh\r\nhloupost\r\nhltat\r\nhlubina\r\nhluchota\r\nhmat\r\nhmota\r\nhmyz\r\nhnis\r\nhnojivo\r\nhnout\r\nhoblina\r\nhoboj\r\nhoch\r\nhodiny\r\nhodlat\r\nhodnota\r\nhodovat\r\nhojnost\r\nhokej\r\nholinka\r\nholka\r\nholub\r\nhomole\r\nhonitba\r\nhonorace\r\nhoral\r\nhorda\r\nhorizont\r\nhorko\r\nhorlivec\r\nhormon\r\nhornina\r\nhoroskop\r\nhorstvo\r\nhospoda\r\nhostina\r\nhotovost\r\nhouba\r\nhouf\r\nhoupat\r\nhouska\r\nhovor\r\nhradba\r\nhranice\r\nhravost\r\nhrazda\r\nhrbolek\r\nhrdina\r\nhrdlo\r\nhrdost\r\nhrnek\r\nhrobka\r\nhromada\r\nhrot\r\nhrouda\r\nhrozen\r\nhrstka\r\nhrubost\r\nhryzat\r\nhubenost\r\nhubnout\r\nhudba\r\nhukot\r\nhumr\r\nhusita\r\nhustota\r\nhvozd\r\nhybnost\r\nhydrant\r\nhygiena\r\nhymna\r\nhysterik\r\nidylka\r\nihned\r\nikona\r\niluze\r\nimunita\r\ninfekce\r\ninflace\r\ninkaso\r\ninovace\r\ninspekce\r\ninternet\r\ninvalida\r\ninvestor\r\ninzerce\r\nironie\r\njablko\r\njachta\r\njahoda\r\njakmile\r\njakost\r\njalovec\r\njantar\r\njarmark\r\njaro\r\njasan\r\njasno\r\njatka\r\njavor\r\njazyk\r\njedinec\r\njedle\r\njednatel\r\njehlan\r\njekot\r\njelen\r\njelito\r\njemnost\r\njenom\r\njepice\r\njeseter\r\njevit\r\njezdec\r\njezero\r\njinak\r\njindy\r\njinoch\r\njiskra\r\njistota\r\njitrnice\r\njizva\r\njmenovat\r\njogurt\r\njurta\r\nkabaret\r\nkabel\r\nkabinet\r\nkachna\r\nkadet\r\nkadidlo\r\nkahan\r\nkajak\r\nkajuta\r\nkakao\r\nkaktus\r\nkalamita\r\nkalhoty\r\nkalibr\r\nkalnost\r\nkamera\r\nkamkoliv\r\nkamna\r\nkanibal\r\nkanoe\r\nkantor\r\nkapalina\r\nkapela\r\nkapitola\r\nkapka\r\nkaple\r\nkapota\r\nkapr\r\nkapusta\r\nkapybara\r\nkaramel\r\nkarotka\r\nkarton\r\nkasa\r\nkatalog\r\nkatedra\r\nkauce\r\nkauza\r\nkavalec\r\nkazajka\r\nkazeta\r\nkazivost\r\nkdekoliv\r\nkdesi\r\nkedluben\r\nkemp\r\nkeramika\r\nkino\r\nklacek\r\nkladivo\r\nklam\r\nklapot\r\nklasika\r\nklaun\r\nklec\r\nklenba\r\nklepat\r\nklesnout\r\nklid\r\nklima\r\nklisna\r\nklobouk\r\nklokan\r\nklopa\r\nkloub\r\nklubovna\r\nklusat\r\nkluzkost\r\nkmen\r\nkmitat\r\nkmotr\r\nkniha\r\nknot\r\nkoalice\r\nkoberec\r\nkobka\r\nkobliha\r\nkobyla\r\nkocour\r\nkohout\r\nkojenec\r\nkokos\r\nkoktejl\r\nkolaps\r\nkoleda\r\nkolize\r\nkolo\r\nkomando\r\nkometa\r\nkomik\r\nkomnata\r\nkomora\r\nkompas\r\nkomunita\r\nkonat\r\nkoncept\r\nkondice\r\nkonec\r\nkonfese\r\nkongres\r\nkonina\r\nkonkurs\r\nkontakt\r\nkonzerva\r\nkopanec\r\nkopie\r\nkopnout\r\nkoprovka\r\nkorbel\r\nkorektor\r\nkormidlo\r\nkoroptev\r\nkorpus\r\nkoruna\r\nkoryto\r\nkorzet\r\nkosatec\r\nkostka\r\nkotel\r\nkotleta\r\nkotoul\r\nkoukat\r\nkoupelna\r\nkousek\r\nkouzlo\r\nkovboj\r\nkoza\r\nkozoroh\r\nkrabice\r\nkrach\r\nkrajina\r\nkralovat\r\nkrasopis\r\nkravata\r\nkredit\r\nkrejcar\r\nkresba\r\nkreveta\r\nkriket\r\nkritik\r\nkrize\r\nkrkavec\r\nkrmelec\r\nkrmivo\r\nkrocan\r\nkrok\r\nkronika\r\nkropit\r\nkroupa\r\nkrovka\r\nkrtek\r\nkruhadlo\r\nkrupice\r\nkrutost\r\nkrvinka\r\nkrychle\r\nkrypta\r\nkrystal\r\nkryt\r\nkudlanka\r\nkufr\r\nkujnost\r\nkukla\r\nkulajda\r\nkulich\r\nkulka\r\nkulomet\r\nkultura\r\nkuna\r\nkupodivu\r\nkurt\r\nkurzor\r\nkutil\r\nkvalita\r\nkvasinka\r\nkvestor\r\nkynolog\r\nkyselina\r\nkytara\r\nkytice\r\nkytka\r\nkytovec\r\nkyvadlo\r\nlabrador\r\nlachtan\r\nladnost\r\nlaik\r\nlakomec\r\nlamela\r\nlampa\r\nlanovka\r\nlasice\r\nlaso\r\nlastura\r\nlatinka\r\nlavina\r\nlebka\r\nleckdy\r\nleden\r\nlednice\r\nledovka\r\nledvina\r\nlegenda\r\nlegie\r\nlegrace\r\nlehce\r\nlehkost\r\nlehnout\r\nlektvar\r\nlenochod\r\nlentilka\r\nlepenka\r\nlepidlo\r\nletadlo\r\nletec\r\nletmo\r\nletokruh\r\nlevhart\r\nlevitace\r\nlevobok\r\nlibra\r\nlichotka\r\nlidojed\r\nlidskost\r\nlihovina\r\nlijavec\r\nlilek\r\nlimetka\r\nlinie\r\nlinka\r\nlinoleum\r\nlistopad\r\nlitina\r\nlitovat\r\nlobista\r\nlodivod\r\nlogika\r\nlogoped\r\nlokalita\r\nloket\r\nlomcovat\r\nlopata\r\nlopuch\r\nlord\r\nlosos\r\nlotr\r\nloudal\r\nlouh\r\nlouka\r\nlouskat\r\nlovec\r\nlstivost\r\nlucerna\r\nlucifer\r\nlump\r\nlusk\r\nlustrace\r\nlvice\r\nlyra\r\nlyrika\r\nlysina\r\nmadam\r\nmadlo\r\nmagistr\r\nmahagon\r\nmajetek\r\nmajitel\r\nmajorita\r\nmakak\r\nmakovice\r\nmakrela\r\nmalba\r\nmalina\r\nmalovat\r\nmalvice\r\nmaminka\r\nmandle\r\nmanko\r\nmarnost\r\nmasakr\r\nmaskot\r\nmasopust\r\nmatice\r\nmatrika\r\nmaturita\r\nmazanec\r\nmazivo\r\nmazlit\r\nmazurka\r\nmdloba\r\nmechanik\r\nmeditace\r\nmedovina\r\nmelasa\r\nmeloun\r\nmentolka\r\nmetla\r\nmetoda\r\nmetr\r\nmezera\r\nmigrace\r\nmihnout\r\nmihule\r\nmikina\r\nmikrofon\r\nmilenec\r\nmilimetr\r\nmilost\r\nmimika\r\nmincovna\r\nminibar\r\nminomet\r\nminulost\r\nmiska\r\nmistr\r\nmixovat\r\nmladost\r\nmlha\r\nmlhovina\r\nmlok\r\nmlsat\r\nmluvit\r\nmnich\r\nmnohem\r\nmobil\r\nmocnost\r\nmodelka\r\nmodlitba\r\nmohyla\r\nmokro\r\nmolekula\r\nmomentka\r\nmonarcha\r\nmonokl\r\nmonstrum\r\nmontovat\r\nmonzun\r\nmosaz\r\nmoskyt\r\nmost\r\nmotivace\r\nmotorka\r\nmotyka\r\nmoucha\r\nmoudrost\r\nmozaika\r\nmozek\r\nmozol\r\nmramor\r\nmravenec\r\nmrkev\r\nmrtvola\r\nmrzet\r\nmrzutost\r\nmstitel\r\nmudrc\r\nmuflon\r\nmulat\r\nmumie\r\nmunice\r\nmuset\r\nmutace\r\nmuzeum\r\nmuzikant\r\nmyslivec\r\nmzda\r\nnabourat\r\nnachytat\r\nnadace\r\nnadbytek\r\nnadhoz\r\nnadobro\r\nnadpis\r\nnahlas\r\nnahnat\r\nnahodile\r\nnahradit\r\nnaivita\r\nnajednou\r\nnajisto\r\nnajmout\r\nnaklonit\r\nnakonec\r\nnakrmit\r\nnalevo\r\nnamazat\r\nnamluvit\r\nnanometr\r\nnaoko\r\nnaopak\r\nnaostro\r\nnapadat\r\nnapevno\r\nnaplnit\r\nnapnout\r\nnaposled\r\nnaprosto\r\nnarodit\r\nnaruby\r\nnarychlo\r\nnasadit\r\nnasekat\r\nnaslepo\r\nnastat\r\nnatolik\r\nnavenek\r\nnavrch\r\nnavzdory\r\nnazvat\r\nnebe\r\nnechat\r\nnecky\r\nnedaleko\r\nnedbat\r\nneduh\r\nnegace\r\nnehet\r\nnehoda\r\nnejen\r\nnejprve\r\nneklid\r\nnelibost\r\nnemilost\r\nnemoc\r\nneochota\r\nneonka\r\nnepokoj\r\nnerost\r\nnerv\r\nnesmysl\r\nnesoulad\r\nnetvor\r\nneuron\r\nnevina\r\nnezvykle\r\nnicota\r\nnijak\r\nnikam\r\nnikdy\r\nnikl\r\nnikterak\r\nnitro\r\nnocleh\r\nnohavice\r\nnominace\r\nnora\r\nnorek\r\nnositel\r\nnosnost\r\nnouze\r\nnoviny\r\nnovota\r\nnozdra\r\nnuda\r\nnudle\r\nnuget\r\nnutit\r\nnutnost\r\nnutrie\r\nnymfa\r\nobal\r\nobarvit\r\nobava\r\nobdiv\r\nobec\r\nobehnat\r\nobejmout\r\nobezita\r\nobhajoba\r\nobilnice\r\nobjasnit\r\nobjekt\r\nobklopit\r\noblast\r\noblek\r\nobliba\r\nobloha\r\nobluda\r\nobnos\r\nobohatit\r\nobojek\r\nobout\r\nobrazec\r\nobrna\r\nobruba\r\nobrys\r\nobsah\r\nobsluha\r\nobstarat\r\nobuv\r\nobvaz\r\nobvinit\r\nobvod\r\nobvykle\r\nobyvatel\r\nobzor\r\nocas\r\nocel\r\nocenit\r\nochladit\r\nochota\r\nochrana\r\nocitnout\r\nodboj\r\nodbyt\r\nodchod\r\nodcizit\r\nodebrat\r\nodeslat\r\nodevzdat\r\nodezva\r\nodhadce\r\nodhodit\r\nodjet\r\nodjinud\r\nodkaz\r\nodkoupit\r\nodliv\r\nodluka\r\nodmlka\r\nodolnost\r\nodpad\r\nodpis\r\nodplout\r\nodpor\r\nodpustit\r\nodpykat\r\nodrazka\r\nodsoudit\r\nodstup\r\nodsun\r\nodtok\r\nodtud\r\nodvaha\r\nodveta\r\nodvolat\r\nodvracet\r\nodznak\r\nofina\r\nofsajd\r\nohlas\r\nohnisko\r\nohrada\r\nohrozit\r\nohryzek\r\nokap\r\nokenice\r\noklika\r\nokno\r\nokouzlit\r\nokovy\r\nokrasa\r\nokres\r\nokrsek\r\nokruh\r\nokupant\r\nokurka\r\nokusit\r\nolejnina\r\nolizovat\r\nomak\r\nomeleta\r\nomezit\r\nomladina\r\nomlouvat\r\nomluva\r\nomyl\r\nonehdy\r\nopakovat\r\nopasek\r\noperace\r\nopice\r\nopilost\r\nopisovat\r\nopora\r\nopozice\r\nopravdu\r\noproti\r\norbital\r\norchestr\r\norgie\r\norlice\r\norloj\r\nortel\r\nosada\r\noschnout\r\nosika\r\nosivo\r\noslava\r\noslepit\r\noslnit\r\noslovit\r\nosnova\r\nosoba\r\nosolit\r\nospalec\r\nosten\r\nostraha\r\nostuda\r\nostych\r\nosvojit\r\noteplit\r\notisk\r\notop\r\notrhat\r\notrlost\r\notrok\r\notruby\r\notvor\r\novanout\r\novar\r\noves\r\novlivnit\r\novoce\r\noxid\r\nozdoba\r\npachatel\r\npacient\r\npadouch\r\npahorek\r\npakt\r\npalanda\r\npalec\r\npalivo\r\npaluba\r\npamflet\r\npamlsek\r\npanenka\r\npanika\r\npanna\r\npanovat\r\npanstvo\r\npantofle\r\npaprika\r\nparketa\r\nparodie\r\nparta\r\nparuka\r\nparyba\r\npaseka\r\npasivita\r\npastelka\r\npatent\r\npatrona\r\npavouk\r\npazneht\r\npazourek\r\npecka\r\npedagog\r\npejsek\r\npeklo\r\npeloton\r\npenalta\r\npendrek\r\npenze\r\nperiskop\r\npero\r\npestrost\r\npetarda\r\npetice\r\npetrolej\r\npevnina\r\npexeso\r\npianista\r\npiha\r\npijavice\r\npikle\r\npiknik\r\npilina\r\npilnost\r\npilulka\r\npinzeta\r\npipeta\r\npisatel\r\npistole\r\npitevna\r\npivnice\r\npivovar\r\nplacenta\r\nplakat\r\nplamen\r\nplaneta\r\nplastika\r\nplatit\r\nplavidlo\r\nplaz\r\nplech\r\nplemeno\r\nplenta\r\nples\r\npletivo\r\nplevel\r\nplivat\r\nplnit\r\nplno\r\nplocha\r\nplodina\r\nplomba\r\nplout\r\npluk\r\nplyn\r\npobavit\r\npobyt\r\npochod\r\npocit\r\npoctivec\r\npodat\r\npodcenit\r\npodepsat\r\npodhled\r\npodivit\r\npodklad\r\npodmanit\r\npodnik\r\npodoba\r\npodpora\r\npodraz\r\npodstata\r\npodvod\r\npodzim\r\npoezie\r\npohanka\r\npohnutka\r\npohovor\r\npohroma\r\npohyb\r\npointa\r\npojistka\r\npojmout\r\npokazit\r\npokles\r\npokoj\r\npokrok\r\npokuta\r\npokyn\r\npoledne\r\npolibek\r\npolknout\r\npoloha\r\npolynom\r\npomalu\r\npominout\r\npomlka\r\npomoc\r\npomsta\r\npomyslet\r\nponechat\r\nponorka\r\nponurost\r\npopadat\r\npopel\r\npopisek\r\npoplach\r\npoprosit\r\npopsat\r\npopud\r\nporadce\r\nporce\r\nporod\r\nporucha\r\nporyv\r\nposadit\r\nposed\r\nposila\r\nposkok\r\nposlanec\r\nposoudit\r\npospolu\r\npostava\r\nposudek\r\nposyp\r\npotah\r\npotkan\r\npotlesk\r\npotomek\r\npotrava\r\npotupa\r\npotvora\r\npoukaz\r\npouto\r\npouzdro\r\npovaha\r\npovidla\r\npovlak\r\npovoz\r\npovrch\r\npovstat\r\npovyk\r\npovzdech\r\npozdrav\r\npozemek\r\npoznatek\r\npozor\r\npozvat\r\npracovat\r\nprahory\r\npraktika\r\nprales\r\npraotec\r\npraporek\r\nprase\r\npravda\r\nprincip\r\nprkno\r\nprobudit\r\nprocento\r\nprodej\r\nprofese\r\nprohra\r\nprojekt\r\nprolomit\r\npromile\r\npronikat\r\npropad\r\nprorok\r\nprosba\r\nproton\r\nproutek\r\nprovaz\r\nprskavka\r\nprsten\r\nprudkost\r\nprut\r\nprvek\r\nprvohory\r\npsanec\r\npsovod\r\npstruh\r\nptactvo\r\npuberta\r\npuch\r\npudl\r\npukavec\r\npuklina\r\npukrle\r\npult\r\npumpa\r\npunc\r\npupen\r\npusa\r\npusinka\r\npustina\r\nputovat\r\nputyka\r\npyramida\r\npysk\r\npytel\r\nracek\r\nrachot\r\nradiace\r\nradnice\r\nradon\r\nraft\r\nragby\r\nraketa\r\nrakovina\r\nrameno\r\nrampouch\r\nrande\r\nrarach\r\nrarita\r\nrasovna\r\nrastr\r\nratolest\r\nrazance\r\nrazidlo\r\nreagovat\r\nreakce\r\nrecept\r\nredaktor\r\nreferent\r\nreflex\r\nrejnok\r\nreklama\r\nrekord\r\nrekrut\r\nrektor\r\nreputace\r\nrevize\r\nrevma\r\nrevolver\r\nrezerva\r\nriskovat\r\nriziko\r\nrobotika\r\nrodokmen\r\nrohovka\r\nrokle\r\nrokoko\r\nromaneto\r\nropovod\r\nropucha\r\nrorejs\r\nrosol\r\nrostlina\r\nrotmistr\r\nrotoped\r\nrotunda\r\nroubenka\r\nroucho\r\nroup\r\nroura\r\nrovina\r\nrovnice\r\nrozbor\r\nrozchod\r\nrozdat\r\nrozeznat\r\nrozhodce\r\nrozinka\r\nrozjezd\r\nrozkaz\r\nrozloha\r\nrozmar\r\nrozpad\r\nrozruch\r\nrozsah\r\nroztok\r\nrozum\r\nrozvod\r\nrubrika\r\nruchadlo\r\nrukavice\r\nrukopis\r\nryba\r\nrybolov\r\nrychlost\r\nrydlo\r\nrypadlo\r\nrytina\r\nryzost\r\nsadista\r\nsahat\r\nsako\r\nsamec\r\nsamizdat\r\nsamota\r\nsanitka\r\nsardinka\r\nsasanka\r\nsatelit\r\nsazba\r\nsazenice\r\nsbor\r\nschovat\r\nsebranka\r\nsecese\r\nsedadlo\r\nsediment\r\nsedlo\r\nsehnat\r\nsejmout\r\nsekera\r\nsekta\r\nsekunda\r\nsekvoje\r\nsemeno\r\nseno\r\nservis\r\nsesadit\r\nseshora\r\nseskok\r\nseslat\r\nsestra\r\nsesuv\r\nsesypat\r\nsetba\r\nsetina\r\nsetkat\r\nsetnout\r\nsetrvat\r\nsever\r\nseznam\r\nshoda\r\nshrnout\r\nsifon\r\nsilnice\r\nsirka\r\nsirotek\r\nsirup\r\nsituace\r\nskafandr\r\nskalisko\r\nskanzen\r\nskaut\r\nskeptik\r\nskica\r\nskladba\r\nsklenice\r\nsklo\r\nskluz\r\nskoba\r\nskokan\r\nskoro\r\nskripta\r\nskrz\r\nskupina\r\nskvost\r\nskvrna\r\nslabika\r\nsladidlo\r\nslanina\r\nslast\r\nslavnost\r\nsledovat\r\nslepec\r\nsleva\r\nslezina\r\nslib\r\nslina\r\nsliznice\r\nslon\r\nsloupek\r\nslovo\r\nsluch\r\nsluha\r\nslunce\r\nslupka\r\nslza\r\nsmaragd\r\nsmetana\r\nsmilstvo\r\nsmlouva\r\nsmog\r\nsmrad\r\nsmrk\r\nsmrtka\r\nsmutek\r\nsmysl\r\nsnad\r\nsnaha\r\nsnob\r\nsobota\r\nsocha\r\nsodovka\r\nsokol\r\nsopka\r\nsotva\r\nsouboj\r\nsoucit\r\nsoudce\r\nsouhlas\r\nsoulad\r\nsoumrak\r\nsouprava\r\nsoused\r\nsoutok\r\nsouviset\r\nspalovna\r\nspasitel\r\nspis\r\nsplav\r\nspodek\r\nspojenec\r\nspolu\r\nsponzor\r\nspornost\r\nspousta\r\nsprcha\r\nspustit\r\nsranda\r\nsraz\r\nsrdce\r\nsrna\r\nsrnec\r\nsrovnat\r\nsrpen\r\nsrst\r\nsrub\r\nstanice\r\nstarosta\r\nstatika\r\nstavba\r\nstehno\r\nstezka\r\nstodola\r\nstolek\r\nstopa\r\nstorno\r\nstoupat\r\nstrach\r\nstres\r\nstrhnout\r\nstrom\r\nstruna\r\nstudna\r\nstupnice\r\nstvol\r\nstyk\r\nsubjekt\r\nsubtropy\r\nsuchar\r\nsudost\r\nsukno\r\nsundat\r\nsunout\r\nsurikata\r\nsurovina\r\nsvah\r\nsvalstvo\r\nsvetr\r\nsvatba\r\nsvazek\r\nsvisle\r\nsvitek\r\nsvoboda\r\nsvodidlo\r\nsvorka\r\nsvrab\r\nsykavka\r\nsykot\r\nsynek\r\nsynovec\r\nsypat\r\nsypkost\r\nsyrovost\r\nsysel\r\nsytost\r\ntabletka\r\ntabule\r\ntahoun\r\ntajemno\r\ntajfun\r\ntajga\r\ntajit\r\ntajnost\r\ntaktika\r\ntamhle\r\ntampon\r\ntancovat\r\ntanec\r\ntanker\r\ntapeta\r\ntavenina\r\ntazatel\r\ntechnika\r\ntehdy\r\ntekutina\r\ntelefon\r\ntemnota\r\ntendence\r\ntenista\r\ntenor\r\nteplota\r\ntepna\r\nteprve\r\nterapie\r\ntermoska\r\ntextil\r\nticho\r\ntiskopis\r\ntitulek\r\ntkadlec\r\ntkanina\r\ntlapka\r\ntleskat\r\ntlukot\r\ntlupa\r\ntmel\r\ntoaleta\r\ntopinka\r\ntopol\r\ntorzo\r\ntouha\r\ntoulec\r\ntradice\r\ntraktor\r\ntramp\r\ntrasa\r\ntraverza\r\ntrefit\r\ntrest\r\ntrezor\r\ntrhavina\r\ntrhlina\r\ntrochu\r\ntrojice\r\ntroska\r\ntrouba\r\ntrpce\r\ntrpitel\r\ntrpkost\r\ntrubec\r\ntruchlit\r\ntruhlice\r\ntrus\r\ntrvat\r\ntudy\r\ntuhnout\r\ntuhost\r\ntundra\r\nturista\r\nturnaj\r\ntuzemsko\r\ntvaroh\r\ntvorba\r\ntvrdost\r\ntvrz\r\ntygr\r\ntykev\r\nubohost\r\nuboze\r\nubrat\r\nubrousek\r\nubrus\r\nubytovna\r\nucho\r\nuctivost\r\nudivit\r\nuhradit\r\nujednat\r\nujistit\r\nujmout\r\nukazatel\r\nuklidnit\r\nuklonit\r\nukotvit\r\nukrojit\r\nulice\r\nulita\r\nulovit\r\numyvadlo\r\nunavit\r\nuniforma\r\nuniknout\r\nupadnout\r\nuplatnit\r\nuplynout\r\nupoutat\r\nupravit\r\nuran\r\nurazit\r\nusednout\r\nusilovat\r\nusmrtit\r\nusnadnit\r\nusnout\r\nusoudit\r\nustlat\r\nustrnout\r\nutahovat\r\nutkat\r\nutlumit\r\nutonout\r\nutopenec\r\nutrousit\r\nuvalit\r\nuvolnit\r\nuvozovka\r\nuzdravit\r\nuzel\r\nuzenina\r\nuzlina\r\nuznat\r\nvagon\r\nvalcha\r\nvaloun\r\nvana\r\nvandal\r\nvanilka\r\nvaran\r\nvarhany\r\nvarovat\r\nvcelku\r\nvchod\r\nvdova\r\nvedro\r\nvegetace\r\nvejce\r\nvelbloud\r\nveletrh\r\nvelitel\r\nvelmoc\r\nvelryba\r\nvenkov\r\nveranda\r\nverze\r\nveselka\r\nveskrze\r\nvesnice\r\nvespodu\r\nvesta\r\nveterina\r\nveverka\r\nvibrace\r\nvichr\r\nvideohra\r\nvidina\r\nvidle\r\nvila\r\nvinice\r\nviset\r\nvitalita\r\nvize\r\nvizitka\r\nvjezd\r\nvklad\r\nvkus\r\nvlajka\r\nvlak\r\nvlasec\r\nvlevo\r\nvlhkost\r\nvliv\r\nvlnovka\r\nvloupat\r\nvnucovat\r\nvnuk\r\nvoda\r\nvodivost\r\nvodoznak\r\nvodstvo\r\nvojensky\r\nvojna\r\nvojsko\r\nvolant\r\nvolba\r\nvolit\r\nvolno\r\nvoskovka\r\nvozidlo\r\nvozovna\r\nvpravo\r\nvrabec\r\nvracet\r\nvrah\r\nvrata\r\nvrba\r\nvrcholek\r\nvrhat\r\nvrstva\r\nvrtule\r\nvsadit\r\nvstoupit\r\nvstup\r\nvtip\r\nvybavit\r\nvybrat\r\nvychovat\r\nvydat\r\nvydra\r\nvyfotit\r\nvyhledat\r\nvyhnout\r\nvyhodit\r\nvyhradit\r\nvyhubit\r\nvyjasnit\r\nvyjet\r\nvyjmout\r\nvyklopit\r\nvykonat\r\nvylekat\r\nvymazat\r\nvymezit\r\nvymizet\r\nvymyslet\r\nvynechat\r\nvynikat\r\nvynutit\r\nvypadat\r\nvyplatit\r\nvypravit\r\nvypustit\r\nvyrazit\r\nvyrovnat\r\nvyrvat\r\nvyslovit\r\nvysoko\r\nvystavit\r\nvysunout\r\nvysypat\r\nvytasit\r\nvytesat\r\nvytratit\r\nvyvinout\r\nvyvolat\r\nvyvrhel\r\nvyzdobit\r\nvyznat\r\nvzadu\r\nvzbudit\r\nvzchopit\r\nvzdor\r\nvzduch\r\nvzdychat\r\nvzestup\r\nvzhledem\r\nvzkaz\r\nvzlykat\r\nvznik\r\nvzorek\r\nvzpoura\r\nvztah\r\nvztek\r\nxylofon\r\nzabrat\r\nzabydlet\r\nzachovat\r\nzadarmo\r\nzadusit\r\nzafoukat\r\nzahltit\r\nzahodit\r\nzahrada\r\nzahynout\r\nzajatec\r\nzajet\r\nzajistit\r\nzaklepat\r\nzakoupit\r\nzalepit\r\nzamezit\r\nzamotat\r\nzamyslet\r\nzanechat\r\nzanikat\r\nzaplatit\r\nzapojit\r\nzapsat\r\nzarazit\r\nzastavit\r\nzasunout\r\nzatajit\r\nzatemnit\r\nzatknout\r\nzaujmout\r\nzavalit\r\nzavelet\r\nzavinit\r\nzavolat\r\nzavrtat\r\nzazvonit\r\nzbavit\r\nzbrusu\r\nzbudovat\r\nzbytek\r\nzdaleka\r\nzdarma\r\nzdatnost\r\nzdivo\r\nzdobit\r\nzdroj\r\nzdvih\r\nzdymadlo\r\nzelenina\r\nzeman\r\nzemina\r\nzeptat\r\nzezadu\r\nzezdola\r\nzhatit\r\nzhltnout\r\nzhluboka\r\nzhotovit\r\nzhruba\r\nzima\r\nzimnice\r\nzjemnit\r\nzklamat\r\nzkoumat\r\nzkratka\r\nzkumavka\r\nzlato\r\nzlehka\r\nzloba\r\nzlom\r\nzlost\r\nzlozvyk\r\nzmapovat\r\nzmar\r\nzmatek\r\nzmije\r\nzmizet\r\nzmocnit\r\nzmodrat\r\nzmrzlina\r\nzmutovat\r\nznak\r\nznalost\r\nznamenat\r\nznovu\r\nzobrazit\r\nzotavit\r\nzoubek\r\nzoufale\r\nzplodit\r\nzpomalit\r\nzprava\r\nzprostit\r\nzprudka\r\nzprvu\r\nzrada\r\nzranit\r\nzrcadlo\r\nzrnitost\r\nzrno\r\nzrovna\r\nzrychlit\r\nzrzavost\r\nzticha\r\nztratit\r\nzubovina\r\nzubr\r\nzvednout\r\nzvenku\r\nzvesela\r\nzvon\r\nzvrat\r\nzvukovod\r\nzvyk`.split('\\n');\r\n", "export const wordlist = `abandon\r\nability\r\nable\r\nabout\r\nabove\r\nabsent\r\nabsorb\r\nabstract\r\nabsurd\r\nabuse\r\naccess\r\naccident\r\naccount\r\naccuse\r\nachieve\r\nacid\r\nacoustic\r\nacquire\r\nacross\r\nact\r\naction\r\nactor\r\nactress\r\nactual\r\nadapt\r\nadd\r\naddict\r\naddress\r\nadjust\r\nadmit\r\nadult\r\nadvance\r\nadvice\r\naerobic\r\naffair\r\nafford\r\nafraid\r\nagain\r\nage\r\nagent\r\nagree\r\nahead\r\naim\r\nair\r\nairport\r\naisle\r\nalarm\r\nalbum\r\nalcohol\r\nalert\r\nalien\r\nall\r\nalley\r\nallow\r\nalmost\r\nalone\r\nalpha\r\nalready\r\nalso\r\nalter\r\nalways\r\namateur\r\namazing\r\namong\r\namount\r\namused\r\nanalyst\r\nanchor\r\nancient\r\nanger\r\nangle\r\nangry\r\nanimal\r\nankle\r\nannounce\r\nannual\r\nanother\r\nanswer\r\nantenna\r\nantique\r\nanxiety\r\nany\r\napart\r\napology\r\nappear\r\napple\r\napprove\r\napril\r\narch\r\narctic\r\narea\r\narena\r\nargue\r\narm\r\narmed\r\narmor\r\narmy\r\naround\r\narrange\r\narrest\r\narrive\r\narrow\r\nart\r\nartefact\r\nartist\r\nartwork\r\nask\r\naspect\r\nassault\r\nasset\r\nassist\r\nassume\r\nasthma\r\nathlete\r\natom\r\nattack\r\nattend\r\nattitude\r\nattract\r\nauction\r\naudit\r\naugust\r\naunt\r\nauthor\r\nauto\r\nautumn\r\naverage\r\navocado\r\navoid\r\nawake\r\naware\r\naway\r\nawesome\r\nawful\r\nawkward\r\naxis\r\nbaby\r\nbachelor\r\nbacon\r\nbadge\r\nbag\r\nbalance\r\nbalcony\r\nball\r\nbamboo\r\nbanana\r\nbanner\r\nbar\r\nbarely\r\nbargain\r\nbarrel\r\nbase\r\nbasic\r\nbasket\r\nbattle\r\nbeach\r\nbean\r\nbeauty\r\nbecause\r\nbecome\r\nbeef\r\nbefore\r\nbegin\r\nbehave\r\nbehind\r\nbelieve\r\nbelow\r\nbelt\r\nbench\r\nbenefit\r\nbest\r\nbetray\r\nbetter\r\nbetween\r\nbeyond\r\nbicycle\r\nbid\r\nbike\r\nbind\r\nbiology\r\nbird\r\nbirth\r\nbitter\r\nblack\r\nblade\r\nblame\r\nblanket\r\nblast\r\nbleak\r\nbless\r\nblind\r\nblood\r\nblossom\r\nblouse\r\nblue\r\nblur\r\nblush\r\nboard\r\nboat\r\nbody\r\nboil\r\nbomb\r\nbone\r\nbonus\r\nbook\r\nboost\r\nborder\r\nboring\r\nborrow\r\nboss\r\nbottom\r\nbounce\r\nbox\r\nboy\r\nbracket\r\nbrain\r\nbrand\r\nbrass\r\nbrave\r\nbread\r\nbreeze\r\nbrick\r\nbridge\r\nbrief\r\nbright\r\nbring\r\nbrisk\r\nbroccoli\r\nbroken\r\nbronze\r\nbroom\r\nbrother\r\nbrown\r\nbrush\r\nbubble\r\nbuddy\r\nbudget\r\nbuffalo\r\nbuild\r\nbulb\r\nbulk\r\nbullet\r\nbundle\r\nbunker\r\nburden\r\nburger\r\nburst\r\nbus\r\nbusiness\r\nbusy\r\nbutter\r\nbuyer\r\nbuzz\r\ncabbage\r\ncabin\r\ncable\r\ncactus\r\ncage\r\ncake\r\ncall\r\ncalm\r\ncamera\r\ncamp\r\ncan\r\ncanal\r\ncancel\r\ncandy\r\ncannon\r\ncanoe\r\ncanvas\r\ncanyon\r\ncapable\r\ncapital\r\ncaptain\r\ncar\r\ncarbon\r\ncard\r\ncargo\r\ncarpet\r\ncarry\r\ncart\r\ncase\r\ncash\r\ncasino\r\ncastle\r\ncasual\r\ncat\r\ncatalog\r\ncatch\r\ncategory\r\ncattle\r\ncaught\r\ncause\r\ncaution\r\ncave\r\nceiling\r\ncelery\r\ncement\r\ncensus\r\ncentury\r\ncereal\r\ncertain\r\nchair\r\nchalk\r\nchampion\r\nchange\r\nchaos\r\nchapter\r\ncharge\r\nchase\r\nchat\r\ncheap\r\ncheck\r\ncheese\r\nchef\r\ncherry\r\nchest\r\nchicken\r\nchief\r\nchild\r\nchimney\r\nchoice\r\nchoose\r\nchronic\r\nchuckle\r\nchunk\r\nchurn\r\ncigar\r\ncinnamon\r\ncircle\r\ncitizen\r\ncity\r\ncivil\r\nclaim\r\nclap\r\nclarify\r\nclaw\r\nclay\r\nclean\r\nclerk\r\nclever\r\nclick\r\nclient\r\ncliff\r\nclimb\r\nclinic\r\nclip\r\nclock\r\nclog\r\nclose\r\ncloth\r\ncloud\r\nclown\r\nclub\r\nclump\r\ncluster\r\nclutch\r\ncoach\r\ncoast\r\ncoconut\r\ncode\r\ncoffee\r\ncoil\r\ncoin\r\ncollect\r\ncolor\r\ncolumn\r\ncombine\r\ncome\r\ncomfort\r\ncomic\r\ncommon\r\ncompany\r\nconcert\r\nconduct\r\nconfirm\r\ncongress\r\nconnect\r\nconsider\r\ncontrol\r\nconvince\r\ncook\r\ncool\r\ncopper\r\ncopy\r\ncoral\r\ncore\r\ncorn\r\ncorrect\r\ncost\r\ncotton\r\ncouch\r\ncountry\r\ncouple\r\ncourse\r\ncousin\r\ncover\r\ncoyote\r\ncrack\r\ncradle\r\ncraft\r\ncram\r\ncrane\r\ncrash\r\ncrater\r\ncrawl\r\ncrazy\r\ncream\r\ncredit\r\ncreek\r\ncrew\r\ncricket\r\ncrime\r\ncrisp\r\ncritic\r\ncrop\r\ncross\r\ncrouch\r\ncrowd\r\ncrucial\r\ncruel\r\ncruise\r\ncrumble\r\ncrunch\r\ncrush\r\ncry\r\ncrystal\r\ncube\r\nculture\r\ncup\r\ncupboard\r\ncurious\r\ncurrent\r\ncurtain\r\ncurve\r\ncushion\r\ncustom\r\ncute\r\ncycle\r\ndad\r\ndamage\r\ndamp\r\ndance\r\ndanger\r\ndaring\r\ndash\r\ndaughter\r\ndawn\r\nday\r\ndeal\r\ndebate\r\ndebris\r\ndecade\r\ndecember\r\ndecide\r\ndecline\r\ndecorate\r\ndecrease\r\ndeer\r\ndefense\r\ndefine\r\ndefy\r\ndegree\r\ndelay\r\ndeliver\r\ndemand\r\ndemise\r\ndenial\r\ndentist\r\ndeny\r\ndepart\r\ndepend\r\ndeposit\r\ndepth\r\ndeputy\r\nderive\r\ndescribe\r\ndesert\r\ndesign\r\ndesk\r\ndespair\r\ndestroy\r\ndetail\r\ndetect\r\ndevelop\r\ndevice\r\ndevote\r\ndiagram\r\ndial\r\ndiamond\r\ndiary\r\ndice\r\ndiesel\r\ndiet\r\ndiffer\r\ndigital\r\ndignity\r\ndilemma\r\ndinner\r\ndinosaur\r\ndirect\r\ndirt\r\ndisagree\r\ndiscover\r\ndisease\r\ndish\r\ndismiss\r\ndisorder\r\ndisplay\r\ndistance\r\ndivert\r\ndivide\r\ndivorce\r\ndizzy\r\ndoctor\r\ndocument\r\ndog\r\ndoll\r\ndolphin\r\ndomain\r\ndonate\r\ndonkey\r\ndonor\r\ndoor\r\ndose\r\ndouble\r\ndove\r\ndraft\r\ndragon\r\ndrama\r\ndrastic\r\ndraw\r\ndream\r\ndress\r\ndrift\r\ndrill\r\ndrink\r\ndrip\r\ndrive\r\ndrop\r\ndrum\r\ndry\r\nduck\r\ndumb\r\ndune\r\nduring\r\ndust\r\ndutch\r\nduty\r\ndwarf\r\ndynamic\r\neager\r\neagle\r\nearly\r\nearn\r\nearth\r\neasily\r\neast\r\neasy\r\necho\r\necology\r\neconomy\r\nedge\r\nedit\r\neducate\r\neffort\r\negg\r\neight\r\neither\r\nelbow\r\nelder\r\nelectric\r\nelegant\r\nelement\r\nelephant\r\nelevator\r\nelite\r\nelse\r\nembark\r\nembody\r\nembrace\r\nemerge\r\nemotion\r\nemploy\r\nempower\r\nempty\r\nenable\r\nenact\r\nend\r\nendless\r\nendorse\r\nenemy\r\nenergy\r\nenforce\r\nengage\r\nengine\r\nenhance\r\nenjoy\r\nenlist\r\nenough\r\nenrich\r\nenroll\r\nensure\r\nenter\r\nentire\r\nentry\r\nenvelope\r\nepisode\r\nequal\r\nequip\r\nera\r\nerase\r\nerode\r\nerosion\r\nerror\r\nerupt\r\nescape\r\nessay\r\nessence\r\nestate\r\neternal\r\nethics\r\nevidence\r\nevil\r\nevoke\r\nevolve\r\nexact\r\nexample\r\nexcess\r\nexchange\r\nexcite\r\nexclude\r\nexcuse\r\nexecute\r\nexercise\r\nexhaust\r\nexhibit\r\nexile\r\nexist\r\nexit\r\nexotic\r\nexpand\r\nexpect\r\nexpire\r\nexplain\r\nexpose\r\nexpress\r\nextend\r\nextra\r\neye\r\neyebrow\r\nfabric\r\nface\r\nfaculty\r\nfade\r\nfaint\r\nfaith\r\nfall\r\nfalse\r\nfame\r\nfamily\r\nfamous\r\nfan\r\nfancy\r\nfantasy\r\nfarm\r\nfashion\r\nfat\r\nfatal\r\nfather\r\nfatigue\r\nfault\r\nfavorite\r\nfeature\r\nfebruary\r\nfederal\r\nfee\r\nfeed\r\nfeel\r\nfemale\r\nfence\r\nfestival\r\nfetch\r\nfever\r\nfew\r\nfiber\r\nfiction\r\nfield\r\nfigure\r\nfile\r\nfilm\r\nfilter\r\nfinal\r\nfind\r\nfine\r\nfinger\r\nfinish\r\nfire\r\nfirm\r\nfirst\r\nfiscal\r\nfish\r\nfit\r\nfitness\r\nfix\r\nflag\r\nflame\r\nflash\r\nflat\r\nflavor\r\nflee\r\nflight\r\nflip\r\nfloat\r\nflock\r\nfloor\r\nflower\r\nfluid\r\nflush\r\nfly\r\nfoam\r\nfocus\r\nfog\r\nfoil\r\nfold\r\nfollow\r\nfood\r\nfoot\r\nforce\r\nforest\r\nforget\r\nfork\r\nfortune\r\nforum\r\nforward\r\nfossil\r\nfoster\r\nfound\r\nfox\r\nfragile\r\nframe\r\nfrequent\r\nfresh\r\nfriend\r\nfringe\r\nfrog\r\nfront\r\nfrost\r\nfrown\r\nfrozen\r\nfruit\r\nfuel\r\nfun\r\nfunny\r\nfurnace\r\nfury\r\nfuture\r\ngadget\r\ngain\r\ngalaxy\r\ngallery\r\ngame\r\ngap\r\ngarage\r\ngarbage\r\ngarden\r\ngarlic\r\ngarment\r\ngas\r\ngasp\r\ngate\r\ngather\r\ngauge\r\ngaze\r\ngeneral\r\ngenius\r\ngenre\r\ngentle\r\ngenuine\r\ngesture\r\nghost\r\ngiant\r\ngift\r\ngiggle\r\nginger\r\ngiraffe\r\ngirl\r\ngive\r\nglad\r\nglance\r\nglare\r\nglass\r\nglide\r\nglimpse\r\nglobe\r\ngloom\r\nglory\r\nglove\r\nglow\r\nglue\r\ngoat\r\ngoddess\r\ngold\r\ngood\r\ngoose\r\ngorilla\r\ngospel\r\ngossip\r\ngovern\r\ngown\r\ngrab\r\ngrace\r\ngrain\r\ngrant\r\ngrape\r\ngrass\r\ngravity\r\ngreat\r\ngreen\r\ngrid\r\ngrief\r\ngrit\r\ngrocery\r\ngroup\r\ngrow\r\ngrunt\r\nguard\r\nguess\r\nguide\r\nguilt\r\nguitar\r\ngun\r\ngym\r\nhabit\r\nhair\r\nhalf\r\nhammer\r\nhamster\r\nhand\r\nhappy\r\nharbor\r\nhard\r\nharsh\r\nharvest\r\nhat\r\nhave\r\nhawk\r\nhazard\r\nhead\r\nhealth\r\nheart\r\nheavy\r\nhedgehog\r\nheight\r\nhello\r\nhelmet\r\nhelp\r\nhen\r\nhero\r\nhidden\r\nhigh\r\nhill\r\nhint\r\nhip\r\nhire\r\nhistory\r\nhobby\r\nhockey\r\nhold\r\nhole\r\nholiday\r\nhollow\r\nhome\r\nhoney\r\nhood\r\nhope\r\nhorn\r\nhorror\r\nhorse\r\nhospital\r\nhost\r\nhotel\r\nhour\r\nhover\r\nhub\r\nhuge\r\nhuman\r\nhumble\r\nhumor\r\nhundred\r\nhungry\r\nhunt\r\nhurdle\r\nhurry\r\nhurt\r\nhusband\r\nhybrid\r\nice\r\nicon\r\nidea\r\nidentify\r\nidle\r\nignore\r\nill\r\nillegal\r\nillness\r\nimage\r\nimitate\r\nimmense\r\nimmune\r\nimpact\r\nimpose\r\nimprove\r\nimpulse\r\ninch\r\ninclude\r\nincome\r\nincrease\r\nindex\r\nindicate\r\nindoor\r\nindustry\r\ninfant\r\ninflict\r\ninform\r\ninhale\r\ninherit\r\ninitial\r\ninject\r\ninjury\r\ninmate\r\ninner\r\ninnocent\r\ninput\r\ninquiry\r\ninsane\r\ninsect\r\ninside\r\ninspire\r\ninstall\r\nintact\r\ninterest\r\ninto\r\ninvest\r\ninvite\r\ninvolve\r\niron\r\nisland\r\nisolate\r\nissue\r\nitem\r\nivory\r\njacket\r\njaguar\r\njar\r\njazz\r\njealous\r\njeans\r\njelly\r\njewel\r\njob\r\njoin\r\njoke\r\njourney\r\njoy\r\njudge\r\njuice\r\njump\r\njungle\r\njunior\r\njunk\r\njust\r\nkangaroo\r\nkeen\r\nkeep\r\nketchup\r\nkey\r\nkick\r\nkid\r\nkidney\r\nkind\r\nkingdom\r\nkiss\r\nkit\r\nkitchen\r\nkite\r\nkitten\r\nkiwi\r\nknee\r\nknife\r\nknock\r\nknow\r\nlab\r\nlabel\r\nlabor\r\nladder\r\nlady\r\nlake\r\nlamp\r\nlanguage\r\nlaptop\r\nlarge\r\nlater\r\nlatin\r\nlaugh\r\nlaundry\r\nlava\r\nlaw\r\nlawn\r\nlawsuit\r\nlayer\r\nlazy\r\nleader\r\nleaf\r\nlearn\r\nleave\r\nlecture\r\nleft\r\nleg\r\nlegal\r\nlegend\r\nleisure\r\nlemon\r\nlend\r\nlength\r\nlens\r\nleopard\r\nlesson\r\nletter\r\nlevel\r\nliar\r\nliberty\r\nlibrary\r\nlicense\r\nlife\r\nlift\r\nlight\r\nlike\r\nlimb\r\nlimit\r\nlink\r\nlion\r\nliquid\r\nlist\r\nlittle\r\nlive\r\nlizard\r\nload\r\nloan\r\nlobster\r\nlocal\r\nlock\r\nlogic\r\nlonely\r\nlong\r\nloop\r\nlottery\r\nloud\r\nlounge\r\nlove\r\nloyal\r\nlucky\r\nluggage\r\nlumber\r\nlunar\r\nlunch\r\nluxury\r\nlyrics\r\nmachine\r\nmad\r\nmagic\r\nmagnet\r\nmaid\r\nmail\r\nmain\r\nmajor\r\nmake\r\nmammal\r\nman\r\nmanage\r\nmandate\r\nmango\r\nmansion\r\nmanual\r\nmaple\r\nmarble\r\nmarch\r\nmargin\r\nmarine\r\nmarket\r\nmarriage\r\nmask\r\nmass\r\nmaster\r\nmatch\r\nmaterial\r\nmath\r\nmatrix\r\nmatter\r\nmaximum\r\nmaze\r\nmeadow\r\nmean\r\nmeasure\r\nmeat\r\nmechanic\r\nmedal\r\nmedia\r\nmelody\r\nmelt\r\nmember\r\nmemory\r\nmention\r\nmenu\r\nmercy\r\nmerge\r\nmerit\r\nmerry\r\nmesh\r\nmessage\r\nmetal\r\nmethod\r\nmiddle\r\nmidnight\r\nmilk\r\nmillion\r\nmimic\r\nmind\r\nminimum\r\nminor\r\nminute\r\nmiracle\r\nmirror\r\nmisery\r\nmiss\r\nmistake\r\nmix\r\nmixed\r\nmixture\r\nmobile\r\nmodel\r\nmodify\r\nmom\r\nmoment\r\nmonitor\r\nmonkey\r\nmonster\r\nmonth\r\nmoon\r\nmoral\r\nmore\r\nmorning\r\nmosquito\r\nmother\r\nmotion\r\nmotor\r\nmountain\r\nmouse\r\nmove\r\nmovie\r\nmuch\r\nmuffin\r\nmule\r\nmultiply\r\nmuscle\r\nmuseum\r\nmushroom\r\nmusic\r\nmust\r\nmutual\r\nmyself\r\nmystery\r\nmyth\r\nnaive\r\nname\r\nnapkin\r\nnarrow\r\nnasty\r\nnation\r\nnature\r\nnear\r\nneck\r\nneed\r\nnegative\r\nneglect\r\nneither\r\nnephew\r\nnerve\r\nnest\r\nnet\r\nnetwork\r\nneutral\r\nnever\r\nnews\r\nnext\r\nnice\r\nnight\r\nnoble\r\nnoise\r\nnominee\r\nnoodle\r\nnormal\r\nnorth\r\nnose\r\nnotable\r\nnote\r\nnothing\r\nnotice\r\nnovel\r\nnow\r\nnuclear\r\nnumber\r\nnurse\r\nnut\r\noak\r\nobey\r\nobject\r\noblige\r\nobscure\r\nobserve\r\nobtain\r\nobvious\r\noccur\r\nocean\r\noctober\r\nodor\r\noff\r\noffer\r\noffice\r\noften\r\noil\r\nokay\r\nold\r\nolive\r\nolympic\r\nomit\r\nonce\r\none\r\nonion\r\nonline\r\nonly\r\nopen\r\nopera\r\nopinion\r\noppose\r\noption\r\norange\r\norbit\r\norchard\r\norder\r\nordinary\r\norgan\r\norient\r\noriginal\r\norphan\r\nostrich\r\nother\r\noutdoor\r\nouter\r\noutput\r\noutside\r\noval\r\noven\r\nover\r\nown\r\nowner\r\noxygen\r\noyster\r\nozone\r\npact\r\npaddle\r\npage\r\npair\r\npalace\r\npalm\r\npanda\r\npanel\r\npanic\r\npanther\r\npaper\r\nparade\r\nparent\r\npark\r\nparrot\r\nparty\r\npass\r\npatch\r\npath\r\npatient\r\npatrol\r\npattern\r\npause\r\npave\r\npayment\r\npeace\r\npeanut\r\npear\r\npeasant\r\npelican\r\npen\r\npenalty\r\npencil\r\npeople\r\npepper\r\nperfect\r\npermit\r\nperson\r\npet\r\nphone\r\nphoto\r\nphrase\r\nphysical\r\npiano\r\npicnic\r\npicture\r\npiece\r\npig\r\npigeon\r\npill\r\npilot\r\npink\r\npioneer\r\npipe\r\npistol\r\npitch\r\npizza\r\nplace\r\nplanet\r\nplastic\r\nplate\r\nplay\r\nplease\r\npledge\r\npluck\r\nplug\r\nplunge\r\npoem\r\npoet\r\npoint\r\npolar\r\npole\r\npolice\r\npond\r\npony\r\npool\r\npopular\r\nportion\r\nposition\r\npossible\r\npost\r\npotato\r\npottery\r\npoverty\r\npowder\r\npower\r\npractice\r\npraise\r\npredict\r\nprefer\r\nprepare\r\npresent\r\npretty\r\nprevent\r\nprice\r\npride\r\nprimary\r\nprint\r\npriority\r\nprison\r\nprivate\r\nprize\r\nproblem\r\nprocess\r\nproduce\r\nprofit\r\nprogram\r\nproject\r\npromote\r\nproof\r\nproperty\r\nprosper\r\nprotect\r\nproud\r\nprovide\r\npublic\r\npudding\r\npull\r\npulp\r\npulse\r\npumpkin\r\npunch\r\npupil\r\npuppy\r\npurchase\r\npurity\r\npurpose\r\npurse\r\npush\r\nput\r\npuzzle\r\npyramid\r\nquality\r\nquantum\r\nquarter\r\nquestion\r\nquick\r\nquit\r\nquiz\r\nquote\r\nrabbit\r\nraccoon\r\nrace\r\nrack\r\nradar\r\nradio\r\nrail\r\nrain\r\nraise\r\nrally\r\nramp\r\nranch\r\nrandom\r\nrange\r\nrapid\r\nrare\r\nrate\r\nrather\r\nraven\r\nraw\r\nrazor\r\nready\r\nreal\r\nreason\r\nrebel\r\nrebuild\r\nrecall\r\nreceive\r\nrecipe\r\nrecord\r\nrecycle\r\nreduce\r\nreflect\r\nreform\r\nrefuse\r\nregion\r\nregret\r\nregular\r\nreject\r\nrelax\r\nrelease\r\nrelief\r\nrely\r\nremain\r\nremember\r\nremind\r\nremove\r\nrender\r\nrenew\r\nrent\r\nreopen\r\nrepair\r\nrepeat\r\nreplace\r\nreport\r\nrequire\r\nrescue\r\nresemble\r\nresist\r\nresource\r\nresponse\r\nresult\r\nretire\r\nretreat\r\nreturn\r\nreunion\r\nreveal\r\nreview\r\nreward\r\nrhythm\r\nrib\r\nribbon\r\nrice\r\nrich\r\nride\r\nridge\r\nrifle\r\nright\r\nrigid\r\nring\r\nriot\r\nripple\r\nrisk\r\nritual\r\nrival\r\nriver\r\nroad\r\nroast\r\nrobot\r\nrobust\r\nrocket\r\nromance\r\nroof\r\nrookie\r\nroom\r\nrose\r\nrotate\r\nrough\r\nround\r\nroute\r\nroyal\r\nrubber\r\nrude\r\nrug\r\nrule\r\nrun\r\nrunway\r\nrural\r\nsad\r\nsaddle\r\nsadness\r\nsafe\r\nsail\r\nsalad\r\nsalmon\r\nsalon\r\nsalt\r\nsalute\r\nsame\r\nsample\r\nsand\r\nsatisfy\r\nsatoshi\r\nsauce\r\nsausage\r\nsave\r\nsay\r\nscale\r\nscan\r\nscare\r\nscatter\r\nscene\r\nscheme\r\nschool\r\nscience\r\nscissors\r\nscorpion\r\nscout\r\nscrap\r\nscreen\r\nscript\r\nscrub\r\nsea\r\nsearch\r\nseason\r\nseat\r\nsecond\r\nsecret\r\nsection\r\nsecurity\r\nseed\r\nseek\r\nsegment\r\nselect\r\nsell\r\nseminar\r\nsenior\r\nsense\r\nsentence\r\nseries\r\nservice\r\nsession\r\nsettle\r\nsetup\r\nseven\r\nshadow\r\nshaft\r\nshallow\r\nshare\r\nshed\r\nshell\r\nsheriff\r\nshield\r\nshift\r\nshine\r\nship\r\nshiver\r\nshock\r\nshoe\r\nshoot\r\nshop\r\nshort\r\nshoulder\r\nshove\r\nshrimp\r\nshrug\r\nshuffle\r\nshy\r\nsibling\r\nsick\r\nside\r\nsiege\r\nsight\r\nsign\r\nsilent\r\nsilk\r\nsilly\r\nsilver\r\nsimilar\r\nsimple\r\nsince\r\nsing\r\nsiren\r\nsister\r\nsituate\r\nsix\r\nsize\r\nskate\r\nsketch\r\nski\r\nskill\r\nskin\r\nskirt\r\nskull\r\nslab\r\nslam\r\nsleep\r\nslender\r\nslice\r\nslide\r\nslight\r\nslim\r\nslogan\r\nslot\r\nslow\r\nslush\r\nsmall\r\nsmart\r\nsmile\r\nsmoke\r\nsmooth\r\nsnack\r\nsnake\r\nsnap\r\nsniff\r\nsnow\r\nsoap\r\nsoccer\r\nsocial\r\nsock\r\nsoda\r\nsoft\r\nsolar\r\nsoldier\r\nsolid\r\nsolution\r\nsolve\r\nsomeone\r\nsong\r\nsoon\r\nsorry\r\nsort\r\nsoul\r\nsound\r\nsoup\r\nsource\r\nsouth\r\nspace\r\nspare\r\nspatial\r\nspawn\r\nspeak\r\nspecial\r\nspeed\r\nspell\r\nspend\r\nsphere\r\nspice\r\nspider\r\nspike\r\nspin\r\nspirit\r\nsplit\r\nspoil\r\nsponsor\r\nspoon\r\nsport\r\nspot\r\nspray\r\nspread\r\nspring\r\nspy\r\nsquare\r\nsqueeze\r\nsquirrel\r\nstable\r\nstadium\r\nstaff\r\nstage\r\nstairs\r\nstamp\r\nstand\r\nstart\r\nstate\r\nstay\r\nsteak\r\nsteel\r\nstem\r\nstep\r\nstereo\r\nstick\r\nstill\r\nsting\r\nstock\r\nstomach\r\nstone\r\nstool\r\nstory\r\nstove\r\nstrategy\r\nstreet\r\nstrike\r\nstrong\r\nstruggle\r\nstudent\r\nstuff\r\nstumble\r\nstyle\r\nsubject\r\nsubmit\r\nsubway\r\nsuccess\r\nsuch\r\nsudden\r\nsuffer\r\nsugar\r\nsuggest\r\nsuit\r\nsummer\r\nsun\r\nsunny\r\nsunset\r\nsuper\r\nsupply\r\nsupreme\r\nsure\r\nsurface\r\nsurge\r\nsurprise\r\nsurround\r\nsurvey\r\nsuspect\r\nsustain\r\nswallow\r\nswamp\r\nswap\r\nswarm\r\nswear\r\nsweet\r\nswift\r\nswim\r\nswing\r\nswitch\r\nsword\r\nsymbol\r\nsymptom\r\nsyrup\r\nsystem\r\ntable\r\ntackle\r\ntag\r\ntail\r\ntalent\r\ntalk\r\ntank\r\ntape\r\ntarget\r\ntask\r\ntaste\r\ntattoo\r\ntaxi\r\nteach\r\nteam\r\ntell\r\nten\r\ntenant\r\ntennis\r\ntent\r\nterm\r\ntest\r\ntext\r\nthank\r\nthat\r\ntheme\r\nthen\r\ntheory\r\nthere\r\nthey\r\nthing\r\nthis\r\nthought\r\nthree\r\nthrive\r\nthrow\r\nthumb\r\nthunder\r\nticket\r\ntide\r\ntiger\r\ntilt\r\ntimber\r\ntime\r\ntiny\r\ntip\r\ntired\r\ntissue\r\ntitle\r\ntoast\r\ntobacco\r\ntoday\r\ntoddler\r\ntoe\r\ntogether\r\ntoilet\r\ntoken\r\ntomato\r\ntomorrow\r\ntone\r\ntongue\r\ntonight\r\ntool\r\ntooth\r\ntop\r\ntopic\r\ntopple\r\ntorch\r\ntornado\r\ntortoise\r\ntoss\r\ntotal\r\ntourist\r\ntoward\r\ntower\r\ntown\r\ntoy\r\ntrack\r\ntrade\r\ntraffic\r\ntragic\r\ntrain\r\ntransfer\r\ntrap\r\ntrash\r\ntravel\r\ntray\r\ntreat\r\ntree\r\ntrend\r\ntrial\r\ntribe\r\ntrick\r\ntrigger\r\ntrim\r\ntrip\r\ntrophy\r\ntrouble\r\ntruck\r\ntrue\r\ntruly\r\ntrumpet\r\ntrust\r\ntruth\r\ntry\r\ntube\r\ntuition\r\ntumble\r\ntuna\r\ntunnel\r\nturkey\r\nturn\r\nturtle\r\ntwelve\r\ntwenty\r\ntwice\r\ntwin\r\ntwist\r\ntwo\r\ntype\r\ntypical\r\nugly\r\numbrella\r\nunable\r\nunaware\r\nuncle\r\nuncover\r\nunder\r\nundo\r\nunfair\r\nunfold\r\nunhappy\r\nuniform\r\nunique\r\nunit\r\nuniverse\r\nunknown\r\nunlock\r\nuntil\r\nunusual\r\nunveil\r\nupdate\r\nupgrade\r\nuphold\r\nupon\r\nupper\r\nupset\r\nurban\r\nurge\r\nusage\r\nuse\r\nused\r\nuseful\r\nuseless\r\nusual\r\nutility\r\nvacant\r\nvacuum\r\nvague\r\nvalid\r\nvalley\r\nvalve\r\nvan\r\nvanish\r\nvapor\r\nvarious\r\nvast\r\nvault\r\nvehicle\r\nvelvet\r\nvendor\r\nventure\r\nvenue\r\nverb\r\nverify\r\nversion\r\nvery\r\nvessel\r\nveteran\r\nviable\r\nvibrant\r\nvicious\r\nvictory\r\nvideo\r\nview\r\nvillage\r\nvintage\r\nviolin\r\nvirtual\r\nvirus\r\nvisa\r\nvisit\r\nvisual\r\nvital\r\nvivid\r\nvocal\r\nvoice\r\nvoid\r\nvolcano\r\nvolume\r\nvote\r\nvoyage\r\nwage\r\nwagon\r\nwait\r\nwalk\r\nwall\r\nwalnut\r\nwant\r\nwarfare\r\nwarm\r\nwarrior\r\nwash\r\nwasp\r\nwaste\r\nwater\r\nwave\r\nway\r\nwealth\r\nweapon\r\nwear\r\nweasel\r\nweather\r\nweb\r\nwedding\r\nweekend\r\nweird\r\nwelcome\r\nwest\r\nwet\r\nwhale\r\nwhat\r\nwheat\r\nwheel\r\nwhen\r\nwhere\r\nwhip\r\nwhisper\r\nwide\r\nwidth\r\nwife\r\nwild\r\nwill\r\nwin\r\nwindow\r\nwine\r\nwing\r\nwink\r\nwinner\r\nwinter\r\nwire\r\nwisdom\r\nwise\r\nwish\r\nwitness\r\nwolf\r\nwoman\r\nwonder\r\nwood\r\nwool\r\nword\r\nwork\r\nworld\r\nworry\r\nworth\r\nwrap\r\nwreck\r\nwrestle\r\nwrist\r\nwrite\r\nwrong\r\nyard\r\nyear\r\nyellow\r\nyou\r\nyoung\r\nyouth\r\nzebra\r\nzero\r\nzone\r\nzoo`.split('\\n');\r\n", "export const wordlist = `abaisser\r\nabandon\r\nabdiquer\r\nabeille\r\nabolir\r\naborder\r\naboutir\r\naboyer\r\nabrasif\r\nabreuver\r\nabriter\r\nabroger\r\nabrupt\r\nabsence\r\nabsolu\r\nabsurde\r\nabusif\r\nabyssal\r\nacadémie\r\nacajou\r\nacarien\r\naccabler\r\naccepter\r\nacclamer\r\naccolade\r\naccroche\r\naccuser\r\nacerbe\r\nachat\r\nacheter\r\naciduler\r\nacier\r\nacompte\r\nacquérir\r\nacronyme\r\nacteur\r\nactif\r\nactuel\r\nadepte\r\nadéquat\r\nadhésif\r\nadjectif\r\nadjuger\r\nadmettre\r\nadmirer\r\nadopter\r\nadorer\r\nadoucir\r\nadresse\r\nadroit\r\nadulte\r\nadverbe\r\naérer\r\naéronef\r\naffaire\r\naffecter\r\naffiche\r\naffreux\r\naffubler\r\nagacer\r\nagencer\r\nagile\r\nagiter\r\nagrafer\r\nagréable\r\nagrume\r\naider\r\naiguille\r\nailier\r\naimable\r\naisance\r\najouter\r\najuster\r\nalarmer\r\nalchimie\r\nalerte\r\nalgèbre\r\nalgue\r\naliéner\r\naliment\r\nalléger\r\nalliage\r\nallouer\r\nallumer\r\nalourdir\r\nalpaga\r\naltesse\r\nalvéole\r\namateur\r\nambigu\r\nambre\r\naménager\r\namertume\r\namidon\r\namiral\r\namorcer\r\namour\r\namovible\r\namphibie\r\nampleur\r\namusant\r\nanalyse\r\nanaphore\r\nanarchie\r\nanatomie\r\nancien\r\nanéantir\r\nangle\r\nangoisse\r\nanguleux\r\nanimal\r\nannexer\r\nannonce\r\nannuel\r\nanodin\r\nanomalie\r\nanonyme\r\nanormal\r\nantenne\r\nantidote\r\nanxieux\r\napaiser\r\napéritif\r\naplanir\r\napologie\r\nappareil\r\nappeler\r\napporter\r\nappuyer\r\naquarium\r\naqueduc\r\narbitre\r\narbuste\r\nardeur\r\nardoise\r\nargent\r\narlequin\r\narmature\r\narmement\r\narmoire\r\narmure\r\narpenter\r\narracher\r\narriver\r\narroser\r\narsenic\r\nartériel\r\narticle\r\naspect\r\nasphalte\r\naspirer\r\nassaut\r\nasservir\r\nassiette\r\nassocier\r\nassurer\r\nasticot\r\nastre\r\nastuce\r\natelier\r\natome\r\natrium\r\natroce\r\nattaque\r\nattentif\r\nattirer\r\nattraper\r\naubaine\r\nauberge\r\naudace\r\naudible\r\naugurer\r\naurore\r\nautomne\r\nautruche\r\navaler\r\navancer\r\navarice\r\navenir\r\naverse\r\naveugle\r\naviateur\r\navide\r\navion\r\naviser\r\navoine\r\navouer\r\navril\r\naxial\r\naxiome\r\nbadge\r\nbafouer\r\nbagage\r\nbaguette\r\nbaignade\r\nbalancer\r\nbalcon\r\nbaleine\r\nbalisage\r\nbambin\r\nbancaire\r\nbandage\r\nbanlieue\r\nbannière\r\nbanquier\r\nbarbier\r\nbaril\r\nbaron\r\nbarque\r\nbarrage\r\nbassin\r\nbastion\r\nbataille\r\nbateau\r\nbatterie\r\nbaudrier\r\nbavarder\r\nbelette\r\nbélier\r\nbelote\r\nbénéfice\r\nberceau\r\nberger\r\nberline\r\nbermuda\r\nbesace\r\nbesogne\r\nbétail\r\nbeurre\r\nbiberon\r\nbicycle\r\nbidule\r\nbijou\r\nbilan\r\nbilingue\r\nbillard\r\nbinaire\r\nbiologie\r\nbiopsie\r\nbiotype\r\nbiscuit\r\nbison\r\nbistouri\r\nbitume\r\nbizarre\r\nblafard\r\nblague\r\nblanchir\r\nblessant\r\nblinder\r\nblond\r\nbloquer\r\nblouson\r\nbobard\r\nbobine\r\nboire\r\nboiser\r\nbolide\r\nbonbon\r\nbondir\r\nbonheur\r\nbonifier\r\nbonus\r\nbordure\r\nborne\r\nbotte\r\nboucle\r\nboueux\r\nbougie\r\nboulon\r\nbouquin\r\nbourse\r\nboussole\r\nboutique\r\nboxeur\r\nbranche\r\nbrasier\r\nbrave\r\nbrebis\r\nbrèche\r\nbreuvage\r\nbricoler\r\nbrigade\r\nbrillant\r\nbrioche\r\nbrique\r\nbrochure\r\nbroder\r\nbronzer\r\nbrousse\r\nbroyeur\r\nbrume\r\nbrusque\r\nbrutal\r\nbruyant\r\nbuffle\r\nbuisson\r\nbulletin\r\nbureau\r\nburin\r\nbustier\r\nbutiner\r\nbutoir\r\nbuvable\r\nbuvette\r\ncabanon\r\ncabine\r\ncachette\r\ncadeau\r\ncadre\r\ncaféine\r\ncaillou\r\ncaisson\r\ncalculer\r\ncalepin\r\ncalibre\r\ncalmer\r\ncalomnie\r\ncalvaire\r\ncamarade\r\ncaméra\r\ncamion\r\ncampagne\r\ncanal\r\ncaneton\r\ncanon\r\ncantine\r\ncanular\r\ncapable\r\ncaporal\r\ncaprice\r\ncapsule\r\ncapter\r\ncapuche\r\ncarabine\r\ncarbone\r\ncaresser\r\ncaribou\r\ncarnage\r\ncarotte\r\ncarreau\r\ncarton\r\ncascade\r\ncasier\r\ncasque\r\ncassure\r\ncauser\r\ncaution\r\ncavalier\r\ncaverne\r\ncaviar\r\ncédille\r\nceinture\r\ncéleste\r\ncellule\r\ncendrier\r\ncensurer\r\ncentral\r\ncercle\r\ncérébral\r\ncerise\r\ncerner\r\ncerveau\r\ncesser\r\nchagrin\r\nchaise\r\nchaleur\r\nchambre\r\nchance\r\nchapitre\r\ncharbon\r\nchasseur\r\nchaton\r\nchausson\r\nchavirer\r\nchemise\r\nchenille\r\nchéquier\r\nchercher\r\ncheval\r\nchien\r\nchiffre\r\nchignon\r\nchimère\r\nchiot\r\nchlorure\r\nchocolat\r\nchoisir\r\nchose\r\nchouette\r\nchrome\r\nchute\r\ncigare\r\ncigogne\r\ncimenter\r\ncinéma\r\ncintrer\r\ncirculer\r\ncirer\r\ncirque\r\nciterne\r\ncitoyen\r\ncitron\r\ncivil\r\nclairon\r\nclameur\r\nclaquer\r\nclasse\r\nclavier\r\nclient\r\ncligner\r\nclimat\r\nclivage\r\ncloche\r\nclonage\r\ncloporte\r\ncobalt\r\ncobra\r\ncocasse\r\ncocotier\r\ncoder\r\ncodifier\r\ncoffre\r\ncogner\r\ncohésion\r\ncoiffer\r\ncoincer\r\ncolère\r\ncolibri\r\ncolline\r\ncolmater\r\ncolonel\r\ncombat\r\ncomédie\r\ncommande\r\ncompact\r\nconcert\r\nconduire\r\nconfier\r\ncongeler\r\nconnoter\r\nconsonne\r\ncontact\r\nconvexe\r\ncopain\r\ncopie\r\ncorail\r\ncorbeau\r\ncordage\r\ncorniche\r\ncorpus\r\ncorrect\r\ncortège\r\ncosmique\r\ncostume\r\ncoton\r\ncoude\r\ncoupure\r\ncourage\r\ncouteau\r\ncouvrir\r\ncoyote\r\ncrabe\r\ncrainte\r\ncravate\r\ncrayon\r\ncréature\r\ncréditer\r\ncrémeux\r\ncreuser\r\ncrevette\r\ncribler\r\ncrier\r\ncristal\r\ncritère\r\ncroire\r\ncroquer\r\ncrotale\r\ncrucial\r\ncruel\r\ncrypter\r\ncubique\r\ncueillir\r\ncuillère\r\ncuisine\r\ncuivre\r\nculminer\r\ncultiver\r\ncumuler\r\ncupide\r\ncuratif\r\ncurseur\r\ncyanure\r\ncycle\r\ncylindre\r\ncynique\r\ndaigner\r\ndamier\r\ndanger\r\ndanseur\r\ndauphin\r\ndébattre\r\ndébiter\r\ndéborder\r\ndébrider\r\ndébutant\r\ndécaler\r\ndécembre\r\ndéchirer\r\ndécider\r\ndéclarer\r\ndécorer\r\ndécrire\r\ndécupler\r\ndédale\r\ndéductif\r\ndéesse\r\ndéfensif\r\ndéfiler\r\ndéfrayer\r\ndégager\r\ndégivrer\r\ndéglutir\r\ndégrafer\r\ndéjeuner\r\ndélice\r\ndéloger\r\ndemander\r\ndemeurer\r\ndémolir\r\ndénicher\r\ndénouer\r\ndentelle\r\ndénuder\r\ndépart\r\ndépenser\r\ndéphaser\r\ndéplacer\r\ndéposer\r\ndéranger\r\ndérober\r\ndésastre\r\ndescente\r\ndésert\r\ndésigner\r\ndésobéir\r\ndessiner\r\ndestrier\r\ndétacher\r\ndétester\r\ndétourer\r\ndétresse\r\ndevancer\r\ndevenir\r\ndeviner\r\ndevoir\r\ndiable\r\ndialogue\r\ndiamant\r\ndicter\r\ndifférer\r\ndigérer\r\ndigital\r\ndigne\r\ndiluer\r\ndimanche\r\ndiminuer\r\ndioxyde\r\ndirectif\r\ndiriger\r\ndiscuter\r\ndisposer\r\ndissiper\r\ndistance\r\ndivertir\r\ndiviser\r\ndocile\r\ndocteur\r\ndogme\r\ndoigt\r\ndomaine\r\ndomicile\r\ndompter\r\ndonateur\r\ndonjon\r\ndonner\r\ndopamine\r\ndortoir\r\ndorure\r\ndosage\r\ndoseur\r\ndossier\r\ndotation\r\ndouanier\r\ndouble\r\ndouceur\r\ndouter\r\ndoyen\r\ndragon\r\ndraper\r\ndresser\r\ndribbler\r\ndroiture\r\nduperie\r\nduplexe\r\ndurable\r\ndurcir\r\ndynastie\r\néblouir\r\nécarter\r\nécharpe\r\néchelle\r\néclairer\r\néclipse\r\néclore\r\nécluse\r\nécole\r\néconomie\r\nécorce\r\nécouter\r\nécraser\r\nécrémer\r\nécrivain\r\nécrou\r\nécume\r\nécureuil\r\nédifier\r\néduquer\r\neffacer\r\neffectif\r\neffigie\r\neffort\r\neffrayer\r\neffusion\r\négaliser\r\négarer\r\néjecter\r\nélaborer\r\nélargir\r\nélectron\r\nélégant\r\néléphant\r\nélève\r\néligible\r\nélitisme\r\néloge\r\nélucider\r\néluder\r\nemballer\r\nembellir\r\nembryon\r\némeraude\r\némission\r\nemmener\r\némotion\r\némouvoir\r\nempereur\r\nemployer\r\nemporter\r\nemprise\r\némulsion\r\nencadrer\r\nenchère\r\nenclave\r\nencoche\r\nendiguer\r\nendosser\r\nendroit\r\nenduire\r\nénergie\r\nenfance\r\nenfermer\r\nenfouir\r\nengager\r\nengin\r\nenglober\r\nénigme\r\nenjamber\r\nenjeu\r\nenlever\r\nennemi\r\nennuyeux\r\nenrichir\r\nenrobage\r\nenseigne\r\nentasser\r\nentendre\r\nentier\r\nentourer\r\nentraver\r\nénumérer\r\nenvahir\r\nenviable\r\nenvoyer\r\nenzyme\r\néolien\r\népaissir\r\népargne\r\népatant\r\népaule\r\népicerie\r\népidémie\r\népier\r\népilogue\r\népine\r\népisode\r\népitaphe\r\népoque\r\népreuve\r\néprouver\r\népuisant\r\néquerre\r\néquipe\r\nériger\r\nérosion\r\nerreur\r\néruption\r\nescalier\r\nespadon\r\nespèce\r\nespiègle\r\nespoir\r\nesprit\r\nesquiver\r\nessayer\r\nessence\r\nessieu\r\nessorer\r\nestime\r\nestomac\r\nestrade\r\nétagère\r\nétaler\r\nétanche\r\nétatique\r\néteindre\r\nétendoir\r\néternel\r\néthanol\r\néthique\r\nethnie\r\nétirer\r\nétoffer\r\nétoile\r\nétonnant\r\nétourdir\r\nétrange\r\nétroit\r\nétude\r\neuphorie\r\névaluer\r\névasion\r\néventail\r\névidence\r\néviter\r\névolutif\r\névoquer\r\nexact\r\nexagérer\r\nexaucer\r\nexceller\r\nexcitant\r\nexclusif\r\nexcuse\r\nexécuter\r\nexemple\r\nexercer\r\nexhaler\r\nexhorter\r\nexigence\r\nexiler\r\nexister\r\nexotique\r\nexpédier\r\nexplorer\r\nexposer\r\nexprimer\r\nexquis\r\nextensif\r\nextraire\r\nexulter\r\nfable\r\nfabuleux\r\nfacette\r\nfacile\r\nfacture\r\nfaiblir\r\nfalaise\r\nfameux\r\nfamille\r\nfarceur\r\nfarfelu\r\nfarine\r\nfarouche\r\nfasciner\r\nfatal\r\nfatigue\r\nfaucon\r\nfautif\r\nfaveur\r\nfavori\r\nfébrile\r\nféconder\r\nfédérer\r\nfélin\r\nfemme\r\nfémur\r\nfendoir\r\nféodal\r\nfermer\r\nféroce\r\nferveur\r\nfestival\r\nfeuille\r\nfeutre\r\nfévrier\r\nfiasco\r\nficeler\r\nfictif\r\nfidèle\r\nfigure\r\nfilature\r\nfiletage\r\nfilière\r\nfilleul\r\nfilmer\r\nfilou\r\nfiltrer\r\nfinancer\r\nfinir\r\nfiole\r\nfirme\r\nfissure\r\nfixer\r\nflairer\r\nflamme\r\nflasque\r\nflatteur\r\nfléau\r\nflèche\r\nfleur\r\nflexion\r\nflocon\r\nflore\r\nfluctuer\r\nfluide\r\nfluvial\r\nfolie\r\nfonderie\r\nfongible\r\nfontaine\r\nforcer\r\nforgeron\r\nformuler\r\nfortune\r\nfossile\r\nfoudre\r\nfougère\r\nfouiller\r\nfoulure\r\nfourmi\r\nfragile\r\nfraise\r\nfranchir\r\nfrapper\r\nfrayeur\r\nfrégate\r\nfreiner\r\nfrelon\r\nfrémir\r\nfrénésie\r\nfrère\r\nfriable\r\nfriction\r\nfrisson\r\nfrivole\r\nfroid\r\nfromage\r\nfrontal\r\nfrotter\r\nfruit\r\nfugitif\r\nfuite\r\nfureur\r\nfurieux\r\nfurtif\r\nfusion\r\nfutur\r\ngagner\r\ngalaxie\r\ngalerie\r\ngambader\r\ngarantir\r\ngardien\r\ngarnir\r\ngarrigue\r\ngazelle\r\ngazon\r\ngéant\r\ngélatine\r\ngélule\r\ngendarme\r\ngénéral\r\ngénie\r\ngenou\r\ngentil\r\ngéologie\r\ngéomètre\r\ngéranium\r\ngerme\r\ngestuel\r\ngeyser\r\ngibier\r\ngicler\r\ngirafe\r\ngivre\r\nglace\r\nglaive\r\nglisser\r\nglobe\r\ngloire\r\nglorieux\r\ngolfeur\r\ngomme\r\ngonfler\r\ngorge\r\ngorille\r\ngoudron\r\ngouffre\r\ngoulot\r\ngoupille\r\ngourmand\r\ngoutte\r\ngraduel\r\ngraffiti\r\ngraine\r\ngrand\r\ngrappin\r\ngratuit\r\ngravir\r\ngrenat\r\ngriffure\r\ngriller\r\ngrimper\r\ngrogner\r\ngronder\r\ngrotte\r\ngroupe\r\ngruger\r\ngrutier\r\ngruyère\r\nguépard\r\nguerrier\r\nguide\r\nguimauve\r\nguitare\r\ngustatif\r\ngymnaste\r\ngyrostat\r\nhabitude\r\nhachoir\r\nhalte\r\nhameau\r\nhangar\r\nhanneton\r\nharicot\r\nharmonie\r\nharpon\r\nhasard\r\nhélium\r\nhématome\r\nherbe\r\nhérisson\r\nhermine\r\nhéron\r\nhésiter\r\nheureux\r\nhiberner\r\nhibou\r\nhilarant\r\nhistoire\r\nhiver\r\nhomard\r\nhommage\r\nhomogène\r\nhonneur\r\nhonorer\r\nhonteux\r\nhorde\r\nhorizon\r\nhorloge\r\nhormone\r\nhorrible\r\nhouleux\r\nhousse\r\nhublot\r\nhuileux\r\nhumain\r\nhumble\r\nhumide\r\nhumour\r\nhurler\r\nhydromel\r\nhygiène\r\nhymne\r\nhypnose\r\nidylle\r\nignorer\r\niguane\r\nillicite\r\nillusion\r\nimage\r\nimbiber\r\nimiter\r\nimmense\r\nimmobile\r\nimmuable\r\nimpact\r\nimpérial\r\nimplorer\r\nimposer\r\nimprimer\r\nimputer\r\nincarner\r\nincendie\r\nincident\r\nincliner\r\nincolore\r\nindexer\r\nindice\r\ninductif\r\ninédit\r\nineptie\r\ninexact\r\ninfini\r\ninfliger\r\ninformer\r\ninfusion\r\ningérer\r\ninhaler\r\ninhiber\r\ninjecter\r\ninjure\r\ninnocent\r\ninoculer\r\ninonder\r\ninscrire\r\ninsecte\r\ninsigne\r\ninsolite\r\ninspirer\r\ninstinct\r\ninsulter\r\nintact\r\nintense\r\nintime\r\nintrigue\r\nintuitif\r\ninutile\r\ninvasion\r\ninventer\r\ninviter\r\ninvoquer\r\nironique\r\nirradier\r\nirréel\r\nirriter\r\nisoler\r\nivoire\r\nivresse\r\njaguar\r\njaillir\r\njambe\r\njanvier\r\njardin\r\njauger\r\njaune\r\njavelot\r\njetable\r\njeton\r\njeudi\r\njeunesse\r\njoindre\r\njoncher\r\njongler\r\njoueur\r\njouissif\r\njournal\r\njovial\r\njoyau\r\njoyeux\r\njubiler\r\njugement\r\njunior\r\njupon\r\njuriste\r\njustice\r\njuteux\r\njuvénile\r\nkayak\r\nkimono\r\nkiosque\r\nlabel\r\nlabial\r\nlabourer\r\nlacérer\r\nlactose\r\nlagune\r\nlaine\r\nlaisser\r\nlaitier\r\nlambeau\r\nlamelle\r\nlampe\r\nlanceur\r\nlangage\r\nlanterne\r\nlapin\r\nlargeur\r\nlarme\r\nlaurier\r\nlavabo\r\nlavoir\r\nlecture\r\nlégal\r\nléger\r\nlégume\r\nlessive\r\nlettre\r\nlevier\r\nlexique\r\nlézard\r\nliasse\r\nlibérer\r\nlibre\r\nlicence\r\nlicorne\r\nliège\r\nlièvre\r\nligature\r\nligoter\r\nligue\r\nlimer\r\nlimite\r\nlimonade\r\nlimpide\r\nlinéaire\r\nlingot\r\nlionceau\r\nliquide\r\nlisière\r\nlister\r\nlithium\r\nlitige\r\nlittoral\r\nlivreur\r\nlogique\r\nlointain\r\nloisir\r\nlombric\r\nloterie\r\nlouer\r\nlourd\r\nloutre\r\nlouve\r\nloyal\r\nlubie\r\nlucide\r\nlucratif\r\nlueur\r\nlugubre\r\nluisant\r\nlumière\r\nlunaire\r\nlundi\r\nluron\r\nlutter\r\nluxueux\r\nmachine\r\nmagasin\r\nmagenta\r\nmagique\r\nmaigre\r\nmaillon\r\nmaintien\r\nmairie\r\nmaison\r\nmajorer\r\nmalaxer\r\nmaléfice\r\nmalheur\r\nmalice\r\nmallette\r\nmammouth\r\nmandater\r\nmaniable\r\nmanquant\r\nmanteau\r\nmanuel\r\nmarathon\r\nmarbre\r\nmarchand\r\nmardi\r\nmaritime\r\nmarqueur\r\nmarron\r\nmarteler\r\nmascotte\r\nmassif\r\nmatériel\r\nmatière\r\nmatraque\r\nmaudire\r\nmaussade\r\nmauve\r\nmaximal\r\nméchant\r\nméconnu\r\nmédaille\r\nmédecin\r\nméditer\r\nméduse\r\nmeilleur\r\nmélange\r\nmélodie\r\nmembre\r\nmémoire\r\nmenacer\r\nmener\r\nmenhir\r\nmensonge\r\nmentor\r\nmercredi\r\nmérite\r\nmerle\r\nmessager\r\nmesure\r\nmétal\r\nmétéore\r\nméthode\r\nmétier\r\nmeuble\r\nmiauler\r\nmicrobe\r\nmiette\r\nmignon\r\nmigrer\r\nmilieu\r\nmillion\r\nmimique\r\nmince\r\nminéral\r\nminimal\r\nminorer\r\nminute\r\nmiracle\r\nmiroiter\r\nmissile\r\nmixte\r\nmobile\r\nmoderne\r\nmoelleux\r\nmondial\r\nmoniteur\r\nmonnaie\r\nmonotone\r\nmonstre\r\nmontagne\r\nmonument\r\nmoqueur\r\nmorceau\r\nmorsure\r\nmortier\r\nmoteur\r\nmotif\r\nmouche\r\nmoufle\r\nmoulin\r\nmousson\r\nmouton\r\nmouvant\r\nmultiple\r\nmunition\r\nmuraille\r\nmurène\r\nmurmure\r\nmuscle\r\nmuséum\r\nmusicien\r\nmutation\r\nmuter\r\nmutuel\r\nmyriade\r\nmyrtille\r\nmystère\r\nmythique\r\nnageur\r\nnappe\r\nnarquois\r\nnarrer\r\nnatation\r\nnation\r\nnature\r\nnaufrage\r\nnautique\r\nnavire\r\nnébuleux\r\nnectar\r\nnéfaste\r\nnégation\r\nnégliger\r\nnégocier\r\nneige\r\nnerveux\r\nnettoyer\r\nneurone\r\nneutron\r\nneveu\r\nniche\r\nnickel\r\nnitrate\r\nniveau\r\nnoble\r\nnocif\r\nnocturne\r\nnoirceur\r\nnoisette\r\nnomade\r\nnombreux\r\nnommer\r\nnormatif\r\nnotable\r\nnotifier\r\nnotoire\r\nnourrir\r\nnouveau\r\nnovateur\r\nnovembre\r\nnovice\r\nnuage\r\nnuancer\r\nnuire\r\nnuisible\r\nnuméro\r\nnuptial\r\nnuque\r\nnutritif\r\nobéir\r\nobjectif\r\nobliger\r\nobscur\r\nobserver\r\nobstacle\r\nobtenir\r\nobturer\r\noccasion\r\noccuper\r\nocéan\r\noctobre\r\noctroyer\r\noctupler\r\noculaire\r\nodeur\r\nodorant\r\noffenser\r\nofficier\r\noffrir\r\nogive\r\noiseau\r\noisillon\r\nolfactif\r\nolivier\r\nombrage\r\nomettre\r\nonctueux\r\nonduler\r\nonéreux\r\nonirique\r\nopale\r\nopaque\r\nopérer\r\nopinion\r\nopportun\r\nopprimer\r\nopter\r\noptique\r\norageux\r\norange\r\norbite\r\nordonner\r\noreille\r\norgane\r\norgueil\r\norifice\r\nornement\r\norque\r\nortie\r\nosciller\r\nosmose\r\nossature\r\notarie\r\nouragan\r\nourson\r\noutil\r\noutrager\r\nouvrage\r\novation\r\noxyde\r\noxygène\r\nozone\r\npaisible\r\npalace\r\npalmarès\r\npalourde\r\npalper\r\npanache\r\npanda\r\npangolin\r\npaniquer\r\npanneau\r\npanorama\r\npantalon\r\npapaye\r\npapier\r\npapoter\r\npapyrus\r\nparadoxe\r\nparcelle\r\nparesse\r\nparfumer\r\nparler\r\nparole\r\nparrain\r\nparsemer\r\npartager\r\nparure\r\nparvenir\r\npassion\r\npastèque\r\npaternel\r\npatience\r\npatron\r\npavillon\r\npavoiser\r\npayer\r\npaysage\r\npeigne\r\npeintre\r\npelage\r\npélican\r\npelle\r\npelouse\r\npeluche\r\npendule\r\npénétrer\r\npénible\r\npensif\r\npénurie\r\npépite\r\npéplum\r\nperdrix\r\nperforer\r\npériode\r\npermuter\r\nperplexe\r\npersil\r\nperte\r\npeser\r\npétale\r\npetit\r\npétrir\r\npeuple\r\npharaon\r\nphobie\r\nphoque\r\nphoton\r\nphrase\r\nphysique\r\npiano\r\npictural\r\npièce\r\npierre\r\npieuvre\r\npilote\r\npinceau\r\npipette\r\npiquer\r\npirogue\r\npiscine\r\npiston\r\npivoter\r\npixel\r\npizza\r\nplacard\r\nplafond\r\nplaisir\r\nplaner\r\nplaque\r\nplastron\r\nplateau\r\npleurer\r\nplexus\r\npliage\r\nplomb\r\nplonger\r\npluie\r\nplumage\r\npochette\r\npoésie\r\npoète\r\npointe\r\npoirier\r\npoisson\r\npoivre\r\npolaire\r\npolicier\r\npollen\r\npolygone\r\npommade\r\npompier\r\nponctuel\r\npondérer\r\nponey\r\nportique\r\nposition\r\nposséder\r\nposture\r\npotager\r\npoteau\r\npotion\r\npouce\r\npoulain\r\npoumon\r\npourpre\r\npoussin\r\npouvoir\r\nprairie\r\npratique\r\nprécieux\r\nprédire\r\npréfixe\r\nprélude\r\nprénom\r\nprésence\r\nprétexte\r\nprévoir\r\nprimitif\r\nprince\r\nprison\r\npriver\r\nproblème\r\nprocéder\r\nprodige\r\nprofond\r\nprogrès\r\nproie\r\nprojeter\r\nprologue\r\npromener\r\npropre\r\nprospère\r\nprotéger\r\nprouesse\r\nproverbe\r\nprudence\r\npruneau\r\npsychose\r\npublic\r\npuceron\r\npuiser\r\npulpe\r\npulsar\r\npunaise\r\npunitif\r\npupitre\r\npurifier\r\npuzzle\r\npyramide\r\nquasar\r\nquerelle\r\nquestion\r\nquiétude\r\nquitter\r\nquotient\r\nracine\r\nraconter\r\nradieux\r\nragondin\r\nraideur\r\nraisin\r\nralentir\r\nrallonge\r\nramasser\r\nrapide\r\nrasage\r\nratisser\r\nravager\r\nravin\r\nrayonner\r\nréactif\r\nréagir\r\nréaliser\r\nréanimer\r\nrecevoir\r\nréciter\r\nréclamer\r\nrécolter\r\nrecruter\r\nreculer\r\nrecycler\r\nrédiger\r\nredouter\r\nrefaire\r\nréflexe\r\nréformer\r\nrefrain\r\nrefuge\r\nrégalien\r\nrégion\r\nréglage\r\nrégulier\r\nréitérer\r\nrejeter\r\nrejouer\r\nrelatif\r\nrelever\r\nrelief\r\nremarque\r\nremède\r\nremise\r\nremonter\r\nremplir\r\nremuer\r\nrenard\r\nrenfort\r\nrenifler\r\nrenoncer\r\nrentrer\r\nrenvoi\r\nreplier\r\nreporter\r\nreprise\r\nreptile\r\nrequin\r\nréserve\r\nrésineux\r\nrésoudre\r\nrespect\r\nrester\r\nrésultat\r\nrétablir\r\nretenir\r\nréticule\r\nretomber\r\nretracer\r\nréunion\r\nréussir\r\nrevanche\r\nrevivre\r\nrévolte\r\nrévulsif\r\nrichesse\r\nrideau\r\nrieur\r\nrigide\r\nrigoler\r\nrincer\r\nriposter\r\nrisible\r\nrisque\r\nrituel\r\nrival\r\nrivière\r\nrocheux\r\nromance\r\nrompre\r\nronce\r\nrondin\r\nroseau\r\nrosier\r\nrotatif\r\nrotor\r\nrotule\r\nrouge\r\nrouille\r\nrouleau\r\nroutine\r\nroyaume\r\nruban\r\nrubis\r\nruche\r\nruelle\r\nrugueux\r\nruiner\r\nruisseau\r\nruser\r\nrustique\r\nrythme\r\nsabler\r\nsaboter\r\nsabre\r\nsacoche\r\nsafari\r\nsagesse\r\nsaisir\r\nsalade\r\nsalive\r\nsalon\r\nsaluer\r\nsamedi\r\nsanction\r\nsanglier\r\nsarcasme\r\nsardine\r\nsaturer\r\nsaugrenu\r\nsaumon\r\nsauter\r\nsauvage\r\nsavant\r\nsavonner\r\nscalpel\r\nscandale\r\nscélérat\r\nscénario\r\nsceptre\r\nschéma\r\nscience\r\nscinder\r\nscore\r\nscrutin\r\nsculpter\r\nséance\r\nsécable\r\nsécher\r\nsecouer\r\nsécréter\r\nsédatif\r\nséduire\r\nseigneur\r\nséjour\r\nsélectif\r\nsemaine\r\nsembler\r\nsemence\r\nséminal\r\nsénateur\r\nsensible\r\nsentence\r\nséparer\r\nséquence\r\nserein\r\nsergent\r\nsérieux\r\nserrure\r\nsérum\r\nservice\r\nsésame\r\nsévir\r\nsevrage\r\nsextuple\r\nsidéral\r\nsiècle\r\nsiéger\r\nsiffler\r\nsigle\r\nsignal\r\nsilence\r\nsilicium\r\nsimple\r\nsincère\r\nsinistre\r\nsiphon\r\nsirop\r\nsismique\r\nsituer\r\nskier\r\nsocial\r\nsocle\r\nsodium\r\nsoigneux\r\nsoldat\r\nsoleil\r\nsolitude\r\nsoluble\r\nsombre\r\nsommeil\r\nsomnoler\r\nsonde\r\nsongeur\r\nsonnette\r\nsonore\r\nsorcier\r\nsortir\r\nsosie\r\nsottise\r\nsoucieux\r\nsoudure\r\nsouffle\r\nsoulever\r\nsoupape\r\nsource\r\nsoutirer\r\nsouvenir\r\nspacieux\r\nspatial\r\nspécial\r\nsphère\r\nspiral\r\nstable\r\nstation\r\nsternum\r\nstimulus\r\nstipuler\r\nstrict\r\nstudieux\r\nstupeur\r\nstyliste\r\nsublime\r\nsubstrat\r\nsubtil\r\nsubvenir\r\nsuccès\r\nsucre\r\nsuffixe\r\nsuggérer\r\nsuiveur\r\nsulfate\r\nsuperbe\r\nsupplier\r\nsurface\r\nsuricate\r\nsurmener\r\nsurprise\r\nsursaut\r\nsurvie\r\nsuspect\r\nsyllabe\r\nsymbole\r\nsymétrie\r\nsynapse\r\nsyntaxe\r\nsystème\r\ntabac\r\ntablier\r\ntactile\r\ntailler\r\ntalent\r\ntalisman\r\ntalonner\r\ntambour\r\ntamiser\r\ntangible\r\ntapis\r\ntaquiner\r\ntarder\r\ntarif\r\ntartine\r\ntasse\r\ntatami\r\ntatouage\r\ntaupe\r\ntaureau\r\ntaxer\r\ntémoin\r\ntemporel\r\ntenaille\r\ntendre\r\nteneur\r\ntenir\r\ntension\r\nterminer\r\nterne\r\nterrible\r\ntétine\r\ntexte\r\nthème\r\nthéorie\r\nthérapie\r\nthorax\r\ntibia\r\ntiède\r\ntimide\r\ntirelire\r\ntiroir\r\ntissu\r\ntitane\r\ntitre\r\ntituber\r\ntoboggan\r\ntolérant\r\ntomate\r\ntonique\r\ntonneau\r\ntoponyme\r\ntorche\r\ntordre\r\ntornade\r\ntorpille\r\ntorrent\r\ntorse\r\ntortue\r\ntotem\r\ntoucher\r\ntournage\r\ntousser\r\ntoxine\r\ntraction\r\ntrafic\r\ntragique\r\ntrahir\r\ntrain\r\ntrancher\r\ntravail\r\ntrèfle\r\ntremper\r\ntrésor\r\ntreuil\r\ntriage\r\ntribunal\r\ntricoter\r\ntrilogie\r\ntriomphe\r\ntripler\r\ntriturer\r\ntrivial\r\ntrombone\r\ntronc\r\ntropical\r\ntroupeau\r\ntuile\r\ntulipe\r\ntumulte\r\ntunnel\r\nturbine\r\ntuteur\r\ntutoyer\r\ntuyau\r\ntympan\r\ntyphon\r\ntypique\r\ntyran\r\nubuesque\r\nultime\r\nultrason\r\nunanime\r\nunifier\r\nunion\r\nunique\r\nunitaire\r\nunivers\r\nuranium\r\nurbain\r\nurticant\r\nusage\r\nusine\r\nusuel\r\nusure\r\nutile\r\nutopie\r\nvacarme\r\nvaccin\r\nvagabond\r\nvague\r\nvaillant\r\nvaincre\r\nvaisseau\r\nvalable\r\nvalise\r\nvallon\r\nvalve\r\nvampire\r\nvanille\r\nvapeur\r\nvarier\r\nvaseux\r\nvassal\r\nvaste\r\nvecteur\r\nvedette\r\nvégétal\r\nvéhicule\r\nveinard\r\nvéloce\r\nvendredi\r\nvénérer\r\nvenger\r\nvenimeux\r\nventouse\r\nverdure\r\nvérin\r\nvernir\r\nverrou\r\nverser\r\nvertu\r\nveston\r\nvétéran\r\nvétuste\r\nvexant\r\nvexer\r\nviaduc\r\nviande\r\nvictoire\r\nvidange\r\nvidéo\r\nvignette\r\nvigueur\r\nvilain\r\nvillage\r\nvinaigre\r\nviolon\r\nvipère\r\nvirement\r\nvirtuose\r\nvirus\r\nvisage\r\nviseur\r\nvision\r\nvisqueux\r\nvisuel\r\nvital\r\nvitesse\r\nviticole\r\nvitrine\r\nvivace\r\nvivipare\r\nvocation\r\nvoguer\r\nvoile\r\nvoisin\r\nvoiture\r\nvolaille\r\nvolcan\r\nvoltiger\r\nvolume\r\nvorace\r\nvortex\r\nvoter\r\nvouloir\r\nvoyage\r\nvoyelle\r\nwagon\r\nxénon\r\nyacht\r\nzèbre\r\nzénith\r\nzeste\r\nzoologie`.split('\\n');\r\n", "export const wordlist = `abaco\r\nabbaglio\r\nabbinato\r\nabete\r\nabisso\r\nabolire\r\nabrasivo\r\nabrogato\r\naccadere\r\naccenno\r\naccusato\r\nacetone\r\nachille\r\nacido\r\nacqua\r\nacre\r\nacrilico\r\nacrobata\r\nacuto\r\nadagio\r\naddebito\r\naddome\r\nadeguato\r\naderire\r\nadipe\r\nadottare\r\nadulare\r\naffabile\r\naffetto\r\naffisso\r\naffranto\r\naforisma\r\nafoso\r\nafricano\r\nagave\r\nagente\r\nagevole\r\naggancio\r\nagire\r\nagitare\r\nagonismo\r\nagricolo\r\nagrumeto\r\naguzzo\r\nalabarda\r\nalato\r\nalbatro\r\nalberato\r\nalbo\r\nalbume\r\nalce\r\nalcolico\r\nalettone\r\nalfa\r\nalgebra\r\naliante\r\nalibi\r\nalimento\r\nallagato\r\nallegro\r\nallievo\r\nallodola\r\nallusivo\r\nalmeno\r\nalogeno\r\nalpaca\r\nalpestre\r\naltalena\r\nalterno\r\nalticcio\r\naltrove\r\nalunno\r\nalveolo\r\nalzare\r\namalgama\r\namanita\r\namarena\r\nambito\r\nambrato\r\nameba\r\namerica\r\nametista\r\namico\r\nammasso\r\nammenda\r\nammirare\r\nammonito\r\namore\r\nampio\r\nampliare\r\namuleto\r\nanacardo\r\nanagrafe\r\nanalista\r\nanarchia\r\nanatra\r\nanca\r\nancella\r\nancora\r\nandare\r\nandrea\r\nanello\r\nangelo\r\nangolare\r\nangusto\r\nanima\r\nannegare\r\nannidato\r\nanno\r\nannuncio\r\nanonimo\r\nanticipo\r\nanzi\r\napatico\r\napertura\r\napode\r\napparire\r\nappetito\r\nappoggio\r\napprodo\r\nappunto\r\naprile\r\narabica\r\narachide\r\naragosta\r\naraldica\r\narancio\r\naratura\r\narazzo\r\narbitro\r\narchivio\r\nardito\r\narenile\r\nargento\r\nargine\r\narguto\r\naria\r\narmonia\r\narnese\r\narredato\r\narringa\r\narrosto\r\narsenico\r\narso\r\nartefice\r\narzillo\r\nasciutto\r\nascolto\r\nasepsi\r\nasettico\r\nasfalto\r\nasino\r\nasola\r\naspirato\r\naspro\r\nassaggio\r\nasse\r\nassoluto\r\nassurdo\r\nasta\r\nastenuto\r\nastice\r\nastratto\r\natavico\r\nateismo\r\natomico\r\natono\r\nattesa\r\nattivare\r\nattorno\r\nattrito\r\nattuale\r\nausilio\r\naustria\r\nautista\r\nautonomo\r\nautunno\r\navanzato\r\navere\r\navvenire\r\navviso\r\navvolgere\r\nazione\r\nazoto\r\nazzimo\r\nazzurro\r\nbabele\r\nbaccano\r\nbacino\r\nbaco\r\nbadessa\r\nbadilata\r\nbagnato\r\nbaita\r\nbalcone\r\nbaldo\r\nbalena\r\nballata\r\nbalzano\r\nbambino\r\nbandire\r\nbaraonda\r\nbarbaro\r\nbarca\r\nbaritono\r\nbarlume\r\nbarocco\r\nbasilico\r\nbasso\r\nbatosta\r\nbattuto\r\nbaule\r\nbava\r\nbavosa\r\nbecco\r\nbeffa\r\nbelgio\r\nbelva\r\nbenda\r\nbenevole\r\nbenigno\r\nbenzina\r\nbere\r\nberlina\r\nbeta\r\nbibita\r\nbici\r\nbidone\r\nbifido\r\nbiga\r\nbilancia\r\nbimbo\r\nbinocolo\r\nbiologo\r\nbipede\r\nbipolare\r\nbirbante\r\nbirra\r\nbiscotto\r\nbisesto\r\nbisnonno\r\nbisonte\r\nbisturi\r\nbizzarro\r\nblando\r\nblatta\r\nbollito\r\nbonifico\r\nbordo\r\nbosco\r\nbotanico\r\nbottino\r\nbozzolo\r\nbraccio\r\nbradipo\r\nbrama\r\nbranca\r\nbravura\r\nbretella\r\nbrevetto\r\nbrezza\r\nbriglia\r\nbrillante\r\nbrindare\r\nbroccolo\r\nbrodo\r\nbronzina\r\nbrullo\r\nbruno\r\nbubbone\r\nbuca\r\nbudino\r\nbuffone\r\nbuio\r\nbulbo\r\nbuono\r\nburlone\r\nburrasca\r\nbussola\r\nbusta\r\ncadetto\r\ncaduco\r\ncalamaro\r\ncalcolo\r\ncalesse\r\ncalibro\r\ncalmo\r\ncaloria\r\ncambusa\r\ncamerata\r\ncamicia\r\ncammino\r\ncamola\r\ncampale\r\ncanapa\r\ncandela\r\ncane\r\ncanino\r\ncanotto\r\ncantina\r\ncapace\r\ncapello\r\ncapitolo\r\ncapogiro\r\ncappero\r\ncapra\r\ncapsula\r\ncarapace\r\ncarcassa\r\ncardo\r\ncarisma\r\ncarovana\r\ncarretto\r\ncartolina\r\ncasaccio\r\ncascata\r\ncaserma\r\ncaso\r\ncassone\r\ncastello\r\ncasuale\r\ncatasta\r\ncatena\r\ncatrame\r\ncauto\r\ncavillo\r\ncedibile\r\ncedrata\r\ncefalo\r\ncelebre\r\ncellulare\r\ncena\r\ncenone\r\ncentesimo\r\nceramica\r\ncercare\r\ncerto\r\ncerume\r\ncervello\r\ncesoia\r\ncespo\r\nceto\r\nchela\r\nchiaro\r\nchicca\r\nchiedere\r\nchimera\r\nchina\r\nchirurgo\r\nchitarra\r\nciao\r\nciclismo\r\ncifrare\r\ncigno\r\ncilindro\r\nciottolo\r\ncirca\r\ncirrosi\r\ncitrico\r\ncittadino\r\nciuffo\r\ncivetta\r\ncivile\r\nclassico\r\nclinica\r\ncloro\r\ncocco\r\ncodardo\r\ncodice\r\ncoerente\r\ncognome\r\ncollare\r\ncolmato\r\ncolore\r\ncolposo\r\ncoltivato\r\ncolza\r\ncoma\r\ncometa\r\ncommando\r\ncomodo\r\ncomputer\r\ncomune\r\nconciso\r\ncondurre\r\nconferma\r\ncongelare\r\nconiuge\r\nconnesso\r\nconoscere\r\nconsumo\r\ncontinuo\r\nconvegno\r\ncoperto\r\ncopione\r\ncoppia\r\ncopricapo\r\ncorazza\r\ncordata\r\ncoricato\r\ncornice\r\ncorolla\r\ncorpo\r\ncorredo\r\ncorsia\r\ncortese\r\ncosmico\r\ncostante\r\ncottura\r\ncovato\r\ncratere\r\ncravatta\r\ncreato\r\ncredere\r\ncremoso\r\ncrescita\r\ncreta\r\ncriceto\r\ncrinale\r\ncrisi\r\ncritico\r\ncroce\r\ncronaca\r\ncrostata\r\ncruciale\r\ncrusca\r\ncucire\r\ncuculo\r\ncugino\r\ncullato\r\ncupola\r\ncuratore\r\ncursore\r\ncurvo\r\ncuscino\r\ncustode\r\ndado\r\ndaino\r\ndalmata\r\ndamerino\r\ndaniela\r\ndannoso\r\ndanzare\r\ndatato\r\ndavanti\r\ndavvero\r\ndebutto\r\ndecennio\r\ndeciso\r\ndeclino\r\ndecollo\r\ndecreto\r\ndedicato\r\ndefinito\r\ndeforme\r\ndegno\r\ndelegare\r\ndelfino\r\ndelirio\r\ndelta\r\ndemenza\r\ndenotato\r\ndentro\r\ndeposito\r\nderapata\r\nderivare\r\nderoga\r\ndescritto\r\ndeserto\r\ndesiderio\r\ndesumere\r\ndetersivo\r\ndevoto\r\ndiametro\r\ndicembre\r\ndiedro\r\ndifeso\r\ndiffuso\r\ndigerire\r\ndigitale\r\ndiluvio\r\ndinamico\r\ndinnanzi\r\ndipinto\r\ndiploma\r\ndipolo\r\ndiradare\r\ndire\r\ndirotto\r\ndirupo\r\ndisagio\r\ndiscreto\r\ndisfare\r\ndisgelo\r\ndisposto\r\ndistanza\r\ndisumano\r\ndito\r\ndivano\r\ndivelto\r\ndividere\r\ndivorato\r\ndoblone\r\ndocente\r\ndoganale\r\ndogma\r\ndolce\r\ndomato\r\ndomenica\r\ndominare\r\ndondolo\r\ndono\r\ndormire\r\ndote\r\ndottore\r\ndovuto\r\ndozzina\r\ndrago\r\ndruido\r\ndubbio\r\ndubitare\r\nducale\r\nduna\r\nduomo\r\nduplice\r\nduraturo\r\nebano\r\neccesso\r\necco\r\neclissi\r\neconomia\r\nedera\r\nedicola\r\nedile\r\neditoria\r\neducare\r\negemonia\r\negli\r\negoismo\r\negregio\r\nelaborato\r\nelargire\r\nelegante\r\nelencato\r\neletto\r\nelevare\r\nelfico\r\nelica\r\nelmo\r\nelsa\r\neluso\r\nemanato\r\nemblema\r\nemesso\r\nemiro\r\nemotivo\r\nemozione\r\nempirico\r\nemulo\r\nendemico\r\nenduro\r\nenergia\r\nenfasi\r\nenoteca\r\nentrare\r\nenzima\r\nepatite\r\nepilogo\r\nepisodio\r\nepocale\r\neppure\r\nequatore\r\nerario\r\nerba\r\nerboso\r\nerede\r\neremita\r\nerigere\r\nermetico\r\neroe\r\nerosivo\r\nerrante\r\nesagono\r\nesame\r\nesanime\r\nesaudire\r\nesca\r\nesempio\r\nesercito\r\nesibito\r\nesigente\r\nesistere\r\nesito\r\nesofago\r\nesortato\r\nesoso\r\nespanso\r\nespresso\r\nessenza\r\nesso\r\nesteso\r\nestimare\r\nestonia\r\nestroso\r\nesultare\r\netilico\r\netnico\r\netrusco\r\netto\r\neuclideo\r\neuropa\r\nevaso\r\nevidenza\r\nevitato\r\nevoluto\r\nevviva\r\nfabbrica\r\nfaccenda\r\nfachiro\r\nfalco\r\nfamiglia\r\nfanale\r\nfanfara\r\nfango\r\nfantasma\r\nfare\r\nfarfalla\r\nfarinoso\r\nfarmaco\r\nfascia\r\nfastoso\r\nfasullo\r\nfaticare\r\nfato\r\nfavoloso\r\nfebbre\r\nfecola\r\nfede\r\nfegato\r\nfelpa\r\nfeltro\r\nfemmina\r\nfendere\r\nfenomeno\r\nfermento\r\nferro\r\nfertile\r\nfessura\r\nfestivo\r\nfetta\r\nfeudo\r\nfiaba\r\nfiducia\r\nfifa\r\nfigurato\r\nfilo\r\nfinanza\r\nfinestra\r\nfinire\r\nfiore\r\nfiscale\r\nfisico\r\nfiume\r\nflacone\r\nflamenco\r\nflebo\r\nflemma\r\nflorido\r\nfluente\r\nfluoro\r\nfobico\r\nfocaccia\r\nfocoso\r\nfoderato\r\nfoglio\r\nfolata\r\nfolclore\r\nfolgore\r\nfondente\r\nfonetico\r\nfonia\r\nfontana\r\nforbito\r\nforchetta\r\nforesta\r\nformica\r\nfornaio\r\nforo\r\nfortezza\r\nforzare\r\nfosfato\r\nfosso\r\nfracasso\r\nfrana\r\nfrassino\r\nfratello\r\nfreccetta\r\nfrenata\r\nfresco\r\nfrigo\r\nfrollino\r\nfronde\r\nfrugale\r\nfrutta\r\nfucilata\r\nfucsia\r\nfuggente\r\nfulmine\r\nfulvo\r\nfumante\r\nfumetto\r\nfumoso\r\nfune\r\nfunzione\r\nfuoco\r\nfurbo\r\nfurgone\r\nfurore\r\nfuso\r\nfutile\r\ngabbiano\r\ngaffe\r\ngalateo\r\ngallina\r\ngaloppo\r\ngambero\r\ngamma\r\ngaranzia\r\ngarbo\r\ngarofano\r\ngarzone\r\ngasdotto\r\ngasolio\r\ngastrico\r\ngatto\r\ngaudio\r\ngazebo\r\ngazzella\r\ngeco\r\ngelatina\r\ngelso\r\ngemello\r\ngemmato\r\ngene\r\ngenitore\r\ngennaio\r\ngenotipo\r\ngergo\r\nghepardo\r\nghiaccio\r\nghisa\r\ngiallo\r\ngilda\r\nginepro\r\ngiocare\r\ngioiello\r\ngiorno\r\ngiove\r\ngirato\r\ngirone\r\ngittata\r\ngiudizio\r\ngiurato\r\ngiusto\r\nglobulo\r\nglutine\r\ngnomo\r\ngobba\r\ngolf\r\ngomito\r\ngommone\r\ngonfio\r\ngonna\r\ngoverno\r\ngracile\r\ngrado\r\ngrafico\r\ngrammo\r\ngrande\r\ngrattare\r\ngravoso\r\ngrazia\r\ngreca\r\ngregge\r\ngrifone\r\ngrigio\r\ngrinza\r\ngrotta\r\ngruppo\r\nguadagno\r\nguaio\r\nguanto\r\nguardare\r\ngufo\r\nguidare\r\nibernato\r\nicona\r\nidentico\r\nidillio\r\nidolo\r\nidra\r\nidrico\r\nidrogeno\r\nigiene\r\nignaro\r\nignorato\r\nilare\r\nilleso\r\nillogico\r\nilludere\r\nimballo\r\nimbevuto\r\nimbocco\r\nimbuto\r\nimmane\r\nimmerso\r\nimmolato\r\nimpacco\r\nimpeto\r\nimpiego\r\nimporto\r\nimpronta\r\ninalare\r\ninarcare\r\ninattivo\r\nincanto\r\nincendio\r\ninchino\r\nincisivo\r\nincluso\r\nincontro\r\nincrocio\r\nincubo\r\nindagine\r\nindia\r\nindole\r\ninedito\r\ninfatti\r\ninfilare\r\ninflitto\r\ningaggio\r\ningegno\r\ninglese\r\ningordo\r\ningrosso\r\ninnesco\r\ninodore\r\ninoltrare\r\ninondato\r\ninsano\r\ninsetto\r\ninsieme\r\ninsonnia\r\ninsulina\r\nintasato\r\nintero\r\nintonaco\r\nintuito\r\ninumidire\r\ninvalido\r\ninvece\r\ninvito\r\niperbole\r\nipnotico\r\nipotesi\r\nippica\r\niride\r\nirlanda\r\nironico\r\nirrigato\r\nirrorare\r\nisolato\r\nisotopo\r\nisterico\r\nistituto\r\nistrice\r\nitalia\r\niterare\r\nlabbro\r\nlabirinto\r\nlacca\r\nlacerato\r\nlacrima\r\nlacuna\r\nladdove\r\nlago\r\nlampo\r\nlancetta\r\nlanterna\r\nlardoso\r\nlarga\r\nlaringe\r\nlastra\r\nlatenza\r\nlatino\r\nlattuga\r\nlavagna\r\nlavoro\r\nlegale\r\nleggero\r\nlembo\r\nlentezza\r\nlenza\r\nleone\r\nlepre\r\nlesivo\r\nlessato\r\nlesto\r\nletterale\r\nleva\r\nlevigato\r\nlibero\r\nlido\r\nlievito\r\nlilla\r\nlimatura\r\nlimitare\r\nlimpido\r\nlineare\r\nlingua\r\nliquido\r\nlira\r\nlirica\r\nlisca\r\nlite\r\nlitigio\r\nlivrea\r\nlocanda\r\nlode\r\nlogica\r\nlombare\r\nlondra\r\nlongevo\r\nloquace\r\nlorenzo\r\nloto\r\nlotteria\r\nluce\r\nlucidato\r\nlumaca\r\nluminoso\r\nlungo\r\nlupo\r\nluppolo\r\nlusinga\r\nlusso\r\nlutto\r\nmacabro\r\nmacchina\r\nmacero\r\nmacinato\r\nmadama\r\nmagico\r\nmaglia\r\nmagnete\r\nmagro\r\nmaiolica\r\nmalafede\r\nmalgrado\r\nmalinteso\r\nmalsano\r\nmalto\r\nmalumore\r\nmana\r\nmancia\r\nmandorla\r\nmangiare\r\nmanifesto\r\nmannaro\r\nmanovra\r\nmansarda\r\nmantide\r\nmanubrio\r\nmappa\r\nmaratona\r\nmarcire\r\nmaretta\r\nmarmo\r\nmarsupio\r\nmaschera\r\nmassaia\r\nmastino\r\nmaterasso\r\nmatricola\r\nmattone\r\nmaturo\r\nmazurca\r\nmeandro\r\nmeccanico\r\nmecenate\r\nmedesimo\r\nmeditare\r\nmega\r\nmelassa\r\nmelis\r\nmelodia\r\nmeninge\r\nmeno\r\nmensola\r\nmercurio\r\nmerenda\r\nmerlo\r\nmeschino\r\nmese\r\nmessere\r\nmestolo\r\nmetallo\r\nmetodo\r\nmettere\r\nmiagolare\r\nmica\r\nmicelio\r\nmichele\r\nmicrobo\r\nmidollo\r\nmiele\r\nmigliore\r\nmilano\r\nmilite\r\nmimosa\r\nminerale\r\nmini\r\nminore\r\nmirino\r\nmirtillo\r\nmiscela\r\nmissiva\r\nmisto\r\nmisurare\r\nmitezza\r\nmitigare\r\nmitra\r\nmittente\r\nmnemonico\r\nmodello\r\nmodifica\r\nmodulo\r\nmogano\r\nmogio\r\nmole\r\nmolosso\r\nmonastero\r\nmonco\r\nmondina\r\nmonetario\r\nmonile\r\nmonotono\r\nmonsone\r\nmontato\r\nmonviso\r\nmora\r\nmordere\r\nmorsicato\r\nmostro\r\nmotivato\r\nmotosega\r\nmotto\r\nmovenza\r\nmovimento\r\nmozzo\r\nmucca\r\nmucosa\r\nmuffa\r\nmughetto\r\nmugnaio\r\nmulatto\r\nmulinello\r\nmultiplo\r\nmummia\r\nmunto\r\nmuovere\r\nmurale\r\nmusa\r\nmuscolo\r\nmusica\r\nmutevole\r\nmuto\r\nnababbo\r\nnafta\r\nnanometro\r\nnarciso\r\nnarice\r\nnarrato\r\nnascere\r\nnastrare\r\nnaturale\r\nnautica\r\nnaviglio\r\nnebulosa\r\nnecrosi\r\nnegativo\r\nnegozio\r\nnemmeno\r\nneofita\r\nneretto\r\nnervo\r\nnessuno\r\nnettuno\r\nneutrale\r\nneve\r\nnevrotico\r\nnicchia\r\nninfa\r\nnitido\r\nnobile\r\nnocivo\r\nnodo\r\nnome\r\nnomina\r\nnordico\r\nnormale\r\nnorvegese\r\nnostrano\r\nnotare\r\nnotizia\r\nnotturno\r\nnovella\r\nnucleo\r\nnulla\r\nnumero\r\nnuovo\r\nnutrire\r\nnuvola\r\nnuziale\r\noasi\r\nobbedire\r\nobbligo\r\nobelisco\r\noblio\r\nobolo\r\nobsoleto\r\noccasione\r\nocchio\r\noccidente\r\noccorrere\r\noccultare\r\nocra\r\noculato\r\nodierno\r\nodorare\r\nofferta\r\noffrire\r\noffuscato\r\noggetto\r\noggi\r\nognuno\r\nolandese\r\nolfatto\r\noliato\r\noliva\r\nologramma\r\noltre\r\nomaggio\r\nombelico\r\nombra\r\nomega\r\nomissione\r\nondoso\r\nonere\r\nonice\r\nonnivoro\r\nonorevole\r\nonta\r\noperato\r\nopinione\r\nopposto\r\noracolo\r\norafo\r\nordine\r\norecchino\r\norefice\r\norfano\r\norganico\r\norigine\r\norizzonte\r\norma\r\normeggio\r\nornativo\r\norologio\r\norrendo\r\norribile\r\nortensia\r\nortica\r\norzata\r\norzo\r\nosare\r\noscurare\r\nosmosi\r\nospedale\r\nospite\r\nossa\r\nossidare\r\nostacolo\r\noste\r\notite\r\notre\r\nottagono\r\nottimo\r\nottobre\r\novale\r\novest\r\novino\r\noviparo\r\novocito\r\novunque\r\novviare\r\nozio\r\npacchetto\r\npace\r\npacifico\r\npadella\r\npadrone\r\npaese\r\npaga\r\npagina\r\npalazzina\r\npalesare\r\npallido\r\npalo\r\npalude\r\npandoro\r\npannello\r\npaolo\r\npaonazzo\r\npaprica\r\nparabola\r\nparcella\r\nparere\r\npargolo\r\npari\r\nparlato\r\nparola\r\npartire\r\nparvenza\r\nparziale\r\npassivo\r\npasticca\r\npatacca\r\npatologia\r\npattume\r\npavone\r\npeccato\r\npedalare\r\npedonale\r\npeggio\r\npeloso\r\npenare\r\npendice\r\npenisola\r\npennuto\r\npenombra\r\npensare\r\npentola\r\npepe\r\npepita\r\nperbene\r\npercorso\r\nperdonato\r\nperforare\r\npergamena\r\nperiodo\r\npermesso\r\nperno\r\nperplesso\r\npersuaso\r\npertugio\r\npervaso\r\npesatore\r\npesista\r\npeso\r\npestifero\r\npetalo\r\npettine\r\npetulante\r\npezzo\r\npiacere\r\npianta\r\npiattino\r\npiccino\r\npicozza\r\npiega\r\npietra\r\npiffero\r\npigiama\r\npigolio\r\npigro\r\npila\r\npilifero\r\npillola\r\npilota\r\npimpante\r\npineta\r\npinna\r\npinolo\r\npioggia\r\npiombo\r\npiramide\r\npiretico\r\npirite\r\npirolisi\r\npitone\r\npizzico\r\nplacebo\r\nplanare\r\nplasma\r\nplatano\r\nplenario\r\npochezza\r\npoderoso\r\npodismo\r\npoesia\r\npoggiare\r\npolenta\r\npoligono\r\npollice\r\npolmonite\r\npolpetta\r\npolso\r\npoltrona\r\npolvere\r\npomice\r\npomodoro\r\nponte\r\npopoloso\r\nporfido\r\nporoso\r\nporpora\r\nporre\r\nportata\r\nposa\r\npositivo\r\npossesso\r\npostulato\r\npotassio\r\npotere\r\npranzo\r\nprassi\r\npratica\r\nprecluso\r\npredica\r\nprefisso\r\npregiato\r\nprelievo\r\npremere\r\nprenotare\r\npreparato\r\npresenza\r\npretesto\r\nprevalso\r\nprima\r\nprincipe\r\nprivato\r\nproblema\r\nprocura\r\nprodurre\r\nprofumo\r\nprogetto\r\nprolunga\r\npromessa\r\npronome\r\nproposta\r\nproroga\r\nproteso\r\nprova\r\nprudente\r\nprugna\r\nprurito\r\npsiche\r\npubblico\r\npudica\r\npugilato\r\npugno\r\npulce\r\npulito\r\npulsante\r\npuntare\r\npupazzo\r\npupilla\r\npuro\r\nquadro\r\nqualcosa\r\nquasi\r\nquerela\r\nquota\r\nraccolto\r\nraddoppio\r\nradicale\r\nradunato\r\nraffica\r\nragazzo\r\nragione\r\nragno\r\nramarro\r\nramingo\r\nramo\r\nrandagio\r\nrantolare\r\nrapato\r\nrapina\r\nrappreso\r\nrasatura\r\nraschiato\r\nrasente\r\nrassegna\r\nrastrello\r\nrata\r\nravveduto\r\nreale\r\nrecepire\r\nrecinto\r\nrecluta\r\nrecondito\r\nrecupero\r\nreddito\r\nredimere\r\nregalato\r\nregistro\r\nregola\r\nregresso\r\nrelazione\r\nremare\r\nremoto\r\nrenna\r\nreplica\r\nreprimere\r\nreputare\r\nresa\r\nresidente\r\nresponso\r\nrestauro\r\nrete\r\nretina\r\nretorica\r\nrettifica\r\nrevocato\r\nriassunto\r\nribadire\r\nribelle\r\nribrezzo\r\nricarica\r\nricco\r\nricevere\r\nriciclato\r\nricordo\r\nricreduto\r\nridicolo\r\nridurre\r\nrifasare\r\nriflesso\r\nriforma\r\nrifugio\r\nrigare\r\nrigettato\r\nrighello\r\nrilassato\r\nrilevato\r\nrimanere\r\nrimbalzo\r\nrimedio\r\nrimorchio\r\nrinascita\r\nrincaro\r\nrinforzo\r\nrinnovo\r\nrinomato\r\nrinsavito\r\nrintocco\r\nrinuncia\r\nrinvenire\r\nriparato\r\nripetuto\r\nripieno\r\nriportare\r\nripresa\r\nripulire\r\nrisata\r\nrischio\r\nriserva\r\nrisibile\r\nriso\r\nrispetto\r\nristoro\r\nrisultato\r\nrisvolto\r\nritardo\r\nritegno\r\nritmico\r\nritrovo\r\nriunione\r\nriva\r\nriverso\r\nrivincita\r\nrivolto\r\nrizoma\r\nroba\r\nrobotico\r\nrobusto\r\nroccia\r\nroco\r\nrodaggio\r\nrodere\r\nroditore\r\nrogito\r\nrollio\r\nromantico\r\nrompere\r\nronzio\r\nrosolare\r\nrospo\r\nrotante\r\nrotondo\r\nrotula\r\nrovescio\r\nrubizzo\r\nrubrica\r\nruga\r\nrullino\r\nrumine\r\nrumoroso\r\nruolo\r\nrupe\r\nrussare\r\nrustico\r\nsabato\r\nsabbiare\r\nsabotato\r\nsagoma\r\nsalasso\r\nsaldatura\r\nsalgemma\r\nsalivare\r\nsalmone\r\nsalone\r\nsaltare\r\nsaluto\r\nsalvo\r\nsapere\r\nsapido\r\nsaporito\r\nsaraceno\r\nsarcasmo\r\nsarto\r\nsassoso\r\nsatellite\r\nsatira\r\nsatollo\r\nsaturno\r\nsavana\r\nsavio\r\nsaziato\r\nsbadiglio\r\nsbalzo\r\nsbancato\r\nsbarra\r\nsbattere\r\nsbavare\r\nsbendare\r\nsbirciare\r\nsbloccato\r\nsbocciato\r\nsbrinare\r\nsbruffone\r\nsbuffare\r\nscabroso\r\nscadenza\r\nscala\r\nscambiare\r\nscandalo\r\nscapola\r\nscarso\r\nscatenare\r\nscavato\r\nscelto\r\nscenico\r\nscettro\r\nscheda\r\nschiena\r\nsciarpa\r\nscienza\r\nscindere\r\nscippo\r\nsciroppo\r\nscivolo\r\nsclerare\r\nscodella\r\nscolpito\r\nscomparto\r\nsconforto\r\nscoprire\r\nscorta\r\nscossone\r\nscozzese\r\nscriba\r\nscrollare\r\nscrutinio\r\nscuderia\r\nscultore\r\nscuola\r\nscuro\r\nscusare\r\nsdebitare\r\nsdoganare\r\nseccatura\r\nsecondo\r\nsedano\r\nseggiola\r\nsegnalato\r\nsegregato\r\nseguito\r\nselciato\r\nselettivo\r\nsella\r\nselvaggio\r\nsemaforo\r\nsembrare\r\nseme\r\nseminato\r\nsempre\r\nsenso\r\nsentire\r\nsepolto\r\nsequenza\r\nserata\r\nserbato\r\nsereno\r\nserio\r\nserpente\r\nserraglio\r\nservire\r\nsestina\r\nsetola\r\nsettimana\r\nsfacelo\r\nsfaldare\r\nsfamato\r\nsfarzoso\r\nsfaticato\r\nsfera\r\nsfida\r\nsfilato\r\nsfinge\r\nsfocato\r\nsfoderare\r\nsfogo\r\nsfoltire\r\nsforzato\r\nsfratto\r\nsfruttato\r\nsfuggito\r\nsfumare\r\nsfuso\r\nsgabello\r\nsgarbato\r\nsgonfiare\r\nsgorbio\r\nsgrassato\r\nsguardo\r\nsibilo\r\nsiccome\r\nsierra\r\nsigla\r\nsignore\r\nsilenzio\r\nsillaba\r\nsimbolo\r\nsimpatico\r\nsimulato\r\nsinfonia\r\nsingolo\r\nsinistro\r\nsino\r\nsintesi\r\nsinusoide\r\nsipario\r\nsisma\r\nsistole\r\nsituato\r\nslitta\r\nslogatura\r\nsloveno\r\nsmarrito\r\nsmemorato\r\nsmentito\r\nsmeraldo\r\nsmilzo\r\nsmontare\r\nsmottato\r\nsmussato\r\nsnellire\r\nsnervato\r\nsnodo\r\nsobbalzo\r\nsobrio\r\nsoccorso\r\nsociale\r\nsodale\r\nsoffitto\r\nsogno\r\nsoldato\r\nsolenne\r\nsolido\r\nsollazzo\r\nsolo\r\nsolubile\r\nsolvente\r\nsomatico\r\nsomma\r\nsonda\r\nsonetto\r\nsonnifero\r\nsopire\r\nsoppeso\r\nsopra\r\nsorgere\r\nsorpasso\r\nsorriso\r\nsorso\r\nsorteggio\r\nsorvolato\r\nsospiro\r\nsosta\r\nsottile\r\nspada\r\nspalla\r\nspargere\r\nspatola\r\nspavento\r\nspazzola\r\nspecie\r\nspedire\r\nspegnere\r\nspelatura\r\nsperanza\r\nspessore\r\nspettrale\r\nspezzato\r\nspia\r\nspigoloso\r\nspillato\r\nspinoso\r\nspirale\r\nsplendido\r\nsportivo\r\nsposo\r\nspranga\r\nsprecare\r\nspronato\r\nspruzzo\r\nspuntino\r\nsquillo\r\nsradicare\r\nsrotolato\r\nstabile\r\nstacco\r\nstaffa\r\nstagnare\r\nstampato\r\nstantio\r\nstarnuto\r\nstasera\r\nstatuto\r\nstelo\r\nsteppa\r\nsterzo\r\nstiletto\r\nstima\r\nstirpe\r\nstivale\r\nstizzoso\r\nstonato\r\nstorico\r\nstrappo\r\nstregato\r\nstridulo\r\nstrozzare\r\nstrutto\r\nstuccare\r\nstufo\r\nstupendo\r\nsubentro\r\nsuccoso\r\nsudore\r\nsuggerito\r\nsugo\r\nsultano\r\nsuonare\r\nsuperbo\r\nsupporto\r\nsurgelato\r\nsurrogato\r\nsussurro\r\nsutura\r\nsvagare\r\nsvedese\r\nsveglio\r\nsvelare\r\nsvenuto\r\nsvezia\r\nsviluppo\r\nsvista\r\nsvizzera\r\nsvolta\r\nsvuotare\r\ntabacco\r\ntabulato\r\ntacciare\r\ntaciturno\r\ntale\r\ntalismano\r\ntampone\r\ntannino\r\ntara\r\ntardivo\r\ntargato\r\ntariffa\r\ntarpare\r\ntartaruga\r\ntasto\r\ntattico\r\ntaverna\r\ntavolata\r\ntazza\r\nteca\r\ntecnico\r\ntelefono\r\ntemerario\r\ntempo\r\ntemuto\r\ntendone\r\ntenero\r\ntensione\r\ntentacolo\r\nteorema\r\nterme\r\nterrazzo\r\nterzetto\r\ntesi\r\ntesserato\r\ntestato\r\ntetro\r\ntettoia\r\ntifare\r\ntigella\r\ntimbro\r\ntinto\r\ntipico\r\ntipografo\r\ntiraggio\r\ntiro\r\ntitanio\r\ntitolo\r\ntitubante\r\ntizio\r\ntizzone\r\ntoccare\r\ntollerare\r\ntolto\r\ntombola\r\ntomo\r\ntonfo\r\ntonsilla\r\ntopazio\r\ntopologia\r\ntoppa\r\ntorba\r\ntornare\r\ntorrone\r\ntortora\r\ntoscano\r\ntossire\r\ntostatura\r\ntotano\r\ntrabocco\r\ntrachea\r\ntrafila\r\ntragedia\r\ntralcio\r\ntramonto\r\ntransito\r\ntrapano\r\ntrarre\r\ntrasloco\r\ntrattato\r\ntrave\r\ntreccia\r\ntremolio\r\ntrespolo\r\ntributo\r\ntricheco\r\ntrifoglio\r\ntrillo\r\ntrincea\r\ntrio\r\ntristezza\r\ntriturato\r\ntrivella\r\ntromba\r\ntrono\r\ntroppo\r\ntrottola\r\ntrovare\r\ntruccato\r\ntubatura\r\ntuffato\r\ntulipano\r\ntumulto\r\ntunisia\r\nturbare\r\nturchino\r\ntuta\r\ntutela\r\nubicato\r\nuccello\r\nuccisore\r\nudire\r\nuditivo\r\nuffa\r\nufficio\r\nuguale\r\nulisse\r\nultimato\r\numano\r\numile\r\numorismo\r\nuncinetto\r\nungere\r\nungherese\r\nunicorno\r\nunificato\r\nunisono\r\nunitario\r\nunte\r\nuovo\r\nupupa\r\nuragano\r\nurgenza\r\nurlo\r\nusanza\r\nusato\r\nuscito\r\nusignolo\r\nusuraio\r\nutensile\r\nutilizzo\r\nutopia\r\nvacante\r\nvaccinato\r\nvagabondo\r\nvagliato\r\nvalanga\r\nvalgo\r\nvalico\r\nvalletta\r\nvaloroso\r\nvalutare\r\nvalvola\r\nvampata\r\nvangare\r\nvanitoso\r\nvano\r\nvantaggio\r\nvanvera\r\nvapore\r\nvarano\r\nvarcato\r\nvariante\r\nvasca\r\nvedetta\r\nvedova\r\nveduto\r\nvegetale\r\nveicolo\r\nvelcro\r\nvelina\r\nvelluto\r\nveloce\r\nvenato\r\nvendemmia\r\nvento\r\nverace\r\nverbale\r\nvergogna\r\nverifica\r\nvero\r\nverruca\r\nverticale\r\nvescica\r\nvessillo\r\nvestale\r\nveterano\r\nvetrina\r\nvetusto\r\nviandante\r\nvibrante\r\nvicenda\r\nvichingo\r\nvicinanza\r\nvidimare\r\nvigilia\r\nvigneto\r\nvigore\r\nvile\r\nvillano\r\nvimini\r\nvincitore\r\nviola\r\nvipera\r\nvirgola\r\nvirologo\r\nvirulento\r\nviscoso\r\nvisione\r\nvispo\r\nvissuto\r\nvisura\r\nvita\r\nvitello\r\nvittima\r\nvivanda\r\nvivido\r\nviziare\r\nvoce\r\nvoga\r\nvolatile\r\nvolere\r\nvolpe\r\nvoragine\r\nvulcano\r\nzampogna\r\nzanna\r\nzappato\r\nzattera\r\nzavorra\r\nzefiro\r\nzelante\r\nzelo\r\nzenzero\r\nzerbino\r\nzibetto\r\nzinco\r\nzircone\r\nzitto\r\nzolla\r\nzotico\r\nzucchero\r\nzufolo\r\nzulu\r\nzuppa`.split('\\n');\r\n", "export const wordlist = `あいこくしん\r\nあいさつ\r\nあいだ\r\nあおぞら\r\nあかちゃん\r\nあきる\r\nあけがた\r\nあける\r\nあこがれる\r\nあさい\r\nあさひ\r\nあしあと\r\nあじわう\r\nあずかる\r\nあずき\r\nあそぶ\r\nあたえる\r\nあたためる\r\nあたりまえ\r\nあたる\r\nあつい\r\nあつかう\r\nあっしゅく\r\nあつまり\r\nあつめる\r\nあてな\r\nあてはまる\r\nあひる\r\nあぶら\r\nあぶる\r\nあふれる\r\nあまい\r\nあまど\r\nあまやかす\r\nあまり\r\nあみもの\r\nあめりか\r\nあやまる\r\nあゆむ\r\nあらいぐま\r\nあらし\r\nあらすじ\r\nあらためる\r\nあらゆる\r\nあらわす\r\nありがとう\r\nあわせる\r\nあわてる\r\nあんい\r\nあんがい\r\nあんこ\r\nあんぜん\r\nあんてい\r\nあんない\r\nあんまり\r\nいいだす\r\nいおん\r\nいがい\r\nいがく\r\nいきおい\r\nいきなり\r\nいきもの\r\nいきる\r\nいくじ\r\nいくぶん\r\nいけばな\r\nいけん\r\nいこう\r\nいこく\r\nいこつ\r\nいさましい\r\nいさん\r\nいしき\r\nいじゅう\r\nいじょう\r\nいじわる\r\nいずみ\r\nいずれ\r\nいせい\r\nいせえび\r\nいせかい\r\nいせき\r\nいぜん\r\nいそうろう\r\nいそがしい\r\nいだい\r\nいだく\r\nいたずら\r\nいたみ\r\nいたりあ\r\nいちおう\r\nいちじ\r\nいちど\r\nいちば\r\nいちぶ\r\nいちりゅう\r\nいつか\r\nいっしゅん\r\nいっせい\r\nいっそう\r\nいったん\r\nいっち\r\nいってい\r\nいっぽう\r\nいてざ\r\nいてん\r\nいどう\r\nいとこ\r\nいない\r\nいなか\r\nいねむり\r\nいのち\r\nいのる\r\nいはつ\r\nいばる\r\nいはん\r\nいびき\r\nいひん\r\nいふく\r\nいへん\r\nいほう\r\nいみん\r\nいもうと\r\nいもたれ\r\nいもり\r\nいやがる\r\nいやす\r\nいよかん\r\nいよく\r\nいらい\r\nいらすと\r\nいりぐち\r\nいりょう\r\nいれい\r\nいれもの\r\nいれる\r\nいろえんぴつ\r\nいわい\r\nいわう\r\nいわかん\r\nいわば\r\nいわゆる\r\nいんげんまめ\r\nいんさつ\r\nいんしょう\r\nいんよう\r\nうえき\r\nうえる\r\nうおざ\r\nうがい\r\nうかぶ\r\nうかべる\r\nうきわ\r\nうくらいな\r\nうくれれ\r\nうけたまわる\r\nうけつけ\r\nうけとる\r\nうけもつ\r\nうける\r\nうごかす\r\nうごく\r\nうこん\r\nうさぎ\r\nうしなう\r\nうしろがみ\r\nうすい\r\nうすぎ\r\nうすぐらい\r\nうすめる\r\nうせつ\r\nうちあわせ\r\nうちがわ\r\nうちき\r\nうちゅう\r\nうっかり\r\nうつくしい\r\nうったえる\r\nうつる\r\nうどん\r\nうなぎ\r\nうなじ\r\nうなずく\r\nうなる\r\nうねる\r\nうのう\r\nうぶげ\r\nうぶごえ\r\nうまれる\r\nうめる\r\nうもう\r\nうやまう\r\nうよく\r\nうらがえす\r\nうらぐち\r\nうらない\r\nうりあげ\r\nうりきれ\r\nうるさい\r\nうれしい\r\nうれゆき\r\nうれる\r\nうろこ\r\nうわき\r\nうわさ\r\nうんこう\r\nうんちん\r\nうんてん\r\nうんどう\r\nえいえん\r\nえいが\r\nえいきょう\r\nえいご\r\nえいせい\r\nえいぶん\r\nえいよう\r\nえいわ\r\nえおり\r\nえがお\r\nえがく\r\nえきたい\r\nえくせる\r\nえしゃく\r\nえすて\r\nえつらん\r\nえのぐ\r\nえほうまき\r\nえほん\r\nえまき\r\nえもじ\r\nえもの\r\nえらい\r\nえらぶ\r\nえりあ\r\nえんえん\r\nえんかい\r\nえんぎ\r\nえんげき\r\nえんしゅう\r\nえんぜつ\r\nえんそく\r\nえんちょう\r\nえんとつ\r\nおいかける\r\nおいこす\r\nおいしい\r\nおいつく\r\nおうえん\r\nおうさま\r\nおうじ\r\nおうせつ\r\nおうたい\r\nおうふく\r\nおうべい\r\nおうよう\r\nおえる\r\nおおい\r\nおおう\r\nおおどおり\r\nおおや\r\nおおよそ\r\nおかえり\r\nおかず\r\nおがむ\r\nおかわり\r\nおぎなう\r\nおきる\r\nおくさま\r\nおくじょう\r\nおくりがな\r\nおくる\r\nおくれる\r\nおこす\r\nおこなう\r\nおこる\r\nおさえる\r\nおさない\r\nおさめる\r\nおしいれ\r\nおしえる\r\nおじぎ\r\nおじさん\r\nおしゃれ\r\nおそらく\r\nおそわる\r\nおたがい\r\nおたく\r\nおだやか\r\nおちつく\r\nおっと\r\nおつり\r\nおでかけ\r\nおとしもの\r\nおとなしい\r\nおどり\r\nおどろかす\r\nおばさん\r\nおまいり\r\nおめでとう\r\nおもいで\r\nおもう\r\nおもたい\r\nおもちゃ\r\nおやつ\r\nおやゆび\r\nおよぼす\r\nおらんだ\r\nおろす\r\nおんがく\r\nおんけい\r\nおんしゃ\r\nおんせん\r\nおんだん\r\nおんちゅう\r\nおんどけい\r\nかあつ\r\nかいが\r\nがいき\r\nがいけん\r\nがいこう\r\nかいさつ\r\nかいしゃ\r\nかいすいよく\r\nかいぜん\r\nかいぞうど\r\nかいつう\r\nかいてん\r\nかいとう\r\nかいふく\r\nがいへき\r\nかいほう\r\nかいよう\r\nがいらい\r\nかいわ\r\nかえる\r\nかおり\r\nかかえる\r\nかがく\r\nかがし\r\nかがみ\r\nかくご\r\nかくとく\r\nかざる\r\nがぞう\r\nかたい\r\nかたち\r\nがちょう\r\nがっきゅう\r\nがっこう\r\nがっさん\r\nがっしょう\r\nかなざわし\r\nかのう\r\nがはく\r\nかぶか\r\nかほう\r\nかほご\r\nかまう\r\nかまぼこ\r\nかめれおん\r\nかゆい\r\nかようび\r\nからい\r\nかるい\r\nかろう\r\nかわく\r\nかわら\r\nがんか\r\nかんけい\r\nかんこう\r\nかんしゃ\r\nかんそう\r\nかんたん\r\nかんち\r\nがんばる\r\nきあい\r\nきあつ\r\nきいろ\r\nぎいん\r\nきうい\r\nきうん\r\nきえる\r\nきおう\r\nきおく\r\nきおち\r\nきおん\r\nきかい\r\nきかく\r\nきかんしゃ\r\nききて\r\nきくばり\r\nきくらげ\r\nきけんせい\r\nきこう\r\nきこえる\r\nきこく\r\nきさい\r\nきさく\r\nきさま\r\nきさらぎ\r\nぎじかがく\r\nぎしき\r\nぎじたいけん\r\nぎじにってい\r\nぎじゅつしゃ\r\nきすう\r\nきせい\r\nきせき\r\nきせつ\r\nきそう\r\nきぞく\r\nきぞん\r\nきたえる\r\nきちょう\r\nきつえん\r\nぎっちり\r\nきつつき\r\nきつね\r\nきてい\r\nきどう\r\nきどく\r\nきない\r\nきなが\r\nきなこ\r\nきぬごし\r\nきねん\r\nきのう\r\nきのした\r\nきはく\r\nきびしい\r\nきひん\r\nきふく\r\nきぶん\r\nきぼう\r\nきほん\r\nきまる\r\nきみつ\r\nきむずかしい\r\nきめる\r\nきもだめし\r\nきもち\r\nきもの\r\nきゃく\r\nきやく\r\nぎゅうにく\r\nきよう\r\nきょうりゅう\r\nきらい\r\nきらく\r\nきりん\r\nきれい\r\nきれつ\r\nきろく\r\nぎろん\r\nきわめる\r\nぎんいろ\r\nきんかくじ\r\nきんじょ\r\nきんようび\r\nぐあい\r\nくいず\r\nくうかん\r\nくうき\r\nくうぐん\r\nくうこう\r\nぐうせい\r\nくうそう\r\nぐうたら\r\nくうふく\r\nくうぼ\r\nくかん\r\nくきょう\r\nくげん\r\nぐこう\r\nくさい\r\nくさき\r\nくさばな\r\nくさる\r\nくしゃみ\r\nくしょう\r\nくすのき\r\nくすりゆび\r\nくせげ\r\nくせん\r\nぐたいてき\r\nくださる\r\nくたびれる\r\nくちこみ\r\nくちさき\r\nくつした\r\nぐっすり\r\nくつろぐ\r\nくとうてん\r\nくどく\r\nくなん\r\nくねくね\r\nくのう\r\nくふう\r\nくみあわせ\r\nくみたてる\r\nくめる\r\nくやくしょ\r\nくらす\r\nくらべる\r\nくるま\r\nくれる\r\nくろう\r\nくわしい\r\nぐんかん\r\nぐんしょく\r\nぐんたい\r\nぐんて\r\nけあな\r\nけいかく\r\nけいけん\r\nけいこ\r\nけいさつ\r\nげいじゅつ\r\nけいたい\r\nげいのうじん\r\nけいれき\r\nけいろ\r\nけおとす\r\nけおりもの\r\nげきか\r\nげきげん\r\nげきだん\r\nげきちん\r\nげきとつ\r\nげきは\r\nげきやく\r\nげこう\r\nげこくじょう\r\nげざい\r\nけさき\r\nげざん\r\nけしき\r\nけしごむ\r\nけしょう\r\nげすと\r\nけたば\r\nけちゃっぷ\r\nけちらす\r\nけつあつ\r\nけつい\r\nけつえき\r\nけっこん\r\nけつじょ\r\nけっせき\r\nけってい\r\nけつまつ\r\nげつようび\r\nげつれい\r\nけつろん\r\nげどく\r\nけとばす\r\nけとる\r\nけなげ\r\nけなす\r\nけなみ\r\nけぬき\r\nげねつ\r\nけねん\r\nけはい\r\nげひん\r\nけぶかい\r\nげぼく\r\nけまり\r\nけみかる\r\nけむし\r\nけむり\r\nけもの\r\nけらい\r\nけろけろ\r\nけわしい\r\nけんい\r\nけんえつ\r\nけんお\r\nけんか\r\nげんき\r\nけんげん\r\nけんこう\r\nけんさく\r\nけんしゅう\r\nけんすう\r\nげんそう\r\nけんちく\r\nけんてい\r\nけんとう\r\nけんない\r\nけんにん\r\nげんぶつ\r\nけんま\r\nけんみん\r\nけんめい\r\nけんらん\r\nけんり\r\nこあくま\r\nこいぬ\r\nこいびと\r\nごうい\r\nこうえん\r\nこうおん\r\nこうかん\r\nごうきゅう\r\nごうけい\r\nこうこう\r\nこうさい\r\nこうじ\r\nこうすい\r\nごうせい\r\nこうそく\r\nこうたい\r\nこうちゃ\r\nこうつう\r\nこうてい\r\nこうどう\r\nこうない\r\nこうはい\r\nごうほう\r\nごうまん\r\nこうもく\r\nこうりつ\r\nこえる\r\nこおり\r\nごかい\r\nごがつ\r\nごかん\r\nこくご\r\nこくさい\r\nこくとう\r\nこくない\r\nこくはく\r\nこぐま\r\nこけい\r\nこける\r\nここのか\r\nこころ\r\nこさめ\r\nこしつ\r\nこすう\r\nこせい\r\nこせき\r\nこぜん\r\nこそだて\r\nこたい\r\nこたえる\r\nこたつ\r\nこちょう\r\nこっか\r\nこつこつ\r\nこつばん\r\nこつぶ\r\nこてい\r\nこてん\r\nことがら\r\nことし\r\nことば\r\nことり\r\nこなごな\r\nこねこね\r\nこのまま\r\nこのみ\r\nこのよ\r\nごはん\r\nこひつじ\r\nこふう\r\nこふん\r\nこぼれる\r\nごまあぶら\r\nこまかい\r\nごますり\r\nこまつな\r\nこまる\r\nこむぎこ\r\nこもじ\r\nこもち\r\nこもの\r\nこもん\r\nこやく\r\nこやま\r\nこゆう\r\nこゆび\r\nこよい\r\nこよう\r\nこりる\r\nこれくしょん\r\nころっけ\r\nこわもて\r\nこわれる\r\nこんいん\r\nこんかい\r\nこんき\r\nこんしゅう\r\nこんすい\r\nこんだて\r\nこんとん\r\nこんなん\r\nこんびに\r\nこんぽん\r\nこんまけ\r\nこんや\r\nこんれい\r\nこんわく\r\nざいえき\r\nさいかい\r\nさいきん\r\nざいげん\r\nざいこ\r\nさいしょ\r\nさいせい\r\nざいたく\r\nざいちゅう\r\nさいてき\r\nざいりょう\r\nさうな\r\nさかいし\r\nさがす\r\nさかな\r\nさかみち\r\nさがる\r\nさぎょう\r\nさくし\r\nさくひん\r\nさくら\r\nさこく\r\nさこつ\r\nさずかる\r\nざせき\r\nさたん\r\nさつえい\r\nざつおん\r\nざっか\r\nざつがく\r\nさっきょく\r\nざっし\r\nさつじん\r\nざっそう\r\nさつたば\r\nさつまいも\r\nさてい\r\nさといも\r\nさとう\r\nさとおや\r\nさとし\r\nさとる\r\nさのう\r\nさばく\r\nさびしい\r\nさべつ\r\nさほう\r\nさほど\r\nさます\r\nさみしい\r\nさみだれ\r\nさむけ\r\nさめる\r\nさやえんどう\r\nさゆう\r\nさよう\r\nさよく\r\nさらだ\r\nざるそば\r\nさわやか\r\nさわる\r\nさんいん\r\nさんか\r\nさんきゃく\r\nさんこう\r\nさんさい\r\nざんしょ\r\nさんすう\r\nさんせい\r\nさんそ\r\nさんち\r\nさんま\r\nさんみ\r\nさんらん\r\nしあい\r\nしあげ\r\nしあさって\r\nしあわせ\r\nしいく\r\nしいん\r\nしうち\r\nしえい\r\nしおけ\r\nしかい\r\nしかく\r\nじかん\r\nしごと\r\nしすう\r\nじだい\r\nしたうけ\r\nしたぎ\r\nしたて\r\nしたみ\r\nしちょう\r\nしちりん\r\nしっかり\r\nしつじ\r\nしつもん\r\nしてい\r\nしてき\r\nしてつ\r\nじてん\r\nじどう\r\nしなぎれ\r\nしなもの\r\nしなん\r\nしねま\r\nしねん\r\nしのぐ\r\nしのぶ\r\nしはい\r\nしばかり\r\nしはつ\r\nしはらい\r\nしはん\r\nしひょう\r\nしふく\r\nじぶん\r\nしへい\r\nしほう\r\nしほん\r\nしまう\r\nしまる\r\nしみん\r\nしむける\r\nじむしょ\r\nしめい\r\nしめる\r\nしもん\r\nしゃいん\r\nしゃうん\r\nしゃおん\r\nじゃがいも\r\nしやくしょ\r\nしゃくほう\r\nしゃけん\r\nしゃこ\r\nしゃざい\r\nしゃしん\r\nしゃせん\r\nしゃそう\r\nしゃたい\r\nしゃちょう\r\nしゃっきん\r\nじゃま\r\nしゃりん\r\nしゃれい\r\nじゆう\r\nじゅうしょ\r\nしゅくはく\r\nじゅしん\r\nしゅっせき\r\nしゅみ\r\nしゅらば\r\nじゅんばん\r\nしょうかい\r\nしょくたく\r\nしょっけん\r\nしょどう\r\nしょもつ\r\nしらせる\r\nしらべる\r\nしんか\r\nしんこう\r\nじんじゃ\r\nしんせいじ\r\nしんちく\r\nしんりん\r\nすあげ\r\nすあし\r\nすあな\r\nずあん\r\nすいえい\r\nすいか\r\nすいとう\r\nずいぶん\r\nすいようび\r\nすうがく\r\nすうじつ\r\nすうせん\r\nすおどり\r\nすきま\r\nすくう\r\nすくない\r\nすける\r\nすごい\r\nすこし\r\nずさん\r\nすずしい\r\nすすむ\r\nすすめる\r\nすっかり\r\nずっしり\r\nずっと\r\nすてき\r\nすてる\r\nすねる\r\nすのこ\r\nすはだ\r\nすばらしい\r\nずひょう\r\nずぶぬれ\r\nすぶり\r\nすふれ\r\nすべて\r\nすべる\r\nずほう\r\nすぼん\r\nすまい\r\nすめし\r\nすもう\r\nすやき\r\nすらすら\r\nするめ\r\nすれちがう\r\nすろっと\r\nすわる\r\nすんぜん\r\nすんぽう\r\nせあぶら\r\nせいかつ\r\nせいげん\r\nせいじ\r\nせいよう\r\nせおう\r\nせかいかん\r\nせきにん\r\nせきむ\r\nせきゆ\r\nせきらんうん\r\nせけん\r\nせこう\r\nせすじ\r\nせたい\r\nせたけ\r\nせっかく\r\nせっきゃく\r\nぜっく\r\nせっけん\r\nせっこつ\r\nせっさたくま\r\nせつぞく\r\nせつだん\r\nせつでん\r\nせっぱん\r\nせつび\r\nせつぶん\r\nせつめい\r\nせつりつ\r\nせなか\r\nせのび\r\nせはば\r\nせびろ\r\nせぼね\r\nせまい\r\nせまる\r\nせめる\r\nせもたれ\r\nせりふ\r\nぜんあく\r\nせんい\r\nせんえい\r\nせんか\r\nせんきょ\r\nせんく\r\nせんげん\r\nぜんご\r\nせんさい\r\nせんしゅ\r\nせんすい\r\nせんせい\r\nせんぞ\r\nせんたく\r\nせんちょう\r\nせんてい\r\nせんとう\r\nせんぬき\r\nせんねん\r\nせんぱい\r\nぜんぶ\r\nぜんぽう\r\nせんむ\r\nせんめんじょ\r\nせんもん\r\nせんやく\r\nせんゆう\r\nせんよう\r\nぜんら\r\nぜんりゃく\r\nせんれい\r\nせんろ\r\nそあく\r\nそいとげる\r\nそいね\r\nそうがんきょう\r\nそうき\r\nそうご\r\nそうしん\r\nそうだん\r\nそうなん\r\nそうび\r\nそうめん\r\nそうり\r\nそえもの\r\nそえん\r\nそがい\r\nそげき\r\nそこう\r\nそこそこ\r\nそざい\r\nそしな\r\nそせい\r\nそせん\r\nそそぐ\r\nそだてる\r\nそつう\r\nそつえん\r\nそっかん\r\nそつぎょう\r\nそっけつ\r\nそっこう\r\nそっせん\r\nそっと\r\nそとがわ\r\nそとづら\r\nそなえる\r\nそなた\r\nそふぼ\r\nそぼく\r\nそぼろ\r\nそまつ\r\nそまる\r\nそむく\r\nそむりえ\r\nそめる\r\nそもそも\r\nそよかぜ\r\nそらまめ\r\nそろう\r\nそんかい\r\nそんけい\r\nそんざい\r\nそんしつ\r\nそんぞく\r\nそんちょう\r\nぞんび\r\nぞんぶん\r\nそんみん\r\nたあい\r\nたいいん\r\nたいうん\r\nたいえき\r\nたいおう\r\nだいがく\r\nたいき\r\nたいぐう\r\nたいけん\r\nたいこ\r\nたいざい\r\nだいじょうぶ\r\nだいすき\r\nたいせつ\r\nたいそう\r\nだいたい\r\nたいちょう\r\nたいてい\r\nだいどころ\r\nたいない\r\nたいねつ\r\nたいのう\r\nたいはん\r\nだいひょう\r\nたいふう\r\nたいへん\r\nたいほ\r\nたいまつばな\r\nたいみんぐ\r\nたいむ\r\nたいめん\r\nたいやき\r\nたいよう\r\nたいら\r\nたいりょく\r\nたいる\r\nたいわん\r\nたうえ\r\nたえる\r\nたおす\r\nたおる\r\nたおれる\r\nたかい\r\nたかね\r\nたきび\r\nたくさん\r\nたこく\r\nたこやき\r\nたさい\r\nたしざん\r\nだじゃれ\r\nたすける\r\nたずさわる\r\nたそがれ\r\nたたかう\r\nたたく\r\nただしい\r\nたたみ\r\nたちばな\r\nだっかい\r\nだっきゃく\r\nだっこ\r\nだっしゅつ\r\nだったい\r\nたてる\r\nたとえる\r\nたなばた\r\nたにん\r\nたぬき\r\nたのしみ\r\nたはつ\r\nたぶん\r\nたべる\r\nたぼう\r\nたまご\r\nたまる\r\nだむる\r\nためいき\r\nためす\r\nためる\r\nたもつ\r\nたやすい\r\nたよる\r\nたらす\r\nたりきほんがん\r\nたりょう\r\nたりる\r\nたると\r\nたれる\r\nたれんと\r\nたろっと\r\nたわむれる\r\nだんあつ\r\nたんい\r\nたんおん\r\nたんか\r\nたんき\r\nたんけん\r\nたんご\r\nたんさん\r\nたんじょうび\r\nだんせい\r\nたんそく\r\nたんたい\r\nだんち\r\nたんてい\r\nたんとう\r\nだんな\r\nたんにん\r\nだんねつ\r\nたんのう\r\nたんぴん\r\nだんぼう\r\nたんまつ\r\nたんめい\r\nだんれつ\r\nだんろ\r\nだんわ\r\nちあい\r\nちあん\r\nちいき\r\nちいさい\r\nちえん\r\nちかい\r\nちから\r\nちきゅう\r\nちきん\r\nちけいず\r\nちけん\r\nちこく\r\nちさい\r\nちしき\r\nちしりょう\r\nちせい\r\nちそう\r\nちたい\r\nちたん\r\nちちおや\r\nちつじょ\r\nちてき\r\nちてん\r\nちぬき\r\nちぬり\r\nちのう\r\nちひょう\r\nちへいせん\r\nちほう\r\nちまた\r\nちみつ\r\nちみどろ\r\nちめいど\r\nちゃんこなべ\r\nちゅうい\r\nちゆりょく\r\nちょうし\r\nちょさくけん\r\nちらし\r\nちらみ\r\nちりがみ\r\nちりょう\r\nちるど\r\nちわわ\r\nちんたい\r\nちんもく\r\nついか\r\nついたち\r\nつうか\r\nつうじょう\r\nつうはん\r\nつうわ\r\nつかう\r\nつかれる\r\nつくね\r\nつくる\r\nつけね\r\nつける\r\nつごう\r\nつたえる\r\nつづく\r\nつつじ\r\nつつむ\r\nつとめる\r\nつながる\r\nつなみ\r\nつねづね\r\nつのる\r\nつぶす\r\nつまらない\r\nつまる\r\nつみき\r\nつめたい\r\nつもり\r\nつもる\r\nつよい\r\nつるぼ\r\nつるみく\r\nつわもの\r\nつわり\r\nてあし\r\nてあて\r\nてあみ\r\nていおん\r\nていか\r\nていき\r\nていけい\r\nていこく\r\nていさつ\r\nていし\r\nていせい\r\nていたい\r\nていど\r\nていねい\r\nていひょう\r\nていへん\r\nていぼう\r\nてうち\r\nておくれ\r\nてきとう\r\nてくび\r\nでこぼこ\r\nてさぎょう\r\nてさげ\r\nてすり\r\nてそう\r\nてちがい\r\nてちょう\r\nてつがく\r\nてつづき\r\nでっぱ\r\nてつぼう\r\nてつや\r\nでぬかえ\r\nてぬき\r\nてぬぐい\r\nてのひら\r\nてはい\r\nてぶくろ\r\nてふだ\r\nてほどき\r\nてほん\r\nてまえ\r\nてまきずし\r\nてみじか\r\nてみやげ\r\nてらす\r\nてれび\r\nてわけ\r\nてわたし\r\nでんあつ\r\nてんいん\r\nてんかい\r\nてんき\r\nてんぐ\r\nてんけん\r\nてんごく\r\nてんさい\r\nてんし\r\nてんすう\r\nでんち\r\nてんてき\r\nてんとう\r\nてんない\r\nてんぷら\r\nてんぼうだい\r\nてんめつ\r\nてんらんかい\r\nでんりょく\r\nでんわ\r\nどあい\r\nといれ\r\nどうかん\r\nとうきゅう\r\nどうぐ\r\nとうし\r\nとうむぎ\r\nとおい\r\nとおか\r\nとおく\r\nとおす\r\nとおる\r\nとかい\r\nとかす\r\nときおり\r\nときどき\r\nとくい\r\nとくしゅう\r\nとくてん\r\nとくに\r\nとくべつ\r\nとけい\r\nとける\r\nとこや\r\nとさか\r\nとしょかん\r\nとそう\r\nとたん\r\nとちゅう\r\nとっきゅう\r\nとっくん\r\nとつぜん\r\nとつにゅう\r\nとどける\r\nととのえる\r\nとない\r\nとなえる\r\nとなり\r\nとのさま\r\nとばす\r\nどぶがわ\r\nとほう\r\nとまる\r\nとめる\r\nともだち\r\nともる\r\nどようび\r\nとらえる\r\nとんかつ\r\nどんぶり\r\nないかく\r\nないこう\r\nないしょ\r\nないす\r\nないせん\r\nないそう\r\nなおす\r\nながい\r\nなくす\r\nなげる\r\nなこうど\r\nなさけ\r\nなたでここ\r\nなっとう\r\nなつやすみ\r\nななおし\r\nなにごと\r\nなにもの\r\nなにわ\r\nなのか\r\nなふだ\r\nなまいき\r\nなまえ\r\nなまみ\r\nなみだ\r\nなめらか\r\nなめる\r\nなやむ\r\nならう\r\nならび\r\nならぶ\r\nなれる\r\nなわとび\r\nなわばり\r\nにあう\r\nにいがた\r\nにうけ\r\nにおい\r\nにかい\r\nにがて\r\nにきび\r\nにくしみ\r\nにくまん\r\nにげる\r\nにさんかたんそ\r\nにしき\r\nにせもの\r\nにちじょう\r\nにちようび\r\nにっか\r\nにっき\r\nにっけい\r\nにっこう\r\nにっさん\r\nにっしょく\r\nにっすう\r\nにっせき\r\nにってい\r\nになう\r\nにほん\r\nにまめ\r\nにもつ\r\nにやり\r\nにゅういん\r\nにりんしゃ\r\nにわとり\r\nにんい\r\nにんか\r\nにんき\r\nにんげん\r\nにんしき\r\nにんずう\r\nにんそう\r\nにんたい\r\nにんち\r\nにんてい\r\nにんにく\r\nにんぷ\r\nにんまり\r\nにんむ\r\nにんめい\r\nにんよう\r\nぬいくぎ\r\nぬかす\r\nぬぐいとる\r\nぬぐう\r\nぬくもり\r\nぬすむ\r\nぬまえび\r\nぬめり\r\nぬらす\r\nぬんちゃく\r\nねあげ\r\nねいき\r\nねいる\r\nねいろ\r\nねぐせ\r\nねくたい\r\nねくら\r\nねこぜ\r\nねこむ\r\nねさげ\r\nねすごす\r\nねそべる\r\nねだん\r\nねつい\r\nねっしん\r\nねつぞう\r\nねったいぎょ\r\nねぶそく\r\nねふだ\r\nねぼう\r\nねほりはほり\r\nねまき\r\nねまわし\r\nねみみ\r\nねむい\r\nねむたい\r\nねもと\r\nねらう\r\nねわざ\r\nねんいり\r\nねんおし\r\nねんかん\r\nねんきん\r\nねんぐ\r\nねんざ\r\nねんし\r\nねんちゃく\r\nねんど\r\nねんぴ\r\nねんぶつ\r\nねんまつ\r\nねんりょう\r\nねんれい\r\nのいず\r\nのおづま\r\nのがす\r\nのきなみ\r\nのこぎり\r\nのこす\r\nのこる\r\nのせる\r\nのぞく\r\nのぞむ\r\nのたまう\r\nのちほど\r\nのっく\r\nのばす\r\nのはら\r\nのべる\r\nのぼる\r\nのみもの\r\nのやま\r\nのらいぬ\r\nのらねこ\r\nのりもの\r\nのりゆき\r\nのれん\r\nのんき\r\nばあい\r\nはあく\r\nばあさん\r\nばいか\r\nばいく\r\nはいけん\r\nはいご\r\nはいしん\r\nはいすい\r\nはいせん\r\nはいそう\r\nはいち\r\nばいばい\r\nはいれつ\r\nはえる\r\nはおる\r\nはかい\r\nばかり\r\nはかる\r\nはくしゅ\r\nはけん\r\nはこぶ\r\nはさみ\r\nはさん\r\nはしご\r\nばしょ\r\nはしる\r\nはせる\r\nぱそこん\r\nはそん\r\nはたん\r\nはちみつ\r\nはつおん\r\nはっかく\r\nはづき\r\nはっきり\r\nはっくつ\r\nはっけん\r\nはっこう\r\nはっさん\r\nはっしん\r\nはったつ\r\nはっちゅう\r\nはってん\r\nはっぴょう\r\nはっぽう\r\nはなす\r\nはなび\r\nはにかむ\r\nはぶらし\r\nはみがき\r\nはむかう\r\nはめつ\r\nはやい\r\nはやし\r\nはらう\r\nはろうぃん\r\nはわい\r\nはんい\r\nはんえい\r\nはんおん\r\nはんかく\r\nはんきょう\r\nばんぐみ\r\nはんこ\r\nはんしゃ\r\nはんすう\r\nはんだん\r\nぱんち\r\nぱんつ\r\nはんてい\r\nはんとし\r\nはんのう\r\nはんぱ\r\nはんぶん\r\nはんぺん\r\nはんぼうき\r\nはんめい\r\nはんらん\r\nはんろん\r\nひいき\r\nひうん\r\nひえる\r\nひかく\r\nひかり\r\nひかる\r\nひかん\r\nひくい\r\nひけつ\r\nひこうき\r\nひこく\r\nひさい\r\nひさしぶり\r\nひさん\r\nびじゅつかん\r\nひしょ\r\nひそか\r\nひそむ\r\nひたむき\r\nひだり\r\nひたる\r\nひつぎ\r\nひっこし\r\nひっし\r\nひつじゅひん\r\nひっす\r\nひつぜん\r\nぴったり\r\nぴっちり\r\nひつよう\r\nひてい\r\nひとごみ\r\nひなまつり\r\nひなん\r\nひねる\r\nひはん\r\nひびく\r\nひひょう\r\nひほう\r\nひまわり\r\nひまん\r\nひみつ\r\nひめい\r\nひめじし\r\nひやけ\r\nひやす\r\nひよう\r\nびょうき\r\nひらがな\r\nひらく\r\nひりつ\r\nひりょう\r\nひるま\r\nひるやすみ\r\nひれい\r\nひろい\r\nひろう\r\nひろき\r\nひろゆき\r\nひんかく\r\nひんけつ\r\nひんこん\r\nひんしゅ\r\nひんそう\r\nぴんち\r\nひんぱん\r\nびんぼう\r\nふあん\r\nふいうち\r\nふうけい\r\nふうせん\r\nぷうたろう\r\nふうとう\r\nふうふ\r\nふえる\r\nふおん\r\nふかい\r\nふきん\r\nふくざつ\r\nふくぶくろ\r\nふこう\r\nふさい\r\nふしぎ\r\nふじみ\r\nふすま\r\nふせい\r\nふせぐ\r\nふそく\r\nぶたにく\r\nふたん\r\nふちょう\r\nふつう\r\nふつか\r\nふっかつ\r\nふっき\r\nふっこく\r\nぶどう\r\nふとる\r\nふとん\r\nふのう\r\nふはい\r\nふひょう\r\nふへん\r\nふまん\r\nふみん\r\nふめつ\r\nふめん\r\nふよう\r\nふりこ\r\nふりる\r\nふるい\r\nふんいき\r\nぶんがく\r\nぶんぐ\r\nふんしつ\r\nぶんせき\r\nふんそう\r\nぶんぽう\r\nへいあん\r\nへいおん\r\nへいがい\r\nへいき\r\nへいげん\r\nへいこう\r\nへいさ\r\nへいしゃ\r\nへいせつ\r\nへいそ\r\nへいたく\r\nへいてん\r\nへいねつ\r\nへいわ\r\nへきが\r\nへこむ\r\nべにいろ\r\nべにしょうが\r\nへらす\r\nへんかん\r\nべんきょう\r\nべんごし\r\nへんさい\r\nへんたい\r\nべんり\r\nほあん\r\nほいく\r\nぼうぎょ\r\nほうこく\r\nほうそう\r\nほうほう\r\nほうもん\r\nほうりつ\r\nほえる\r\nほおん\r\nほかん\r\nほきょう\r\nぼきん\r\nほくろ\r\nほけつ\r\nほけん\r\nほこう\r\nほこる\r\nほしい\r\nほしつ\r\nほしゅ\r\nほしょう\r\nほせい\r\nほそい\r\nほそく\r\nほたて\r\nほたる\r\nぽちぶくろ\r\nほっきょく\r\nほっさ\r\nほったん\r\nほとんど\r\nほめる\r\nほんい\r\nほんき\r\nほんけ\r\nほんしつ\r\nほんやく\r\nまいにち\r\nまかい\r\nまかせる\r\nまがる\r\nまける\r\nまこと\r\nまさつ\r\nまじめ\r\nますく\r\nまぜる\r\nまつり\r\nまとめ\r\nまなぶ\r\nまぬけ\r\nまねく\r\nまほう\r\nまもる\r\nまゆげ\r\nまよう\r\nまろやか\r\nまわす\r\nまわり\r\nまわる\r\nまんが\r\nまんきつ\r\nまんぞく\r\nまんなか\r\nみいら\r\nみうち\r\nみえる\r\nみがく\r\nみかた\r\nみかん\r\nみけん\r\nみこん\r\nみじかい\r\nみすい\r\nみすえる\r\nみせる\r\nみっか\r\nみつかる\r\nみつける\r\nみてい\r\nみとめる\r\nみなと\r\nみなみかさい\r\nみねらる\r\nみのう\r\nみのがす\r\nみほん\r\nみもと\r\nみやげ\r\nみらい\r\nみりょく\r\nみわく\r\nみんか\r\nみんぞく\r\nむいか\r\nむえき\r\nむえん\r\nむかい\r\nむかう\r\nむかえ\r\nむかし\r\nむぎちゃ\r\nむける\r\nむげん\r\nむさぼる\r\nむしあつい\r\nむしば\r\nむじゅん\r\nむしろ\r\nむすう\r\nむすこ\r\nむすぶ\r\nむすめ\r\nむせる\r\nむせん\r\nむちゅう\r\nむなしい\r\nむのう\r\nむやみ\r\nむよう\r\nむらさき\r\nむりょう\r\nむろん\r\nめいあん\r\nめいうん\r\nめいえん\r\nめいかく\r\nめいきょく\r\nめいさい\r\nめいし\r\nめいそう\r\nめいぶつ\r\nめいれい\r\nめいわく\r\nめぐまれる\r\nめざす\r\nめした\r\nめずらしい\r\nめだつ\r\nめまい\r\nめやす\r\nめんきょ\r\nめんせき\r\nめんどう\r\nもうしあげる\r\nもうどうけん\r\nもえる\r\nもくし\r\nもくてき\r\nもくようび\r\nもちろん\r\nもどる\r\nもらう\r\nもんく\r\nもんだい\r\nやおや\r\nやける\r\nやさい\r\nやさしい\r\nやすい\r\nやすたろう\r\nやすみ\r\nやせる\r\nやそう\r\nやたい\r\nやちん\r\nやっと\r\nやっぱり\r\nやぶる\r\nやめる\r\nややこしい\r\nやよい\r\nやわらかい\r\nゆうき\r\nゆうびんきょく\r\nゆうべ\r\nゆうめい\r\nゆけつ\r\nゆしゅつ\r\nゆせん\r\nゆそう\r\nゆたか\r\nゆちゃく\r\nゆでる\r\nゆにゅう\r\nゆびわ\r\nゆらい\r\nゆれる\r\nようい\r\nようか\r\nようきゅう\r\nようじ\r\nようす\r\nようちえん\r\nよかぜ\r\nよかん\r\nよきん\r\nよくせい\r\nよくぼう\r\nよけい\r\nよごれる\r\nよさん\r\nよしゅう\r\nよそう\r\nよそく\r\nよっか\r\nよてい\r\nよどがわく\r\nよねつ\r\nよやく\r\nよゆう\r\nよろこぶ\r\nよろしい\r\nらいう\r\nらくがき\r\nらくご\r\nらくさつ\r\nらくだ\r\nらしんばん\r\nらせん\r\nらぞく\r\nらたい\r\nらっか\r\nられつ\r\nりえき\r\nりかい\r\nりきさく\r\nりきせつ\r\nりくぐん\r\nりくつ\r\nりけん\r\nりこう\r\nりせい\r\nりそう\r\nりそく\r\nりてん\r\nりねん\r\nりゆう\r\nりゅうがく\r\nりよう\r\nりょうり\r\nりょかん\r\nりょくちゃ\r\nりょこう\r\nりりく\r\nりれき\r\nりろん\r\nりんご\r\nるいけい\r\nるいさい\r\nるいじ\r\nるいせき\r\nるすばん\r\nるりがわら\r\nれいかん\r\nれいぎ\r\nれいせい\r\nれいぞうこ\r\nれいとう\r\nれいぼう\r\nれきし\r\nれきだい\r\nれんあい\r\nれんけい\r\nれんこん\r\nれんさい\r\nれんしゅう\r\nれんぞく\r\nれんらく\r\nろうか\r\nろうご\r\nろうじん\r\nろうそく\r\nろくが\r\nろこつ\r\nろじうら\r\nろしゅつ\r\nろせん\r\nろてん\r\nろめん\r\nろれつ\r\nろんぎ\r\nろんぱ\r\nろんぶん\r\nろんり\r\nわかす\r\nわかめ\r\nわかやま\r\nわかれる\r\nわしつ\r\nわじまし\r\nわすれもの\r\nわらう\r\nわれる`.split('\\n');\r\n", "export const wordlist = `가격\r\n가끔\r\n가난\r\n가능\r\n가득\r\n가르침\r\n가뭄\r\n가방\r\n가상\r\n가슴\r\n가운데\r\n가을\r\n가이드\r\n가입\r\n가장\r\n가정\r\n가족\r\n가죽\r\n각오\r\n각자\r\n간격\r\n간부\r\n간섭\r\n간장\r\n간접\r\n간판\r\n갈등\r\n갈비\r\n갈색\r\n갈증\r\n감각\r\n감기\r\n감소\r\n감수성\r\n감자\r\n감정\r\n갑자기\r\n강남\r\n강당\r\n강도\r\n강력히\r\n강변\r\n강북\r\n강사\r\n강수량\r\n강아지\r\n강원도\r\n강의\r\n강제\r\n강조\r\n같이\r\n개구리\r\n개나리\r\n개방\r\n개별\r\n개선\r\n개성\r\n개인\r\n객관적\r\n거실\r\n거액\r\n거울\r\n거짓\r\n거품\r\n걱정\r\n건강\r\n건물\r\n건설\r\n건조\r\n건축\r\n걸음\r\n검사\r\n검토\r\n게시판\r\n게임\r\n겨울\r\n견해\r\n결과\r\n결국\r\n결론\r\n결석\r\n결승\r\n결심\r\n결정\r\n결혼\r\n경계\r\n경고\r\n경기\r\n경력\r\n경복궁\r\n경비\r\n경상도\r\n경영\r\n경우\r\n경쟁\r\n경제\r\n경주\r\n경찰\r\n경치\r\n경향\r\n경험\r\n계곡\r\n계단\r\n계란\r\n계산\r\n계속\r\n계약\r\n계절\r\n계층\r\n계획\r\n고객\r\n고구려\r\n고궁\r\n고급\r\n고등학생\r\n고무신\r\n고민\r\n고양이\r\n고장\r\n고전\r\n고집\r\n고춧가루\r\n고통\r\n고향\r\n곡식\r\n골목\r\n골짜기\r\n골프\r\n공간\r\n공개\r\n공격\r\n공군\r\n공급\r\n공기\r\n공동\r\n공무원\r\n공부\r\n공사\r\n공식\r\n공업\r\n공연\r\n공원\r\n공장\r\n공짜\r\n공책\r\n공통\r\n공포\r\n공항\r\n공휴일\r\n과목\r\n과일\r\n과장\r\n과정\r\n과학\r\n관객\r\n관계\r\n관광\r\n관념\r\n관람\r\n관련\r\n관리\r\n관습\r\n관심\r\n관점\r\n관찰\r\n광경\r\n광고\r\n광장\r\n광주\r\n괴로움\r\n굉장히\r\n교과서\r\n교문\r\n교복\r\n교실\r\n교양\r\n교육\r\n교장\r\n교직\r\n교통\r\n교환\r\n교훈\r\n구경\r\n구름\r\n구멍\r\n구별\r\n구분\r\n구석\r\n구성\r\n구속\r\n구역\r\n구입\r\n구청\r\n구체적\r\n국가\r\n국기\r\n국내\r\n국립\r\n국물\r\n국민\r\n국수\r\n국어\r\n국왕\r\n국적\r\n국제\r\n국회\r\n군대\r\n군사\r\n군인\r\n궁극적\r\n권리\r\n권위\r\n권투\r\n귀국\r\n귀신\r\n규정\r\n규칙\r\n균형\r\n그날\r\n그냥\r\n그늘\r\n그러나\r\n그룹\r\n그릇\r\n그림\r\n그제서야\r\n그토록\r\n극복\r\n극히\r\n근거\r\n근교\r\n근래\r\n근로\r\n근무\r\n근본\r\n근원\r\n근육\r\n근처\r\n글씨\r\n글자\r\n금강산\r\n금고\r\n금년\r\n금메달\r\n금액\r\n금연\r\n금요일\r\n금지\r\n긍정적\r\n기간\r\n기관\r\n기념\r\n기능\r\n기독교\r\n기둥\r\n기록\r\n기름\r\n기법\r\n기본\r\n기분\r\n기쁨\r\n기숙사\r\n기술\r\n기억\r\n기업\r\n기온\r\n기운\r\n기원\r\n기적\r\n기준\r\n기침\r\n기혼\r\n기획\r\n긴급\r\n긴장\r\n길이\r\n김밥\r\n김치\r\n김포공항\r\n깍두기\r\n깜빡\r\n깨달음\r\n깨소금\r\n껍질\r\n꼭대기\r\n꽃잎\r\n나들이\r\n나란히\r\n나머지\r\n나물\r\n나침반\r\n나흘\r\n낙엽\r\n난방\r\n날개\r\n날씨\r\n날짜\r\n남녀\r\n남대문\r\n남매\r\n남산\r\n남자\r\n남편\r\n남학생\r\n낭비\r\n낱말\r\n내년\r\n내용\r\n내일\r\n냄비\r\n냄새\r\n냇물\r\n냉동\r\n냉면\r\n냉방\r\n냉장고\r\n넥타이\r\n넷째\r\n노동\r\n노란색\r\n노력\r\n노인\r\n녹음\r\n녹차\r\n녹화\r\n논리\r\n논문\r\n논쟁\r\n놀이\r\n농구\r\n농담\r\n농민\r\n농부\r\n농업\r\n농장\r\n농촌\r\n높이\r\n눈동자\r\n눈물\r\n눈썹\r\n뉴욕\r\n느낌\r\n늑대\r\n능동적\r\n능력\r\n다방\r\n다양성\r\n다음\r\n다이어트\r\n다행\r\n단계\r\n단골\r\n단독\r\n단맛\r\n단순\r\n단어\r\n단위\r\n단점\r\n단체\r\n단추\r\n단편\r\n단풍\r\n달걀\r\n달러\r\n달력\r\n달리\r\n닭고기\r\n담당\r\n담배\r\n담요\r\n담임\r\n답변\r\n답장\r\n당근\r\n당분간\r\n당연히\r\n당장\r\n대규모\r\n대낮\r\n대단히\r\n대답\r\n대도시\r\n대략\r\n대량\r\n대륙\r\n대문\r\n대부분\r\n대신\r\n대응\r\n대장\r\n대전\r\n대접\r\n대중\r\n대책\r\n대출\r\n대충\r\n대통령\r\n대학\r\n대한민국\r\n대합실\r\n대형\r\n덩어리\r\n데이트\r\n도대체\r\n도덕\r\n도둑\r\n도망\r\n도서관\r\n도심\r\n도움\r\n도입\r\n도자기\r\n도저히\r\n도전\r\n도중\r\n도착\r\n독감\r\n독립\r\n독서\r\n독일\r\n독창적\r\n동화책\r\n뒷모습\r\n뒷산\r\n딸아이\r\n마누라\r\n마늘\r\n마당\r\n마라톤\r\n마련\r\n마무리\r\n마사지\r\n마약\r\n마요네즈\r\n마을\r\n마음\r\n마이크\r\n마중\r\n마지막\r\n마찬가지\r\n마찰\r\n마흔\r\n막걸리\r\n막내\r\n막상\r\n만남\r\n만두\r\n만세\r\n만약\r\n만일\r\n만점\r\n만족\r\n만화\r\n많이\r\n말기\r\n말씀\r\n말투\r\n맘대로\r\n망원경\r\n매년\r\n매달\r\n매력\r\n매번\r\n매스컴\r\n매일\r\n매장\r\n맥주\r\n먹이\r\n먼저\r\n먼지\r\n멀리\r\n메일\r\n며느리\r\n며칠\r\n면담\r\n멸치\r\n명단\r\n명령\r\n명예\r\n명의\r\n명절\r\n명칭\r\n명함\r\n모금\r\n모니터\r\n모델\r\n모든\r\n모범\r\n모습\r\n모양\r\n모임\r\n모조리\r\n모집\r\n모퉁이\r\n목걸이\r\n목록\r\n목사\r\n목소리\r\n목숨\r\n목적\r\n목표\r\n몰래\r\n몸매\r\n몸무게\r\n몸살\r\n몸속\r\n몸짓\r\n몸통\r\n몹시\r\n무관심\r\n무궁화\r\n무더위\r\n무덤\r\n무릎\r\n무슨\r\n무엇\r\n무역\r\n무용\r\n무조건\r\n무지개\r\n무척\r\n문구\r\n문득\r\n문법\r\n문서\r\n문제\r\n문학\r\n문화\r\n물가\r\n물건\r\n물결\r\n물고기\r\n물론\r\n물리학\r\n물음\r\n물질\r\n물체\r\n미국\r\n미디어\r\n미사일\r\n미술\r\n미역\r\n미용실\r\n미움\r\n미인\r\n미팅\r\n미혼\r\n민간\r\n민족\r\n민주\r\n믿음\r\n밀가루\r\n밀리미터\r\n밑바닥\r\n바가지\r\n바구니\r\n바나나\r\n바늘\r\n바닥\r\n바닷가\r\n바람\r\n바이러스\r\n바탕\r\n박물관\r\n박사\r\n박수\r\n반대\r\n반드시\r\n반말\r\n반발\r\n반성\r\n반응\r\n반장\r\n반죽\r\n반지\r\n반찬\r\n받침\r\n발가락\r\n발걸음\r\n발견\r\n발달\r\n발레\r\n발목\r\n발바닥\r\n발생\r\n발음\r\n발자국\r\n발전\r\n발톱\r\n발표\r\n밤하늘\r\n밥그릇\r\n밥맛\r\n밥상\r\n밥솥\r\n방금\r\n방면\r\n방문\r\n방바닥\r\n방법\r\n방송\r\n방식\r\n방안\r\n방울\r\n방지\r\n방학\r\n방해\r\n방향\r\n배경\r\n배꼽\r\n배달\r\n배드민턴\r\n백두산\r\n백색\r\n백성\r\n백인\r\n백제\r\n백화점\r\n버릇\r\n버섯\r\n버튼\r\n번개\r\n번역\r\n번지\r\n번호\r\n벌금\r\n벌레\r\n벌써\r\n범위\r\n범인\r\n범죄\r\n법률\r\n법원\r\n법적\r\n법칙\r\n베이징\r\n벨트\r\n변경\r\n변동\r\n변명\r\n변신\r\n변호사\r\n변화\r\n별도\r\n별명\r\n별일\r\n병실\r\n병아리\r\n병원\r\n보관\r\n보너스\r\n보라색\r\n보람\r\n보름\r\n보상\r\n보안\r\n보자기\r\n보장\r\n보전\r\n보존\r\n보통\r\n보편적\r\n보험\r\n복도\r\n복사\r\n복숭아\r\n복습\r\n볶음\r\n본격적\r\n본래\r\n본부\r\n본사\r\n본성\r\n본인\r\n본질\r\n볼펜\r\n봉사\r\n봉지\r\n봉투\r\n부근\r\n부끄러움\r\n부담\r\n부동산\r\n부문\r\n부분\r\n부산\r\n부상\r\n부엌\r\n부인\r\n부작용\r\n부장\r\n부정\r\n부족\r\n부지런히\r\n부친\r\n부탁\r\n부품\r\n부회장\r\n북부\r\n북한\r\n분노\r\n분량\r\n분리\r\n분명\r\n분석\r\n분야\r\n분위기\r\n분필\r\n분홍색\r\n불고기\r\n불과\r\n불교\r\n불꽃\r\n불만\r\n불법\r\n불빛\r\n불안\r\n불이익\r\n불행\r\n브랜드\r\n비극\r\n비난\r\n비닐\r\n비둘기\r\n비디오\r\n비로소\r\n비만\r\n비명\r\n비밀\r\n비바람\r\n비빔밥\r\n비상\r\n비용\r\n비율\r\n비중\r\n비타민\r\n비판\r\n빌딩\r\n빗물\r\n빗방울\r\n빗줄기\r\n빛깔\r\n빨간색\r\n빨래\r\n빨리\r\n사건\r\n사계절\r\n사나이\r\n사냥\r\n사람\r\n사랑\r\n사립\r\n사모님\r\n사물\r\n사방\r\n사상\r\n사생활\r\n사설\r\n사슴\r\n사실\r\n사업\r\n사용\r\n사월\r\n사장\r\n사전\r\n사진\r\n사촌\r\n사춘기\r\n사탕\r\n사투리\r\n사흘\r\n산길\r\n산부인과\r\n산업\r\n산책\r\n살림\r\n살인\r\n살짝\r\n삼계탕\r\n삼국\r\n삼십\r\n삼월\r\n삼촌\r\n상관\r\n상금\r\n상대\r\n상류\r\n상반기\r\n상상\r\n상식\r\n상업\r\n상인\r\n상자\r\n상점\r\n상처\r\n상추\r\n상태\r\n상표\r\n상품\r\n상황\r\n새벽\r\n색깔\r\n색연필\r\n생각\r\n생명\r\n생물\r\n생방송\r\n생산\r\n생선\r\n생신\r\n생일\r\n생활\r\n서랍\r\n서른\r\n서명\r\n서민\r\n서비스\r\n서양\r\n서울\r\n서적\r\n서점\r\n서쪽\r\n서클\r\n석사\r\n석유\r\n선거\r\n선물\r\n선배\r\n선생\r\n선수\r\n선원\r\n선장\r\n선전\r\n선택\r\n선풍기\r\n설거지\r\n설날\r\n설렁탕\r\n설명\r\n설문\r\n설사\r\n설악산\r\n설치\r\n설탕\r\n섭씨\r\n성공\r\n성당\r\n성명\r\n성별\r\n성인\r\n성장\r\n성적\r\n성질\r\n성함\r\n세금\r\n세미나\r\n세상\r\n세월\r\n세종대왕\r\n세탁\r\n센터\r\n센티미터\r\n셋째\r\n소규모\r\n소극적\r\n소금\r\n소나기\r\n소년\r\n소득\r\n소망\r\n소문\r\n소설\r\n소속\r\n소아과\r\n소용\r\n소원\r\n소음\r\n소중히\r\n소지품\r\n소질\r\n소풍\r\n소형\r\n속담\r\n속도\r\n속옷\r\n손가락\r\n손길\r\n손녀\r\n손님\r\n손등\r\n손목\r\n손뼉\r\n손실\r\n손질\r\n손톱\r\n손해\r\n솔직히\r\n솜씨\r\n송아지\r\n송이\r\n송편\r\n쇠고기\r\n쇼핑\r\n수건\r\n수년\r\n수단\r\n수돗물\r\n수동적\r\n수면\r\n수명\r\n수박\r\n수상\r\n수석\r\n수술\r\n수시로\r\n수업\r\n수염\r\n수영\r\n수입\r\n수준\r\n수집\r\n수출\r\n수컷\r\n수필\r\n수학\r\n수험생\r\n수화기\r\n숙녀\r\n숙소\r\n숙제\r\n순간\r\n순서\r\n순수\r\n순식간\r\n순위\r\n숟가락\r\n술병\r\n술집\r\n숫자\r\n스님\r\n스물\r\n스스로\r\n스승\r\n스웨터\r\n스위치\r\n스케이트\r\n스튜디오\r\n스트레스\r\n스포츠\r\n슬쩍\r\n슬픔\r\n습관\r\n습기\r\n승객\r\n승리\r\n승부\r\n승용차\r\n승진\r\n시각\r\n시간\r\n시골\r\n시금치\r\n시나리오\r\n시댁\r\n시리즈\r\n시멘트\r\n시민\r\n시부모\r\n시선\r\n시설\r\n시스템\r\n시아버지\r\n시어머니\r\n시월\r\n시인\r\n시일\r\n시작\r\n시장\r\n시절\r\n시점\r\n시중\r\n시즌\r\n시집\r\n시청\r\n시합\r\n시험\r\n식구\r\n식기\r\n식당\r\n식량\r\n식료품\r\n식물\r\n식빵\r\n식사\r\n식생활\r\n식초\r\n식탁\r\n식품\r\n신고\r\n신규\r\n신념\r\n신문\r\n신발\r\n신비\r\n신사\r\n신세\r\n신용\r\n신제품\r\n신청\r\n신체\r\n신화\r\n실감\r\n실내\r\n실력\r\n실례\r\n실망\r\n실수\r\n실습\r\n실시\r\n실장\r\n실정\r\n실질적\r\n실천\r\n실체\r\n실컷\r\n실태\r\n실패\r\n실험\r\n실현\r\n심리\r\n심부름\r\n심사\r\n심장\r\n심정\r\n심판\r\n쌍둥이\r\n씨름\r\n씨앗\r\n아가씨\r\n아나운서\r\n아드님\r\n아들\r\n아쉬움\r\n아스팔트\r\n아시아\r\n아울러\r\n아저씨\r\n아줌마\r\n아직\r\n아침\r\n아파트\r\n아프리카\r\n아픔\r\n아홉\r\n아흔\r\n악기\r\n악몽\r\n악수\r\n안개\r\n안경\r\n안과\r\n안내\r\n안녕\r\n안동\r\n안방\r\n안부\r\n안주\r\n알루미늄\r\n알코올\r\n암시\r\n암컷\r\n압력\r\n앞날\r\n앞문\r\n애인\r\n애정\r\n액수\r\n앨범\r\n야간\r\n야단\r\n야옹\r\n약간\r\n약국\r\n약속\r\n약수\r\n약점\r\n약품\r\n약혼녀\r\n양념\r\n양력\r\n양말\r\n양배추\r\n양주\r\n양파\r\n어둠\r\n어려움\r\n어른\r\n어젯밤\r\n어쨌든\r\n어쩌다가\r\n어쩐지\r\n언니\r\n언덕\r\n언론\r\n언어\r\n얼굴\r\n얼른\r\n얼음\r\n얼핏\r\n엄마\r\n업무\r\n업종\r\n업체\r\n엉덩이\r\n엉망\r\n엉터리\r\n엊그제\r\n에너지\r\n에어컨\r\n엔진\r\n여건\r\n여고생\r\n여관\r\n여군\r\n여권\r\n여대생\r\n여덟\r\n여동생\r\n여든\r\n여론\r\n여름\r\n여섯\r\n여성\r\n여왕\r\n여인\r\n여전히\r\n여직원\r\n여학생\r\n여행\r\n역사\r\n역시\r\n역할\r\n연결\r\n연구\r\n연극\r\n연기\r\n연락\r\n연설\r\n연세\r\n연속\r\n연습\r\n연애\r\n연예인\r\n연인\r\n연장\r\n연주\r\n연출\r\n연필\r\n연합\r\n연휴\r\n열기\r\n열매\r\n열쇠\r\n열심히\r\n열정\r\n열차\r\n열흘\r\n염려\r\n엽서\r\n영국\r\n영남\r\n영상\r\n영양\r\n영역\r\n영웅\r\n영원히\r\n영하\r\n영향\r\n영혼\r\n영화\r\n옆구리\r\n옆방\r\n옆집\r\n예감\r\n예금\r\n예방\r\n예산\r\n예상\r\n예선\r\n예술\r\n예습\r\n예식장\r\n예약\r\n예전\r\n예절\r\n예정\r\n예컨대\r\n옛날\r\n오늘\r\n오락\r\n오랫동안\r\n오렌지\r\n오로지\r\n오른발\r\n오븐\r\n오십\r\n오염\r\n오월\r\n오전\r\n오직\r\n오징어\r\n오페라\r\n오피스텔\r\n오히려\r\n옥상\r\n옥수수\r\n온갖\r\n온라인\r\n온몸\r\n온종일\r\n온통\r\n올가을\r\n올림픽\r\n올해\r\n옷차림\r\n와이셔츠\r\n와인\r\n완성\r\n완전\r\n왕비\r\n왕자\r\n왜냐하면\r\n왠지\r\n외갓집\r\n외국\r\n외로움\r\n외삼촌\r\n외출\r\n외침\r\n외할머니\r\n왼발\r\n왼손\r\n왼쪽\r\n요금\r\n요일\r\n요즘\r\n요청\r\n용기\r\n용서\r\n용어\r\n우산\r\n우선\r\n우승\r\n우연히\r\n우정\r\n우체국\r\n우편\r\n운동\r\n운명\r\n운반\r\n운전\r\n운행\r\n울산\r\n울음\r\n움직임\r\n웃어른\r\n웃음\r\n워낙\r\n원고\r\n원래\r\n원서\r\n원숭이\r\n원인\r\n원장\r\n원피스\r\n월급\r\n월드컵\r\n월세\r\n월요일\r\n웨이터\r\n위반\r\n위법\r\n위성\r\n위원\r\n위험\r\n위협\r\n윗사람\r\n유난히\r\n유럽\r\n유명\r\n유물\r\n유산\r\n유적\r\n유치원\r\n유학\r\n유행\r\n유형\r\n육군\r\n육상\r\n육십\r\n육체\r\n은행\r\n음력\r\n음료\r\n음반\r\n음성\r\n음식\r\n음악\r\n음주\r\n의견\r\n의논\r\n의문\r\n의복\r\n의식\r\n의심\r\n의외로\r\n의욕\r\n의원\r\n의학\r\n이것\r\n이곳\r\n이념\r\n이놈\r\n이달\r\n이대로\r\n이동\r\n이렇게\r\n이력서\r\n이론적\r\n이름\r\n이민\r\n이발소\r\n이별\r\n이불\r\n이빨\r\n이상\r\n이성\r\n이슬\r\n이야기\r\n이용\r\n이웃\r\n이월\r\n이윽고\r\n이익\r\n이전\r\n이중\r\n이튿날\r\n이틀\r\n이혼\r\n인간\r\n인격\r\n인공\r\n인구\r\n인근\r\n인기\r\n인도\r\n인류\r\n인물\r\n인생\r\n인쇄\r\n인연\r\n인원\r\n인재\r\n인종\r\n인천\r\n인체\r\n인터넷\r\n인하\r\n인형\r\n일곱\r\n일기\r\n일단\r\n일대\r\n일등\r\n일반\r\n일본\r\n일부\r\n일상\r\n일생\r\n일손\r\n일요일\r\n일월\r\n일정\r\n일종\r\n일주일\r\n일찍\r\n일체\r\n일치\r\n일행\r\n일회용\r\n임금\r\n임무\r\n입대\r\n입력\r\n입맛\r\n입사\r\n입술\r\n입시\r\n입원\r\n입장\r\n입학\r\n자가용\r\n자격\r\n자극\r\n자동\r\n자랑\r\n자부심\r\n자식\r\n자신\r\n자연\r\n자원\r\n자율\r\n자전거\r\n자정\r\n자존심\r\n자판\r\n작가\r\n작년\r\n작성\r\n작업\r\n작용\r\n작은딸\r\n작품\r\n잔디\r\n잔뜩\r\n잔치\r\n잘못\r\n잠깐\r\n잠수함\r\n잠시\r\n잠옷\r\n잠자리\r\n잡지\r\n장관\r\n장군\r\n장기간\r\n장래\r\n장례\r\n장르\r\n장마\r\n장면\r\n장모\r\n장미\r\n장비\r\n장사\r\n장소\r\n장식\r\n장애인\r\n장인\r\n장점\r\n장차\r\n장학금\r\n재능\r\n재빨리\r\n재산\r\n재생\r\n재작년\r\n재정\r\n재채기\r\n재판\r\n재학\r\n재활용\r\n저것\r\n저고리\r\n저곳\r\n저녁\r\n저런\r\n저렇게\r\n저번\r\n저울\r\n저절로\r\n저축\r\n적극\r\n적당히\r\n적성\r\n적용\r\n적응\r\n전개\r\n전공\r\n전기\r\n전달\r\n전라도\r\n전망\r\n전문\r\n전반\r\n전부\r\n전세\r\n전시\r\n전용\r\n전자\r\n전쟁\r\n전주\r\n전철\r\n전체\r\n전통\r\n전혀\r\n전후\r\n절대\r\n절망\r\n절반\r\n절약\r\n절차\r\n점검\r\n점수\r\n점심\r\n점원\r\n점점\r\n점차\r\n접근\r\n접시\r\n접촉\r\n젓가락\r\n정거장\r\n정도\r\n정류장\r\n정리\r\n정말\r\n정면\r\n정문\r\n정반대\r\n정보\r\n정부\r\n정비\r\n정상\r\n정성\r\n정오\r\n정원\r\n정장\r\n정지\r\n정치\r\n정확히\r\n제공\r\n제과점\r\n제대로\r\n제목\r\n제발\r\n제법\r\n제삿날\r\n제안\r\n제일\r\n제작\r\n제주도\r\n제출\r\n제품\r\n제한\r\n조각\r\n조건\r\n조금\r\n조깅\r\n조명\r\n조미료\r\n조상\r\n조선\r\n조용히\r\n조절\r\n조정\r\n조직\r\n존댓말\r\n존재\r\n졸업\r\n졸음\r\n종교\r\n종로\r\n종류\r\n종소리\r\n종업원\r\n종종\r\n종합\r\n좌석\r\n죄인\r\n주관적\r\n주름\r\n주말\r\n주머니\r\n주먹\r\n주문\r\n주민\r\n주방\r\n주변\r\n주식\r\n주인\r\n주일\r\n주장\r\n주전자\r\n주택\r\n준비\r\n줄거리\r\n줄기\r\n줄무늬\r\n중간\r\n중계방송\r\n중국\r\n중년\r\n중단\r\n중독\r\n중반\r\n중부\r\n중세\r\n중소기업\r\n중순\r\n중앙\r\n중요\r\n중학교\r\n즉석\r\n즉시\r\n즐거움\r\n증가\r\n증거\r\n증권\r\n증상\r\n증세\r\n지각\r\n지갑\r\n지경\r\n지극히\r\n지금\r\n지급\r\n지능\r\n지름길\r\n지리산\r\n지방\r\n지붕\r\n지식\r\n지역\r\n지우개\r\n지원\r\n지적\r\n지점\r\n지진\r\n지출\r\n직선\r\n직업\r\n직원\r\n직장\r\n진급\r\n진동\r\n진로\r\n진료\r\n진리\r\n진짜\r\n진찰\r\n진출\r\n진통\r\n진행\r\n질문\r\n질병\r\n질서\r\n짐작\r\n집단\r\n집안\r\n집중\r\n짜증\r\n찌꺼기\r\n차남\r\n차라리\r\n차량\r\n차림\r\n차별\r\n차선\r\n차츰\r\n착각\r\n찬물\r\n찬성\r\n참가\r\n참기름\r\n참새\r\n참석\r\n참여\r\n참외\r\n참조\r\n찻잔\r\n창가\r\n창고\r\n창구\r\n창문\r\n창밖\r\n창작\r\n창조\r\n채널\r\n채점\r\n책가방\r\n책방\r\n책상\r\n책임\r\n챔피언\r\n처벌\r\n처음\r\n천국\r\n천둥\r\n천장\r\n천재\r\n천천히\r\n철도\r\n철저히\r\n철학\r\n첫날\r\n첫째\r\n청년\r\n청바지\r\n청소\r\n청춘\r\n체계\r\n체력\r\n체온\r\n체육\r\n체중\r\n체험\r\n초등학생\r\n초반\r\n초밥\r\n초상화\r\n초순\r\n초여름\r\n초원\r\n초저녁\r\n초점\r\n초청\r\n초콜릿\r\n촛불\r\n총각\r\n총리\r\n총장\r\n촬영\r\n최근\r\n최상\r\n최선\r\n최신\r\n최악\r\n최종\r\n추석\r\n추억\r\n추진\r\n추천\r\n추측\r\n축구\r\n축소\r\n축제\r\n축하\r\n출근\r\n출발\r\n출산\r\n출신\r\n출연\r\n출입\r\n출장\r\n출판\r\n충격\r\n충고\r\n충돌\r\n충분히\r\n충청도\r\n취업\r\n취직\r\n취향\r\n치약\r\n친구\r\n친척\r\n칠십\r\n칠월\r\n칠판\r\n침대\r\n침묵\r\n침실\r\n칫솔\r\n칭찬\r\n카메라\r\n카운터\r\n칼국수\r\n캐릭터\r\n캠퍼스\r\n캠페인\r\n커튼\r\n컨디션\r\n컬러\r\n컴퓨터\r\n코끼리\r\n코미디\r\n콘서트\r\n콜라\r\n콤플렉스\r\n콩나물\r\n쾌감\r\n쿠데타\r\n크림\r\n큰길\r\n큰딸\r\n큰소리\r\n큰아들\r\n큰어머니\r\n큰일\r\n큰절\r\n클래식\r\n클럽\r\n킬로\r\n타입\r\n타자기\r\n탁구\r\n탁자\r\n탄생\r\n태권도\r\n태양\r\n태풍\r\n택시\r\n탤런트\r\n터널\r\n터미널\r\n테니스\r\n테스트\r\n테이블\r\n텔레비전\r\n토론\r\n토마토\r\n토요일\r\n통계\r\n통과\r\n통로\r\n통신\r\n통역\r\n통일\r\n통장\r\n통제\r\n통증\r\n통합\r\n통화\r\n퇴근\r\n퇴원\r\n퇴직금\r\n튀김\r\n트럭\r\n특급\r\n특별\r\n특성\r\n특수\r\n특징\r\n특히\r\n튼튼히\r\n티셔츠\r\n파란색\r\n파일\r\n파출소\r\n판결\r\n판단\r\n판매\r\n판사\r\n팔십\r\n팔월\r\n팝송\r\n패션\r\n팩스\r\n팩시밀리\r\n팬티\r\n퍼센트\r\n페인트\r\n편견\r\n편의\r\n편지\r\n편히\r\n평가\r\n평균\r\n평생\r\n평소\r\n평양\r\n평일\r\n평화\r\n포스터\r\n포인트\r\n포장\r\n포함\r\n표면\r\n표정\r\n표준\r\n표현\r\n품목\r\n품질\r\n풍경\r\n풍속\r\n풍습\r\n프랑스\r\n프린터\r\n플라스틱\r\n피곤\r\n피망\r\n피아노\r\n필름\r\n필수\r\n필요\r\n필자\r\n필통\r\n핑계\r\n하느님\r\n하늘\r\n하드웨어\r\n하룻밤\r\n하반기\r\n하숙집\r\n하순\r\n하여튼\r\n하지만\r\n하천\r\n하품\r\n하필\r\n학과\r\n학교\r\n학급\r\n학기\r\n학년\r\n학력\r\n학번\r\n학부모\r\n학비\r\n학생\r\n학술\r\n학습\r\n학용품\r\n학원\r\n학위\r\n학자\r\n학점\r\n한계\r\n한글\r\n한꺼번에\r\n한낮\r\n한눈\r\n한동안\r\n한때\r\n한라산\r\n한마디\r\n한문\r\n한번\r\n한복\r\n한식\r\n한여름\r\n한쪽\r\n할머니\r\n할아버지\r\n할인\r\n함께\r\n함부로\r\n합격\r\n합리적\r\n항공\r\n항구\r\n항상\r\n항의\r\n해결\r\n해군\r\n해답\r\n해당\r\n해물\r\n해석\r\n해설\r\n해수욕장\r\n해안\r\n핵심\r\n핸드백\r\n햄버거\r\n햇볕\r\n햇살\r\n행동\r\n행복\r\n행사\r\n행운\r\n행위\r\n향기\r\n향상\r\n향수\r\n허락\r\n허용\r\n헬기\r\n현관\r\n현금\r\n현대\r\n현상\r\n현실\r\n현장\r\n현재\r\n현지\r\n혈액\r\n협력\r\n형부\r\n형사\r\n형수\r\n형식\r\n형제\r\n형태\r\n형편\r\n혜택\r\n호기심\r\n호남\r\n호랑이\r\n호박\r\n호텔\r\n호흡\r\n혹시\r\n홀로\r\n홈페이지\r\n홍보\r\n홍수\r\n홍차\r\n화면\r\n화분\r\n화살\r\n화요일\r\n화장\r\n화학\r\n확보\r\n확인\r\n확장\r\n확정\r\n환갑\r\n환경\r\n환영\r\n환율\r\n환자\r\n활기\r\n활동\r\n활발히\r\n활용\r\n활짝\r\n회견\r\n회관\r\n회복\r\n회색\r\n회원\r\n회장\r\n회전\r\n횟수\r\n횡단보도\r\n효율적\r\n후반\r\n후춧가루\r\n훈련\r\n훨씬\r\n휴식\r\n휴일\r\n흉내\r\n흐름\r\n흑백\r\n흑인\r\n흔적\r\n흔히\r\n흥미\r\n흥분\r\n희곡\r\n희망\r\n희생\r\n흰색\r\n힘껏`.split('\\n');\r\n", "export const wordlist = `abacate\r\nabaixo\r\nabalar\r\nabater\r\nabduzir\r\nabelha\r\naberto\r\nabismo\r\nabotoar\r\nabranger\r\nabreviar\r\nabrigar\r\nabrupto\r\nabsinto\r\nabsoluto\r\nabsurdo\r\nabutre\r\nacabado\r\nacalmar\r\nacampar\r\nacanhar\r\nacaso\r\naceitar\r\nacelerar\r\nacenar\r\nacervo\r\nacessar\r\nacetona\r\nachatar\r\nacidez\r\nacima\r\nacionado\r\nacirrar\r\naclamar\r\naclive\r\nacolhida\r\nacomodar\r\nacoplar\r\nacordar\r\nacumular\r\nacusador\r\nadaptar\r\nadega\r\nadentro\r\nadepto\r\nadequar\r\naderente\r\nadesivo\r\nadeus\r\nadiante\r\naditivo\r\nadjetivo\r\nadjunto\r\nadmirar\r\nadorar\r\nadquirir\r\nadubo\r\nadverso\r\nadvogado\r\naeronave\r\nafastar\r\naferir\r\nafetivo\r\nafinador\r\nafivelar\r\naflito\r\nafluente\r\nafrontar\r\nagachar\r\nagarrar\r\nagasalho\r\nagenciar\r\nagilizar\r\nagiota\r\nagitado\r\nagora\r\nagradar\r\nagreste\r\nagrupar\r\naguardar\r\nagulha\r\najoelhar\r\najudar\r\najustar\r\nalameda\r\nalarme\r\nalastrar\r\nalavanca\r\nalbergue\r\nalbino\r\nalcatra\r\naldeia\r\nalecrim\r\nalegria\r\nalertar\r\nalface\r\nalfinete\r\nalgum\r\nalheio\r\naliar\r\nalicate\r\nalienar\r\nalinhar\r\naliviar\r\nalmofada\r\nalocar\r\nalpiste\r\nalterar\r\naltitude\r\nalucinar\r\nalugar\r\naluno\r\nalusivo\r\nalvo\r\namaciar\r\namador\r\namarelo\r\namassar\r\nambas\r\nambiente\r\nameixa\r\namenizar\r\namido\r\namistoso\r\namizade\r\namolador\r\namontoar\r\namoroso\r\namostra\r\namparar\r\nampliar\r\nampola\r\nanagrama\r\nanalisar\r\nanarquia\r\nanatomia\r\nandaime\r\nanel\r\nanexo\r\nangular\r\nanimar\r\nanjo\r\nanomalia\r\nanotado\r\nansioso\r\nanterior\r\nanuidade\r\nanunciar\r\nanzol\r\napagador\r\napalpar\r\napanhado\r\napego\r\napelido\r\napertada\r\napesar\r\napetite\r\napito\r\naplauso\r\naplicada\r\napoio\r\napontar\r\naposta\r\naprendiz\r\naprovar\r\naquecer\r\narame\r\naranha\r\narara\r\narcada\r\nardente\r\nareia\r\narejar\r\narenito\r\naresta\r\nargiloso\r\nargola\r\narma\r\narquivo\r\narraial\r\narrebate\r\narriscar\r\narroba\r\narrumar\r\narsenal\r\narterial\r\nartigo\r\narvoredo\r\nasfaltar\r\nasilado\r\naspirar\r\nassador\r\nassinar\r\nassoalho\r\nassunto\r\nastral\r\natacado\r\natadura\r\natalho\r\natarefar\r\natear\r\natender\r\naterro\r\nateu\r\natingir\r\natirador\r\nativo\r\natoleiro\r\natracar\r\natrevido\r\natriz\r\natual\r\natum\r\nauditor\r\naumentar\r\naura\r\naurora\r\nautismo\r\nautoria\r\nautuar\r\navaliar\r\navante\r\navaria\r\navental\r\navesso\r\naviador\r\navisar\r\navulso\r\naxila\r\nazarar\r\nazedo\r\nazeite\r\nazulejo\r\nbabar\r\nbabosa\r\nbacalhau\r\nbacharel\r\nbacia\r\nbagagem\r\nbaiano\r\nbailar\r\nbaioneta\r\nbairro\r\nbaixista\r\nbajular\r\nbaleia\r\nbaliza\r\nbalsa\r\nbanal\r\nbandeira\r\nbanho\r\nbanir\r\nbanquete\r\nbarato\r\nbarbado\r\nbaronesa\r\nbarraca\r\nbarulho\r\nbaseado\r\nbastante\r\nbatata\r\nbatedor\r\nbatida\r\nbatom\r\nbatucar\r\nbaunilha\r\nbeber\r\nbeijo\r\nbeirada\r\nbeisebol\r\nbeldade\r\nbeleza\r\nbelga\r\nbeliscar\r\nbendito\r\nbengala\r\nbenzer\r\nberimbau\r\nberlinda\r\nberro\r\nbesouro\r\nbexiga\r\nbezerro\r\nbico\r\nbicudo\r\nbienal\r\nbifocal\r\nbifurcar\r\nbigorna\r\nbilhete\r\nbimestre\r\nbimotor\r\nbiologia\r\nbiombo\r\nbiosfera\r\nbipolar\r\nbirrento\r\nbiscoito\r\nbisneto\r\nbispo\r\nbissexto\r\nbitola\r\nbizarro\r\nblindado\r\nbloco\r\nbloquear\r\nboato\r\nbobagem\r\nbocado\r\nbocejo\r\nbochecha\r\nboicotar\r\nbolada\r\nboletim\r\nbolha\r\nbolo\r\nbombeiro\r\nbonde\r\nboneco\r\nbonita\r\nborbulha\r\nborda\r\nboreal\r\nborracha\r\nbovino\r\nboxeador\r\nbranco\r\nbrasa\r\nbraveza\r\nbreu\r\nbriga\r\nbrilho\r\nbrincar\r\nbroa\r\nbrochura\r\nbronzear\r\nbroto\r\nbruxo\r\nbucha\r\nbudismo\r\nbufar\r\nbule\r\nburaco\r\nbusca\r\nbusto\r\nbuzina\r\ncabana\r\ncabelo\r\ncabide\r\ncabo\r\ncabrito\r\ncacau\r\ncacetada\r\ncachorro\r\ncacique\r\ncadastro\r\ncadeado\r\ncafezal\r\ncaiaque\r\ncaipira\r\ncaixote\r\ncajado\r\ncaju\r\ncalafrio\r\ncalcular\r\ncaldeira\r\ncalibrar\r\ncalmante\r\ncalota\r\ncamada\r\ncambista\r\ncamisa\r\ncamomila\r\ncampanha\r\ncamuflar\r\ncanavial\r\ncancelar\r\ncaneta\r\ncanguru\r\ncanhoto\r\ncanivete\r\ncanoa\r\ncansado\r\ncantar\r\ncanudo\r\ncapacho\r\ncapela\r\ncapinar\r\ncapotar\r\ncapricho\r\ncaptador\r\ncapuz\r\ncaracol\r\ncarbono\r\ncardeal\r\ncareca\r\ncarimbar\r\ncarneiro\r\ncarpete\r\ncarreira\r\ncartaz\r\ncarvalho\r\ncasaco\r\ncasca\r\ncasebre\r\ncastelo\r\ncasulo\r\ncatarata\r\ncativar\r\ncaule\r\ncausador\r\ncautelar\r\ncavalo\r\ncaverna\r\ncebola\r\ncedilha\r\ncegonha\r\ncelebrar\r\ncelular\r\ncenoura\r\ncenso\r\ncenteio\r\ncercar\r\ncerrado\r\ncerteiro\r\ncerveja\r\ncetim\r\ncevada\r\nchacota\r\nchaleira\r\nchamado\r\nchapada\r\ncharme\r\nchatice\r\nchave\r\nchefe\r\nchegada\r\ncheiro\r\ncheque\r\nchicote\r\nchifre\r\nchinelo\r\nchocalho\r\nchover\r\nchumbo\r\nchutar\r\nchuva\r\ncicatriz\r\nciclone\r\ncidade\r\ncidreira\r\nciente\r\ncigana\r\ncimento\r\ncinto\r\ncinza\r\nciranda\r\ncircuito\r\ncirurgia\r\ncitar\r\nclareza\r\nclero\r\nclicar\r\nclone\r\nclube\r\ncoado\r\ncoagir\r\ncobaia\r\ncobertor\r\ncobrar\r\ncocada\r\ncoelho\r\ncoentro\r\ncoeso\r\ncogumelo\r\ncoibir\r\ncoifa\r\ncoiote\r\ncolar\r\ncoleira\r\ncolher\r\ncolidir\r\ncolmeia\r\ncolono\r\ncoluna\r\ncomando\r\ncombinar\r\ncomentar\r\ncomitiva\r\ncomover\r\ncomplexo\r\ncomum\r\nconcha\r\ncondor\r\nconectar\r\nconfuso\r\ncongelar\r\nconhecer\r\nconjugar\r\nconsumir\r\ncontrato\r\nconvite\r\ncooperar\r\ncopeiro\r\ncopiador\r\ncopo\r\ncoquetel\r\ncoragem\r\ncordial\r\ncorneta\r\ncoronha\r\ncorporal\r\ncorreio\r\ncortejo\r\ncoruja\r\ncorvo\r\ncosseno\r\ncostela\r\ncotonete\r\ncouro\r\ncouve\r\ncovil\r\ncozinha\r\ncratera\r\ncravo\r\ncreche\r\ncredor\r\ncreme\r\ncrer\r\ncrespo\r\ncriada\r\ncriminal\r\ncrioulo\r\ncrise\r\ncriticar\r\ncrosta\r\ncrua\r\ncruzeiro\r\ncubano\r\ncueca\r\ncuidado\r\ncujo\r\nculatra\r\nculminar\r\nculpar\r\ncultura\r\ncumprir\r\ncunhado\r\ncupido\r\ncurativo\r\ncurral\r\ncursar\r\ncurto\r\ncuspir\r\ncustear\r\ncutelo\r\ndamasco\r\ndatar\r\ndebater\r\ndebitar\r\ndeboche\r\ndebulhar\r\ndecalque\r\ndecimal\r\ndeclive\r\ndecote\r\ndecretar\r\ndedal\r\ndedicado\r\ndeduzir\r\ndefesa\r\ndefumar\r\ndegelo\r\ndegrau\r\ndegustar\r\ndeitado\r\ndeixar\r\ndelator\r\ndelegado\r\ndelinear\r\ndelonga\r\ndemanda\r\ndemitir\r\ndemolido\r\ndentista\r\ndepenado\r\ndepilar\r\ndepois\r\ndepressa\r\ndepurar\r\nderiva\r\nderramar\r\ndesafio\r\ndesbotar\r\ndescanso\r\ndesenho\r\ndesfiado\r\ndesgaste\r\ndesigual\r\ndeslize\r\ndesmamar\r\ndesova\r\ndespesa\r\ndestaque\r\ndesviar\r\ndetalhar\r\ndetentor\r\ndetonar\r\ndetrito\r\ndeusa\r\ndever\r\ndevido\r\ndevotado\r\ndezena\r\ndiagrama\r\ndialeto\r\ndidata\r\ndifuso\r\ndigitar\r\ndilatado\r\ndiluente\r\ndiminuir\r\ndinastia\r\ndinheiro\r\ndiocese\r\ndireto\r\ndiscreta\r\ndisfarce\r\ndisparo\r\ndisquete\r\ndissipar\r\ndistante\r\nditador\r\ndiurno\r\ndiverso\r\ndivisor\r\ndivulgar\r\ndizer\r\ndobrador\r\ndolorido\r\ndomador\r\ndominado\r\ndonativo\r\ndonzela\r\ndormente\r\ndorsal\r\ndosagem\r\ndourado\r\ndoutor\r\ndrenagem\r\ndrible\r\ndrogaria\r\nduelar\r\nduende\r\ndueto\r\nduplo\r\nduquesa\r\ndurante\r\nduvidoso\r\neclodir\r\necoar\r\necologia\r\nedificar\r\nedital\r\neducado\r\nefeito\r\nefetivar\r\nejetar\r\nelaborar\r\neleger\r\neleitor\r\nelenco\r\nelevador\r\neliminar\r\nelogiar\r\nembargo\r\nembolado\r\nembrulho\r\nembutido\r\nemenda\r\nemergir\r\nemissor\r\nempatia\r\nempenho\r\nempinado\r\nempolgar\r\nemprego\r\nempurrar\r\nemulador\r\nencaixe\r\nencenado\r\nenchente\r\nencontro\r\nendeusar\r\nendossar\r\nenfaixar\r\nenfeite\r\nenfim\r\nengajado\r\nengenho\r\nenglobar\r\nengomado\r\nengraxar\r\nenguia\r\nenjoar\r\nenlatar\r\nenquanto\r\nenraizar\r\nenrolado\r\nenrugar\r\nensaio\r\nenseada\r\nensino\r\nensopado\r\nentanto\r\nenteado\r\nentidade\r\nentortar\r\nentrada\r\nentulho\r\nenvergar\r\nenviado\r\nenvolver\r\nenxame\r\nenxerto\r\nenxofre\r\nenxuto\r\nepiderme\r\nequipar\r\nereto\r\nerguido\r\nerrata\r\nerva\r\nervilha\r\nesbanjar\r\nesbelto\r\nescama\r\nescola\r\nescrita\r\nescuta\r\nesfinge\r\nesfolar\r\nesfregar\r\nesfumado\r\nesgrima\r\nesmalte\r\nespanto\r\nespelho\r\nespiga\r\nesponja\r\nespreita\r\nespumar\r\nesquerda\r\nestaca\r\nesteira\r\nesticar\r\nestofado\r\nestrela\r\nestudo\r\nesvaziar\r\netanol\r\netiqueta\r\neuforia\r\neuropeu\r\nevacuar\r\nevaporar\r\nevasivo\r\neventual\r\nevidente\r\nevoluir\r\nexagero\r\nexalar\r\nexaminar\r\nexato\r\nexausto\r\nexcesso\r\nexcitar\r\nexclamar\r\nexecutar\r\nexemplo\r\nexibir\r\nexigente\r\nexonerar\r\nexpandir\r\nexpelir\r\nexpirar\r\nexplanar\r\nexposto\r\nexpresso\r\nexpulsar\r\nexterno\r\nextinto\r\nextrato\r\nfabricar\r\nfabuloso\r\nfaceta\r\nfacial\r\nfada\r\nfadiga\r\nfaixa\r\nfalar\r\nfalta\r\nfamiliar\r\nfandango\r\nfanfarra\r\nfantoche\r\nfardado\r\nfarelo\r\nfarinha\r\nfarofa\r\nfarpa\r\nfartura\r\nfatia\r\nfator\r\nfavorita\r\nfaxina\r\nfazenda\r\nfechado\r\nfeijoada\r\nfeirante\r\nfelino\r\nfeminino\r\nfenda\r\nfeno\r\nfera\r\nferiado\r\nferrugem\r\nferver\r\nfestejar\r\nfetal\r\nfeudal\r\nfiapo\r\nfibrose\r\nficar\r\nficheiro\r\nfigurado\r\nfileira\r\nfilho\r\nfilme\r\nfiltrar\r\nfirmeza\r\nfisgada\r\nfissura\r\nfita\r\nfivela\r\nfixador\r\nfixo\r\nflacidez\r\nflamingo\r\nflanela\r\nflechada\r\nflora\r\nflutuar\r\nfluxo\r\nfocal\r\nfocinho\r\nfofocar\r\nfogo\r\nfoguete\r\nfoice\r\nfolgado\r\nfolheto\r\nforjar\r\nformiga\r\nforno\r\nforte\r\nfosco\r\nfossa\r\nfragata\r\nfralda\r\nfrango\r\nfrasco\r\nfraterno\r\nfreira\r\nfrente\r\nfretar\r\nfrieza\r\nfriso\r\nfritura\r\nfronha\r\nfrustrar\r\nfruteira\r\nfugir\r\nfulano\r\nfuligem\r\nfundar\r\nfungo\r\nfunil\r\nfurador\r\nfurioso\r\nfutebol\r\ngabarito\r\ngabinete\r\ngado\r\ngaiato\r\ngaiola\r\ngaivota\r\ngalega\r\ngalho\r\ngalinha\r\ngalocha\r\nganhar\r\ngaragem\r\ngarfo\r\ngargalo\r\ngarimpo\r\ngaroupa\r\ngarrafa\r\ngasoduto\r\ngasto\r\ngata\r\ngatilho\r\ngaveta\r\ngazela\r\ngelado\r\ngeleia\r\ngelo\r\ngemada\r\ngemer\r\ngemido\r\ngeneroso\r\ngengiva\r\ngenial\r\ngenoma\r\ngenro\r\ngeologia\r\ngerador\r\ngerminar\r\ngesso\r\ngestor\r\nginasta\r\ngincana\r\ngingado\r\ngirafa\r\ngirino\r\nglacial\r\nglicose\r\nglobal\r\nglorioso\r\ngoela\r\ngoiaba\r\ngolfe\r\ngolpear\r\ngordura\r\ngorjeta\r\ngorro\r\ngostoso\r\ngoteira\r\ngovernar\r\ngracejo\r\ngradual\r\ngrafite\r\ngralha\r\ngrampo\r\ngranada\r\ngratuito\r\ngraveto\r\ngraxa\r\ngrego\r\ngrelhar\r\ngreve\r\ngrilo\r\ngrisalho\r\ngritaria\r\ngrosso\r\ngrotesco\r\ngrudado\r\ngrunhido\r\ngruta\r\nguache\r\nguarani\r\nguaxinim\r\nguerrear\r\nguiar\r\nguincho\r\nguisado\r\ngula\r\nguloso\r\nguru\r\nhabitar\r\nharmonia\r\nhaste\r\nhaver\r\nhectare\r\nherdar\r\nheresia\r\nhesitar\r\nhiato\r\nhibernar\r\nhidratar\r\nhiena\r\nhino\r\nhipismo\r\nhipnose\r\nhipoteca\r\nhoje\r\nholofote\r\nhomem\r\nhonesto\r\nhonrado\r\nhormonal\r\nhospedar\r\nhumorado\r\niate\r\nideia\r\nidoso\r\nignorado\r\nigreja\r\niguana\r\nileso\r\nilha\r\niludido\r\niluminar\r\nilustrar\r\nimagem\r\nimediato\r\nimenso\r\nimersivo\r\niminente\r\nimitador\r\nimortal\r\nimpacto\r\nimpedir\r\nimplante\r\nimpor\r\nimprensa\r\nimpune\r\nimunizar\r\ninalador\r\ninapto\r\ninativo\r\nincenso\r\ninchar\r\nincidir\r\nincluir\r\nincolor\r\nindeciso\r\nindireto\r\nindutor\r\nineficaz\r\ninerente\r\ninfantil\r\ninfestar\r\ninfinito\r\ninflamar\r\ninformal\r\ninfrator\r\ningerir\r\ninibido\r\ninicial\r\ninimigo\r\ninjetar\r\ninocente\r\ninodoro\r\ninovador\r\ninox\r\ninquieto\r\ninscrito\r\ninseto\r\ninsistir\r\ninspetor\r\ninstalar\r\ninsulto\r\nintacto\r\nintegral\r\nintimar\r\nintocado\r\nintriga\r\ninvasor\r\ninverno\r\ninvicto\r\ninvocar\r\niogurte\r\niraniano\r\nironizar\r\nirreal\r\nirritado\r\nisca\r\nisento\r\nisolado\r\nisqueiro\r\nitaliano\r\njaneiro\r\njangada\r\njanta\r\njararaca\r\njardim\r\njarro\r\njasmim\r\njato\r\njavali\r\njazida\r\njejum\r\njoaninha\r\njoelhada\r\njogador\r\njoia\r\njornal\r\njorrar\r\njovem\r\njuba\r\njudeu\r\njudoca\r\njuiz\r\njulgador\r\njulho\r\njurado\r\njurista\r\njuro\r\njusta\r\nlabareda\r\nlaboral\r\nlacre\r\nlactante\r\nladrilho\r\nlagarta\r\nlagoa\r\nlaje\r\nlamber\r\nlamentar\r\nlaminar\r\nlampejo\r\nlanche\r\nlapidar\r\nlapso\r\nlaranja\r\nlareira\r\nlargura\r\nlasanha\r\nlastro\r\nlateral\r\nlatido\r\nlavanda\r\nlavoura\r\nlavrador\r\nlaxante\r\nlazer\r\nlealdade\r\nlebre\r\nlegado\r\nlegendar\r\nlegista\r\nleigo\r\nleiloar\r\nleitura\r\nlembrete\r\nleme\r\nlenhador\r\nlentilha\r\nleoa\r\nlesma\r\nleste\r\nletivo\r\nletreiro\r\nlevar\r\nleveza\r\nlevitar\r\nliberal\r\nlibido\r\nliderar\r\nligar\r\nligeiro\r\nlimitar\r\nlimoeiro\r\nlimpador\r\nlinda\r\nlinear\r\nlinhagem\r\nliquidez\r\nlistagem\r\nlisura\r\nlitoral\r\nlivro\r\nlixa\r\nlixeira\r\nlocador\r\nlocutor\r\nlojista\r\nlombo\r\nlona\r\nlonge\r\nlontra\r\nlorde\r\nlotado\r\nloteria\r\nloucura\r\nlousa\r\nlouvar\r\nluar\r\nlucidez\r\nlucro\r\nluneta\r\nlustre\r\nlutador\r\nluva\r\nmacaco\r\nmacete\r\nmachado\r\nmacio\r\nmadeira\r\nmadrinha\r\nmagnata\r\nmagreza\r\nmaior\r\nmais\r\nmalandro\r\nmalha\r\nmalote\r\nmaluco\r\nmamilo\r\nmamoeiro\r\nmamute\r\nmanada\r\nmancha\r\nmandato\r\nmanequim\r\nmanhoso\r\nmanivela\r\nmanobrar\r\nmansa\r\nmanter\r\nmanusear\r\nmapeado\r\nmaquinar\r\nmarcador\r\nmaresia\r\nmarfim\r\nmargem\r\nmarinho\r\nmarmita\r\nmaroto\r\nmarquise\r\nmarreco\r\nmartelo\r\nmarujo\r\nmascote\r\nmasmorra\r\nmassagem\r\nmastigar\r\nmatagal\r\nmaterno\r\nmatinal\r\nmatutar\r\nmaxilar\r\nmedalha\r\nmedida\r\nmedusa\r\nmegafone\r\nmeiga\r\nmelancia\r\nmelhor\r\nmembro\r\nmemorial\r\nmenino\r\nmenos\r\nmensagem\r\nmental\r\nmerecer\r\nmergulho\r\nmesada\r\nmesclar\r\nmesmo\r\nmesquita\r\nmestre\r\nmetade\r\nmeteoro\r\nmetragem\r\nmexer\r\nmexicano\r\nmicro\r\nmigalha\r\nmigrar\r\nmilagre\r\nmilenar\r\nmilhar\r\nmimado\r\nminerar\r\nminhoca\r\nministro\r\nminoria\r\nmiolo\r\nmirante\r\nmirtilo\r\nmisturar\r\nmocidade\r\nmoderno\r\nmodular\r\nmoeda\r\nmoer\r\nmoinho\r\nmoita\r\nmoldura\r\nmoleza\r\nmolho\r\nmolinete\r\nmolusco\r\nmontanha\r\nmoqueca\r\nmorango\r\nmorcego\r\nmordomo\r\nmorena\r\nmosaico\r\nmosquete\r\nmostarda\r\nmotel\r\nmotim\r\nmoto\r\nmotriz\r\nmuda\r\nmuito\r\nmulata\r\nmulher\r\nmultar\r\nmundial\r\nmunido\r\nmuralha\r\nmurcho\r\nmuscular\r\nmuseu\r\nmusical\r\nnacional\r\nnadador\r\nnaja\r\nnamoro\r\nnarina\r\nnarrado\r\nnascer\r\nnativa\r\nnatureza\r\nnavalha\r\nnavegar\r\nnavio\r\nneblina\r\nnebuloso\r\nnegativa\r\nnegociar\r\nnegrito\r\nnervoso\r\nneta\r\nneural\r\nnevasca\r\nnevoeiro\r\nninar\r\nninho\r\nnitidez\r\nnivelar\r\nnobreza\r\nnoite\r\nnoiva\r\nnomear\r\nnominal\r\nnordeste\r\nnortear\r\nnotar\r\nnoticiar\r\nnoturno\r\nnovelo\r\nnovilho\r\nnovo\r\nnublado\r\nnudez\r\nnumeral\r\nnupcial\r\nnutrir\r\nnuvem\r\nobcecado\r\nobedecer\r\nobjetivo\r\nobrigado\r\nobscuro\r\nobstetra\r\nobter\r\nobturar\r\nocidente\r\nocioso\r\nocorrer\r\noculista\r\nocupado\r\nofegante\r\nofensiva\r\noferenda\r\noficina\r\nofuscado\r\nogiva\r\nolaria\r\noleoso\r\nolhar\r\noliveira\r\nombro\r\nomelete\r\nomisso\r\nomitir\r\nondulado\r\noneroso\r\nontem\r\nopcional\r\noperador\r\noponente\r\noportuno\r\noposto\r\norar\r\norbitar\r\nordem\r\nordinal\r\norfanato\r\norgasmo\r\norgulho\r\noriental\r\norigem\r\noriundo\r\norla\r\nortodoxo\r\norvalho\r\noscilar\r\nossada\r\nosso\r\nostentar\r\notimismo\r\nousadia\r\noutono\r\noutubro\r\nouvido\r\novelha\r\novular\r\noxidar\r\noxigenar\r\npacato\r\npaciente\r\npacote\r\npactuar\r\npadaria\r\npadrinho\r\npagar\r\npagode\r\npainel\r\npairar\r\npaisagem\r\npalavra\r\npalestra\r\npalheta\r\npalito\r\npalmada\r\npalpitar\r\npancada\r\npanela\r\npanfleto\r\npanqueca\r\npantanal\r\npapagaio\r\npapelada\r\npapiro\r\nparafina\r\nparcial\r\npardal\r\nparede\r\npartida\r\npasmo\r\npassado\r\npastel\r\npatamar\r\npatente\r\npatinar\r\npatrono\r\npaulada\r\npausar\r\npeculiar\r\npedalar\r\npedestre\r\npediatra\r\npedra\r\npegada\r\npeitoral\r\npeixe\r\npele\r\npelicano\r\npenca\r\npendurar\r\npeneira\r\npenhasco\r\npensador\r\npente\r\nperceber\r\nperfeito\r\npergunta\r\nperito\r\npermitir\r\nperna\r\nperplexo\r\npersiana\r\npertence\r\nperuca\r\npescado\r\npesquisa\r\npessoa\r\npetiscar\r\npiada\r\npicado\r\npiedade\r\npigmento\r\npilastra\r\npilhado\r\npilotar\r\npimenta\r\npincel\r\npinguim\r\npinha\r\npinote\r\npintar\r\npioneiro\r\npipoca\r\npiquete\r\npiranha\r\npires\r\npirueta\r\npiscar\r\npistola\r\npitanga\r\npivete\r\nplanta\r\nplaqueta\r\nplatina\r\nplebeu\r\nplumagem\r\npluvial\r\npneu\r\npoda\r\npoeira\r\npoetisa\r\npolegada\r\npoliciar\r\npoluente\r\npolvilho\r\npomar\r\npomba\r\nponderar\r\npontaria\r\npopuloso\r\nporta\r\npossuir\r\npostal\r\npote\r\npoupar\r\npouso\r\npovoar\r\npraia\r\nprancha\r\nprato\r\npraxe\r\nprece\r\npredador\r\nprefeito\r\npremiar\r\nprensar\r\npreparar\r\npresilha\r\npretexto\r\nprevenir\r\nprezar\r\nprimata\r\nprincesa\r\nprisma\r\nprivado\r\nprocesso\r\nproduto\r\nprofeta\r\nproibido\r\nprojeto\r\nprometer\r\npropagar\r\nprosa\r\nprotetor\r\nprovador\r\npublicar\r\npudim\r\npular\r\npulmonar\r\npulseira\r\npunhal\r\npunir\r\npupilo\r\npureza\r\npuxador\r\nquadra\r\nquantia\r\nquarto\r\nquase\r\nquebrar\r\nqueda\r\nqueijo\r\nquente\r\nquerido\r\nquimono\r\nquina\r\nquiosque\r\nrabanada\r\nrabisco\r\nrachar\r\nracionar\r\nradial\r\nraiar\r\nrainha\r\nraio\r\nraiva\r\nrajada\r\nralado\r\nramal\r\nranger\r\nranhura\r\nrapadura\r\nrapel\r\nrapidez\r\nraposa\r\nraquete\r\nraridade\r\nrasante\r\nrascunho\r\nrasgar\r\nraspador\r\nrasteira\r\nrasurar\r\nratazana\r\nratoeira\r\nrealeza\r\nreanimar\r\nreaver\r\nrebaixar\r\nrebelde\r\nrebolar\r\nrecado\r\nrecente\r\nrecheio\r\nrecibo\r\nrecordar\r\nrecrutar\r\nrecuar\r\nrede\r\nredimir\r\nredonda\r\nreduzida\r\nreenvio\r\nrefinar\r\nrefletir\r\nrefogar\r\nrefresco\r\nrefugiar\r\nregalia\r\nregime\r\nregra\r\nreinado\r\nreitor\r\nrejeitar\r\nrelativo\r\nremador\r\nremendo\r\nremorso\r\nrenovado\r\nreparo\r\nrepelir\r\nrepleto\r\nrepolho\r\nrepresa\r\nrepudiar\r\nrequerer\r\nresenha\r\nresfriar\r\nresgatar\r\nresidir\r\nresolver\r\nrespeito\r\nressaca\r\nrestante\r\nresumir\r\nretalho\r\nreter\r\nretirar\r\nretomada\r\nretratar\r\nrevelar\r\nrevisor\r\nrevolta\r\nriacho\r\nrica\r\nrigidez\r\nrigoroso\r\nrimar\r\nringue\r\nrisada\r\nrisco\r\nrisonho\r\nrobalo\r\nrochedo\r\nrodada\r\nrodeio\r\nrodovia\r\nroedor\r\nroleta\r\nromano\r\nroncar\r\nrosado\r\nroseira\r\nrosto\r\nrota\r\nroteiro\r\nrotina\r\nrotular\r\nrouco\r\nroupa\r\nroxo\r\nrubro\r\nrugido\r\nrugoso\r\nruivo\r\nrumo\r\nrupestre\r\nrusso\r\nsabor\r\nsaciar\r\nsacola\r\nsacudir\r\nsadio\r\nsafira\r\nsaga\r\nsagrada\r\nsaibro\r\nsalada\r\nsaleiro\r\nsalgado\r\nsaliva\r\nsalpicar\r\nsalsicha\r\nsaltar\r\nsalvador\r\nsambar\r\nsamurai\r\nsanar\r\nsanfona\r\nsangue\r\nsanidade\r\nsapato\r\nsarda\r\nsargento\r\nsarjeta\r\nsaturar\r\nsaudade\r\nsaxofone\r\nsazonal\r\nsecar\r\nsecular\r\nseda\r\nsedento\r\nsediado\r\nsedoso\r\nsedutor\r\nsegmento\r\nsegredo\r\nsegundo\r\nseiva\r\nseleto\r\nselvagem\r\nsemanal\r\nsemente\r\nsenador\r\nsenhor\r\nsensual\r\nsentado\r\nseparado\r\nsereia\r\nseringa\r\nserra\r\nservo\r\nsetembro\r\nsetor\r\nsigilo\r\nsilhueta\r\nsilicone\r\nsimetria\r\nsimpatia\r\nsimular\r\nsinal\r\nsincero\r\nsingular\r\nsinopse\r\nsintonia\r\nsirene\r\nsiri\r\nsituado\r\nsoberano\r\nsobra\r\nsocorro\r\nsogro\r\nsoja\r\nsolda\r\nsoletrar\r\nsolteiro\r\nsombrio\r\nsonata\r\nsondar\r\nsonegar\r\nsonhador\r\nsono\r\nsoprano\r\nsoquete\r\nsorrir\r\nsorteio\r\nsossego\r\nsotaque\r\nsoterrar\r\nsovado\r\nsozinho\r\nsuavizar\r\nsubida\r\nsubmerso\r\nsubsolo\r\nsubtrair\r\nsucata\r\nsucesso\r\nsuco\r\nsudeste\r\nsufixo\r\nsugador\r\nsugerir\r\nsujeito\r\nsulfato\r\nsumir\r\nsuor\r\nsuperior\r\nsuplicar\r\nsuposto\r\nsuprimir\r\nsurdina\r\nsurfista\r\nsurpresa\r\nsurreal\r\nsurtir\r\nsuspiro\r\nsustento\r\ntabela\r\ntablete\r\ntabuada\r\ntacho\r\ntagarela\r\ntalher\r\ntalo\r\ntalvez\r\ntamanho\r\ntamborim\r\ntampa\r\ntangente\r\ntanto\r\ntapar\r\ntapioca\r\ntardio\r\ntarefa\r\ntarja\r\ntarraxa\r\ntatuagem\r\ntaurino\r\ntaxativo\r\ntaxista\r\nteatral\r\ntecer\r\ntecido\r\nteclado\r\ntedioso\r\nteia\r\nteimar\r\ntelefone\r\ntelhado\r\ntempero\r\ntenente\r\ntensor\r\ntentar\r\ntermal\r\nterno\r\nterreno\r\ntese\r\ntesoura\r\ntestado\r\nteto\r\ntextura\r\ntexugo\r\ntiara\r\ntigela\r\ntijolo\r\ntimbrar\r\ntimidez\r\ntingido\r\ntinteiro\r\ntiragem\r\ntitular\r\ntoalha\r\ntocha\r\ntolerar\r\ntolice\r\ntomada\r\ntomilho\r\ntonel\r\ntontura\r\ntopete\r\ntora\r\ntorcido\r\ntorneio\r\ntorque\r\ntorrada\r\ntorto\r\ntostar\r\ntouca\r\ntoupeira\r\ntoxina\r\ntrabalho\r\ntracejar\r\ntradutor\r\ntrafegar\r\ntrajeto\r\ntrama\r\ntrancar\r\ntrapo\r\ntraseiro\r\ntratador\r\ntravar\r\ntreino\r\ntremer\r\ntrepidar\r\ntrevo\r\ntriagem\r\ntribo\r\ntriciclo\r\ntridente\r\ntrilogia\r\ntrindade\r\ntriplo\r\ntriturar\r\ntriunfal\r\ntrocar\r\ntrombeta\r\ntrova\r\ntrunfo\r\ntruque\r\ntubular\r\ntucano\r\ntudo\r\ntulipa\r\ntupi\r\nturbo\r\nturma\r\nturquesa\r\ntutelar\r\ntutorial\r\nuivar\r\numbigo\r\nunha\r\nunidade\r\nuniforme\r\nurologia\r\nurso\r\nurtiga\r\nurubu\r\nusado\r\nusina\r\nusufruir\r\nvacina\r\nvadiar\r\nvagaroso\r\nvaidoso\r\nvala\r\nvalente\r\nvalidade\r\nvalores\r\nvantagem\r\nvaqueiro\r\nvaranda\r\nvareta\r\nvarrer\r\nvascular\r\nvasilha\r\nvassoura\r\nvazar\r\nvazio\r\nveado\r\nvedar\r\nvegetar\r\nveicular\r\nveleiro\r\nvelhice\r\nveludo\r\nvencedor\r\nvendaval\r\nvenerar\r\nventre\r\nverbal\r\nverdade\r\nvereador\r\nvergonha\r\nvermelho\r\nverniz\r\nversar\r\nvertente\r\nvespa\r\nvestido\r\nvetorial\r\nviaduto\r\nviagem\r\nviajar\r\nviatura\r\nvibrador\r\nvideira\r\nvidraria\r\nviela\r\nviga\r\nvigente\r\nvigiar\r\nvigorar\r\nvilarejo\r\nvinco\r\nvinheta\r\nvinil\r\nvioleta\r\nvirada\r\nvirtude\r\nvisitar\r\nvisto\r\nvitral\r\nviveiro\r\nvizinho\r\nvoador\r\nvoar\r\nvogal\r\nvolante\r\nvoleibol\r\nvoltagem\r\nvolumoso\r\nvontade\r\nvulto\r\nvuvuzela\r\nxadrez\r\nxarope\r\nxeque\r\nxeretar\r\nxerife\r\nxingar\r\nzangado\r\nzarpar\r\nzebu\r\nzelador\r\nzombar\r\nzoologia\r\nzumbido`.split('\\n');\r\n", "export const wordlist = `的\r\n一\r\n是\r\n在\r\n不\r\n了\r\n有\r\n和\r\n人\r\n这\r\n中\r\n大\r\n为\r\n上\r\n个\r\n国\r\n我\r\n以\r\n要\r\n他\r\n时\r\n来\r\n用\r\n们\r\n生\r\n到\r\n作\r\n地\r\n于\r\n出\r\n就\r\n分\r\n对\r\n成\r\n会\r\n可\r\n主\r\n发\r\n年\r\n动\r\n同\r\n工\r\n也\r\n能\r\n下\r\n过\r\n子\r\n说\r\n产\r\n种\r\n面\r\n而\r\n方\r\n后\r\n多\r\n定\r\n行\r\n学\r\n法\r\n所\r\n民\r\n得\r\n经\r\n十\r\n三\r\n之\r\n进\r\n着\r\n等\r\n部\r\n度\r\n家\r\n电\r\n力\r\n里\r\n如\r\n水\r\n化\r\n高\r\n自\r\n二\r\n理\r\n起\r\n小\r\n物\r\n现\r\n实\r\n加\r\n量\r\n都\r\n两\r\n体\r\n制\r\n机\r\n当\r\n使\r\n点\r\n从\r\n业\r\n本\r\n去\r\n把\r\n性\r\n好\r\n应\r\n开\r\n它\r\n合\r\n还\r\n因\r\n由\r\n其\r\n些\r\n然\r\n前\r\n外\r\n天\r\n政\r\n四\r\n日\r\n那\r\n社\r\n义\r\n事\r\n平\r\n形\r\n相\r\n全\r\n表\r\n间\r\n样\r\n与\r\n关\r\n各\r\n重\r\n新\r\n线\r\n内\r\n数\r\n正\r\n心\r\n反\r\n你\r\n明\r\n看\r\n原\r\n又\r\n么\r\n利\r\n比\r\n或\r\n但\r\n质\r\n气\r\n第\r\n向\r\n道\r\n命\r\n此\r\n变\r\n条\r\n只\r\n没\r\n结\r\n解\r\n问\r\n意\r\n建\r\n月\r\n公\r\n无\r\n系\r\n军\r\n很\r\n情\r\n者\r\n最\r\n立\r\n代\r\n想\r\n已\r\n通\r\n并\r\n提\r\n直\r\n题\r\n党\r\n程\r\n展\r\n五\r\n果\r\n料\r\n象\r\n员\r\n革\r\n位\r\n入\r\n常\r\n文\r\n总\r\n次\r\n品\r\n式\r\n活\r\n设\r\n及\r\n管\r\n特\r\n件\r\n长\r\n求\r\n老\r\n头\r\n基\r\n资\r\n边\r\n流\r\n路\r\n级\r\n少\r\n图\r\n山\r\n统\r\n接\r\n知\r\n较\r\n将\r\n组\r\n见\r\n计\r\n别\r\n她\r\n手\r\n角\r\n期\r\n根\r\n论\r\n运\r\n农\r\n指\r\n几\r\n九\r\n区\r\n强\r\n放\r\n决\r\n西\r\n被\r\n干\r\n做\r\n必\r\n战\r\n先\r\n回\r\n则\r\n任\r\n取\r\n据\r\n处\r\n队\r\n南\r\n给\r\n色\r\n光\r\n门\r\n即\r\n保\r\n治\r\n北\r\n造\r\n百\r\n规\r\n热\r\n领\r\n七\r\n海\r\n口\r\n东\r\n导\r\n器\r\n压\r\n志\r\n世\r\n金\r\n增\r\n争\r\n济\r\n阶\r\n油\r\n思\r\n术\r\n极\r\n交\r\n受\r\n联\r\n什\r\n认\r\n六\r\n共\r\n权\r\n收\r\n证\r\n改\r\n清\r\n美\r\n再\r\n采\r\n转\r\n更\r\n单\r\n风\r\n切\r\n打\r\n白\r\n教\r\n速\r\n花\r\n带\r\n安\r\n场\r\n身\r\n车\r\n例\r\n真\r\n务\r\n具\r\n万\r\n每\r\n目\r\n至\r\n达\r\n走\r\n积\r\n示\r\n议\r\n声\r\n报\r\n斗\r\n完\r\n类\r\n八\r\n离\r\n华\r\n名\r\n确\r\n才\r\n科\r\n张\r\n信\r\n马\r\n节\r\n话\r\n米\r\n整\r\n空\r\n元\r\n况\r\n今\r\n集\r\n温\r\n传\r\n土\r\n许\r\n步\r\n群\r\n广\r\n石\r\n记\r\n需\r\n段\r\n研\r\n界\r\n拉\r\n林\r\n律\r\n叫\r\n且\r\n究\r\n观\r\n越\r\n织\r\n装\r\n影\r\n算\r\n低\r\n持\r\n音\r\n众\r\n书\r\n布\r\n复\r\n容\r\n儿\r\n须\r\n际\r\n商\r\n非\r\n验\r\n连\r\n断\r\n深\r\n难\r\n近\r\n矿\r\n千\r\n周\r\n委\r\n素\r\n技\r\n备\r\n半\r\n办\r\n青\r\n省\r\n列\r\n习\r\n响\r\n约\r\n支\r\n般\r\n史\r\n感\r\n劳\r\n便\r\n团\r\n往\r\n酸\r\n历\r\n市\r\n克\r\n何\r\n除\r\n消\r\n构\r\n府\r\n称\r\n太\r\n准\r\n精\r\n值\r\n号\r\n率\r\n族\r\n维\r\n划\r\n选\r\n标\r\n写\r\n存\r\n候\r\n毛\r\n亲\r\n快\r\n效\r\n斯\r\n院\r\n查\r\n江\r\n型\r\n眼\r\n王\r\n按\r\n格\r\n养\r\n易\r\n置\r\n派\r\n层\r\n片\r\n始\r\n却\r\n专\r\n状\r\n育\r\n厂\r\n京\r\n识\r\n适\r\n属\r\n圆\r\n包\r\n火\r\n住\r\n调\r\n满\r\n县\r\n局\r\n照\r\n参\r\n红\r\n细\r\n引\r\n听\r\n该\r\n铁\r\n价\r\n严\r\n首\r\n底\r\n液\r\n官\r\n德\r\n随\r\n病\r\n苏\r\n失\r\n尔\r\n死\r\n讲\r\n配\r\n女\r\n黄\r\n推\r\n显\r\n谈\r\n罪\r\n神\r\n艺\r\n呢\r\n席\r\n含\r\n企\r\n望\r\n密\r\n批\r\n营\r\n项\r\n防\r\n举\r\n球\r\n英\r\n氧\r\n势\r\n告\r\n李\r\n台\r\n落\r\n木\r\n帮\r\n轮\r\n破\r\n亚\r\n师\r\n围\r\n注\r\n远\r\n字\r\n材\r\n排\r\n供\r\n河\r\n态\r\n封\r\n另\r\n施\r\n减\r\n树\r\n溶\r\n怎\r\n止\r\n案\r\n言\r\n士\r\n均\r\n武\r\n固\r\n叶\r\n鱼\r\n波\r\n视\r\n仅\r\n费\r\n紧\r\n爱\r\n左\r\n章\r\n早\r\n朝\r\n害\r\n续\r\n轻\r\n服\r\n试\r\n食\r\n充\r\n兵\r\n源\r\n判\r\n护\r\n司\r\n足\r\n某\r\n练\r\n差\r\n致\r\n板\r\n田\r\n降\r\n黑\r\n犯\r\n负\r\n击\r\n范\r\n继\r\n兴\r\n似\r\n余\r\n坚\r\n曲\r\n输\r\n修\r\n故\r\n城\r\n夫\r\n够\r\n送\r\n笔\r\n船\r\n占\r\n右\r\n财\r\n吃\r\n富\r\n春\r\n职\r\n觉\r\n汉\r\n画\r\n功\r\n巴\r\n跟\r\n虽\r\n杂\r\n飞\r\n检\r\n吸\r\n助\r\n升\r\n阳\r\n互\r\n初\r\n创\r\n抗\r\n考\r\n投\r\n坏\r\n策\r\n古\r\n径\r\n换\r\n未\r\n跑\r\n留\r\n钢\r\n曾\r\n端\r\n责\r\n站\r\n简\r\n述\r\n钱\r\n副\r\n尽\r\n帝\r\n射\r\n草\r\n冲\r\n承\r\n独\r\n令\r\n限\r\n阿\r\n宣\r\n环\r\n双\r\n请\r\n超\r\n微\r\n让\r\n控\r\n州\r\n良\r\n轴\r\n找\r\n否\r\n纪\r\n益\r\n依\r\n优\r\n顶\r\n础\r\n载\r\n倒\r\n房\r\n突\r\n坐\r\n粉\r\n敌\r\n略\r\n客\r\n袁\r\n冷\r\n胜\r\n绝\r\n析\r\n块\r\n剂\r\n测\r\n丝\r\n协\r\n诉\r\n念\r\n陈\r\n仍\r\n罗\r\n盐\r\n友\r\n洋\r\n错\r\n苦\r\n夜\r\n刑\r\n移\r\n频\r\n逐\r\n靠\r\n混\r\n母\r\n短\r\n皮\r\n终\r\n聚\r\n汽\r\n村\r\n云\r\n哪\r\n既\r\n距\r\n卫\r\n停\r\n烈\r\n央\r\n察\r\n烧\r\n迅\r\n境\r\n若\r\n印\r\n洲\r\n刻\r\n括\r\n激\r\n孔\r\n搞\r\n甚\r\n室\r\n待\r\n核\r\n校\r\n散\r\n侵\r\n吧\r\n甲\r\n游\r\n久\r\n菜\r\n味\r\n旧\r\n模\r\n湖\r\n货\r\n损\r\n预\r\n阻\r\n毫\r\n普\r\n稳\r\n乙\r\n妈\r\n植\r\n息\r\n扩\r\n银\r\n语\r\n挥\r\n酒\r\n守\r\n拿\r\n序\r\n纸\r\n医\r\n缺\r\n雨\r\n吗\r\n针\r\n刘\r\n啊\r\n急\r\n唱\r\n误\r\n训\r\n愿\r\n审\r\n附\r\n获\r\n茶\r\n鲜\r\n粮\r\n斤\r\n孩\r\n脱\r\n硫\r\n肥\r\n善\r\n龙\r\n演\r\n父\r\n渐\r\n血\r\n欢\r\n械\r\n掌\r\n歌\r\n沙\r\n刚\r\n攻\r\n谓\r\n盾\r\n讨\r\n晚\r\n粒\r\n乱\r\n燃\r\n矛\r\n乎\r\n杀\r\n药\r\n宁\r\n鲁\r\n贵\r\n钟\r\n煤\r\n读\r\n班\r\n伯\r\n香\r\n介\r\n迫\r\n句\r\n丰\r\n培\r\n握\r\n兰\r\n担\r\n弦\r\n蛋\r\n沉\r\n假\r\n穿\r\n执\r\n答\r\n乐\r\n谁\r\n顺\r\n烟\r\n缩\r\n征\r\n脸\r\n喜\r\n松\r\n脚\r\n困\r\n异\r\n免\r\n背\r\n星\r\n福\r\n买\r\n染\r\n井\r\n概\r\n慢\r\n怕\r\n磁\r\n倍\r\n祖\r\n皇\r\n促\r\n静\r\n补\r\n评\r\n翻\r\n肉\r\n践\r\n尼\r\n衣\r\n宽\r\n扬\r\n棉\r\n希\r\n伤\r\n操\r\n垂\r\n秋\r\n宜\r\n氢\r\n套\r\n督\r\n振\r\n架\r\n亮\r\n末\r\n宪\r\n庆\r\n编\r\n牛\r\n触\r\n映\r\n雷\r\n销\r\n诗\r\n座\r\n居\r\n抓\r\n裂\r\n胞\r\n呼\r\n娘\r\n景\r\n威\r\n绿\r\n晶\r\n厚\r\n盟\r\n衡\r\n鸡\r\n孙\r\n延\r\n危\r\n胶\r\n屋\r\n乡\r\n临\r\n陆\r\n顾\r\n掉\r\n呀\r\n灯\r\n岁\r\n措\r\n束\r\n耐\r\n剧\r\n玉\r\n赵\r\n跳\r\n哥\r\n季\r\n课\r\n凯\r\n胡\r\n额\r\n款\r\n绍\r\n卷\r\n齐\r\n伟\r\n蒸\r\n殖\r\n永\r\n宗\r\n苗\r\n川\r\n炉\r\n岩\r\n弱\r\n零\r\n杨\r\n奏\r\n沿\r\n露\r\n杆\r\n探\r\n滑\r\n镇\r\n饭\r\n浓\r\n航\r\n怀\r\n赶\r\n库\r\n夺\r\n伊\r\n灵\r\n税\r\n途\r\n灭\r\n赛\r\n归\r\n召\r\n鼓\r\n播\r\n盘\r\n裁\r\n险\r\n康\r\n唯\r\n录\r\n菌\r\n纯\r\n借\r\n糖\r\n盖\r\n横\r\n符\r\n私\r\n努\r\n堂\r\n域\r\n枪\r\n润\r\n幅\r\n哈\r\n竟\r\n熟\r\n虫\r\n泽\r\n脑\r\n壤\r\n碳\r\n欧\r\n遍\r\n侧\r\n寨\r\n敢\r\n彻\r\n虑\r\n斜\r\n薄\r\n庭\r\n纳\r\n弹\r\n饲\r\n伸\r\n折\r\n麦\r\n湿\r\n暗\r\n荷\r\n瓦\r\n塞\r\n床\r\n筑\r\n恶\r\n户\r\n访\r\n塔\r\n奇\r\n透\r\n梁\r\n刀\r\n旋\r\n迹\r\n卡\r\n氯\r\n遇\r\n份\r\n毒\r\n泥\r\n退\r\n洗\r\n摆\r\n灰\r\n彩\r\n卖\r\n耗\r\n夏\r\n择\r\n忙\r\n铜\r\n献\r\n硬\r\n予\r\n繁\r\n圈\r\n雪\r\n函\r\n亦\r\n抽\r\n篇\r\n阵\r\n阴\r\n丁\r\n尺\r\n追\r\n堆\r\n雄\r\n迎\r\n泛\r\n爸\r\n楼\r\n避\r\n谋\r\n吨\r\n野\r\n猪\r\n旗\r\n累\r\n偏\r\n典\r\n馆\r\n索\r\n秦\r\n脂\r\n潮\r\n爷\r\n豆\r\n忽\r\n托\r\n惊\r\n塑\r\n遗\r\n愈\r\n朱\r\n替\r\n纤\r\n粗\r\n倾\r\n尚\r\n痛\r\n楚\r\n谢\r\n奋\r\n购\r\n磨\r\n君\r\n池\r\n旁\r\n碎\r\n骨\r\n监\r\n捕\r\n弟\r\n暴\r\n割\r\n贯\r\n殊\r\n释\r\n词\r\n亡\r\n壁\r\n顿\r\n宝\r\n午\r\n尘\r\n闻\r\n揭\r\n炮\r\n残\r\n冬\r\n桥\r\n妇\r\n警\r\n综\r\n招\r\n吴\r\n付\r\n浮\r\n遭\r\n徐\r\n您\r\n摇\r\n谷\r\n赞\r\n箱\r\n隔\r\n订\r\n男\r\n吹\r\n园\r\n纷\r\n唐\r\n败\r\n宋\r\n玻\r\n巨\r\n耕\r\n坦\r\n荣\r\n闭\r\n湾\r\n键\r\n凡\r\n驻\r\n锅\r\n救\r\n恩\r\n剥\r\n凝\r\n碱\r\n齿\r\n截\r\n炼\r\n麻\r\n纺\r\n禁\r\n废\r\n盛\r\n版\r\n缓\r\n净\r\n睛\r\n昌\r\n婚\r\n涉\r\n筒\r\n嘴\r\n插\r\n岸\r\n朗\r\n庄\r\n街\r\n藏\r\n姑\r\n贸\r\n腐\r\n奴\r\n啦\r\n惯\r\n乘\r\n伙\r\n恢\r\n匀\r\n纱\r\n扎\r\n辩\r\n耳\r\n彪\r\n臣\r\n亿\r\n璃\r\n抵\r\n脉\r\n秀\r\n萨\r\n俄\r\n网\r\n舞\r\n店\r\n喷\r\n纵\r\n寸\r\n汗\r\n挂\r\n洪\r\n贺\r\n闪\r\n柬\r\n爆\r\n烯\r\n津\r\n稻\r\n墙\r\n软\r\n勇\r\n像\r\n滚\r\n厘\r\n蒙\r\n芳\r\n肯\r\n坡\r\n柱\r\n荡\r\n腿\r\n仪\r\n旅\r\n尾\r\n轧\r\n冰\r\n贡\r\n登\r\n黎\r\n削\r\n钻\r\n勒\r\n逃\r\n障\r\n氨\r\n郭\r\n峰\r\n币\r\n港\r\n伏\r\n轨\r\n亩\r\n毕\r\n擦\r\n莫\r\n刺\r\n浪\r\n秘\r\n援\r\n株\r\n健\r\n售\r\n股\r\n岛\r\n甘\r\n泡\r\n睡\r\n童\r\n铸\r\n汤\r\n阀\r\n休\r\n汇\r\n舍\r\n牧\r\n绕\r\n炸\r\n哲\r\n磷\r\n绩\r\n朋\r\n淡\r\n尖\r\n启\r\n陷\r\n柴\r\n呈\r\n徒\r\n颜\r\n泪\r\n稍\r\n忘\r\n泵\r\n蓝\r\n拖\r\n洞\r\n授\r\n镜\r\n辛\r\n壮\r\n锋\r\n贫\r\n虚\r\n弯\r\n摩\r\n泰\r\n幼\r\n廷\r\n尊\r\n窗\r\n纲\r\n弄\r\n隶\r\n疑\r\n氏\r\n宫\r\n姐\r\n震\r\n瑞\r\n怪\r\n尤\r\n琴\r\n循\r\n描\r\n膜\r\n违\r\n夹\r\n腰\r\n缘\r\n珠\r\n穷\r\n森\r\n枝\r\n竹\r\n沟\r\n催\r\n绳\r\n忆\r\n邦\r\n剩\r\n幸\r\n浆\r\n栏\r\n拥\r\n牙\r\n贮\r\n礼\r\n滤\r\n钠\r\n纹\r\n罢\r\n拍\r\n咱\r\n喊\r\n袖\r\n埃\r\n勤\r\n罚\r\n焦\r\n潜\r\n伍\r\n墨\r\n欲\r\n缝\r\n姓\r\n刊\r\n饱\r\n仿\r\n奖\r\n铝\r\n鬼\r\n丽\r\n跨\r\n默\r\n挖\r\n链\r\n扫\r\n喝\r\n袋\r\n炭\r\n污\r\n幕\r\n诸\r\n弧\r\n励\r\n梅\r\n奶\r\n洁\r\n灾\r\n舟\r\n鉴\r\n苯\r\n讼\r\n抱\r\n毁\r\n懂\r\n寒\r\n智\r\n埔\r\n寄\r\n届\r\n跃\r\n渡\r\n挑\r\n丹\r\n艰\r\n贝\r\n碰\r\n拔\r\n爹\r\n戴\r\n码\r\n梦\r\n芽\r\n熔\r\n赤\r\n渔\r\n哭\r\n敬\r\n颗\r\n奔\r\n铅\r\n仲\r\n虎\r\n稀\r\n妹\r\n乏\r\n珍\r\n申\r\n桌\r\n遵\r\n允\r\n隆\r\n螺\r\n仓\r\n魏\r\n锐\r\n晓\r\n氮\r\n兼\r\n隐\r\n碍\r\n赫\r\n拨\r\n忠\r\n肃\r\n缸\r\n牵\r\n抢\r\n博\r\n巧\r\n壳\r\n兄\r\n杜\r\n讯\r\n诚\r\n碧\r\n祥\r\n柯\r\n页\r\n巡\r\n矩\r\n悲\r\n灌\r\n龄\r\n伦\r\n票\r\n寻\r\n桂\r\n铺\r\n圣\r\n恐\r\n恰\r\n郑\r\n趣\r\n抬\r\n荒\r\n腾\r\n贴\r\n柔\r\n滴\r\n猛\r\n阔\r\n辆\r\n妻\r\n填\r\n撤\r\n储\r\n签\r\n闹\r\n扰\r\n紫\r\n砂\r\n递\r\n戏\r\n吊\r\n陶\r\n伐\r\n喂\r\n疗\r\n瓶\r\n婆\r\n抚\r\n臂\r\n摸\r\n忍\r\n虾\r\n蜡\r\n邻\r\n胸\r\n巩\r\n挤\r\n偶\r\n弃\r\n槽\r\n劲\r\n乳\r\n邓\r\n吉\r\n仁\r\n烂\r\n砖\r\n租\r\n乌\r\n舰\r\n伴\r\n瓜\r\n浅\r\n丙\r\n暂\r\n燥\r\n橡\r\n柳\r\n迷\r\n暖\r\n牌\r\n秧\r\n胆\r\n详\r\n簧\r\n踏\r\n瓷\r\n谱\r\n呆\r\n宾\r\n糊\r\n洛\r\n辉\r\n愤\r\n竞\r\n隙\r\n怒\r\n粘\r\n乃\r\n绪\r\n肩\r\n籍\r\n敏\r\n涂\r\n熙\r\n皆\r\n侦\r\n悬\r\n掘\r\n享\r\n纠\r\n醒\r\n狂\r\n锁\r\n淀\r\n恨\r\n牲\r\n霸\r\n爬\r\n赏\r\n逆\r\n玩\r\n陵\r\n祝\r\n秒\r\n浙\r\n貌\r\n役\r\n彼\r\n悉\r\n鸭\r\n趋\r\n凤\r\n晨\r\n畜\r\n辈\r\n秩\r\n卵\r\n署\r\n梯\r\n炎\r\n滩\r\n棋\r\n驱\r\n筛\r\n峡\r\n冒\r\n啥\r\n寿\r\n译\r\n浸\r\n泉\r\n帽\r\n迟\r\n硅\r\n疆\r\n贷\r\n漏\r\n稿\r\n冠\r\n嫩\r\n胁\r\n芯\r\n牢\r\n叛\r\n蚀\r\n奥\r\n鸣\r\n岭\r\n羊\r\n凭\r\n串\r\n塘\r\n绘\r\n酵\r\n融\r\n盆\r\n锡\r\n庙\r\n筹\r\n冻\r\n辅\r\n摄\r\n袭\r\n筋\r\n拒\r\n僚\r\n旱\r\n钾\r\n鸟\r\n漆\r\n沈\r\n眉\r\n疏\r\n添\r\n棒\r\n穗\r\n硝\r\n韩\r\n逼\r\n扭\r\n侨\r\n凉\r\n挺\r\n碗\r\n栽\r\n炒\r\n杯\r\n患\r\n馏\r\n劝\r\n豪\r\n辽\r\n勃\r\n鸿\r\n旦\r\n吏\r\n拜\r\n狗\r\n埋\r\n辊\r\n掩\r\n饮\r\n搬\r\n骂\r\n辞\r\n勾\r\n扣\r\n估\r\n蒋\r\n绒\r\n雾\r\n丈\r\n朵\r\n姆\r\n拟\r\n宇\r\n辑\r\n陕\r\n雕\r\n偿\r\n蓄\r\n崇\r\n剪\r\n倡\r\n厅\r\n咬\r\n驶\r\n薯\r\n刷\r\n斥\r\n番\r\n赋\r\n奉\r\n佛\r\n浇\r\n漫\r\n曼\r\n扇\r\n钙\r\n桃\r\n扶\r\n仔\r\n返\r\n俗\r\n亏\r\n腔\r\n鞋\r\n棱\r\n覆\r\n框\r\n悄\r\n叔\r\n撞\r\n骗\r\n勘\r\n旺\r\n沸\r\n孤\r\n吐\r\n孟\r\n渠\r\n屈\r\n疾\r\n妙\r\n惜\r\n仰\r\n狠\r\n胀\r\n谐\r\n抛\r\n霉\r\n桑\r\n岗\r\n嘛\r\n衰\r\n盗\r\n渗\r\n脏\r\n赖\r\n涌\r\n甜\r\n曹\r\n阅\r\n肌\r\n哩\r\n厉\r\n烃\r\n纬\r\n毅\r\n昨\r\n伪\r\n症\r\n煮\r\n叹\r\n钉\r\n搭\r\n茎\r\n笼\r\n酷\r\n偷\r\n弓\r\n锥\r\n恒\r\n杰\r\n坑\r\n鼻\r\n翼\r\n纶\r\n叙\r\n狱\r\n逮\r\n罐\r\n络\r\n棚\r\n抑\r\n膨\r\n蔬\r\n寺\r\n骤\r\n穆\r\n冶\r\n枯\r\n册\r\n尸\r\n凸\r\n绅\r\n坯\r\n牺\r\n焰\r\n轰\r\n欣\r\n晋\r\n瘦\r\n御\r\n锭\r\n锦\r\n丧\r\n旬\r\n锻\r\n垄\r\n搜\r\n扑\r\n邀\r\n亭\r\n酯\r\n迈\r\n舒\r\n脆\r\n酶\r\n闲\r\n忧\r\n酚\r\n顽\r\n羽\r\n涨\r\n卸\r\n仗\r\n陪\r\n辟\r\n惩\r\n杭\r\n姚\r\n肚\r\n捉\r\n飘\r\n漂\r\n昆\r\n欺\r\n吾\r\n郎\r\n烷\r\n汁\r\n呵\r\n饰\r\n萧\r\n雅\r\n邮\r\n迁\r\n燕\r\n撒\r\n姻\r\n赴\r\n宴\r\n烦\r\n债\r\n帐\r\n斑\r\n铃\r\n旨\r\n醇\r\n董\r\n饼\r\n雏\r\n姿\r\n拌\r\n傅\r\n腹\r\n妥\r\n揉\r\n贤\r\n拆\r\n歪\r\n葡\r\n胺\r\n丢\r\n浩\r\n徽\r\n昂\r\n垫\r\n挡\r\n览\r\n贪\r\n慰\r\n缴\r\n汪\r\n慌\r\n冯\r\n诺\r\n姜\r\n谊\r\n凶\r\n劣\r\n诬\r\n耀\r\n昏\r\n躺\r\n盈\r\n骑\r\n乔\r\n溪\r\n丛\r\n卢\r\n抹\r\n闷\r\n咨\r\n刮\r\n驾\r\n缆\r\n悟\r\n摘\r\n铒\r\n掷\r\n颇\r\n幻\r\n柄\r\n惠\r\n惨\r\n佳\r\n仇\r\n腊\r\n窝\r\n涤\r\n剑\r\n瞧\r\n堡\r\n泼\r\n葱\r\n罩\r\n霍\r\n捞\r\n胎\r\n苍\r\n滨\r\n俩\r\n捅\r\n湘\r\n砍\r\n霞\r\n邵\r\n萄\r\n疯\r\n淮\r\n遂\r\n熊\r\n粪\r\n烘\r\n宿\r\n档\r\n戈\r\n驳\r\n嫂\r\n裕\r\n徙\r\n箭\r\n捐\r\n肠\r\n撑\r\n晒\r\n辨\r\n殿\r\n莲\r\n摊\r\n搅\r\n酱\r\n屏\r\n疫\r\n哀\r\n蔡\r\n堵\r\n沫\r\n皱\r\n畅\r\n叠\r\n阁\r\n莱\r\n敲\r\n辖\r\n钩\r\n痕\r\n坝\r\n巷\r\n饿\r\n祸\r\n丘\r\n玄\r\n溜\r\n曰\r\n逻\r\n彭\r\n尝\r\n卿\r\n妨\r\n艇\r\n吞\r\n韦\r\n怨\r\n矮\r\n歇`.split('\\n');\r\n", "export const wordlist = `ábaco\r\nabdomen\r\nabeja\r\nabierto\r\nabogado\r\nabono\r\naborto\r\nabrazo\r\nabrir\r\nabuelo\r\nabuso\r\nacabar\r\nacademia\r\nacceso\r\nacción\r\naceite\r\nacelga\r\nacento\r\naceptar\r\nácido\r\naclarar\r\nacné\r\nacoger\r\nacoso\r\nactivo\r\nacto\r\nactriz\r\nactuar\r\nacudir\r\nacuerdo\r\nacusar\r\nadicto\r\nadmitir\r\nadoptar\r\nadorno\r\naduana\r\nadulto\r\naéreo\r\nafectar\r\nafición\r\nafinar\r\nafirmar\r\nágil\r\nagitar\r\nagonía\r\nagosto\r\nagotar\r\nagregar\r\nagrio\r\nagua\r\nagudo\r\náguila\r\naguja\r\nahogo\r\nahorro\r\naire\r\naislar\r\najedrez\r\najeno\r\najuste\r\nalacrán\r\nalambre\r\nalarma\r\nalba\r\nálbum\r\nalcalde\r\naldea\r\nalegre\r\nalejar\r\nalerta\r\naleta\r\nalfiler\r\nalga\r\nalgodón\r\naliado\r\naliento\r\nalivio\r\nalma\r\nalmeja\r\nalmíbar\r\naltar\r\nalteza\r\naltivo\r\nalto\r\naltura\r\nalumno\r\nalzar\r\namable\r\namante\r\namapola\r\namargo\r\namasar\r\námbar\r\námbito\r\nameno\r\namigo\r\namistad\r\namor\r\namparo\r\namplio\r\nancho\r\nanciano\r\nancla\r\nandar\r\nandén\r\nanemia\r\nángulo\r\nanillo\r\nánimo\r\nanís\r\nanotar\r\nantena\r\nantiguo\r\nantojo\r\nanual\r\nanular\r\nanuncio\r\nañadir\r\nañejo\r\naño\r\napagar\r\naparato\r\napetito\r\napio\r\naplicar\r\napodo\r\naporte\r\napoyo\r\naprender\r\naprobar\r\napuesta\r\napuro\r\narado\r\naraña\r\narar\r\nárbitro\r\nárbol\r\narbusto\r\narchivo\r\narco\r\narder\r\nardilla\r\narduo\r\nárea\r\nárido\r\naries\r\narmonía\r\narnés\r\naroma\r\narpa\r\narpón\r\narreglo\r\narroz\r\narruga\r\narte\r\nartista\r\nasa\r\nasado\r\nasalto\r\nascenso\r\nasegurar\r\naseo\r\nasesor\r\nasiento\r\nasilo\r\nasistir\r\nasno\r\nasombro\r\náspero\r\nastilla\r\nastro\r\nastuto\r\nasumir\r\nasunto\r\natajo\r\nataque\r\natar\r\natento\r\nateo\r\nático\r\natleta\r\nátomo\r\natraer\r\natroz\r\natún\r\naudaz\r\naudio\r\nauge\r\naula\r\naumento\r\nausente\r\nautor\r\naval\r\navance\r\navaro\r\nave\r\navellana\r\navena\r\navestruz\r\navión\r\naviso\r\nayer\r\nayuda\r\nayuno\r\nazafrán\r\nazar\r\nazote\r\nazúcar\r\nazufre\r\nazul\r\nbaba\r\nbabor\r\nbache\r\nbahía\r\nbaile\r\nbajar\r\nbalanza\r\nbalcón\r\nbalde\r\nbambú\r\nbanco\r\nbanda\r\nbaño\r\nbarba\r\nbarco\r\nbarniz\r\nbarro\r\nbáscula\r\nbastón\r\nbasura\r\nbatalla\r\nbatería\r\nbatir\r\nbatuta\r\nbaúl\r\nbazar\r\nbebé\r\nbebida\r\nbello\r\nbesar\r\nbeso\r\nbestia\r\nbicho\r\nbien\r\nbingo\r\nblanco\r\nbloque\r\nblusa\r\nboa\r\nbobina\r\nbobo\r\nboca\r\nbocina\r\nboda\r\nbodega\r\nboina\r\nbola\r\nbolero\r\nbolsa\r\nbomba\r\nbondad\r\nbonito\r\nbono\r\nbonsái\r\nborde\r\nborrar\r\nbosque\r\nbote\r\nbotín\r\nbóveda\r\nbozal\r\nbravo\r\nbrazo\r\nbrecha\r\nbreve\r\nbrillo\r\nbrinco\r\nbrisa\r\nbroca\r\nbroma\r\nbronce\r\nbrote\r\nbruja\r\nbrusco\r\nbruto\r\nbuceo\r\nbucle\r\nbueno\r\nbuey\r\nbufanda\r\nbufón\r\nbúho\r\nbuitre\r\nbulto\r\nburbuja\r\nburla\r\nburro\r\nbuscar\r\nbutaca\r\nbuzón\r\ncaballo\r\ncabeza\r\ncabina\r\ncabra\r\ncacao\r\ncadáver\r\ncadena\r\ncaer\r\ncafé\r\ncaída\r\ncaimán\r\ncaja\r\ncajón\r\ncal\r\ncalamar\r\ncalcio\r\ncaldo\r\ncalidad\r\ncalle\r\ncalma\r\ncalor\r\ncalvo\r\ncama\r\ncambio\r\ncamello\r\ncamino\r\ncampo\r\ncáncer\r\ncandil\r\ncanela\r\ncanguro\r\ncanica\r\ncanto\r\ncaña\r\ncañón\r\ncaoba\r\ncaos\r\ncapaz\r\ncapitán\r\ncapote\r\ncaptar\r\ncapucha\r\ncara\r\ncarbón\r\ncárcel\r\ncareta\r\ncarga\r\ncariño\r\ncarne\r\ncarpeta\r\ncarro\r\ncarta\r\ncasa\r\ncasco\r\ncasero\r\ncaspa\r\ncastor\r\ncatorce\r\ncatre\r\ncaudal\r\ncausa\r\ncazo\r\ncebolla\r\nceder\r\ncedro\r\ncelda\r\ncélebre\r\nceloso\r\ncélula\r\ncemento\r\nceniza\r\ncentro\r\ncerca\r\ncerdo\r\ncereza\r\ncero\r\ncerrar\r\ncerteza\r\ncésped\r\ncetro\r\nchacal\r\nchaleco\r\nchampú\r\nchancla\r\nchapa\r\ncharla\r\nchico\r\nchiste\r\nchivo\r\nchoque\r\nchoza\r\nchuleta\r\nchupar\r\nciclón\r\nciego\r\ncielo\r\ncien\r\ncierto\r\ncifra\r\ncigarro\r\ncima\r\ncinco\r\ncine\r\ncinta\r\nciprés\r\ncirco\r\nciruela\r\ncisne\r\ncita\r\nciudad\r\nclamor\r\nclan\r\nclaro\r\nclase\r\nclave\r\ncliente\r\nclima\r\nclínica\r\ncobre\r\ncocción\r\ncochino\r\ncocina\r\ncoco\r\ncódigo\r\ncodo\r\ncofre\r\ncoger\r\ncohete\r\ncojín\r\ncojo\r\ncola\r\ncolcha\r\ncolegio\r\ncolgar\r\ncolina\r\ncollar\r\ncolmo\r\ncolumna\r\ncombate\r\ncomer\r\ncomida\r\ncómodo\r\ncompra\r\nconde\r\nconejo\r\nconga\r\nconocer\r\nconsejo\r\ncontar\r\ncopa\r\ncopia\r\ncorazón\r\ncorbata\r\ncorcho\r\ncordón\r\ncorona\r\ncorrer\r\ncoser\r\ncosmos\r\ncosta\r\ncráneo\r\ncráter\r\ncrear\r\ncrecer\r\ncreído\r\ncrema\r\ncría\r\ncrimen\r\ncripta\r\ncrisis\r\ncromo\r\ncrónica\r\ncroqueta\r\ncrudo\r\ncruz\r\ncuadro\r\ncuarto\r\ncuatro\r\ncubo\r\ncubrir\r\ncuchara\r\ncuello\r\ncuento\r\ncuerda\r\ncuesta\r\ncueva\r\ncuidar\r\nculebra\r\nculpa\r\nculto\r\ncumbre\r\ncumplir\r\ncuna\r\ncuneta\r\ncuota\r\ncupón\r\ncúpula\r\ncurar\r\ncurioso\r\ncurso\r\ncurva\r\ncutis\r\ndama\r\ndanza\r\ndar\r\ndardo\r\ndátil\r\ndeber\r\ndébil\r\ndécada\r\ndecir\r\ndedo\r\ndefensa\r\ndefinir\r\ndejar\r\ndelfín\r\ndelgado\r\ndelito\r\ndemora\r\ndenso\r\ndental\r\ndeporte\r\nderecho\r\nderrota\r\ndesayuno\r\ndeseo\r\ndesfile\r\ndesnudo\r\ndestino\r\ndesvío\r\ndetalle\r\ndetener\r\ndeuda\r\ndía\r\ndiablo\r\ndiadema\r\ndiamante\r\ndiana\r\ndiario\r\ndibujo\r\ndictar\r\ndiente\r\ndieta\r\ndiez\r\ndifícil\r\ndigno\r\ndilema\r\ndiluir\r\ndinero\r\ndirecto\r\ndirigir\r\ndisco\r\ndiseño\r\ndisfraz\r\ndiva\r\ndivino\r\ndoble\r\ndoce\r\ndolor\r\ndomingo\r\ndon\r\ndonar\r\ndorado\r\ndormir\r\ndorso\r\ndos\r\ndosis\r\ndragón\r\ndroga\r\nducha\r\nduda\r\nduelo\r\ndueño\r\ndulce\r\ndúo\r\nduque\r\ndurar\r\ndureza\r\nduro\r\nébano\r\nebrio\r\nechar\r\neco\r\necuador\r\nedad\r\nedición\r\nedificio\r\neditor\r\neducar\r\nefecto\r\neficaz\r\neje\r\nejemplo\r\nelefante\r\nelegir\r\nelemento\r\nelevar\r\nelipse\r\nélite\r\nelixir\r\nelogio\r\neludir\r\nembudo\r\nemitir\r\nemoción\r\nempate\r\nempeño\r\nempleo\r\nempresa\r\nenano\r\nencargo\r\nenchufe\r\nencía\r\nenemigo\r\nenero\r\nenfado\r\nenfermo\r\nengaño\r\nenigma\r\nenlace\r\nenorme\r\nenredo\r\nensayo\r\nenseñar\r\nentero\r\nentrar\r\nenvase\r\nenvío\r\népoca\r\nequipo\r\nerizo\r\nescala\r\nescena\r\nescolar\r\nescribir\r\nescudo\r\nesencia\r\nesfera\r\nesfuerzo\r\nespada\r\nespejo\r\nespía\r\nesposa\r\nespuma\r\nesquí\r\nestar\r\neste\r\nestilo\r\nestufa\r\netapa\r\neterno\r\nética\r\netnia\r\nevadir\r\nevaluar\r\nevento\r\nevitar\r\nexacto\r\nexamen\r\nexceso\r\nexcusa\r\nexento\r\nexigir\r\nexilio\r\nexistir\r\néxito\r\nexperto\r\nexplicar\r\nexponer\r\nextremo\r\nfábrica\r\nfábula\r\nfachada\r\nfácil\r\nfactor\r\nfaena\r\nfaja\r\nfalda\r\nfallo\r\nfalso\r\nfaltar\r\nfama\r\nfamilia\r\nfamoso\r\nfaraón\r\nfarmacia\r\nfarol\r\nfarsa\r\nfase\r\nfatiga\r\nfauna\r\nfavor\r\nfax\r\nfebrero\r\nfecha\r\nfeliz\r\nfeo\r\nferia\r\nferoz\r\nfértil\r\nfervor\r\nfestín\r\nfiable\r\nfianza\r\nfiar\r\nfibra\r\nficción\r\nficha\r\nfideo\r\nfiebre\r\nfiel\r\nfiera\r\nfiesta\r\nfigura\r\nfijar\r\nfijo\r\nfila\r\nfilete\r\nfilial\r\nfiltro\r\nfin\r\nfinca\r\nfingir\r\nfinito\r\nfirma\r\nflaco\r\nflauta\r\nflecha\r\nflor\r\nflota\r\nfluir\r\nflujo\r\nflúor\r\nfobia\r\nfoca\r\nfogata\r\nfogón\r\nfolio\r\nfolleto\r\nfondo\r\nforma\r\nforro\r\nfortuna\r\nforzar\r\nfosa\r\nfoto\r\nfracaso\r\nfrágil\r\nfranja\r\nfrase\r\nfraude\r\nfreír\r\nfreno\r\nfresa\r\nfrío\r\nfrito\r\nfruta\r\nfuego\r\nfuente\r\nfuerza\r\nfuga\r\nfumar\r\nfunción\r\nfunda\r\nfurgón\r\nfuria\r\nfusil\r\nfútbol\r\nfuturo\r\ngacela\r\ngafas\r\ngaita\r\ngajo\r\ngala\r\ngalería\r\ngallo\r\ngamba\r\nganar\r\ngancho\r\nganga\r\nganso\r\ngaraje\r\ngarza\r\ngasolina\r\ngastar\r\ngato\r\ngavilán\r\ngemelo\r\ngemir\r\ngen\r\ngénero\r\ngenio\r\ngente\r\ngeranio\r\ngerente\r\ngermen\r\ngesto\r\ngigante\r\ngimnasio\r\ngirar\r\ngiro\r\nglaciar\r\nglobo\r\ngloria\r\ngol\r\ngolfo\r\ngoloso\r\ngolpe\r\ngoma\r\ngordo\r\ngorila\r\ngorra\r\ngota\r\ngoteo\r\ngozar\r\ngrada\r\ngráfico\r\ngrano\r\ngrasa\r\ngratis\r\ngrave\r\ngrieta\r\ngrillo\r\ngripe\r\ngris\r\ngrito\r\ngrosor\r\ngrúa\r\ngrueso\r\ngrumo\r\ngrupo\r\nguante\r\nguapo\r\nguardia\r\nguerra\r\nguía\r\nguiño\r\nguion\r\nguiso\r\nguitarra\r\ngusano\r\ngustar\r\nhaber\r\nhábil\r\nhablar\r\nhacer\r\nhacha\r\nhada\r\nhallar\r\nhamaca\r\nharina\r\nhaz\r\nhazaña\r\nhebilla\r\nhebra\r\nhecho\r\nhelado\r\nhelio\r\nhembra\r\nherir\r\nhermano\r\nhéroe\r\nhervir\r\nhielo\r\nhierro\r\nhígado\r\nhigiene\r\nhijo\r\nhimno\r\nhistoria\r\nhocico\r\nhogar\r\nhoguera\r\nhoja\r\nhombre\r\nhongo\r\nhonor\r\nhonra\r\nhora\r\nhormiga\r\nhorno\r\nhostil\r\nhoyo\r\nhueco\r\nhuelga\r\nhuerta\r\nhueso\r\nhuevo\r\nhuida\r\nhuir\r\nhumano\r\nhúmedo\r\nhumilde\r\nhumo\r\nhundir\r\nhuracán\r\nhurto\r\nicono\r\nideal\r\nidioma\r\nídolo\r\niglesia\r\niglú\r\nigual\r\nilegal\r\nilusión\r\nimagen\r\nimán\r\nimitar\r\nimpar\r\nimperio\r\nimponer\r\nimpulso\r\nincapaz\r\níndice\r\ninerte\r\ninfiel\r\ninforme\r\ningenio\r\ninicio\r\ninmenso\r\ninmune\r\ninnato\r\ninsecto\r\ninstante\r\ninterés\r\níntimo\r\nintuir\r\ninútil\r\ninvierno\r\nira\r\niris\r\nironía\r\nisla\r\nislote\r\njabalí\r\njabón\r\njamón\r\njarabe\r\njardín\r\njarra\r\njaula\r\njazmín\r\njefe\r\njeringa\r\njinete\r\njornada\r\njoroba\r\njoven\r\njoya\r\njuerga\r\njueves\r\njuez\r\njugador\r\njugo\r\njuguete\r\njuicio\r\njunco\r\njungla\r\njunio\r\njuntar\r\njúpiter\r\njurar\r\njusto\r\njuvenil\r\njuzgar\r\nkilo\r\nkoala\r\nlabio\r\nlacio\r\nlacra\r\nlado\r\nladrón\r\nlagarto\r\nlágrima\r\nlaguna\r\nlaico\r\nlamer\r\nlámina\r\nlámpara\r\nlana\r\nlancha\r\nlangosta\r\nlanza\r\nlápiz\r\nlargo\r\nlarva\r\nlástima\r\nlata\r\nlátex\r\nlatir\r\nlaurel\r\nlavar\r\nlazo\r\nleal\r\nlección\r\nleche\r\nlector\r\nleer\r\nlegión\r\nlegumbre\r\nlejano\r\nlengua\r\nlento\r\nleña\r\nleón\r\nleopardo\r\nlesión\r\nletal\r\nletra\r\nleve\r\nleyenda\r\nlibertad\r\nlibro\r\nlicor\r\nlíder\r\nlidiar\r\nlienzo\r\nliga\r\nligero\r\nlima\r\nlímite\r\nlimón\r\nlimpio\r\nlince\r\nlindo\r\nlínea\r\nlingote\r\nlino\r\nlinterna\r\nlíquido\r\nliso\r\nlista\r\nlitera\r\nlitio\r\nlitro\r\nllaga\r\nllama\r\nllanto\r\nllave\r\nllegar\r\nllenar\r\nllevar\r\nllorar\r\nllover\r\nlluvia\r\nlobo\r\nloción\r\nloco\r\nlocura\r\nlógica\r\nlogro\r\nlombriz\r\nlomo\r\nlonja\r\nlote\r\nlucha\r\nlucir\r\nlugar\r\nlujo\r\nluna\r\nlunes\r\nlupa\r\nlustro\r\nluto\r\nluz\r\nmaceta\r\nmacho\r\nmadera\r\nmadre\r\nmaduro\r\nmaestro\r\nmafia\r\nmagia\r\nmago\r\nmaíz\r\nmaldad\r\nmaleta\r\nmalla\r\nmalo\r\nmamá\r\nmambo\r\nmamut\r\nmanco\r\nmando\r\nmanejar\r\nmanga\r\nmaniquí\r\nmanjar\r\nmano\r\nmanso\r\nmanta\r\nmañana\r\nmapa\r\nmáquina\r\nmar\r\nmarco\r\nmarea\r\nmarfil\r\nmargen\r\nmarido\r\nmármol\r\nmarrón\r\nmartes\r\nmarzo\r\nmasa\r\nmáscara\r\nmasivo\r\nmatar\r\nmateria\r\nmatiz\r\nmatriz\r\nmáximo\r\nmayor\r\nmazorca\r\nmecha\r\nmedalla\r\nmedio\r\nmédula\r\nmejilla\r\nmejor\r\nmelena\r\nmelón\r\nmemoria\r\nmenor\r\nmensaje\r\nmente\r\nmenú\r\nmercado\r\nmerengue\r\nmérito\r\nmes\r\nmesón\r\nmeta\r\nmeter\r\nmétodo\r\nmetro\r\nmezcla\r\nmiedo\r\nmiel\r\nmiembro\r\nmiga\r\nmil\r\nmilagro\r\nmilitar\r\nmillón\r\nmimo\r\nmina\r\nminero\r\nmínimo\r\nminuto\r\nmiope\r\nmirar\r\nmisa\r\nmiseria\r\nmisil\r\nmismo\r\nmitad\r\nmito\r\nmochila\r\nmoción\r\nmoda\r\nmodelo\r\nmoho\r\nmojar\r\nmolde\r\nmoler\r\nmolino\r\nmomento\r\nmomia\r\nmonarca\r\nmoneda\r\nmonja\r\nmonto\r\nmoño\r\nmorada\r\nmorder\r\nmoreno\r\nmorir\r\nmorro\r\nmorsa\r\nmortal\r\nmosca\r\nmostrar\r\nmotivo\r\nmover\r\nmóvil\r\nmozo\r\nmucho\r\nmudar\r\nmueble\r\nmuela\r\nmuerte\r\nmuestra\r\nmugre\r\nmujer\r\nmula\r\nmuleta\r\nmulta\r\nmundo\r\nmuñeca\r\nmural\r\nmuro\r\nmúsculo\r\nmuseo\r\nmusgo\r\nmúsica\r\nmuslo\r\nnácar\r\nnación\r\nnadar\r\nnaipe\r\nnaranja\r\nnariz\r\nnarrar\r\nnasal\r\nnatal\r\nnativo\r\nnatural\r\nnáusea\r\nnaval\r\nnave\r\nnavidad\r\nnecio\r\nnéctar\r\nnegar\r\nnegocio\r\nnegro\r\nneón\r\nnervio\r\nneto\r\nneutro\r\nnevar\r\nnevera\r\nnicho\r\nnido\r\nniebla\r\nnieto\r\nniñez\r\nniño\r\nnítido\r\nnivel\r\nnobleza\r\nnoche\r\nnómina\r\nnoria\r\nnorma\r\nnorte\r\nnota\r\nnoticia\r\nnovato\r\nnovela\r\nnovio\r\nnube\r\nnuca\r\nnúcleo\r\nnudillo\r\nnudo\r\nnuera\r\nnueve\r\nnuez\r\nnulo\r\nnúmero\r\nnutria\r\noasis\r\nobeso\r\nobispo\r\nobjeto\r\nobra\r\nobrero\r\nobservar\r\nobtener\r\nobvio\r\noca\r\nocaso\r\nocéano\r\nochenta\r\nocho\r\nocio\r\nocre\r\noctavo\r\noctubre\r\noculto\r\nocupar\r\nocurrir\r\nodiar\r\nodio\r\nodisea\r\noeste\r\nofensa\r\noferta\r\noficio\r\nofrecer\r\nogro\r\noído\r\noír\r\nojo\r\nola\r\noleada\r\nolfato\r\nolivo\r\nolla\r\nolmo\r\nolor\r\nolvido\r\nombligo\r\nonda\r\nonza\r\nopaco\r\nopción\r\nópera\r\nopinar\r\noponer\r\noptar\r\nóptica\r\nopuesto\r\noración\r\norador\r\noral\r\nórbita\r\norca\r\norden\r\noreja\r\nórgano\r\norgía\r\norgullo\r\noriente\r\norigen\r\norilla\r\noro\r\norquesta\r\noruga\r\nosadía\r\noscuro\r\nosezno\r\noso\r\nostra\r\notoño\r\notro\r\noveja\r\nóvulo\r\nóxido\r\noxígeno\r\noyente\r\nozono\r\npacto\r\npadre\r\npaella\r\npágina\r\npago\r\npaís\r\npájaro\r\npalabra\r\npalco\r\npaleta\r\npálido\r\npalma\r\npaloma\r\npalpar\r\npan\r\npanal\r\npánico\r\npantera\r\npañuelo\r\npapá\r\npapel\r\npapilla\r\npaquete\r\nparar\r\nparcela\r\npared\r\nparir\r\nparo\r\npárpado\r\nparque\r\npárrafo\r\nparte\r\npasar\r\npaseo\r\npasión\r\npaso\r\npasta\r\npata\r\npatio\r\npatria\r\npausa\r\npauta\r\npavo\r\npayaso\r\npeatón\r\npecado\r\npecera\r\npecho\r\npedal\r\npedir\r\npegar\r\npeine\r\npelar\r\npeldaño\r\npelea\r\npeligro\r\npellejo\r\npelo\r\npeluca\r\npena\r\npensar\r\npeñón\r\npeón\r\npeor\r\npepino\r\npequeño\r\npera\r\npercha\r\nperder\r\npereza\r\nperfil\r\nperico\r\nperla\r\npermiso\r\nperro\r\npersona\r\npesa\r\npesca\r\npésimo\r\npestaña\r\npétalo\r\npetróleo\r\npez\r\npezuña\r\npicar\r\npichón\r\npie\r\npiedra\r\npierna\r\npieza\r\npijama\r\npilar\r\npiloto\r\npimienta\r\npino\r\npintor\r\npinza\r\npiña\r\npiojo\r\npipa\r\npirata\r\npisar\r\npiscina\r\npiso\r\npista\r\npitón\r\npizca\r\nplaca\r\nplan\r\nplata\r\nplaya\r\nplaza\r\npleito\r\npleno\r\nplomo\r\npluma\r\nplural\r\npobre\r\npoco\r\npoder\r\npodio\r\npoema\r\npoesía\r\npoeta\r\npolen\r\npolicía\r\npollo\r\npolvo\r\npomada\r\npomelo\r\npomo\r\npompa\r\nponer\r\nporción\r\nportal\r\nposada\r\nposeer\r\nposible\r\nposte\r\npotencia\r\npotro\r\npozo\r\nprado\r\nprecoz\r\npregunta\r\npremio\r\nprensa\r\npreso\r\nprevio\r\nprimo\r\npríncipe\r\nprisión\r\nprivar\r\nproa\r\nprobar\r\nproceso\r\nproducto\r\nproeza\r\nprofesor\r\nprograma\r\nprole\r\npromesa\r\npronto\r\npropio\r\npróximo\r\nprueba\r\npúblico\r\npuchero\r\npudor\r\npueblo\r\npuerta\r\npuesto\r\npulga\r\npulir\r\npulmón\r\npulpo\r\npulso\r\npuma\r\npunto\r\npuñal\r\npuño\r\npupa\r\npupila\r\npuré\r\nquedar\r\nqueja\r\nquemar\r\nquerer\r\nqueso\r\nquieto\r\nquímica\r\nquince\r\nquitar\r\nrábano\r\nrabia\r\nrabo\r\nración\r\nradical\r\nraíz\r\nrama\r\nrampa\r\nrancho\r\nrango\r\nrapaz\r\nrápido\r\nrapto\r\nrasgo\r\nraspa\r\nrato\r\nrayo\r\nraza\r\nrazón\r\nreacción\r\nrealidad\r\nrebaño\r\nrebote\r\nrecaer\r\nreceta\r\nrechazo\r\nrecoger\r\nrecreo\r\nrecto\r\nrecurso\r\nred\r\nredondo\r\nreducir\r\nreflejo\r\nreforma\r\nrefrán\r\nrefugio\r\nregalo\r\nregir\r\nregla\r\nregreso\r\nrehén\r\nreino\r\nreír\r\nreja\r\nrelato\r\nrelevo\r\nrelieve\r\nrelleno\r\nreloj\r\nremar\r\nremedio\r\nremo\r\nrencor\r\nrendir\r\nrenta\r\nreparto\r\nrepetir\r\nreposo\r\nreptil\r\nres\r\nrescate\r\nresina\r\nrespeto\r\nresto\r\nresumen\r\nretiro\r\nretorno\r\nretrato\r\nreunir\r\nrevés\r\nrevista\r\nrey\r\nrezar\r\nrico\r\nriego\r\nrienda\r\nriesgo\r\nrifa\r\nrígido\r\nrigor\r\nrincón\r\nriñón\r\nrío\r\nriqueza\r\nrisa\r\nritmo\r\nrito\r\nrizo\r\nroble\r\nroce\r\nrociar\r\nrodar\r\nrodeo\r\nrodilla\r\nroer\r\nrojizo\r\nrojo\r\nromero\r\nromper\r\nron\r\nronco\r\nronda\r\nropa\r\nropero\r\nrosa\r\nrosca\r\nrostro\r\nrotar\r\nrubí\r\nrubor\r\nrudo\r\nrueda\r\nrugir\r\nruido\r\nruina\r\nruleta\r\nrulo\r\nrumbo\r\nrumor\r\nruptura\r\nruta\r\nrutina\r\nsábado\r\nsaber\r\nsabio\r\nsable\r\nsacar\r\nsagaz\r\nsagrado\r\nsala\r\nsaldo\r\nsalero\r\nsalir\r\nsalmón\r\nsalón\r\nsalsa\r\nsalto\r\nsalud\r\nsalvar\r\nsamba\r\nsanción\r\nsandía\r\nsanear\r\nsangre\r\nsanidad\r\nsano\r\nsanto\r\nsapo\r\nsaque\r\nsardina\r\nsartén\r\nsastre\r\nsatán\r\nsauna\r\nsaxofón\r\nsección\r\nseco\r\nsecreto\r\nsecta\r\nsed\r\nseguir\r\nseis\r\nsello\r\nselva\r\nsemana\r\nsemilla\r\nsenda\r\nsensor\r\nseñal\r\nseñor\r\nseparar\r\nsepia\r\nsequía\r\nser\r\nserie\r\nsermón\r\nservir\r\nsesenta\r\nsesión\r\nseta\r\nsetenta\r\nsevero\r\nsexo\r\nsexto\r\nsidra\r\nsiesta\r\nsiete\r\nsiglo\r\nsigno\r\nsílaba\r\nsilbar\r\nsilencio\r\nsilla\r\nsímbolo\r\nsimio\r\nsirena\r\nsistema\r\nsitio\r\nsituar\r\nsobre\r\nsocio\r\nsodio\r\nsol\r\nsolapa\r\nsoldado\r\nsoledad\r\nsólido\r\nsoltar\r\nsolución\r\nsombra\r\nsondeo\r\nsonido\r\nsonoro\r\nsonrisa\r\nsopa\r\nsoplar\r\nsoporte\r\nsordo\r\nsorpresa\r\nsorteo\r\nsostén\r\nsótano\r\nsuave\r\nsubir\r\nsuceso\r\nsudor\r\nsuegra\r\nsuelo\r\nsueño\r\nsuerte\r\nsufrir\r\nsujeto\r\nsultán\r\nsumar\r\nsuperar\r\nsuplir\r\nsuponer\r\nsupremo\r\nsur\r\nsurco\r\nsureño\r\nsurgir\r\nsusto\r\nsutil\r\ntabaco\r\ntabique\r\ntabla\r\ntabú\r\ntaco\r\ntacto\r\ntajo\r\ntalar\r\ntalco\r\ntalento\r\ntalla\r\ntalón\r\ntamaño\r\ntambor\r\ntango\r\ntanque\r\ntapa\r\ntapete\r\ntapia\r\ntapón\r\ntaquilla\r\ntarde\r\ntarea\r\ntarifa\r\ntarjeta\r\ntarot\r\ntarro\r\ntarta\r\ntatuaje\r\ntauro\r\ntaza\r\ntazón\r\nteatro\r\ntecho\r\ntecla\r\ntécnica\r\ntejado\r\ntejer\r\ntejido\r\ntela\r\nteléfono\r\ntema\r\ntemor\r\ntemplo\r\ntenaz\r\ntender\r\ntener\r\ntenis\r\ntenso\r\nteoría\r\nterapia\r\nterco\r\ntérmino\r\nternura\r\nterror\r\ntesis\r\ntesoro\r\ntestigo\r\ntetera\r\ntexto\r\ntez\r\ntibio\r\ntiburón\r\ntiempo\r\ntienda\r\ntierra\r\ntieso\r\ntigre\r\ntijera\r\ntilde\r\ntimbre\r\ntímido\r\ntimo\r\ntinta\r\ntío\r\ntípico\r\ntipo\r\ntira\r\ntirón\r\ntitán\r\ntítere\r\ntítulo\r\ntiza\r\ntoalla\r\ntobillo\r\ntocar\r\ntocino\r\ntodo\r\ntoga\r\ntoldo\r\ntomar\r\ntono\r\ntonto\r\ntopar\r\ntope\r\ntoque\r\ntórax\r\ntorero\r\ntormenta\r\ntorneo\r\ntoro\r\ntorpedo\r\ntorre\r\ntorso\r\ntortuga\r\ntos\r\ntosco\r\ntoser\r\ntóxico\r\ntrabajo\r\ntractor\r\ntraer\r\ntráfico\r\ntrago\r\ntraje\r\ntramo\r\ntrance\r\ntrato\r\ntrauma\r\ntrazar\r\ntrébol\r\ntregua\r\ntreinta\r\ntren\r\ntrepar\r\ntres\r\ntribu\r\ntrigo\r\ntripa\r\ntriste\r\ntriunfo\r\ntrofeo\r\ntrompa\r\ntronco\r\ntropa\r\ntrote\r\ntrozo\r\ntruco\r\ntrueno\r\ntrufa\r\ntubería\r\ntubo\r\ntuerto\r\ntumba\r\ntumor\r\ntúnel\r\ntúnica\r\nturbina\r\nturismo\r\nturno\r\ntutor\r\nubicar\r\núlcera\r\numbral\r\nunidad\r\nunir\r\nuniverso\r\nuno\r\nuntar\r\nuña\r\nurbano\r\nurbe\r\nurgente\r\nurna\r\nusar\r\nusuario\r\nútil\r\nutopía\r\nuva\r\nvaca\r\nvacío\r\nvacuna\r\nvagar\r\nvago\r\nvaina\r\nvajilla\r\nvale\r\nválido\r\nvalle\r\nvalor\r\nválvula\r\nvampiro\r\nvara\r\nvariar\r\nvarón\r\nvaso\r\nvecino\r\nvector\r\nvehículo\r\nveinte\r\nvejez\r\nvela\r\nvelero\r\nveloz\r\nvena\r\nvencer\r\nvenda\r\nveneno\r\nvengar\r\nvenir\r\nventa\r\nvenus\r\nver\r\nverano\r\nverbo\r\nverde\r\nvereda\r\nverja\r\nverso\r\nverter\r\nvía\r\nviaje\r\nvibrar\r\nvicio\r\nvíctima\r\nvida\r\nvídeo\r\nvidrio\r\nviejo\r\nviernes\r\nvigor\r\nvil\r\nvilla\r\nvinagre\r\nvino\r\nviñedo\r\nviolín\r\nviral\r\nvirgo\r\nvirtud\r\nvisor\r\nvíspera\r\nvista\r\nvitamina\r\nviudo\r\nvivaz\r\nvivero\r\nvivir\r\nvivo\r\nvolcán\r\nvolumen\r\nvolver\r\nvoraz\r\nvotar\r\nvoto\r\nvoz\r\nvuelo\r\nvulgar\r\nyacer\r\nyate\r\nyegua\r\nyema\r\nyerno\r\nyeso\r\nyodo\r\nyoga\r\nyogur\r\nzafiro\r\nzanja\r\nzapato\r\nzarza\r\nzona\r\nzorro\r\nzumo\r\nzurdo`.split('\\n');\r\n", "export const wordlist = `的\r\n一\r\n是\r\n在\r\n不\r\n了\r\n有\r\n和\r\n人\r\n這\r\n中\r\n大\r\n為\r\n上\r\n個\r\n國\r\n我\r\n以\r\n要\r\n他\r\n時\r\n來\r\n用\r\n們\r\n生\r\n到\r\n作\r\n地\r\n於\r\n出\r\n就\r\n分\r\n對\r\n成\r\n會\r\n可\r\n主\r\n發\r\n年\r\n動\r\n同\r\n工\r\n也\r\n能\r\n下\r\n過\r\n子\r\n說\r\n產\r\n種\r\n面\r\n而\r\n方\r\n後\r\n多\r\n定\r\n行\r\n學\r\n法\r\n所\r\n民\r\n得\r\n經\r\n十\r\n三\r\n之\r\n進\r\n著\r\n等\r\n部\r\n度\r\n家\r\n電\r\n力\r\n裡\r\n如\r\n水\r\n化\r\n高\r\n自\r\n二\r\n理\r\n起\r\n小\r\n物\r\n現\r\n實\r\n加\r\n量\r\n都\r\n兩\r\n體\r\n制\r\n機\r\n當\r\n使\r\n點\r\n從\r\n業\r\n本\r\n去\r\n把\r\n性\r\n好\r\n應\r\n開\r\n它\r\n合\r\n還\r\n因\r\n由\r\n其\r\n些\r\n然\r\n前\r\n外\r\n天\r\n政\r\n四\r\n日\r\n那\r\n社\r\n義\r\n事\r\n平\r\n形\r\n相\r\n全\r\n表\r\n間\r\n樣\r\n與\r\n關\r\n各\r\n重\r\n新\r\n線\r\n內\r\n數\r\n正\r\n心\r\n反\r\n你\r\n明\r\n看\r\n原\r\n又\r\n麼\r\n利\r\n比\r\n或\r\n但\r\n質\r\n氣\r\n第\r\n向\r\n道\r\n命\r\n此\r\n變\r\n條\r\n只\r\n沒\r\n結\r\n解\r\n問\r\n意\r\n建\r\n月\r\n公\r\n無\r\n系\r\n軍\r\n很\r\n情\r\n者\r\n最\r\n立\r\n代\r\n想\r\n已\r\n通\r\n並\r\n提\r\n直\r\n題\r\n黨\r\n程\r\n展\r\n五\r\n果\r\n料\r\n象\r\n員\r\n革\r\n位\r\n入\r\n常\r\n文\r\n總\r\n次\r\n品\r\n式\r\n活\r\n設\r\n及\r\n管\r\n特\r\n件\r\n長\r\n求\r\n老\r\n頭\r\n基\r\n資\r\n邊\r\n流\r\n路\r\n級\r\n少\r\n圖\r\n山\r\n統\r\n接\r\n知\r\n較\r\n將\r\n組\r\n見\r\n計\r\n別\r\n她\r\n手\r\n角\r\n期\r\n根\r\n論\r\n運\r\n農\r\n指\r\n幾\r\n九\r\n區\r\n強\r\n放\r\n決\r\n西\r\n被\r\n幹\r\n做\r\n必\r\n戰\r\n先\r\n回\r\n則\r\n任\r\n取\r\n據\r\n處\r\n隊\r\n南\r\n給\r\n色\r\n光\r\n門\r\n即\r\n保\r\n治\r\n北\r\n造\r\n百\r\n規\r\n熱\r\n領\r\n七\r\n海\r\n口\r\n東\r\n導\r\n器\r\n壓\r\n志\r\n世\r\n金\r\n增\r\n爭\r\n濟\r\n階\r\n油\r\n思\r\n術\r\n極\r\n交\r\n受\r\n聯\r\n什\r\n認\r\n六\r\n共\r\n權\r\n收\r\n證\r\n改\r\n清\r\n美\r\n再\r\n採\r\n轉\r\n更\r\n單\r\n風\r\n切\r\n打\r\n白\r\n教\r\n速\r\n花\r\n帶\r\n安\r\n場\r\n身\r\n車\r\n例\r\n真\r\n務\r\n具\r\n萬\r\n每\r\n目\r\n至\r\n達\r\n走\r\n積\r\n示\r\n議\r\n聲\r\n報\r\n鬥\r\n完\r\n類\r\n八\r\n離\r\n華\r\n名\r\n確\r\n才\r\n科\r\n張\r\n信\r\n馬\r\n節\r\n話\r\n米\r\n整\r\n空\r\n元\r\n況\r\n今\r\n集\r\n溫\r\n傳\r\n土\r\n許\r\n步\r\n群\r\n廣\r\n石\r\n記\r\n需\r\n段\r\n研\r\n界\r\n拉\r\n林\r\n律\r\n叫\r\n且\r\n究\r\n觀\r\n越\r\n織\r\n裝\r\n影\r\n算\r\n低\r\n持\r\n音\r\n眾\r\n書\r\n布\r\n复\r\n容\r\n兒\r\n須\r\n際\r\n商\r\n非\r\n驗\r\n連\r\n斷\r\n深\r\n難\r\n近\r\n礦\r\n千\r\n週\r\n委\r\n素\r\n技\r\n備\r\n半\r\n辦\r\n青\r\n省\r\n列\r\n習\r\n響\r\n約\r\n支\r\n般\r\n史\r\n感\r\n勞\r\n便\r\n團\r\n往\r\n酸\r\n歷\r\n市\r\n克\r\n何\r\n除\r\n消\r\n構\r\n府\r\n稱\r\n太\r\n準\r\n精\r\n值\r\n號\r\n率\r\n族\r\n維\r\n劃\r\n選\r\n標\r\n寫\r\n存\r\n候\r\n毛\r\n親\r\n快\r\n效\r\n斯\r\n院\r\n查\r\n江\r\n型\r\n眼\r\n王\r\n按\r\n格\r\n養\r\n易\r\n置\r\n派\r\n層\r\n片\r\n始\r\n卻\r\n專\r\n狀\r\n育\r\n廠\r\n京\r\n識\r\n適\r\n屬\r\n圓\r\n包\r\n火\r\n住\r\n調\r\n滿\r\n縣\r\n局\r\n照\r\n參\r\n紅\r\n細\r\n引\r\n聽\r\n該\r\n鐵\r\n價\r\n嚴\r\n首\r\n底\r\n液\r\n官\r\n德\r\n隨\r\n病\r\n蘇\r\n失\r\n爾\r\n死\r\n講\r\n配\r\n女\r\n黃\r\n推\r\n顯\r\n談\r\n罪\r\n神\r\n藝\r\n呢\r\n席\r\n含\r\n企\r\n望\r\n密\r\n批\r\n營\r\n項\r\n防\r\n舉\r\n球\r\n英\r\n氧\r\n勢\r\n告\r\n李\r\n台\r\n落\r\n木\r\n幫\r\n輪\r\n破\r\n亞\r\n師\r\n圍\r\n注\r\n遠\r\n字\r\n材\r\n排\r\n供\r\n河\r\n態\r\n封\r\n另\r\n施\r\n減\r\n樹\r\n溶\r\n怎\r\n止\r\n案\r\n言\r\n士\r\n均\r\n武\r\n固\r\n葉\r\n魚\r\n波\r\n視\r\n僅\r\n費\r\n緊\r\n愛\r\n左\r\n章\r\n早\r\n朝\r\n害\r\n續\r\n輕\r\n服\r\n試\r\n食\r\n充\r\n兵\r\n源\r\n判\r\n護\r\n司\r\n足\r\n某\r\n練\r\n差\r\n致\r\n板\r\n田\r\n降\r\n黑\r\n犯\r\n負\r\n擊\r\n范\r\n繼\r\n興\r\n似\r\n餘\r\n堅\r\n曲\r\n輸\r\n修\r\n故\r\n城\r\n夫\r\n夠\r\n送\r\n筆\r\n船\r\n佔\r\n右\r\n財\r\n吃\r\n富\r\n春\r\n職\r\n覺\r\n漢\r\n畫\r\n功\r\n巴\r\n跟\r\n雖\r\n雜\r\n飛\r\n檢\r\n吸\r\n助\r\n昇\r\n陽\r\n互\r\n初\r\n創\r\n抗\r\n考\r\n投\r\n壞\r\n策\r\n古\r\n徑\r\n換\r\n未\r\n跑\r\n留\r\n鋼\r\n曾\r\n端\r\n責\r\n站\r\n簡\r\n述\r\n錢\r\n副\r\n盡\r\n帝\r\n射\r\n草\r\n衝\r\n承\r\n獨\r\n令\r\n限\r\n阿\r\n宣\r\n環\r\n雙\r\n請\r\n超\r\n微\r\n讓\r\n控\r\n州\r\n良\r\n軸\r\n找\r\n否\r\n紀\r\n益\r\n依\r\n優\r\n頂\r\n礎\r\n載\r\n倒\r\n房\r\n突\r\n坐\r\n粉\r\n敵\r\n略\r\n客\r\n袁\r\n冷\r\n勝\r\n絕\r\n析\r\n塊\r\n劑\r\n測\r\n絲\r\n協\r\n訴\r\n念\r\n陳\r\n仍\r\n羅\r\n鹽\r\n友\r\n洋\r\n錯\r\n苦\r\n夜\r\n刑\r\n移\r\n頻\r\n逐\r\n靠\r\n混\r\n母\r\n短\r\n皮\r\n終\r\n聚\r\n汽\r\n村\r\n雲\r\n哪\r\n既\r\n距\r\n衛\r\n停\r\n烈\r\n央\r\n察\r\n燒\r\n迅\r\n境\r\n若\r\n印\r\n洲\r\n刻\r\n括\r\n激\r\n孔\r\n搞\r\n甚\r\n室\r\n待\r\n核\r\n校\r\n散\r\n侵\r\n吧\r\n甲\r\n遊\r\n久\r\n菜\r\n味\r\n舊\r\n模\r\n湖\r\n貨\r\n損\r\n預\r\n阻\r\n毫\r\n普\r\n穩\r\n乙\r\n媽\r\n植\r\n息\r\n擴\r\n銀\r\n語\r\n揮\r\n酒\r\n守\r\n拿\r\n序\r\n紙\r\n醫\r\n缺\r\n雨\r\n嗎\r\n針\r\n劉\r\n啊\r\n急\r\n唱\r\n誤\r\n訓\r\n願\r\n審\r\n附\r\n獲\r\n茶\r\n鮮\r\n糧\r\n斤\r\n孩\r\n脫\r\n硫\r\n肥\r\n善\r\n龍\r\n演\r\n父\r\n漸\r\n血\r\n歡\r\n械\r\n掌\r\n歌\r\n沙\r\n剛\r\n攻\r\n謂\r\n盾\r\n討\r\n晚\r\n粒\r\n亂\r\n燃\r\n矛\r\n乎\r\n殺\r\n藥\r\n寧\r\n魯\r\n貴\r\n鐘\r\n煤\r\n讀\r\n班\r\n伯\r\n香\r\n介\r\n迫\r\n句\r\n豐\r\n培\r\n握\r\n蘭\r\n擔\r\n弦\r\n蛋\r\n沉\r\n假\r\n穿\r\n執\r\n答\r\n樂\r\n誰\r\n順\r\n煙\r\n縮\r\n徵\r\n臉\r\n喜\r\n松\r\n腳\r\n困\r\n異\r\n免\r\n背\r\n星\r\n福\r\n買\r\n染\r\n井\r\n概\r\n慢\r\n怕\r\n磁\r\n倍\r\n祖\r\n皇\r\n促\r\n靜\r\n補\r\n評\r\n翻\r\n肉\r\n踐\r\n尼\r\n衣\r\n寬\r\n揚\r\n棉\r\n希\r\n傷\r\n操\r\n垂\r\n秋\r\n宜\r\n氫\r\n套\r\n督\r\n振\r\n架\r\n亮\r\n末\r\n憲\r\n慶\r\n編\r\n牛\r\n觸\r\n映\r\n雷\r\n銷\r\n詩\r\n座\r\n居\r\n抓\r\n裂\r\n胞\r\n呼\r\n娘\r\n景\r\n威\r\n綠\r\n晶\r\n厚\r\n盟\r\n衡\r\n雞\r\n孫\r\n延\r\n危\r\n膠\r\n屋\r\n鄉\r\n臨\r\n陸\r\n顧\r\n掉\r\n呀\r\n燈\r\n歲\r\n措\r\n束\r\n耐\r\n劇\r\n玉\r\n趙\r\n跳\r\n哥\r\n季\r\n課\r\n凱\r\n胡\r\n額\r\n款\r\n紹\r\n卷\r\n齊\r\n偉\r\n蒸\r\n殖\r\n永\r\n宗\r\n苗\r\n川\r\n爐\r\n岩\r\n弱\r\n零\r\n楊\r\n奏\r\n沿\r\n露\r\n桿\r\n探\r\n滑\r\n鎮\r\n飯\r\n濃\r\n航\r\n懷\r\n趕\r\n庫\r\n奪\r\n伊\r\n靈\r\n稅\r\n途\r\n滅\r\n賽\r\n歸\r\n召\r\n鼓\r\n播\r\n盤\r\n裁\r\n險\r\n康\r\n唯\r\n錄\r\n菌\r\n純\r\n借\r\n糖\r\n蓋\r\n橫\r\n符\r\n私\r\n努\r\n堂\r\n域\r\n槍\r\n潤\r\n幅\r\n哈\r\n竟\r\n熟\r\n蟲\r\n澤\r\n腦\r\n壤\r\n碳\r\n歐\r\n遍\r\n側\r\n寨\r\n敢\r\n徹\r\n慮\r\n斜\r\n薄\r\n庭\r\n納\r\n彈\r\n飼\r\n伸\r\n折\r\n麥\r\n濕\r\n暗\r\n荷\r\n瓦\r\n塞\r\n床\r\n築\r\n惡\r\n戶\r\n訪\r\n塔\r\n奇\r\n透\r\n梁\r\n刀\r\n旋\r\n跡\r\n卡\r\n氯\r\n遇\r\n份\r\n毒\r\n泥\r\n退\r\n洗\r\n擺\r\n灰\r\n彩\r\n賣\r\n耗\r\n夏\r\n擇\r\n忙\r\n銅\r\n獻\r\n硬\r\n予\r\n繁\r\n圈\r\n雪\r\n函\r\n亦\r\n抽\r\n篇\r\n陣\r\n陰\r\n丁\r\n尺\r\n追\r\n堆\r\n雄\r\n迎\r\n泛\r\n爸\r\n樓\r\n避\r\n謀\r\n噸\r\n野\r\n豬\r\n旗\r\n累\r\n偏\r\n典\r\n館\r\n索\r\n秦\r\n脂\r\n潮\r\n爺\r\n豆\r\n忽\r\n托\r\n驚\r\n塑\r\n遺\r\n愈\r\n朱\r\n替\r\n纖\r\n粗\r\n傾\r\n尚\r\n痛\r\n楚\r\n謝\r\n奮\r\n購\r\n磨\r\n君\r\n池\r\n旁\r\n碎\r\n骨\r\n監\r\n捕\r\n弟\r\n暴\r\n割\r\n貫\r\n殊\r\n釋\r\n詞\r\n亡\r\n壁\r\n頓\r\n寶\r\n午\r\n塵\r\n聞\r\n揭\r\n炮\r\n殘\r\n冬\r\n橋\r\n婦\r\n警\r\n綜\r\n招\r\n吳\r\n付\r\n浮\r\n遭\r\n徐\r\n您\r\n搖\r\n谷\r\n贊\r\n箱\r\n隔\r\n訂\r\n男\r\n吹\r\n園\r\n紛\r\n唐\r\n敗\r\n宋\r\n玻\r\n巨\r\n耕\r\n坦\r\n榮\r\n閉\r\n灣\r\n鍵\r\n凡\r\n駐\r\n鍋\r\n救\r\n恩\r\n剝\r\n凝\r\n鹼\r\n齒\r\n截\r\n煉\r\n麻\r\n紡\r\n禁\r\n廢\r\n盛\r\n版\r\n緩\r\n淨\r\n睛\r\n昌\r\n婚\r\n涉\r\n筒\r\n嘴\r\n插\r\n岸\r\n朗\r\n莊\r\n街\r\n藏\r\n姑\r\n貿\r\n腐\r\n奴\r\n啦\r\n慣\r\n乘\r\n夥\r\n恢\r\n勻\r\n紗\r\n扎\r\n辯\r\n耳\r\n彪\r\n臣\r\n億\r\n璃\r\n抵\r\n脈\r\n秀\r\n薩\r\n俄\r\n網\r\n舞\r\n店\r\n噴\r\n縱\r\n寸\r\n汗\r\n掛\r\n洪\r\n賀\r\n閃\r\n柬\r\n爆\r\n烯\r\n津\r\n稻\r\n牆\r\n軟\r\n勇\r\n像\r\n滾\r\n厘\r\n蒙\r\n芳\r\n肯\r\n坡\r\n柱\r\n盪\r\n腿\r\n儀\r\n旅\r\n尾\r\n軋\r\n冰\r\n貢\r\n登\r\n黎\r\n削\r\n鑽\r\n勒\r\n逃\r\n障\r\n氨\r\n郭\r\n峰\r\n幣\r\n港\r\n伏\r\n軌\r\n畝\r\n畢\r\n擦\r\n莫\r\n刺\r\n浪\r\n秘\r\n援\r\n株\r\n健\r\n售\r\n股\r\n島\r\n甘\r\n泡\r\n睡\r\n童\r\n鑄\r\n湯\r\n閥\r\n休\r\n匯\r\n舍\r\n牧\r\n繞\r\n炸\r\n哲\r\n磷\r\n績\r\n朋\r\n淡\r\n尖\r\n啟\r\n陷\r\n柴\r\n呈\r\n徒\r\n顏\r\n淚\r\n稍\r\n忘\r\n泵\r\n藍\r\n拖\r\n洞\r\n授\r\n鏡\r\n辛\r\n壯\r\n鋒\r\n貧\r\n虛\r\n彎\r\n摩\r\n泰\r\n幼\r\n廷\r\n尊\r\n窗\r\n綱\r\n弄\r\n隸\r\n疑\r\n氏\r\n宮\r\n姐\r\n震\r\n瑞\r\n怪\r\n尤\r\n琴\r\n循\r\n描\r\n膜\r\n違\r\n夾\r\n腰\r\n緣\r\n珠\r\n窮\r\n森\r\n枝\r\n竹\r\n溝\r\n催\r\n繩\r\n憶\r\n邦\r\n剩\r\n幸\r\n漿\r\n欄\r\n擁\r\n牙\r\n貯\r\n禮\r\n濾\r\n鈉\r\n紋\r\n罷\r\n拍\r\n咱\r\n喊\r\n袖\r\n埃\r\n勤\r\n罰\r\n焦\r\n潛\r\n伍\r\n墨\r\n欲\r\n縫\r\n姓\r\n刊\r\n飽\r\n仿\r\n獎\r\n鋁\r\n鬼\r\n麗\r\n跨\r\n默\r\n挖\r\n鏈\r\n掃\r\n喝\r\n袋\r\n炭\r\n污\r\n幕\r\n諸\r\n弧\r\n勵\r\n梅\r\n奶\r\n潔\r\n災\r\n舟\r\n鑑\r\n苯\r\n訟\r\n抱\r\n毀\r\n懂\r\n寒\r\n智\r\n埔\r\n寄\r\n屆\r\n躍\r\n渡\r\n挑\r\n丹\r\n艱\r\n貝\r\n碰\r\n拔\r\n爹\r\n戴\r\n碼\r\n夢\r\n芽\r\n熔\r\n赤\r\n漁\r\n哭\r\n敬\r\n顆\r\n奔\r\n鉛\r\n仲\r\n虎\r\n稀\r\n妹\r\n乏\r\n珍\r\n申\r\n桌\r\n遵\r\n允\r\n隆\r\n螺\r\n倉\r\n魏\r\n銳\r\n曉\r\n氮\r\n兼\r\n隱\r\n礙\r\n赫\r\n撥\r\n忠\r\n肅\r\n缸\r\n牽\r\n搶\r\n博\r\n巧\r\n殼\r\n兄\r\n杜\r\n訊\r\n誠\r\n碧\r\n祥\r\n柯\r\n頁\r\n巡\r\n矩\r\n悲\r\n灌\r\n齡\r\n倫\r\n票\r\n尋\r\n桂\r\n鋪\r\n聖\r\n恐\r\n恰\r\n鄭\r\n趣\r\n抬\r\n荒\r\n騰\r\n貼\r\n柔\r\n滴\r\n猛\r\n闊\r\n輛\r\n妻\r\n填\r\n撤\r\n儲\r\n簽\r\n鬧\r\n擾\r\n紫\r\n砂\r\n遞\r\n戲\r\n吊\r\n陶\r\n伐\r\n餵\r\n療\r\n瓶\r\n婆\r\n撫\r\n臂\r\n摸\r\n忍\r\n蝦\r\n蠟\r\n鄰\r\n胸\r\n鞏\r\n擠\r\n偶\r\n棄\r\n槽\r\n勁\r\n乳\r\n鄧\r\n吉\r\n仁\r\n爛\r\n磚\r\n租\r\n烏\r\n艦\r\n伴\r\n瓜\r\n淺\r\n丙\r\n暫\r\n燥\r\n橡\r\n柳\r\n迷\r\n暖\r\n牌\r\n秧\r\n膽\r\n詳\r\n簧\r\n踏\r\n瓷\r\n譜\r\n呆\r\n賓\r\n糊\r\n洛\r\n輝\r\n憤\r\n競\r\n隙\r\n怒\r\n粘\r\n乃\r\n緒\r\n肩\r\n籍\r\n敏\r\n塗\r\n熙\r\n皆\r\n偵\r\n懸\r\n掘\r\n享\r\n糾\r\n醒\r\n狂\r\n鎖\r\n淀\r\n恨\r\n牲\r\n霸\r\n爬\r\n賞\r\n逆\r\n玩\r\n陵\r\n祝\r\n秒\r\n浙\r\n貌\r\n役\r\n彼\r\n悉\r\n鴨\r\n趨\r\n鳳\r\n晨\r\n畜\r\n輩\r\n秩\r\n卵\r\n署\r\n梯\r\n炎\r\n灘\r\n棋\r\n驅\r\n篩\r\n峽\r\n冒\r\n啥\r\n壽\r\n譯\r\n浸\r\n泉\r\n帽\r\n遲\r\n矽\r\n疆\r\n貸\r\n漏\r\n稿\r\n冠\r\n嫩\r\n脅\r\n芯\r\n牢\r\n叛\r\n蝕\r\n奧\r\n鳴\r\n嶺\r\n羊\r\n憑\r\n串\r\n塘\r\n繪\r\n酵\r\n融\r\n盆\r\n錫\r\n廟\r\n籌\r\n凍\r\n輔\r\n攝\r\n襲\r\n筋\r\n拒\r\n僚\r\n旱\r\n鉀\r\n鳥\r\n漆\r\n沈\r\n眉\r\n疏\r\n添\r\n棒\r\n穗\r\n硝\r\n韓\r\n逼\r\n扭\r\n僑\r\n涼\r\n挺\r\n碗\r\n栽\r\n炒\r\n杯\r\n患\r\n餾\r\n勸\r\n豪\r\n遼\r\n勃\r\n鴻\r\n旦\r\n吏\r\n拜\r\n狗\r\n埋\r\n輥\r\n掩\r\n飲\r\n搬\r\n罵\r\n辭\r\n勾\r\n扣\r\n估\r\n蔣\r\n絨\r\n霧\r\n丈\r\n朵\r\n姆\r\n擬\r\n宇\r\n輯\r\n陝\r\n雕\r\n償\r\n蓄\r\n崇\r\n剪\r\n倡\r\n廳\r\n咬\r\n駛\r\n薯\r\n刷\r\n斥\r\n番\r\n賦\r\n奉\r\n佛\r\n澆\r\n漫\r\n曼\r\n扇\r\n鈣\r\n桃\r\n扶\r\n仔\r\n返\r\n俗\r\n虧\r\n腔\r\n鞋\r\n棱\r\n覆\r\n框\r\n悄\r\n叔\r\n撞\r\n騙\r\n勘\r\n旺\r\n沸\r\n孤\r\n吐\r\n孟\r\n渠\r\n屈\r\n疾\r\n妙\r\n惜\r\n仰\r\n狠\r\n脹\r\n諧\r\n拋\r\n黴\r\n桑\r\n崗\r\n嘛\r\n衰\r\n盜\r\n滲\r\n臟\r\n賴\r\n湧\r\n甜\r\n曹\r\n閱\r\n肌\r\n哩\r\n厲\r\n烴\r\n緯\r\n毅\r\n昨\r\n偽\r\n症\r\n煮\r\n嘆\r\n釘\r\n搭\r\n莖\r\n籠\r\n酷\r\n偷\r\n弓\r\n錐\r\n恆\r\n傑\r\n坑\r\n鼻\r\n翼\r\n綸\r\n敘\r\n獄\r\n逮\r\n罐\r\n絡\r\n棚\r\n抑\r\n膨\r\n蔬\r\n寺\r\n驟\r\n穆\r\n冶\r\n枯\r\n冊\r\n屍\r\n凸\r\n紳\r\n坯\r\n犧\r\n焰\r\n轟\r\n欣\r\n晉\r\n瘦\r\n禦\r\n錠\r\n錦\r\n喪\r\n旬\r\n鍛\r\n壟\r\n搜\r\n撲\r\n邀\r\n亭\r\n酯\r\n邁\r\n舒\r\n脆\r\n酶\r\n閒\r\n憂\r\n酚\r\n頑\r\n羽\r\n漲\r\n卸\r\n仗\r\n陪\r\n闢\r\n懲\r\n杭\r\n姚\r\n肚\r\n捉\r\n飄\r\n漂\r\n昆\r\n欺\r\n吾\r\n郎\r\n烷\r\n汁\r\n呵\r\n飾\r\n蕭\r\n雅\r\n郵\r\n遷\r\n燕\r\n撒\r\n姻\r\n赴\r\n宴\r\n煩\r\n債\r\n帳\r\n斑\r\n鈴\r\n旨\r\n醇\r\n董\r\n餅\r\n雛\r\n姿\r\n拌\r\n傅\r\n腹\r\n妥\r\n揉\r\n賢\r\n拆\r\n歪\r\n葡\r\n胺\r\n丟\r\n浩\r\n徽\r\n昂\r\n墊\r\n擋\r\n覽\r\n貪\r\n慰\r\n繳\r\n汪\r\n慌\r\n馮\r\n諾\r\n姜\r\n誼\r\n兇\r\n劣\r\n誣\r\n耀\r\n昏\r\n躺\r\n盈\r\n騎\r\n喬\r\n溪\r\n叢\r\n盧\r\n抹\r\n悶\r\n諮\r\n刮\r\n駕\r\n纜\r\n悟\r\n摘\r\n鉺\r\n擲\r\n頗\r\n幻\r\n柄\r\n惠\r\n慘\r\n佳\r\n仇\r\n臘\r\n窩\r\n滌\r\n劍\r\n瞧\r\n堡\r\n潑\r\n蔥\r\n罩\r\n霍\r\n撈\r\n胎\r\n蒼\r\n濱\r\n倆\r\n捅\r\n湘\r\n砍\r\n霞\r\n邵\r\n萄\r\n瘋\r\n淮\r\n遂\r\n熊\r\n糞\r\n烘\r\n宿\r\n檔\r\n戈\r\n駁\r\n嫂\r\n裕\r\n徙\r\n箭\r\n捐\r\n腸\r\n撐\r\n曬\r\n辨\r\n殿\r\n蓮\r\n攤\r\n攪\r\n醬\r\n屏\r\n疫\r\n哀\r\n蔡\r\n堵\r\n沫\r\n皺\r\n暢\r\n疊\r\n閣\r\n萊\r\n敲\r\n轄\r\n鉤\r\n痕\r\n壩\r\n巷\r\n餓\r\n禍\r\n丘\r\n玄\r\n溜\r\n曰\r\n邏\r\n彭\r\n嘗\r\n卿\r\n妨\r\n艇\r\n吞\r\n韋\r\n怨\r\n矮\r\n歇`.split('\\n');\r\n", "/**\r\n * Audited & minimal JS implementation of\r\n * [BIP39 mnemonic phrases](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\r\n * @module\r\n * @example\r\n```js\r\nimport * as bip39 from '@scure/bip39';\r\nimport { wordlist } from '@scure/bip39/wordlists/english';\r\nconst mn = bip39.generateMnemonic(wordlist);\r\nconsole.log(mn);\r\nconst ent = bip39.mnemonicToEntropy(mn, wordlist)\r\nbip39.entropyToMnemonic(ent, wordlist);\r\nbip39.validateMnemonic(mn, wordlist);\r\nawait bip39.mnemonicToSeed(mn, 'password');\r\nbip39.mnemonicToSeedSync(mn, 'password');\r\n\r\n// Wordlists\r\nimport { wordlist as czech } from '@scure/bip39/wordlists/czech';\r\nimport { wordlist as english } from '@scure/bip39/wordlists/english';\r\nimport { wordlist as french } from '@scure/bip39/wordlists/french';\r\nimport { wordlist as italian } from '@scure/bip39/wordlists/italian';\r\nimport { wordlist as japanese } from '@scure/bip39/wordlists/japanese';\r\nimport { wordlist as korean } from '@scure/bip39/wordlists/korean';\r\nimport { wordlist as portuguese } from '@scure/bip39/wordlists/portuguese';\r\nimport { wordlist as simplifiedChinese } from '@scure/bip39/wordlists/simplified-chinese';\r\nimport { wordlist as spanish } from '@scure/bip39/wordlists/spanish';\r\nimport { wordlist as traditionalChinese } from '@scure/bip39/wordlists/traditional-chinese';\r\n```\r\n */\r\n/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\r\nimport { pbkdf2, pbkdf2Async } from '@noble/hashes/pbkdf2';\r\nimport { sha256, sha512 } from '@noble/hashes/sha2';\r\nimport { abytes, anumber, randomBytes } from '@noble/hashes/utils';\r\nimport { utils as baseUtils } from '@scure/base';\r\n// Japanese wordlist\r\nconst isJapanese = (wordlist) => wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093';\r\n// Normalization replaces equivalent sequences of characters\r\n// so that any two texts that are equivalent will be reduced\r\n// to the same sequence of code points, called the normal form of the original text.\r\n// https://tonsky.me/blog/unicode/#why-is-a----\r\nfunction nfkd(str) {\r\n    if (typeof str !== 'string')\r\n        throw new TypeError('invalid mnemonic type: ' + typeof str);\r\n    return str.normalize('NFKD');\r\n}\r\nfunction normalize(str) {\r\n    const norm = nfkd(str);\r\n    const words = norm.split(' ');\r\n    if (![12, 15, 18, 21, 24].includes(words.length))\r\n        throw new Error('Invalid mnemonic');\r\n    return { nfkd: norm, words };\r\n}\r\nfunction aentropy(ent) {\r\n    abytes(ent, 16, 20, 24, 28, 32);\r\n}\r\n/**\r\n * Generate x random words. Uses Cryptographically-Secure Random Number Generator.\r\n * @param wordlist imported wordlist for specific language\r\n * @param strength mnemonic strength 128-256 bits\r\n * @example\r\n * generateMnemonic(wordlist, 128)\r\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\r\n */\r\nexport function generateMnemonic(wordlist, strength = 128) {\r\n    anumber(strength);\r\n    if (strength % 32 !== 0 || strength > 256)\r\n        throw new TypeError('Invalid entropy');\r\n    return entropyToMnemonic(randomBytes(strength / 8), wordlist);\r\n}\r\nconst calcChecksum = (entropy) => {\r\n    // Checksum is ent.length/4 bits long\r\n    const bitsLeft = 8 - entropy.length / 4;\r\n    // Zero rightmost \"bitsLeft\" bits in byte\r\n    // For example: bitsLeft=4 val=10111101 -> 10110000\r\n    return new Uint8Array([(sha256(entropy)[0] >> bitsLeft) << bitsLeft]);\r\n};\r\nfunction getCoder(wordlist) {\r\n    if (!Array.isArray(wordlist) || wordlist.length !== 2048 || typeof wordlist[0] !== 'string')\r\n        throw new Error('Wordlist: expected array of 2048 strings');\r\n    wordlist.forEach((i) => {\r\n        if (typeof i !== 'string')\r\n            throw new Error('wordlist: non-string element: ' + i);\r\n    });\r\n    return baseUtils.chain(baseUtils.checksum(1, calcChecksum), baseUtils.radix2(11, true), baseUtils.alphabet(wordlist));\r\n}\r\n/**\r\n * Reversible: Converts mnemonic string to raw entropy in form of byte array.\r\n * @param mnemonic 12-24 words\r\n * @param wordlist imported wordlist for specific language\r\n * @example\r\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\r\n * mnemonicToEntropy(mnem, wordlist)\r\n * // Produces\r\n * new Uint8Array([\r\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\r\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\r\n * ])\r\n */\r\nexport function mnemonicToEntropy(mnemonic, wordlist) {\r\n    const { words } = normalize(mnemonic);\r\n    const entropy = getCoder(wordlist).decode(words);\r\n    aentropy(entropy);\r\n    return entropy;\r\n}\r\n/**\r\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\r\n * @param entropy byte array\r\n * @param wordlist imported wordlist for specific language\r\n * @returns 12-24 words\r\n * @example\r\n * const ent = new Uint8Array([\r\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\r\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\r\n * ]);\r\n * entropyToMnemonic(ent, wordlist);\r\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\r\n */\r\nexport function entropyToMnemonic(entropy, wordlist) {\r\n    aentropy(entropy);\r\n    const words = getCoder(wordlist).encode(entropy);\r\n    return words.join(isJapanese(wordlist) ? '\\u3000' : ' ');\r\n}\r\n/**\r\n * Validates mnemonic for being 12-24 words contained in `wordlist`.\r\n */\r\nexport function validateMnemonic(mnemonic, wordlist) {\r\n    try {\r\n        mnemonicToEntropy(mnemonic, wordlist);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nconst psalt = (passphrase) => nfkd('mnemonic' + passphrase);\r\n/**\r\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\r\n * @param mnemonic 12-24 words\r\n * @param passphrase string that will additionally protect the key\r\n * @returns 64 bytes of key data\r\n * @example\r\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\r\n * await mnemonicToSeed(mnem, 'password');\r\n * // new Uint8Array([...64 bytes])\r\n */\r\nexport function mnemonicToSeed(mnemonic, passphrase = '') {\r\n    return pbkdf2Async(sha512, normalize(mnemonic).nfkd, psalt(passphrase), { c: 2048, dkLen: 64 });\r\n}\r\n/**\r\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\r\n * @param mnemonic 12-24 words\r\n * @param passphrase string that will additionally protect the key\r\n * @returns 64 bytes of key data\r\n * @example\r\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\r\n * mnemonicToSeedSync(mnem, 'password');\r\n * // new Uint8Array([...64 bytes])\r\n */\r\nexport function mnemonicToSeedSync(mnemonic, passphrase = '') {\r\n    return pbkdf2(sha512, normalize(mnemonic).nfkd, psalt(passphrase), { c: 2048, dkLen: 64 });\r\n}\r\n"],
  "mappings": "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A;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UA+/Dd,MAAM,IAAI;;;AC//DbjnhfrjB,MAAM,IAAI;;;AC//DV,IAAMC,aAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA+/DrB,MAAM,IAAI;;;AC99Db;",
  "names": ["anumber", "abytes", "ahash", "clean", "createView", "bytesToHex", "hexToBytes", "utf8ToBytes", "concatBytes", "randomBytes", "Hash", "num", "bytesToHex", "abytes", "hexToBytes", "concatBytes", "init_utils", "isLE", "_32n", "Hash", "createView", "abytes", "clean", "sha256", "sha512", "clean", "hmac", "Hash", "ahash", "clean", "abytes", "mod", "_0n", "_1n", "num", "anumber", "isLE", "init_utils", "_1n", "_0n", "Point", "wbits", "init_utils", "_0n", "_1n", "num", "pointToBytes", "concatBytes", "abytes", "toBytes", "_3n", "_4n", "Point", "endo", "bytesToHex", "_2n", "tv5", "c1", "c2", "ahash", "randomBytes", "hmac", "hexToBytes", "utils", "sign", "ecdsa", "init_utils", "utf8ToBytes", "abytes", "concatBytes", "mod", "createHasher", "Point", "num", "init_utils", "_3n", "_2n", "sha256", "concatBytes", "Point", "_1n", "randomBytes", "_0n", "secp256k1", "init_utils", "mod", "createHasher", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist"]
}

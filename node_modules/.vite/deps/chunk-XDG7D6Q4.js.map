{
  "version": 3,
  "sources": ["../../idb-keyval/dist/index.js"],
  "sourcesContent": ["function promisifyRequest(request) {\r\n    return new Promise((resolve, reject) => {\r\n        // @ts-ignore - file size hacks\r\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\r\n        // @ts-ignore - file size hacks\r\n        request.onabort = request.onerror = () => reject(request.error);\r\n    });\r\n}\r\nfunction createStore(dbName, storeName) {\r\n    const request = indexedDB.open(dbName);\r\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\r\n    const dbp = promisifyRequest(request);\r\n    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\r\n}\r\nlet defaultGetStoreFunc;\r\nfunction defaultGetStore() {\r\n    if (!defaultGetStoreFunc) {\r\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\r\n    }\r\n    return defaultGetStoreFunc;\r\n}\r\n/**\r\n * Get a value by its key.\r\n *\r\n * @param key\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction get(key, customStore = defaultGetStore()) {\r\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\r\n}\r\n/**\r\n * Set a value with a key.\r\n *\r\n * @param key\r\n * @param value\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction set(key, value, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        store.put(value, key);\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\n/**\r\n * Set multiple values at once. This is faster than calling set() multiple times.\r\n * It's also atomic â€“ if one of the pairs can't be added, none will be added.\r\n *\r\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction setMany(entries, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\n/**\r\n * Get multiple values by their keys\r\n *\r\n * @param keys\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction getMany(keys, customStore = defaultGetStore()) {\r\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\r\n}\r\n/**\r\n * Update a value. This lets you see the old value and update it as an atomic operation.\r\n *\r\n * @param key\r\n * @param updater A callback that takes the old value and returns a new value.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction update(key, updater, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => \r\n    // Need to create the promise manually.\r\n    // If I try to chain promises, the transaction closes in browsers\r\n    // that use a promise polyfill (IE10/11).\r\n    new Promise((resolve, reject) => {\r\n        store.get(key).onsuccess = function () {\r\n            try {\r\n                store.put(updater(this.result), key);\r\n                resolve(promisifyRequest(store.transaction));\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        };\r\n    }));\r\n}\r\n/**\r\n * Delete a particular key from the store.\r\n *\r\n * @param key\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction del(key, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        store.delete(key);\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\n/**\r\n * Delete multiple keys at once.\r\n *\r\n * @param keys List of keys to delete.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction delMany(keys, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        keys.forEach((key) => store.delete(key));\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\n/**\r\n * Clear all values in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction clear(customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        store.clear();\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\nfunction eachCursor(store, callback) {\r\n    store.openCursor().onsuccess = function () {\r\n        if (!this.result)\r\n            return;\r\n        callback(this.result);\r\n        this.result.continue();\r\n    };\r\n    return promisifyRequest(store.transaction);\r\n}\r\n/**\r\n * Get all keys in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction keys(customStore = defaultGetStore()) {\r\n    return customStore('readonly', (store) => {\r\n        // Fast path for modern browsers\r\n        if (store.getAllKeys) {\r\n            return promisifyRequest(store.getAllKeys());\r\n        }\r\n        const items = [];\r\n        return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);\r\n    });\r\n}\r\n/**\r\n * Get all values in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction values(customStore = defaultGetStore()) {\r\n    return customStore('readonly', (store) => {\r\n        // Fast path for modern browsers\r\n        if (store.getAll) {\r\n            return promisifyRequest(store.getAll());\r\n        }\r\n        const items = [];\r\n        return eachCursor(store, (cursor) => items.push(cursor.value)).then(() => items);\r\n    });\r\n}\r\n/**\r\n * Get all entries in the store. Each entry is an array of `[key, value]`.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction entries(customStore = defaultGetStore()) {\r\n    return customStore('readonly', (store) => {\r\n        // Fast path for modern browsers\r\n        // (although, hopefully we'll get a simpler path some day)\r\n        if (store.getAll && store.getAllKeys) {\r\n            return Promise.all([\r\n                promisifyRequest(store.getAllKeys()),\r\n                promisifyRequest(store.getAll()),\r\n            ]).then(([keys, values]) => keys.map((key, i) => [key, values[i]]));\r\n        }\r\n        const items = [];\r\n        return customStore('readonly', (store) => eachCursor(store, (cursor) => items.push([cursor.key, cursor.value])).then(() => items));\r\n    });\r\n}\r\n\r\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };\r\n"],
  "mappings": ";AAAA,SAAS,iBAAiB,SAAS;AAC/B,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEpC,YAAQ,aAAa,QAAQ,YAAY,MAAM,QAAQ,QAAQ,MAAM;AAErE,YAAQ,UAAU,QAAQ,UAAU,MAAM,OAAO,QAAQ,KAAK;AAAA,EAClE,CAAC;AACL;AACA,SAAS,YAAY,QAAQ,WAAW;AACpC,QAAM,UAAU,UAAU,KAAK,MAAM;AACrC,UAAQ,kBAAkB,MAAM,QAAQ,OAAO,kBAAkB,SAAS;AAC1E,QAAM,MAAM,iBAAiB,OAAO;AACpC,SAAO,CAAC,QAAQ,aAAa,IAAI,KAAK,CAAC,OAAO,SAAS,GAAG,YAAY,WAAW,MAAM,EAAE,YAAY,SAAS,CAAC,CAAC;AACpH;AACA,IAAI;AACJ,SAAS,kBAAkB;AACvB,MAAI,CAAC,qBAAqB;AACtB,0BAAsB,YAAY,gBAAgB,QAAQ;AAAA,EAC9D;AACA,SAAO;AACX;AAOA,SAAS,IAAI,KAAK,cAAc,gBAAgB,GAAG;AAC/C,SAAO,YAAY,YAAY,CAAC,UAAU,iBAAiB,MAAM,IAAI,GAAG,CAAC,CAAC;AAC9E;AAQA,SAAS,IAAI,KAAK,OAAO,cAAc,gBAAgB,GAAG;AACtD,SAAO,YAAY,aAAa,CAAC,UAAU;AACvC,UAAM,IAAI,OAAO,GAAG;AACpB,WAAO,iBAAiB,MAAM,WAAW;AAAA,EAC7C,CAAC;AACL;AAqDA,SAAS,IAAI,KAAK,cAAc,gBAAgB,GAAG;AAC/C,SAAO,YAAY,aAAa,CAAC,UAAU;AACvC,UAAM,OAAO,GAAG;AAChB,WAAO,iBAAiB,MAAM,WAAW;AAAA,EAC7C,CAAC;AACL;AAkBA,SAAS,MAAM,cAAc,gBAAgB,GAAG;AAC5C,SAAO,YAAY,aAAa,CAAC,UAAU;AACvC,UAAM,MAAM;AACZ,WAAO,iBAAiB,MAAM,WAAW;AAAA,EAC7C,CAAC;AACL;AACA,SAAS,WAAW,OAAO,UAAU;AACjC,QAAM,WAAW,EAAE,YAAY,WAAY;AACvC,QAAI,CAAC,KAAK;AACN;AACJ,aAAS,KAAK,MAAM;AACpB,SAAK,OAAO,SAAS;AAAA,EACzB;AACA,SAAO,iBAAiB,MAAM,WAAW;AAC7C;AAMA,SAAS,KAAK,cAAc,gBAAgB,GAAG;AAC3C,SAAO,YAAY,YAAY,CAAC,UAAU;AAEtC,QAAI,MAAM,YAAY;AAClB,aAAO,iBAAiB,MAAM,WAAW,CAAC;AAAA,IAC9C;AACA,UAAM,QAAQ,CAAC;AACf,WAAO,WAAW,OAAO,CAAC,WAAW,MAAM,KAAK,OAAO,GAAG,CAAC,EAAE,KAAK,MAAM,KAAK;AAAA,EACjF,CAAC;AACL;",
  "names": []
}

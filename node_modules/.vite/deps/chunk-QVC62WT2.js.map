{
  "version": 3,
  "sources": ["../../viem/node_modules/ox/core/version.ts", "../../viem/node_modules/ox/core/internal/errors.ts", "../../viem/node_modules/ox/core/Errors.ts", "../../viem/node_modules/ox/core/Json.ts", "../../viem/node_modules/ox/core/internal/bytes.ts", "../../viem/node_modules/ox/core/internal/hex.ts", "../../viem/node_modules/ox/core/Bytes.ts", "../../viem/node_modules/ox/core/Hex.ts", "../../viem/node_modules/ox/core/Withdrawal.ts", "../../viem/node_modules/ox/core/BlockOverrides.ts", "../../viem/constants/abis.ts", "../../viem/constants/contract.ts", "../../viem/constants/contracts.ts", "../../viem/utils/abi/decodeFunctionResult.ts", "../../viem/utils/abi/encodeDeployData.ts", "../../viem/utils/abi/prepareEncodeFunctionData.ts", "../../viem/utils/abi/encodeFunctionData.ts", "../../viem/utils/promise/withResolvers.ts", "../../viem/utils/promise/createBatchScheduler.ts", "../../viem/utils/stateOverride.ts", "../../viem/actions/public/call.ts", "../../viem/errors/ccip.ts", "../../viem/utils/address/isAddressEqual.ts", "../../viem/utils/abi/decodeFunctionData.ts", "../../viem/utils/abi/encodeErrorResult.ts", "../../viem/utils/abi/encodeFunctionResult.ts", "../../viem/utils/ens/localBatchGatewayRequest.ts", "../../viem/utils/ccip.ts"],
  "sourcesContent": ["/** @internal */\r\nexport const version = '0.1.1'\r\n", "import { version } from '../version.js'\r\n\r\n/** @internal */\r\nexport function getUrl(url: string) {\r\n  return url\r\n}\r\n\r\n/** @internal */\r\nexport function getVersion() {\r\n  return version\r\n}\r\n\r\n/** @internal */\r\nexport function prettyPrint(args: unknown) {\r\n  if (!args) return ''\r\n  const entries = Object.entries(args)\r\n    .map(([key, value]) => {\r\n      if (value === undefined || value === false) return null\r\n      return [key, value]\r\n    })\r\n    .filter(Boolean) as [string, string][]\r\n  const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0)\r\n  return entries\r\n    .map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`)\r\n    .join('\\n')\r\n}\r\n", "import { getVersion } from './internal/errors.js'\r\n\r\nexport type GlobalErrorType<name extends string = 'Error'> = Error & {\r\n  name: name\r\n}\r\n\r\n/**\r\n * Base error class inherited by all errors thrown by ox.\r\n *\r\n * @example\r\n * ```ts\r\n * import { Errors } from 'ox'\r\n * throw new Errors.BaseError('An error occurred')\r\n * ```\r\n */\r\nexport class BaseError<\r\n  cause extends Error | undefined = undefined,\r\n> extends Error {\r\n  details: string\r\n  docs?: string | undefined\r\n  docsPath?: string | undefined\r\n  shortMessage: string\r\n\r\n  override cause: cause\r\n  override name = 'BaseError'\r\n\r\n  version = `ox@${getVersion()}`\r\n\r\n  constructor(shortMessage: string, options: BaseError.Options<cause> = {}) {\r\n    const details = (() => {\r\n      if (options.cause instanceof BaseError) {\r\n        if (options.cause.details) return options.cause.details\r\n        if (options.cause.shortMessage) return options.cause.shortMessage\r\n      }\r\n      if (\r\n        options.cause &&\r\n        'details' in options.cause &&\r\n        typeof options.cause.details === 'string'\r\n      )\r\n        return options.cause.details\r\n      if (options.cause?.message) return options.cause.message\r\n      return options.details!\r\n    })()\r\n    const docsPath = (() => {\r\n      if (options.cause instanceof BaseError)\r\n        return options.cause.docsPath || options.docsPath\r\n      return options.docsPath\r\n    })()\r\n\r\n    const docsBaseUrl = 'https://oxlib.sh'\r\n    const docs = `${docsBaseUrl}${docsPath ?? ''}`\r\n\r\n    const message = [\r\n      shortMessage || 'An error occurred.',\r\n      ...(options.metaMessages ? ['', ...options.metaMessages] : []),\r\n      ...(details || docsPath\r\n        ? [\r\n            '',\r\n            details ? `Details: ${details}` : undefined,\r\n            docsPath ? `See: ${docs}` : undefined,\r\n          ]\r\n        : []),\r\n    ]\r\n      .filter((x) => typeof x === 'string')\r\n      .join('\\n')\r\n\r\n    super(message, options.cause ? { cause: options.cause } : undefined)\r\n\r\n    this.cause = options.cause as any\r\n    this.details = details\r\n    this.docs = docs\r\n    this.docsPath = docsPath\r\n    this.shortMessage = shortMessage\r\n  }\r\n\r\n  walk(): Error\r\n  walk(fn: (err: unknown) => boolean): Error | null\r\n  walk(fn?: any): any {\r\n    return walk(this, fn)\r\n  }\r\n}\r\n\r\nexport declare namespace BaseError {\r\n  type Options<cause extends Error | undefined = Error | undefined> = {\r\n    cause?: cause | undefined\r\n    details?: string | undefined\r\n    docsPath?: string | undefined\r\n    metaMessages?: (string | undefined)[] | undefined\r\n  }\r\n}\r\n\r\n/** @internal */\r\nfunction walk(\r\n  err: unknown,\r\n  fn?: ((err: unknown) => boolean) | undefined,\r\n): unknown {\r\n  if (fn?.(err)) return err\r\n  if (err && typeof err === 'object' && 'cause' in err && err.cause)\r\n    return walk(err.cause, fn)\r\n  return fn ? null : err\r\n}\r\n", "import type * as Errors from './Errors.js'\r\n\r\nconst bigIntSuffix = '#__bigint'\r\n\r\n/**\r\n * Parses a JSON string, with support for `bigint`.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Json } from 'ox'\r\n *\r\n * const json = Json.parse('{\"foo\":\"bar\",\"baz\":\"69420694206942069420694206942069420694206942069420#__bigint\"}')\r\n * // @log: {\r\n * // @log:   foo: 'bar',\r\n * // @log:   baz: 69420694206942069420694206942069420694206942069420n\r\n * // @log: }\r\n * ```\r\n *\r\n * @param string - The value to parse.\r\n * @param reviver - A function that transforms the results.\r\n * @returns The parsed value.\r\n */\r\nexport function parse(\r\n  string: string,\r\n  reviver?: ((this: any, key: string, value: any) => any) | undefined,\r\n) {\r\n  return JSON.parse(string, (key, value_) => {\r\n    const value = value_\r\n    if (typeof value === 'string' && value.endsWith(bigIntSuffix))\r\n      return BigInt(value.slice(0, -bigIntSuffix.length))\r\n    return typeof reviver === 'function' ? reviver(key, value) : value\r\n  })\r\n}\r\n\r\nexport declare namespace parse {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Stringifies a value to its JSON representation, with support for `bigint`.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Json } from 'ox'\r\n *\r\n * const json = Json.stringify({\r\n *   foo: 'bar',\r\n *   baz: 69420694206942069420694206942069420694206942069420n,\r\n * })\r\n * // @log: '{\"foo\":\"bar\",\"baz\":\"69420694206942069420694206942069420694206942069420#__bigint\"}'\r\n * ```\r\n *\r\n * @param value - The value to stringify.\r\n * @param replacer - A function that transforms the results. It is passed the key and value of the property, and must return the value to be used in the JSON string. If this function returns `undefined`, the property is not included in the resulting JSON string.\r\n * @param space - A string or number that determines the indentation of the JSON string. If it is a number, it indicates the number of spaces to use as indentation; if it is a string (e.g. `'\\t'`), it uses the string as the indentation character.\r\n * @returns The JSON string.\r\n */\r\nexport function stringify(\r\n  value: any,\r\n  replacer?: ((this: any, key: string, value: any) => any) | null | undefined,\r\n  space?: string | number | undefined,\r\n) {\r\n  return JSON.stringify(\r\n    value,\r\n    (key, value) => {\r\n      if (typeof replacer === 'function') return replacer(key, value)\r\n      if (typeof value === 'bigint') return value.toString() + bigIntSuffix\r\n      return value\r\n    },\r\n    space,\r\n  )\r\n}\r\n\r\nexport declare namespace stringify {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n", "import * as Bytes from '../Bytes.js'\r\nimport type * as Errors from '../Errors.js'\r\n\r\n/** @internal */\r\nexport function assertSize(bytes: Bytes.Bytes, size_: number): void {\r\n  if (Bytes.size(bytes) > size_)\r\n    throw new Bytes.SizeOverflowError({\r\n      givenSize: Bytes.size(bytes),\r\n      maxSize: size_,\r\n    })\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace assertSize {\r\n  type ErrorType =\r\n    | Bytes.size.ErrorType\r\n    | Bytes.SizeOverflowError\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function assertStartOffset(\r\n  value: Bytes.Bytes,\r\n  start?: number | undefined,\r\n) {\r\n  if (typeof start === 'number' && start > 0 && start > Bytes.size(value) - 1)\r\n    throw new Bytes.SliceOffsetOutOfBoundsError({\r\n      offset: start,\r\n      position: 'start',\r\n      size: Bytes.size(value),\r\n    })\r\n}\r\n\r\nexport declare namespace assertStartOffset {\r\n  export type ErrorType =\r\n    | Bytes.SliceOffsetOutOfBoundsError\r\n    | Bytes.size.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function assertEndOffset(\r\n  value: Bytes.Bytes,\r\n  start?: number | undefined,\r\n  end?: number | undefined,\r\n) {\r\n  if (\r\n    typeof start === 'number' &&\r\n    typeof end === 'number' &&\r\n    Bytes.size(value) !== end - start\r\n  ) {\r\n    throw new Bytes.SliceOffsetOutOfBoundsError({\r\n      offset: end,\r\n      position: 'end',\r\n      size: Bytes.size(value),\r\n    })\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace assertEndOffset {\r\n  type ErrorType =\r\n    | Bytes.SliceOffsetOutOfBoundsError\r\n    | Bytes.size.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport const charCodeMap = {\r\n  zero: 48,\r\n  nine: 57,\r\n  A: 65,\r\n  F: 70,\r\n  a: 97,\r\n  f: 102,\r\n} as const\r\n\r\n/** @internal */\r\nexport function charCodeToBase16(char: number) {\r\n  if (char >= charCodeMap.zero && char <= charCodeMap.nine)\r\n    return char - charCodeMap.zero\r\n  if (char >= charCodeMap.A && char <= charCodeMap.F)\r\n    return char - (charCodeMap.A - 10)\r\n  if (char >= charCodeMap.a && char <= charCodeMap.f)\r\n    return char - (charCodeMap.a - 10)\r\n  return undefined\r\n}\r\n\r\n/** @internal */\r\nexport function pad(bytes: Bytes.Bytes, options: pad.Options = {}) {\r\n  const { dir, size = 32 } = options\r\n  if (size === 0) return bytes\r\n  if (bytes.length > size)\r\n    throw new Bytes.SizeExceedsPaddingSizeError({\r\n      size: bytes.length,\r\n      targetSize: size,\r\n      type: 'Bytes',\r\n    })\r\n  const paddedBytes = new Uint8Array(size)\r\n  for (let i = 0; i < size; i++) {\r\n    const padEnd = dir === 'right'\r\n    paddedBytes[padEnd ? i : size - i - 1] =\r\n      bytes[padEnd ? i : bytes.length - i - 1]!\r\n  }\r\n  return paddedBytes\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace pad {\r\n  type Options = {\r\n    dir?: 'left' | 'right' | undefined\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ReturnType = Bytes.Bytes\r\n\r\n  type ErrorType = Bytes.SizeExceedsPaddingSizeError | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function trim(\r\n  value: Bytes.Bytes,\r\n  options: trim.Options = {},\r\n): trim.ReturnType {\r\n  const { dir = 'left' } = options\r\n\r\n  let data = value\r\n\r\n  let sliceLength = 0\r\n  for (let i = 0; i < data.length - 1; i++) {\r\n    if (data[dir === 'left' ? i : data.length - i - 1]!.toString() === '0')\r\n      sliceLength++\r\n    else break\r\n  }\r\n  data =\r\n    dir === 'left'\r\n      ? data.slice(sliceLength)\r\n      : data.slice(0, data.length - sliceLength)\r\n\r\n  return data as trim.ReturnType\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace trim {\r\n  type Options = {\r\n    dir?: 'left' | 'right' | undefined\r\n  }\r\n\r\n  type ReturnType = Bytes.Bytes\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n", "import type * as Errors from '../Errors.js'\r\nimport * as Hex from '../Hex.js'\r\n\r\n/** @internal */\r\nexport function assertSize(hex: Hex.Hex, size_: number): void {\r\n  if (Hex.size(hex) > size_)\r\n    throw new Hex.SizeOverflowError({\r\n      givenSize: Hex.size(hex),\r\n      maxSize: size_,\r\n    })\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace assertSize {\r\n  type ErrorType =\r\n    | Hex.size.ErrorType\r\n    | Hex.SizeOverflowError\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function assertStartOffset(value: Hex.Hex, start?: number | undefined) {\r\n  if (typeof start === 'number' && start > 0 && start > Hex.size(value) - 1)\r\n    throw new Hex.SliceOffsetOutOfBoundsError({\r\n      offset: start,\r\n      position: 'start',\r\n      size: Hex.size(value),\r\n    })\r\n}\r\n\r\nexport declare namespace assertStartOffset {\r\n  type ErrorType =\r\n    | Hex.SliceOffsetOutOfBoundsError\r\n    | Hex.size.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function assertEndOffset(\r\n  value: Hex.Hex,\r\n  start?: number | undefined,\r\n  end?: number | undefined,\r\n) {\r\n  if (\r\n    typeof start === 'number' &&\r\n    typeof end === 'number' &&\r\n    Hex.size(value) !== end - start\r\n  ) {\r\n    throw new Hex.SliceOffsetOutOfBoundsError({\r\n      offset: end,\r\n      position: 'end',\r\n      size: Hex.size(value),\r\n    })\r\n  }\r\n}\r\n\r\nexport declare namespace assertEndOffset {\r\n  type ErrorType =\r\n    | Hex.SliceOffsetOutOfBoundsError\r\n    | Hex.size.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function pad(hex_: Hex.Hex, options: pad.Options = {}) {\r\n  const { dir, size = 32 } = options\r\n\r\n  if (size === 0) return hex_\r\n\r\n  const hex = hex_.replace('0x', '')\r\n  if (hex.length > size * 2)\r\n    throw new Hex.SizeExceedsPaddingSizeError({\r\n      size: Math.ceil(hex.length / 2),\r\n      targetSize: size,\r\n      type: 'Hex',\r\n    })\r\n\r\n  return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](size * 2, '0')}` as Hex.Hex\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace pad {\r\n  type Options = {\r\n    dir?: 'left' | 'right' | undefined\r\n    size?: number | undefined\r\n  }\r\n  type ErrorType = Hex.SizeExceedsPaddingSizeError | Errors.GlobalErrorType\r\n}\r\n\r\n/** @internal */\r\nexport function trim(\r\n  value: Hex.Hex,\r\n  options: trim.Options = {},\r\n): trim.ReturnType {\r\n  const { dir = 'left' } = options\r\n\r\n  let data = value.replace('0x', '')\r\n\r\n  let sliceLength = 0\r\n  for (let i = 0; i < data.length - 1; i++) {\r\n    if (data[dir === 'left' ? i : data.length - i - 1]!.toString() === '0')\r\n      sliceLength++\r\n    else break\r\n  }\r\n  data =\r\n    dir === 'left'\r\n      ? data.slice(sliceLength)\r\n      : data.slice(0, data.length - sliceLength)\r\n\r\n  if (data === '0') return '0x'\r\n  if (dir === 'right' && data.length % 2 === 1) return `0x${data}0`\r\n  return `0x${data}` as trim.ReturnType\r\n}\r\n\r\n/** @internal */\r\nexport declare namespace trim {\r\n  type Options = {\r\n    dir?: 'left' | 'right' | undefined\r\n  }\r\n\r\n  type ReturnType = Hex.Hex\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n", "import { equalBytes } from '@noble/curves/abstract/utils'\r\nimport * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\nimport * as Json from './Json.js'\r\nimport * as internal from './internal/bytes.js'\r\nimport * as internal_hex from './internal/hex.js'\r\n\r\nconst decoder = /*#__PURE__*/ new TextDecoder()\r\nconst encoder = /*#__PURE__*/ new TextEncoder()\r\n\r\n/** Root type for a Bytes array. */\r\nexport type Bytes = Uint8Array\r\n\r\n/**\r\n * Asserts if the given value is {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.assert('abc')\r\n * // @error: Bytes.InvalidBytesTypeError:\r\n * // @error: Value `\"abc\"` of type `string` is an invalid Bytes value.\r\n * // @error: Bytes values must be of type `Uint8Array`.\r\n * ```\r\n *\r\n * @param value - Value to assert.\r\n */\r\nexport function assert(value: unknown): asserts value is Bytes {\r\n  if (value instanceof Uint8Array) return\r\n  if (!value) throw new InvalidBytesTypeError(value)\r\n  if (typeof value !== 'object') throw new InvalidBytesTypeError(value)\r\n  if (!('BYTES_PER_ELEMENT' in value)) throw new InvalidBytesTypeError(value)\r\n  if (value.BYTES_PER_ELEMENT !== 1 || value.constructor.name !== 'Uint8Array')\r\n    throw new InvalidBytesTypeError(value)\r\n}\r\n\r\nexport declare namespace assert {\r\n  type ErrorType = InvalidBytesTypeError | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Concatenates two or more {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const bytes = Bytes.concat(\r\n *   Bytes.from([1]),\r\n *   Bytes.from([69]),\r\n *   Bytes.from([420, 69]),\r\n * )\r\n * // @log: Uint8Array [ 1, 69, 420, 69 ]\r\n * ```\r\n *\r\n * @param values - Values to concatenate.\r\n * @returns Concatenated {@link ox#Bytes.Bytes}.\r\n */\r\nexport function concat(...values: readonly Bytes[]): Bytes {\r\n  let length = 0\r\n  for (const arr of values) {\r\n    length += arr.length\r\n  }\r\n  const result = new Uint8Array(length)\r\n  for (let i = 0, index = 0; i < values.length; i++) {\r\n    const arr = values[i]\r\n    result.set(arr!, index)\r\n    index += arr!.length\r\n  }\r\n  return result\r\n}\r\n\r\nexport declare namespace concat {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Instantiates a {@link ox#Bytes.Bytes} value from a `Uint8Array`, a hex string, or an array of unsigned 8-bit integers.\r\n *\r\n * :::tip\r\n *\r\n * To instantiate from a **Boolean**, **String**, or **Number**, use one of the following:\r\n *\r\n * - `Bytes.fromBoolean`\r\n *\r\n * - `Bytes.fromString`\r\n *\r\n * - `Bytes.fromNumber`\r\n *\r\n * :::\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.from([255, 124, 5, 4])\r\n * // @log: Uint8Array([255, 124, 5, 4])\r\n *\r\n * const data = Bytes.from('0xdeadbeef')\r\n * // @log: Uint8Array([222, 173, 190, 239])\r\n * ```\r\n *\r\n * @param value - Value to convert.\r\n * @returns A {@link ox#Bytes.Bytes} instance.\r\n */\r\nexport function from(value: Hex.Hex | Bytes | readonly number[]): Bytes {\r\n  if (value instanceof Uint8Array) return value\r\n  if (typeof value === 'string') return fromHex(value)\r\n  return fromArray(value)\r\n}\r\n\r\nexport declare namespace from {\r\n  type ErrorType =\r\n    | fromHex.ErrorType\r\n    | fromArray.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts an array of unsigned 8-bit integers into {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromArray([255, 124, 5, 4])\r\n * // @log: Uint8Array([255, 124, 5, 4])\r\n * ```\r\n *\r\n * @param value - Value to convert.\r\n * @returns A {@link ox#Bytes.Bytes} instance.\r\n */\r\nexport function fromArray(value: readonly number[] | Uint8Array): Bytes {\r\n  return value instanceof Uint8Array ? value : new Uint8Array(value)\r\n}\r\n\r\nexport declare namespace fromArray {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a boolean value into {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromBoolean(true)\r\n * // @log: Uint8Array([1])\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromBoolean(true, { size: 32 })\r\n * // @log: Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\r\n * ```\r\n *\r\n * @param value - Boolean value to encode.\r\n * @param options - Encoding options.\r\n * @returns Encoded {@link ox#Bytes.Bytes}.\r\n */\r\nexport function fromBoolean(value: boolean, options: fromBoolean.Options = {}) {\r\n  const { size } = options\r\n  const bytes = new Uint8Array(1)\r\n  bytes[0] = Number(value)\r\n  if (typeof size === 'number') {\r\n    internal.assertSize(bytes, size)\r\n    return padLeft(bytes, size)\r\n  }\r\n  return bytes\r\n}\r\n\r\nexport declare namespace fromBoolean {\r\n  type Options = {\r\n    /** Size of the output bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal.assertSize.ErrorType\r\n    | padLeft.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a {@link ox#Hex.Hex} value into {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromHex('0x48656c6c6f20776f726c6421')\r\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromHex('0x48656c6c6f20776f726c6421', { size: 32 })\r\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\r\n * ```\r\n *\r\n * @param value - {@link ox#Hex.Hex} value to encode.\r\n * @param options - Encoding options.\r\n * @returns Encoded {@link ox#Bytes.Bytes}.\r\n */\r\nexport function fromHex(value: Hex.Hex, options: fromHex.Options = {}): Bytes {\r\n  const { size } = options\r\n\r\n  let hex = value\r\n  if (size) {\r\n    internal_hex.assertSize(value, size)\r\n    hex = Hex.padRight(value, size)\r\n  }\r\n\r\n  let hexString = hex.slice(2) as string\r\n  if (hexString.length % 2) hexString = `0${hexString}`\r\n\r\n  const length = hexString.length / 2\r\n  const bytes = new Uint8Array(length)\r\n  for (let index = 0, j = 0; index < length; index++) {\r\n    const nibbleLeft = internal.charCodeToBase16(hexString.charCodeAt(j++))\r\n    const nibbleRight = internal.charCodeToBase16(hexString.charCodeAt(j++))\r\n    if (nibbleLeft === undefined || nibbleRight === undefined) {\r\n      throw new Errors.BaseError(\r\n        `Invalid byte sequence (\"${hexString[j - 2]}${hexString[j - 1]}\" in \"${hexString}\").`,\r\n      )\r\n    }\r\n    bytes[index] = nibbleLeft * 16 + nibbleRight\r\n  }\r\n  return bytes\r\n}\r\n\r\nexport declare namespace fromHex {\r\n  type Options = {\r\n    /** Size of the output bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal_hex.assertSize.ErrorType\r\n    | Hex.padRight.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a number value into {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromNumber(420)\r\n * // @log: Uint8Array([1, 164])\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromNumber(420, { size: 4 })\r\n * // @log: Uint8Array([0, 0, 1, 164])\r\n * ```\r\n *\r\n * @param value - Number value to encode.\r\n * @param options - Encoding options.\r\n * @returns Encoded {@link ox#Bytes.Bytes}.\r\n */\r\nexport function fromNumber(\r\n  value: bigint | number,\r\n  options?: fromNumber.Options | undefined,\r\n) {\r\n  const hex = Hex.fromNumber(value, options)\r\n  return fromHex(hex)\r\n}\r\n\r\nexport declare namespace fromNumber {\r\n  export type Options = Hex.fromNumber.Options\r\n\r\n  export type ErrorType =\r\n    | Hex.fromNumber.ErrorType\r\n    | fromHex.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a string into {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromString('Hello world!')\r\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\r\n * ```\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.fromString('Hello world!', { size: 32 })\r\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\r\n * ```\r\n *\r\n * @param value - String to encode.\r\n * @param options - Encoding options.\r\n * @returns Encoded {@link ox#Bytes.Bytes}.\r\n */\r\nexport function fromString(\r\n  value: string,\r\n  options: fromString.Options = {},\r\n): Bytes {\r\n  const { size } = options\r\n\r\n  const bytes = encoder.encode(value)\r\n  if (typeof size === 'number') {\r\n    internal.assertSize(bytes, size)\r\n    return padRight(bytes, size)\r\n  }\r\n  return bytes\r\n}\r\n\r\nexport declare namespace fromString {\r\n  type Options = {\r\n    /** Size of the output bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal.assertSize.ErrorType\r\n    | padRight.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Checks if two {@link ox#Bytes.Bytes} values are equal.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.isEqual(Bytes.from([1]), Bytes.from([1]))\r\n * // @log: true\r\n *\r\n * Bytes.isEqual(Bytes.from([1]), Bytes.from([2]))\r\n * // @log: false\r\n * ```\r\n *\r\n * @param bytesA - First {@link ox#Bytes.Bytes} value.\r\n * @param bytesB - Second {@link ox#Bytes.Bytes} value.\r\n * @returns `true` if the two values are equal, otherwise `false`.\r\n */\r\nexport function isEqual(bytesA: Bytes, bytesB: Bytes) {\r\n  return equalBytes(bytesA, bytesB)\r\n}\r\n\r\nexport declare namespace isEqual {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Pads a {@link ox#Bytes.Bytes} value to the left with zero bytes until it reaches the given `size` (default: 32 bytes).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.padLeft(Bytes.from([1]), 4)\r\n * // @log: Uint8Array([0, 0, 0, 1])\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} value to pad.\r\n * @param size - Size to pad the {@link ox#Bytes.Bytes} value to.\r\n * @returns Padded {@link ox#Bytes.Bytes} value.\r\n */\r\nexport function padLeft(\r\n  value: Bytes,\r\n  size?: number | undefined,\r\n): padLeft.ReturnType {\r\n  return internal.pad(value, { dir: 'left', size })\r\n}\r\n\r\nexport declare namespace padLeft {\r\n  type ReturnType = internal.pad.ReturnType\r\n  type ErrorType = internal.pad.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Pads a {@link ox#Bytes.Bytes} value to the right with zero bytes until it reaches the given `size` (default: 32 bytes).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.padRight(Bytes.from([1]), 4)\r\n * // @log: Uint8Array([1, 0, 0, 0])\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} value to pad.\r\n * @param size - Size to pad the {@link ox#Bytes.Bytes} value to.\r\n * @returns Padded {@link ox#Bytes.Bytes} value.\r\n */\r\nexport function padRight(\r\n  value: Bytes,\r\n  size?: number | undefined,\r\n): padRight.ReturnType {\r\n  return internal.pad(value, { dir: 'right', size })\r\n}\r\n\r\nexport declare namespace padRight {\r\n  type ReturnType = internal.pad.ReturnType\r\n  type ErrorType = internal.pad.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Generates random {@link ox#Bytes.Bytes} of the specified length.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const bytes = Bytes.random(32)\r\n * // @log: Uint8Array([... x32])\r\n * ```\r\n *\r\n * @param length - Length of the random {@link ox#Bytes.Bytes} to generate.\r\n * @returns Random {@link ox#Bytes.Bytes} of the specified length.\r\n */\r\nexport function random(length: number): Bytes {\r\n  return crypto.getRandomValues(new Uint8Array(length))\r\n}\r\n\r\nexport declare namespace random {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Retrieves the size of a {@link ox#Bytes.Bytes} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.size(Bytes.from([1, 2, 3, 4]))\r\n * // @log: 4\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} value.\r\n * @returns Size of the {@link ox#Bytes.Bytes} value.\r\n */\r\nexport function size(value: Bytes): number {\r\n  return value.length\r\n}\r\n\r\nexport declare namespace size {\r\n  export type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Returns a section of a {@link ox#Bytes.Bytes} value given a start/end bytes offset.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.slice(\r\n *   Bytes.from([1, 2, 3, 4, 5, 6, 7, 8, 9]),\r\n *   1,\r\n *   4,\r\n * )\r\n * // @log: Uint8Array([2, 3, 4])\r\n * ```\r\n *\r\n * @param value - The {@link ox#Bytes.Bytes} value.\r\n * @param start - Start offset.\r\n * @param end - End offset.\r\n * @param options - Slice options.\r\n * @returns Sliced {@link ox#Bytes.Bytes} value.\r\n */\r\nexport function slice(\r\n  value: Bytes,\r\n  start?: number | undefined,\r\n  end?: number | undefined,\r\n  options: slice.Options = {},\r\n): Bytes {\r\n  const { strict } = options\r\n  internal.assertStartOffset(value, start)\r\n  const value_ = value.slice(start, end)\r\n  if (strict) internal.assertEndOffset(value_, start, end)\r\n  return value_\r\n}\r\n\r\nexport declare namespace slice {\r\n  type Options = {\r\n    /** Asserts that the sliced value is the same size as the given start/end offsets. */\r\n    strict?: boolean | undefined\r\n  }\r\n\r\n  export type ErrorType =\r\n    | internal.assertStartOffset.ErrorType\r\n    | internal.assertEndOffset.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Bytes.Bytes} into a bigint.\r\n *\r\n * @example\r\n * ```ts\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.toBigInt(Bytes.from([1, 164]))\r\n * // @log: 420n\r\n * ```\r\n *\r\n * @param bytes - The {@link ox#Bytes.Bytes} to decode.\r\n * @param options - Decoding options.\r\n * @returns Decoded bigint.\r\n */\r\nexport function toBigInt(bytes: Bytes, options: toBigInt.Options = {}): bigint {\r\n  const { size } = options\r\n  if (typeof size !== 'undefined') internal.assertSize(bytes, size)\r\n  const hex = Hex.fromBytes(bytes, options)\r\n  return Hex.toBigInt(hex, options)\r\n}\r\n\r\nexport declare namespace toBigInt {\r\n  type Options = {\r\n    /** Whether or not the number of a signed representation. */\r\n    signed?: boolean | undefined\r\n    /** Size of the bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | Hex.fromBytes.ErrorType\r\n    | Hex.toBigInt.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Bytes.Bytes} into a boolean.\r\n *\r\n * @example\r\n * ```ts\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.toBoolean(Bytes.from([1]))\r\n * // @log: true\r\n * ```\r\n *\r\n * @param bytes - The {@link ox#Bytes.Bytes} to decode.\r\n * @param options - Decoding options.\r\n * @returns Decoded boolean.\r\n */\r\nexport function toBoolean(\r\n  bytes: Bytes,\r\n  options: toBoolean.Options = {},\r\n): boolean {\r\n  const { size } = options\r\n  let bytes_ = bytes\r\n  if (typeof size !== 'undefined') {\r\n    internal.assertSize(bytes_, size)\r\n    bytes_ = trimLeft(bytes_)\r\n  }\r\n  if (bytes_.length > 1 || bytes_[0]! > 1)\r\n    throw new InvalidBytesBooleanError(bytes_)\r\n  return Boolean(bytes_[0])\r\n}\r\n\r\nexport declare namespace toBoolean {\r\n  type Options = {\r\n    /** Size of the bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal.assertSize.ErrorType\r\n    | trimLeft.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a {@link ox#Bytes.Bytes} value into a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.toHex(Bytes.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\r\n * // '0x48656c6c6f20576f726c6421'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Bytes.Bytes} to decode.\r\n * @param options - Options.\r\n * @returns Decoded {@link ox#Hex.Hex} value.\r\n */\r\nexport function toHex(value: Bytes, options: toHex.Options = {}): Hex.Hex {\r\n  return Hex.fromBytes(value, options)\r\n}\r\n\r\nexport declare namespace toHex {\r\n  type Options = {\r\n    /** Size of the bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType = Hex.fromBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Bytes.Bytes} into a number.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.toNumber(Bytes.from([1, 164]))\r\n * // @log: 420\r\n * ```\r\n */\r\nexport function toNumber(bytes: Bytes, options: toNumber.Options = {}): number {\r\n  const { size } = options\r\n  if (typeof size !== 'undefined') internal.assertSize(bytes, size)\r\n  const hex = Hex.fromBytes(bytes, options)\r\n  return Hex.toNumber(hex, options)\r\n}\r\n\r\nexport declare namespace toNumber {\r\n  type Options = {\r\n    /** Whether or not the number of a signed representation. */\r\n    signed?: boolean | undefined\r\n    /** Size of the bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | Hex.fromBytes.ErrorType\r\n    | Hex.toNumber.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Bytes.Bytes} into a string.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * const data = Bytes.toString(Bytes.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\r\n * // @log: 'Hello world'\r\n * ```\r\n *\r\n * @param bytes - The {@link ox#Bytes.Bytes} to decode.\r\n * @param options - Options.\r\n * @returns Decoded string.\r\n */\r\nexport function toString(bytes: Bytes, options: toString.Options = {}): string {\r\n  const { size } = options\r\n\r\n  let bytes_ = bytes\r\n  if (typeof size !== 'undefined') {\r\n    internal.assertSize(bytes_, size)\r\n    bytes_ = trimRight(bytes_)\r\n  }\r\n  return decoder.decode(bytes_)\r\n}\r\n\r\nexport declare namespace toString {\r\n  export type Options = {\r\n    /** Size of the bytes. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  export type ErrorType =\r\n    | internal.assertSize.ErrorType\r\n    | trimRight.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Trims leading zeros from a {@link ox#Bytes.Bytes} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.trimLeft(Bytes.from([0, 0, 0, 0, 1, 2, 3]))\r\n * // @log: Uint8Array([1, 2, 3])\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} value.\r\n * @returns Trimmed {@link ox#Bytes.Bytes} value.\r\n */\r\nexport function trimLeft(value: Bytes): Bytes {\r\n  return internal.trim(value, { dir: 'left' })\r\n}\r\n\r\nexport declare namespace trimLeft {\r\n  type ErrorType = internal.trim.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Trims trailing zeros from a {@link ox#Bytes.Bytes} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.trimRight(Bytes.from([1, 2, 3, 0, 0, 0, 0]))\r\n * // @log: Uint8Array([1, 2, 3])\r\n * ```\r\n *\r\n * @param value - {@link ox#Bytes.Bytes} value.\r\n * @returns Trimmed {@link ox#Bytes.Bytes} value.\r\n */\r\nexport function trimRight(value: Bytes): Bytes {\r\n  return internal.trim(value, { dir: 'right' })\r\n}\r\n\r\nexport declare namespace trimRight {\r\n  export type ErrorType = internal.trim.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Checks if the given value is {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.validate('0x')\r\n * // @log: false\r\n *\r\n * Bytes.validate(Bytes.from([1, 2, 3]))\r\n * // @log: true\r\n * ```\r\n *\r\n * @param value - Value to check.\r\n * @returns `true` if the value is {@link ox#Bytes.Bytes}, otherwise `false`.\r\n */\r\nexport function validate(value: unknown): value is Bytes {\r\n  try {\r\n    assert(value)\r\n    return true\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nexport declare namespace validate {\r\n  export type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Thrown when the bytes value cannot be represented as a boolean.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.toBoolean(Bytes.from([5]))\r\n * // @error: Bytes.InvalidBytesBooleanError: Bytes value `[5]` is not a valid boolean.\r\n * // @error: The bytes array must contain a single byte of either a `0` or `1` value.\r\n * ```\r\n */\r\nexport class InvalidBytesBooleanError extends Errors.BaseError {\r\n  override readonly name = 'Bytes.InvalidBytesBooleanError'\r\n\r\n  constructor(bytes: Bytes) {\r\n    super(`Bytes value \\`${bytes}\\` is not a valid boolean.`, {\r\n      metaMessages: [\r\n        'The bytes array must contain a single byte of either a `0` or `1` value.',\r\n      ],\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when a value cannot be converted to bytes.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * // @noErrors\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.from('foo')\r\n * // @error: Bytes.InvalidBytesTypeError: Value `foo` of type `string` is an invalid Bytes value.\r\n * ```\r\n */\r\nexport class InvalidBytesTypeError extends Errors.BaseError {\r\n  override readonly name = 'Bytes.InvalidBytesTypeError'\r\n\r\n  constructor(value: unknown) {\r\n    super(\r\n      `Value \\`${typeof value === 'object' ? Json.stringify(value) : value}\\` of type \\`${typeof value}\\` is an invalid Bytes value.`,\r\n      {\r\n        metaMessages: ['Bytes values must be of type `Bytes`.'],\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when a size exceeds the maximum allowed size.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.fromString('Hello World!', { size: 8 })\r\n * // @error: Bytes.SizeOverflowError: Size cannot exceed `8` bytes. Given size: `12` bytes.\r\n * ```\r\n */\r\nexport class SizeOverflowError extends Errors.BaseError {\r\n  override readonly name = 'Bytes.SizeOverflowError'\r\n\r\n  constructor({ givenSize, maxSize }: { givenSize: number; maxSize: number }) {\r\n    super(\r\n      `Size cannot exceed \\`${maxSize}\\` bytes. Given size: \\`${givenSize}\\` bytes.`,\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when a slice offset is out-of-bounds.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.slice(Bytes.from([1, 2, 3]), 4)\r\n * // @error: Bytes.SliceOffsetOutOfBoundsError: Slice starting at offset `4` is out-of-bounds (size: `3`).\r\n * ```\r\n */\r\nexport class SliceOffsetOutOfBoundsError extends Errors.BaseError {\r\n  override readonly name = 'Bytes.SliceOffsetOutOfBoundsError'\r\n\r\n  constructor({\r\n    offset,\r\n    position,\r\n    size,\r\n  }: { offset: number; position: 'start' | 'end'; size: number }) {\r\n    super(\r\n      `Slice ${\r\n        position === 'start' ? 'starting' : 'ending'\r\n      } at offset \\`${offset}\\` is out-of-bounds (size: \\`${size}\\`).`,\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when a the padding size exceeds the maximum allowed size.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.padLeft(Bytes.fromString('Hello World!'), 8)\r\n * // @error: [Bytes.SizeExceedsPaddingSizeError: Bytes size (`12`) exceeds padding size (`8`).\r\n * ```\r\n */\r\nexport class SizeExceedsPaddingSizeError extends Errors.BaseError {\r\n  override readonly name = 'Bytes.SizeExceedsPaddingSizeError'\r\n\r\n  constructor({\r\n    size,\r\n    targetSize,\r\n    type,\r\n  }: {\r\n    size: number\r\n    targetSize: number\r\n    type: 'Hex' | 'Bytes'\r\n  }) {\r\n    super(\r\n      `${type.charAt(0).toUpperCase()}${type\r\n        .slice(1)\r\n        .toLowerCase()} size (\\`${size}\\`) exceeds padding size (\\`${targetSize}\\`).`,\r\n    )\r\n  }\r\n}\r\n", "import { equalBytes } from '@noble/curves/abstract/utils'\r\nimport * as Bytes from './Bytes.js'\r\nimport * as Errors from './Errors.js'\r\nimport * as Json from './Json.js'\r\nimport * as internal_bytes from './internal/bytes.js'\r\nimport * as internal from './internal/hex.js'\r\n\r\nconst encoder = /*#__PURE__*/ new TextEncoder()\r\n\r\nconst hexes = /*#__PURE__*/ Array.from({ length: 256 }, (_v, i) =>\r\n  i.toString(16).padStart(2, '0'),\r\n)\r\n\r\n/** Root type for a Hex string. */\r\nexport type Hex = `0x${string}`\r\n\r\n/**\r\n * Asserts if the given value is {@link ox#Hex.Hex}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.assert('abc')\r\n * // @error: InvalidHexValueTypeError:\r\n * // @error: Value `\"abc\"` of type `string` is an invalid hex type.\r\n * // @error: Hex types must be represented as `\"0x\\${string}\"`.\r\n * ```\r\n *\r\n * @param value - The value to assert.\r\n * @param options - Options.\r\n */\r\nexport function assert(\r\n  value: unknown,\r\n  options: assert.Options = {},\r\n): asserts value is Hex {\r\n  const { strict = false } = options\r\n  if (!value) throw new InvalidHexTypeError(value)\r\n  if (typeof value !== 'string') throw new InvalidHexTypeError(value)\r\n  if (strict) {\r\n    if (!/^0x[0-9a-fA-F]*$/.test(value)) throw new InvalidHexValueError(value)\r\n  }\r\n  if (!value.startsWith('0x')) throw new InvalidHexValueError(value)\r\n}\r\n\r\nexport declare namespace assert {\r\n  type Options = {\r\n    /** Checks if the {@link ox#Hex.Hex} value contains invalid hexadecimal characters. @default false */\r\n    strict?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | InvalidHexTypeError\r\n    | InvalidHexValueError\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Concatenates two or more {@link ox#Hex.Hex}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.concat('0x123', '0x456')\r\n * // @log: '0x123456'\r\n * ```\r\n *\r\n * @param values - The {@link ox#Hex.Hex} values to concatenate.\r\n * @returns The concatenated {@link ox#Hex.Hex} value.\r\n */\r\nexport function concat(...values: readonly Hex[]): Hex {\r\n  return `0x${(values as Hex[]).reduce((acc, x) => acc + x.replace('0x', ''), '')}`\r\n}\r\n\r\nexport declare namespace concat {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Instantiates a {@link ox#Hex.Hex} value from a hex string or {@link ox#Bytes.Bytes} value.\r\n *\r\n * :::tip\r\n *\r\n * To instantiate from a **Boolean**, **String**, or **Number**, use one of the following:\r\n *\r\n * - `Hex.fromBoolean`\r\n *\r\n * - `Hex.fromString`\r\n *\r\n * - `Hex.fromNumber`\r\n *\r\n * :::\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes, Hex } from 'ox'\r\n *\r\n * Hex.from('0x48656c6c6f20576f726c6421')\r\n * // @log: '0x48656c6c6f20576f726c6421'\r\n *\r\n * Hex.from(Bytes.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\r\n * // @log: '0x48656c6c6f20576f726c6421'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Bytes.Bytes} value to encode.\r\n * @returns The encoded {@link ox#Hex.Hex} value.\r\n */\r\nexport function from(value: Hex | Bytes.Bytes | readonly number[]): Hex {\r\n  if (value instanceof Uint8Array) return fromBytes(value)\r\n  if (Array.isArray(value)) return fromBytes(new Uint8Array(value))\r\n  return value as never\r\n}\r\n\r\nexport declare namespace from {\r\n  type Options = {\r\n    /** The size (in bytes) of the output hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType = fromBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a boolean into a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.fromBoolean(true)\r\n * // @log: '0x1'\r\n *\r\n * Hex.fromBoolean(false)\r\n * // @log: '0x0'\r\n *\r\n * Hex.fromBoolean(true, { size: 32 })\r\n * // @log: '0x0000000000000000000000000000000000000000000000000000000000000001'\r\n * ```\r\n *\r\n * @param value - The boolean value to encode.\r\n * @param options - Options.\r\n * @returns The encoded {@link ox#Hex.Hex} value.\r\n */\r\nexport function fromBoolean(\r\n  value: boolean,\r\n  options: fromBoolean.Options = {},\r\n): Hex {\r\n  const hex: Hex = `0x${Number(value)}`\r\n  if (typeof options.size === 'number') {\r\n    internal.assertSize(hex, options.size)\r\n    return padLeft(hex, options.size)\r\n  }\r\n  return hex\r\n}\r\n\r\nexport declare namespace fromBoolean {\r\n  type Options = {\r\n    /** The size (in bytes) of the output hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal.assertSize.ErrorType\r\n    | padLeft.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a {@link ox#Bytes.Bytes} value into a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes, Hex } from 'ox'\r\n *\r\n * Hex.fromBytes(Bytes.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\r\n * // @log: '0x48656c6c6f20576f726c6421'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Bytes.Bytes} value to encode.\r\n * @param options - Options.\r\n * @returns The encoded {@link ox#Hex.Hex} value.\r\n */\r\nexport function fromBytes(\r\n  value: Bytes.Bytes,\r\n  options: fromBytes.Options = {},\r\n): Hex {\r\n  let string = ''\r\n  for (let i = 0; i < value.length; i++) string += hexes[value[i]!]\r\n  const hex = `0x${string}` as const\r\n\r\n  if (typeof options.size === 'number') {\r\n    internal.assertSize(hex, options.size)\r\n    return padRight(hex, options.size)\r\n  }\r\n  return hex\r\n}\r\n\r\nexport declare namespace fromBytes {\r\n  type Options = {\r\n    /** The size (in bytes) of the output hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal.assertSize.ErrorType\r\n    | padRight.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a number or bigint into a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.fromNumber(420)\r\n * // @log: '0x1a4'\r\n *\r\n * Hex.fromNumber(420, { size: 32 })\r\n * // @log: '0x00000000000000000000000000000000000000000000000000000000000001a4'\r\n * ```\r\n *\r\n * @param value - The number or bigint value to encode.\r\n * @param options - Options.\r\n * @returns The encoded {@link ox#Hex.Hex} value.\r\n */\r\nexport function fromNumber(\r\n  value: number | bigint,\r\n  options: fromNumber.Options = {},\r\n): Hex {\r\n  const { signed, size } = options\r\n\r\n  const value_ = BigInt(value)\r\n\r\n  let maxValue: bigint | number | undefined\r\n  if (size) {\r\n    if (signed) maxValue = (1n << (BigInt(size) * 8n - 1n)) - 1n\r\n    else maxValue = 2n ** (BigInt(size) * 8n) - 1n\r\n  } else if (typeof value === 'number') {\r\n    maxValue = BigInt(Number.MAX_SAFE_INTEGER)\r\n  }\r\n\r\n  const minValue = typeof maxValue === 'bigint' && signed ? -maxValue - 1n : 0\r\n\r\n  if ((maxValue && value_ > maxValue) || value_ < minValue) {\r\n    const suffix = typeof value === 'bigint' ? 'n' : ''\r\n    throw new IntegerOutOfRangeError({\r\n      max: maxValue ? `${maxValue}${suffix}` : undefined,\r\n      min: `${minValue}${suffix}`,\r\n      signed,\r\n      size,\r\n      value: `${value}${suffix}`,\r\n    })\r\n  }\r\n\r\n  const stringValue = (\r\n    signed && value_ < 0 ? (1n << BigInt(size * 8)) + BigInt(value_) : value_\r\n  ).toString(16)\r\n\r\n  const hex = `0x${stringValue}` as Hex\r\n  if (size) return padLeft(hex, size) as Hex\r\n  return hex\r\n}\r\n\r\nexport declare namespace fromNumber {\r\n  type Options =\r\n    | {\r\n        /** Whether or not the number of a signed representation. */\r\n        signed?: boolean | undefined\r\n        /** The size (in bytes) of the output hex value. */\r\n        size: number\r\n      }\r\n    | {\r\n        signed?: undefined\r\n        /** The size (in bytes) of the output hex value. */\r\n        size?: number | undefined\r\n      }\r\n\r\n  type ErrorType =\r\n    | IntegerOutOfRangeError\r\n    | padLeft.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Encodes a string into a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n * Hex.fromString('Hello World!')\r\n * // '0x48656c6c6f20576f726c6421'\r\n *\r\n * Hex.fromString('Hello World!', { size: 32 })\r\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\r\n * ```\r\n *\r\n * @param value - The string value to encode.\r\n * @param options - Options.\r\n * @returns The encoded {@link ox#Hex.Hex} value.\r\n */\r\nexport function fromString(\r\n  value: string,\r\n  options: fromString.Options = {},\r\n): Hex {\r\n  return fromBytes(encoder.encode(value), options)\r\n}\r\n\r\nexport declare namespace fromString {\r\n  type Options = {\r\n    /** The size (in bytes) of the output hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType = fromBytes.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Checks if two {@link ox#Hex.Hex} values are equal.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.isEqual('0xdeadbeef', '0xdeadbeef')\r\n * // @log: true\r\n *\r\n * Hex.isEqual('0xda', '0xba')\r\n * // @log: false\r\n * ```\r\n *\r\n * @param hexA - The first {@link ox#Hex.Hex} value.\r\n * @param hexB - The second {@link ox#Hex.Hex} value.\r\n * @returns `true` if the two {@link ox#Hex.Hex} values are equal, `false` otherwise.\r\n */\r\nexport function isEqual(hexA: Hex, hexB: Hex) {\r\n  return equalBytes(Bytes.fromHex(hexA), Bytes.fromHex(hexB))\r\n}\r\n\r\nexport declare namespace isEqual {\r\n  type ErrorType = Bytes.fromHex.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Pads a {@link ox#Hex.Hex} value to the left with zero bytes until it reaches the given `size` (default: 32 bytes).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.padLeft('0x1234', 4)\r\n * // @log: '0x00001234'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Hex.Hex} value to pad.\r\n * @param size - The size (in bytes) of the output hex value.\r\n * @returns The padded {@link ox#Hex.Hex} value.\r\n */\r\nexport function padLeft(\r\n  value: Hex,\r\n  size?: number | undefined,\r\n): padLeft.ReturnType {\r\n  return internal.pad(value, { dir: 'left', size })\r\n}\r\n\r\nexport declare namespace padLeft {\r\n  type ReturnType = Hex\r\n  type ErrorType = internal.pad.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Pads a {@link ox#Hex.Hex} value to the right with zero bytes until it reaches the given `size` (default: 32 bytes).\r\n *\r\n * @example\r\n * ```ts\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.padRight('0x1234', 4)\r\n * // @log: '0x12340000'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Hex.Hex} value to pad.\r\n * @param size - The size (in bytes) of the output hex value.\r\n * @returns The padded {@link ox#Hex.Hex} value.\r\n */\r\nexport function padRight(\r\n  value: Hex,\r\n  size?: number | undefined,\r\n): padRight.ReturnType {\r\n  return internal.pad(value, { dir: 'right', size })\r\n}\r\n\r\nexport declare namespace padRight {\r\n  type ReturnType = Hex\r\n  type ErrorType = internal.pad.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Generates a random {@link ox#Hex.Hex} value of the specified length.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * const hex = Hex.random(32)\r\n * // @log: '0x...'\r\n * ```\r\n *\r\n * @returns Random {@link ox#Hex.Hex} value.\r\n */\r\nexport function random(length: number): Hex {\r\n  return fromBytes(Bytes.random(length))\r\n}\r\n\r\nexport declare namespace random {\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Returns a section of a {@link ox#Bytes.Bytes} value given a start/end bytes offset.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.slice('0x0123456789', 1, 4)\r\n * // @log: '0x234567'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Hex.Hex} value to slice.\r\n * @param start - The start offset (in bytes).\r\n * @param end - The end offset (in bytes).\r\n * @param options - Options.\r\n * @returns The sliced {@link ox#Hex.Hex} value.\r\n */\r\nexport function slice(\r\n  value: Hex,\r\n  start?: number | undefined,\r\n  end?: number | undefined,\r\n  options: slice.Options = {},\r\n): Hex {\r\n  const { strict } = options\r\n  internal.assertStartOffset(value, start)\r\n  const value_ = `0x${value\r\n    .replace('0x', '')\r\n    .slice((start ?? 0) * 2, (end ?? value.length) * 2)}` as const\r\n  if (strict) internal.assertEndOffset(value_, start, end)\r\n  return value_\r\n}\r\n\r\nexport declare namespace slice {\r\n  type Options = {\r\n    /** Asserts that the sliced value is the same size as the given start/end offsets. */\r\n    strict?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal.assertStartOffset.ErrorType\r\n    | internal.assertEndOffset.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Retrieves the size of a {@link ox#Hex.Hex} value (in bytes).\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.size('0xdeadbeef')\r\n * // @log: 4\r\n * ```\r\n *\r\n * @param value - The {@link ox#Hex.Hex} value to get the size of.\r\n * @returns The size of the {@link ox#Hex.Hex} value (in bytes).\r\n */\r\nexport function size(value: Hex): number {\r\n  return Math.ceil((value.length - 2) / 2)\r\n}\r\n\r\nexport declare namespace size {\r\n  export type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Trims leading zeros from a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.trimLeft('0x00000000deadbeef')\r\n * // @log: '0xdeadbeef'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Hex.Hex} value to trim.\r\n * @returns The trimmed {@link ox#Hex.Hex} value.\r\n */\r\nexport function trimLeft(value: Hex): trimLeft.ReturnType {\r\n  return internal.trim(value, { dir: 'left' })\r\n}\r\n\r\nexport declare namespace trimLeft {\r\n  type ReturnType = Hex\r\n\r\n  type ErrorType = internal.trim.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Trims trailing zeros from a {@link ox#Hex.Hex} value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.trimRight('0xdeadbeef00000000')\r\n * // @log: '0xdeadbeef'\r\n * ```\r\n *\r\n * @param value - The {@link ox#Hex.Hex} value to trim.\r\n * @returns The trimmed {@link ox#Hex.Hex} value.\r\n */\r\nexport function trimRight(value: Hex): trimRight.ReturnType {\r\n  return internal.trim(value, { dir: 'right' })\r\n}\r\n\r\nexport declare namespace trimRight {\r\n  type ReturnType = Hex\r\n\r\n  type ErrorType = internal.trim.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Hex.Hex} value into a BigInt.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.toBigInt('0x1a4')\r\n * // @log: 420n\r\n *\r\n * Hex.toBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\r\n * // @log: 420n\r\n * ```\r\n *\r\n * @param hex - The {@link ox#Hex.Hex} value to decode.\r\n * @param options - Options.\r\n * @returns The decoded BigInt.\r\n */\r\nexport function toBigInt(hex: Hex, options: toBigInt.Options = {}): bigint {\r\n  const { signed } = options\r\n\r\n  if (options.size) internal.assertSize(hex, options.size)\r\n\r\n  const value = BigInt(hex)\r\n  if (!signed) return value\r\n\r\n  const size = (hex.length - 2) / 2\r\n\r\n  const max_unsigned = (1n << (BigInt(size) * 8n)) - 1n\r\n  const max_signed = max_unsigned >> 1n\r\n\r\n  if (value <= max_signed) return value\r\n  return value - max_unsigned - 1n\r\n}\r\n\r\nexport declare namespace toBigInt {\r\n  type Options = {\r\n    /** Whether or not the number of a signed representation. */\r\n    signed?: boolean | undefined\r\n    /** Size (in bytes) of the hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType = internal.assertSize.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Hex.Hex} value into a boolean.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.toBoolean('0x01')\r\n * // @log: true\r\n *\r\n * Hex.toBoolean('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\r\n * // @log: true\r\n * ```\r\n *\r\n * @param hex - The {@link ox#Hex.Hex} value to decode.\r\n * @param options - Options.\r\n * @returns The decoded boolean.\r\n */\r\nexport function toBoolean(hex: Hex, options: toBoolean.Options = {}): boolean {\r\n  if (options.size) internal.assertSize(hex, options.size)\r\n  const hex_ = trimLeft(hex)\r\n  if (hex_ === '0x') return false\r\n  if (hex_ === '0x1') return true\r\n  throw new InvalidHexBooleanError(hex)\r\n}\r\n\r\nexport declare namespace toBoolean {\r\n  type Options = {\r\n    /** Size (in bytes) of the hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal.assertSize.ErrorType\r\n    | trimLeft.ErrorType\r\n    | InvalidHexBooleanError\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Hex.Hex} value into a {@link ox#Bytes.Bytes}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * const data = Hex.toBytes('0x48656c6c6f20776f726c6421')\r\n * // @log: Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\r\n * ```\r\n *\r\n * @param hex - The {@link ox#Hex.Hex} value to decode.\r\n * @param options - Options.\r\n * @returns The decoded {@link ox#Bytes.Bytes}.\r\n */\r\nexport function toBytes(hex: Hex, options: toBytes.Options = {}): Bytes.Bytes {\r\n  return Bytes.fromHex(hex, options)\r\n}\r\n\r\nexport declare namespace toBytes {\r\n  type Options = {\r\n    /** Size (in bytes) of the hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType = Bytes.fromHex.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Hex.Hex} value into a number.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.toNumber('0x1a4')\r\n * // @log: 420\r\n *\r\n * Hex.toNumber('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\r\n * // @log: 420\r\n * ```\r\n *\r\n * @param hex - The {@link ox#Hex.Hex} value to decode.\r\n * @param options - Options.\r\n * @returns The decoded number.\r\n */\r\nexport function toNumber(hex: Hex, options: toNumber.Options = {}): number {\r\n  const { signed, size } = options\r\n  if (!signed && !size) return Number(hex)\r\n  return Number(toBigInt(hex, options))\r\n}\r\n\r\nexport declare namespace toNumber {\r\n  type Options = toBigInt.Options\r\n\r\n  type ErrorType = toBigInt.ErrorType | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Decodes a {@link ox#Hex.Hex} value into a string.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.toString('0x48656c6c6f20576f726c6421')\r\n * // @log: 'Hello world!'\r\n *\r\n * Hex.toString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\r\n *  size: 32,\r\n * })\r\n * // @log: 'Hello world'\r\n * ```\r\n *\r\n * @param hex - The {@link ox#Hex.Hex} value to decode.\r\n * @param options - Options.\r\n * @returns The decoded string.\r\n */\r\nexport function toString(hex: Hex, options: toString.Options = {}): string {\r\n  const { size } = options\r\n\r\n  let bytes = Bytes.fromHex(hex)\r\n  if (size) {\r\n    internal_bytes.assertSize(bytes, size)\r\n    bytes = Bytes.trimRight(bytes)\r\n  }\r\n  return new TextDecoder().decode(bytes)\r\n}\r\n\r\nexport declare namespace toString {\r\n  type Options = {\r\n    /** Size (in bytes) of the hex value. */\r\n    size?: number | undefined\r\n  }\r\n\r\n  type ErrorType =\r\n    | internal_bytes.assertSize.ErrorType\r\n    | Bytes.fromHex.ErrorType\r\n    | Bytes.trimRight.ErrorType\r\n    | Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Checks if the given value is {@link ox#Hex.Hex}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes, Hex } from 'ox'\r\n *\r\n * Hex.validate('0xdeadbeef')\r\n * // @log: true\r\n *\r\n * Hex.validate(Bytes.from([1, 2, 3]))\r\n * // @log: false\r\n * ```\r\n *\r\n * @param value - The value to check.\r\n * @param options - Options.\r\n * @returns `true` if the value is a {@link ox#Hex.Hex}, `false` otherwise.\r\n */\r\nexport function validate(\r\n  value: unknown,\r\n  options: validate.Options = {},\r\n): value is Hex {\r\n  const { strict = false } = options\r\n  try {\r\n    assert(value, { strict })\r\n    return true\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nexport declare namespace validate {\r\n  type Options = {\r\n    /** Checks if the {@link ox#Hex.Hex} value contains invalid hexadecimal characters. @default false */\r\n    strict?: boolean | undefined\r\n  }\r\n\r\n  type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Thrown when the provided integer is out of range, and cannot be represented as a hex value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.fromNumber(420182738912731283712937129)\r\n * // @error: Hex.IntegerOutOfRangeError: Number \\`4.2018273891273126e+26\\` is not in safe unsigned integer range (`0` to `9007199254740991`)\r\n * ```\r\n */\r\nexport class IntegerOutOfRangeError extends Errors.BaseError {\r\n  override readonly name = 'Hex.IntegerOutOfRangeError'\r\n\r\n  constructor({\r\n    max,\r\n    min,\r\n    signed,\r\n    size,\r\n    value,\r\n  }: {\r\n    max?: string | undefined\r\n    min: string\r\n    signed?: boolean | undefined\r\n    size?: number | undefined\r\n    value: string\r\n  }) {\r\n    super(\r\n      `Number \\`${value}\\` is not in safe${\r\n        size ? ` ${size * 8}-bit` : ''\r\n      }${signed ? ' signed' : ' unsigned'} integer range ${max ? `(\\`${min}\\` to \\`${max}\\`)` : `(above \\`${min}\\`)`}`,\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when the provided hex value cannot be represented as a boolean.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.toBoolean('0xa')\r\n * // @error: Hex.InvalidHexBooleanError: Hex value `\"0xa\"` is not a valid boolean.\r\n * // @error: The hex value must be `\"0x0\"` (false) or `\"0x1\"` (true).\r\n * ```\r\n */\r\nexport class InvalidHexBooleanError extends Errors.BaseError {\r\n  override readonly name = 'Hex.InvalidHexBooleanError'\r\n\r\n  constructor(hex: Hex) {\r\n    super(`Hex value \\`\"${hex}\"\\` is not a valid boolean.`, {\r\n      metaMessages: [\r\n        'The hex value must be `\"0x0\"` (false) or `\"0x1\"` (true).',\r\n      ],\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when the provided value is not a valid hex type.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.assert(1)\r\n * // @error: Hex.InvalidHexTypeError: Value `1` of type `number` is an invalid hex type.\r\n * ```\r\n */\r\nexport class InvalidHexTypeError extends Errors.BaseError {\r\n  override readonly name = 'Hex.InvalidHexTypeError'\r\n\r\n  constructor(value: unknown) {\r\n    super(\r\n      `Value \\`${typeof value === 'object' ? Json.stringify(value) : value}\\` of type \\`${typeof value}\\` is an invalid hex type.`,\r\n      {\r\n        metaMessages: ['Hex types must be represented as `\"0x${string}\"`.'],\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when the provided hex value is invalid.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.assert('0x0123456789abcdefg')\r\n * // @error: Hex.InvalidHexValueError: Value `0x0123456789abcdefg` is an invalid hex value.\r\n * // @error: Hex values must start with `\"0x\"` and contain only hexadecimal characters (0-9, a-f, A-F).\r\n * ```\r\n */\r\nexport class InvalidHexValueError extends Errors.BaseError {\r\n  override readonly name = 'Hex.InvalidHexValueError'\r\n\r\n  constructor(value: unknown) {\r\n    super(`Value \\`${value}\\` is an invalid hex value.`, {\r\n      metaMessages: [\r\n        'Hex values must start with `\"0x\"` and contain only hexadecimal characters (0-9, a-f, A-F).',\r\n      ],\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when the provided hex value is an odd length.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Bytes } from 'ox'\r\n *\r\n * Bytes.fromHex('0xabcde')\r\n * // @error: Hex.InvalidLengthError: Hex value `\"0xabcde\"` is an odd length (5 nibbles).\r\n * ```\r\n */\r\nexport class InvalidLengthError extends Errors.BaseError {\r\n  override readonly name = 'Hex.InvalidLengthError'\r\n\r\n  constructor(value: Hex) {\r\n    super(\r\n      `Hex value \\`\"${value}\"\\` is an odd length (${value.length - 2} nibbles).`,\r\n      {\r\n        metaMessages: ['It must be an even length.'],\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when the size of the value exceeds the expected max size.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.fromString('Hello World!', { size: 8 })\r\n * // @error: Hex.SizeOverflowError: Size cannot exceed `8` bytes. Given size: `12` bytes.\r\n * ```\r\n */\r\nexport class SizeOverflowError extends Errors.BaseError {\r\n  override readonly name = 'Hex.SizeOverflowError'\r\n\r\n  constructor({ givenSize, maxSize }: { givenSize: number; maxSize: number }) {\r\n    super(\r\n      `Size cannot exceed \\`${maxSize}\\` bytes. Given size: \\`${givenSize}\\` bytes.`,\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when the slice offset exceeds the bounds of the value.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.slice('0x0123456789', 6)\r\n * // @error: Hex.SliceOffsetOutOfBoundsError: Slice starting at offset `6` is out-of-bounds (size: `5`).\r\n * ```\r\n */\r\nexport class SliceOffsetOutOfBoundsError extends Errors.BaseError {\r\n  override readonly name = 'Hex.SliceOffsetOutOfBoundsError'\r\n\r\n  constructor({\r\n    offset,\r\n    position,\r\n    size,\r\n  }: { offset: number; position: 'start' | 'end'; size: number }) {\r\n    super(\r\n      `Slice ${\r\n        position === 'start' ? 'starting' : 'ending'\r\n      } at offset \\`${offset}\\` is out-of-bounds (size: \\`${size}\\`).`,\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Thrown when the size of the value exceeds the pad size.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Hex } from 'ox'\r\n *\r\n * Hex.padLeft('0x1a4e12a45a21323123aaa87a897a897a898a6567a578a867a98778a667a85a875a87a6a787a65a675a6a9', 32)\r\n * // @error: Hex.SizeExceedsPaddingSizeError: Hex size (`43`) exceeds padding size (`32`).\r\n * ```\r\n */\r\nexport class SizeExceedsPaddingSizeError extends Errors.BaseError {\r\n  override readonly name = 'Hex.SizeExceedsPaddingSizeError'\r\n\r\n  constructor({\r\n    size,\r\n    targetSize,\r\n    type,\r\n  }: {\r\n    size: number\r\n    targetSize: number\r\n    type: 'Hex' | 'Bytes'\r\n  }) {\r\n    super(\r\n      `${type.charAt(0).toUpperCase()}${type\r\n        .slice(1)\r\n        .toLowerCase()} size (\\`${size}\\`) exceeds padding size (\\`${targetSize}\\`).`,\r\n    )\r\n  }\r\n}\r\n", "import type * as Errors from './Errors.js'\r\nimport * as Hex from './Hex.js'\r\n\r\n/** A Withdrawal as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/withdrawal.yaml). */\r\nexport type Withdrawal<bigintType = bigint, numberType = number> = {\r\n  address: Hex.Hex\r\n  amount: bigintType\r\n  index: numberType\r\n  validatorIndex: numberType\r\n}\r\n\r\n/** An RPC Withdrawal as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/withdrawal.yaml). */\r\nexport type Rpc = Withdrawal<Hex.Hex, Hex.Hex>\r\n\r\n/**\r\n * Converts a {@link ox#Withdrawal.Rpc} to an {@link ox#Withdrawal.Withdrawal}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Withdrawal } from 'ox'\r\n *\r\n * const withdrawal = Withdrawal.fromRpc({\r\n *   address: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\r\n *   amount: '0x620323',\r\n *   index: '0x0',\r\n *   validatorIndex: '0x1',\r\n * })\r\n * // @log: {\r\n * // @log:   address: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\r\n * // @log:   amount: 6423331n,\r\n * // @log:   index: 0,\r\n * // @log:   validatorIndex: 1\r\n * // @log: }\r\n * ```\r\n *\r\n * @param withdrawal - The RPC withdrawal to convert.\r\n * @returns An instantiated {@link ox#Withdrawal.Withdrawal}.\r\n */\r\nexport function fromRpc(withdrawal: Rpc): Withdrawal {\r\n  return {\r\n    ...withdrawal,\r\n    amount: BigInt(withdrawal.amount),\r\n    index: Number(withdrawal.index),\r\n    validatorIndex: Number(withdrawal.validatorIndex),\r\n  }\r\n}\r\n\r\nexport declare namespace fromRpc {\r\n  export type ErrorType = Errors.GlobalErrorType\r\n}\r\n\r\n/**\r\n * Converts a {@link ox#Withdrawal.Withdrawal} to an {@link ox#Withdrawal.Rpc}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { Withdrawal } from 'ox'\r\n *\r\n * const withdrawal = Withdrawal.toRpc({\r\n *   address: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\r\n *   amount: 6423331n,\r\n *   index: 0,\r\n *   validatorIndex: 1,\r\n * })\r\n * // @log: {\r\n * // @log:   address: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\r\n * // @log:   amount: '0x620323',\r\n * // @log:   index: '0x0',\r\n * // @log:   validatorIndex: '0x1',\r\n * // @log: }\r\n * ```\r\n *\r\n * @param withdrawal - The Withdrawal to convert.\r\n * @returns An RPC Withdrawal.\r\n */\r\nexport function toRpc(withdrawal: Withdrawal): Rpc {\r\n  return {\r\n    address: withdrawal.address,\r\n    amount: Hex.fromNumber(withdrawal.amount),\r\n    index: Hex.fromNumber(withdrawal.index),\r\n    validatorIndex: Hex.fromNumber(withdrawal.validatorIndex),\r\n  }\r\n}\r\n\r\nexport declare namespace toRpc {\r\n  export type ErrorType = Errors.GlobalErrorType\r\n}\r\n", "import type * as Address from './Address.js'\r\nimport * as Hex from './Hex.js'\r\nimport * as Withdrawal from './Withdrawal.js'\r\n\r\n/**\r\n * Block overrides.\r\n */\r\nexport type BlockOverrides<bigintType = bigint, numberType = number> = {\r\n  /** Base fee per gas. */\r\n  baseFeePerGas?: bigintType | undefined\r\n  /** Blob base fee. */\r\n  blobBaseFee?: bigintType | undefined\r\n  /** Fee recipient (also known as coinbase). */\r\n  feeRecipient?: Address.Address | undefined\r\n  /** Gas limit. */\r\n  gasLimit?: bigintType | undefined\r\n  /** Block number. */\r\n  number?: bigintType | undefined\r\n  /** The previous value of randomness beacon. */\r\n  prevRandao?: bigintType | undefined\r\n  /** Block timestamp. */\r\n  time?: bigintType | undefined\r\n  /** Withdrawals made by validators. */\r\n  withdrawals?: Withdrawal.Withdrawal<bigintType, numberType>[] | undefined\r\n}\r\n\r\n/**\r\n * RPC block overrides.\r\n */\r\nexport type Rpc = BlockOverrides<Hex.Hex, Hex.Hex>\r\n\r\n/**\r\n * Converts an {@link ox#BlockOverrides.Rpc} to an {@link ox#BlockOverrides.BlockOverrides}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { BlockOverrides } from 'ox'\r\n *\r\n * const blockOverrides = BlockOverrides.fromRpc({\r\n *   baseFeePerGas: '0x1',\r\n *   blobBaseFee: '0x2',\r\n *   feeRecipient: '0x0000000000000000000000000000000000000000',\r\n *   gasLimit: '0x4',\r\n *   number: '0x5',\r\n *   prevRandao: '0x6',\r\n *   time: '0x1234567890',\r\n *   withdrawals: [\r\n *     {\r\n *       address: '0x0000000000000000000000000000000000000000',\r\n *       amount: '0x1',\r\n *       index: '0x0',\r\n *       validatorIndex: '0x1',\r\n *     },\r\n *   ],\r\n * })\r\n * ```\r\n *\r\n * @param rpcBlockOverrides - The RPC block overrides to convert.\r\n * @returns An instantiated {@link ox#BlockOverrides.BlockOverrides}.\r\n */\r\nexport function fromRpc(rpcBlockOverrides: Rpc): BlockOverrides {\r\n  return {\r\n    ...(rpcBlockOverrides.baseFeePerGas && {\r\n      baseFeePerGas: BigInt(rpcBlockOverrides.baseFeePerGas),\r\n    }),\r\n    ...(rpcBlockOverrides.blobBaseFee && {\r\n      blobBaseFee: BigInt(rpcBlockOverrides.blobBaseFee),\r\n    }),\r\n    ...(rpcBlockOverrides.feeRecipient && {\r\n      feeRecipient: rpcBlockOverrides.feeRecipient,\r\n    }),\r\n    ...(rpcBlockOverrides.gasLimit && {\r\n      gasLimit: BigInt(rpcBlockOverrides.gasLimit),\r\n    }),\r\n    ...(rpcBlockOverrides.number && {\r\n      number: BigInt(rpcBlockOverrides.number),\r\n    }),\r\n    ...(rpcBlockOverrides.prevRandao && {\r\n      prevRandao: BigInt(rpcBlockOverrides.prevRandao),\r\n    }),\r\n    ...(rpcBlockOverrides.time && {\r\n      time: BigInt(rpcBlockOverrides.time),\r\n    }),\r\n    ...(rpcBlockOverrides.withdrawals && {\r\n      withdrawals: rpcBlockOverrides.withdrawals.map(Withdrawal.fromRpc),\r\n    }),\r\n  }\r\n}\r\n\r\n/**\r\n * Converts an {@link ox#BlockOverrides.BlockOverrides} to an {@link ox#BlockOverrides.Rpc}.\r\n *\r\n * @example\r\n * ```ts twoslash\r\n * import { BlockOverrides } from 'ox'\r\n *\r\n * const blockOverrides = BlockOverrides.toRpc({\r\n *   baseFeePerGas: 1n,\r\n *   blobBaseFee: 2n,\r\n *   feeRecipient: '0x0000000000000000000000000000000000000000',\r\n *   gasLimit: 4n,\r\n *   number: 5n,\r\n *   prevRandao: 6n,\r\n *   time: 78187493520n,\r\n *   withdrawals: [\r\n *     {\r\n *       address: '0x0000000000000000000000000000000000000000',\r\n *       amount: 1n,\r\n *       index: 0,\r\n *       validatorIndex: 1,\r\n *     },\r\n *   ],\r\n * })\r\n * ```\r\n *\r\n * @param blockOverrides - The block overrides to convert.\r\n * @returns An instantiated {@link ox#BlockOverrides.Rpc}.\r\n */\r\nexport function toRpc(blockOverrides: BlockOverrides): Rpc {\r\n  return {\r\n    ...(typeof blockOverrides.baseFeePerGas === 'bigint' && {\r\n      baseFeePerGas: Hex.fromNumber(blockOverrides.baseFeePerGas),\r\n    }),\r\n    ...(typeof blockOverrides.blobBaseFee === 'bigint' && {\r\n      blobBaseFee: Hex.fromNumber(blockOverrides.blobBaseFee),\r\n    }),\r\n    ...(typeof blockOverrides.feeRecipient === 'string' && {\r\n      feeRecipient: blockOverrides.feeRecipient,\r\n    }),\r\n    ...(typeof blockOverrides.gasLimit === 'bigint' && {\r\n      gasLimit: Hex.fromNumber(blockOverrides.gasLimit),\r\n    }),\r\n    ...(typeof blockOverrides.number === 'bigint' && {\r\n      number: Hex.fromNumber(blockOverrides.number),\r\n    }),\r\n    ...(typeof blockOverrides.prevRandao === 'bigint' && {\r\n      prevRandao: Hex.fromNumber(blockOverrides.prevRandao),\r\n    }),\r\n    ...(typeof blockOverrides.time === 'bigint' && {\r\n      time: Hex.fromNumber(blockOverrides.time),\r\n    }),\r\n    ...(blockOverrides.withdrawals && {\r\n      withdrawals: blockOverrides.withdrawals.map(Withdrawal.toRpc),\r\n    }),\r\n  }\r\n}\r\n", "/* [Multicall3](https://github.com/mds1/multicall) */\r\nexport const multicall3Abi = [\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            name: 'target',\r\n            type: 'address',\r\n          },\r\n          {\r\n            name: 'allowFailure',\r\n            type: 'bool',\r\n          },\r\n          {\r\n            name: 'callData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'aggregate3',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            name: 'success',\r\n            type: 'bool',\r\n          },\r\n          {\r\n            name: 'returnData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        name: 'returnData',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n] as const\r\n\r\nexport const batchGatewayAbi = [\r\n  {\r\n    name: 'query',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        type: 'tuple[]',\r\n        name: 'queries',\r\n        components: [\r\n          {\r\n            type: 'address',\r\n            name: 'sender',\r\n          },\r\n          {\r\n            type: 'string[]',\r\n            name: 'urls',\r\n          },\r\n          {\r\n            type: 'bytes',\r\n            name: 'data',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool[]',\r\n        name: 'failures',\r\n      },\r\n      {\r\n        type: 'bytes[]',\r\n        name: 'responses',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'HttpError',\r\n    type: 'error',\r\n    inputs: [\r\n      {\r\n        type: 'uint16',\r\n        name: 'status',\r\n      },\r\n      {\r\n        type: 'string',\r\n        name: 'message',\r\n      },\r\n    ],\r\n  },\r\n] as const\r\n\r\nconst universalResolverErrors = [\r\n  {\r\n    inputs: [],\r\n    name: 'ResolverNotFound',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'ResolverWildcardNotSupported',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'ResolverNotContract',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'returnData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'ResolverError',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            name: 'status',\r\n            type: 'uint16',\r\n          },\r\n          {\r\n            name: 'message',\r\n            type: 'string',\r\n          },\r\n        ],\r\n        name: 'errors',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'HttpError',\r\n    type: 'error',\r\n  },\r\n] as const\r\n\r\nexport const universalResolverResolveAbi = [\r\n  ...universalResolverErrors,\r\n  {\r\n    name: 'resolve',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'name', type: 'bytes' },\r\n      { name: 'data', type: 'bytes' },\r\n    ],\r\n    outputs: [\r\n      { name: '', type: 'bytes' },\r\n      { name: 'address', type: 'address' },\r\n    ],\r\n  },\r\n  {\r\n    name: 'resolve',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'name', type: 'bytes' },\r\n      { name: 'data', type: 'bytes' },\r\n      { name: 'gateways', type: 'string[]' },\r\n    ],\r\n    outputs: [\r\n      { name: '', type: 'bytes' },\r\n      { name: 'address', type: 'address' },\r\n    ],\r\n  },\r\n] as const\r\n\r\nexport const universalResolverReverseAbi = [\r\n  ...universalResolverErrors,\r\n  {\r\n    name: 'reverse',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [{ type: 'bytes', name: 'reverseName' }],\r\n    outputs: [\r\n      { type: 'string', name: 'resolvedName' },\r\n      { type: 'address', name: 'resolvedAddress' },\r\n      { type: 'address', name: 'reverseResolver' },\r\n      { type: 'address', name: 'resolver' },\r\n    ],\r\n  },\r\n  {\r\n    name: 'reverse',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { type: 'bytes', name: 'reverseName' },\r\n      { type: 'string[]', name: 'gateways' },\r\n    ],\r\n    outputs: [\r\n      { type: 'string', name: 'resolvedName' },\r\n      { type: 'address', name: 'resolvedAddress' },\r\n      { type: 'address', name: 'reverseResolver' },\r\n      { type: 'address', name: 'resolver' },\r\n    ],\r\n  },\r\n] as const\r\n\r\nexport const textResolverAbi = [\r\n  {\r\n    name: 'text',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'name', type: 'bytes32' },\r\n      { name: 'key', type: 'string' },\r\n    ],\r\n    outputs: [{ name: '', type: 'string' }],\r\n  },\r\n] as const\r\n\r\nexport const addressResolverAbi = [\r\n  {\r\n    name: 'addr',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [{ name: 'name', type: 'bytes32' }],\r\n    outputs: [{ name: '', type: 'address' }],\r\n  },\r\n  {\r\n    name: 'addr',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'name', type: 'bytes32' },\r\n      { name: 'coinType', type: 'uint256' },\r\n    ],\r\n    outputs: [{ name: '', type: 'bytes' }],\r\n  },\r\n] as const\r\n\r\n// ERC-1271\r\n// isValidSignature(bytes32 hash, bytes signature) → bytes4 magicValue\r\n/** @internal */\r\nexport const smartAccountAbi = [\r\n  {\r\n    name: 'isValidSignature',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'hash', type: 'bytes32' },\r\n      { name: 'signature', type: 'bytes' },\r\n    ],\r\n    outputs: [{ name: '', type: 'bytes4' }],\r\n  },\r\n] as const\r\n\r\n// ERC-6492 - universal deployless signature validator contract\r\n// constructor(address _signer, bytes32 _hash, bytes _signature) → bytes4 returnValue\r\n// returnValue is either 0x1 (valid) or 0x0 (invalid)\r\nexport const universalSignatureValidatorAbi = [\r\n  {\r\n    inputs: [\r\n      {\r\n        name: '_signer',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_hash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        name: '_signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: '_signer',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_hash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        name: '_signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n    name: 'isValidSig',\r\n  },\r\n] as const\r\n\r\n/** [ERC-20 Token Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-20) */\r\nexport const erc20Abi = [\r\n  {\r\n    type: 'event',\r\n    name: 'Approval',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'event',\r\n    name: 'Transfer',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'allowance',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'approve',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'balanceOf',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'decimals',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'name',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'symbol',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'totalSupply',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transfer',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transferFrom',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n] as const\r\n\r\n/**\r\n * [bytes32-flavored ERC-20](https://docs.makerdao.com/smart-contract-modules/mkr-module#4.-gotchas-potential-source-of-user-error)\r\n * for tokens (ie. Maker) that use bytes32 instead of string.\r\n */\r\nexport const erc20Abi_bytes32 = [\r\n  {\r\n    type: 'event',\r\n    name: 'Approval',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'event',\r\n    name: 'Transfer',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'allowance',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'approve',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'balanceOf',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'decimals',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'name',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'symbol',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'totalSupply',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transfer',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transferFrom',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n] as const\r\n\r\n/** [ERC-1155 Multi Token Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-1155) */\r\nexport const erc1155Abi = [\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'balance',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'needed',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'ERC1155InsufficientBalance',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'approver',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'ERC1155InvalidApprover',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'idsLength',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'valuesLength',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'ERC1155InvalidArrayLength',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'ERC1155InvalidOperator',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'ERC1155InvalidReceiver',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'ERC1155InvalidSender',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'ERC1155MissingApprovalForAll',\r\n    type: 'error',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bool',\r\n        name: 'approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'ApprovalForAll',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256[]',\r\n        name: 'ids',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256[]',\r\n        name: 'values',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'TransferBatch',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'id',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'TransferSingle',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'string',\r\n        name: 'value',\r\n        type: 'string',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'uint256',\r\n        name: 'id',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'URI',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'id',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address[]',\r\n        name: 'accounts',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'ids',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'balanceOfBatch',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: '',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'isApprovedForAll',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'ids',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'values',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'safeBatchTransferFrom',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'id',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'safeTransferFrom',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'setApprovalForAll',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'interfaceId',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    name: 'supportsInterface',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'uri',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n] as const\r\n\r\n/** [ERC-721 Non-Fungible Token Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-721) */\r\nexport const erc721Abi = [\r\n  {\r\n    type: 'event',\r\n    name: 'Approval',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'event',\r\n    name: 'ApprovalForAll',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'event',\r\n    name: 'Transfer',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'approve',\r\n    stateMutability: 'payable',\r\n    inputs: [\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'balanceOf',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'getApproved',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'address',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'isApprovedForAll',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'name',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'ownerOf',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'safeTransferFrom',\r\n    stateMutability: 'payable',\r\n    inputs: [\r\n      {\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'safeTransferFrom',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'id',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'setApprovalForAll',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'symbol',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'tokenByIndex',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'index',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'tokenByIndex',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'index',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'tokenURI',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'totalSupply',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transferFrom',\r\n    stateMutability: 'payable',\r\n    inputs: [\r\n      {\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n] as const\r\n\r\n/** [ERC-4626 Tokenized Vaults Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-4626) */\r\nexport const erc4626Abi = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Deposit',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Withdraw',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowance',\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'asset',\r\n    outputs: [\r\n      {\r\n        name: 'assetTokenAddress',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'convertToAssets',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'convertToShares',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'deposit',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'caller',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'maxDeposit',\r\n    outputs: [\r\n      {\r\n        name: 'maxAssets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'caller',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'maxMint',\r\n    outputs: [\r\n      {\r\n        name: 'maxShares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'maxRedeem',\r\n    outputs: [\r\n      {\r\n        name: 'maxShares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'maxWithdraw',\r\n    outputs: [\r\n      {\r\n        name: 'maxAssets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'mint',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'previewDeposit',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'previewMint',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'previewRedeem',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'previewWithdraw',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'redeem',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalAssets',\r\n    outputs: [\r\n      {\r\n        name: 'totalManagedAssets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalSupply',\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transfer',\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'withdraw',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n] as const\r\n", "export const aggregate3Signature = '0x82ad56cb'\r\n", "export const deploylessCallViaBytecodeBytecode =\r\n  '0x608060405234801561001057600080fd5b5060405161018e38038061018e83398101604081905261002f91610124565b6000808351602085016000f59050803b61004857600080fd5b6000808351602085016000855af16040513d6000823e81610067573d81fd5b3d81f35b634e487b7160e01b600052604160045260246000fd5b600082601f83011261009257600080fd5b81516001600160401b038111156100ab576100ab61006b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100d9576100d961006b565b6040528181528382016020018510156100f157600080fd5b60005b82811015610110576020818601810151838301820152016100f4565b506000918101602001919091529392505050565b6000806040838503121561013757600080fd5b82516001600160401b0381111561014d57600080fd5b61015985828601610081565b602085015190935090506001600160401b0381111561017757600080fd5b61018385828601610081565b915050925092905056fe'\r\n\r\nexport const deploylessCallViaFactoryBytecode =\r\n  '0x608060405234801561001057600080fd5b506040516102c03803806102c083398101604081905261002f916101e6565b836001600160a01b03163b6000036100e457600080836001600160a01b03168360405161005c9190610270565b6000604051808303816000865af19150503d8060008114610099576040519150601f19603f3d011682016040523d82523d6000602084013e61009e565b606091505b50915091508115806100b857506001600160a01b0386163b155b156100e1578060405163101bb98d60e01b81526004016100d8919061028c565b60405180910390fd5b50505b6000808451602086016000885af16040513d6000823e81610103573d81fd5b3d81f35b80516001600160a01b038116811461011e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561015457818101518382015260200161013c565b50506000910152565b600082601f83011261016e57600080fd5b81516001600160401b0381111561018757610187610123565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101b5576101b5610123565b6040528181528382016020018510156101cd57600080fd5b6101de826020830160208701610139565b949350505050565b600080600080608085870312156101fc57600080fd5b61020585610107565b60208601519094506001600160401b0381111561022157600080fd5b61022d8782880161015d565b93505061023c60408601610107565b60608601519092506001600160401b0381111561025857600080fd5b6102648782880161015d565b91505092959194509250565b60008251610282818460208701610139565b9190910192915050565b60208152600082518060208401526102ab816040850160208701610139565b601f01601f1916919091016040019291505056fe'\r\n\r\nexport const universalSignatureValidatorByteCode =\r\n  '0x608060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f9161051e565b600061003c848484610048565b9050806000526001601ff35b60007f64926492649264926492649264926492649264926492649264926492649264926100748361040c565b036101e7576000606080848060200190518101906100929190610577565b60405192955090935091506000906001600160a01b038516906100b69085906105dd565b6000604051808303816000865af19150503d80600081146100f3576040519150601f19603f3d011682016040523d82523d6000602084013e6100f8565b606091505b50509050876001600160a01b03163b60000361016057806101605760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90610190908b9087906004016105f9565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610633565b6001600160e01b03191614945050505050610405565b6001600160a01b0384163b1561027a57604051630b135d3f60e11b808252906001600160a01b03861690631626ba7e9061022790879087906004016105f9565b602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610633565b6001600160e01b031916149050610405565b81516041146102df5760405162461bcd60e51b815260206004820152603a602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e6774680000000000006064820152608401610157565b6102e7610425565b5060208201516040808401518451859392600091859190811061030c5761030c61065d565b016020015160f81c9050601b811480159061032b57508060ff16601c14155b1561038c5760405162461bcd60e51b815260206004820152603b602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c756500000000006064820152608401610157565b60408051600081526020810180835289905260ff83169181019190915260608101849052608081018390526001600160a01b0389169060019060a0016020604051602081039080840390855afa1580156103ea573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149450505050505b9392505050565b600060208251101561041d57600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461045857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561048c578181015183820152602001610474565b50506000910152565b600082601f8301126104a657600080fd5b81516001600160401b038111156104bf576104bf61045b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156104ed576104ed61045b565b60405281815283820160200185101561050557600080fd5b610516826020830160208701610471565b949350505050565b60008060006060848603121561053357600080fd5b835161053e81610443565b6020850151604086015191945092506001600160401b0381111561056157600080fd5b61056d86828701610495565b9150509250925092565b60008060006060848603121561058c57600080fd5b835161059781610443565b60208501519093506001600160401b038111156105b357600080fd5b6105bf86828701610495565b604086015190935090506001600160401b0381111561056157600080fd5b600082516105ef818460208701610471565b9190910192915050565b828152604060208201526000825180604084015261061e816060850160208701610471565b601f01601f1916919091016060019392505050565b60006020828403121561064557600080fd5b81516001600160e01b03198116811461040557600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572'\r\n", "import type { Abi, AbiStateMutability, ExtractAbiFunctions } from 'abitype'\r\n\r\nimport {\r\n  AbiFunctionNotFoundError,\r\n  type AbiFunctionNotFoundErrorType,\r\n  AbiFunctionOutputsNotFoundError,\r\n  type AbiFunctionOutputsNotFoundErrorType,\r\n} from '../../errors/abi.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n  ContractFunctionReturnType,\r\n  Widen,\r\n} from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\r\nimport {\r\n  type DecodeAbiParametersErrorType,\r\n  decodeAbiParameters,\r\n} from './decodeAbiParameters.js'\r\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\r\n\r\nconst docsPath = '/docs/contract/decodeFunctionResult'\r\n\r\nexport type DecodeFunctionResultParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | undefined = ContractFunctionName<abi>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  > = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n  ///\r\n  hasFunctions = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [ExtractAbiFunctions<abi>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allArgs = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n  allFunctionNames = ContractFunctionName<abi>,\r\n> = {\r\n  abi: abi\r\n  data: Hex\r\n} & UnionEvaluate<\r\n  IsNarrowable<abi, Abi> extends true\r\n    ? abi['length'] extends 1\r\n      ? { functionName?: functionName | allFunctionNames | undefined }\r\n      : { functionName: functionName | allFunctionNames }\r\n    : { functionName?: functionName | allFunctionNames | undefined }\r\n> &\r\n  UnionEvaluate<\r\n    readonly [] extends allArgs\r\n      ? {\r\n          args?:\r\n            | allArgs // show all options\r\n            // infer value, widen inferred value of `args` conditionally to match `allArgs`\r\n            | (abi extends Abi\r\n                ? args extends allArgs\r\n                  ? Widen<args>\r\n                  : never\r\n                : never)\r\n            | undefined\r\n        }\r\n      : {\r\n          args?:\r\n            | allArgs // show all options\r\n            | (Widen<args> & (args extends allArgs ? unknown : never)) // infer value, widen inferred value of `args` match `allArgs` (e.g. avoid union `args: readonly [123n] | readonly [bigint]`)\r\n            | undefined\r\n        }\r\n  > &\r\n  (hasFunctions extends true ? unknown : never)\r\n\r\nexport type DecodeFunctionResultReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | undefined = ContractFunctionName<abi>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  > = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n> = ContractFunctionReturnType<\r\n  abi,\r\n  AbiStateMutability,\r\n  functionName extends ContractFunctionName<abi>\r\n    ? functionName\r\n    : ContractFunctionName<abi>,\r\n  args\r\n>\r\n\r\nexport type DecodeFunctionResultErrorType =\r\n  | AbiFunctionNotFoundErrorType\r\n  | AbiFunctionOutputsNotFoundErrorType\r\n  | DecodeAbiParametersErrorType\r\n  | GetAbiItemErrorType\r\n  | ErrorType\r\n\r\nexport function decodeFunctionResult<\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\r\n  const args extends ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  > = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n>(\r\n  parameters: DecodeFunctionResultParameters<abi, functionName, args>,\r\n): DecodeFunctionResultReturnType<abi, functionName, args> {\r\n  const { abi, args, functionName, data } =\r\n    parameters as DecodeFunctionResultParameters\r\n\r\n  let abiItem = abi[0]\r\n  if (functionName) {\r\n    const item = getAbiItem({ abi, args, name: functionName })\r\n    if (!item) throw new AbiFunctionNotFoundError(functionName, { docsPath })\r\n    abiItem = item\r\n  }\r\n\r\n  if (abiItem.type !== 'function')\r\n    throw new AbiFunctionNotFoundError(undefined, { docsPath })\r\n  if (!abiItem.outputs)\r\n    throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath })\r\n\r\n  const values = decodeAbiParameters(abiItem.outputs, data)\r\n  if (values && values.length > 1)\r\n    return values as DecodeFunctionResultReturnType<abi, functionName, args>\r\n  if (values && values.length === 1)\r\n    return values[0] as DecodeFunctionResultReturnType<abi, functionName, args>\r\n  return undefined as DecodeFunctionResultReturnType<abi, functionName, args>\r\n}\r\n", "import type { Abi } from 'abitype'\r\n\r\nimport {\r\n  AbiConstructorNotFoundError,\r\n  type AbiConstructorNotFoundErrorType,\r\n  AbiConstructorParamsNotFoundError,\r\n} from '../../errors/abi.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ContractConstructorArgs } from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { UnionEvaluate } from '../../types/utils.js'\r\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\r\nimport {\r\n  type EncodeAbiParametersErrorType,\r\n  encodeAbiParameters,\r\n} from './encodeAbiParameters.js'\r\n\r\nconst docsPath = '/docs/contract/encodeDeployData'\r\n\r\nexport type EncodeDeployDataParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  ///\r\n  hasConstructor = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [Extract<abi[number], { type: 'constructor' }>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allArgs = ContractConstructorArgs<abi>,\r\n> = {\r\n  abi: abi\r\n  bytecode: Hex\r\n} & UnionEvaluate<\r\n  hasConstructor extends false\r\n    ? { args?: undefined }\r\n    : readonly [] extends allArgs\r\n      ? { args?: allArgs | undefined }\r\n      : { args: allArgs }\r\n>\r\n\r\nexport type EncodeDeployDataReturnType = Hex\r\n\r\nexport type EncodeDeployDataErrorType =\r\n  | AbiConstructorNotFoundErrorType\r\n  | ConcatHexErrorType\r\n  | EncodeAbiParametersErrorType\r\n  | ErrorType\r\n\r\nexport function encodeDeployData<const abi extends Abi | readonly unknown[]>(\r\n  parameters: EncodeDeployDataParameters<abi>,\r\n): EncodeDeployDataReturnType {\r\n  const { abi, args, bytecode } = parameters as EncodeDeployDataParameters\r\n  if (!args || args.length === 0) return bytecode\r\n\r\n  const description = abi.find((x) => 'type' in x && x.type === 'constructor')\r\n  if (!description) throw new AbiConstructorNotFoundError({ docsPath })\r\n  if (!('inputs' in description))\r\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\r\n  if (!description.inputs || description.inputs.length === 0)\r\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\r\n\r\n  const data = encodeAbiParameters(description.inputs, args)\r\n  return concatHex([bytecode, data!])\r\n}\r\n", "import type {\r\n  Abi,\r\n  AbiStateMutability,\r\n  ExtractAbiFunction,\r\n  ExtractAbiFunctions,\r\n} from 'abitype'\r\n\r\nimport {\r\n  AbiFunctionNotFoundError,\r\n  type AbiFunctionNotFoundErrorType,\r\n} from '../../errors/abi.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n} from '../../types/contract.js'\r\nimport type { ConcatHexErrorType } from '../data/concat.js'\r\nimport {\r\n  type ToFunctionSelectorErrorType,\r\n  toFunctionSelector,\r\n} from '../hash/toFunctionSelector.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\r\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\r\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\r\n\r\nconst docsPath = '/docs/contract/encodeFunctionData'\r\n\r\nexport type PrepareEncodeFunctionDataParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | undefined = ContractFunctionName<abi>,\r\n  ///\r\n  hasFunctions = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [ExtractAbiFunctions<abi>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allArgs = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n  allFunctionNames = ContractFunctionName<abi>,\r\n> = {\r\n  abi: abi\r\n} & UnionEvaluate<\r\n  IsNarrowable<abi, Abi> extends true\r\n    ? abi['length'] extends 1\r\n      ? { functionName?: functionName | allFunctionNames | Hex | undefined }\r\n      : { functionName: functionName | allFunctionNames | Hex }\r\n    : { functionName?: functionName | allFunctionNames | Hex | undefined }\r\n> &\r\n  UnionEvaluate<{ args?: allArgs | undefined }> &\r\n  (hasFunctions extends true ? unknown : never)\r\n\r\nexport type PrepareEncodeFunctionDataReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | undefined = ContractFunctionName<abi>,\r\n> = {\r\n  abi: abi extends Abi\r\n    ? functionName extends ContractFunctionName<abi>\r\n      ? [ExtractAbiFunction<abi, functionName>]\r\n      : abi\r\n    : Abi\r\n  functionName: Hex\r\n}\r\n\r\nexport type PrepareEncodeFunctionDataErrorType =\r\n  | AbiFunctionNotFoundErrorType\r\n  | ConcatHexErrorType\r\n  | FormatAbiItemErrorType\r\n  | GetAbiItemErrorType\r\n  | ToFunctionSelectorErrorType\r\n  | ErrorType\r\n\r\nexport function prepareEncodeFunctionData<\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\r\n>(\r\n  parameters: PrepareEncodeFunctionDataParameters<abi, functionName>,\r\n): PrepareEncodeFunctionDataReturnType<abi, functionName> {\r\n  const { abi, args, functionName } =\r\n    parameters as PrepareEncodeFunctionDataParameters\r\n\r\n  let abiItem = abi[0]\r\n  if (functionName) {\r\n    const item = getAbiItem({\r\n      abi,\r\n      args,\r\n      name: functionName,\r\n    })\r\n    if (!item) throw new AbiFunctionNotFoundError(functionName, { docsPath })\r\n    abiItem = item\r\n  }\r\n\r\n  if (abiItem.type !== 'function')\r\n    throw new AbiFunctionNotFoundError(undefined, { docsPath })\r\n\r\n  return {\r\n    abi: [abiItem],\r\n    functionName: toFunctionSelector(formatAbiItem(abiItem)),\r\n  } as unknown as PrepareEncodeFunctionDataReturnType<abi, functionName>\r\n}\r\n", "import type { Abi, AbiStateMutability, ExtractAbiFunctions } from 'abitype'\r\n\r\nimport type { AbiFunctionNotFoundErrorType } from '../../errors/abi.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n} from '../../types/contract.js'\r\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\r\nimport type { ToFunctionSelectorErrorType } from '../hash/toFunctionSelector.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\r\nimport {\r\n  type EncodeAbiParametersErrorType,\r\n  encodeAbiParameters,\r\n} from './encodeAbiParameters.js'\r\nimport type { FormatAbiItemErrorType } from './formatAbiItem.js'\r\nimport type { GetAbiItemErrorType } from './getAbiItem.js'\r\nimport { prepareEncodeFunctionData } from './prepareEncodeFunctionData.js'\r\n\r\nexport type EncodeFunctionDataParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | Hex\r\n    | undefined = ContractFunctionName<abi>,\r\n  ///\r\n  hasFunctions = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [ExtractAbiFunctions<abi>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allArgs = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n  allFunctionNames = ContractFunctionName<abi>,\r\n> = {\r\n  abi: abi\r\n} & UnionEvaluate<\r\n  IsNarrowable<abi, Abi> extends true\r\n    ? abi['length'] extends 1\r\n      ? { functionName?: functionName | allFunctionNames | Hex | undefined }\r\n      : { functionName: functionName | allFunctionNames | Hex }\r\n    : { functionName?: functionName | allFunctionNames | Hex | undefined }\r\n> &\r\n  UnionEvaluate<\r\n    readonly [] extends allArgs\r\n      ? { args?: allArgs | undefined }\r\n      : { args: allArgs }\r\n  > &\r\n  (hasFunctions extends true ? unknown : never)\r\n\r\nexport type EncodeFunctionDataReturnType = Hex\r\n\r\nexport type EncodeFunctionDataErrorType =\r\n  | AbiFunctionNotFoundErrorType\r\n  | ConcatHexErrorType\r\n  | EncodeAbiParametersErrorType\r\n  | FormatAbiItemErrorType\r\n  | GetAbiItemErrorType\r\n  | ToFunctionSelectorErrorType\r\n  | ErrorType\r\n\r\nexport function encodeFunctionData<\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\r\n>(\r\n  parameters: EncodeFunctionDataParameters<abi, functionName>,\r\n): EncodeFunctionDataReturnType {\r\n  const { args } = parameters as EncodeFunctionDataParameters\r\n\r\n  const { abi, functionName } = (() => {\r\n    if (\r\n      parameters.abi.length === 1 &&\r\n      parameters.functionName?.startsWith('0x')\r\n    )\r\n      return parameters as { abi: Abi; functionName: Hex }\r\n    return prepareEncodeFunctionData(parameters)\r\n  })()\r\n\r\n  const abiItem = abi[0]\r\n  const signature = functionName\r\n\r\n  const data =\r\n    'inputs' in abiItem && abiItem.inputs\r\n      ? encodeAbiParameters(abiItem.inputs, args ?? [])\r\n      : undefined\r\n  return concatHex([signature, data ?? '0x'])\r\n}\r\n", "/** @internal */\r\nexport type PromiseWithResolvers<type> = {\r\n  promise: Promise<type>\r\n  resolve: (value: type | PromiseLike<type>) => void\r\n  reject: (reason?: unknown) => void\r\n}\r\n\r\n/** @internal */\r\nexport function withResolvers<type>(): PromiseWithResolvers<type> {\r\n  let resolve: PromiseWithResolvers<type>['resolve'] = () => undefined\r\n  let reject: PromiseWithResolvers<type>['reject'] = () => undefined\r\n\r\n  const promise = new Promise<type>((resolve_, reject_) => {\r\n    resolve = resolve_\r\n    reject = reject_\r\n  })\r\n\r\n  return { promise, resolve, reject }\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport { type PromiseWithResolvers, withResolvers } from './withResolvers.js'\r\n\r\ntype Resolved<returnType extends readonly unknown[] = any> = [\r\n  result: returnType[number],\r\n  results: returnType,\r\n]\r\n\r\ntype SchedulerItem = {\r\n  args: unknown\r\n  resolve: PromiseWithResolvers<unknown>['resolve']\r\n  reject: PromiseWithResolvers<unknown>['reject']\r\n}\r\n\r\ntype BatchResultsCompareFn<result = unknown> = (a: result, b: result) => number\r\n\r\ntype CreateBatchSchedulerArguments<\r\n  parameters = unknown,\r\n  returnType extends readonly unknown[] = readonly unknown[],\r\n> = {\r\n  fn: (args: parameters[]) => Promise<returnType>\r\n  id: number | string\r\n  shouldSplitBatch?: ((args: parameters[]) => boolean) | undefined\r\n  wait?: number | undefined\r\n  sort?: BatchResultsCompareFn<returnType[number]> | undefined\r\n}\r\n\r\ntype CreateBatchSchedulerReturnType<\r\n  parameters = unknown,\r\n  returnType extends readonly unknown[] = readonly unknown[],\r\n> = {\r\n  flush: () => void\r\n  schedule: parameters extends undefined\r\n    ? (args?: parameters | undefined) => Promise<Resolved<returnType>>\r\n    : (args: parameters) => Promise<Resolved<returnType>>\r\n}\r\n\r\nexport type CreateBatchSchedulerErrorType = ErrorType\r\n\r\nconst schedulerCache = /*#__PURE__*/ new Map<number | string, SchedulerItem[]>()\r\n\r\n/** @internal */\r\nexport function createBatchScheduler<\r\n  parameters,\r\n  returnType extends readonly unknown[],\r\n>({\r\n  fn,\r\n  id,\r\n  shouldSplitBatch,\r\n  wait = 0,\r\n  sort,\r\n}: CreateBatchSchedulerArguments<\r\n  parameters,\r\n  returnType\r\n>): CreateBatchSchedulerReturnType<parameters, returnType> {\r\n  const exec = async () => {\r\n    const scheduler = getScheduler()\r\n    flush()\r\n\r\n    const args = scheduler.map(({ args }) => args)\r\n\r\n    if (args.length === 0) return\r\n\r\n    fn(args as parameters[])\r\n      .then((data) => {\r\n        if (sort && Array.isArray(data)) data.sort(sort)\r\n        for (let i = 0; i < scheduler.length; i++) {\r\n          const { resolve } = scheduler[i]\r\n          resolve?.([data[i], data])\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        for (let i = 0; i < scheduler.length; i++) {\r\n          const { reject } = scheduler[i]\r\n          reject?.(err)\r\n        }\r\n      })\r\n  }\r\n\r\n  const flush = () => schedulerCache.delete(id)\r\n\r\n  const getBatchedArgs = () =>\r\n    getScheduler().map(({ args }) => args) as parameters[]\r\n\r\n  const getScheduler = () => schedulerCache.get(id) || []\r\n\r\n  const setScheduler = (item: SchedulerItem) =>\r\n    schedulerCache.set(id, [...getScheduler(), item])\r\n\r\n  return {\r\n    flush,\r\n    async schedule(args: parameters) {\r\n      const { promise, resolve, reject } = withResolvers()\r\n\r\n      const split = shouldSplitBatch?.([...getBatchedArgs(), args])\r\n\r\n      if (split) exec()\r\n\r\n      const hasActiveScheduler = getScheduler().length > 0\r\n      if (hasActiveScheduler) {\r\n        setScheduler({ args, resolve, reject })\r\n        return promise\r\n      }\r\n\r\n      setScheduler({ args, resolve, reject })\r\n      setTimeout(exec, wait)\r\n      return promise\r\n    },\r\n  } as unknown as CreateBatchSchedulerReturnType<parameters, returnType>\r\n}\r\n", "import {\r\n  InvalidAddressError,\r\n  type InvalidAddressErrorType,\r\n} from '../errors/address.js'\r\nimport {\r\n  InvalidBytesLengthError,\r\n  type InvalidBytesLengthErrorType,\r\n} from '../errors/data.js'\r\nimport {\r\n  AccountStateConflictError,\r\n  type AccountStateConflictErrorType,\r\n  StateAssignmentConflictError,\r\n  type StateAssignmentConflictErrorType,\r\n} from '../errors/stateOverride.js'\r\nimport type {\r\n  RpcAccountStateOverride,\r\n  RpcStateMapping,\r\n  RpcStateOverride,\r\n} from '../types/rpc.js'\r\nimport type { StateMapping, StateOverride } from '../types/stateOverride.js'\r\nimport { isAddress } from './address/isAddress.js'\r\nimport { type NumberToHexErrorType, numberToHex } from './encoding/toHex.js'\r\n\r\ntype SerializeStateMappingParameters = StateMapping | undefined\r\n\r\ntype SerializeStateMappingErrorType = InvalidBytesLengthErrorType\r\n\r\n/** @internal */\r\nexport function serializeStateMapping(\r\n  stateMapping: SerializeStateMappingParameters,\r\n): RpcStateMapping | undefined {\r\n  if (!stateMapping || stateMapping.length === 0) return undefined\r\n  return stateMapping.reduce((acc, { slot, value }) => {\r\n    if (slot.length !== 66)\r\n      throw new InvalidBytesLengthError({\r\n        size: slot.length,\r\n        targetSize: 66,\r\n        type: 'hex',\r\n      })\r\n    if (value.length !== 66)\r\n      throw new InvalidBytesLengthError({\r\n        size: value.length,\r\n        targetSize: 66,\r\n        type: 'hex',\r\n      })\r\n    acc[slot] = value\r\n    return acc\r\n  }, {} as RpcStateMapping)\r\n}\r\n\r\ntype SerializeAccountStateOverrideParameters = Omit<\r\n  StateOverride[number],\r\n  'address'\r\n>\r\n\r\ntype SerializeAccountStateOverrideErrorType =\r\n  | NumberToHexErrorType\r\n  | StateAssignmentConflictErrorType\r\n  | SerializeStateMappingErrorType\r\n\r\n/** @internal */\r\nexport function serializeAccountStateOverride(\r\n  parameters: SerializeAccountStateOverrideParameters,\r\n): RpcAccountStateOverride {\r\n  const { balance, nonce, state, stateDiff, code } = parameters\r\n  const rpcAccountStateOverride: RpcAccountStateOverride = {}\r\n  if (code !== undefined) rpcAccountStateOverride.code = code\r\n  if (balance !== undefined)\r\n    rpcAccountStateOverride.balance = numberToHex(balance)\r\n  if (nonce !== undefined) rpcAccountStateOverride.nonce = numberToHex(nonce)\r\n  if (state !== undefined)\r\n    rpcAccountStateOverride.state = serializeStateMapping(state)\r\n  if (stateDiff !== undefined) {\r\n    if (rpcAccountStateOverride.state) throw new StateAssignmentConflictError()\r\n    rpcAccountStateOverride.stateDiff = serializeStateMapping(stateDiff)\r\n  }\r\n  return rpcAccountStateOverride\r\n}\r\n\r\ntype SerializeStateOverrideParameters = StateOverride | undefined\r\n\r\nexport type SerializeStateOverrideErrorType =\r\n  | InvalidAddressErrorType\r\n  | AccountStateConflictErrorType\r\n  | SerializeAccountStateOverrideErrorType\r\n\r\n/** @internal */\r\nexport function serializeStateOverride(\r\n  parameters?: SerializeStateOverrideParameters,\r\n): RpcStateOverride | undefined {\r\n  if (!parameters) return undefined\r\n  const rpcStateOverride: RpcStateOverride = {}\r\n  for (const { address, ...accountState } of parameters) {\r\n    if (!isAddress(address, { strict: false }))\r\n      throw new InvalidAddressError({ address })\r\n    if (rpcStateOverride[address])\r\n      throw new AccountStateConflictError({ address: address })\r\n    rpcStateOverride[address] = serializeAccountStateOverride(accountState)\r\n  }\r\n  return rpcStateOverride\r\n}\r\n", "import { type Address, parseAbi } from 'abitype'\r\nimport * as BlockOverrides from 'ox/BlockOverrides'\r\n\r\nimport type { Account } from '../../accounts/types.js'\r\nimport {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../../accounts/utils/parseAccount.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport { multicall3Abi } from '../../constants/abis.js'\r\nimport { aggregate3Signature } from '../../constants/contract.js'\r\nimport {\r\n  deploylessCallViaBytecodeBytecode,\r\n  deploylessCallViaFactoryBytecode,\r\n} from '../../constants/contracts.js'\r\nimport { BaseError } from '../../errors/base.js'\r\nimport {\r\n  ChainDoesNotSupportContract,\r\n  ClientChainNotConfiguredError,\r\n} from '../../errors/chain.js'\r\nimport {\r\n  CounterfactualDeploymentFailedError,\r\n  RawContractError,\r\n  type RawContractErrorType,\r\n} from '../../errors/contract.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { RpcTransactionRequest } from '../../types/rpc.js'\r\nimport type { StateOverride } from '../../types/stateOverride.js'\r\nimport type { TransactionRequest } from '../../types/transaction.js'\r\nimport type { ExactPartial, UnionOmit } from '../../types/utils.js'\r\nimport {\r\n  type DecodeFunctionResultErrorType,\r\n  decodeFunctionResult,\r\n} from '../../utils/abi/decodeFunctionResult.js'\r\nimport {\r\n  type EncodeDeployDataErrorType,\r\n  encodeDeployData,\r\n} from '../../utils/abi/encodeDeployData.js'\r\nimport {\r\n  type EncodeFunctionDataErrorType,\r\n  encodeFunctionData,\r\n} from '../../utils/abi/encodeFunctionData.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type GetChainContractAddressErrorType,\r\n  getChainContractAddress,\r\n} from '../../utils/chain/getChainContractAddress.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\nimport {\r\n  type GetCallErrorReturnType,\r\n  getCallError,\r\n} from '../../utils/errors/getCallError.js'\r\nimport { extract } from '../../utils/formatters/extract.js'\r\nimport {\r\n  type FormatTransactionRequestErrorType,\r\n  type FormattedTransactionRequest,\r\n  formatTransactionRequest,\r\n} from '../../utils/formatters/transactionRequest.js'\r\nimport {\r\n  type CreateBatchSchedulerErrorType,\r\n  createBatchScheduler,\r\n} from '../../utils/promise/createBatchScheduler.js'\r\nimport {\r\n  type SerializeStateOverrideErrorType,\r\n  serializeStateOverride,\r\n} from '../../utils/stateOverride.js'\r\nimport { assertRequest } from '../../utils/transaction/assertRequest.js'\r\nimport type {\r\n  AssertRequestErrorType,\r\n  AssertRequestParameters,\r\n} from '../../utils/transaction/assertRequest.js'\r\n\r\nexport type CallParameters<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n> = UnionOmit<FormattedCall<chain>, 'from'> & {\r\n  /** Account attached to the call (msg.sender). */\r\n  account?: Account | Address | undefined\r\n  /** Whether or not to enable multicall batching on this call. */\r\n  batch?: boolean | undefined\r\n  /** Block overrides for the call. */\r\n  blockOverrides?: BlockOverrides.BlockOverrides | undefined\r\n  /** Bytecode to perform the call on. */\r\n  code?: Hex | undefined\r\n  /** Contract deployment factory address (ie. Create2 factory, Smart Account factory, etc). */\r\n  factory?: Address | undefined\r\n  /** Calldata to execute on the factory to deploy the contract. */\r\n  factoryData?: Hex | undefined\r\n  /** State overrides for the call. */\r\n  stateOverride?: StateOverride | undefined\r\n} & (\r\n    | {\r\n        /** The balance of the account at a block number. */\r\n        blockNumber?: bigint | undefined\r\n        blockTag?: undefined\r\n      }\r\n    | {\r\n        blockNumber?: undefined\r\n        /**\r\n         * The balance of the account at a block tag.\r\n         * @default 'latest'\r\n         */\r\n        blockTag?: BlockTag | undefined\r\n      }\r\n  )\r\ntype FormattedCall<chain extends Chain | undefined = Chain | undefined> =\r\n  FormattedTransactionRequest<chain>\r\n\r\nexport type CallReturnType = { data: Hex | undefined }\r\n\r\nexport type CallErrorType = GetCallErrorReturnType<\r\n  | ParseAccountErrorType\r\n  | SerializeStateOverrideErrorType\r\n  | AssertRequestErrorType\r\n  | NumberToHexErrorType\r\n  | FormatTransactionRequestErrorType\r\n  | ScheduleMulticallErrorType\r\n  | RequestErrorType\r\n  | ToDeploylessCallViaBytecodeDataErrorType\r\n  | ToDeploylessCallViaFactoryDataErrorType\r\n>\r\n\r\n/**\r\n * Executes a new message call immediately without submitting a transaction to the network.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/call\r\n * - JSON-RPC Methods: [`eth_call`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link CallParameters}\r\n * @returns The call data. {@link CallReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { call } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const data = await call(client, {\r\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\r\n *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\r\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\r\n * })\r\n */\r\nexport async function call<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  args: CallParameters<chain>,\r\n): Promise<CallReturnType> {\r\n  const {\r\n    account: account_ = client.account,\r\n    authorizationList,\r\n    batch = Boolean(client.batch?.multicall),\r\n    blockNumber,\r\n    blockTag = client.experimental_blockTag ?? 'latest',\r\n    accessList,\r\n    blobs,\r\n    blockOverrides,\r\n    code,\r\n    data: data_,\r\n    factory,\r\n    factoryData,\r\n    gas,\r\n    gasPrice,\r\n    maxFeePerBlobGas,\r\n    maxFeePerGas,\r\n    maxPriorityFeePerGas,\r\n    nonce,\r\n    to,\r\n    value,\r\n    stateOverride,\r\n    ...rest\r\n  } = args\r\n  const account = account_ ? parseAccount(account_) : undefined\r\n\r\n  if (code && (factory || factoryData))\r\n    throw new BaseError(\r\n      'Cannot provide both `code` & `factory`/`factoryData` as parameters.',\r\n    )\r\n  if (code && to)\r\n    throw new BaseError('Cannot provide both `code` & `to` as parameters.')\r\n\r\n  // Check if the call is deployless via bytecode.\r\n  const deploylessCallViaBytecode = code && data_\r\n  // Check if the call is deployless via a factory.\r\n  const deploylessCallViaFactory = factory && factoryData && to && data_\r\n  const deploylessCall = deploylessCallViaBytecode || deploylessCallViaFactory\r\n\r\n  const data = (() => {\r\n    if (deploylessCallViaBytecode)\r\n      return toDeploylessCallViaBytecodeData({\r\n        code,\r\n        data: data_,\r\n      })\r\n    if (deploylessCallViaFactory)\r\n      return toDeploylessCallViaFactoryData({\r\n        data: data_,\r\n        factory,\r\n        factoryData,\r\n        to,\r\n      })\r\n    return data_\r\n  })()\r\n\r\n  try {\r\n    assertRequest(args as AssertRequestParameters)\r\n\r\n    const blockNumberHex =\r\n      typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined\r\n    const block = blockNumberHex || blockTag\r\n\r\n    const rpcBlockOverrides = blockOverrides\r\n      ? BlockOverrides.toRpc(blockOverrides)\r\n      : undefined\r\n    const rpcStateOverride = serializeStateOverride(stateOverride)\r\n\r\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\r\n    const format = chainFormat || formatTransactionRequest\r\n\r\n    const request = format({\r\n      // Pick out extra data that might exist on the chain's transaction request type.\r\n      ...extract(rest, { format: chainFormat }),\r\n      from: account?.address,\r\n      accessList,\r\n      authorizationList,\r\n      blobs,\r\n      data,\r\n      gas,\r\n      gasPrice,\r\n      maxFeePerBlobGas,\r\n      maxFeePerGas,\r\n      maxPriorityFeePerGas,\r\n      nonce,\r\n      to: deploylessCall ? undefined : to,\r\n      value,\r\n    } as TransactionRequest) as TransactionRequest\r\n\r\n    if (\r\n      batch &&\r\n      shouldPerformMulticall({ request }) &&\r\n      !rpcStateOverride &&\r\n      !rpcBlockOverrides\r\n    ) {\r\n      try {\r\n        return await scheduleMulticall(client, {\r\n          ...request,\r\n          blockNumber,\r\n          blockTag,\r\n        } as unknown as ScheduleMulticallParameters<chain>)\r\n      } catch (err) {\r\n        if (\r\n          !(err instanceof ClientChainNotConfiguredError) &&\r\n          !(err instanceof ChainDoesNotSupportContract)\r\n        )\r\n          throw err\r\n      }\r\n    }\r\n\r\n    const params = (() => {\r\n      const base = [\r\n        request as ExactPartial<RpcTransactionRequest>,\r\n        block,\r\n      ] as const\r\n      if (rpcStateOverride && rpcBlockOverrides)\r\n        return [...base, rpcStateOverride, rpcBlockOverrides] as const\r\n      if (rpcStateOverride) return [...base, rpcStateOverride] as const\r\n      if (rpcBlockOverrides) return [...base, {}, rpcBlockOverrides] as const\r\n      return base\r\n    })()\r\n\r\n    const response = await client.request({\r\n      method: 'eth_call',\r\n      params,\r\n    })\r\n    if (response === '0x') return { data: undefined }\r\n    return { data: response }\r\n  } catch (err) {\r\n    const data = getRevertErrorData(err)\r\n\r\n    // Check for CCIP-Read offchain lookup signature.\r\n    const { offchainLookup, offchainLookupSignature } = await import(\r\n      '../../utils/ccip.js'\r\n    )\r\n    if (\r\n      client.ccipRead !== false &&\r\n      data?.slice(0, 10) === offchainLookupSignature &&\r\n      to\r\n    )\r\n      return { data: await offchainLookup(client, { data, to }) }\r\n\r\n    // Check for counterfactual deployment error.\r\n    if (deploylessCall && data?.slice(0, 10) === '0x101bb98d')\r\n      throw new CounterfactualDeploymentFailedError({ factory })\r\n\r\n    throw getCallError(err as ErrorType, {\r\n      ...args,\r\n      account,\r\n      chain: client.chain,\r\n    })\r\n  }\r\n}\r\n\r\n// We only want to perform a scheduled multicall if:\r\n// - The request has calldata,\r\n// - The request has a target address,\r\n// - The target address is not already the aggregate3 signature,\r\n// - The request has no other properties (`nonce`, `gas`, etc cannot be sent with a multicall).\r\nfunction shouldPerformMulticall({ request }: { request: TransactionRequest }) {\r\n  const { data, to, ...request_ } = request\r\n  if (!data) return false\r\n  if (data.startsWith(aggregate3Signature)) return false\r\n  if (!to) return false\r\n  if (\r\n    Object.values(request_).filter((x) => typeof x !== 'undefined').length > 0\r\n  )\r\n    return false\r\n  return true\r\n}\r\n\r\ntype ScheduleMulticallParameters<chain extends Chain | undefined> = Pick<\r\n  CallParameters<chain>,\r\n  'blockNumber' | 'blockTag'\r\n> & {\r\n  data: Hex\r\n  multicallAddress?: Address | undefined\r\n  to: Address\r\n}\r\n\r\ntype ScheduleMulticallErrorType =\r\n  | GetChainContractAddressErrorType\r\n  | NumberToHexErrorType\r\n  | CreateBatchSchedulerErrorType\r\n  | EncodeFunctionDataErrorType\r\n  | DecodeFunctionResultErrorType\r\n  | RawContractErrorType\r\n  | ErrorType\r\n\r\nasync function scheduleMulticall<chain extends Chain | undefined>(\r\n  client: Client<Transport>,\r\n  args: ScheduleMulticallParameters<chain>,\r\n) {\r\n  const { batchSize = 1024, wait = 0 } =\r\n    typeof client.batch?.multicall === 'object' ? client.batch.multicall : {}\r\n  const {\r\n    blockNumber,\r\n    blockTag = client.experimental_blockTag ?? 'latest',\r\n    data,\r\n    multicallAddress: multicallAddress_,\r\n    to,\r\n  } = args\r\n\r\n  let multicallAddress = multicallAddress_\r\n  if (!multicallAddress) {\r\n    if (!client.chain) throw new ClientChainNotConfiguredError()\r\n\r\n    multicallAddress = getChainContractAddress({\r\n      blockNumber,\r\n      chain: client.chain,\r\n      contract: 'multicall3',\r\n    })\r\n  }\r\n\r\n  const blockNumberHex =\r\n    typeof blockNumber === 'bigint' ? numberToHex(blockNumber) : undefined\r\n  const block = blockNumberHex || blockTag\r\n\r\n  const { schedule } = createBatchScheduler({\r\n    id: `${client.uid}.${block}`,\r\n    wait,\r\n    shouldSplitBatch(args) {\r\n      const size = args.reduce((size, { data }) => size + (data.length - 2), 0)\r\n      return size > batchSize * 2\r\n    },\r\n    fn: async (\r\n      requests: {\r\n        data: Hex\r\n        to: Address\r\n      }[],\r\n    ) => {\r\n      const calls = requests.map((request) => ({\r\n        allowFailure: true,\r\n        callData: request.data,\r\n        target: request.to,\r\n      }))\r\n\r\n      const calldata = encodeFunctionData({\r\n        abi: multicall3Abi,\r\n        args: [calls],\r\n        functionName: 'aggregate3',\r\n      })\r\n\r\n      const data = await client.request({\r\n        method: 'eth_call',\r\n        params: [\r\n          {\r\n            data: calldata,\r\n            to: multicallAddress,\r\n          },\r\n          block,\r\n        ],\r\n      })\r\n\r\n      return decodeFunctionResult({\r\n        abi: multicall3Abi,\r\n        args: [calls],\r\n        functionName: 'aggregate3',\r\n        data: data || '0x',\r\n      })\r\n    },\r\n  })\r\n\r\n  const [{ returnData, success }] = await schedule({ data, to })\r\n\r\n  if (!success) throw new RawContractError({ data: returnData })\r\n  if (returnData === '0x') return { data: undefined }\r\n  return { data: returnData }\r\n}\r\n\r\ntype ToDeploylessCallViaBytecodeDataErrorType =\r\n  | EncodeDeployDataErrorType\r\n  | ErrorType\r\n\r\nfunction toDeploylessCallViaBytecodeData(parameters: {\r\n  code: Hex\r\n  data: Hex\r\n}) {\r\n  const { code, data } = parameters\r\n  return encodeDeployData({\r\n    abi: parseAbi(['constructor(bytes, bytes)']),\r\n    bytecode: deploylessCallViaBytecodeBytecode,\r\n    args: [code, data],\r\n  })\r\n}\r\n\r\ntype ToDeploylessCallViaFactoryDataErrorType =\r\n  | EncodeDeployDataErrorType\r\n  | ErrorType\r\n\r\nfunction toDeploylessCallViaFactoryData(parameters: {\r\n  data: Hex\r\n  factory: Address\r\n  factoryData: Hex\r\n  to: Address\r\n}) {\r\n  const { data, factory, factoryData, to } = parameters\r\n  return encodeDeployData({\r\n    abi: parseAbi(['constructor(address, bytes, address, bytes)']),\r\n    bytecode: deploylessCallViaFactoryBytecode,\r\n    args: [to, data, factory, factoryData],\r\n  })\r\n}\r\n\r\n/** @internal */\r\nexport type GetRevertErrorDataErrorType = ErrorType\r\n\r\n/** @internal */\r\nexport function getRevertErrorData(err: unknown) {\r\n  if (!(err instanceof BaseError)) return undefined\r\n  const error = err.walk() as RawContractError\r\n  return typeof error?.data === 'object' ? error.data?.data : error.data\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Hex } from '../types/misc.js'\r\nimport { stringify } from '../utils/stringify.js'\r\n\r\nimport { BaseError } from './base.js'\r\nimport { getUrl } from './utils.js'\r\n\r\nexport type OffchainLookupErrorType = OffchainLookupError & {\r\n  name: 'OffchainLookupError'\r\n}\r\nexport class OffchainLookupError extends BaseError {\r\n  constructor({\r\n    callbackSelector,\r\n    cause,\r\n    data,\r\n    extraData,\r\n    sender,\r\n    urls,\r\n  }: {\r\n    callbackSelector: Hex\r\n    cause: BaseError\r\n    data: Hex\r\n    extraData: Hex\r\n    sender: Address\r\n    urls: readonly string[]\r\n  }) {\r\n    super(\r\n      cause.shortMessage ||\r\n        'An error occurred while fetching for an offchain result.',\r\n      {\r\n        cause,\r\n        metaMessages: [\r\n          ...(cause.metaMessages || []),\r\n          cause.metaMessages?.length ? '' : [],\r\n          'Offchain Gateway Call:',\r\n          urls && [\r\n            '  Gateway URL(s):',\r\n            ...urls.map((url) => `    ${getUrl(url)}`),\r\n          ],\r\n          `  Sender: ${sender}`,\r\n          `  Data: ${data}`,\r\n          `  Callback selector: ${callbackSelector}`,\r\n          `  Extra data: ${extraData}`,\r\n        ].flat(),\r\n        name: 'OffchainLookupError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type OffchainLookupResponseMalformedErrorType =\r\n  OffchainLookupResponseMalformedError & {\r\n    name: 'OffchainLookupResponseMalformedError'\r\n  }\r\nexport class OffchainLookupResponseMalformedError extends BaseError {\r\n  constructor({ result, url }: { result: any; url: string }) {\r\n    super(\r\n      'Offchain gateway response is malformed. Response data must be a hex value.',\r\n      {\r\n        metaMessages: [\r\n          `Gateway URL: ${getUrl(url)}`,\r\n          `Response: ${stringify(result)}`,\r\n        ],\r\n        name: 'OffchainLookupResponseMalformedError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport type OffchainLookupSenderMismatchErrorType =\r\n  OffchainLookupSenderMismatchError & {\r\n    name: 'OffchainLookupSenderMismatchError'\r\n  }\r\nexport class OffchainLookupSenderMismatchError extends BaseError {\r\n  constructor({ sender, to }: { sender: Address; to: Address }) {\r\n    super(\r\n      'Reverted sender address does not match target contract address (`to`).',\r\n      {\r\n        metaMessages: [\r\n          `Contract address: ${to}`,\r\n          `OffchainLookup sender address: ${sender}`,\r\n        ],\r\n        name: 'OffchainLookupSenderMismatchError',\r\n      },\r\n    )\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport {\r\n  InvalidAddressError,\r\n  type InvalidAddressErrorType,\r\n} from '../../errors/address.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport { isAddress } from './isAddress.js'\r\n\r\nexport type IsAddressEqualReturnType = boolean\r\nexport type IsAddressEqualErrorType = InvalidAddressErrorType | ErrorType\r\n\r\nexport function isAddressEqual(a: Address, b: Address) {\r\n  if (!isAddress(a, { strict: false }))\r\n    throw new InvalidAddressError({ address: a })\r\n  if (!isAddress(b, { strict: false }))\r\n    throw new InvalidAddressError({ address: b })\r\n  return a.toLowerCase() === b.toLowerCase()\r\n}\r\n", "import type { Abi, AbiStateMutability } from 'abitype'\r\n\r\nimport { AbiFunctionSignatureNotFoundError } from '../../errors/abi.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n} from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\r\nimport { type SliceErrorType, slice } from '../data/slice.js'\r\nimport {\r\n  type ToFunctionSelectorErrorType,\r\n  toFunctionSelector,\r\n} from '../hash/toFunctionSelector.js'\r\nimport {\r\n  type DecodeAbiParametersErrorType,\r\n  decodeAbiParameters,\r\n} from './decodeAbiParameters.js'\r\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\r\n\r\nexport type DecodeFunctionDataParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n> = {\r\n  abi: abi\r\n  data: Hex\r\n}\r\n\r\nexport type DecodeFunctionDataReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  ///\r\n  allFunctionNames extends\r\n    ContractFunctionName<abi> = ContractFunctionName<abi>,\r\n> = IsNarrowable<abi, Abi> extends true\r\n  ? UnionEvaluate<\r\n      {\r\n        [functionName in allFunctionNames]: {\r\n          args: ContractFunctionArgs<abi, AbiStateMutability, functionName>\r\n          functionName: functionName\r\n        }\r\n      }[allFunctionNames]\r\n    >\r\n  : {\r\n      args: readonly unknown[] | undefined\r\n      functionName: string\r\n    }\r\n\r\nexport type DecodeFunctionDataErrorType =\r\n  | AbiFunctionSignatureNotFoundError\r\n  | DecodeAbiParametersErrorType\r\n  | FormatAbiItemErrorType\r\n  | ToFunctionSelectorErrorType\r\n  | SliceErrorType\r\n  | ErrorType\r\n\r\nexport function decodeFunctionData<const abi extends Abi | readonly unknown[]>(\r\n  parameters: DecodeFunctionDataParameters<abi>,\r\n) {\r\n  const { abi, data } = parameters as DecodeFunctionDataParameters\r\n  const signature = slice(data, 0, 4)\r\n  const description = abi.find(\r\n    (x) =>\r\n      x.type === 'function' &&\r\n      signature === toFunctionSelector(formatAbiItem(x)),\r\n  )\r\n  if (!description)\r\n    throw new AbiFunctionSignatureNotFoundError(signature, {\r\n      docsPath: '/docs/contract/decodeFunctionData',\r\n    })\r\n  return {\r\n    functionName: (description as { name: string }).name,\r\n    args: ('inputs' in description &&\r\n    description.inputs &&\r\n    description.inputs.length > 0\r\n      ? decodeAbiParameters(description.inputs, slice(data, 4))\r\n      : undefined) as readonly unknown[] | undefined,\r\n  } as DecodeFunctionDataReturnType<abi>\r\n}\r\n", "import type { Abi, ExtractAbiErrors } from 'abitype'\r\n\r\nimport {\r\n  AbiErrorInputsNotFoundError,\r\n  AbiErrorNotFoundError,\r\n} from '../../errors/abi.js'\r\nimport type {\r\n  ContractErrorArgs,\r\n  ContractErrorName,\r\n} from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\r\nimport {\r\n  type ToFunctionSelectorErrorType,\r\n  toFunctionSelector,\r\n} from '../hash/toFunctionSelector.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\r\nimport {\r\n  type EncodeAbiParametersErrorType,\r\n  encodeAbiParameters,\r\n} from './encodeAbiParameters.js'\r\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\r\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\r\n\r\nconst docsPath = '/docs/contract/encodeErrorResult'\r\n\r\nexport type EncodeErrorResultParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  errorName extends ContractErrorName<abi> | undefined = ContractErrorName<abi>,\r\n  ///\r\n  hasErrors = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [ExtractAbiErrors<abi>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allArgs = ContractErrorArgs<\r\n    abi,\r\n    errorName extends ContractErrorName<abi>\r\n      ? errorName\r\n      : ContractErrorName<abi>\r\n  >,\r\n  allErrorNames = ContractErrorName<abi>,\r\n> = {\r\n  abi: abi\r\n  args?: allArgs | undefined\r\n} & UnionEvaluate<\r\n  IsNarrowable<abi, Abi> extends true\r\n    ? abi['length'] extends 1\r\n      ? { errorName?: errorName | allErrorNames | undefined }\r\n      : { errorName: errorName | allErrorNames }\r\n    : { errorName?: errorName | allErrorNames | undefined }\r\n> &\r\n  (hasErrors extends true ? unknown : never)\r\n\r\nexport type EncodeErrorResultReturnType = Hex\r\n\r\nexport type EncodeErrorResultErrorType =\r\n  | GetAbiItemErrorType\r\n  | FormatAbiItemErrorType\r\n  | ToFunctionSelectorErrorType\r\n  | EncodeAbiParametersErrorType\r\n  | ConcatHexErrorType\r\n  | ErrorType\r\n\r\nexport function encodeErrorResult<\r\n  const abi extends Abi | readonly unknown[],\r\n  errorName extends ContractErrorName<abi> | undefined = undefined,\r\n>(\r\n  parameters: EncodeErrorResultParameters<abi, errorName>,\r\n): EncodeErrorResultReturnType {\r\n  const { abi, errorName, args } = parameters as EncodeErrorResultParameters\r\n\r\n  let abiItem = abi[0]\r\n  if (errorName) {\r\n    const item = getAbiItem({ abi, args, name: errorName })\r\n    if (!item) throw new AbiErrorNotFoundError(errorName, { docsPath })\r\n    abiItem = item\r\n  }\r\n\r\n  if (abiItem.type !== 'error')\r\n    throw new AbiErrorNotFoundError(undefined, { docsPath })\r\n\r\n  const definition = formatAbiItem(abiItem)\r\n  const signature = toFunctionSelector(definition)\r\n\r\n  let data: Hex = '0x'\r\n  if (args && args.length > 0) {\r\n    if (!abiItem.inputs)\r\n      throw new AbiErrorInputsNotFoundError(abiItem.name, { docsPath })\r\n    data = encodeAbiParameters(abiItem.inputs, args)\r\n  }\r\n  return concatHex([signature, data])\r\n}\r\n", "import type { Abi, AbiStateMutability, ExtractAbiFunctions } from 'abitype'\r\n\r\nimport {\r\n  AbiFunctionNotFoundError,\r\n  AbiFunctionOutputsNotFoundError,\r\n  InvalidArrayError,\r\n} from '../../errors/abi.js'\r\nimport type {\r\n  ContractFunctionName,\r\n  ContractFunctionReturnType,\r\n} from '../../types/contract.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\r\nimport {\r\n  type EncodeAbiParametersErrorType,\r\n  encodeAbiParameters,\r\n} from './encodeAbiParameters.js'\r\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\r\n\r\nconst docsPath = '/docs/contract/encodeFunctionResult'\r\n\r\nexport type EncodeFunctionResultParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | undefined = ContractFunctionName<abi>,\r\n  ///\r\n  hasFunctions = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [ExtractAbiFunctions<abi>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allFunctionNames = ContractFunctionName<abi>,\r\n> = {\r\n  abi: abi\r\n  result?:\r\n    | ContractFunctionReturnType<\r\n        abi,\r\n        AbiStateMutability,\r\n        functionName extends ContractFunctionName<abi>\r\n          ? functionName\r\n          : ContractFunctionName<abi>,\r\n        never // allow all args. required for overloads to work.\r\n      >\r\n    | undefined\r\n} & UnionEvaluate<\r\n  IsNarrowable<abi, Abi> extends true\r\n    ? abi['length'] extends 1\r\n      ? { functionName?: functionName | allFunctionNames | undefined }\r\n      : { functionName: functionName | allFunctionNames }\r\n    : { functionName?: functionName | allFunctionNames | undefined }\r\n> &\r\n  (hasFunctions extends true ? unknown : never)\r\n\r\nexport type EncodeFunctionResultReturnType = Hex\r\n\r\nexport type EncodeFunctionResultErrorType =\r\n  | AbiFunctionOutputsNotFoundError\r\n  | AbiFunctionNotFoundError\r\n  | EncodeAbiParametersErrorType\r\n  | GetAbiItemErrorType\r\n  | ErrorType\r\n\r\nexport function encodeFunctionResult<\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\r\n>(\r\n  parameters: EncodeFunctionResultParameters<abi, functionName>,\r\n): EncodeFunctionResultReturnType {\r\n  const { abi, functionName, result } =\r\n    parameters as EncodeFunctionResultParameters\r\n\r\n  let abiItem = abi[0]\r\n  if (functionName) {\r\n    const item = getAbiItem({ abi, name: functionName })\r\n    if (!item) throw new AbiFunctionNotFoundError(functionName, { docsPath })\r\n    abiItem = item\r\n  }\r\n\r\n  if (abiItem.type !== 'function')\r\n    throw new AbiFunctionNotFoundError(undefined, { docsPath })\r\n\r\n  if (!abiItem.outputs)\r\n    throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath })\r\n\r\n  const values = (() => {\r\n    if (abiItem.outputs.length === 0) return []\r\n    if (abiItem.outputs.length === 1) return [result]\r\n    if (Array.isArray(result)) return result\r\n    throw new InvalidArrayError(result)\r\n  })()\r\n\r\n  return encodeAbiParameters(abiItem.outputs, values)\r\n}\r\n", "import { batchGatewayAbi } from '../../constants/abis.js'\r\nimport { solidityError } from '../../constants/solidity.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport { decodeFunctionData } from '../abi/decodeFunctionData.js'\r\nimport { encodeErrorResult } from '../abi/encodeErrorResult.js'\r\nimport { encodeFunctionResult } from '../abi/encodeFunctionResult.js'\r\nimport type {\r\n  CcipRequestErrorType,\r\n  CcipRequestParameters,\r\n  CcipRequestReturnType,\r\n} from '../ccip.js'\r\n\r\nexport const localBatchGatewayUrl = 'x-batch-gateway:true'\r\n\r\nexport async function localBatchGatewayRequest(parameters: {\r\n  data: Hex\r\n  ccipRequest: (\r\n    parameters: CcipRequestParameters,\r\n  ) => Promise<CcipRequestReturnType>\r\n}): Promise<Hex> {\r\n  const { data, ccipRequest } = parameters\r\n\r\n  const {\r\n    args: [queries],\r\n  } = decodeFunctionData({ abi: batchGatewayAbi, data })\r\n\r\n  const failures: boolean[] = []\r\n  const responses: Hex[] = []\r\n  await Promise.all(\r\n    queries.map(async (query, i) => {\r\n      try {\r\n        responses[i] = query.urls.includes(localBatchGatewayUrl)\r\n          ? await localBatchGatewayRequest({ data: query.data, ccipRequest })\r\n          : await ccipRequest(query)\r\n        failures[i] = false\r\n      } catch (err) {\r\n        failures[i] = true\r\n        responses[i] = encodeError(err as CcipRequestErrorType)\r\n      }\r\n    }),\r\n  )\r\n\r\n  return encodeFunctionResult({\r\n    abi: batchGatewayAbi,\r\n    functionName: 'query',\r\n    result: [failures, responses],\r\n  })\r\n}\r\n\r\nfunction encodeError(error: CcipRequestErrorType): Hex {\r\n  if (error.name === 'HttpRequestError' && error.status)\r\n    return encodeErrorResult({\r\n      abi: batchGatewayAbi,\r\n      errorName: 'HttpError',\r\n      args: [error.status, error.shortMessage],\r\n    })\r\n  return encodeErrorResult({\r\n    abi: [solidityError],\r\n    errorName: 'Error',\r\n    args: ['shortMessage' in error ? error.shortMessage : error.message],\r\n  })\r\n}\r\n", "import type { Abi, Address } from 'abitype'\r\n\r\nimport { type CallParameters, call } from '../actions/public/call.js'\r\nimport type { Transport } from '../clients/transports/createTransport.js'\r\nimport type { BaseError } from '../errors/base.js'\r\nimport {\r\n  OffchainLookupError,\r\n  type OffchainLookupErrorType as OffchainLookupErrorType_,\r\n  OffchainLookupResponseMalformedError,\r\n  type OffchainLookupResponseMalformedErrorType,\r\n  OffchainLookupSenderMismatchError,\r\n} from '../errors/ccip.js'\r\nimport {\r\n  HttpRequestError,\r\n  type HttpRequestErrorType,\r\n} from '../errors/request.js'\r\nimport type { Chain } from '../types/chain.js'\r\nimport type { Hex } from '../types/misc.js'\r\n\r\nimport type { Client } from '../clients/createClient.js'\r\nimport type { ErrorType } from '../errors/utils.js'\r\nimport { decodeErrorResult } from './abi/decodeErrorResult.js'\r\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js'\r\nimport { isAddressEqual } from './address/isAddressEqual.js'\r\nimport { concat } from './data/concat.js'\r\nimport { isHex } from './data/isHex.js'\r\nimport {\r\n  localBatchGatewayRequest,\r\n  localBatchGatewayUrl,\r\n} from './ens/localBatchGatewayRequest.js'\r\nimport { stringify } from './stringify.js'\r\n\r\nexport const offchainLookupSignature = '0x556f1830'\r\nexport const offchainLookupAbiItem = {\r\n  name: 'OffchainLookup',\r\n  type: 'error',\r\n  inputs: [\r\n    {\r\n      name: 'sender',\r\n      type: 'address',\r\n    },\r\n    {\r\n      name: 'urls',\r\n      type: 'string[]',\r\n    },\r\n    {\r\n      name: 'callData',\r\n      type: 'bytes',\r\n    },\r\n    {\r\n      name: 'callbackFunction',\r\n      type: 'bytes4',\r\n    },\r\n    {\r\n      name: 'extraData',\r\n      type: 'bytes',\r\n    },\r\n  ],\r\n} as const satisfies Abi[number]\r\n\r\nexport type OffchainLookupErrorType = OffchainLookupErrorType_ | ErrorType\r\n\r\nexport async function offchainLookup<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    blockNumber,\r\n    blockTag,\r\n    data,\r\n    to,\r\n  }: Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\r\n    data: Hex\r\n    to: Address\r\n  },\r\n): Promise<Hex> {\r\n  const { args } = decodeErrorResult({\r\n    data,\r\n    abi: [offchainLookupAbiItem],\r\n  })\r\n  const [sender, urls, callData, callbackSelector, extraData] = args\r\n\r\n  const { ccipRead } = client\r\n  const ccipRequest_ =\r\n    ccipRead && typeof ccipRead?.request === 'function'\r\n      ? ccipRead.request\r\n      : ccipRequest\r\n\r\n  try {\r\n    if (!isAddressEqual(to, sender))\r\n      throw new OffchainLookupSenderMismatchError({ sender, to })\r\n\r\n    const result = urls.includes(localBatchGatewayUrl)\r\n      ? await localBatchGatewayRequest({\r\n          data: callData,\r\n          ccipRequest: ccipRequest_,\r\n        })\r\n      : await ccipRequest_({ data: callData, sender, urls })\r\n\r\n    const { data: data_ } = await call(client, {\r\n      blockNumber,\r\n      blockTag,\r\n      data: concat([\r\n        callbackSelector,\r\n        encodeAbiParameters(\r\n          [{ type: 'bytes' }, { type: 'bytes' }],\r\n          [result, extraData],\r\n        ),\r\n      ]),\r\n      to,\r\n    } as CallParameters)\r\n\r\n    return data_!\r\n  } catch (err) {\r\n    throw new OffchainLookupError({\r\n      callbackSelector,\r\n      cause: err as BaseError,\r\n      data,\r\n      extraData,\r\n      sender,\r\n      urls,\r\n    })\r\n  }\r\n}\r\n\r\nexport type CcipRequestParameters = {\r\n  data: Hex\r\n  sender: Address\r\n  urls: readonly string[]\r\n}\r\n\r\nexport type CcipRequestReturnType = Hex\r\n\r\nexport type CcipRequestErrorType =\r\n  | HttpRequestErrorType\r\n  | OffchainLookupResponseMalformedErrorType\r\n  | ErrorType\r\n\r\nexport async function ccipRequest({\r\n  data,\r\n  sender,\r\n  urls,\r\n}: CcipRequestParameters): Promise<CcipRequestReturnType> {\r\n  let error = new Error('An unknown error occurred.')\r\n\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i]\r\n    const method = url.includes('{data}') ? 'GET' : 'POST'\r\n    const body = method === 'POST' ? { data, sender } : undefined\r\n    const headers: HeadersInit =\r\n      method === 'POST' ? { 'Content-Type': 'application/json' } : {}\r\n\r\n    try {\r\n      const response = await fetch(\r\n        url.replace('{sender}', sender.toLowerCase()).replace('{data}', data),\r\n        {\r\n          body: JSON.stringify(body),\r\n          headers,\r\n          method,\r\n        },\r\n      )\r\n\r\n      let result: any\r\n      if (\r\n        response.headers.get('Content-Type')?.startsWith('application/json')\r\n      ) {\r\n        result = (await response.json()).data\r\n      } else {\r\n        result = (await response.text()) as any\r\n      }\r\n\r\n      if (!response.ok) {\r\n        error = new HttpRequestError({\r\n          body,\r\n          details: result?.error\r\n            ? stringify(result.error)\r\n            : response.statusText,\r\n          headers: response.headers,\r\n          status: response.status,\r\n          url,\r\n        })\r\n        continue\r\n      }\r\n\r\n      if (!isHex(result)) {\r\n        error = new OffchainLookupResponseMalformedError({\r\n          result,\r\n          url,\r\n        })\r\n        continue\r\n      }\r\n\r\n      return result\r\n    } catch (err) {\r\n      error = new HttpRequestError({\r\n        body,\r\n        details: (err as Error).message,\r\n        url,\r\n      })\r\n    }\r\n  }\r\n\r\n  throw error\r\n}\r\n"],
  "mappings": "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",
  "names": ["BaseError", "docsPath", "stringify", "value", "size", "assertSize", "size", "SizeOverflowError", "SliceOffsetOutOfBoundsError", "pad", "SizeExceedsPaddingSizeError", "size", "assertSize", "BaseError", "size", "padRight", "padRight", "size", "BaseError", "BaseError", "size", "encoder", "concat", "assertSize", "size", "fromString", "encoder", "size", "pad", "slice", "size", "BaseError", "size", "BaseError", "stringify", "SizeOverflowError", "BaseError", "SliceOffsetOutOfBoundsError", "size", "SizeExceedsPaddingSizeError", "toRpc", "docsPath", "docsPath", "args", "toRpc", "data", "offchainLookup", "offchainLookupSignature", "args", "size", "docsPath", "docsPath", "ccipRequest"]
}

import { INavigator, IWindow, IFrameWindowParams, NavigateParams, NavigateResponse, UserManagerSettingsStore } from 'oidc-client-ts';
interface MessageData {
    url: string;
}
interface IDPResponse {
    type: 'authorization_response' | 'logout_response';
    response: {
        state?: string;
        iss?: string;
        code?: string;
    };
    url: string;
}
export declare class IFrameWindow implements IWindow {
    protected _window: WindowProxy | null;
    protected _timeoutInSeconds: number;
    private _frame;
    protected readonly _disposeHandlers: Set<() => void>;
    constructor({ silentRequestTimeoutInSeconds, }: IFrameWindowParams);
    private static createHiddenIframe;
    handleSignin(data: IDPResponse): string;
    getResponseFromIframe: (params: NavigateParams) => Promise<MessageData>;
    navigate(params: NavigateParams): Promise<NavigateResponse>;
    private _dispose;
    close(): void;
    static notifyParent(url: string, targetOrigin?: string): void;
}
export declare class IframeNavigator implements INavigator {
    private _settings?;
    constructor(_settings?: UserManagerSettingsStore | undefined);
    callback(url: string): Promise<void>;
    prepare(params: IFrameWindowParams): Promise<IFrameWindow>;
}
export {};

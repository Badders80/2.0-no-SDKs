import { z } from 'zod';
import { ExtraSigninRequestArgs, User as OIDCUser } from 'oidc-client-ts';
import { SignerInterface } from '@futureverse/signer-core';
export declare const custodianSchema: z.ZodUnion<[z.ZodLiteral<"fv">, z.ZodLiteral<"self">]>;
export type Custodian = z.infer<typeof custodianSchema>;
export declare const identityTokenSchema: z.ZodObject<{
    eoa: z.ZodString;
    sub: z.ZodString;
    custodian: z.ZodUnion<[z.ZodLiteral<"fv">, z.ZodLiteral<"self">]>;
    chainId: z.ZodNumber;
    futurepass: z.ZodString;
    nonce: z.ZodOptional<z.ZodString>;
    s_hash: z.ZodOptional<z.ZodString>;
    at_hash: z.ZodOptional<z.ZodString>;
    aud: z.ZodString;
    exp: z.ZodNumber;
    iat: z.ZodNumber;
    iss: z.ZodString;
}, "strip", z.ZodTypeAny, {
    sub: string;
    chainId: number;
    eoa: string;
    custodian: "fv" | "self";
    futurepass: string;
    aud: string;
    exp: number;
    iat: number;
    iss: string;
    nonce?: string | undefined;
    s_hash?: string | undefined;
    at_hash?: string | undefined;
}, {
    sub: string;
    chainId: number;
    eoa: string;
    custodian: "fv" | "self";
    futurepass: string;
    aud: string;
    exp: number;
    iat: number;
    iss: string;
    nonce?: string | undefined;
    s_hash?: string | undefined;
    at_hash?: string | undefined;
}>;
export type IdentityToken = z.infer<typeof identityTokenSchema>;
export declare const userSchema: z.ZodObject<{
    eoa: z.ZodString;
    chainId: z.ZodNumber;
    custodian: z.ZodUnion<[z.ZodLiteral<"fv">, z.ZodLiteral<"self">]>;
    futurepass: z.ZodString;
}, "strip", z.ZodTypeAny, {
    chainId: number;
    eoa: string;
    custodian: "fv" | "self";
    futurepass: string;
}, {
    chainId: number;
    eoa: string;
    custodian: "fv" | "self";
    futurepass: string;
}>;
export type User = z.infer<typeof userSchema>;
export { OIDCUser };
export type LinkedAddress = {
    eoa: string;
    chainId: number;
};
export type UserSession = {
    eoa: string;
    chainId: number;
    custodian: Custodian;
    futurepass: string;
    linked: LinkedAddress[];
    user: OIDCUser | null;
};
export type CustodialAuthOption = {
    id: string;
    loginHint: string;
    name: string;
    subPrefix: string;
    iconUrls?: {
        white: string;
        fullcolor?: string;
    };
};
export type AuthFlowType = 'popup' | 'redirect' | 'silent';
export type OIDCResponseModes = 'query' | 'fragment' | 'form_post' | 'web_message';
export type SignInOptions<T = object> = {
    type?: string;
    address?: string;
    state?: T;
    signer?: SignerInterface;
    authFlow?: AuthFlowType;
    responseMode?: OIDCResponseModes;
} & Pick<ExtraSigninRequestArgs, 'extraQueryParams'>;
export type SignOutOptions = {
    onBeforeRedirect?: () => Promise<void>;
    flow?: 'silent' | 'redirect';
    disableConsent?: boolean;
    postRedirecturi?: string;
};

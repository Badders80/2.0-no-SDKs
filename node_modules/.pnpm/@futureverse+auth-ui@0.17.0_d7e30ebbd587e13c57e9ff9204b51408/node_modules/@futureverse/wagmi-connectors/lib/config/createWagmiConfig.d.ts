import { FutureverseAuthClient } from '@futureverse/auth';
import { SignedXamanPayloadResponse, XummPostPayloadResponse } from '@futureverse/signer';
import { MetaMaskParameters } from '@wagmi/connectors';
import { CreateConnectorFn, Storage } from '@wagmi/core';
import { Chain, HttpTransport } from 'viem';
import { TRNNode } from '../interface';
export type IConfigProps = {
    walletConnectProjectId?: string;
    xamanAPIKey?: string;
    xamanOnQRCode?: (qr: XummPostPayloadResponse) => void;
    xamanOnSigned?: (payload: SignedXamanPayloadResponse) => void;
    authClient: FutureverseAuthClient;
    ssr?: boolean;
    storage?: Storage;
    connectors?: CreateConnectorFn[];
    overrideConnectors?: CreateConnectorFn[];
    chains?: [Chain, ...Chain[]];
    metamaskDappMetadata?: Pick<MetaMaskParameters, 'dappMetadata'>['dappMetadata'];
    transports?: {
        [key: number]: HttpTransport;
    };
    trnNode?: TRNNode;
};
export declare const createWagmiConfig: ({ walletConnectProjectId, xamanAPIKey, xamanOnQRCode, xamanOnSigned, authClient, ssr, storage, connectors, overrideConnectors, chains, metamaskDappMetadata, transports, trnNode, }: IConfigProps) => Promise<import('@wagmi/core').Config<readonly [Chain, ...Chain[]], {
    [key: number]: HttpTransport;
}, (CreateConnectorFn<any, Record<string, unknown>, Record<string, unknown>> | CreateConnectorFn<import('@metamask/sdk').SDKProvider, {
    onConnect(connectInfo: import('viem').ProviderConnectInfo): void;
    onDisplayUri(uri: string): void;
}, Record<string, unknown>> | CreateConnectorFn<import('@coinbase/wallet-sdk').ProviderInterface & {
    close?(): void;
}, {
    connect(parameters?: {
        chainId?: number | undefined;
        instantOnboarding?: boolean | undefined;
        isReconnecting?: boolean | undefined;
    }): Promise<{
        accounts: readonly import('viem').Address[];
        chainId: number;
    }>;
}, Record<string, unknown>> | CreateConnectorFn<import('@walletconnect/ethereum-provider').default, {
    connect(parameters?: {
        chainId?: number | undefined;
        isReconnecting?: boolean | undefined;
        pairingTopic?: string | undefined;
    }): Promise<{
        accounts: readonly import('viem').Address[];
        chainId: number;
    }>;
    getNamespaceChainsIds(): number[];
    getRequestedChainsIds(): Promise<number[]>;
    isChainsStale(): Promise<boolean>;
    onConnect(connectInfo: import('viem').ProviderConnectInfo): void;
    onDisplayUri(uri: string): void;
    onSessionDelete(data: {
        topic: string;
    }): void;
    setRequestedChainsIds(chains: number[]): void;
    requestedChainsStorageKey: `${string}.requestedChains`;
}, {
    [x: `${string}.requestedChains`]: number[];
}>)[]>>;

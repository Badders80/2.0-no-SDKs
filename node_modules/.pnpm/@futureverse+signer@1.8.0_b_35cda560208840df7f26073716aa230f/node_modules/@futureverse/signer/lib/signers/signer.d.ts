import { ApiPromise } from '@polkadot/api';
import { Signature, Extrinsic, ExtrinsicPayload, VerifySignatureResponse, SignerInterface, SignableMessage, Hex, ByteArray } from '@futureverse/signer-core';
export declare abstract class Signer implements SignerInterface {
    abstract signMessage(message: SignableMessage, metadata?: object): Promise<Hex>;
    abstract getAddress(): Promise<string | undefined>;
    signPassOIDC(args: {
        idpURL: string;
        chainId: number;
        domain: string;
        address?: string;
    }): Promise<{
        hint: string;
        nonce?: string;
    }>;
    static verifySignature(message: SignableMessage, signature: Hex | ByteArray | Signature): Promise<VerifySignatureResponse>;
    verifySignature(message: SignableMessage, signature: Hex | ByteArray | Signature): Promise<VerifySignatureResponse>;
    signExtrinsic(api: ApiPromise, extrinsic: Extrinsic, sender: string): Promise<Extrinsic>;
    signPayload(payload: ExtrinsicPayload, extrinsic?: Extrinsic): Promise<Signature>;
    signExtrinsicWithPayload(_api: ApiPromise, extrinsic: Extrinsic, payload: ExtrinsicPayload, sender: string): Promise<Extrinsic>;
    private createExtrinsicPayload;
}
export declare function isValidSignature(signature: Signature): boolean;

import { Xumm as XamanClient } from 'xumm';
import { VerifySignatureResponse, Extrinsic, ExtrinsicPayload } from '@futureverse/signer-core';
import { Signer } from './signer';
import { ApiPromise } from '@polkadot/api';
import { Address, Hex, SignableMessage } from 'viem';
export type SignedXamanPayload = {
    Account: string;
    AccountTxnID: string;
    Memos: Memo[];
    SigningPubKey: string;
    TxnSignature: string;
};
export type SignedXamanPayloadResponse = {
    success: boolean;
    payload?: SignedXamanPayload;
    uuid: string;
};
export declare type XummQrQuality = 'm' | 'q' | 'h';
export interface XummPostPayloadResponse {
    uuid: string;
    next: {
        always: string;
        no_push_msg_received?: string;
    };
    refs: {
        qr_png: string;
        qr_matrix: string;
        qr_uri_quality_opts: XummQrQuality[];
        websocket_status: string;
    };
    pushed: boolean;
}
export interface XamanSignerEventMap {
    showQR: XummPostPayloadResponse;
    signed: SignedXamanPayloadResponse;
}
export type XamanSignerEvents = keyof XamanSignerEventMap;
export type XamanEventListener<T> = (args: T) => void;
export type Memo = {
    Memo: {
        MemoType: string;
        MemoData: string;
    };
};
export declare class XamanSigner extends Signer {
    client: XamanClient;
    private _listeners;
    constructor(client: XamanClient);
    getAddress(): Promise<string | undefined>;
    static verifySignature(message: SignableMessage, signature: Hex): Promise<{
        ethAddress: Address;
        accounts: string[];
    }>;
    verifySignedPayload(hex: string): {
        ethAddress: string;
        accounts: string[];
    };
    verifySignature(message: SignableMessage, signature: Hex): Promise<VerifySignatureResponse>;
    signXummPayload(payload: any): Promise<string>;
    signMessage(message: SignableMessage): Promise<`0x${string}`>;
    signPassOIDC(_: {
        idpURL: string;
        chainId: number;
        domain: string;
        address?: string;
    }): Promise<{
        hint: string;
    }>;
    signExtrinsicWithPayload(api: ApiPromise, extrinsic: Extrinsic, payload: ExtrinsicPayload, sender: string): Promise<Extrinsic>;
    signExtrinsic(api: ApiPromise, extrinsic: Extrinsic, sender: string): Promise<Extrinsic>;
    private generateSignedExtrinsic;
    private createSignatureOptions;
    private createSigningMemoData;
    subscribe<K extends XamanSignerEvents>(event: K, listener: XamanEventListener<XamanSignerEventMap[K]>): void;
    unsubscribe<K extends XamanSignerEvents>(event: K, listener: XamanEventListener<XamanSignerEventMap[K]>): void;
    private emit;
    static decodeSignedPayload(signedHexPayload: string): SignedXamanPayload;
    decodeSignedPayload(signedHexPayload: string): SignedXamanPayload;
    static deriveAddressPair(publicKey: string): string[];
}

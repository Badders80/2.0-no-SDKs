import { ApiPromise } from '@polkadot/api';
import { Signer } from '@futureverse/signer';
import { RootTransactionBuilder } from './base';
/**
 * The CrowdsaleBuilder class provides methods to build transactions for crowdsale pallet
 *
 * @param api - the trnApi to use for interaction
 * @param signer - the signer to use for signing transactions
 * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
 * @param saleId - the sale ID to use for interaction
 * @returns a CrowdsaleBuilder instance
 */
export declare class CrowdsaleBuilder extends RootTransactionBuilder {
    private _saleId;
    constructor(api: ApiPromise, signer: Signer, walletAddress: string, saleId: number);
    /**
     * Checks if a sale exists
     *
     * @returns true if the sale exists, false otherwise
     */
    protected exists(): Promise<boolean>;
    /**
     * Resets the CrowdsaleBuilder instance
     *
     * @param saleId - the sale ID to reset the instance with
     * @returns the CrowdsaleBuilder instance
     */
    reset(saleId: number): this;
    /**
     * Checks if a crowdsale exists
     *
     * @param api - the API to use for queries
     * @param saleId - the sale ID to check for
     * @returns true if the crowdsale exists, false otherwise
     */
    static crowdsaleExists(api: ApiPromise, saleId: number): Promise<boolean>;
    /**
     * Participates in the sale with the amount
     *
     * @param amount - the amount to participate with
     * @returns the CrowdsaleBuilder instance
     */
    participate(amount: bigint | number | string): CrowdsaleBuilder;
    /**
     * Redeems the voucher for the sale with the quantity
     *
     * @param quantity - the quantity to redeem
     * @returns the CrowdsaleBuilder instance
     */
    redeem(quantity: number): CrowdsaleBuilder;
    /**
     * Claims the voucher for the sale
     *
     * @returns the CrowdsaleBuilder instance
     */
    claim(): CrowdsaleBuilder;
}

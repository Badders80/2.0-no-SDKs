import { ApiPromise } from '@polkadot/api';
import { Signer } from '@futureverse/signer';
import { BatchBuilder } from './batch';
import { CustomExtrinsicBuilder } from './custom';
import { CrowdsaleBuilder } from './crowdsale';
import { AssetBuilder } from './assets';
import { NftBuilder } from './nft';
import { RemarkBuilder } from './remark';
import { SftBuilder } from './sft';
import { EvmBuilder } from './evm';
import { RootTransactionBuilder } from './base';
export type BuilderType = 'nft' | 'sft' | 'asset' | 'crowdsale' | 'custom' | 'batch' | 'evm' | 'remark';
export type TransactionBuilderType = NftBuilder | SftBuilder | AssetBuilder | CrowdsaleBuilder | CustomExtrinsicBuilder | BatchBuilder | RemarkBuilder;
/**
 * The TransactionBuilder class provides static methods to build transactions for various pallets on The Root Network
 *
 * @param api - the trnApi to use for interaction
 * @param signer - the signer to use for signing transactions
 * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
 * @returns a TransactionBuilder instance
 */
export declare class TransactionBuilder extends RootTransactionBuilder {
    /**
     * Constructor for the TransactionBuilder
     *
     * @param api - the trnApi to use for interaction
     * @param signer - the signer to use for signing transactions
     * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
     */
    constructor(api: ApiPromise, signer: Signer, walletAddress: string);
    /**
     * Returns true always
     *
     * @returns always true
     */
    protected exists(): Promise<boolean>;
    /**
     * Creates an NftBuilder class instance - this provides methods to build transactions for NFT pallet
     *
     * @param api - the trnApi to use for interaction
     * @param signer - the signer to use for signing transactions
     * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
     * @param collectionId - the Collection ID to target
     * @returns the TransactionBuilder instance
     **/
    static nft(api: ApiPromise, signer: Signer, walletAddress: string, collectionId?: number): NftBuilder;
    /**
     * Creates an SftBuilder class instance - this provides methods to build transactions for SFT pallet
     *
     * @param api - the trnApi to use for interaction
     * @param signer - the signer to use for signing transactions
     * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
     * @param collectionId - the Collection ID to target
     * @returns the SftBuilder instance
     **/
    static sft(api: ApiPromise, signer: Signer, walletAddress: string, collectionId?: number): SftBuilder;
    /**
     * Creates an AssetBuilder class instance - this provides methods to build transactions for assets pallet
     *
     * @param api - the trnApi to use for interaction
     * @param signer - the signer to use for signing transactions
     * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
     * @param assetId - the asset ID to use
     * @returns an AssetBuilder instance
     */
    static asset(api: ApiPromise, signer: Signer, walletAddress: string, assetId: number): AssetBuilder;
    /**
     * Creates a crowdsale builder class instance - this provides methods to build transactions for crowdsale pallet
     *
     * @param api - the trnApi to use for interaction
     * @param signer - the signer to use for signing transactions
     * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
     * @param saleId - the Sale ID to target
     * @returns the CrowdsaleBuilder instance
     **/
    static crowdsale(api: ApiPromise, signer: Signer, walletAddress: string, saleId: number): CrowdsaleBuilder;
    /**
     * Creates a custom extrinsic builder instance - this provides methods to build transactions using extrinsics passed in by the user to make use of other methods of the library
     *
     * @param api - the trnApi to use for interaction
     * @param signer - the signer to use for signing transactions
     * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
     * @returns the CustomExtrinsicBuilder instance
     **/
    static custom(api: ApiPromise, signer: Signer, walletAddress: string): CustomExtrinsicBuilder;
    /**
     * Creates a BatchBuilder class instance - this provides methods to build transactions for utility pallet batch extrinsics
     *
     * @param api - the trnApi to use for interaction
     * @param signer - the signer to use for signing transactions
     * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
     * @returns a BatchBuilder instance
     */
    static batch(api: ApiPromise, signer: Signer, walletAddress: string): BatchBuilder;
    /**
     * Creates a remark builder class instance - this provides methods to build transactions for system pallet remark extrinsics
     *
     * @param api - the trnApi to use for interaction
     * @param signer - the signer to use for signing transactions
     * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
     * @returns the RemarkBuilder instance
     **/
    static remark(api: ApiPromise, signer: Signer, walletAddress: string): RemarkBuilder;
    /**
     * Creates an EVM builder class instance - this provides methods to build transactions for EVM pallet
     *
     * @param api - the trnApi to use for interaction
     * @param signer - the signer to use for signing transactions
     * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
     * @param contractAddress - the contract address to use for interaction
     * @returns an EvmBuilder instance
     * @note the Evm Builder Class acts differently from the other builders in relation to the FuturePass and FeeProxy logic =>
     *       you need to to set the fromFuturePass flag to true when calling the writeContract method to use the FuturePass
     **/
    static evm(api: ApiPromise, signer: Signer, walletAddress: string, contractAddress?: string): EvmBuilder;
}

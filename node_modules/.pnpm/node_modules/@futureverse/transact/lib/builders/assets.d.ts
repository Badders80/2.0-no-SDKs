import { ApiPromise } from '@polkadot/api';
import { Signer } from '@futureverse/signer';
import { RootTransactionBuilder } from './base';
/**
 * The AssetBuilder class provides methods to build transactions for assets pallet
 *
 * @param api - the trnApi to use for interaction
 * @param signer - the signer to use for signing transactions
 * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
 * @param assetId - the asset ID to use
 * @returns an AssetBuilder instance
 */
export declare class AssetBuilder extends RootTransactionBuilder {
    private _assetId;
    constructor(api: ApiPromise, signer: Signer, walletAddress: string, assetId: number);
    /**
     * Used by child classes to check if the asset ID exists
     *
     * @returns a boolean
     */
    protected exists(): Promise<boolean>;
    /**
     * Resets the AssetBuilder instance
     *
     * @param assetId - the asset ID to reset the instance with
     * @returns the AssetBuilder instance
     */
    reset(assetId: number): this;
    /**
     * Checks if an asset exists
     *
     * @param api - the API to use for queries
     * @param assetId - the asset ID to check for
     * @returns true if the asset exists, false otherwise
     */
    static assetExists(api: ApiPromise, assetId: number): Promise<boolean>;
    /**
     * Transfer an asset to a destination address
     *
     * @param destinationAddress - the destination address wallet address to transfer to
     * @param amount - the amount to transfer. Can be a number, bigint or string but must be a valid number including decimals. For example, if you are transferring `1.3` Tokens with a
     * precision of 6 decimals, you should pass in `1300000` as the amount.
     * @returns the AssetBuilder instance
     */
    transfer({ destinationAddress, amount, }: {
        destinationAddress: `0x${string}` | string;
        amount: number | bigint | string;
    }): AssetBuilder;
}

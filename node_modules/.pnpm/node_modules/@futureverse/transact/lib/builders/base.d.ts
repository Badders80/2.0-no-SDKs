import { ApiPromise, SubmittableResult } from '@polkadot/api';
import { BN } from '@polkadot/util';
import { GenericSignerPayload } from '@polkadot/types';
import { Signer } from '@futureverse/signer';
import { SubmittableExtrinsic } from '@polkadot/api/types';
import { EventRecord } from '@polkadot/types/interfaces/types';
import { IGetBalance, IGetBalances, RootQueryBuilder } from '../queries/base';
export type Extrinsic = SubmittableExtrinsic<'promise'>;
export type Signature = Uint8Array | `0x${string}`;
export declare const XRP_ASSET_ID = 2;
export declare const TOKEN_DECIMALS = 6;
export declare const TOKEN_NAME = "XRP";
export type ExtrinsicEvent = {
    phase: 'ApplyExtrinsic' | 'Finalization' | 'Initialization';
    name: string;
    data: Record<string, unknown>;
};
export type ExtrinsicPayload = {
    ethPayload: Signature;
    trnPayload: GenericSignerPayload;
};
export type ExtrinsicResult = {
    extrinsicId: string;
    transactionHash: string;
    result: SubmittableResult;
};
export type AmountsIn = {
    Ok: [number, number];
};
export interface TransactionBuilderParams {
    api: ApiPromise;
    signer: Signer;
    walletAddress: string;
}
/**
 * The RootTransactionBuilder class provides methods to build transactions for The Root Network
 * This is the base class for all transaction builders
 *
 * @param api - the trnApi to use for interaction
 * @param signer - the signer to use for signing transactions
 * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
 * @returns a RootTransactionBuilder instance
 */
export declare abstract class RootTransactionBuilder {
    readonly api: ApiPromise;
    readonly signer: Signer;
    readonly walletAddress: string;
    readonly queryBuilder: RootQueryBuilder;
    protected _baseExtrinsic: Extrinsic | null;
    protected _extrinsicToSend: Extrinsic | null;
    protected _futurePassWrapped: boolean;
    protected _feeProxyWrapped: boolean;
    protected _xamanWrapped: boolean;
    protected _ethPayload: Signature | null;
    protected _trnPayload: GenericSignerPayload | null;
    protected _gasFee: string;
    protected _gasToken: number;
    protected _gasString: string;
    protected _tokenDecimals: number;
    constructor(api: ApiPromise, signer: Signer, walletAddress: string);
    protected abstract exists(): Promise<boolean>;
    /**
     * Resets the RootTransactionBuilder Instance
     *
     * @returns the RootTransactionBuilder Instance
     */
    resetBase(): this;
    /**
     * Used internally by Root and Child Classes to check if the asset ID, collection ID or sale ID etc exists
     *
     * @returns a boolean
     */
    checks(): Promise<boolean>;
    /**
     * Sets the base extrinsic - used internally by Root and Child Classes
     *
     * @param extrinsic - the extrinsic to set as the base
     * @returns the RootTransactionBuilder Instance
     */
    protected setBaseExtrinsic(extrinsic: Extrinsic): RootTransactionBuilder;
    /**
     * Gets the base extrinsic - used internally by Root and Child Classes
     *
     * @returns the base extrinsic
     */
    protected getBaseExtrinsic(): Extrinsic | null;
    /**
     * Helper function to add a FuturePass Proxy to the extrinsic
     *
     * @param futurePass - the future pass to proxy the extrinsic through
     * @returns the RootTransactionBuilder Instance
     */
    addFuturePass(futurePass: string): Promise<RootTransactionBuilder>;
    /**
     * Helper function to add a FeeProxy to the extrinsic
     *
     * @param assetId - the asset ID to pay the fee in (1 for ROOT, 2 for XRP etc)
     * @param slippage - the slippage to use for the fee - in percentage
     * @returns the RootTransactionBuilder Instance
     */
    addFeeProxy({ assetId, slippage, }: {
        assetId: number;
        slippage: number;
    }): Promise<RootTransactionBuilder>;
    /**
     * Helper function to add a FuturePass & Fee Proxy to the extrinsic
     *
     * @param futurePass - the future pass to proxy the extrinsic through
     * @param assetId - the asset ID to pay the fee in (1 for ROOT, 2 for XRP etc)
     * @param slippage - the slippage to use for the fee - in percentage
     * @returns the RootTransactionBuilder Instance
     */
    addFuturePassAndFeeProxy({ futurePass, assetId, slippage, }: {
        futurePass: string;
        assetId: number;
        slippage: number;
    }): Promise<RootTransactionBuilder>;
    /**
     * Helper function to get the payloads for the extrinsic
     *
     * @returns the ExtrinsicPayload instance
     */
    getPayloads(): Promise<ExtrinsicPayload>;
    /**
     * Gets the gas fees for the extrinsic
     *
     * @returns { gasString: string, gasFee: string, tokenDecimals: number }
     */
    getGasFees(): Promise<{
        gasString: string;
        gasFee: string;
        tokenDecimals: number;
    }>;
    /**
     * Returns a signed extrinsic
     *
     * @returns the Signed Extrinsic
     */
    sign(): Promise<Extrinsic>;
    /**
     * Signs and sends the extrinsic
     *
     * @param onSign - callback function to call when extrinsic is signed
     * @param onSend - callback function to call when extrinsic is sent
     * @returns the ExtrinsicResult instance
     */
    signAndSend(opts?: {
        onSign?: () => void;
        onSend?: () => void;
    }): Promise<ExtrinsicResult>;
    /**
     * Gets the extrinsic to send
     *
     * @returns the Extrinsic to send
     */
    getExtrinsicToSend(): Extrinsic | null;
    /**
     * Filters extrinsic events
     *
     * @param events - the events to filter
     * @param names - the names to filter by
     * @returns the filtered events
     */
    filterExtrinsicEvents({ events, names, }: {
        events: EventRecord[];
        names: `${string}.${string}`[];
    }): EventRecord[];
    /**
     * Generates the extrinsic payloads - used internally by Root and Child Classes
     *
     * @param method - the method to generate the payloads for
     * @param options - the options to use
     * @returns the ExtrinsicPayload instance
     */
    protected generateExtrinsicPayloads(method: unknown, options?: unknown): Promise<ExtrinsicPayload>;
    /**
     * Validates the that the API, Signer and Wallet Address are present - used internally by Root and Child Classes
     *
     * @returns void
     */
    protected validateConnections(): void;
    /**
     * Helper function to wrap the extrinsic in a FeeProxy - used internally by Root and Child Classes
     *
     * @param extrinsic - the extrinsic to wrap
     * @param assetId - the asset ID to pay the fee in (1 for ROOT, 2 for XRP etc)
     * @param slippage - the slippage to use for the fee - in percentage
     * @returns the FeeProxyExtrinsic and the maxPayment
     */
    protected feeProxyLogic(extrinsic: Extrinsic, senderAddress: string, assetId: number, slippage: number): Promise<{
        feeProxyCall: Extrinsic;
        maxPayment: bigint;
    }>;
    /**
     * Helper function to wrap the extrinsic in a FuturePass - used internally by Root and Child Classes
     *
     * @param futurePass - the future pass to proxy the extrinsic through
     * @param assetId - the asset ID to pay the fee in (1 for ROOT, 2 for XRP etc)
     * @param slippage - the slippage to use for the fee - in percentage
     * @returns the FuturePassExtrinsic and the maxPayment
     */
    protected futurepassLogic(futurePass: string, assetId: number, slippage: number): Promise<{
        futurePassExtrinsic: Extrinsic;
        maxPayment: bigint;
    }>;
    /**
     * Gets the payment info for the extrinsic - used internally by Root and Child Classes
     *
     * @param extrinsic - the extrinsic to get the payment info for
     * @param senderAddress - the sender address to get the payment info for
     * @param assetId - the asset ID to get the payment info for
     * @param slippage - the slippage to use for the payment info
     * @returns the payment info
     */
    protected getPaymentInfo(extrinsic: Extrinsic, senderAddress: string, assetId: number, slippage?: number): Promise<bigint>;
    /**
     * Sets the gas info
     *
     * @param gasString - the gas string to set
     * @param gasFee - the gas fee to set
     * @param tokenDecimals - the token decimals
     *
     */
    protected setGasInfo(estimatedFee: string): Promise<void>;
    /**
     * Helper function to create a fake Xaman call when needing to estimate gas fees - used internally by Root and Child Classes when using Xaman Signer
     *
     * @param extrinsic
     * @returns
     */
    protected getXamanCall(extrinsic: Extrinsic): SubmittableExtrinsic<"promise", import('@polkadot/types/types').ISubmittableResult>;
    /**
     * Sets the Gas Fee
     *
     * @param gasFee - the gas fee to set
     */
    protected setGasFee(gasFee: string): void;
    /**
     * Unscale a value by the decimals - used internally by Root and Child Classes
     *
     * @param value - the value to unscale
     * @param decimals - the decimals to unscale by
     * @returns the unscaled value
     */
    protected unscaleBy(value: string | number | BN, decimals: number): string[];
    /**
     * Gets the gas fee string - used internally by Root and Child Classes
     *
     * @param estimatedFee - the estimated fee to get the gas fee string for
     * @param tokenDecimals - the token decimals to use
     * @param gasToken - the gas token to use
     * @returns the gas fee string
     */
    protected getGas(estimatedFee: string, tokenDecimals?: number, gasToken?: string): string;
    /**
     * Sends the extrinsic - used internally by Root and Child Classes to send the extrinsic
     *
     * @param api - the API to use
     * @param signedExtrinsic - the signed extrinsic to send
     * @returns the ExtrinsicResult instance
     */
    protected sendExtrinsic({ api, signedExtrinsic, }: {
        api: ApiPromise;
        signedExtrinsic: Extrinsic;
    }): Promise<ExtrinsicResult>;
    /**
     * Gets the balance of an asset
     * Wallet address is optional, if not provided, the wallet address of the instance will be used
     *
     * @param walletAddress - (optional) the wallet address to get the balance for
     * @param assetId - the asset ID to get the balance for
     * @returns the balance of the asset
     *
     */
    checkBalance({ walletAddress, assetId, }: {
        walletAddress?: string;
        assetId: number;
    }): Promise<IGetBalance>;
    /**
     * Checks the balances of multiple assets for given wallet addresses
     * Wallet address is optional, if not provided, the wallet address of the instance will be used
     *
     * @param walletAddressAssetIds - the [walletAddresses, assetId] pair to check balances for
     * @returns the balances of the assets
     * @throws an error if the API is not connected or if the wallet address and asset IDs are not provided
     */
    checkBalances(walletAddressAssetIds: {
        walletAddress?: string;
        assetId: number;
    }[]): Promise<IGetBalances>;
    /**
     * Gets the FuturePass for the wallet address
     * Wallet address is optional, if not provided, the wallet address of the instance will be used
     *
     * @param walletAddress - (optional) the wallet address to get the FuturePass for
     * @returns the FuturePass for the wallet address
     * @throws an error if the API is not connected or if the wallet address is not provided
     */
    getFuturePass(walletAddress?: string): Promise<string>;
    /**
     * Gets the amounts in for a given asset ID
     *
     * @param amount - the amount to get the amounts in for
     * @param assetId - the asset ID to get the amounts in for
     * @param slippage - the slippage to use for the amounts in
     * @returns the amounts in for the asset
     */
    getAmountsIn(amount: string, assetId: number, slippage?: number): Promise<bigint>;
}

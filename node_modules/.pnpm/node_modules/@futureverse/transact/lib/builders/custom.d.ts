import { ApiPromise } from '@polkadot/api';
import { Extrinsic, Signer } from '@futureverse/signer';
import { RootTransactionBuilder } from './base';
/**
 * The CustomExtrinsicBuilder class provides methods to build transactions using extrinsics passed in by the user to make use of other methods of the library
 *
 * @param api - the trnApi to use for interaction
 * @param signer - the signer to use for signing transactions
 * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
 * @returns a CustomExtrinsicBuilder instance
 */
export declare class CustomExtrinsicBuilder extends RootTransactionBuilder {
    constructor(api: ApiPromise, signer: Signer, walletAddress: string);
    /**
     * Checks if a custom extrinsic exists
     * @returns true if the custom extrinsic exists, false otherwise
     * @note This always returns true
     */
    protected exists(): Promise<boolean>;
    /**
     * Resets the CustomExtrinsicBuilder instance
     *
     * @returns the CustomExtrinsicBuilder instance
     */
    reset(): this;
    /**
     * @deprecated Use `fromExtrinsic` instead
     */
    extrinsic(extrinsic: Extrinsic): CustomExtrinsicBuilder;
    /**
     * Sets the base extrinsic to the Custom Builder
     *
     * @param extrinsic - the extrinsic to include in the transaction
     * @returns the CustomExtrinsicBuilder instance
     */
    fromExtrinsic(extrinsic: Extrinsic): CustomExtrinsicBuilder;
}

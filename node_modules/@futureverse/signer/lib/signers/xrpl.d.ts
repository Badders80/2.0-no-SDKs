import { Wallet } from 'xrpl';
import { Address, Hex, SignableMessage } from 'viem';
import { VerifySignatureResponse } from '@futureverse/signer-core';
import { Signer } from './signer';
export declare class XRPLSigner extends Signer {
    wallet: Wallet;
    constructor(wallet: Wallet);
    /**
     * Signs a message using XRPL wallet.
     *
     * @param message - The message to be signed.
     * @returns The signed message in hexadecimal format.
     * @throws Error if XRPL wallet is not found.
     */
    signMessage(message: SignableMessage): Promise<Hex>;
    /**
     * Verifies the signature of a signable message.
     *
     * @param message - The signable message to verify.
     * @param signature - The signature to verify against the message.
     * @throws {Error} If the transaction is missing a signature or the message does not match.
     * @returns An object containing the Ethereum address and XRPL account associated with the signature.
     */
    static verifySignature(message: SignableMessage, signature: Hex): Promise<{
        ethAddress: Address;
        accounts: string[];
    }>;
    verifySignature(message: SignableMessage, signature: Hex): Promise<VerifySignatureResponse>;
    /**
     * Retrieves the address associated with the XRPL wallet.
     *
     * @returns A promise that resolves to a string representing the XRPL wallet address, or undefined if the wallet is not found.
     * @throws An error with the message 'XRPL wallet not found' if the wallet is not available.
     */
    getAddress(): Promise<string | undefined>;
}

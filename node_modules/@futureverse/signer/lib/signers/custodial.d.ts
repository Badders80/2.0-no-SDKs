import { SignableMessage } from 'viem';
import { Signer } from './signer';
export declare class FutureverseCustodialSigner extends Signer {
    private readonly _pending;
    private _reqId;
    private _signerURL;
    private _idpUrl;
    private _eoa?;
    private _popup;
    private _listener;
    constructor(signerURL: string, idpUrl: string, eoa?: string);
    protected receiveMessage(msg: RPCMessagePayloadResponse): void;
    getAddress(): Promise<string | undefined>;
    signMessage(message: SignableMessage, metadata?: object): Promise<`0x${string}`>;
    signTransaction(transaction: string): Promise<string>;
    protected makeRequest<K extends RPCRequestType>(_k: K, payload: RPCRequest[K], onEvent?: (event: RPCEventInterfaceRequired | RPCEventPending) => void, abortSignal?: AbortSignal): Promise<string>;
    private postMessage;
    private cancelAll;
}
type RPCErrorInvalidSigner = {
    code: 'INVALID_SIGNER';
    actual?: string;
    expected?: string;
};
type RPCErrorRejected = {
    code: 'USER_REJECTED';
};
type RPCEventPending = {
    type: 'PENDING';
    connector: string;
};
type RPCEventInterfaceRequired = {
    type: 'INTERFACE_REQUIRED';
};
type RPCTransactionRequest = {
    tag: 'fv/sign-tx';
    account: string;
    transaction: string;
    idpUrl: string;
    metadata?: object;
};
type RPCSignMessageRequest = {
    tag: 'fv/sign-msg';
    account: string;
    message: string;
    idpUrl: string;
    metadata?: object;
};
type RPCSignResponse = {
    signature: string;
};
type RPCRequestType = 'signMessage' | 'signTransaction';
type RPCRequest = {
    signMessage: RPCSignMessageRequest;
    signTransaction: RPCTransactionRequest;
};
type RPCRequestTag = 'fv/sign-msg' | 'fv/sign-tx';
type RPCPayloadError = {
    tag: 'error';
    error: RPCErrorRejected | RPCErrorInvalidSigner;
};
type RPCPayloadEvent = {
    tag: 'event';
    event: RPCEventInterfaceRequired | RPCEventPending;
};
type RPCPayloadResponse = {
    tag: 'response';
    response: RPCSignResponse;
};
type RPCMessagePayloadResponse = {
    id: string;
    tag: RPCRequestTag;
    payload: RPCPayloadError | RPCPayloadEvent | RPCPayloadResponse;
};
export {};

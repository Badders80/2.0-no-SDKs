import { SubmittableExtrinsic } from '@polkadot/api/types';
import { GenericSignerPayload } from '@polkadot/types';
import { ISubmittableResult } from '@polkadot/types/types';
import { ApiPromise } from '@polkadot/api';
export type Signature = Uint8Array | `0x${string}`;
export type Extrinsic = SubmittableExtrinsic<'promise'>;
export type ExtrinsicPayload = {
    ethPayload: Signature;
    trnPayload: GenericSignerPayload;
};
export type ExtrinsicResult = {
    extrinsicId: string;
    transactionHash: string;
    result: ISubmittableResult;
};
export interface AmountsIn {
    Ok: [number, number];
}
export type VerifySignatureResponse = {
    ethAddress: Hex;
    accounts?: string[];
};
export interface SignerInterface {
    getAddress(): Promise<string | undefined>;
    signMessage(message: SignableMessage, metadata?: object): Promise<Hex>;
    signPassOIDC(args: {
        idpURL: string;
        chainId: number;
        domain?: string;
        address?: string;
    }): Promise<{
        hint: string;
        nonce?: string;
    }>;
    verifySignature(message: SignableMessage, signature: Hex | ByteArray | Signature): Promise<VerifySignatureResponse>;
    signExtrinsic(api: ApiPromise, extrinsic: Extrinsic, sender: string): Promise<Extrinsic>;
    signPayload(payload: ExtrinsicPayload): Promise<Signature>;
}
export type SignableMessage = string | {
    /** Raw data representation of the message. */
    raw: Hex | ByteArray;
};
export type ByteArray = Uint8Array;
export type Hex = `0x${string}`;
export type Address = `0x${string}`;

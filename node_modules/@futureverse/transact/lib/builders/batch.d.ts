import { ApiPromise } from '@polkadot/api';
import { Extrinsic, Signer } from '@futureverse/signer';
import { RootTransactionBuilder } from './base';
/**
 * The BatchBuilder class provides methods to build transactions for utility pallet batch extrinsics
 *
 * @param api - the trnApi to use for interaction
 * @param signer - the signer to use for signing transactions
 * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
 * @returns a BatchBuilder instance
 */
export declare class BatchBuilder extends RootTransactionBuilder {
    private extrinsics;
    constructor(api: ApiPromise, signer: Signer, walletAddress: string);
    /**
     * Use by child classes
     *
     * @returns always true
     */
    protected exists(): Promise<boolean>;
    /**
     * Resets the BatchBuilder instance
     *
     * @returns the BatchBuilder instance
     */
    reset(): this;
    /**
     * Builds a batch with the provided extrinsics and sets the base extrinsic to the batch
     *
     * @param extrinsics - the extrinsics to include in the single transaction
     * @returns the BatchBuilder instance
     * @note This will batch all extrinsics into a single transaction, this is will finalise and succeed regardless of any extrinsic in the batch failing
     */
    batchWithExtrinsics(extrinsics: Extrinsic[]): BatchBuilder;
    /**
     * Batch all extrinsics set into a single transaction and sets the base extrinsic to the batch
     *
     * @returns the BatchBuilder instance
     * @note This will batch all extrinsics into a single transaction, if any extrinsic fails, the entire transaction will fail
     */
    batch(): BatchBuilder;
    /**
     * Builds a batch with the provided extrinsics and sets the base extrinsic to the batchAll extrinsic
     *
     * @param extrinsics - the extrinsics to include in the single transaction
     * @returns the BatchBuilder instance
     * @note This will batch all extrinsics into a single transaction, if any extrinsic fails, the entire transaction will fail
     */
    batchAllWithExtrinsics(extrinsics: Extrinsic[]): BatchBuilder;
    /**
     * Batch all extrinsics set into a single transaction and sets the base extrinsic to the batchAll extrinsic
     *
     * @returns the BatchBuilder instance
     * @note This will batch all extrinsics into a single transaction, if any extrinsic fails, the entire transaction will fail
     */
    batchAll(): BatchBuilder;
    /**
     * Adds an extrinsic to be used in a batch or batchAll call
     *
     * @param extrinsic - the extrinsic to add to the batch
     * @returns the BatchBuilder instance
     */
    addExtrinsic(extrinsic: Extrinsic): BatchBuilder;
    /**
     * Adds multiple extrinsics to be used in a batch or batchAll call
     *
     * @param extrinsics - the extrinsics to add to the batch
     * @returns the BatchBuilder instance
     */
    addExtrinsics(extrinsics: Extrinsic[]): BatchBuilder;
    /**
     * Checks if the batch limit has been reached - throws an error if the limit has been reached
     *
     * @param qtyToAdd - the number of extrinsics to add to the batch
     * @param batchOverride - the number of extrinsics to add to the batch, if different from the current batch size
     * @throws an error if the batch limit has been reached
     */
    protected checkBatchLimit(qtyToAdd: number, batchOverride?: number): void;
    /**
     * Sets the extrinsics for the batch
     *
     * @param extrinsics - the extrinsics to include in the single transaction
     */
    protected setExtrinsics(extrinsics: Extrinsic[]): void;
    /**
     * Gets the extrinsics for the batch
     *
     * @returns the extrinsics for the batch
     */
    protected getExtrinsics(): Extrinsic[];
}

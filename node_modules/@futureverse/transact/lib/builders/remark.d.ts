import { ApiPromise } from '@polkadot/api';
import { Signer } from '@futureverse/signer';
import { RootTransactionBuilder } from './base';
/**
 * The RemarkBuilder class provides methods to build transactions for system pallet remark extrinsics
 *
 * @param api - the trnApi to use for interaction
 * @param signer - the signer to use for signing transactions
 * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
 * @returns a RemarkBuilder instance
 */
export declare class RemarkBuilder extends RootTransactionBuilder {
    constructor(api: ApiPromise, signer: Signer, walletAddress: string);
    /**
     * Checks if a remark exists - always returns true
     *
     * @returns always true
     */
    protected exists(): Promise<boolean>;
    /**
     * Resets the RemarkBuilder instance
     *
     * @returns the RemarkBuilder
     */
    reset(): this;
    /**
     * Sends a message in a remark extrinsic
     *
     * @param message - the message to include in the remark
     * @returns the RemarkBuilder instance
     */
    message(message: string): RemarkBuilder;
}

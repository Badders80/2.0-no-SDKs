import { ApiPromise } from '@polkadot/api';
import { Signer } from '@futureverse/signer';
import { RootTransactionBuilder } from './base';
import { Vec } from '@polkadot/types';
import { ITuple } from '@polkadot/types/types';
import { SeedPrimitivesSignatureAccountId20 } from '@polkadot/types/lookup';
import { Permill } from '@polkadot/types/interfaces';
type ISerialNumbers = {
    tokenId: number;
    quantity: bigint | string | number;
}[];
/**
 * The SftBuilder class provides methods to build transactions for SFT pallet
 *
 * @param api - the trnApi to use for interaction
 * @param signer - the signer to use for signing transactions
 * @param walletAddress - the wallet address to use for interaction - should be the EOA address for the signer, not the FuturePass address
 * @param collectionId - optional - the collection ID to use
 * @returns an SftBuilder instance
 */
export declare class SftBuilder extends RootTransactionBuilder {
    private _collectionId;
    constructor(api: ApiPromise, signer: Signer, walletAddressAddress: string, collectionId?: number);
    /**
     * Checks if an SFT exists
     *
     * @param api - the API to use for queries
     * @param collectionId - the collection ID to check for
     * @returns true if the SFT exists, false otherwise
     */
    static sftExists(api: ApiPromise, collectionId: number): Promise<boolean>;
    /**
     * Checks if an SFT exists
     *
     * @returns true if the SFT exists, false otherwise
     */
    protected exists(): Promise<boolean>;
    /**
     * Resets the SftBuilder instance
     *
     * @param collectionId - optional - the collection ID to reset the instance with
     * @returns the SftBuilder instance
     */
    reset(collectionId?: number): this;
    /**
     * Mints SFTs with the given serial numbers and quantities
     *
     * @param serialNumbers - the serial numbers of the SFTs to mint... Each element in the array should be an object with a tokenId and quantity property
     * @param walletAddress - the wallet address to mint the SFTs to
     * @returns the SftBuilder instance
     */
    mint({ serialNumbers, walletAddress, }: {
        serialNumbers: ISerialNumbers;
        walletAddress: string;
    }): SftBuilder;
    /**
     * Transfers SFTs with the given serial numbers and quantities to the given wallet address
     *
     * @param serialNumbers - the serial numbers of the SFTs to transfer... Each element in the array should be an object with a tokenId and quantity property
     * @param walletAddress - the walletAddress to transfer the SFTs to
     * @returns the SftBuilder instance
     */
    transfer({ serialNumbers, walletAddress, }: {
        serialNumbers: ISerialNumbers;
        walletAddress: string;
    }): SftBuilder;
    /**
     * Burns SFTs with the given serial numbers and quantities
     *
     * @param {ISerialNumbers} serialNumbers - the serial numbers of SFTs to burn
     * @returns the SftBuilder instance
     */
    burn({ serialNumbers, }: {
        serialNumbers: ISerialNumbers;
    }): SftBuilder;
    /**
     * Create a new SFT Collection
     *
     * @param collectionName - the name of the collection
     * @param collectionOwner - the owner of the collection
     * @param metadataUri - the metadata URI of the collection
     * @param royalties - the royalties of the collection
     * @returns the SftBuilder instance
     */
    createCollection({ collectionName, collectionOwner, metadataUri, royalties, }: {
        collectionName: string;
        collectionOwner?: string | null;
        metadataUri: string;
        royalties?: null | Vec<ITuple<[SeedPrimitivesSignatureAccountId20, Permill]>> | Array<[SeedPrimitivesSignatureAccountId20, Permill | number]>;
    }): SftBuilder;
    /**
     * Create a new SFT Token for Collection
     *
     * @param collectionName - the name of the collection
     * @param initialIssuance - (optional) - the initial issuance of the collection
     * @param maxIssuance - the maximum issuance of the collection
     * @param tokenOwner - the owner of the tokens initially minted
     * @returns the SftBuilder instance
     */
    createToken({ tokenName, initialIssuance, maxIssuance, tokenOwner, }: {
        tokenName: string;
        initialIssuance?: number | bigint | string | null;
        maxIssuance?: number | bigint | string | null;
        tokenOwner?: string | null;
    }): SftBuilder;
    /**
     * Sets the price for minting SFTs in a collection
     *
     * @param tokenId - the token ID to set the price for
     * @param assetId - the asset ID to set the price for
     * @param price -  the price to update to - can be a number, bigint or string but must be a valid number including decimals.
     * For example, if you are setting the mint fee to `1.3` Tokens with a precision of 6 decimals, you should pass in `1300000` as the price.
     * @returns the SftBuilder instance
     */
    setPrice({ tokenId, assetId, price, }: {
        tokenId: number | bigint;
        assetId?: number | bigint;
        price?: number | bigint | string;
    }): Promise<SftBuilder>;
    /**
     * Toggle public minting on or off
     *
     * @param publicMintEnabled - value to set public minting to
     * @returns the SftBuilder instance
     */
    togglePublicMint(tokenId: number | bigint, publicMintEnabled: boolean): SftBuilder;
}
export {};

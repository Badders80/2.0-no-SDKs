declare const _default: {
    /**
     * Lookup0: seed_primitives::signature::AccountId20
     **/
    SeedPrimitivesSignatureAccountId20: string;
    /**
     * Lookup3: frame_system::AccountInfo<Nonce, pallet_balances::types::AccountData<Balance>>
     **/
    FrameSystemAccountInfo: {
        nonce: string;
        consumers: string;
        providers: string;
        sufficients: string;
        data: string;
    };
    /**
     * Lookup5: pallet_balances::types::AccountData<Balance>
     **/
    PalletBalancesAccountData: {
        free: string;
        reserved: string;
        frozen: string;
        flags: string;
    };
    /**
     * Lookup8: frame_support::dispatch::PerDispatchClass<sp_weights::weight_v2::Weight>
     **/
    FrameSupportDispatchPerDispatchClassWeight: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup9: sp_weights::weight_v2::Weight
     **/
    SpWeightsWeightV2Weight: {
        refTime: string;
        proofSize: string;
    };
    /**
     * Lookup15: sp_runtime::generic::digest::Digest
     **/
    SpRuntimeDigest: {
        logs: string;
    };
    /**
     * Lookup17: sp_runtime::generic::digest::DigestItem
     **/
    SpRuntimeDigestDigestItem: {
        _enum: {
            Other: string;
            __Unused1: string;
            __Unused2: string;
            __Unused3: string;
            Consensus: string;
            Seal: string;
            PreRuntime: string;
            __Unused7: string;
            RuntimeEnvironmentUpdated: string;
        };
    };
    /**
     * Lookup20: frame_system::EventRecord<seed_runtime::RuntimeEvent, primitive_types::H256>
     **/
    FrameSystemEventRecord: {
        phase: string;
        event: string;
        topics: string;
    };
    /**
     * Lookup22: frame_system::pallet::Event<T>
     **/
    FrameSystemEvent: {
        _enum: {
            ExtrinsicSuccess: {
                dispatchInfo: string;
            };
            ExtrinsicFailed: {
                dispatchError: string;
                dispatchInfo: string;
            };
            CodeUpdated: string;
            NewAccount: {
                account: string;
            };
            KilledAccount: {
                account: string;
            };
            Remarked: {
                _alias: {
                    hash_: string;
                };
                sender: string;
                hash_: string;
            };
        };
    };
    /**
     * Lookup23: frame_support::dispatch::DispatchInfo
     **/
    FrameSupportDispatchDispatchInfo: {
        weight: string;
        class: string;
        paysFee: string;
    };
    /**
     * Lookup24: frame_support::dispatch::DispatchClass
     **/
    FrameSupportDispatchDispatchClass: {
        _enum: string[];
    };
    /**
     * Lookup25: frame_support::dispatch::Pays
     **/
    FrameSupportDispatchPays: {
        _enum: string[];
    };
    /**
     * Lookup26: sp_runtime::DispatchError
     **/
    SpRuntimeDispatchError: {
        _enum: {
            Other: string;
            CannotLookup: string;
            BadOrigin: string;
            Module: string;
            ConsumerRemaining: string;
            NoProviders: string;
            TooManyConsumers: string;
            Token: string;
            Arithmetic: string;
            Transactional: string;
            Exhausted: string;
            Corruption: string;
            Unavailable: string;
            RootNotAllowed: string;
        };
    };
    /**
     * Lookup27: sp_runtime::ModuleError
     **/
    SpRuntimeModuleError: {
        index: string;
        error: string;
    };
    /**
     * Lookup28: sp_runtime::TokenError
     **/
    SpRuntimeTokenError: {
        _enum: string[];
    };
    /**
     * Lookup29: sp_arithmetic::ArithmeticError
     **/
    SpArithmeticArithmeticError: {
        _enum: string[];
    };
    /**
     * Lookup30: sp_runtime::TransactionalError
     **/
    SpRuntimeTransactionalError: {
        _enum: string[];
    };
    /**
     * Lookup31: pallet_scheduler::pallet::Event<T>
     **/
    PalletSchedulerEvent: {
        _enum: {
            Scheduled: {
                when: string;
                index: string;
            };
            Canceled: {
                when: string;
                index: string;
            };
            Dispatched: {
                task: string;
                id: string;
                result: string;
            };
            CallUnavailable: {
                task: string;
                id: string;
            };
            PeriodicFailed: {
                task: string;
                id: string;
            };
            PermanentlyOverweight: {
                task: string;
                id: string;
            };
        };
    };
    /**
     * Lookup36: pallet_utility::pallet::Event
     **/
    PalletUtilityEvent: {
        _enum: {
            BatchInterrupted: {
                index: string;
                error: string;
            };
            BatchCompleted: string;
            BatchCompletedWithErrors: string;
            ItemCompleted: string;
            ItemFailed: {
                error: string;
            };
            DispatchedAs: {
                result: string;
            };
        };
    };
    /**
     * Lookup37: pallet_recovery::pallet::Event<T>
     **/
    PalletRecoveryEvent: {
        _enum: {
            RecoveryCreated: {
                account: string;
            };
            RecoveryInitiated: {
                lostAccount: string;
                rescuerAccount: string;
            };
            RecoveryVouched: {
                lostAccount: string;
                rescuerAccount: string;
                sender: string;
            };
            RecoveryClosed: {
                lostAccount: string;
                rescuerAccount: string;
            };
            AccountRecovered: {
                lostAccount: string;
                rescuerAccount: string;
            };
            RecoveryRemoved: {
                lostAccount: string;
            };
        };
    };
    /**
     * Lookup38: pallet_multisig::pallet::Event<T>
     **/
    PalletMultisigEvent: {
        _enum: {
            NewMultisig: {
                approving: string;
                multisig: string;
                callHash: string;
            };
            MultisigApproval: {
                approving: string;
                timepoint: string;
                multisig: string;
                callHash: string;
            };
            MultisigExecuted: {
                approving: string;
                timepoint: string;
                multisig: string;
                callHash: string;
                result: string;
            };
            MultisigCancelled: {
                cancelling: string;
                timepoint: string;
                multisig: string;
                callHash: string;
            };
        };
    };
    /**
     * Lookup39: pallet_multisig::Timepoint<BlockNumber>
     **/
    PalletMultisigTimepoint: {
        height: string;
        index: string;
    };
    /**
     * Lookup40: pallet_balances::pallet::Event<T, I>
     **/
    PalletBalancesEvent: {
        _enum: {
            Endowed: {
                account: string;
                freeBalance: string;
            };
            DustLost: {
                account: string;
                amount: string;
            };
            Transfer: {
                from: string;
                to: string;
                amount: string;
            };
            BalanceSet: {
                who: string;
                free: string;
            };
            Reserved: {
                who: string;
                amount: string;
            };
            Unreserved: {
                who: string;
                amount: string;
            };
            ReserveRepatriated: {
                from: string;
                to: string;
                amount: string;
                destinationStatus: string;
            };
            Deposit: {
                who: string;
                amount: string;
            };
            Withdraw: {
                who: string;
                amount: string;
            };
            Slashed: {
                who: string;
                amount: string;
            };
            Minted: {
                who: string;
                amount: string;
            };
            Burned: {
                who: string;
                amount: string;
            };
            Suspended: {
                who: string;
                amount: string;
            };
            Restored: {
                who: string;
                amount: string;
            };
            Upgraded: {
                who: string;
            };
            Issued: {
                amount: string;
            };
            Rescinded: {
                amount: string;
            };
            Locked: {
                who: string;
                amount: string;
            };
            Unlocked: {
                who: string;
                amount: string;
            };
            Frozen: {
                who: string;
                amount: string;
            };
            Thawed: {
                who: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup41: frame_support::traits::tokens::misc::BalanceStatus
     **/
    FrameSupportTokensMiscBalanceStatus: {
        _enum: string[];
    };
    /**
     * Lookup42: pallet_assets::pallet::Event<T, I>
     **/
    PalletAssetsEvent: {
        _enum: {
            Created: {
                assetId: string;
                creator: string;
                owner: string;
            };
            Issued: {
                assetId: string;
                owner: string;
                amount: string;
            };
            Transferred: {
                assetId: string;
                from: string;
                to: string;
                amount: string;
            };
            Burned: {
                assetId: string;
                owner: string;
                balance: string;
            };
            TeamChanged: {
                assetId: string;
                issuer: string;
                admin: string;
                freezer: string;
            };
            OwnerChanged: {
                assetId: string;
                owner: string;
            };
            Frozen: {
                assetId: string;
                who: string;
            };
            Thawed: {
                assetId: string;
                who: string;
            };
            AssetFrozen: {
                assetId: string;
            };
            AssetThawed: {
                assetId: string;
            };
            AccountsDestroyed: {
                assetId: string;
                accountsDestroyed: string;
                accountsRemaining: string;
            };
            ApprovalsDestroyed: {
                assetId: string;
                approvalsDestroyed: string;
                approvalsRemaining: string;
            };
            DestructionStarted: {
                assetId: string;
            };
            Destroyed: {
                assetId: string;
            };
            ForceCreated: {
                assetId: string;
                owner: string;
            };
            MetadataSet: {
                assetId: string;
                name: string;
                symbol: string;
                decimals: string;
                isFrozen: string;
            };
            MetadataCleared: {
                assetId: string;
            };
            ApprovedTransfer: {
                assetId: string;
                source: string;
                delegate: string;
                amount: string;
            };
            ApprovalCancelled: {
                assetId: string;
                owner: string;
                delegate: string;
            };
            TransferredApproved: {
                assetId: string;
                owner: string;
                delegate: string;
                destination: string;
                amount: string;
            };
            AssetStatusChanged: {
                assetId: string;
            };
            AssetMinBalanceChanged: {
                assetId: string;
                newMinBalance: string;
            };
            Touched: {
                assetId: string;
                who: string;
                depositor: string;
            };
            Blocked: {
                assetId: string;
                who: string;
            };
        };
    };
    /**
     * Lookup44: pallet_assets_ext::pallet::Event<T>
     **/
    PalletAssetsExtEvent: {
        _enum: {
            PlaceHold: {
                assetId: string;
                who: string;
                amount: string;
                palletId: string;
            };
            ReleaseHold: {
                assetId: string;
                who: string;
                amount: string;
                palletId: string;
            };
            SpendHold: {
                assetId: string;
                who: string;
                spends: string;
                palletId: string;
            };
            SplitTransfer: {
                assetId: string;
                who: string;
                transfers: string;
            };
            CreateAsset: {
                assetId: string;
                creator: string;
                initialBalance: string;
            };
            InternalWithdraw: {
                assetId: string;
                who: string;
                amount: string;
            };
            InternalDeposit: {
                assetId: string;
                who: string;
                amount: string;
            };
            AssetDepositSet: {
                assetDeposit: string;
            };
        };
    };
    /**
     * Lookup48: pallet_staking::pallet::pallet::Event<T>
     **/
    PalletStakingPalletEvent: {
        _enum: {
            EraPaid: {
                eraIndex: string;
                validatorPayout: string;
                remainder: string;
            };
            Rewarded: {
                stash: string;
                amount: string;
            };
            Slashed: {
                staker: string;
                amount: string;
            };
            SlashReported: {
                validator: string;
                fraction: string;
                slashEra: string;
            };
            OldSlashingReportDiscarded: {
                sessionIndex: string;
            };
            StakersElected: string;
            Bonded: {
                stash: string;
                amount: string;
            };
            Unbonded: {
                stash: string;
                amount: string;
            };
            Withdrawn: {
                stash: string;
                amount: string;
            };
            Kicked: {
                nominator: string;
                stash: string;
            };
            StakingElectionFailed: string;
            Chilled: {
                stash: string;
            };
            PayoutStarted: {
                eraIndex: string;
                validatorStash: string;
            };
            ValidatorPrefsSet: {
                stash: string;
                prefs: string;
            };
            ForceEra: {
                mode: string;
            };
        };
    };
    /**
     * Lookup50: pallet_staking::ValidatorPrefs
     **/
    PalletStakingValidatorPrefs: {
        commission: string;
        blocked: string;
    };
    /**
     * Lookup52: pallet_staking::Forcing
     **/
    PalletStakingForcing: {
        _enum: string[];
    };
    /**
     * Lookup53: pallet_offences::pallet::Event
     **/
    PalletOffencesEvent: {
        _enum: {
            Offence: {
                kind: string;
                timeslot: string;
            };
        };
    };
    /**
     * Lookup55: pallet_session::pallet::Event
     **/
    PalletSessionEvent: {
        _enum: {
            NewSession: {
                sessionIndex: string;
            };
        };
    };
    /**
     * Lookup56: pallet_grandpa::pallet::Event
     **/
    PalletGrandpaEvent: {
        _enum: {
            NewAuthorities: {
                authoritySet: string;
            };
            Paused: string;
            Resumed: string;
        };
    };
    /**
     * Lookup59: sp_consensus_grandpa::app::Public
     **/
    SpConsensusGrandpaAppPublic: string;
    /**
     * Lookup60: sp_core::ed25519::Public
     **/
    SpCoreEd25519Public: string;
    /**
     * Lookup61: pallet_im_online::pallet::Event<T>
     **/
    PalletImOnlineEvent: {
        _enum: {
            HeartbeatReceived: {
                authorityId: string;
            };
            AllGood: string;
            SomeOffline: {
                offline: string;
            };
        };
    };
    /**
     * Lookup62: pallet_im_online::sr25519::app_sr25519::Public
     **/
    PalletImOnlineSr25519AppSr25519Public: string;
    /**
     * Lookup63: sp_core::sr25519::Public
     **/
    SpCoreSr25519Public: string;
    /**
     * Lookup66: pallet_staking::Exposure<seed_primitives::signature::AccountId20, Balance>
     **/
    PalletStakingExposure: {
        total: string;
        own: string;
        others: string;
    };
    /**
     * Lookup69: pallet_staking::IndividualExposure<seed_primitives::signature::AccountId20, Balance>
     **/
    PalletStakingIndividualExposure: {
        who: string;
        value: string;
    };
    /**
     * Lookup70: pallet_sudo::pallet::Event<T>
     **/
    PalletSudoEvent: {
        _enum: {
            Sudid: {
                sudoResult: string;
            };
            KeyChanged: {
                oldSudoer: string;
            };
            SudoAsDone: {
                sudoResult: string;
            };
        };
    };
    /**
     * Lookup72: pallet_transaction_payment::pallet::Event<T>
     **/
    PalletTransactionPaymentEvent: {
        _enum: {
            TransactionFeePaid: {
                who: string;
                actualFee: string;
                tip: string;
            };
        };
    };
    /**
     * Lookup73: pallet_dex::pallet::Event<T>
     **/
    PalletDexEvent: {
        _enum: {
            FeeToSet: string;
            AddProvision: string;
            AddLiquidity: string;
            RemoveLiquidity: string;
            Swap: string;
            EnableTradingPair: string;
            DisableTradingPair: string;
            ProvisioningToEnabled: string;
        };
    };
    /**
     * Lookup75: pallet_dex::types::TradingPair
     **/
    PalletDexTradingPair: string;
    /**
     * Lookup76: pallet_nft::pallet::Event<T>
     **/
    PalletNftEvent: {
        _enum: {
            CollectionCreate: {
                collectionUuid: string;
                initialIssuance: string;
                maxIssuance: string;
                collectionOwner: string;
                metadataScheme: string;
                name: string;
                royaltiesSchedule: string;
                originChain: string;
                compatibility: string;
            };
            PublicMintToggle: {
                collectionId: string;
                enabled: string;
            };
            Mint: {
                collectionId: string;
                start: string;
                end: string;
                owner: string;
            };
            MintFeePaid: {
                who: string;
                collectionId: string;
                paymentAsset: string;
                paymentAmount: string;
                tokenCount: string;
            };
            MintPriceSet: {
                collectionId: string;
                paymentAsset: string;
                mintPrice: string;
            };
            BridgedMint: {
                collectionId: string;
                serialNumbers: string;
                owner: string;
            };
            OwnerSet: {
                collectionId: string;
                newOwner: string;
            };
            MaxIssuanceSet: {
                collectionId: string;
                maxIssuance: string;
            };
            BaseUriSet: {
                collectionId: string;
                baseUri: string;
            };
            NameSet: {
                collectionId: string;
                name: string;
            };
            RoyaltiesScheduleSet: {
                collectionId: string;
                royaltiesSchedule: string;
            };
            Transfer: {
                previousOwner: string;
                collectionId: string;
                serialNumbers: string;
                newOwner: string;
            };
            Burn: {
                tokenOwner: string;
                collectionId: string;
                serialNumber: string;
            };
            CollectionClaimed: {
                account: string;
                collectionId: string;
            };
            UtilityFlagsSet: {
                collectionId: string;
                utilityFlags: string;
            };
            TokenTransferableFlagSet: {
                tokenId: string;
                transferable: string;
            };
            PendingIssuanceCreated: {
                collectionId: string;
                issuanceId: string;
                tokenOwner: string;
                quantity: string;
                burnAuthority: string;
            };
            Issued: {
                tokenOwner: string;
                start: string;
                end: string;
                burnAuthority: string;
            };
            AdditionalDataSet: {
                tokenId: string;
                additionalData: string;
            };
        };
    };
    /**
     * Lookup81: seed_primitives::nft::RoyaltiesSchedule<seed_primitives::signature::AccountId20>
     **/
    SeedPrimitivesNftRoyaltiesSchedule: {
        entitlements: string;
    };
    /**
     * Lookup86: seed_primitives::nft::OriginChain
     **/
    SeedPrimitivesNftOriginChain: {
        _enum: string[];
    };
    /**
     * Lookup87: seed_primitives::nft::CrossChainCompatibility
     **/
    SeedPrimitivesNftCrossChainCompatibility: {
        xrpl: string;
    };
    /**
     * Lookup91: seed_pallet_common::utils::CollectionUtilityFlags
     **/
    SeedPalletCommonUtilsCollectionUtilityFlags: {
        transferable: string;
        burnable: string;
        mintable: string;
    };
    /**
     * Lookup92: seed_pallet_common::utils::TokenBurnAuthority
     **/
    SeedPalletCommonUtilsTokenBurnAuthority: {
        _enum: string[];
    };
    /**
     * Lookup95: pallet_sft::pallet::Event<T>
     **/
    PalletSftEvent: {
        _enum: {
            CollectionCreate: {
                collectionId: string;
                collectionOwner: string;
                metadataScheme: string;
                name: string;
                royaltiesSchedule: string;
                originChain: string;
            };
            PublicMintToggle: {
                tokenId: string;
                enabled: string;
            };
            Mint: {
                collectionId: string;
                serialNumbers: string;
                balances: string;
                owner: string;
            };
            MintFeePaid: {
                who: string;
                tokenId: string;
                paymentAsset: string;
                paymentAmount: string;
                tokenCount: string;
            };
            MintPriceSet: {
                tokenId: string;
                paymentAsset: string;
                mintPrice: string;
            };
            OwnerSet: {
                collectionId: string;
                newOwner: string;
            };
            MaxIssuanceSet: {
                tokenId: string;
                maxIssuance: string;
            };
            BaseUriSet: {
                collectionId: string;
                metadataScheme: string;
            };
            NameSet: {
                collectionId: string;
                collectionName: string;
            };
            TokenNameSet: {
                tokenId: string;
                tokenName: string;
            };
            RoyaltiesScheduleSet: {
                collectionId: string;
                royaltiesSchedule: string;
            };
            TokenCreate: {
                tokenId: string;
                initialIssuance: string;
                maxIssuance: string;
                tokenName: string;
                tokenOwner: string;
            };
            Transfer: {
                previousOwner: string;
                collectionId: string;
                serialNumbers: string;
                balances: string;
                newOwner: string;
            };
            Burn: {
                collectionId: string;
                serialNumbers: string;
                balances: string;
                owner: string;
            };
            UtilityFlagsSet: {
                collectionId: string;
                utilityFlags: string;
            };
            TokenTransferableFlagSet: {
                tokenId: string;
                transferable: string;
            };
            TokenBurnAuthoritySet: {
                tokenId: string;
                burnAuthority: string;
            };
            PendingIssuanceCreated: {
                collectionId: string;
                issuanceId: string;
                serialNumbers: string;
                balances: string;
                tokenOwner: string;
            };
            Issued: {
                tokenOwner: string;
                serialNumbers: string;
                balances: string;
            };
            AdditionalDataSet: {
                tokenId: string;
                additionalData: string;
            };
        };
    };
    /**
     * Lookup101: pallet_xrpl_bridge::pallet::Event<T>
     **/
    PalletXrplBridgeEvent: {
        _enum: {
            TransactionAdded: string;
            TransactionChallenge: string;
            PaymentDelaySet: {
                assetId: string;
                paymentThreshold: string;
                delay: string;
            };
            PaymentDelayRemoved: {
                assetId: string;
            };
            ProcessingOk: string;
            ProcessingFailed: string;
            NotSupportedTransaction: string;
            WithdrawRequest: {
                proofId: string;
                sender: string;
                assetId: string;
                amount: string;
                destination: string;
            };
            WithdrawDelayed: {
                sender: string;
                assetId: string;
                amount: string;
                destination: string;
                delayedPaymentId: string;
                paymentBlock: string;
            };
            RelayerAdded: string;
            RelayerRemoved: string;
            DoorAddressSet: {
                doorAccount: string;
                address: string;
            };
            DoorNextTicketSequenceParamSet: {
                doorAccount: string;
                ticketSequenceStartNext: string;
                ticketBucketSizeNext: string;
            };
            DoorTicketSequenceParamSet: {
                doorAccount: string;
                ticketSequence: string;
                ticketSequenceStart: string;
                ticketBucketSize: string;
            };
            LedgerIndexManualPrune: {
                ledgerIndex: string;
                totalCleared: string;
            };
            TicketSequenceThresholdReached: {
                doorAccount: string;
                currentTicket: string;
            };
            XrplAssetMapSet: {
                assetId: string;
                xrplCurrency: string;
            };
            XrplAssetMapRemoved: {
                assetId: string;
                xrplCurrency: string;
            };
            XrplTxSignRequest: {
                proofId: string;
                tx: string;
            };
        };
    };
    /**
     * Lookup105: pallet_xrpl_bridge::types::XRPLDoorAccount
     **/
    PalletXrplBridgeXrplDoorAccount: {
        _enum: string[];
    };
    /**
     * Lookup107: pallet_xrpl_bridge::types::XRPLCurrency
     **/
    PalletXrplBridgeXrplCurrency: {
        symbol: string;
        issuer: string;
    };
    /**
     * Lookup108: pallet_xrpl_bridge::types::XRPLCurrencyType
     **/
    PalletXrplBridgeXrplCurrencyType: {
        _enum: {
            Standard: string;
            NonStandard: string;
        };
    };
    /**
     * Lookup110: pallet_xrpl_bridge::types::XrplTransaction
     **/
    PalletXrplBridgeXrplTransaction: {
        _enum: {
            NFTokenAcceptOffer: string;
            NFTokenCreateOffer: string;
        };
    };
    /**
     * Lookup111: pallet_xrpl_bridge::types::NFTokenAcceptOfferTransaction
     **/
    PalletXrplBridgeNfTokenAcceptOfferTransaction: {
        nftokenSellOffer: string;
        txFee: string;
        txTicketSequence: string;
        account: string;
    };
    /**
     * Lookup112: pallet_xrpl_bridge::types::NFTokenCreateOfferTransaction
     **/
    PalletXrplBridgeNfTokenCreateOfferTransaction: {
        nftokenId: string;
        txFee: string;
        txTicketSequence: string;
        account: string;
        destination: string;
    };
    /**
     * Lookup113: pallet_xrpl::pallet::Event<T>
     **/
    PalletXrplEvent: {
        _enum: {
            XRPLExtrinsicExecuted: {
                publicKey: string;
                caller: string;
                rAddress: string;
                call: string;
            };
        };
    };
    /**
     * Lookup114: pallet_xrpl::types::XrplPublicKey
     **/
    PalletXrplXrplPublicKey: {
        _enum: {
            ED25519: string;
            ECDSA: string;
        };
    };
    /**
     * Lookup115: sp_core::ecdsa::Public
     **/
    SpCoreEcdsaPublic: string;
    /**
     * Lookup119: frame_system::pallet::Call<T>
     **/
    FrameSystemCall: {
        _enum: {
            remark: {
                remark: string;
            };
            set_heap_pages: {
                pages: string;
            };
            set_code: {
                code: string;
            };
            set_code_without_checks: {
                code: string;
            };
            set_storage: {
                items: string;
            };
            kill_storage: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
            };
            kill_prefix: {
                prefix: string;
                subkeys: string;
            };
            remark_with_event: {
                remark: string;
            };
        };
    };
    /**
     * Lookup123: pallet_babe::pallet::Call<T>
     **/
    PalletBabeCall: {
        _enum: {
            report_equivocation: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            report_equivocation_unsigned: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            plan_config_change: {
                config: string;
            };
        };
    };
    /**
     * Lookup124: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, Hash>, sp_consensus_babe::app::Public>
     **/
    SpConsensusSlotsEquivocationProof: {
        offender: string;
        slot: string;
        firstHeader: string;
        secondHeader: string;
    };
    /**
     * Lookup125: sp_runtime::generic::header::Header<Number, Hash>
     **/
    SpRuntimeHeader: {
        parentHash: string;
        number: string;
        stateRoot: string;
        extrinsicsRoot: string;
        digest: string;
    };
    /**
     * Lookup127: sp_consensus_babe::app::Public
     **/
    SpConsensusBabeAppPublic: string;
    /**
     * Lookup129: sp_session::MembershipProof
     **/
    SpSessionMembershipProof: {
        session: string;
        trieNodes: string;
        validatorCount: string;
    };
    /**
     * Lookup130: sp_consensus_babe::digests::NextConfigDescriptor
     **/
    SpConsensusBabeDigestsNextConfigDescriptor: {
        _enum: {
            __Unused0: string;
            V1: {
                c: string;
                allowedSlots: string;
            };
        };
    };
    /**
     * Lookup132: sp_consensus_babe::AllowedSlots
     **/
    SpConsensusBabeAllowedSlots: {
        _enum: string[];
    };
    /**
     * Lookup133: pallet_timestamp::pallet::Call<T>
     **/
    PalletTimestampCall: {
        _enum: {
            set: {
                now: string;
            };
        };
    };
    /**
     * Lookup134: pallet_scheduler::pallet::Call<T>
     **/
    PalletSchedulerCall: {
        _enum: {
            schedule: {
                when: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            cancel: {
                when: string;
                index: string;
            };
            schedule_named: {
                id: string;
                when: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            cancel_named: {
                id: string;
            };
            schedule_after: {
                after: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            schedule_named_after: {
                id: string;
                after: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
        };
    };
    /**
     * Lookup136: pallet_utility::pallet::Call<T>
     **/
    PalletUtilityCall: {
        _enum: {
            batch: {
                calls: string;
            };
            as_derivative: {
                index: string;
                call: string;
            };
            batch_all: {
                calls: string;
            };
            dispatch_as: {
                asOrigin: string;
                call: string;
            };
            force_batch: {
                calls: string;
            };
            with_weight: {
                call: string;
                weight: string;
            };
        };
    };
    /**
     * Lookup139: seed_runtime::OriginCaller
     **/
    SeedRuntimeOriginCaller: {
        _enum: {
            system: string;
            __Unused1: string;
            __Unused2: string;
            Void: string;
            __Unused4: string;
            __Unused5: string;
            __Unused6: string;
            __Unused7: string;
            __Unused8: string;
            __Unused9: string;
            __Unused10: string;
            __Unused11: string;
            __Unused12: string;
            __Unused13: string;
            __Unused14: string;
            __Unused15: string;
            __Unused16: string;
            __Unused17: string;
            __Unused18: string;
            __Unused19: string;
            __Unused20: string;
            __Unused21: string;
            __Unused22: string;
            __Unused23: string;
            __Unused24: string;
            __Unused25: string;
            Ethereum: string;
            __Unused27: string;
            __Unused28: string;
            __Unused29: string;
            __Unused30: string;
            __Unused31: string;
            __Unused32: string;
            __Unused33: string;
            __Unused34: string;
            Xrpl: string;
        };
    };
    /**
     * Lookup140: frame_support::dispatch::RawOrigin<seed_primitives::signature::AccountId20>
     **/
    FrameSupportDispatchRawOrigin: {
        _enum: {
            Root: string;
            Signed: string;
            None: string;
        };
    };
    /**
     * Lookup141: pallet_ethereum::RawOrigin
     **/
    PalletEthereumRawOrigin: {
        _enum: {
            EthereumTransaction: string;
        };
    };
    /**
     * Lookup142: sp_core::Void
     **/
    SpCoreVoid: string;
    /**
     * Lookup143: pallet_recovery::pallet::Call<T>
     **/
    PalletRecoveryCall: {
        _enum: {
            as_recovered: {
                account: string;
                call: string;
            };
            set_recovered: {
                lost: string;
                rescuer: string;
            };
            create_recovery: {
                friends: string;
                threshold: string;
                delayPeriod: string;
            };
            initiate_recovery: {
                account: string;
            };
            vouch_recovery: {
                lost: string;
                rescuer: string;
            };
            claim_recovery: {
                account: string;
            };
            close_recovery: {
                rescuer: string;
            };
            remove_recovery: string;
            cancel_recovered: {
                account: string;
            };
        };
    };
    /**
     * Lookup145: pallet_multisig::pallet::Call<T>
     **/
    PalletMultisigCall: {
        _enum: {
            as_multi_threshold_1: {
                otherSignatories: string;
                call: string;
            };
            as_multi: {
                threshold: string;
                otherSignatories: string;
                maybeTimepoint: string;
                call: string;
                maxWeight: string;
            };
            approve_as_multi: {
                threshold: string;
                otherSignatories: string;
                maybeTimepoint: string;
                callHash: string;
                maxWeight: string;
            };
            cancel_as_multi: {
                threshold: string;
                otherSignatories: string;
                timepoint: string;
                callHash: string;
            };
        };
    };
    /**
     * Lookup147: pallet_balances::pallet::Call<T, I>
     **/
    PalletBalancesCall: {
        _enum: {
            transfer_allow_death: {
                dest: string;
                value: string;
            };
            set_balance_deprecated: {
                who: string;
                newFree: string;
                oldReserved: string;
            };
            force_transfer: {
                source: string;
                dest: string;
                value: string;
            };
            transfer_keep_alive: {
                dest: string;
                value: string;
            };
            transfer_all: {
                dest: string;
                keepAlive: string;
            };
            force_unreserve: {
                who: string;
                amount: string;
            };
            upgrade_accounts: {
                who: string;
            };
            transfer: {
                dest: string;
                value: string;
            };
            force_set_balance: {
                who: string;
                newFree: string;
            };
        };
    };
    /**
     * Lookup148: pallet_assets::pallet::Call<T, I>
     **/
    PalletAssetsCall: {
        _enum: {
            create: {
                id: string;
                admin: string;
                minBalance: string;
            };
            force_create: {
                id: string;
                owner: string;
                isSufficient: string;
                minBalance: string;
            };
            start_destroy: {
                id: string;
            };
            destroy_accounts: {
                id: string;
            };
            destroy_approvals: {
                id: string;
            };
            finish_destroy: {
                id: string;
            };
            mint: {
                id: string;
                beneficiary: string;
                amount: string;
            };
            burn: {
                id: string;
                who: string;
                amount: string;
            };
            transfer: {
                id: string;
                target: string;
                amount: string;
            };
            transfer_keep_alive: {
                id: string;
                target: string;
                amount: string;
            };
            force_transfer: {
                id: string;
                source: string;
                dest: string;
                amount: string;
            };
            freeze: {
                id: string;
                who: string;
            };
            thaw: {
                id: string;
                who: string;
            };
            freeze_asset: {
                id: string;
            };
            thaw_asset: {
                id: string;
            };
            transfer_ownership: {
                id: string;
                owner: string;
            };
            set_team: {
                id: string;
                issuer: string;
                admin: string;
                freezer: string;
            };
            set_metadata: {
                id: string;
                name: string;
                symbol: string;
                decimals: string;
            };
            clear_metadata: {
                id: string;
            };
            force_set_metadata: {
                id: string;
                name: string;
                symbol: string;
                decimals: string;
                isFrozen: string;
            };
            force_clear_metadata: {
                id: string;
            };
            force_asset_status: {
                id: string;
                owner: string;
                issuer: string;
                admin: string;
                freezer: string;
                minBalance: string;
                isSufficient: string;
                isFrozen: string;
            };
            approve_transfer: {
                id: string;
                delegate: string;
                amount: string;
            };
            cancel_approval: {
                id: string;
                delegate: string;
            };
            force_cancel_approval: {
                id: string;
                owner: string;
                delegate: string;
            };
            transfer_approved: {
                id: string;
                owner: string;
                destination: string;
                amount: string;
            };
            touch: {
                id: string;
            };
            refund: {
                id: string;
                allowBurn: string;
            };
            set_min_balance: {
                id: string;
                minBalance: string;
            };
            touch_other: {
                id: string;
                who: string;
            };
            refund_other: {
                id: string;
                who: string;
            };
            block: {
                id: string;
                who: string;
            };
        };
    };
    /**
     * Lookup149: pallet_assets_ext::pallet::Call<T>
     **/
    PalletAssetsExtCall: {
        _enum: {
            set_asset_deposit: {
                assetDeposit: string;
            };
            create_asset: {
                name: string;
                symbol: string;
                decimals: string;
                minBalance: string;
                owner: string;
            };
            mint: {
                assetId: string;
                beneficiary: string;
                amount: string;
            };
            transfer: {
                assetId: string;
                destination: string;
                amount: string;
                keepAlive: string;
            };
            burn_from: {
                assetId: string;
                who: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup150: pallet_staking::pallet::pallet::Call<T>
     **/
    PalletStakingPalletCall: {
        _enum: {
            bond: {
                value: string;
                payee: string;
            };
            bond_extra: {
                maxAdditional: string;
            };
            unbond: {
                value: string;
            };
            withdraw_unbonded: {
                numSlashingSpans: string;
            };
            validate: {
                prefs: string;
            };
            nominate: {
                targets: string;
            };
            chill: string;
            set_payee: {
                payee: string;
            };
            set_controller: string;
            set_validator_count: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            increase_validator_count: {
                additional: string;
            };
            scale_validator_count: {
                factor: string;
            };
            force_no_eras: string;
            force_new_era: string;
            set_invulnerables: {
                invulnerables: string;
            };
            force_unstake: {
                stash: string;
                numSlashingSpans: string;
            };
            force_new_era_always: string;
            cancel_deferred_slash: {
                era: string;
                slashIndices: string;
            };
            payout_stakers: {
                validatorStash: string;
                era: string;
            };
            rebond: {
                value: string;
            };
            reap_stash: {
                stash: string;
                numSlashingSpans: string;
            };
            kick: {
                who: string;
            };
            set_staking_configs: {
                minNominatorBond: string;
                minValidatorBond: string;
                maxNominatorCount: string;
                maxValidatorCount: string;
                chillThreshold: string;
                minCommission: string;
            };
            chill_other: {
                controller: string;
            };
            force_apply_min_commission: {
                validatorStash: string;
            };
            set_min_commission: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
        };
    };
    /**
     * Lookup151: pallet_staking::RewardDestination<seed_primitives::signature::AccountId20>
     **/
    PalletStakingRewardDestination: {
        _enum: {
            Staked: string;
            Stash: string;
            Controller: string;
            Account: string;
            None: string;
        };
    };
    /**
     * Lookup153: pallet_staking::pallet::pallet::ConfigOp<T>
     **/
    PalletStakingPalletConfigOpU128: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup154: pallet_staking::pallet::pallet::ConfigOp<T>
     **/
    PalletStakingPalletConfigOpU32: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup155: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
     **/
    PalletStakingPalletConfigOpPercent: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup156: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
     **/
    PalletStakingPalletConfigOpPerbill: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup157: pallet_session::pallet::Call<T>
     **/
    PalletSessionCall: {
        _enum: {
            set_keys: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
                proof: string;
            };
            purge_keys: string;
        };
    };
    /**
     * Lookup158: seed_runtime::SessionKeys
     **/
    SeedRuntimeSessionKeys: {
        babe: string;
        imOnline: string;
        grandpa: string;
        ethy: string;
    };
    /**
     * Lookup159: seed_primitives::ethy::crypto::app_crypto::Public
     **/
    SeedPrimitivesEthyCryptoAppCryptoPublic: string;
    /**
     * Lookup160: pallet_grandpa::pallet::Call<T>
     **/
    PalletGrandpaCall: {
        _enum: {
            report_equivocation: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            report_equivocation_unsigned: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            note_stalled: {
                delay: string;
                bestFinalizedBlockNumber: string;
            };
        };
    };
    /**
     * Lookup161: sp_consensus_grandpa::EquivocationProof<primitive_types::H256, N>
     **/
    SpConsensusGrandpaEquivocationProof: {
        setId: string;
        equivocation: string;
    };
    /**
     * Lookup162: sp_consensus_grandpa::Equivocation<primitive_types::H256, N>
     **/
    SpConsensusGrandpaEquivocation: {
        _enum: {
            Prevote: string;
            Precommit: string;
        };
    };
    /**
     * Lookup163: finality_grandpa::Equivocation<sp_consensus_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_consensus_grandpa::app::Signature>
     **/
    FinalityGrandpaEquivocationPrevote: {
        roundNumber: string;
        identity: string;
        first: string;
        second: string;
    };
    /**
     * Lookup164: finality_grandpa::Prevote<primitive_types::H256, N>
     **/
    FinalityGrandpaPrevote: {
        targetHash: string;
        targetNumber: string;
    };
    /**
     * Lookup165: sp_consensus_grandpa::app::Signature
     **/
    SpConsensusGrandpaAppSignature: string;
    /**
     * Lookup166: sp_core::ed25519::Signature
     **/
    SpCoreEd25519Signature: string;
    /**
     * Lookup168: finality_grandpa::Equivocation<sp_consensus_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_consensus_grandpa::app::Signature>
     **/
    FinalityGrandpaEquivocationPrecommit: {
        roundNumber: string;
        identity: string;
        first: string;
        second: string;
    };
    /**
     * Lookup169: finality_grandpa::Precommit<primitive_types::H256, N>
     **/
    FinalityGrandpaPrecommit: {
        targetHash: string;
        targetNumber: string;
    };
    /**
     * Lookup171: pallet_im_online::pallet::Call<T>
     **/
    PalletImOnlineCall: {
        _enum: {
            heartbeat: {
                heartbeat: string;
                signature: string;
            };
        };
    };
    /**
     * Lookup172: pallet_im_online::Heartbeat<BlockNumber>
     **/
    PalletImOnlineHeartbeat: {
        blockNumber: string;
        sessionIndex: string;
        authorityIndex: string;
        validatorsLen: string;
    };
    /**
     * Lookup173: pallet_im_online::sr25519::app_sr25519::Signature
     **/
    PalletImOnlineSr25519AppSr25519Signature: string;
    /**
     * Lookup174: sp_core::sr25519::Signature
     **/
    SpCoreSr25519Signature: string;
    /**
     * Lookup175: pallet_sudo::pallet::Call<T>
     **/
    PalletSudoCall: {
        _enum: {
            sudo: {
                call: string;
            };
            sudo_unchecked_weight: {
                call: string;
                weight: string;
            };
            set_key: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            sudo_as: {
                who: string;
                call: string;
            };
        };
    };
    /**
     * Lookup176: pallet_dex::pallet::Call<T>
     **/
    PalletDexCall: {
        _enum: {
            set_fee_to: {
                feeTo: string;
            };
            swap_with_exact_supply: {
                amountIn: string;
                amountOutMin: string;
                path: string;
                to: string;
                deadline: string;
            };
            swap_with_exact_target: {
                amountOut: string;
                amountInMax: string;
                path: string;
                to: string;
                deadline: string;
            };
            add_liquidity: {
                tokenA: string;
                tokenB: string;
                amountADesired: string;
                amountBDesired: string;
                amountAMin: string;
                amountBMin: string;
                to: string;
                deadline: string;
            };
            remove_liquidity: {
                tokenA: string;
                tokenB: string;
                liquidity: string;
                amountAMin: string;
                amountBMin: string;
                to: string;
                deadline: string;
            };
            reenable_trading_pair: {
                tokenA: string;
                tokenB: string;
            };
            disable_trading_pair: {
                tokenA: string;
                tokenB: string;
            };
        };
    };
    /**
     * Lookup177: pallet_nft::pallet::Call<T>
     **/
    PalletNftCall: {
        _enum: {
            claim_unowned_collection: {
                collectionId: string;
                newOwner: string;
            };
            set_owner: {
                collectionId: string;
                newOwner: string;
            };
            set_max_issuance: {
                collectionId: string;
                maxIssuance: string;
            };
            set_base_uri: {
                collectionId: string;
                baseUri: string;
            };
            create_collection: {
                name: string;
                initialIssuance: string;
                maxIssuance: string;
                tokenOwner: string;
                metadataScheme: string;
                royaltiesSchedule: string;
                crossChainCompatibility: string;
            };
            toggle_public_mint: {
                collectionId: string;
                enabled: string;
            };
            set_mint_fee: {
                collectionId: string;
                pricingDetails: string;
            };
            mint: {
                collectionId: string;
                quantity: string;
                tokenOwner: string;
            };
            transfer: {
                collectionId: string;
                serialNumbers: string;
                newOwner: string;
            };
            burn: {
                tokenId: string;
            };
            set_name: {
                collectionId: string;
                name: string;
            };
            set_royalties_schedule: {
                collectionId: string;
                royaltiesSchedule: string;
            };
            set_utility_flags: {
                collectionId: string;
                utilityFlags: string;
            };
            set_token_transferable_flag: {
                tokenId: string;
                transferable: string;
            };
            issue_soulbound: {
                collectionId: string;
                quantity: string;
                tokenOwner: string;
                burnAuthority: string;
            };
            accept_soulbound_issuance: {
                collectionId: string;
                issuanceId: string;
            };
            set_additional_data: {
                tokenId: string;
                additionalData: string;
            };
            mint_with_additional_data: {
                collectionId: string;
                tokenOwner: string;
                additionalData: string;
            };
        };
    };
    /**
     * Lookup181: pallet_sft::pallet::Call<T>
     **/
    PalletSftCall: {
        _enum: {
            create_collection: {
                collectionName: string;
                collectionOwner: string;
                metadataScheme: string;
                royaltiesSchedule: string;
            };
            create_token: {
                collectionId: string;
                tokenName: string;
                initialIssuance: string;
                maxIssuance: string;
                tokenOwner: string;
            };
            mint: {
                collectionId: string;
                serialNumbers: string;
                tokenOwner: string;
            };
            transfer: {
                collectionId: string;
                serialNumbers: string;
                newOwner: string;
            };
            burn: {
                collectionId: string;
                serialNumbers: string;
            };
            set_owner: {
                collectionId: string;
                newOwner: string;
            };
            set_max_issuance: {
                tokenId: string;
                maxIssuance: string;
            };
            set_base_uri: {
                collectionId: string;
                metadataScheme: string;
            };
            set_name: {
                collectionId: string;
                collectionName: string;
            };
            set_royalties_schedule: {
                collectionId: string;
                royaltiesSchedule: string;
            };
            toggle_public_mint: {
                tokenId: string;
                enabled: string;
            };
            set_mint_fee: {
                tokenId: string;
                pricingDetails: string;
            };
            set_utility_flags: {
                collectionId: string;
                utilityFlags: string;
            };
            set_token_name: {
                tokenId: string;
                tokenName: string;
            };
            set_token_transferable_flag: {
                tokenId: string;
                transferable: string;
            };
            set_token_burn_authority: {
                tokenId: string;
                burnAuthority: string;
            };
            burn_as_collection_owner: {
                tokenOwner: string;
                collectionId: string;
                serialNumbers: string;
            };
            issue_soulbound: {
                collectionId: string;
                serialNumbers: string;
                tokenOwner: string;
            };
            accept_soulbound_issuance: {
                collectionId: string;
                issuanceId: string;
            };
            set_additional_data: {
                tokenId: string;
                additionalData: string;
            };
            create_token_with_additional_data: {
                collectionId: string;
                tokenName: string;
                initialIssuance: string;
                maxIssuance: string;
                tokenOwner: string;
                additionalData: string;
            };
        };
    };
    /**
     * Lookup184: pallet_xrpl_bridge::pallet::Call<T>
     **/
    PalletXrplBridgeCall: {
        _enum: {
            submit_transaction: {
                ledgerIndex: string;
                transactionHash: string;
                transaction: string;
                timestamp: string;
            };
            submit_challenge: {
                transactionHash: string;
            };
            set_payment_delay: {
                assetId: string;
                paymentDelay: string;
            };
            withdraw_xrp: {
                amount: string;
                destination: string;
            };
            withdraw_xrp_with_destination_tag: {
                amount: string;
                destination: string;
                destinationTag: string;
            };
            add_relayer: {
                relayer: string;
            };
            remove_relayer: {
                relayer: string;
            };
            set_door_tx_fee: {
                doorType: string;
                fee: string;
            };
            set_xrp_source_tag: {
                sourceTag: string;
            };
            set_door_address: {
                doorAccount: string;
                doorAddress: string;
            };
            set_ticket_sequence_next_allocation: {
                doorAccount: string;
                startTicketSequence: string;
                ticketBucketSize: string;
            };
            set_ticket_sequence_current_allocation: {
                doorAccount: string;
                ticketSequence: string;
                startTicketSequence: string;
                ticketBucketSize: string;
            };
            reset_settled_xrpl_tx_data: {
                highestSettledLedgerIndex: string;
                submissionWindowWidth: string;
                highestPrunedLedgerIndex: string;
                settledTxData: string;
            };
            prune_settled_ledger_index: {
                ledgerIndex: string;
            };
            set_xrpl_asset_map: {
                assetId: string;
                xrplCurrency: string;
            };
            withdraw: {
                assetId: string;
                amount: string;
                destination: string;
                destinationTag: string;
            };
            generate_nft_accept_offer: {
                nftokenSellOffer: string;
            };
            withdraw_nft: {
                tokenId: string;
                destination: string;
            };
        };
    };
    /**
     * Lookup185: pallet_xrpl_bridge::types::XrplTxData
     **/
    PalletXrplBridgeXrplTxData: {
        _enum: {
            Payment: {
                amount: string;
                address: string;
            };
            CurrencyPayment: {
                amount: string;
                address: string;
                currency: string;
            };
            Xls20: {
                tokenId: string;
                address: string;
            };
        };
    };
    /**
     * Lookup191: pallet_xrpl_bridge::types::XrpTransaction
     **/
    PalletXrplBridgeXrpTransaction: {
        transactionHash: string;
        transaction: string;
        timestamp: string;
    };
    /**
     * Lookup193: pallet_xrpl::pallet::Call<T>
     **/
    PalletXrplCall: {
        _enum: {
            transact: {
                encodedMsg: string;
                signature: string;
                call: string;
            };
        };
    };
    /**
     * Lookup196: pallet_token_approvals::pallet::Call<T>
     **/
    PalletTokenApprovalsCall: {
        _enum: {
            erc721_approval: {
                operatorAccount: string;
                tokenId: string;
            };
            erc721_remove_approval: {
                tokenId: string;
            };
            erc20_approval: {
                spender: string;
                assetId: string;
                amount: string;
            };
            erc20_update_approval: {
                spender: string;
                assetId: string;
                amount: string;
            };
            erc721_approval_for_all: {
                operatorAccount: string;
                collectionUuid: string;
                approved: string;
            };
            erc1155_approval_for_all: {
                operatorAccount: string;
                collectionUuid: string;
                approved: string;
            };
        };
    };
    /**
     * Lookup197: pallet_echo::pallet::Call<T>
     **/
    PalletEchoCall: {
        _enum: {
            ping: {
                destination: string;
            };
        };
    };
    /**
     * Lookup198: pallet_marketplace::pallet::Call<T>
     **/
    PalletMarketplaceCall: {
        _enum: {
            register_marketplace: {
                marketplaceAccount: string;
                entitlement: string;
            };
            sell_nft: {
                collectionId: string;
                serialNumbers: string;
                buyer: string;
                paymentAsset: string;
                fixedPrice: string;
                duration: string;
                marketplaceId: string;
            };
            sell: {
                tokens: string;
                buyer: string;
                paymentAsset: string;
                fixedPrice: string;
                duration: string;
                marketplaceId: string;
            };
            update_fixed_price: {
                listingId: string;
                newPrice: string;
            };
            buy: {
                listingId: string;
            };
            buy_multi: {
                listingIds: string;
            };
            auction_nft: {
                collectionId: string;
                serialNumbers: string;
                paymentAsset: string;
                reservePrice: string;
                duration: string;
                marketplaceId: string;
            };
            auction: {
                tokens: string;
                paymentAsset: string;
                reservePrice: string;
                duration: string;
                marketplaceId: string;
            };
            bid: {
                listingId: string;
                amount: string;
            };
            cancel_sale: {
                listingId: string;
            };
            make_simple_offer: {
                tokenId: string;
                amount: string;
                assetId: string;
                marketplaceId: string;
            };
            cancel_offer: {
                offerId: string;
            };
            accept_offer: {
                offerId: string;
            };
            set_fee_to: {
                feeTo: string;
            };
        };
    };
    /**
     * Lookup200: pallet_marketplace::types::ListingTokens<T>
     **/
    PalletMarketplaceListingTokens: {
        _enum: {
            Nft: string;
            Sft: string;
        };
    };
    /**
     * Lookup201: pallet_marketplace::types::NftListing<T>
     **/
    PalletMarketplaceNftListing: {
        collectionId: string;
        serialNumbers: string;
    };
    /**
     * Lookup202: pallet_marketplace::types::SftListing<T>
     **/
    PalletMarketplaceSftListing: {
        collectionId: string;
        serialNumbers: string;
    };
    /**
     * Lookup205: pallet_preimage::pallet::Call<T>
     **/
    PalletPreimageCall: {
        _enum: {
            note_preimage: {
                bytes: string;
            };
            unnote_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            request_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            unrequest_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /**
     * Lookup206: pallet_vortex_distribution::pallet::Call<T>
     **/
    PalletVortexDistributionCall: {
        _enum: {
            set_admin: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            create_vtx_dist: string;
            disable_vtx_dist: {
                id: string;
            };
            set_fee_pot_asset_balances: {
                id: string;
                assetsBalances: string;
            };
            set_vtx_vault_asset_balances: {
                id: string;
                assetsBalances: string;
            };
            set_vtx_total_supply: {
                id: string;
                supply: string;
            };
            register_reward_points: {
                id: string;
                rewardPoints: string;
            };
            register_work_points: {
                id: string;
                workPoints: string;
            };
            set_consider_current_balance: {
                value: string;
            };
            set_disable_redeem: {
                value: string;
            };
            set_enable_manual_reward_input: {
                value: string;
            };
            set_asset_prices: {
                id: string;
                assetPrices: string;
            };
            trigger_vtx_distribution: {
                id: string;
            };
            set_vtx_vault_redeem_asset_list: {
                assetsList: string;
            };
            start_vtx_dist: {
                id: string;
            };
            pay_unsigned: {
                id: string;
                currentBlock: string;
            };
            redeem_tokens_from_vault: {
                vortexTokenAmount: string;
            };
            register_rewards: {
                id: string;
                rewards: string;
            };
        };
    };
    /**
     * Lookup210: pallet_partner_attribution::pallet::Call<T>
     **/
    PalletPartnerAttributionCall: {
        _enum: {
            register_partner_account: {
                account: string;
            };
            update_partner_account: {
                partnerId: string;
                partnerAccount: string;
            };
            attribute_account: {
                partnerId: string;
            };
            upgrade_partner: {
                partnerId: string;
                feePercentage: string;
            };
            create_futurepass_with_partner: {
                partnerId: string;
                account: string;
            };
        };
    };
    /**
     * Lookup212: pallet_fee_proxy::pallet::Call<T>
     **/
    PalletFeeProxyCall: {
        _enum: {
            call_with_fee_preferences: {
                paymentAsset: string;
                maxPayment: string;
                call: string;
            };
        };
    };
    /**
     * Lookup213: pallet_fee_control::pallet::Call<T>
     **/
    PalletFeeControlCall: {
        _enum: {
            set_evm_base_fee: {
                value: string;
            };
            set_weight_multiplier: {
                value: string;
            };
            set_length_multiplier: {
                value: string;
            };
        };
    };
    /**
     * Lookup216: pallet_xls20::pallet::Call<T>
     **/
    PalletXls20Call: {
        _enum: {
            set_relayer: {
                relayer: string;
            };
            set_xls20_fee: {
                newFee: string;
            };
            enable_xls20_compatibility: {
                collectionId: string;
            };
            re_request_xls20_mint: {
                collectionId: string;
                serialNumbers: string;
            };
            fulfill_xls20_mint: {
                collectionId: string;
                tokenMappings: string;
            };
            set_collection_mappings: {
                mappings: string;
            };
        };
    };
    /**
     * Lookup223: pallet_xls20::types::Xls20Collection
     **/
    PalletXls20Xls20Collection: {
        issuerAddress: string;
        taxon: string;
    };
    /**
     * Lookup224: pallet_doughnut::pallet::Call<T>
     **/
    PalletDoughnutCall: {
        _enum: {
            transact: {
                call: string;
                doughnut: string;
                nonce: string;
                genesisHash: string;
                tip: string;
                signature: string;
            };
            revoke_doughnut: {
                doughnut: string;
                revoke: string;
            };
            revoke_holder: {
                holder: string;
                revoke: string;
            };
            update_whitelisted_holders: {
                holder: string;
                add: string;
            };
        };
    };
    /**
     * Lookup225: pallet_maintenance_mode::pallet::Call<T>
     **/
    PalletMaintenanceModeCall: {
        _enum: {
            enable_maintenance_mode: {
                enabled: string;
            };
            block_account: {
                account: string;
                blocked: string;
            };
            block_evm_target: {
                targetAddress: string;
                blocked: string;
            };
            block_call: {
                palletName: string;
                callName: string;
                blocked: string;
            };
            block_pallet: {
                palletName: string;
                blocked: string;
            };
        };
    };
    /**
     * Lookup227: pallet_crowdsale::pallet::Call<T>
     **/
    PalletCrowdsaleCall: {
        _enum: {
            initialize: {
                paymentAssetId: string;
                collectionId: string;
                softCapPrice: string;
                saleDuration: string;
                voucherName: string;
                voucherSymbol: string;
            };
            enable: {
                saleId: string;
            };
            participate: {
                saleId: string;
                amount: string;
            };
            distribute_crowdsale_rewards: string;
            claim_voucher: {
                saleId: string;
            };
            redeem_voucher: {
                saleId: string;
                quantity: string;
            };
            proxy_vault_call: {
                saleId: string;
                call: string;
            };
            try_force_distribution: {
                saleId: string;
            };
        };
    };
    /**
     * Lookup229: pallet_nfi::pallet::Call<T>
     **/
    PalletNfiCall: {
        _enum: {
            set_relayer: {
                relayer: string;
            };
            set_fee_to: {
                feeTo: string;
            };
            set_fee_details: {
                subType: string;
                feeDetails: string;
            };
            enable_nfi_for_trn_collection: {
                collectionId: string;
                subType: string;
            };
            manual_data_request: {
                tokenId: string;
                subType: string;
            };
            submit_nfi_data: {
                tokenId: string;
                dataItem: string;
            };
        };
    };
    /**
     * Lookup230: pallet_nfi::types::NFISubType
     **/
    PalletNfiNfiSubType: {
        _enum: string[];
    };
    /**
     * Lookup232: pallet_nfi::types::FeeDetails<seed_primitives::signature::AccountId20>
     **/
    PalletNfiFeeDetails: {
        assetId: string;
        amount: string;
        receiver: string;
    };
    /**
     * Lookup233: pallet_nfi::types::MultiChainTokenId<MaxByteLength>
     **/
    PalletNfiMultiChainTokenId: {
        chainId: string;
        collectionId: string;
        serialNumber: string;
    };
    /**
     * Lookup234: pallet_nfi::types::GenericCollectionId<MaxByteLength>
     **/
    PalletNfiGenericCollectionId: {
        _enum: {
            U32: string;
            U64: string;
            U128: string;
            H160: string;
            H256: string;
            Bytes: string;
            Empty: string;
            U256: string;
        };
    };
    /**
     * Lookup236: pallet_nfi::types::GenericSerialNumber<MaxByteLength>
     **/
    PalletNfiGenericSerialNumber: {
        _enum: {
            U32: string;
            U64: string;
            U128: string;
            Bytes: string;
            U256: string;
        };
    };
    /**
     * Lookup237: pallet_nfi::types::NFIDataType<MaxDataLength>
     **/
    PalletNfiNfiDataType: {
        _enum: {
            NFI: string;
        };
    };
    /**
     * Lookup238: pallet_nfi::types::NFIMatrix<MaxDataLength>
     **/
    PalletNfiNfiMatrix: {
        metadataLink: string;
        verificationHash: string;
    };
    /**
     * Lookup240: pallet_migration::pallet::Call<T>
     **/
    PalletMigrationCall: {
        _enum: {
            enable_migration: {
                enabled: string;
            };
            set_block_delay: {
                blockDelay: string;
            };
            set_block_limit: {
                blockLimit: string;
            };
        };
    };
    /**
     * Lookup241: pallet_sylo_data_verification::pallet::Call<T>
     **/
    PalletSyloDataVerificationCall: {
        _enum: {
            set_payment_asset: {
                paymentAsset: string;
            };
            set_sylo_resolver_method: {
                resolverMethod: string;
            };
            register_resolver: {
                identifier: string;
                serviceEndpoints: string;
            };
            update_resolver: {
                identifier: string;
                serviceEndpoints: string;
            };
            deregister_resolver: {
                identifier: string;
            };
            create_validation_record: {
                dataId: string;
                resolvers: string;
                dataType: string;
                tags: string;
                checksum: string;
            };
            add_validation_record_entry: {
                dataAuthor: string;
                dataId: string;
                checksum: string;
            };
            update_validation_record: {
                dataId: string;
                resolvers: string;
                dataType: string;
                tags: string;
            };
            delete_validation_record: {
                dataId: string;
            };
        };
    };
    /**
     * Lookup246: seed_pallet_common::sylo::ResolverId<StringLimit>
     **/
    SeedPalletCommonSyloResolverId: {
        method: string;
        identifier: string;
    };
    /**
     * Lookup252: pallet_liquidity_pools::pallet::Call<T>
     **/
    PalletLiquidityPoolsCall: {
        _enum: {
            create_pool: {
                rewardAssetId: string;
                stakedAssetId: string;
                interestRate: string;
                maxTokens: string;
                lockStartBlock: string;
                lockEndBlock: string;
            };
            set_pool_succession: {
                predecessorPoolId: string;
                successorPoolId: string;
            };
            set_pool_rollover: {
                id: string;
                shouldRollover: string;
            };
            close_pool: {
                id: string;
            };
            enter_pool: {
                poolId: string;
                amount: string;
            };
            exit_pool: {
                id: string;
            };
            claim_reward: {
                id: string;
            };
            rollover_unsigned: {
                id: string;
                currentBlock: string;
            };
        };
    };
    /**
     * Lookup253: pallet_sylo_data_permissions::pallet::Call<T>
     **/
    PalletSyloDataPermissionsCall: {
        _enum: {
            grant_data_permissions: {
                dataAuthor: string;
                grantee: string;
                dataIds: string;
                permission: string;
                expiry: string;
                irrevocable: string;
            };
            revoke_data_permission: {
                dataAuthor: string;
                permissionId: string;
                grantee: string;
                dataId: string;
            };
            grant_tagged_permissions: {
                grantee: string;
                permission: string;
                tags: string;
                expiry: string;
                irrevocable: string;
            };
            revoke_tagged_permission: {
                grantee: string;
                permissionId: string;
            };
            grant_permission_reference: {
                grantee: string;
                permissionRecordId: string;
            };
            revoke_permission_reference: {
                grantee: string;
            };
        };
    };
    /**
     * Lookup255: seed_pallet_common::sylo::DataPermission
     **/
    SeedPalletCommonSyloDataPermission: {
        _enum: string[];
    };
    /**
     * Lookup256: pallet_sylo_action_permissions::pallet::Call<T>
     **/
    PalletSyloActionPermissionsCall: {
        _enum: {
            grant_transact_permission: {
                grantee: string;
                spender: string;
                spendingBalance: string;
                allowedCalls: string;
                expiry: string;
            };
            update_transact_permission: {
                grantee: string;
                spender: string;
                spendingBalance: string;
                allowedCalls: string;
                expiry: string;
            };
            revoke_transact_permission: {
                grantee: string;
            };
            accept_transact_permission: {
                permissionToken: string;
                tokenSignature: string;
            };
            transact: {
                grantor: string;
                call: string;
            };
        };
    };
    /**
     * Lookup257: pallet_sylo_action_permissions::types::Spender
     **/
    PalletSyloActionPermissionsSpender: {
        _enum: string[];
    };
    /**
     * Lookup266: pallet_sylo_action_permissions::types::TransactPermissionToken<seed_primitives::signature::AccountId20, BlockNumber, MaxCallIds, StringLimit>
     **/
    PalletSyloActionPermissionsTransactPermissionToken: {
        grantee: string;
        useFuturepass: string;
        spender: string;
        spendingBalance: string;
        allowedCalls: string;
        expiry: string;
        nonce: string;
    };
    /**
     * Lookup267: pallet_sylo_action_permissions::types::TransactPermissionTokenSignature<XrplMaxMessageLength, XrplMaxSignatureLength>
     **/
    PalletSyloActionPermissionsTransactPermissionTokenSignature: {
        _enum: {
            EIP191: string;
            XRPL: string;
        };
    };
    /**
     * Lookup269: pallet_sylo_action_permissions::types::XrplTokenSignature<XrplMaxMessageLength, XrplMaxSignatureLength>
     **/
    PalletSyloActionPermissionsXrplTokenSignature: {
        encodedMsg: string;
        signature: string;
    };
    /**
     * Lookup272: pallet_election_provider_multi_phase::pallet::Call<T>
     **/
    PalletElectionProviderMultiPhaseCall: {
        _enum: {
            submit_unsigned: {
                rawSolution: string;
                witness: string;
            };
            set_minimum_untrusted_score: {
                maybeNextScore: string;
            };
            set_emergency_election_result: {
                supports: string;
            };
            submit: {
                rawSolution: string;
            };
            governance_fallback: {
                maybeMaxVoters: string;
                maybeMaxTargets: string;
            };
        };
    };
    /**
     * Lookup273: pallet_election_provider_multi_phase::RawSolution<seed_runtime::NposCompactSolution16>
     **/
    PalletElectionProviderMultiPhaseRawSolution: {
        solution: string;
        score: string;
        round: string;
    };
    /**
     * Lookup274: seed_runtime::NposCompactSolution16
     **/
    SeedRuntimeNposCompactSolution16: {
        votes1: string;
        votes2: string;
        votes3: string;
        votes4: string;
        votes5: string;
        votes6: string;
        votes7: string;
        votes8: string;
        votes9: string;
        votes10: string;
        votes11: string;
        votes12: string;
        votes13: string;
        votes14: string;
        votes15: string;
        votes16: string;
    };
    /**
     * Lookup325: sp_npos_elections::ElectionScore
     **/
    SpNposElectionsElectionScore: {
        minimalStake: string;
        sumStake: string;
        sumStakeSquared: string;
    };
    /**
     * Lookup326: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
     **/
    PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
        voters: string;
        targets: string;
    };
    /**
     * Lookup330: sp_npos_elections::Support<seed_primitives::signature::AccountId20>
     **/
    SpNposElectionsSupport: {
        total: string;
        voters: string;
    };
    /**
     * Lookup331: pallet_bags_list::pallet::Call<T, I>
     **/
    PalletBagsListCall: {
        _enum: {
            rebag: {
                dislocated: string;
            };
            put_in_front_of: {
                lighter: string;
            };
        };
    };
    /**
     * Lookup332: pallet_ethereum::pallet::Call<T>
     **/
    PalletEthereumCall: {
        _enum: {
            transact: {
                transaction: string;
            };
        };
    };
    /**
     * Lookup333: ethereum::transaction::TransactionV2
     **/
    EthereumTransactionTransactionV2: {
        _enum: {
            Legacy: string;
            EIP2930: string;
            EIP1559: string;
        };
    };
    /**
     * Lookup334: ethereum::transaction::LegacyTransaction
     **/
    EthereumTransactionLegacyTransaction: {
        nonce: string;
        gasPrice: string;
        gasLimit: string;
        action: string;
        value: string;
        input: string;
        signature: string;
    };
    /**
     * Lookup335: ethereum::transaction::TransactionAction
     **/
    EthereumTransactionTransactionAction: {
        _enum: {
            Call: string;
            Create: string;
        };
    };
    /**
     * Lookup336: ethereum::transaction::TransactionSignature
     **/
    EthereumTransactionTransactionSignature: {
        v: string;
        r: string;
        s: string;
    };
    /**
     * Lookup338: ethereum::transaction::EIP2930Transaction
     **/
    EthereumTransactionEip2930Transaction: {
        chainId: string;
        nonce: string;
        gasPrice: string;
        gasLimit: string;
        action: string;
        value: string;
        input: string;
        accessList: string;
        oddYParity: string;
        r: string;
        s: string;
    };
    /**
     * Lookup340: ethereum::transaction::AccessListItem
     **/
    EthereumTransactionAccessListItem: {
        address: string;
        storageKeys: string;
    };
    /**
     * Lookup342: ethereum::transaction::EIP1559Transaction
     **/
    EthereumTransactionEip1559Transaction: {
        chainId: string;
        nonce: string;
        maxPriorityFeePerGas: string;
        maxFeePerGas: string;
        gasLimit: string;
        action: string;
        value: string;
        input: string;
        accessList: string;
        oddYParity: string;
        r: string;
        s: string;
    };
    /**
     * Lookup343: pallet_evm::pallet::Call<T>
     **/
    PalletEvmCall: {
        _enum: {
            withdraw: {
                address: string;
                value: string;
            };
            call: {
                source: string;
                target: string;
                input: string;
                value: string;
                gasLimit: string;
                maxFeePerGas: string;
                maxPriorityFeePerGas: string;
                nonce: string;
                accessList: string;
            };
            create: {
                source: string;
                init: string;
                value: string;
                gasLimit: string;
                maxFeePerGas: string;
                maxPriorityFeePerGas: string;
                nonce: string;
                accessList: string;
            };
            create2: {
                source: string;
                init: string;
                salt: string;
                value: string;
                gasLimit: string;
                maxFeePerGas: string;
                maxPriorityFeePerGas: string;
                nonce: string;
                accessList: string;
            };
        };
    };
    /**
     * Lookup347: pallet_evm_chain_id::pallet::Call<T>
     **/
    PalletEvmChainIdCall: {
        _enum: {
            set_chain_id: {
                chainId: string;
            };
        };
    };
    /**
     * Lookup348: pallet_ethy::pallet::Call<T>
     **/
    PalletEthyCall: {
        _enum: {
            set_xrpl_door_signers: {
                newSigners: string;
            };
            set_relayer: {
                relayer: string;
            };
            deposit_relayer_bond: string;
            withdraw_relayer_bond: string;
            set_event_block_confirmations: {
                confirmations: string;
            };
            set_delayed_event_proofs_per_block: {
                count: string;
            };
            set_challenge_period: {
                blocks: string;
            };
            set_contract_address: {
                contractAddress: string;
            };
            set_bridge_paused: {
                paused: string;
            };
            finalise_authorities_change: {
                nextNotaryKeys: string;
            };
            remove_missing_event_id: {
                eventIdRange: string;
            };
            submit_missing_event: {
                txHash: string;
                event: string;
            };
            submit_event: {
                txHash: string;
                event: string;
            };
            submit_challenge: {
                eventClaimId: string;
            };
            submit_notarization: {
                payload: string;
                signature: string;
            };
        };
    };
    /**
     * Lookup353: pallet_ethy::types::NotarizationPayload
     **/
    PalletEthyNotarizationPayload: {
        _enum: {
            Call: {
                callId: string;
                authorityIndex: string;
                result: string;
            };
            Event: {
                eventClaimId: string;
                authorityIndex: string;
                result: string;
            };
        };
    };
    /**
     * Lookup354: pallet_ethy::types::CheckedEthCallResult
     **/
    PalletEthyCheckedEthCallResult: {
        _enum: {
            Ok: string;
            ReturnDataExceedsLimit: string;
            ReturnDataEmpty: string;
            DataProviderErr: string;
            InvalidEthBlock: string;
            InvalidTimestamp: string;
        };
    };
    /**
     * Lookup355: pallet_ethy::types::EventClaimResult
     **/
    PalletEthyEventClaimResult: {
        _enum: string[];
    };
    /**
     * Lookup356: seed_primitives::ethy::crypto::app_crypto::Signature
     **/
    SeedPrimitivesEthyCryptoAppCryptoSignature: string;
    /**
     * Lookup357: sp_core::ecdsa::Signature
     **/
    SpCoreEcdsaSignature: string;
    /**
     * Lookup358: pallet_erc20_peg::pallet::Call<T>
     **/
    PalletErc20PegCall: {
        _enum: {
            activate_deposits: {
                activate: string;
            };
            activate_withdrawals: {
                activate: string;
            };
            activate_deposits_delay: {
                activate: string;
            };
            activate_withdrawals_delay: {
                activate: string;
            };
            withdraw: {
                assetId: string;
                amount: string;
                beneficiary: string;
            };
            set_erc20_peg_address: {
                ethAddress: string;
            };
            set_root_peg_address: {
                ethAddress: string;
            };
            set_erc20_meta: {
                details: string;
            };
            set_erc20_asset_map: {
                assetId: string;
                ethAddress: string;
            };
            set_payment_delay: {
                assetId: string;
                minBalance: string;
                delay: string;
            };
            claim_delayed_payment: {
                blockNumber: string;
                paymentId: string;
            };
        };
    };
    /**
     * Lookup361: pallet_nft_peg::pallet::Call<T>
     **/
    PalletNftPegCall: {
        _enum: {
            set_contract_address: {
                contract: string;
            };
            withdraw: {
                collectionIds: string;
                serialNumbers: string;
                destination: string;
            };
            reclaim_blocked_nfts: {
                blockedMintId: string;
                destination: string;
            };
        };
    };
    /**
     * Lookup366: pallet_proxy::pallet::Call<T>
     **/
    PalletProxyCall: {
        _enum: {
            proxy: {
                real: string;
                forceProxyType: string;
                call: string;
            };
            add_proxy: {
                delegate: string;
                proxyType: string;
                delay: string;
            };
            remove_proxy: {
                delegate: string;
                proxyType: string;
                delay: string;
            };
            remove_proxies: string;
            create_pure: {
                proxyType: string;
                delay: string;
                index: string;
            };
            kill_pure: {
                spawner: string;
                proxyType: string;
                index: string;
                height: string;
                extIndex: string;
            };
            announce: {
                real: string;
                callHash: string;
            };
            remove_announcement: {
                real: string;
                callHash: string;
            };
            reject_announcement: {
                delegate: string;
                callHash: string;
            };
            proxy_announced: {
                delegate: string;
                real: string;
                forceProxyType: string;
                call: string;
            };
        };
    };
    /**
     * Lookup368: seed_runtime::impls::ProxyType
     **/
    SeedRuntimeImplsProxyType: {
        _enum: string[];
    };
    /**
     * Lookup369: pallet_futurepass::pallet::Call<T>
     **/
    PalletFuturepassCall: {
        _enum: {
            create: {
                account: string;
            };
            register_delegate_with_signature: {
                futurepass: string;
                delegate: string;
                proxyType: string;
                deadline: string;
                signature: string;
            };
            unregister_delegate: {
                futurepass: string;
                delegate: string;
            };
            transfer_futurepass: {
                currentOwner: string;
                newOwner: string;
            };
            proxy_extrinsic: {
                futurepass: string;
                call: string;
            };
        };
    };
    /**
     * Lookup370: pallet_echo::pallet::Event
     **/
    PalletEchoEvent: {
        _enum: {
            PingSent: {
                sessionId: string;
                source: string;
                destination: string;
                eventProofId: string;
            };
            PongReceived: {
                sessionId: string;
                source: string;
                data: string;
            };
            PingReceived: {
                sessionId: string;
                source: string;
                data: string;
            };
            PongSent: {
                sessionId: string;
                source: string;
                destination: string;
                eventProofId: string;
            };
        };
    };
    /**
     * Lookup371: pallet_marketplace::pallet::Event<T>
     **/
    PalletMarketplaceEvent: {
        _enum: {
            FixedPriceSaleList: {
                tokens: string;
                listingId: string;
                marketplaceId: string;
                price: string;
                paymentAsset: string;
                seller: string;
                close: string;
            };
            FixedPriceSaleComplete: {
                tokens: string;
                listingId: string;
                marketplaceId: string;
                price: string;
                paymentAsset: string;
                buyer: string;
                seller: string;
            };
            FixedPriceSaleClose: {
                tokens: string;
                listingId: string;
                marketplaceId: string;
                reason: string;
            };
            FixedPriceSalePriceUpdate: {
                tokens: string;
                listingId: string;
                marketplaceId: string;
                newPrice: string;
            };
            AuctionOpen: {
                tokens: string;
                listingId: string;
                marketplaceId: string;
                paymentAsset: string;
                reservePrice: string;
                seller: string;
                close: string;
            };
            AuctionSold: {
                tokens: string;
                listingId: string;
                marketplaceId: string;
                paymentAsset: string;
                hammerPrice: string;
                winner: string;
            };
            AuctionClose: {
                tokens: string;
                listingId: string;
                marketplaceId: string;
                reason: string;
            };
            Bid: {
                tokens: string;
                listingId: string;
                marketplaceId: string;
                amount: string;
                bidder: string;
            };
            MarketplaceRegister: {
                account: string;
                entitlement: string;
                marketplaceId: string;
            };
            Offer: {
                offerId: string;
                amount: string;
                assetId: string;
                marketplaceId: string;
                buyer: string;
            };
            OfferCancel: {
                offerId: string;
                marketplaceId: string;
                tokenId: string;
            };
            OfferAccept: {
                offerId: string;
                marketplaceId: string;
                tokenId: string;
                amount: string;
                assetId: string;
            };
            FeeToSet: {
                account: string;
            };
        };
    };
    /**
     * Lookup372: pallet_marketplace::types::FixedPriceClosureReason
     **/
    PalletMarketplaceFixedPriceClosureReason: {
        _enum: string[];
    };
    /**
     * Lookup373: pallet_marketplace::types::AuctionClosureReason
     **/
    PalletMarketplaceAuctionClosureReason: {
        _enum: string[];
    };
    /**
     * Lookup374: pallet_preimage::pallet::Event<T>
     **/
    PalletPreimageEvent: {
        _enum: {
            Noted: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Requested: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Cleared: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /**
     * Lookup375: pallet_vortex_distribution::pallet::Event<T>
     **/
    PalletVortexDistributionEvent: {
        _enum: {
            AdminAccountChanged: {
                oldKey: string;
                newKey: string;
            };
            VtxDistCreated: {
                id: string;
            };
            VtxDistDisabled: {
                id: string;
            };
            VtxDistDone: {
                id: string;
            };
            VtxDistPaidOut: {
                id: string;
                who: string;
                amount: string;
            };
            VtxDistPayFailed: {
                id: string;
                who: string;
                amount: string;
            };
            VtxDistStarted: {
                id: string;
            };
            SetFeePotAssetBalances: {
                id: string;
                assetsBalances: string;
            };
            SetVtxVaultAssetBalances: {
                id: string;
                assetsBalances: string;
            };
            SetAssetPrices: {
                id: string;
                assetPrices: string;
            };
            VtxWorkPointRegistered: {
                id: string;
                workPoints: string;
            };
            VtxRewardPointRegistered: {
                id: string;
                rewardPoints: string;
            };
            VtxDistributionTriggered: {
                id: string;
            };
            VtxDistributionTriggering: {
                id: string;
            };
            SetVtxTotalSupply: {
                id: string;
                totalSupply: string;
            };
            SetConsiderCurrentBalance: {
                value: string;
            };
            SetDisableRedeem: {
                value: string;
            };
            SetVtxVaultRedeemAssetList: {
                assetList: string;
            };
            VtxRedeemed: {
                who: string;
                amount: string;
            };
            SetEnableManualRewardInput: {
                value: string;
            };
            RewardRegistered: {
                id: string;
                rewards: string;
            };
            PivotStringTooLong: {
                id: string;
            };
        };
    };
    /**
     * Lookup376: pallet_partner_attribution::pallet::Event<T>
     **/
    PalletPartnerAttributionEvent: {
        _enum: {
            PartnerRegistered: {
                partnerId: string;
                partner: string;
            };
            PartnerUpdated: {
                partnerId: string;
                account: string;
            };
            PartnerRemoved: {
                partnerId: string;
                account: string;
            };
            PartnerUpgraded: {
                partnerId: string;
                account: string;
                feePercentage: string;
            };
            AccountAttributed: {
                partnerId: string;
                account: string;
            };
        };
    };
    /**
     * Lookup377: pallet_partner_attribution::PartnerInformation<seed_primitives::signature::AccountId20>
     **/
    PalletPartnerAttributionPartnerInformation: {
        owner: string;
        account: string;
        feePercentage: string;
        accumulatedFees: string;
    };
    /**
     * Lookup379: pallet_fee_proxy::pallet::Event<T>
     **/
    PalletFeeProxyEvent: {
        _enum: {
            CallWithFeePreferences: {
                who: string;
                paymentAsset: string;
                maxPayment: string;
            };
        };
    };
    /**
     * Lookup380: pallet_fee_control::pallet::Event<T>
     **/
    PalletFeeControlEvent: {
        _enum: {
            EvmBaseFeeSet: {
                baseFee: string;
            };
            WeightMultiplierSet: {
                weightMultiplier: string;
            };
            LengthMultiplierSet: {
                lengthMultiplier: string;
            };
        };
    };
    /**
     * Lookup381: pallet_xls20::pallet::Event<T>
     **/
    PalletXls20Event: {
        _enum: {
            Xls20MintRequest: {
                collectionId: string;
                serialNumbers: string;
                tokenUris: string;
            };
            RelayerSet: {
                account: string;
            };
            Xls20MintFeeSet: {
                newFee: string;
            };
            Xls20MappingSet: {
                collectionId: string;
                mappings: string;
            };
            Xls20CollectionMappingsSet: {
                mappings: string;
            };
            Xls20CompatibilityEnabled: {
                collectionId: string;
            };
            Xls20MintFeePaid: {
                collectionOwner: string;
                totalFee: string;
            };
        };
    };
    /**
     * Lookup382: pallet_doughnut::pallet::Event<T>
     **/
    PalletDoughnutEvent: {
        _enum: {
            DoughnutCallExecuted: {
                doughnut: string;
                call: string;
                result: string;
            };
            WhitelistedHoldersUpdated: {
                holder: string;
                enabled: string;
            };
            DoughnutRevokeStateUpdated: {
                doughnutHash: string;
                revoked: string;
            };
            HolderRevokeStateUpdated: {
                issuer: string;
                holder: string;
                revoked: string;
            };
        };
    };
    /**
     * Lookup383: pallet_maintenance_mode::pallet::Event<T>
     **/
    PalletMaintenanceModeEvent: {
        _enum: {
            MaintenanceModeActivated: {
                enabled: string;
            };
            AccountBlocked: {
                account: string;
                blocked: string;
            };
            EVMTargetBlocked: {
                targetAddress: string;
                blocked: string;
            };
            CallBlocked: {
                palletName: string;
                callName: string;
                blocked: string;
            };
            PalletBlocked: {
                palletName: string;
                blocked: string;
            };
        };
    };
    /**
     * Lookup384: pallet_crowdsale::pallet::Event<T>
     **/
    PalletCrowdsaleEvent: {
        _enum: {
            CrowdsaleCreated: {
                saleId: string;
                info: string;
            };
            VaultCallProxied: {
                saleId: string;
                who: string;
                vault: string;
                call: string;
            };
            CrowdsaleEnabled: {
                saleId: string;
                info: string;
                endBlock: string;
            };
            CrowdsaleParticipated: {
                saleId: string;
                who: string;
                asset: string;
                amount: string;
            };
            CrowdsaleNFTRedeemed: {
                saleId: string;
                who: string;
                collectionId: string;
                quantity: string;
            };
            CrowdsaleClosed: {
                saleId: string;
                info: string;
            };
            CrowdsaleManualDistribution: {
                saleId: string;
                info: string;
                who: string;
            };
            CrowdsaleVouchersClaimed: {
                saleId: string;
                who: string;
                amount: string;
            };
            CrowdsaleDistributionComplete: {
                saleId: string;
                vouchersDistributed: string;
            };
        };
    };
    /**
     * Lookup385: pallet_crowdsale::types::SaleInformation<seed_primitives::signature::AccountId20, BlockNumber>
     **/
    PalletCrowdsaleSaleInformation: {
        status: string;
        admin: string;
        vault: string;
        paymentAssetId: string;
        rewardCollectionId: string;
        softCapPrice: string;
        fundsRaised: string;
        participantCount: string;
        voucherAssetId: string;
        duration: string;
    };
    /**
     * Lookup386: pallet_crowdsale::types::SaleStatus<BlockNumber>
     **/
    PalletCrowdsaleSaleStatus: {
        _enum: {
            Pending: string;
            Enabled: string;
            Distributing: string;
            Ended: string;
            DistributionFailed: string;
        };
    };
    /**
     * Lookup387: pallet_nfi::pallet::Event<T>
     **/
    PalletNfiEvent: {
        _enum: {
            DataRequestNew: {
                subType: string;
                caller: string;
                tokenId: string;
            };
            DataRequestExisting: {
                subType: string;
                caller: string;
                tokenId: string;
            };
            DataSet: {
                subType: string;
                tokenId: string;
                dataItem: string;
            };
            DataRemoved: {
                tokenId: string;
            };
            FeeDetailsSet: {
                subType: string;
                feeDetails: string;
            };
            FeeToSet: {
                account: string;
            };
            MintFeePaid: {
                subType: string;
                who: string;
                assetId: string;
                totalFee: string;
            };
            NfiEnabled: {
                subType: string;
                collectionId: string;
            };
            RelayerSet: {
                account: string;
            };
        };
    };
    /**
     * Lookup388: pallet_migration::pallet::Event
     **/
    PalletMigrationEvent: {
        _enum: {
            MigrationRuntimeUpgrade: string;
            MigrationEnabled: string;
            MigrationDisabled: string;
            MigrationComplete: {
                itemsMigrated: string;
            };
            MigrationSet: string;
            BlockDelaySet: {
                blockDelay: string;
            };
            BlockLimitSet: {
                blockLimit: string;
            };
        };
    };
    /**
     * Lookup389: pallet_sylo_data_verification::pallet::Event<T>
     **/
    PalletSyloDataVerificationEvent: {
        _enum: {
            PaymentAssetSet: {
                assetId: string;
            };
            SyloResolverMethodSet: {
                method: string;
            };
            ResolverRegistered: {
                id: string;
                controller: string;
                serviceEndpoints: string;
            };
            ResolverUpdated: {
                id: string;
                controller: string;
                serviceEndpoints: string;
            };
            ResolverDeregistered: {
                id: string;
            };
            ValidationRecordCreated: {
                author: string;
                id: string;
            };
            ValidationEntryAdded: {
                author: string;
                id: string;
                checksum: string;
            };
            ValidationRecordUpdated: {
                author: string;
                id: string;
                resolvers: string;
                dataType: string;
                tags: string;
            };
            ValidationRecordDeleted: {
                author: string;
                id: string;
            };
        };
    };
    /**
     * Lookup392: pallet_liquidity_pools::pallet::Event<T>
     **/
    PalletLiquidityPoolsEvent: {
        _enum: {
            PoolOpen: {
                poolId: string;
                rewardAssetId: string;
                stakedAssetId: string;
                interestRate: string;
                maxTokens: string;
                lockStartBlock: string;
                lockEndBlock: string;
            };
            PoolStarted: {
                poolId: string;
            };
            PoolRenewing: {
                poolId: string;
            };
            PoolMatured: {
                poolId: string;
            };
            PoolClosed: {
                poolId: string;
                rewardAssetAmount: string;
                stakedAssetAmount: string;
                receiver: string;
            };
            SetSuccession: {
                predecessorPoolId: string;
                successorPoolId: string;
            };
            UserInfoUpdated: {
                poolId: string;
                accountId: string;
                shouldRollover: string;
            };
            UserJoined: {
                accountId: string;
                poolId: string;
                amount: string;
            };
            UserExited: {
                accountId: string;
                poolId: string;
                amount: string;
            };
            UserRolledOver: {
                accountId: string;
                poolId: string;
                rolledToPoolId: string;
                amount: string;
            };
            RewardsClaimed: {
                accountId: string;
                poolId: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup393: pallet_sylo_data_permissions::pallet::Event<T>
     **/
    PalletSyloDataPermissionsEvent: {
        _enum: {
            DataPermissionGranted: {
                dataAuthor: string;
                grantor: string;
                grantee: string;
                dataId: string;
                permission: string;
                expiry: string;
                irrevocable: string;
            };
            DataPermissionRevoked: {
                revoker: string;
                grantee: string;
                permission: string;
                dataId: string;
            };
            TaggedDataPermissionsGranted: {
                grantor: string;
                grantee: string;
                permission: string;
                tags: string;
                expiry: string;
                irrevocable: string;
            };
            TaggedDataPermissionsRevoked: {
                revoker: string;
                grantee: string;
                permission: string;
                tags: string;
            };
            PermissionReferenceGranted: {
                grantor: string;
                grantee: string;
                permissionRecordId: string;
            };
            PermissionReferenceRevoked: {
                grantor: string;
                grantee: string;
                permissionRecordId: string;
            };
            ExpiredDataPermissionRemoved: {
                dataAuthor: string;
                grantee: string;
                dataId: string;
                permissionId: string;
            };
            ExpiredTaggedPermissionRemoved: {
                dataAuthor: string;
                grantee: string;
                permissionId: string;
            };
        };
    };
    /**
     * Lookup394: pallet_sylo_action_permissions::pallet::Event<T>
     **/
    PalletSyloActionPermissionsEvent: {
        _enum: {
            TransactPermissionGranted: {
                grantor: string;
                grantee: string;
                spender: string;
                spendingBalance: string;
                allowedCalls: string;
                expiry: string;
            };
            PermissionTransactExecuted: {
                grantor: string;
                grantee: string;
            };
            TransactPermissionUpdated: {
                grantor: string;
                grantee: string;
                spender: string;
                spendingBalance: string;
                allowedCalls: string;
                expiry: string;
            };
            TransactPermissionRevoked: {
                grantor: string;
                grantee: string;
            };
            TransactPermissionAccepted: {
                grantor: string;
                grantee: string;
            };
        };
    };
    /**
     * Lookup395: pallet_election_provider_multi_phase::pallet::Event<T>
     **/
    PalletElectionProviderMultiPhaseEvent: {
        _enum: {
            SolutionStored: {
                compute: string;
                origin: string;
                prevEjected: string;
            };
            ElectionFinalized: {
                compute: string;
                score: string;
            };
            ElectionFailed: string;
            Rewarded: {
                account: string;
                value: string;
            };
            Slashed: {
                account: string;
                value: string;
            };
            PhaseTransitioned: {
                from: string;
                to: string;
                round: string;
            };
        };
    };
    /**
     * Lookup396: pallet_election_provider_multi_phase::ElectionCompute
     **/
    PalletElectionProviderMultiPhaseElectionCompute: {
        _enum: string[];
    };
    /**
     * Lookup397: pallet_election_provider_multi_phase::Phase<Bn>
     **/
    PalletElectionProviderMultiPhasePhase: {
        _enum: {
            Off: string;
            Signed: string;
            Unsigned: string;
            Emergency: string;
        };
    };
    /**
     * Lookup399: pallet_bags_list::pallet::Event<T, I>
     **/
    PalletBagsListEvent: {
        _enum: {
            Rebagged: {
                who: string;
                from: string;
                to: string;
            };
            ScoreUpdated: {
                who: string;
                newScore: string;
            };
        };
    };
    /**
     * Lookup400: pallet_ethereum::pallet::Event
     **/
    PalletEthereumEvent: {
        _enum: {
            Executed: {
                from: string;
                to: string;
                transactionHash: string;
                exitReason: string;
                extraData: string;
            };
        };
    };
    /**
     * Lookup401: evm_core::error::ExitReason
     **/
    EvmCoreErrorExitReason: {
        _enum: {
            Succeed: string;
            Error: string;
            Revert: string;
            Fatal: string;
        };
    };
    /**
     * Lookup402: evm_core::error::ExitSucceed
     **/
    EvmCoreErrorExitSucceed: {
        _enum: string[];
    };
    /**
     * Lookup403: evm_core::error::ExitError
     **/
    EvmCoreErrorExitError: {
        _enum: {
            StackUnderflow: string;
            StackOverflow: string;
            InvalidJump: string;
            InvalidRange: string;
            DesignatedInvalid: string;
            CallTooDeep: string;
            CreateCollision: string;
            CreateContractLimit: string;
            OutOfOffset: string;
            OutOfGas: string;
            OutOfFund: string;
            PCUnderflow: string;
            CreateEmpty: string;
            Other: string;
            MaxNonce: string;
            InvalidCode: string;
        };
    };
    /**
     * Lookup406: evm_core::error::ExitRevert
     **/
    EvmCoreErrorExitRevert: {
        _enum: string[];
    };
    /**
     * Lookup407: evm_core::error::ExitFatal
     **/
    EvmCoreErrorExitFatal: {
        _enum: {
            NotSupported: string;
            UnhandledInterrupt: string;
            CallErrorAsFatal: string;
            Other: string;
        };
    };
    /**
     * Lookup408: pallet_evm::pallet::Event<T>
     **/
    PalletEvmEvent: {
        _enum: {
            Log: {
                log: string;
            };
            Created: {
                address: string;
            };
            CreatedFailed: {
                address: string;
            };
            Executed: {
                address: string;
            };
            ExecutedFailed: {
                address: string;
            };
        };
    };
    /**
     * Lookup409: ethereum::log::Log
     **/
    EthereumLog: {
        address: string;
        topics: string;
        data: string;
    };
    /**
     * Lookup410: pallet_evm_chain_id::pallet::Event<T>
     **/
    PalletEvmChainIdEvent: {
        _enum: {
            ChainIdSet: string;
        };
    };
    /**
     * Lookup411: pallet_ethy::pallet::Event<T>
     **/
    PalletEthyEvent: {
        _enum: {
            Verified: {
                eventClaimId: string;
            };
            Invalid: {
                eventClaimId: string;
            };
            AuthoritySetChange: {
                eventProofId: string;
                validatorSetId: string;
            };
            XrplAuthoritySetChange: {
                eventProofIds: string;
                validatorSetId: string;
            };
            ProofDelayed: {
                eventProofId: string;
            };
            ProcessingOk: {
                eventClaimId: string;
            };
            ProcessingFailed: {
                eventClaimId: string;
                routerError: string;
            };
            Challenged: {
                eventClaimId: string;
                challenger: string;
            };
            ProcessAtExtended: {
                eventClaimId: string;
                processAt: string;
            };
            EventSend: {
                eventProofId: string;
                signingRequest: string;
            };
            EventSubmit: {
                eventClaimId: string;
                eventClaim: string;
                processAt: string;
            };
            RelayerBondDeposit: {
                relayer: string;
                bond: string;
            };
            RelayerBondWithdraw: {
                relayer: string;
                bond: string;
            };
            RelayerSet: {
                relayer: string;
            };
            XrplDoorSignersSet: {
                newSigners: string;
            };
            FinaliseScheduleFail: {
                scheduledBlock: string;
            };
            SetContractAddress: {
                address: string;
            };
            XrplAuthoritySetChangeRequestFailed: {
                error: string;
            };
            EventBlockConfirmationsSet: {
                confirmations: string;
            };
            DelayedEventProofsPerBlockSet: {
                count: string;
            };
            ChallengePeriodSet: {
                period: string;
            };
            BridgeManualPause: {
                paused: string;
            };
            MissingEventIdsRemoved: {
                range: string;
            };
        };
    };
    /**
     * Lookup413: seed_pallet_common::EventRouterError
     **/
    SeedPalletCommonEventRouterError: {
        _enum: {
            FailedProcessing: string;
            NoReceiver: string;
        };
    };
    /**
     * Lookup414: pallet_ethy::types::EthySigningRequest<MaxEthData>
     **/
    PalletEthyEthySigningRequest: {
        _enum: {
            Ethereum: string;
            XrplTx: string;
        };
    };
    /**
     * Lookup415: pallet_ethy::types::EthereumEventInfo<MaxEthData>
     **/
    PalletEthyEthereumEventInfo: {
        source: string;
        destination: string;
        message: string;
        validatorSetId: string;
        eventProofId: string;
    };
    /**
     * Lookup417: pallet_ethy::types::EventClaim<MaxEthData>
     **/
    PalletEthyEventClaim: {
        txHash: string;
        source: string;
        destination: string;
        data: string;
    };
    /**
     * Lookup418: pallet_erc20_peg::pallet::Event<T>
     **/
    PalletErc20PegEvent: {
        _enum: {
            Erc20DepositDelayed: {
                paymentId: string;
                scheduledBlock: string;
                amount: string;
                beneficiary: string;
                assetId: string;
            };
            Erc20WithdrawalDelayed: {
                paymentId: string;
                scheduledBlock: string;
                amount: string;
                beneficiary: string;
                assetId: string;
                source: string;
            };
            Erc20DelayFailed: {
                paymentId: string;
                scheduledBlock: string;
                assetId: string;
                source: string;
            };
            DelayedErc20DepositFailed: {
                paymentId: string;
                beneficiary: string;
            };
            DelayedErc20WithdrawalFailed: {
                assetId: string;
                beneficiary: string;
            };
            Erc20Deposit: {
                assetId: string;
                amount: string;
                beneficiary: string;
            };
            Erc20Withdraw: {
                assetId: string;
                amount: string;
                beneficiary: string;
                source: string;
            };
            Erc20DepositFail: {
                source: string;
                abiData: string;
            };
            SetContractAddress: {
                address: string;
            };
            SetRootPegContract: {
                address: string;
            };
            PaymentDelaySet: {
                assetId: string;
                minBalance: string;
                delay: string;
            };
            NoAvailableDelayedPaymentIds: string;
            ActivateDepositDelay: {
                active: string;
            };
            ActivateWithdrawalDelay: {
                active: string;
            };
            ActivateDeposits: {
                active: string;
            };
            ActivateWithdrawals: {
                active: string;
            };
        };
    };
    /**
     * Lookup419: pallet_nft_peg::pallet::Event<T>
     **/
    PalletNftPegEvent: {
        _enum: {
            Erc721Deposit: {
                destination: string;
            };
            Erc721Mint: {
                collectionId: string;
                serialNumbers: string;
                owner: string;
            };
            ERC721Blocked: {
                blockedMintId: string;
                destinationAddress: string;
                collectionId: string;
                serialNumbers: string;
            };
            Erc721Withdraw: {
                origin: string;
                collectionIds: string;
                serialNumbers: string;
                destination: string;
            };
            ContractAddressSet: {
                contract: string;
            };
        };
    };
    /**
     * Lookup421: pallet_proxy::pallet::Event<T>
     **/
    PalletProxyEvent: {
        _enum: {
            ProxyExecuted: {
                result: string;
            };
            PureCreated: {
                pure: string;
                who: string;
                proxyType: string;
                disambiguationIndex: string;
            };
            Announced: {
                real: string;
                proxy: string;
                callHash: string;
            };
            ProxyAdded: {
                delegator: string;
                delegatee: string;
                proxyType: string;
                delay: string;
            };
            ProxyRemoved: {
                delegator: string;
                delegatee: string;
                proxyType: string;
                delay: string;
            };
        };
    };
    /**
     * Lookup422: pallet_futurepass::pallet::Event<T>
     **/
    PalletFuturepassEvent: {
        _enum: {
            FuturepassCreated: {
                futurepass: string;
                delegate: string;
            };
            DelegateRegistered: {
                futurepass: string;
                delegate: string;
                proxyType: string;
            };
            DelegateUnregistered: {
                futurepass: string;
                delegate: string;
            };
            FuturepassTransferred: {
                oldOwner: string;
                newOwner: string;
                futurepass: string;
            };
            ProxyExecuted: {
                delegate: string;
                result: string;
            };
        };
    };
    /**
     * Lookup423: frame_system::Phase
     **/
    FrameSystemPhase: {
        _enum: {
            ApplyExtrinsic: string;
            Finalization: string;
            Initialization: string;
        };
    };
    /**
     * Lookup425: frame_system::LastRuntimeUpgradeInfo
     **/
    FrameSystemLastRuntimeUpgradeInfo: {
        specVersion: string;
        specName: string;
    };
    /**
     * Lookup426: frame_system::limits::BlockWeights
     **/
    FrameSystemLimitsBlockWeights: {
        baseBlock: string;
        maxBlock: string;
        perClass: string;
    };
    /**
     * Lookup427: frame_support::dispatch::PerDispatchClass<frame_system::limits::WeightsPerClass>
     **/
    FrameSupportDispatchPerDispatchClassWeightsPerClass: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup428: frame_system::limits::WeightsPerClass
     **/
    FrameSystemLimitsWeightsPerClass: {
        baseExtrinsic: string;
        maxExtrinsic: string;
        maxTotal: string;
        reserved: string;
    };
    /**
     * Lookup430: frame_system::limits::BlockLength
     **/
    FrameSystemLimitsBlockLength: {
        max: string;
    };
    /**
     * Lookup431: frame_support::dispatch::PerDispatchClass<T>
     **/
    FrameSupportDispatchPerDispatchClassU32: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup432: sp_weights::RuntimeDbWeight
     **/
    SpWeightsRuntimeDbWeight: {
        read: string;
        write: string;
    };
    /**
     * Lookup433: sp_version::RuntimeVersion
     **/
    SpVersionRuntimeVersion: {
        specName: string;
        implName: string;
        authoringVersion: string;
        specVersion: string;
        implVersion: string;
        apis: string;
        transactionVersion: string;
        stateVersion: string;
    };
    /**
     * Lookup437: frame_system::pallet::Error<T>
     **/
    FrameSystemError: {
        _enum: string[];
    };
    /**
     * Lookup444: sp_consensus_babe::digests::PreDigest
     **/
    SpConsensusBabeDigestsPreDigest: {
        _enum: {
            __Unused0: string;
            Primary: string;
            SecondaryPlain: string;
            SecondaryVRF: string;
        };
    };
    /**
     * Lookup445: sp_consensus_babe::digests::PrimaryPreDigest
     **/
    SpConsensusBabeDigestsPrimaryPreDigest: {
        authorityIndex: string;
        slot: string;
        vrfSignature: string;
    };
    /**
     * Lookup446: sp_core::sr25519::vrf::VrfSignature
     **/
    SpCoreSr25519VrfVrfSignature: {
        output: string;
        proof: string;
    };
    /**
     * Lookup447: sp_consensus_babe::digests::SecondaryPlainPreDigest
     **/
    SpConsensusBabeDigestsSecondaryPlainPreDigest: {
        authorityIndex: string;
        slot: string;
    };
    /**
     * Lookup448: sp_consensus_babe::digests::SecondaryVRFPreDigest
     **/
    SpConsensusBabeDigestsSecondaryVRFPreDigest: {
        authorityIndex: string;
        slot: string;
        vrfSignature: string;
    };
    /**
     * Lookup449: sp_consensus_babe::BabeEpochConfiguration
     **/
    SpConsensusBabeBabeEpochConfiguration: {
        c: string;
        allowedSlots: string;
    };
    /**
     * Lookup453: pallet_babe::pallet::Error<T>
     **/
    PalletBabeError: {
        _enum: string[];
    };
    /**
     * Lookup456: pallet_scheduler::Scheduled<Name, frame_support::traits::preimages::Bounded<seed_runtime::RuntimeCall>, BlockNumber, seed_runtime::OriginCaller, seed_primitives::signature::AccountId20>
     **/
    PalletSchedulerScheduled: {
        maybeId: string;
        priority: string;
        call: string;
        maybePeriodic: string;
        origin: string;
    };
    /**
     * Lookup457: frame_support::traits::preimages::Bounded<seed_runtime::RuntimeCall>
     **/
    FrameSupportPreimagesBounded: {
        _enum: {
            Legacy: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Inline: string;
            Lookup: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                len: string;
            };
        };
    };
    /**
     * Lookup460: pallet_scheduler::pallet::Error<T>
     **/
    PalletSchedulerError: {
        _enum: string[];
    };
    /**
     * Lookup461: pallet_utility::pallet::Error<T>
     **/
    PalletUtilityError: {
        _enum: string[];
    };
    /**
     * Lookup462: pallet_recovery::RecoveryConfig<BlockNumber, Balance, bounded_collections::bounded_vec::BoundedVec<seed_primitives::signature::AccountId20, S>>
     **/
    PalletRecoveryRecoveryConfig: {
        delayPeriod: string;
        deposit: string;
        friends: string;
        threshold: string;
    };
    /**
     * Lookup465: pallet_recovery::ActiveRecovery<BlockNumber, Balance, bounded_collections::bounded_vec::BoundedVec<seed_primitives::signature::AccountId20, S>>
     **/
    PalletRecoveryActiveRecovery: {
        created: string;
        deposit: string;
        friends: string;
    };
    /**
     * Lookup466: pallet_recovery::pallet::Error<T>
     **/
    PalletRecoveryError: {
        _enum: string[];
    };
    /**
     * Lookup468: pallet_multisig::Multisig<BlockNumber, Balance, seed_primitives::signature::AccountId20, MaxApprovals>
     **/
    PalletMultisigMultisig: {
        when: string;
        deposit: string;
        depositor: string;
        approvals: string;
    };
    /**
     * Lookup470: pallet_multisig::pallet::Error<T>
     **/
    PalletMultisigError: {
        _enum: string[];
    };
    /**
     * Lookup472: pallet_balances::types::BalanceLock<Balance>
     **/
    PalletBalancesBalanceLock: {
        id: string;
        amount: string;
        reasons: string;
    };
    /**
     * Lookup473: pallet_balances::types::Reasons
     **/
    PalletBalancesReasons: {
        _enum: string[];
    };
    /**
     * Lookup476: pallet_balances::types::ReserveData<ReserveIdentifier, Balance>
     **/
    PalletBalancesReserveData: {
        id: string;
        amount: string;
    };
    /**
     * Lookup479: pallet_balances::types::IdAmount<Id, Balance>
     **/
    PalletBalancesIdAmount: {
        id: string;
        amount: string;
    };
    /**
     * Lookup481: pallet_balances::pallet::Error<T, I>
     **/
    PalletBalancesError: {
        _enum: string[];
    };
    /**
     * Lookup482: pallet_assets::types::AssetDetails<Balance, seed_primitives::signature::AccountId20, DepositBalance>
     **/
    PalletAssetsAssetDetails: {
        owner: string;
        issuer: string;
        admin: string;
        freezer: string;
        supply: string;
        deposit: string;
        minBalance: string;
        isSufficient: string;
        accounts: string;
        sufficients: string;
        approvals: string;
        status: string;
    };
    /**
     * Lookup483: pallet_assets::types::AssetStatus
     **/
    PalletAssetsAssetStatus: {
        _enum: string[];
    };
    /**
     * Lookup485: pallet_assets::types::AssetAccount<Balance, DepositBalance, Extra, seed_primitives::signature::AccountId20>
     **/
    PalletAssetsAssetAccount: {
        balance: string;
        status: string;
        reason: string;
        extra: string;
    };
    /**
     * Lookup486: pallet_assets::types::AccountStatus
     **/
    PalletAssetsAccountStatus: {
        _enum: string[];
    };
    /**
     * Lookup487: pallet_assets::types::ExistenceReason<Balance, seed_primitives::signature::AccountId20>
     **/
    PalletAssetsExistenceReason: {
        _enum: {
            Consumer: string;
            Sufficient: string;
            DepositHeld: string;
            DepositRefunded: string;
            DepositFrom: string;
        };
    };
    /**
     * Lookup489: pallet_assets::types::Approval<Balance, DepositBalance>
     **/
    PalletAssetsApproval: {
        amount: string;
        deposit: string;
    };
    /**
     * Lookup490: pallet_assets::types::AssetMetadata<DepositBalance, bounded_collections::bounded_vec::BoundedVec<T, S>>
     **/
    PalletAssetsAssetMetadata: {
        deposit: string;
        name: string;
        symbol: string;
        decimals: string;
        isFrozen: string;
    };
    /**
     * Lookup491: pallet_assets::pallet::Error<T, I>
     **/
    PalletAssetsError: {
        _enum: string[];
    };
    /**
     * Lookup495: frame_support::PalletId
     **/
    FrameSupportPalletId: string;
    /**
     * Lookup496: pallet_assets_ext::pallet::Error<T>
     **/
    PalletAssetsExtError: {
        _enum: string[];
    };
    /**
     * Lookup497: pallet_staking::StakingLedger<T>
     **/
    PalletStakingStakingLedger: {
        stash: string;
        total: string;
        active: string;
        unlocking: string;
        claimedRewards: string;
    };
    /**
     * Lookup499: pallet_staking::UnlockChunk<Balance>
     **/
    PalletStakingUnlockChunk: {
        value: string;
        era: string;
    };
    /**
     * Lookup502: pallet_staking::Nominations<T>
     **/
    PalletStakingNominations: {
        targets: string;
        submittedIn: string;
        suppressed: string;
    };
    /**
     * Lookup504: pallet_staking::ActiveEraInfo
     **/
    PalletStakingActiveEraInfo: {
        index: string;
        start: string;
    };
    /**
     * Lookup506: pallet_staking::EraRewardPoints<seed_primitives::signature::AccountId20>
     **/
    PalletStakingEraRewardPoints: {
        total: string;
        individual: string;
    };
    /**
     * Lookup511: pallet_staking::UnappliedSlash<seed_primitives::signature::AccountId20, Balance>
     **/
    PalletStakingUnappliedSlash: {
        validator: string;
        own: string;
        others: string;
        reporters: string;
        payout: string;
    };
    /**
     * Lookup513: pallet_staking::slashing::SlashingSpans
     **/
    PalletStakingSlashingSlashingSpans: {
        spanIndex: string;
        lastStart: string;
        lastNonzeroSlash: string;
        prior: string;
    };
    /**
     * Lookup514: pallet_staking::slashing::SpanRecord<Balance>
     **/
    PalletStakingSlashingSpanRecord: {
        slashed: string;
        paidOut: string;
    };
    /**
     * Lookup517: pallet_staking::pallet::pallet::Error<T>
     **/
    PalletStakingPalletError: {
        _enum: string[];
    };
    /**
     * Lookup518: sp_staking::offence::OffenceDetails<seed_primitives::signature::AccountId20, Offender>
     **/
    SpStakingOffenceOffenceDetails: {
        offender: string;
        reporters: string;
    };
    /**
     * Lookup523: sp_core::crypto::KeyTypeId
     **/
    SpCoreCryptoKeyTypeId: string;
    /**
     * Lookup524: pallet_session::pallet::Error<T>
     **/
    PalletSessionError: {
        _enum: string[];
    };
    /**
     * Lookup525: pallet_grandpa::StoredState<N>
     **/
    PalletGrandpaStoredState: {
        _enum: {
            Live: string;
            PendingPause: {
                scheduledAt: string;
                delay: string;
            };
            Paused: string;
            PendingResume: {
                scheduledAt: string;
                delay: string;
            };
        };
    };
    /**
     * Lookup526: pallet_grandpa::StoredPendingChange<N, Limit>
     **/
    PalletGrandpaStoredPendingChange: {
        scheduledAt: string;
        delay: string;
        nextAuthorities: string;
        forced: string;
    };
    /**
     * Lookup528: pallet_grandpa::pallet::Error<T>
     **/
    PalletGrandpaError: {
        _enum: string[];
    };
    /**
     * Lookup531: pallet_im_online::pallet::Error<T>
     **/
    PalletImOnlineError: {
        _enum: string[];
    };
    /**
     * Lookup532: pallet_sudo::pallet::Error<T>
     **/
    PalletSudoError: {
        _enum: string[];
    };
    /**
     * Lookup534: pallet_transaction_payment::Releases
     **/
    PalletTransactionPaymentReleases: {
        _enum: string[];
    };
    /**
     * Lookup536: pallet_dex::TradingPairStatus
     **/
    PalletDexTradingPairStatus: {
        _enum: string[];
    };
    /**
     * Lookup538: pallet_dex::pallet::Error<T>
     **/
    PalletDexError: {
        _enum: string[];
    };
    /**
     * Lookup539: pallet_nft::types::CollectionInformation<seed_primitives::signature::AccountId20, StringLimit>
     **/
    PalletNftCollectionInformation: {
        owner: string;
        name: string;
        metadataScheme: string;
        royaltiesSchedule: string;
        maxIssuance: string;
        originChain: string;
        nextSerialNumber: string;
        collectionIssuance: string;
        crossChainCompatibility: string;
    };
    /**
     * Lookup540: pallet_nft::types::TokenInformation<seed_primitives::signature::AccountId20>
     **/
    PalletNftTokenInformation: {
        owner: string;
        lockStatus: string;
        utilityFlags: string;
    };
    /**
     * Lookup542: seed_primitives::nft::TokenLockReason
     **/
    SeedPrimitivesNftTokenLockReason: {
        _enum: {
            Listed: string;
        };
    };
    /**
     * Lookup543: seed_pallet_common::utils::TokenUtilityFlags
     **/
    SeedPalletCommonUtilsTokenUtilityFlags: {
        transferable: string;
        burnAuthority: string;
    };
    /**
     * Lookup545: seed_pallet_common::utils::PublicMintInformation
     **/
    SeedPalletCommonUtilsPublicMintInformation: {
        enabled: string;
        pricingDetails: string;
    };
    /**
     * Lookup546: pallet_nft::types::CollectionPendingIssuances<seed_primitives::signature::AccountId20, MaxPendingIssuances>
     **/
    PalletNftCollectionPendingIssuances: {
        nextIssuanceId: string;
        pendingIssuances: string;
    };
    /**
     * Lookup550: pallet_nft::types::PendingIssuance
     **/
    PalletNftPendingIssuance: {
        issuanceId: string;
        quantity: string;
        burnAuthority: string;
    };
    /**
     * Lookup553: pallet_nft::pallet::Error<T>
     **/
    PalletNftError: {
        _enum: string[];
    };
    /**
     * Lookup554: pallet_sft::types::SftCollectionInformation<seed_primitives::signature::AccountId20, StringLimit>
     **/
    PalletSftSftCollectionInformation: {
        collectionOwner: string;
        collectionName: string;
        metadataScheme: string;
        royaltiesSchedule: string;
        originChain: string;
        nextSerialNumber: string;
    };
    /**
     * Lookup555: pallet_sft::types::SftTokenInformation<seed_primitives::signature::AccountId20, StringLimit, MaxOwnersPerSftToken>
     **/
    PalletSftSftTokenInformation: {
        tokenName: string;
        maxIssuance: string;
        tokenIssuance: string;
        ownedTokens: string;
    };
    /**
     * Lookup558: pallet_sft::types::SftTokenBalance
     **/
    PalletSftSftTokenBalance: {
        freeBalance: string;
        reservedBalance: string;
    };
    /**
     * Lookup560: pallet_sft::types::SftCollectionPendingIssuances<seed_primitives::signature::AccountId20, MaxSerialsPerMint, MaxPendingIssuances>
     **/
    PalletSftSftCollectionPendingIssuances: {
        nextIssuanceId: string;
        pendingIssuances: string;
    };
    /**
     * Lookup564: pallet_sft::types::SftPendingIssuance<MaxSerialsPerMint>
     **/
    PalletSftSftPendingIssuance: {
        issuanceId: string;
        serialNumbers: string;
    };
    /**
     * Lookup567: pallet_sft::pallet::Error<T>
     **/
    PalletSftError: {
        _enum: string[];
    };
    /**
     * Lookup572: pallet_xrpl_bridge::types::DelayedWithdrawal<seed_primitives::signature::AccountId20>
     **/
    PalletXrplBridgeDelayedWithdrawal: {
        sender: string;
        destinationTag: string;
        withdrawTx: string;
    };
    /**
     * Lookup573: pallet_xrpl_bridge::types::WithdrawTransaction
     **/
    PalletXrplBridgeWithdrawTransaction: {
        _enum: {
            XRP: string;
            Asset: string;
        };
    };
    /**
     * Lookup574: pallet_xrpl_bridge::types::XrpWithdrawTransaction
     **/
    PalletXrplBridgeXrpWithdrawTransaction: {
        txFee: string;
        txNonce: string;
        txTicketSequence: string;
        amount: string;
        destination: string;
    };
    /**
     * Lookup575: pallet_xrpl_bridge::types::AssetWithdrawTransaction
     **/
    PalletXrplBridgeAssetWithdrawTransaction: {
        txFee: string;
        txNonce: string;
        txTicketSequence: string;
        amount: string;
        destination: string;
        assetId: string;
        currency: string;
        issuer: string;
    };
    /**
     * Lookup577: pallet_xrpl_bridge::types::XrplTicketSequenceParams
     **/
    PalletXrplBridgeXrplTicketSequenceParams: {
        startSequence: string;
        bucketSize: string;
    };
    /**
     * Lookup578: pallet_xrpl_bridge::pallet::Error<T>
     **/
    PalletXrplBridgeError: {
        _enum: string[];
    };
    /**
     * Lookup579: pallet_xrpl::pallet::Error<T>
     **/
    PalletXrplError: {
        _enum: string[];
    };
    /**
     * Lookup582: pallet_token_approvals::pallet::Error<T>
     **/
    PalletTokenApprovalsError: {
        _enum: string[];
    };
    /**
     * Lookup584: pallet_echo::pallet::Error<T>
     **/
    PalletEchoError: {
        _enum: string[];
    };
    /**
     * Lookup585: pallet_marketplace::types::Marketplace<seed_primitives::signature::AccountId20>
     **/
    PalletMarketplaceMarketplace: {
        account: string;
        entitlement: string;
    };
    /**
     * Lookup586: pallet_marketplace::types::Listing<T>
     **/
    PalletMarketplaceListing: {
        _enum: {
            FixedPrice: string;
            Auction: string;
        };
    };
    /**
     * Lookup587: pallet_marketplace::types::FixedPriceListing<T>
     **/
    PalletMarketplaceFixedPriceListing: {
        paymentAsset: string;
        fixedPrice: string;
        close: string;
        buyer: string;
        seller: string;
        tokens: string;
        royaltiesSchedule: string;
        marketplaceId: string;
    };
    /**
     * Lookup588: pallet_marketplace::types::AuctionListing<T>
     **/
    PalletMarketplaceAuctionListing: {
        paymentAsset: string;
        reservePrice: string;
        close: string;
        seller: string;
        tokens: string;
        royaltiesSchedule: string;
        marketplaceId: string;
    };
    /**
     * Lookup589: pallet_marketplace::types::OfferType<seed_primitives::signature::AccountId20>
     **/
    PalletMarketplaceOfferType: {
        _enum: {
            Simple: string;
        };
    };
    /**
     * Lookup590: pallet_marketplace::types::SimpleOffer<seed_primitives::signature::AccountId20>
     **/
    PalletMarketplaceSimpleOffer: {
        tokenId: string;
        assetId: string;
        amount: string;
        buyer: string;
        marketplaceId: string;
    };
    /**
     * Lookup592: pallet_marketplace::pallet::Error<T>
     **/
    PalletMarketplaceError: {
        _enum: string[];
    };
    /**
     * Lookup593: pallet_preimage::RequestStatus<seed_primitives::signature::AccountId20, Balance>
     **/
    PalletPreimageRequestStatus: {
        _enum: {
            Unrequested: {
                deposit: string;
                len: string;
            };
            Requested: {
                deposit: string;
                count: string;
                len: string;
            };
        };
    };
    /**
     * Lookup596: pallet_preimage::pallet::Error<T>
     **/
    PalletPreimageError: {
        _enum: string[];
    };
    /**
     * Lookup597: pallet_vortex_distribution::VtxDistStatus
     **/
    PalletVortexDistributionVtxDistStatus: {
        _enum: string[];
    };
    /**
     * Lookup600: pallet_vortex_distribution::pallet::Error<T>
     **/
    PalletVortexDistributionError: {
        _enum: string[];
    };
    /**
     * Lookup601: pallet_partner_attribution::pallet::Error<T>
     **/
    PalletPartnerAttributionError: {
        _enum: string[];
    };
    /**
     * Lookup602: pallet_fee_proxy::pallet::Error<T>
     **/
    PalletFeeProxyError: {
        _enum: string[];
    };
    /**
     * Lookup603: pallet_fee_control::FeeControlFeeConfig
     **/
    PalletFeeControlFeeControlFeeConfig: {
        evmBaseFeePerGas: string;
        weightMultiplier: string;
        lengthMultiplier: string;
    };
    /**
     * Lookup604: pallet_xls20::pallet::Error<T>
     **/
    PalletXls20Error: {
        _enum: string[];
    };
    /**
     * Lookup605: pallet_doughnut::pallet::Error<T>
     **/
    PalletDoughnutError: {
        _enum: string[];
    };
    /**
     * Lookup607: pallet_maintenance_mode::pallet::Error<T>
     **/
    PalletMaintenanceModeError: {
        _enum: string[];
    };
    /**
     * Lookup611: pallet_crowdsale::pallet::Error<T>
     **/
    PalletCrowdsaleError: {
        _enum: string[];
    };
    /**
     * Lookup615: pallet_nfi::pallet::Error<T>
     **/
    PalletNfiError: {
        _enum: string[];
    };
    /**
     * Lookup616: pallet_migration::MigrationStatus
     **/
    PalletMigrationMigrationStatus: {
        _enum: {
            NoMigrationInProgress: string;
            InProgress: {
                stepsDone: string;
            };
            Completed: string;
        };
    };
    /**
     * Lookup617: pallet_migration::pallet::Error<T>
     **/
    PalletMigrationError: {
        _enum: string[];
    };
    /**
     * Lookup618: seed_pallet_common::sylo::Resolver<seed_primitives::signature::AccountId20, MaxServiceEndpoints, StringLimit>
     **/
    SeedPalletCommonSyloResolver: {
        controller: string;
        serviceEndpoints: string;
    };
    /**
     * Lookup620: seed_pallet_common::sylo::ValidationRecord<seed_primitives::signature::AccountId20, BlockNumber, MaxResolvers, MaxTags, MaxEntries, StringLimit>
     **/
    SeedPalletCommonSyloValidationRecord: {
        _alias: {
            entries_: string;
        };
        author: string;
        resolvers: string;
        dataType: string;
        tags: string;
        entries_: string;
    };
    /**
     * Lookup622: seed_pallet_common::sylo::ValidationEntry<BlockNumber>
     **/
    SeedPalletCommonSyloValidationEntry: {
        checksum: string;
        block: string;
    };
    /**
     * Lookup624: pallet_sylo_data_verification::pallet::Error<T>
     **/
    PalletSyloDataVerificationError: {
        _enum: string[];
    };
    /**
     * Lookup625: pallet_liquidity_pools::types::PoolInfo<PoolId, AssetId, Balance, BlockNumber>
     **/
    PalletLiquidityPoolsPoolInfo: {
        id: string;
        creator: string;
        rewardAssetId: string;
        stakedAssetId: string;
        interestRate: string;
        maxTokens: string;
        lastUpdated: string;
        lockStartBlock: string;
        lockEndBlock: string;
        lockedAmount: string;
        poolStatus: string;
    };
    /**
     * Lookup626: pallet_liquidity_pools::types::PoolStatus
     **/
    PalletLiquidityPoolsPoolStatus: {
        _enum: string[];
    };
    /**
     * Lookup627: pallet_liquidity_pools::types::UserInfo<Balance>
     **/
    PalletLiquidityPoolsUserInfo: {
        amount: string;
        rewardDebt: string;
        shouldRollover: string;
        rolledOver: string;
    };
    /**
     * Lookup628: pallet_liquidity_pools::types::PoolRelationship<PoolId>
     **/
    PalletLiquidityPoolsPoolRelationship: {
        successorId: string;
    };
    /**
     * Lookup629: pallet_liquidity_pools::pallet::Error<T>
     **/
    PalletLiquidityPoolsError: {
        _enum: string[];
    };
    /**
     * Lookup633: pallet_sylo_data_permissions::types::PermissionRecord<seed_primitives::signature::AccountId20, BlockNumber>
     **/
    PalletSyloDataPermissionsPermissionRecord: {
        grantor: string;
        permission: string;
        block: string;
        expiry: string;
        irrevocable: string;
    };
    /**
     * Lookup640: pallet_sylo_data_permissions::types::TaggedPermissionRecord<BlockNumber, MaxTags, StringLimit>
     **/
    PalletSyloDataPermissionsTaggedPermissionRecord: {
        permission: string;
        tags: string;
        block: string;
        expiry: string;
        irrevocable: string;
    };
    /**
     * Lookup645: pallet_sylo_data_permissions::types::PermissionReference<StringLimit>
     **/
    PalletSyloDataPermissionsPermissionReference: {
        permissionRecordId: string;
    };
    /**
     * Lookup646: pallet_sylo_data_permissions::pallet::Error<T>
     **/
    PalletSyloDataPermissionsError: {
        _enum: string[];
    };
    /**
     * Lookup647: pallet_sylo_action_permissions::types::TransactPermission<BlockNumber, MaxCallIds, StringLimit>
     **/
    PalletSyloActionPermissionsTransactPermission: {
        spender: string;
        spendingBalance: string;
        allowedCalls: string;
        block: string;
        expiry: string;
    };
    /**
     * Lookup648: pallet_sylo_action_permissions::pallet::Error<T>
     **/
    PalletSyloActionPermissionsError: {
        _enum: string[];
    };
    /**
     * Lookup649: pallet_election_provider_multi_phase::ReadySolution<AccountId, MaxWinners>
     **/
    PalletElectionProviderMultiPhaseReadySolution: {
        supports: string;
        score: string;
        compute: string;
    };
    /**
     * Lookup651: pallet_election_provider_multi_phase::RoundSnapshot<seed_primitives::signature::AccountId20, DataProvider>
     **/
    PalletElectionProviderMultiPhaseRoundSnapshot: {
        voters: string;
        targets: string;
    };
    /**
     * Lookup657: pallet_election_provider_multi_phase::signed::SignedSubmission<seed_primitives::signature::AccountId20, Balance, seed_runtime::NposCompactSolution16>
     **/
    PalletElectionProviderMultiPhaseSignedSignedSubmission: {
        who: string;
        deposit: string;
        rawSolution: string;
        callFee: string;
    };
    /**
     * Lookup658: pallet_election_provider_multi_phase::pallet::Error<T>
     **/
    PalletElectionProviderMultiPhaseError: {
        _enum: string[];
    };
    /**
     * Lookup659: pallet_bags_list::list::Node<T, I>
     **/
    PalletBagsListListNode: {
        id: string;
        prev: string;
        next: string;
        bagUpper: string;
        score: string;
    };
    /**
     * Lookup660: pallet_bags_list::list::Bag<T, I>
     **/
    PalletBagsListListBag: {
        head: string;
        tail: string;
    };
    /**
     * Lookup661: pallet_bags_list::pallet::Error<T, I>
     **/
    PalletBagsListError: {
        _enum: {
            List: string;
        };
    };
    /**
     * Lookup662: pallet_bags_list::list::ListError
     **/
    PalletBagsListListListError: {
        _enum: string[];
    };
    /**
     * Lookup665: fp_rpc::TransactionStatus
     **/
    FpRpcTransactionStatus: {
        transactionHash: string;
        transactionIndex: string;
        from: string;
        to: string;
        contractAddress: string;
        logs: string;
        logsBloom: string;
    };
    /**
     * Lookup667: ethbloom::Bloom
     **/
    EthbloomBloom: string;
    /**
     * Lookup669: ethereum::receipt::ReceiptV3
     **/
    EthereumReceiptReceiptV3: {
        _enum: {
            Legacy: string;
            EIP2930: string;
            EIP1559: string;
        };
    };
    /**
     * Lookup670: ethereum::receipt::EIP658ReceiptData
     **/
    EthereumReceiptEip658ReceiptData: {
        statusCode: string;
        usedGas: string;
        logsBloom: string;
        logs: string;
    };
    /**
     * Lookup671: ethereum::block::Block<ethereum::transaction::TransactionV2>
     **/
    EthereumBlock: {
        header: string;
        transactions: string;
        ommers: string;
    };
    /**
     * Lookup672: ethereum::header::Header
     **/
    EthereumHeader: {
        parentHash: string;
        ommersHash: string;
        beneficiary: string;
        stateRoot: string;
        transactionsRoot: string;
        receiptsRoot: string;
        logsBloom: string;
        difficulty: string;
        number: string;
        gasLimit: string;
        gasUsed: string;
        timestamp: string;
        extraData: string;
        mixHash: string;
        nonce: string;
    };
    /**
     * Lookup673: ethereum_types::hash::H64
     **/
    EthereumTypesHashH64: string;
    /**
     * Lookup678: pallet_ethereum::pallet::Error<T>
     **/
    PalletEthereumError: {
        _enum: string[];
    };
    /**
     * Lookup679: pallet_evm::CodeMetadata
     **/
    PalletEvmCodeMetadata: {
        _alias: {
            size_: string;
            hash_: string;
        };
        size_: string;
        hash_: string;
    };
    /**
     * Lookup681: pallet_evm::pallet::Error<T>
     **/
    PalletEvmError: {
        _enum: string[];
    };
    /**
     * Lookup682: pallet_ethy::types::BridgePauseStatus
     **/
    PalletEthyBridgePauseStatus: {
        manualPause: string;
        authoritiesChange: string;
    };
    /**
     * Lookup685: pallet_ethy::types::EventClaimStatus
     **/
    PalletEthyEventClaimStatus: {
        _enum: string[];
    };
    /**
     * Lookup692: pallet_ethy::types::CheckedEthCallRequest<MaxEthData>
     **/
    PalletEthyCheckedEthCallRequest: {
        input: string;
        target: string;
        timestamp: string;
        maxBlockLookBehind: string;
        tryBlockNumber: string;
        checkTimestamp: string;
    };
    /**
     * Lookup693: pallet_ethy::pallet::Error<T>
     **/
    PalletEthyError: {
        _enum: string[];
    };
    /**
     * Lookup695: pallet_erc20_peg::types::PendingPayment<seed_primitives::signature::AccountId20>
     **/
    PalletErc20PegPendingPayment: {
        _enum: {
            Deposit: string;
            Withdrawal: string;
        };
    };
    /**
     * Lookup696: pallet_erc20_peg::types::Erc20DepositEvent
     **/
    PalletErc20PegErc20DepositEvent: {
        tokenAddress: string;
        amount: string;
        beneficiary: string;
    };
    /**
     * Lookup698: pallet_erc20_peg::types::WithdrawMessage
     **/
    PalletErc20PegWithdrawMessage: {
        tokenAddress: string;
        amount: string;
        beneficiary: string;
    };
    /**
     * Lookup701: pallet_erc20_peg::pallet::Error<T>
     **/
    PalletErc20PegError: {
        _enum: string[];
    };
    /**
     * Lookup702: pallet_nft_peg::types::BlockedTokenInfo<T>
     **/
    PalletNftPegBlockedTokenInfo: {
        collectionId: string;
        destinationAddress: string;
        serialNumbers: string;
    };
    /**
     * Lookup703: pallet_nft_peg::pallet::Error<T>
     **/
    PalletNftPegError: {
        _enum: string[];
    };
    /**
     * Lookup706: pallet_proxy::ProxyDefinition<seed_primitives::signature::AccountId20, seed_runtime::impls::ProxyType, BlockNumber>
     **/
    PalletProxyProxyDefinition: {
        delegate: string;
        proxyType: string;
        delay: string;
    };
    /**
     * Lookup710: pallet_proxy::Announcement<seed_primitives::signature::AccountId20, primitive_types::H256, BlockNumber>
     **/
    PalletProxyAnnouncement: {
        real: string;
        callHash: string;
        height: string;
    };
    /**
     * Lookup712: pallet_proxy::pallet::Error<T>
     **/
    PalletProxyError: {
        _enum: string[];
    };
    /**
     * Lookup713: pallet_futurepass::pallet::Error<T>
     **/
    PalletFuturepassError: {
        _enum: string[];
    };
    /**
     * Lookup715: seed_primitives::signature::EthereumSignature
     **/
    SeedPrimitivesSignatureEthereumSignature: string;
    /**
     * Lookup717: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
     **/
    FrameSystemExtensionsCheckNonZeroSender: string;
    /**
     * Lookup718: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
     **/
    FrameSystemExtensionsCheckSpecVersion: string;
    /**
     * Lookup719: frame_system::extensions::check_tx_version::CheckTxVersion<T>
     **/
    FrameSystemExtensionsCheckTxVersion: string;
    /**
     * Lookup720: frame_system::extensions::check_genesis::CheckGenesis<T>
     **/
    FrameSystemExtensionsCheckGenesis: string;
    /**
     * Lookup723: frame_system::extensions::check_nonce::CheckNonce<T>
     **/
    FrameSystemExtensionsCheckNonce: string;
    /**
     * Lookup724: frame_system::extensions::check_weight::CheckWeight<T>
     **/
    FrameSystemExtensionsCheckWeight: string;
    /**
     * Lookup725: pallet_maintenance_mode::MaintenanceChecker<T>
     **/
    PalletMaintenanceModeMaintenanceChecker: string;
    /**
     * Lookup726: pallet_transaction_payment::ChargeTransactionPayment<T>
     **/
    PalletTransactionPaymentChargeTransactionPayment: string;
    /**
     * Lookup728: seed_runtime::Runtime
     **/
    SeedRuntimeRuntime: string;
};
export default _default;
